cscope 15 $HOME\Documents\EmBitz\Projects\GPIO"               0000987214
	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\misc.h

24 #i‚de‡
__MISC_H


25 
	#__MISC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

50 
uöt8_t
 
NVIC_IRQCh™√l
;

55 
uöt8_t
 
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

60 
uöt8_t
 
NVIC_IRQCh™√lSubPri‹ôy
;

65 
Fun˘i⁄ÆSèã
 
NVIC_IRQCh™√lCmd
;

68 } 
	tNVIC_InôTy≥Def
;

80 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

81 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

82 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
) || \

83 ((
VECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

	)

92 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

93 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

94 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

95 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
) || \

96 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

97 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

	)

106 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

108 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

110 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

112 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

114 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

117 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
) || \

118 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

119 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

120 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

121 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

	)

123 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

125 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

127 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x000FFFFF)

	)

137 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

138 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

139 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
) || \

140 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

	)

152 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

153 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

154 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

155 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

156 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

158 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_adc.h

24 #i‚de‡
__STM32F4xx_ADC_H


25 
	#__STM32F4xx_ADC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

49 
uöt32_t
 
ADC_Resﬁuti⁄
;

51 
Fun˘i⁄ÆSèã
 
ADC_SˇnC⁄vMode
;

55 
Fun˘i⁄ÆSèã
 
ADC_C⁄töuousC⁄vMode
;

58 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄vEdge
;

62 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄v
;

66 
uöt32_t
 
ADC_D©aAlign
;

69 
uöt8_t
 
ADC_NbrOfC⁄vîsi⁄
;

73 }
	tADC_InôTy≥Def
;

80 
uöt32_t
 
ADC_Mode
;

83 
uöt32_t
 
ADC_PªsˇÀr
;

86 
uöt32_t
 
ADC_DMAAc˚ssMode
;

90 
uöt32_t
 
ADC_TwoSam∂ögDñay
;

94 }
	tADC_Comm⁄InôTy≥Def
;

102 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
) || \

103 ((
PERIPH
Ë=
ADC2
) || \

104 ((
PERIPH
Ë=
ADC3
))

	)

109 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000)

	)

110 
	#ADC_DuÆMode_RegSimu…_InjecSimu…
 ((
uöt32_t
)0x00000001)

	)

111 
	#ADC_DuÆMode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00000002)

	)

112 
	#ADC_DuÆMode_InjecSimu…
 ((
uöt32_t
)0x00000005)

	)

113 
	#ADC_DuÆMode_RegSimu…
 ((
uöt32_t
)0x00000006)

	)

114 
	#ADC_DuÆMode_I¡îl
 ((
uöt32_t
)0x00000007)

	)

115 
	#ADC_DuÆMode_A…îTrig
 ((
uöt32_t
)0x00000009)

	)

116 
	#ADC_TrùÀMode_RegSimu…_InjecSimu…
 ((
uöt32_t
)0x00000011)

	)

117 
	#ADC_TrùÀMode_RegSimu…_A…îTrig
 ((
uöt32_t
)0x00000012)

	)

118 
	#ADC_TrùÀMode_InjecSimu…
 ((
uöt32_t
)0x00000015)

	)

119 
	#ADC_TrùÀMode_RegSimu…
 ((
uöt32_t
)0x00000016)

	)

120 
	#ADC_TrùÀMode_I¡îl
 ((
uöt32_t
)0x00000017)

	)

121 
	#ADC_TrùÀMode_A…îTrig
 ((
uöt32_t
)0x00000019)

	)

122 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
) || \

123 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…_InjecSimu…
) || \

124 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…_A…îTrig
) || \

125 ((
MODE
Ë=
ADC_DuÆMode_InjecSimu…
) || \

126 ((
MODE
Ë=
ADC_DuÆMode_RegSimu…
) || \

127 ((
MODE
Ë=
ADC_DuÆMode_I¡îl
) || \

128 ((
MODE
Ë=
ADC_DuÆMode_A…îTrig
) || \

129 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…_InjecSimu…
) || \

130 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…_A…îTrig
) || \

131 ((
MODE
Ë=
ADC_TrùÀMode_InjecSimu…
) || \

132 ((
MODE
Ë=
ADC_TrùÀMode_RegSimu…
) || \

133 ((
MODE
Ë=
ADC_TrùÀMode_I¡îl
) || \

134 ((
MODE
Ë=
ADC_TrùÀMode_A…îTrig
))

	)

143 
	#ADC_PªsˇÀr_Div2
 ((
uöt32_t
)0x00000000)

	)

144 
	#ADC_PªsˇÀr_Div4
 ((
uöt32_t
)0x00010000)

	)

145 
	#ADC_PªsˇÀr_Div6
 ((
uöt32_t
)0x00020000)

	)

146 
	#ADC_PªsˇÀr_Div8
 ((
uöt32_t
)0x00030000)

	)

147 
	#IS_ADC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
ADC_PªsˇÀr_Div2
) || \

148 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div4
) || \

149 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div6
) || \

150 ((
PRESCALER
Ë=
ADC_PªsˇÀr_Div8
))

	)

159 
	#ADC_DMAAc˚ssMode_DißbÀd
 ((
uöt32_t
)0x00000000Ë

	)

160 
	#ADC_DMAAc˚ssMode_1
 ((
uöt32_t
)0x00004000Ë

	)

161 
	#ADC_DMAAc˚ssMode_2
 ((
uöt32_t
)0x00008000Ë

	)

162 
	#ADC_DMAAc˚ssMode_3
 ((
uöt32_t
)0x0000C000Ë

	)

163 
	#IS_ADC_DMA_ACCESS_MODE
(
MODE
Ë(((MODEË=
ADC_DMAAc˚ssMode_DißbÀd
) || \

164 ((
MODE
Ë=
ADC_DMAAc˚ssMode_1
) || \

165 ((
MODE
Ë=
ADC_DMAAc˚ssMode_2
) || \

166 ((
MODE
Ë=
ADC_DMAAc˚ssMode_3
))

	)

176 
	#ADC_TwoSam∂ögDñay_5Cy˛es
 ((
uöt32_t
)0x00000000)

	)

177 
	#ADC_TwoSam∂ögDñay_6Cy˛es
 ((
uöt32_t
)0x00000100)

	)

178 
	#ADC_TwoSam∂ögDñay_7Cy˛es
 ((
uöt32_t
)0x00000200)

	)

179 
	#ADC_TwoSam∂ögDñay_8Cy˛es
 ((
uöt32_t
)0x00000300)

	)

180 
	#ADC_TwoSam∂ögDñay_9Cy˛es
 ((
uöt32_t
)0x00000400)

	)

181 
	#ADC_TwoSam∂ögDñay_10Cy˛es
 ((
uöt32_t
)0x00000500)

	)

182 
	#ADC_TwoSam∂ögDñay_11Cy˛es
 ((
uöt32_t
)0x00000600)

	)

183 
	#ADC_TwoSam∂ögDñay_12Cy˛es
 ((
uöt32_t
)0x00000700)

	)

184 
	#ADC_TwoSam∂ögDñay_13Cy˛es
 ((
uöt32_t
)0x00000800)

	)

185 
	#ADC_TwoSam∂ögDñay_14Cy˛es
 ((
uöt32_t
)0x00000900)

	)

186 
	#ADC_TwoSam∂ögDñay_15Cy˛es
 ((
uöt32_t
)0x00000A00)

	)

187 
	#ADC_TwoSam∂ögDñay_16Cy˛es
 ((
uöt32_t
)0x00000B00)

	)

188 
	#ADC_TwoSam∂ögDñay_17Cy˛es
 ((
uöt32_t
)0x00000C00)

	)

189 
	#ADC_TwoSam∂ögDñay_18Cy˛es
 ((
uöt32_t
)0x00000D00)

	)

190 
	#ADC_TwoSam∂ögDñay_19Cy˛es
 ((
uöt32_t
)0x00000E00)

	)

191 
	#ADC_TwoSam∂ögDñay_20Cy˛es
 ((
uöt32_t
)0x00000F00)

	)

192 
	#IS_ADC_SAMPLING_DELAY
(
DELAY
Ë(((DELAYË=
ADC_TwoSam∂ögDñay_5Cy˛es
) || \

193 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_6Cy˛es
) || \

194 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_7Cy˛es
) || \

195 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_8Cy˛es
) || \

196 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_9Cy˛es
) || \

197 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_10Cy˛es
) || \

198 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_11Cy˛es
) || \

199 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_12Cy˛es
) || \

200 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_13Cy˛es
) || \

201 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_14Cy˛es
) || \

202 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_15Cy˛es
) || \

203 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_16Cy˛es
) || \

204 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_17Cy˛es
) || \

205 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_18Cy˛es
) || \

206 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_19Cy˛es
) || \

207 ((
DELAY
Ë=
ADC_TwoSam∂ögDñay_20Cy˛es
))

	)

217 
	#ADC_Resﬁuti⁄_12b
 ((
uöt32_t
)0x00000000)

	)

218 
	#ADC_Resﬁuti⁄_10b
 ((
uöt32_t
)0x01000000)

	)

219 
	#ADC_Resﬁuti⁄_8b
 ((
uöt32_t
)0x02000000)

	)

220 
	#ADC_Resﬁuti⁄_6b
 ((
uöt32_t
)0x03000000)

	)

221 
	#IS_ADC_RESOLUTION
(
RESOLUTION
Ë(((RESOLUTIONË=
ADC_Resﬁuti⁄_12b
) || \

222 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_10b
) || \

223 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_8b
) || \

224 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_6b
))

	)

234 
	#ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
 ((
uöt32_t
)0x00000000)

	)

235 
	#ADC_Exã∫ÆTrigC⁄vEdge_Risög
 ((
uöt32_t
)0x10000000)

	)

236 
	#ADC_Exã∫ÆTrigC⁄vEdge_FÆlög
 ((
uöt32_t
)0x20000000)

	)

237 
	#ADC_Exã∫ÆTrigC⁄vEdge_RisögFÆlög
 ((
uöt32_t
)0x30000000)

	)

238 
	#IS_ADC_EXT_TRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
) || \

239 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_Risög
) || \

240 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_FÆlög
) || \

241 ((
EDGE
Ë=
ADC_Exã∫ÆTrigC⁄vEdge_RisögFÆlög
))

	)

250 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC1
 ((
uöt32_t
)0x00000000)

	)

251 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC2
 ((
uöt32_t
)0x01000000)

	)

252 
	#ADC_Exã∫ÆTrigC⁄v_T1_CC3
 ((
uöt32_t
)0x02000000)

	)

253 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC2
 ((
uöt32_t
)0x03000000)

	)

254 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC3
 ((
uöt32_t
)0x04000000)

	)

255 
	#ADC_Exã∫ÆTrigC⁄v_T2_CC4
 ((
uöt32_t
)0x05000000)

	)

256 
	#ADC_Exã∫ÆTrigC⁄v_T2_TRGO
 ((
uöt32_t
)0x06000000)

	)

257 
	#ADC_Exã∫ÆTrigC⁄v_T3_CC1
 ((
uöt32_t
)0x07000000)

	)

258 
	#ADC_Exã∫ÆTrigC⁄v_T3_TRGO
 ((
uöt32_t
)0x08000000)

	)

259 
	#ADC_Exã∫ÆTrigC⁄v_T4_CC4
 ((
uöt32_t
)0x09000000)

	)

260 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC1
 ((
uöt32_t
)0x0A000000)

	)

261 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC2
 ((
uöt32_t
)0x0B000000)

	)

262 
	#ADC_Exã∫ÆTrigC⁄v_T5_CC3
 ((
uöt32_t
)0x0C000000)

	)

263 
	#ADC_Exã∫ÆTrigC⁄v_T8_CC1
 ((
uöt32_t
)0x0D000000)

	)

264 
	#ADC_Exã∫ÆTrigC⁄v_T8_TRGO
 ((
uöt32_t
)0x0E000000)

	)

265 
	#ADC_Exã∫ÆTrigC⁄v_Ext_IT11
 ((
uöt32_t
)0x0F000000)

	)

266 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄v_T1_CC1
) || \

267 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC2
) || \

268 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T1_CC3
) || \

269 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC2
) || \

270 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC3
) || \

271 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_CC4
) || \

272 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T2_TRGO
) || \

273 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_CC1
) || \

274 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T3_TRGO
) || \

275 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T4_CC4
) || \

276 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC1
) || \

277 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC2
) || \

278 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T5_CC3
) || \

279 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_CC1
) || \

280 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_T8_TRGO
) || \

281 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄v_Ext_IT11
))

	)

290 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000)

	)

291 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000800)

	)

292 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
) || \

293 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

	)

302 
	#ADC_Ch™√l_0
 ((
uöt8_t
)0x00)

	)

303 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01)

	)

304 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02)

	)

305 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03)

	)

306 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04)

	)

307 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05)

	)

308 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06)

	)

309 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07)

	)

310 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08)

	)

311 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09)

	)

312 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0A)

	)

313 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0B)

	)

314 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0C)

	)

315 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0D)

	)

316 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0E)

	)

317 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0F)

	)

318 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10)

	)

319 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11)

	)

320 
	#ADC_Ch™√l_18
 ((
uöt8_t
)0x12)

	)

322 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_16
)

	)

323 
	#ADC_Ch™√l_Vªföt
 ((
uöt8_t
)
ADC_Ch™√l_17
)

	)

324 
	#ADC_Ch™√l_Vb©
 ((
uöt8_t
)
ADC_Ch™√l_18
)

	)

326 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_0
) || \

327 ((
CHANNEL
Ë=
ADC_Ch™√l_1
) || \

328 ((
CHANNEL
Ë=
ADC_Ch™√l_2
) || \

329 ((
CHANNEL
Ë=
ADC_Ch™√l_3
) || \

330 ((
CHANNEL
Ë=
ADC_Ch™√l_4
) || \

331 ((
CHANNEL
Ë=
ADC_Ch™√l_5
) || \

332 ((
CHANNEL
Ë=
ADC_Ch™√l_6
) || \

333 ((
CHANNEL
Ë=
ADC_Ch™√l_7
) || \

334 ((
CHANNEL
Ë=
ADC_Ch™√l_8
) || \

335 ((
CHANNEL
Ë=
ADC_Ch™√l_9
) || \

336 ((
CHANNEL
Ë=
ADC_Ch™√l_10
) || \

337 ((
CHANNEL
Ë=
ADC_Ch™√l_11
) || \

338 ((
CHANNEL
Ë=
ADC_Ch™√l_12
) || \

339 ((
CHANNEL
Ë=
ADC_Ch™√l_13
) || \

340 ((
CHANNEL
Ë=
ADC_Ch™√l_14
) || \

341 ((
CHANNEL
Ë=
ADC_Ch™√l_15
) || \

342 ((
CHANNEL
Ë=
ADC_Ch™√l_16
) || \

343 ((
CHANNEL
Ë=
ADC_Ch™√l_17
) || \

344 ((
CHANNEL
Ë=
ADC_Ch™√l_18
))

	)

353 
	#ADC_Sam∂eTime_3Cy˛es
 ((
uöt8_t
)0x00)

	)

354 
	#ADC_Sam∂eTime_15Cy˛es
 ((
uöt8_t
)0x01)

	)

355 
	#ADC_Sam∂eTime_28Cy˛es
 ((
uöt8_t
)0x02)

	)

356 
	#ADC_Sam∂eTime_56Cy˛es
 ((
uöt8_t
)0x03)

	)

357 
	#ADC_Sam∂eTime_84Cy˛es
 ((
uöt8_t
)0x04)

	)

358 
	#ADC_Sam∂eTime_112Cy˛es
 ((
uöt8_t
)0x05)

	)

359 
	#ADC_Sam∂eTime_144Cy˛es
 ((
uöt8_t
)0x06)

	)

360 
	#ADC_Sam∂eTime_480Cy˛es
 ((
uöt8_t
)0x07)

	)

361 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_3Cy˛es
) || \

362 ((
TIME
Ë=
ADC_Sam∂eTime_15Cy˛es
) || \

363 ((
TIME
Ë=
ADC_Sam∂eTime_28Cy˛es
) || \

364 ((
TIME
Ë=
ADC_Sam∂eTime_56Cy˛es
) || \

365 ((
TIME
Ë=
ADC_Sam∂eTime_84Cy˛es
) || \

366 ((
TIME
Ë=
ADC_Sam∂eTime_112Cy˛es
) || \

367 ((
TIME
Ë=
ADC_Sam∂eTime_144Cy˛es
) || \

368 ((
TIME
Ë=
ADC_Sam∂eTime_480Cy˛es
))

	)

377 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_N⁄e
 ((
uöt32_t
)0x00000000)

	)

378 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_Risög
 ((
uöt32_t
)0x00100000)

	)

379 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_FÆlög
 ((
uöt32_t
)0x00200000)

	)

380 
	#ADC_Exã∫ÆTrigInjecC⁄vEdge_RisögFÆlög
 ((
uöt32_t
)0x00300000)

	)

381 
	#IS_ADC_EXT_INJEC_TRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_Exã∫ÆTrigInjecC⁄vEdge_N⁄e
) || \

382 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_Risög
) || \

383 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_FÆlög
) || \

384 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEdge_RisögFÆlög
))

	)

394 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
 ((
uöt32_t
)0x00000000)

	)

395 
	#ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
 ((
uöt32_t
)0x00010000)

	)

396 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
 ((
uöt32_t
)0x00020000)

	)

397 
	#ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
 ((
uöt32_t
)0x00030000)

	)

398 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC2
 ((
uöt32_t
)0x00040000)

	)

399 
	#ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
 ((
uöt32_t
)0x00050000)

	)

400 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC1
 ((
uöt32_t
)0x00060000)

	)

401 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC2
 ((
uöt32_t
)0x00070000)

	)

402 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
 ((
uöt32_t
)0x00080000)

	)

403 
	#ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
 ((
uöt32_t
)0x00090000)

	)

404 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
 ((
uöt32_t
)0x000A0000)

	)

405 
	#ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
 ((
uöt32_t
)0x000B0000)

	)

406 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
 ((
uöt32_t
)0x000C0000)

	)

407 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC3
 ((
uöt32_t
)0x000D0000)

	)

408 
	#ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
 ((
uöt32_t
)0x000E0000)

	)

409 
	#ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15
 ((
uöt32_t
)0x000F0000)

	)

410 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄v_T1_CC4
) || \

411 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T1_TRGO
) || \

412 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_CC1
) || \

413 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T2_TRGO
) || \

414 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC2
) || \

415 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T3_CC4
) || \

416 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC1
) || \

417 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC2
) || \

418 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_CC3
) || \

419 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T4_TRGO
) || \

420 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_CC4
) || \

421 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T5_TRGO
) || \

422 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC2
) || \

423 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC3
) || \

424 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_T8_CC4
) || \

425 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄v_Ext_IT15
))

	)

434 
	#ADC_Inje˘edCh™√l_1
 ((
uöt8_t
)0x14)

	)

435 
	#ADC_Inje˘edCh™√l_2
 ((
uöt8_t
)0x18)

	)

436 
	#ADC_Inje˘edCh™√l_3
 ((
uöt8_t
)0x1C)

	)

437 
	#ADC_Inje˘edCh™√l_4
 ((
uöt8_t
)0x20)

	)

438 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
) || \

439 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

440 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

441 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

	)

450 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00800200)

	)

451 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x00400200)

	)

452 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x00C00200)

	)

453 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000)

	)

454 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x00400000)

	)

455 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x00C00000)

	)

456 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000)

	)

457 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
) || \

458 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

459 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

460 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

461 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

462 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

463 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

	)

472 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0205)

	)

473 
	#ADC_IT_AWD
 ((
uöt16_t
)0x0106)

	)

474 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0407)

	)

475 
	#ADC_IT_OVR
 ((
uöt16_t
)0x201A)

	)

476 
	#IS_ADC_IT
(
IT
Ë(((ITË=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_AWD
) || \

477 ((
IT
Ë=
ADC_IT_JEOC
)|| ((ITË=
ADC_IT_OVR
))

	)

486 
	#ADC_FLAG_AWD
 ((
uöt8_t
)0x01)

	)

487 
	#ADC_FLAG_EOC
 ((
uöt8_t
)0x02)

	)

488 
	#ADC_FLAG_JEOC
 ((
uöt8_t
)0x04)

	)

489 
	#ADC_FLAG_JSTRT
 ((
uöt8_t
)0x08)

	)

490 
	#ADC_FLAG_STRT
 ((
uöt8_t
)0x10)

	)

491 
	#ADC_FLAG_OVR
 ((
uöt8_t
)0x20)

	)

493 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt8_t
)0xC0Ë=0x00Ë&& ((FLAGË!0x00))

	)

494 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_AWD
) || \

495 ((
FLAG
Ë=
ADC_FLAG_EOC
) || \

496 ((
FLAG
Ë=
ADC_FLAG_JEOC
) || \

497 ((
FLAG
)=
ADC_FLAG_JSTRT
) || \

498 ((
FLAG
Ë=
ADC_FLAG_STRT
) || \

499 ((
FLAG
)=
ADC_FLAG_OVR
))

	)

508 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

517 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

526 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

535 
	#IS_ADC_INJECTED_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x4))

	)

544 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

553 
	#IS_ADC_REGULAR_RANK
(
RANK
Ë(((RANKË>0x1Ë&& ((RANKË<0x10))

	)

562 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

576 
ADC_DeInô
();

579 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

580 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

581 
ADC_Comm⁄Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
);

582 
ADC_Comm⁄Såu˘Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
);

583 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

586 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

587 
ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,uöt16_à
LowThªshﬁd
);

588 
ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

591 
ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

592 
ADC_VBATCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

595 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

596 
ADC_So·w¨eSèπC⁄v
(
ADC_Ty≥Def
* 
ADCx
);

597 
FœgSètus
 
ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
);

598 
ADC_EOCOnEachReguœrCh™√lCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

599 
ADC_C⁄töuousModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

600 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

601 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

602 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

603 
uöt32_t
 
ADC_GëMu…iModeC⁄vîsi⁄VÆue
();

606 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

607 
ADC_DMAReque°A·îLa°Tøns„rCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

608 
ADC_Mu…iModeDMAReque°A·îLa°Tøns„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

611 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

612 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
);

613 
ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
);

614 
ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
);

615 
ADC_Exã∫ÆTrigInje˘edC⁄vEdgeC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄vEdge
);

616 
ADC_So·w¨eSèπInje˘edC⁄v
(
ADC_Ty≥Def
* 
ADCx
);

617 
FœgSètus
 
ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

618 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

619 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

620 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

623 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

624 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

625 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
);

626 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

627 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
);

629 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_can.h

24 #i‚de‡
__STM32F4xx_CAN_H


25 
	#__STM32F4xx_CAN_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

44 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
CAN1
) || \

45 ((
PERIPH
Ë=
CAN2
))

	)

52 
uöt16_t
 
CAN_PªsˇÀr
;

55 
uöt8_t
 
CAN_Mode
;

58 
uöt8_t
 
CAN_SJW
;

63 
uöt8_t
 
CAN_BS1
;

67 
uöt8_t
 
CAN_BS2
;

70 
Fun˘i⁄ÆSèã
 
CAN_TTCM
;

73 
Fun˘i⁄ÆSèã
 
CAN_ABOM
;

76 
Fun˘i⁄ÆSèã
 
CAN_AWUM
;

79 
Fun˘i⁄ÆSèã
 
CAN_NART
;

82 
Fun˘i⁄ÆSèã
 
CAN_RFLM
;

85 
Fun˘i⁄ÆSèã
 
CAN_TXFP
;

87 } 
	tCAN_InôTy≥Def
;

94 
uöt16_t
 
CAN_FûãrIdHigh
;

98 
uöt16_t
 
CAN_FûãrIdLow
;

102 
uöt16_t
 
CAN_FûãrMaskIdHigh
;

107 
uöt16_t
 
CAN_FûãrMaskIdLow
;

112 
uöt16_t
 
CAN_FûãrFIFOAssignmít
;

115 
uöt8_t
 
CAN_FûãrNumbî
;

117 
uöt8_t
 
CAN_FûãrMode
;

120 
uöt8_t
 
CAN_FûãrSˇÀ
;

123 
Fun˘i⁄ÆSèã
 
CAN_FûãrA˘iv©i⁄
;

125 } 
	tCAN_FûãrInôTy≥Def
;

132 
uöt32_t
 
StdId
;

135 
uöt32_t
 
ExtId
;

138 
uöt8_t
 
IDE
;

142 
uöt8_t
 
RTR
;

146 
uöt8_t
 
DLC
;

150 
uöt8_t
 
D©a
[8];

152 } 
	tC™TxMsg
;

159 
uöt32_t
 
StdId
;

162 
uöt32_t
 
ExtId
;

165 
uöt8_t
 
IDE
;

169 
uöt8_t
 
RTR
;

173 
uöt8_t
 
DLC
;

176 
uöt8_t
 
D©a
[8];

179 
uöt8_t
 
FMI
;

182 } 
	tC™RxMsg
;

194 
	#CAN_InôSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

195 
	#CAN_InôSètus_Suc˚ss
 ((
uöt8_t
)0x01Ë

	)

199 
	#CANINITFAILED
 
CAN_InôSètus_Faûed


	)

200 
	#CANINITOK
 
CAN_InôSètus_Suc˚ss


	)

209 
	#CAN_Mode_N‹mÆ
 ((
uöt8_t
)0x00Ë

	)

210 
	#CAN_Mode_Lo›Back
 ((
uöt8_t
)0x01Ë

	)

211 
	#CAN_Mode_Sûít
 ((
uöt8_t
)0x02Ë

	)

212 
	#CAN_Mode_Sûít_Lo›Back
 ((
uöt8_t
)0x03Ë

	)

214 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_Mode_N‹mÆ
) || \

215 ((
MODE
Ë=
CAN_Mode_Lo›Back
)|| \

216 ((
MODE
Ë=
CAN_Mode_Sûít
) || \

217 ((
MODE
Ë=
CAN_Mode_Sûít_Lo›Back
))

	)

227 
	#CAN_O≥øtögMode_Inôüliz©i⁄
 ((
uöt8_t
)0x00Ë

	)

228 
	#CAN_O≥øtögMode_N‹mÆ
 ((
uöt8_t
)0x01Ë

	)

229 
	#CAN_O≥øtögMode_SÀï
 ((
uöt8_t
)0x02Ë

	)

232 
	#IS_CAN_OPERATING_MODE
(
MODE
Ë(((MODEË=
CAN_O≥øtögMode_Inôüliz©i⁄
) ||\

233 ((
MODE
Ë=
CAN_O≥øtögMode_N‹mÆ
)|| \

234 ((
MODE
Ë=
CAN_O≥øtögMode_SÀï
))

	)

244 
	#CAN_ModeSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

245 
	#CAN_ModeSètus_Suc˚ss
 ((
uöt8_t
)!
CAN_ModeSètus_Faûed
Ë

	)

253 
	#CAN_SJW_1tq
 ((
uöt8_t
)0x00Ë

	)

254 
	#CAN_SJW_2tq
 ((
uöt8_t
)0x01Ë

	)

255 
	#CAN_SJW_3tq
 ((
uöt8_t
)0x02Ë

	)

256 
	#CAN_SJW_4tq
 ((
uöt8_t
)0x03Ë

	)

258 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1tq
Ë|| ((SJWË=
CAN_SJW_2tq
)|| \

259 ((
SJW
Ë=
CAN_SJW_3tq
Ë|| ((SJWË=
CAN_SJW_4tq
))

	)

267 
	#CAN_BS1_1tq
 ((
uöt8_t
)0x00Ë

	)

268 
	#CAN_BS1_2tq
 ((
uöt8_t
)0x01Ë

	)

269 
	#CAN_BS1_3tq
 ((
uöt8_t
)0x02Ë

	)

270 
	#CAN_BS1_4tq
 ((
uöt8_t
)0x03Ë

	)

271 
	#CAN_BS1_5tq
 ((
uöt8_t
)0x04Ë

	)

272 
	#CAN_BS1_6tq
 ((
uöt8_t
)0x05Ë

	)

273 
	#CAN_BS1_7tq
 ((
uöt8_t
)0x06Ë

	)

274 
	#CAN_BS1_8tq
 ((
uöt8_t
)0x07Ë

	)

275 
	#CAN_BS1_9tq
 ((
uöt8_t
)0x08Ë

	)

276 
	#CAN_BS1_10tq
 ((
uöt8_t
)0x09Ë

	)

277 
	#CAN_BS1_11tq
 ((
uöt8_t
)0x0AË

	)

278 
	#CAN_BS1_12tq
 ((
uöt8_t
)0x0BË

	)

279 
	#CAN_BS1_13tq
 ((
uöt8_t
)0x0CË

	)

280 
	#CAN_BS1_14tq
 ((
uöt8_t
)0x0DË

	)

281 
	#CAN_BS1_15tq
 ((
uöt8_t
)0x0EË

	)

282 
	#CAN_BS1_16tq
 ((
uöt8_t
)0x0FË

	)

284 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16tq
)

	)

292 
	#CAN_BS2_1tq
 ((
uöt8_t
)0x00Ë

	)

293 
	#CAN_BS2_2tq
 ((
uöt8_t
)0x01Ë

	)

294 
	#CAN_BS2_3tq
 ((
uöt8_t
)0x02Ë

	)

295 
	#CAN_BS2_4tq
 ((
uöt8_t
)0x03Ë

	)

296 
	#CAN_BS2_5tq
 ((
uöt8_t
)0x04Ë

	)

297 
	#CAN_BS2_6tq
 ((
uöt8_t
)0x05Ë

	)

298 
	#CAN_BS2_7tq
 ((
uöt8_t
)0x06Ë

	)

299 
	#CAN_BS2_8tq
 ((
uöt8_t
)0x07Ë

	)

301 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8tq
)

	)

309 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

317 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<27)

	)

325 
	#CAN_FûãrMode_IdMask
 ((
uöt8_t
)0x00Ë

	)

326 
	#CAN_FûãrMode_IdLi°
 ((
uöt8_t
)0x01Ë

	)

328 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FûãrMode_IdMask
) || \

329 ((
MODE
Ë=
CAN_FûãrMode_IdLi°
))

	)

337 
	#CAN_FûãrSˇÀ_16bô
 ((
uöt8_t
)0x00Ë

	)

338 
	#CAN_FûãrSˇÀ_32bô
 ((
uöt8_t
)0x01Ë

	)

340 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FûãrSˇÀ_16bô
) || \

341 ((
SCALE
Ë=
CAN_FûãrSˇÀ_32bô
))

	)

349 
	#CAN_Fûãr_FIFO0
 ((
uöt8_t
)0x00Ë

	)

350 
	#CAN_Fûãr_FIFO1
 ((
uöt8_t
)0x01Ë

	)

351 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FûãrFIFO0
) || \

352 ((
FIFO
Ë=
CAN_FûãrFIFO1
))

	)

355 
	#CAN_FûãrFIFO0
 
CAN_Fûãr_FIFO0


	)

356 
	#CAN_FûãrFIFO1
 
CAN_Fûãr_FIFO1


	)

364 
	#IS_CAN_BANKNUMBER
(
BANKNUMBER
Ë(((BANKNUMBERË>1Ë&& ((BANKNUMBERË<27))

	)

372 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

373 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

374 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

375 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

383 
	#CAN_Id_Sènd¨d
 ((
uöt32_t
)0x00000000Ë

	)

384 
	#CAN_Id_Exãnded
 ((
uöt32_t
)0x00000004Ë

	)

385 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_Id_Sènd¨d
) || \

386 ((
IDTYPE
Ë=
CAN_Id_Exãnded
))

	)

389 
	#CAN_ID_STD
 
CAN_Id_Sènd¨d


	)

390 
	#CAN_ID_EXT
 
CAN_Id_Exãnded


	)

398 
	#CAN_RTR_D©a
 ((
uöt32_t
)0x00000000Ë

	)

399 
	#CAN_RTR_RemŸe
 ((
uöt32_t
)0x00000002Ë

	)

400 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_D©a
Ë|| ((RTRË=
CAN_RTR_RemŸe
))

	)

403 
	#CAN_RTR_DATA
 
CAN_RTR_D©a


	)

404 
	#CAN_RTR_REMOTE
 
CAN_RTR_RemŸe


	)

412 
	#CAN_TxSètus_Faûed
 ((
uöt8_t
)0x00)

	)

413 
	#CAN_TxSètus_Ok
 ((
uöt8_t
)0x01Ë

	)

414 
	#CAN_TxSètus_Pídög
 ((
uöt8_t
)0x02Ë

	)

415 
	#CAN_TxSètus_NoMaûBox
 ((
uöt8_t
)0x04Ë

	)

418 
	#CANTXFAILED
 
CAN_TxSètus_Faûed


	)

419 
	#CANTXOK
 
CAN_TxSètus_Ok


	)

420 
	#CANTXPENDING
 
CAN_TxSètus_Pídög


	)

421 
	#CAN_NO_MB
 
CAN_TxSètus_NoMaûBox


	)

429 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

430 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

432 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

440 
	#CAN_SÀï_Faûed
 ((
uöt8_t
)0x00Ë

	)

441 
	#CAN_SÀï_Ok
 ((
uöt8_t
)0x01Ë

	)

444 
	#CANSLEEPFAILED
 
CAN_SÀï_Faûed


	)

445 
	#CANSLEEPOK
 
CAN_SÀï_Ok


	)

453 
	#CAN_WakeUp_Faûed
 ((
uöt8_t
)0x00Ë

	)

454 
	#CAN_WakeUp_Ok
 ((
uöt8_t
)0x01Ë

	)

457 
	#CANWAKEUPFAILED
 
CAN_WakeUp_Faûed


	)

458 
	#CANWAKEUPOK
 
CAN_WakeUp_Ok


	)

467 
	#CAN_Eº‹Code_NoEº
 ((
uöt8_t
)0x00Ë

	)

468 
	#CAN_Eº‹Code_StuffEº
 ((
uöt8_t
)0x10Ë

	)

469 
	#CAN_Eº‹Code_F‹mEº
 ((
uöt8_t
)0x20Ë

	)

470 
	#CAN_Eº‹Code_ACKEº
 ((
uöt8_t
)0x30Ë

	)

471 
	#CAN_Eº‹Code_BôRe˚ssiveEº
 ((
uöt8_t
)0x40Ë

	)

472 
	#CAN_Eº‹Code_BôDomö™tEº
 ((
uöt8_t
)0x50Ë

	)

473 
	#CAN_Eº‹Code_CRCEº
 ((
uöt8_t
)0x60Ë

	)

474 
	#CAN_Eº‹Code_So·w¨eSëEº
 ((
uöt8_t
)0x70Ë

	)

488 
	#CAN_FLAG_RQCP0
 ((
uöt32_t
)0x38000001Ë

	)

489 
	#CAN_FLAG_RQCP1
 ((
uöt32_t
)0x38000100Ë

	)

490 
	#CAN_FLAG_RQCP2
 ((
uöt32_t
)0x38010000Ë

	)

493 
	#CAN_FLAG_FMP0
 ((
uöt32_t
)0x12000003Ë

	)

494 
	#CAN_FLAG_FF0
 ((
uöt32_t
)0x32000008Ë

	)

495 
	#CAN_FLAG_FOV0
 ((
uöt32_t
)0x32000010Ë

	)

496 
	#CAN_FLAG_FMP1
 ((
uöt32_t
)0x14000003Ë

	)

497 
	#CAN_FLAG_FF1
 ((
uöt32_t
)0x34000008Ë

	)

498 
	#CAN_FLAG_FOV1
 ((
uöt32_t
)0x34000010Ë

	)

501 
	#CAN_FLAG_WKU
 ((
uöt32_t
)0x31000008Ë

	)

502 
	#CAN_FLAG_SLAK
 ((
uöt32_t
)0x31000012Ë

	)

507 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x10F00001Ë

	)

508 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x10F00002Ë

	)

509 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x10F00004Ë

	)

510 
	#CAN_FLAG_LEC
 ((
uöt32_t
)0x30F00070Ë

	)

512 
	#IS_CAN_GET_FLAG
(
FLAG
Ë(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_BOF
) || \

513 ((
FLAG
Ë=
CAN_FLAG_EPV
Ë|| ((FLAGË=
CAN_FLAG_EWG
) || \

514 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) || \

515 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FMP0
) || \

516 ((
FLAG
Ë=
CAN_FLAG_FOV1
Ë|| ((FLAGË=
CAN_FLAG_FF1
) || \

517 ((
FLAG
Ë=
CAN_FLAG_FMP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
) || \

518 ((
FLAG
Ë=
CAN_FLAG_RQCP1
)|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

519 ((
FLAG
Ë=
CAN_FLAG_SLAK
 ))

	)

521 
	#IS_CAN_CLEAR_FLAG
(
FLAG
)(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
) || \

522 ((
FLAG
Ë=
CAN_FLAG_RQCP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

523 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) ||\

524 ((
FLAG
Ë=
CAN_FLAG_FF1
Ë|| ((FLAGË=
CAN_FLAG_FOV1
) || \

525 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_SLAK
))

	)

534 
	#CAN_IT_TME
 ((
uöt32_t
)0x00000001Ë

	)

537 
	#CAN_IT_FMP0
 ((
uöt32_t
)0x00000002Ë

	)

538 
	#CAN_IT_FF0
 ((
uöt32_t
)0x00000004Ë

	)

539 
	#CAN_IT_FOV0
 ((
uöt32_t
)0x00000008Ë

	)

540 
	#CAN_IT_FMP1
 ((
uöt32_t
)0x00000010Ë

	)

541 
	#CAN_IT_FF1
 ((
uöt32_t
)0x00000020Ë

	)

542 
	#CAN_IT_FOV1
 ((
uöt32_t
)0x00000040Ë

	)

545 
	#CAN_IT_WKU
 ((
uöt32_t
)0x00010000Ë

	)

546 
	#CAN_IT_SLK
 ((
uöt32_t
)0x00020000Ë

	)

549 
	#CAN_IT_EWG
 ((
uöt32_t
)0x00000100Ë

	)

550 
	#CAN_IT_EPV
 ((
uöt32_t
)0x00000200Ë

	)

551 
	#CAN_IT_BOF
 ((
uöt32_t
)0x00000400Ë

	)

552 
	#CAN_IT_LEC
 ((
uöt32_t
)0x00000800Ë

	)

553 
	#CAN_IT_ERR
 ((
uöt32_t
)0x00008000Ë

	)

556 
	#CAN_IT_RQCP0
 
CAN_IT_TME


	)

557 
	#CAN_IT_RQCP1
 
CAN_IT_TME


	)

558 
	#CAN_IT_RQCP2
 
CAN_IT_TME


	)

561 
	#IS_CAN_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FMP0
) ||\

562 ((
IT
Ë=
CAN_IT_FF0
Ë|| ((ITË=
CAN_IT_FOV0
) ||\

563 ((
IT
Ë=
CAN_IT_FMP1
Ë|| ((ITË=
CAN_IT_FF1
) ||\

564 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

565 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

566 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

567 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

	)

569 
	#IS_CAN_CLEAR_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FF0
) ||\

570 ((
IT
Ë=
CAN_IT_FOV0
)|| ((ITË=
CAN_IT_FF1
) ||\

571 ((
IT
Ë=
CAN_IT_FOV1
)|| ((ITË=
CAN_IT_EWG
) ||\

572 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

573 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

574 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

	)

587 
CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
);

590 
uöt8_t
 
CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

591 
CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

592 
CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

593 
CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
);

594 
CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

595 
CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

598 
uöt8_t
 
CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
);

599 
uöt8_t
 
CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
TønsmôMaûbox
);

600 
CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
);

603 
CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
);

604 
CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
);

605 
uöt8_t
 
CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
FIFONumbî
);

608 
uöt8_t
 
CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
CAN_O≥øtögMode
);

609 
uöt8_t
 
CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
);

610 
uöt8_t
 
CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
);

613 
uöt8_t
 
CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
);

614 
uöt8_t
 
CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

615 
uöt8_t
 
CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

618 
CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

619 
FœgSètus
 
CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

620 
CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

621 
ITSètus
 
CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

622 
CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

624 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_crc.h

24 #i‚de‡
__STM32F4xx_CRC_H


25 
	#__STM32F4xx_CRC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

56 
CRC_Re£tDR
();

57 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
D©a
);

58 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

59 
uöt32_t
 
CRC_GëCRC
();

60 
CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
);

61 
uöt8_t
 
CRC_GëIDRegi°î
();

63 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_cryp.h

24 #i‚de‡
__STM32F4xx_CRYP_H


25 
	#__STM32F4xx_CRYP_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

49 
uöt16_t
 
CRYP_AlgoDú
;

51 
uöt16_t
 
CRYP_AlgoMode
;

54 
uöt16_t
 
CRYP_D©aTy≥
;

56 
uöt16_t
 
CRYP_KeySize
;

59 }
	tCRYP_InôTy≥Def
;

66 
uöt32_t
 
CRYP_Key0Le·
;

67 
uöt32_t
 
CRYP_Key0Right
;

68 
uöt32_t
 
CRYP_Key1Le·
;

69 
uöt32_t
 
CRYP_Key1Right
;

70 
uöt32_t
 
CRYP_Key2Le·
;

71 
uöt32_t
 
CRYP_Key2Right
;

72 
uöt32_t
 
CRYP_Key3Le·
;

73 
uöt32_t
 
CRYP_Key3Right
;

74 }
	tCRYP_KeyInôTy≥Def
;

80 
uöt32_t
 
CRYP_IV0Le·
;

81 
uöt32_t
 
CRYP_IV0Right
;

82 
uöt32_t
 
CRYP_IV1Le·
;

83 
uöt32_t
 
CRYP_IV1Right
;

84 }
	tCRYP_IVInôTy≥Def
;

92 
uöt32_t
 
CR_bôs9to2
;

94 
uöt32_t
 
CRYP_IV0LR
;

95 
uöt32_t
 
CRYP_IV0RR
;

96 
uöt32_t
 
CRYP_IV1LR
;

97 
uöt32_t
 
CRYP_IV1RR
;

99 
uöt32_t
 
CRYP_K0LR
;

100 
uöt32_t
 
CRYP_K0RR
;

101 
uöt32_t
 
CRYP_K1LR
;

102 
uöt32_t
 
CRYP_K1RR
;

103 
uöt32_t
 
CRYP_K2LR
;

104 
uöt32_t
 
CRYP_K2RR
;

105 
uöt32_t
 
CRYP_K3LR
;

106 
uöt32_t
 
CRYP_K3RR
;

107 }
	tCRYP_C⁄ãxt
;

119 
	#CRYP_AlgoDú_En¸y±
 ((
uöt16_t
)0x0000)

	)

120 
	#CRYP_AlgoDú_De¸y±
 ((
uöt16_t
)0x0004)

	)

121 
	#IS_CRYP_ALGODIR
(
ALGODIR
Ë(((ALGODIRË=
CRYP_AlgoDú_En¸y±
) || \

122 ((
ALGODIR
Ë=
CRYP_AlgoDú_De¸y±
))

	)

133 
	#CRYP_AlgoMode_TDES_ECB
 ((
uöt16_t
)0x0000)

	)

134 
	#CRYP_AlgoMode_TDES_CBC
 ((
uöt16_t
)0x0008)

	)

137 
	#CRYP_AlgoMode_DES_ECB
 ((
uöt16_t
)0x0010)

	)

138 
	#CRYP_AlgoMode_DES_CBC
 ((
uöt16_t
)0x0018)

	)

141 
	#CRYP_AlgoMode_AES_ECB
 ((
uöt16_t
)0x0020)

	)

142 
	#CRYP_AlgoMode_AES_CBC
 ((
uöt16_t
)0x0028)

	)

143 
	#CRYP_AlgoMode_AES_CTR
 ((
uöt16_t
)0x0030)

	)

144 
	#CRYP_AlgoMode_AES_Key
 ((
uöt16_t
)0x0038)

	)

146 
	#IS_CRYP_ALGOMODE
(
ALGOMODE
Ë(((ALGOMODEË=
CRYP_AlgoMode_TDES_ECB
) || \

147 ((
ALGOMODE
Ë=
CRYP_AlgoMode_TDES_CBC
)|| \

148 ((
ALGOMODE
Ë=
CRYP_AlgoMode_DES_ECB
)|| \

149 ((
ALGOMODE
Ë=
CRYP_AlgoMode_DES_CBC
) || \

150 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_ECB
) || \

151 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_CBC
) || \

152 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_CTR
) || \

153 ((
ALGOMODE
Ë=
CRYP_AlgoMode_AES_Key
))

	)

161 
	#CRYP_D©aTy≥_32b
 ((
uöt16_t
)0x0000)

	)

162 
	#CRYP_D©aTy≥_16b
 ((
uöt16_t
)0x0040)

	)

163 
	#CRYP_D©aTy≥_8b
 ((
uöt16_t
)0x0080)

	)

164 
	#CRYP_D©aTy≥_1b
 ((
uöt16_t
)0x00C0)

	)

165 
	#IS_CRYP_DATATYPE
(
DATATYPE
Ë(((DATATYPEË=
CRYP_D©aTy≥_32b
) || \

166 ((
DATATYPE
Ë=
CRYP_D©aTy≥_16b
)|| \

167 ((
DATATYPE
Ë=
CRYP_D©aTy≥_8b
)|| \

168 ((
DATATYPE
Ë=
CRYP_D©aTy≥_1b
))

	)

176 
	#CRYP_KeySize_128b
 ((
uöt16_t
)0x0000)

	)

177 
	#CRYP_KeySize_192b
 ((
uöt16_t
)0x0100)

	)

178 
	#CRYP_KeySize_256b
 ((
uöt16_t
)0x0200)

	)

179 
	#IS_CRYP_KEYSIZE
(
KEYSIZE
Ë(((KEYSIZEË=
CRYP_KeySize_128b
)|| \

180 ((
KEYSIZE
Ë=
CRYP_KeySize_192b
)|| \

181 ((
KEYSIZE
Ë=
CRYP_KeySize_256b
))

	)

189 
	#CRYP_FLAG_BUSY
 ((
uöt8_t
)0x10Ë

	)

193 
	#CRYP_FLAG_IFEM
 ((
uöt8_t
)0x01Ë

	)

194 
	#CRYP_FLAG_IFNF
 ((
uöt8_t
)0x02Ë

	)

195 
	#CRYP_FLAG_INRIS
 ((
uöt8_t
)0x22Ë

	)

196 
	#CRYP_FLAG_OFNE
 ((
uöt8_t
)0x04Ë

	)

198 
	#CRYP_FLAG_OFFU
 ((
uöt8_t
)0x08Ë

	)

199 
	#CRYP_FLAG_OUTRIS
 ((
uöt8_t
)0x21Ë

	)

202 
	#IS_CRYP_GET_FLAG
(
FLAG
Ë(((FLAGË=
CRYP_FLAG_IFEM
) || \

203 ((
FLAG
Ë=
CRYP_FLAG_IFNF
) || \

204 ((
FLAG
Ë=
CRYP_FLAG_OFNE
) || \

205 ((
FLAG
Ë=
CRYP_FLAG_OFFU
) || \

206 ((
FLAG
Ë=
CRYP_FLAG_BUSY
) || \

207 ((
FLAG
Ë=
CRYP_FLAG_OUTRIS
)|| \

208 ((
FLAG
Ë=
CRYP_FLAG_INRIS
))

	)

216 
	#CRYP_IT_INI
 ((
uöt8_t
)0x01Ë

	)

217 
	#CRYP_IT_OUTI
 ((
uöt8_t
)0x02Ë

	)

218 
	#IS_CRYP_CONFIG_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xFCË=0x00Ë&& ((ITË!0x00))

	)

219 
	#IS_CRYP_GET_IT
(
IT
Ë(((ITË=
CRYP_IT_INI
Ë|| ((ITË=
CRYP_IT_OUTI
))

	)

228 
	#MODE_ENCRYPT
 ((
uöt8_t
)0x01)

	)

229 
	#MODE_DECRYPT
 ((
uöt8_t
)0x00)

	)

238 
	#CRYP_DMAReq_D©aIN
 ((
uöt8_t
)0x01)

	)

239 
	#CRYP_DMAReq_D©aOUT
 ((
uöt8_t
)0x02)

	)

240 
	#IS_CRYP_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt8_t
)0xFCË=0x00Ë&& ((DMAREQË!0x00))

	)

253 
CRYP_DeInô
();

256 
CRYP_Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
);

257 
CRYP_Såu˘Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
);

258 
CRYP_KeyInô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
);

259 
CRYP_KeySåu˘Inô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
);

260 
CRYP_IVInô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
);

261 
CRYP_IVSåu˘Inô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
);

262 
CRYP_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

265 
CRYP_D©aIn
(
uöt32_t
 
D©a
);

266 
uöt32_t
 
CRYP_D©aOut
();

267 
CRYP_FIFOFlush
();

270 
Eº‹Sètus
 
CRYP_SaveC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtSave
,

271 
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
);

272 
CRYP_Re°‹eC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtRe°‹e
);

275 
CRYP_DMACmd
(
uöt8_t
 
CRYP_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

278 
CRYP_ITC⁄fig
(
uöt8_t
 
CRYP_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

279 
ITSètus
 
CRYP_GëITSètus
(
uöt8_t
 
CRYP_IT
);

280 
FœgSètus
 
CRYP_GëFœgSètus
(
uöt8_t
 
CRYP_FLAG
);

283 
Eº‹Sètus
 
CRYP_AES_ECB
(
uöt8_t
 
Mode
,

284 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

285 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

286 
uöt8_t
 *
Ouçut
);

288 
Eº‹Sètus
 
CRYP_AES_CBC
(
uöt8_t
 
Mode
,

289 
uöt8_t
 
InôVe˘‹s
[16],

290 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

291 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

292 
uöt8_t
 *
Ouçut
);

294 
Eº‹Sètus
 
CRYP_AES_CTR
(
uöt8_t
 
Mode
,

295 
uöt8_t
 
InôVe˘‹s
[16],

296 
uöt8_t
 *
Key
, 
uöt16_t
 
Keysize
,

297 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

298 
uöt8_t
 *
Ouçut
);

301 
Eº‹Sètus
 
CRYP_TDES_ECB
(
uöt8_t
 
Mode
,

302 
uöt8_t
 
Key
[24],

303 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

304 
uöt8_t
 *
Ouçut
);

306 
Eº‹Sètus
 
CRYP_TDES_CBC
(
uöt8_t
 
Mode
,

307 
uöt8_t
 
Key
[24],

308 
uöt8_t
 
InôVe˘‹s
[8],

309 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

310 
uöt8_t
 *
Ouçut
);

313 
Eº‹Sètus
 
CRYP_DES_ECB
(
uöt8_t
 
Mode
,

314 
uöt8_t
 
Key
[8],

315 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

316 
uöt8_t
 *
Ouçut
);

318 
Eº‹Sètus
 
CRYP_DES_CBC
(
uöt8_t
 
Mode
,

319 
uöt8_t
 
Key
[8],

320 
uöt8_t
 
InôVe˘‹s
[8],

321 
uöt8_t
 *
I≈ut
,
uöt32_t
 
IÀngth
,

322 
uöt8_t
 *
Ouçut
);

324 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_dac.h

24 #i‚de‡
__STM32F4xx_DAC_H


25 
	#__STM32F4xx_DAC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

50 
uöt32_t
 
DAC_Triggî
;

53 
uöt32_t
 
DAC_WaveGíî©i⁄
;

57 
uöt32_t
 
DAC_LFSRUnmask_TrüngÀAm∂ôude
;

61 
uöt32_t
 
DAC_OuçutBuf„r
;

63 }
	tDAC_InôTy≥Def
;

75 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

77 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024Ë

	)

78 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002CË

	)

79 
	#DAC_Triggî_T5_TRGO
 ((
uöt32_t
)0x0000001CË

	)

80 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004Ë

	)

81 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014Ë

	)

82 
	#DAC_Triggî_T8_TRGO
 ((
uöt32_t
)0x0000000CË

	)

84 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034Ë

	)

85 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003CË

	)

87 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
) || \

88 ((
TRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

89 ((
TRIGGER
Ë=
DAC_Triggî_T8_TRGO
) || \

90 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

91 ((
TRIGGER
Ë=
DAC_Triggî_T5_TRGO
) || \

92 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

93 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

94 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

95 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

	)

105 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

106 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

107 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

108 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
) || \

109 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

110 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

	)

119 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000Ë

	)

120 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100Ë

	)

121 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200Ë

	)

122 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300Ë

	)

123 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400Ë

	)

124 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500Ë

	)

125 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600Ë

	)

126 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700Ë

	)

127 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800Ë

	)

128 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900Ë

	)

129 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00Ë

	)

130 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00Ë

	)

131 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000Ë

	)

132 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100Ë

	)

133 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200Ë

	)

134 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300Ë

	)

135 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400Ë

	)

136 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500Ë

	)

137 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600Ë

	)

138 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700Ë

	)

139 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800Ë

	)

140 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900Ë

	)

141 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00Ë

	)

142 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00Ë

	)

144 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
) || \

145 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

146 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

147 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

148 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

149 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

150 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

151 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

152 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

153 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

154 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

155 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

156 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

157 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

158 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

159 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

160 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

161 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

162 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

163 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

164 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

165 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

166 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

167 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

	)

176 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

177 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

178 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
) || \

179 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

	)

188 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

189 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

190 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
) || \

191 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

	)

200 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

201 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

202 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

203 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
) || \

204 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

205 ((
ALIGN
Ë=
DAC_Align_8b_R
))

	)

214 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

215 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

216 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
) || \

217 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

	)

226 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

234 
	#DAC_IT_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

235 
	#IS_DAC_IT
(
IT
Ë(((ITË=
DAC_IT_DMAUDR
))

	)

245 
	#DAC_FLAG_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

246 
	#IS_DAC_FLAG
(
FLAG
Ë(((FLAGË=
DAC_FLAG_DMAUDR
))

	)

260 
DAC_DeInô
();

263 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

264 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

265 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

266 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

267 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

268 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

269 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

270 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

271 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

272 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

275 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

278 
DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

279 
FœgSètus
 
DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

280 
DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

281 
ITSètus
 
DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

282 
DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

284 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_dbgmcu.h

23 #i‚de‡
__STM32F4xx_DBGMCU_H


24 
	#__STM32F4xx_DBGMCU_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f4xx.h
"

47 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

48 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

49 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

50 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFF8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

52 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

53 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

54 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

55 
	#DBGMCU_TIM5_STOP
 ((
uöt32_t
)0x00000008)

	)

56 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

57 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

58 
	#DBGMCU_TIM12_STOP
 ((
uöt32_t
)0x00000040)

	)

59 
	#DBGMCU_TIM13_STOP
 ((
uöt32_t
)0x00000080)

	)

60 
	#DBGMCU_TIM14_STOP
 ((
uöt32_t
)0x00000100)

	)

61 
	#DBGMCU_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

62 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

63 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

64 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

65 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

66 
	#DBGMCU_I2C3_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00800000)

	)

67 
	#DBGMCU_CAN1_STOP
 ((
uöt32_t
)0x02000000)

	)

68 
	#DBGMCU_CAN2_STOP
 ((
uöt32_t
)0x04000000)

	)

69 
	#IS_DBGMCU_APB1PERIPH
(
PERIPH
Ë((((PERIPHË& 0xF91FE200Ë=0x00Ë&& ((PERIPHË!0x00))

	)

71 
	#DBGMCU_TIM1_STOP
 ((
uöt32_t
)0x00000001)

	)

72 
	#DBGMCU_TIM8_STOP
 ((
uöt32_t
)0x00000002)

	)

73 
	#DBGMCU_TIM9_STOP
 ((
uöt32_t
)0x00010000)

	)

74 
	#DBGMCU_TIM10_STOP
 ((
uöt32_t
)0x00020000)

	)

75 
	#DBGMCU_TIM11_STOP
 ((
uöt32_t
)0x00040000)

	)

76 
	#IS_DBGMCU_APB2PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFF8FFFCË=0x00Ë&& ((PERIPHË!0x00))

	)

83 
uöt32_t
 
DBGMCU_GëREVID
();

84 
uöt32_t
 
DBGMCU_GëDEVID
();

85 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

86 
DBGMCU_APB1PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

87 
DBGMCU_APB2PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

89 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_dcmi.h

23 #i‚de‡
__STM32F4xx_DCMI_H


24 
	#__STM32F4xx_DCMI_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f4xx.h
"

47 
uöt16_t
 
DCMI_C≠tuªMode
;

50 
uöt16_t
 
DCMI_SynchroMode
;

53 
uöt16_t
 
DCMI_PCKPﬁ¨ôy
;

56 
uöt16_t
 
DCMI_VSPﬁ¨ôy
;

59 
uöt16_t
 
DCMI_HSPﬁ¨ôy
;

62 
uöt16_t
 
DCMI_C≠tuªR©e
;

65 
uöt16_t
 
DCMI_ExãndedD©aMode
;

67 } 
	tDCMI_InôTy≥Def
;

74 
uöt16_t
 
DCMI_VîtiˇlSèπLöe
;

77 
uöt16_t
 
DCMI_H‹iz⁄èlOff£tCou¡
;

80 
uöt16_t
 
DCMI_VîtiˇlLöeCou¡
;

83 
uöt16_t
 
DCMI_C≠tuªCou¡
;

86 } 
	tDCMI_CROPInôTy≥Def
;

93 
uöt8_t
 
DCMI_FømeSèπCode
;

94 
uöt8_t
 
DCMI_LöeSèπCode
;

95 
uöt8_t
 
DCMI_LöeEndCode
;

96 
uöt8_t
 
DCMI_FømeEndCode
;

97 } 
	tDCMI_CodesInôTy≥Def
;

108 
	#DCMI_C≠tuªMode_C⁄töuous
 ((
uöt16_t
)0x0000Ë

	)

110 
	#DCMI_C≠tuªMode_S«pShŸ
 ((
uöt16_t
)0x0002Ë

	)

112 
	#IS_DCMI_CAPTURE_MODE
(
MODE
)(((MODEË=
DCMI_C≠tuªMode_C⁄töuous
) || \

113 ((
MODE
Ë=
DCMI_C≠tuªMode_S«pShŸ
))

	)

122 
	#DCMI_SynchroMode_H¨dw¨e
 ((
uöt16_t
)0x0000Ë

	)

124 
	#DCMI_SynchroMode_Embedded
 ((
uöt16_t
)0x0010Ë

	)

126 
	#IS_DCMI_SYNCHRO
(
MODE
)(((MODEË=
DCMI_SynchroMode_H¨dw¨e
) || \

127 ((
MODE
Ë=
DCMI_SynchroMode_Embedded
))

	)

136 
	#DCMI_PCKPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0000Ë

	)

137 
	#DCMI_PCKPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0020Ë

	)

138 
	#IS_DCMI_PCKPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_PCKPﬁ¨ôy_FÆlög
) || \

139 ((
POLARITY
Ë=
DCMI_PCKPﬁ¨ôy_Risög
))

	)

148 
	#DCMI_VSPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000Ë

	)

149 
	#DCMI_VSPﬁ¨ôy_High
 ((
uöt16_t
)0x0080Ë

	)

150 
	#IS_DCMI_VSPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_VSPﬁ¨ôy_Low
) || \

151 ((
POLARITY
Ë=
DCMI_VSPﬁ¨ôy_High
))

	)

160 
	#DCMI_HSPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000Ë

	)

161 
	#DCMI_HSPﬁ¨ôy_High
 ((
uöt16_t
)0x0040Ë

	)

162 
	#IS_DCMI_HSPOLARITY
(
POLARITY
)(((POLARITYË=
DCMI_HSPﬁ¨ôy_Low
) || \

163 ((
POLARITY
Ë=
DCMI_HSPﬁ¨ôy_High
))

	)

172 
	#DCMI_C≠tuªR©e_AŒ_Føme
 ((
uöt16_t
)0x0000Ë

	)

173 
	#DCMI_C≠tuªR©e_1of2_Føme
 ((
uöt16_t
)0x0100Ë

	)

174 
	#DCMI_C≠tuªR©e_1of4_Føme
 ((
uöt16_t
)0x0200Ë

	)

175 
	#IS_DCMI_CAPTURE_RATE
(
RATE
Ë(((RATEË=
DCMI_C≠tuªR©e_AŒ_Føme
) || \

176 ((
RATE
Ë=
DCMI_C≠tuªR©e_1of2_Føme
) ||\

177 ((
RATE
Ë=
DCMI_C≠tuªR©e_1of4_Føme
))

	)

186 
	#DCMI_ExãndedD©aMode_8b
 ((
uöt16_t
)0x0000Ë

	)

187 
	#DCMI_ExãndedD©aMode_10b
 ((
uöt16_t
)0x0400Ë

	)

188 
	#DCMI_ExãndedD©aMode_12b
 ((
uöt16_t
)0x0800Ë

	)

189 
	#DCMI_ExãndedD©aMode_14b
 ((
uöt16_t
)0x0C00Ë

	)

190 
	#IS_DCMI_EXTENDED_DATA
(
DATA
)(((DATAË=
DCMI_ExãndedD©aMode_8b
) || \

191 ((
DATA
Ë=
DCMI_ExãndedD©aMode_10b
) ||\

192 ((
DATA
Ë=
DCMI_ExãndedD©aMode_12b
) ||\

193 ((
DATA
Ë=
DCMI_ExãndedD©aMode_14b
))

	)

202 
	#DCMI_IT_FRAME
 ((
uöt16_t
)0x0001)

	)

203 
	#DCMI_IT_OVF
 ((
uöt16_t
)0x0002)

	)

204 
	#DCMI_IT_ERR
 ((
uöt16_t
)0x0004)

	)

205 
	#DCMI_IT_VSYNC
 ((
uöt16_t
)0x0008)

	)

206 
	#DCMI_IT_LINE
 ((
uöt16_t
)0x0010)

	)

207 
	#IS_DCMI_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFFE0Ë=0x0000Ë&& ((ITË!0x0000))

	)

208 
	#IS_DCMI_GET_IT
(
IT
Ë(((ITË=
DCMI_IT_FRAME
) || \

209 ((
IT
Ë=
DCMI_IT_OVF
) || \

210 ((
IT
Ë=
DCMI_IT_ERR
) || \

211 ((
IT
Ë=
DCMI_IT_VSYNC
) || \

212 ((
IT
Ë=
DCMI_IT_LINE
))

	)

224 
	#DCMI_FLAG_HSYNC
 ((
uöt16_t
)0x2001)

	)

225 
	#DCMI_FLAG_VSYNC
 ((
uöt16_t
)0x2002)

	)

226 
	#DCMI_FLAG_FNE
 ((
uöt16_t
)0x2004)

	)

230 
	#DCMI_FLAG_FRAMERI
 ((
uöt16_t
)0x0001)

	)

231 
	#DCMI_FLAG_OVFRI
 ((
uöt16_t
)0x0002)

	)

232 
	#DCMI_FLAG_ERRRI
 ((
uöt16_t
)0x0004)

	)

233 
	#DCMI_FLAG_VSYNCRI
 ((
uöt16_t
)0x0008)

	)

234 
	#DCMI_FLAG_LINERI
 ((
uöt16_t
)0x0010)

	)

238 
	#DCMI_FLAG_FRAMEMI
 ((
uöt16_t
)0x1001)

	)

239 
	#DCMI_FLAG_OVFMI
 ((
uöt16_t
)0x1002)

	)

240 
	#DCMI_FLAG_ERRMI
 ((
uöt16_t
)0x1004)

	)

241 
	#DCMI_FLAG_VSYNCMI
 ((
uöt16_t
)0x1008)

	)

242 
	#DCMI_FLAG_LINEMI
 ((
uöt16_t
)0x1010)

	)

243 
	#IS_DCMI_GET_FLAG
(
FLAG
Ë(((FLAGË=
DCMI_FLAG_HSYNC
) || \

244 ((
FLAG
Ë=
DCMI_FLAG_VSYNC
) || \

245 ((
FLAG
Ë=
DCMI_FLAG_FNE
) || \

246 ((
FLAG
Ë=
DCMI_FLAG_FRAMERI
) || \

247 ((
FLAG
Ë=
DCMI_FLAG_OVFRI
) || \

248 ((
FLAG
Ë=
DCMI_FLAG_ERRRI
) || \

249 ((
FLAG
Ë=
DCMI_FLAG_VSYNCRI
) || \

250 ((
FLAG
Ë=
DCMI_FLAG_LINERI
) || \

251 ((
FLAG
Ë=
DCMI_FLAG_FRAMEMI
) || \

252 ((
FLAG
Ë=
DCMI_FLAG_OVFMI
) || \

253 ((
FLAG
Ë=
DCMI_FLAG_ERRMI
) || \

254 ((
FLAG
Ë=
DCMI_FLAG_VSYNCMI
) || \

255 ((
FLAG
Ë=
DCMI_FLAG_LINEMI
))

	)

257 
	#IS_DCMI_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFFE0Ë=0x0000Ë&& ((FLAGË!0x0000))

	)

270 
DCMI_DeInô
();

273 
DCMI_Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
);

274 
DCMI_Såu˘Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
);

275 
DCMI_CROPC⁄fig
(
DCMI_CROPInôTy≥Def
* 
DCMI_CROPInôSåu˘
);

276 
DCMI_CROPCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

277 
DCMI_SëEmbeddedSynchroCodes
(
DCMI_CodesInôTy≥Def
* 
DCMI_CodesInôSåu˘
);

278 
DCMI_JPEGCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

281 
DCMI_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

282 
DCMI_C≠tuªCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

283 
uöt32_t
 
DCMI_RódD©a
();

286 
DCMI_ITC⁄fig
(
uöt16_t
 
DCMI_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
FœgSètus
 
DCMI_GëFœgSètus
(
uöt16_t
 
DCMI_FLAG
);

288 
DCMI_CÀ¨Fœg
(
uöt16_t
 
DCMI_FLAG
);

289 
ITSètus
 
DCMI_GëITSètus
(
uöt16_t
 
DCMI_IT
);

290 
DCMI_CÀ¨ITPídögBô
(
uöt16_t
 
DCMI_IT
);

292 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_dma.h

24 #i‚de‡
__STM32F4xx_DMA_H


25 
	#__STM32F4xx_DMA_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

50 
uöt32_t
 
DMA_Ch™√l
;

53 
uöt32_t
 
DMA_PîùhîÆBa£Addr
;

55 
uöt32_t
 
DMA_Mem‹y0Ba£Addr
;

59 
uöt32_t
 
DMA_DIR
;

63 
uöt32_t
 
DMA_Buf„rSize
;

67 
uöt32_t
 
DMA_PîùhîÆInc
;

70 
uöt32_t
 
DMA_Mem‹yInc
;

73 
uöt32_t
 
DMA_PîùhîÆD©aSize
;

76 
uöt32_t
 
DMA_Mem‹yD©aSize
;

79 
uöt32_t
 
DMA_Mode
;

84 
uöt32_t
 
DMA_Pri‹ôy
;

87 
uöt32_t
 
DMA_FIFOMode
;

92 
uöt32_t
 
DMA_FIFOThªshﬁd
;

95 
uöt32_t
 
DMA_Mem‹yBur°
;

100 
uöt32_t
 
DMA_PîùhîÆBur°
;

104 }
	tDMA_InôTy≥Def
;

112 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
DMA1_Såóm0
) || \

113 ((
PERIPH
Ë=
DMA1_Såóm1
) || \

114 ((
PERIPH
Ë=
DMA1_Såóm2
) || \

115 ((
PERIPH
Ë=
DMA1_Såóm3
) || \

116 ((
PERIPH
Ë=
DMA1_Såóm4
) || \

117 ((
PERIPH
Ë=
DMA1_Såóm5
) || \

118 ((
PERIPH
Ë=
DMA1_Såóm6
) || \

119 ((
PERIPH
Ë=
DMA1_Såóm7
) || \

120 ((
PERIPH
Ë=
DMA2_Såóm0
) || \

121 ((
PERIPH
Ë=
DMA2_Såóm1
) || \

122 ((
PERIPH
Ë=
DMA2_Såóm2
) || \

123 ((
PERIPH
Ë=
DMA2_Såóm3
) || \

124 ((
PERIPH
Ë=
DMA2_Såóm4
) || \

125 ((
PERIPH
Ë=
DMA2_Såóm5
) || \

126 ((
PERIPH
Ë=
DMA2_Såóm6
) || \

127 ((
PERIPH
Ë=
DMA2_Såóm7
))

	)

129 
	#IS_DMA_ALL_CONTROLLER
(
CONTROLLER
Ë(((CONTROLLERË=
DMA1
) || \

130 ((
CONTROLLER
Ë=
DMA2
))

	)

135 
	#DMA_Ch™√l_0
 ((
uöt32_t
)0x00000000)

	)

136 
	#DMA_Ch™√l_1
 ((
uöt32_t
)0x02000000)

	)

137 
	#DMA_Ch™√l_2
 ((
uöt32_t
)0x04000000)

	)

138 
	#DMA_Ch™√l_3
 ((
uöt32_t
)0x06000000)

	)

139 
	#DMA_Ch™√l_4
 ((
uöt32_t
)0x08000000)

	)

140 
	#DMA_Ch™√l_5
 ((
uöt32_t
)0x0A000000)

	)

141 
	#DMA_Ch™√l_6
 ((
uöt32_t
)0x0C000000)

	)

142 
	#DMA_Ch™√l_7
 ((
uöt32_t
)0x0E000000)

	)

144 
	#IS_DMA_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DMA_Ch™√l_0
) || \

145 ((
CHANNEL
Ë=
DMA_Ch™√l_1
) || \

146 ((
CHANNEL
Ë=
DMA_Ch™√l_2
) || \

147 ((
CHANNEL
Ë=
DMA_Ch™√l_3
) || \

148 ((
CHANNEL
Ë=
DMA_Ch™√l_4
) || \

149 ((
CHANNEL
Ë=
DMA_Ch™√l_5
) || \

150 ((
CHANNEL
Ë=
DMA_Ch™√l_6
) || \

151 ((
CHANNEL
Ë=
DMA_Ch™√l_7
))

	)

160 
	#DMA_DIR_PîùhîÆToMem‹y
 ((
uöt32_t
)0x00000000)

	)

161 
	#DMA_DIR_Mem‹yToPîùhîÆ
 ((
uöt32_t
)0x00000040)

	)

162 
	#DMA_DIR_Mem‹yToMem‹y
 ((
uöt32_t
)0x00000080)

	)

164 
	#IS_DMA_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
DMA_DIR_PîùhîÆToMem‹y
 ) || \

165 ((
DIRECTION
Ë=
DMA_DIR_Mem‹yToPîùhîÆ
) || \

166 ((
DIRECTION
Ë=
DMA_DIR_Mem‹yToMem‹y
))

	)

175 
	#IS_DMA_BUFFER_SIZE
(
SIZE
Ë(((SIZEË>0x1Ë&& ((SIZEË< 0x10000))

	)

184 
	#DMA_PîùhîÆInc_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

185 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

187 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_E«bÀ
) || \

188 ((
STATE
Ë=
DMA_PîùhîÆInc_DißbÀ
))

	)

197 
	#DMA_Mem‹yInc_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

198 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

200 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_E«bÀ
) || \

201 ((
STATE
Ë=
DMA_Mem‹yInc_DißbÀ
))

	)

210 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

211 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00000800)

	)

212 
	#DMA_PîùhîÆD©aSize_W‹d
 ((
uöt32_t
)0x00001000)

	)

214 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
) || \

215 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

216 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

	)

225 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

226 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 ((
uöt32_t
)0x00002000)

	)

227 
	#DMA_Mem‹yD©aSize_W‹d
 ((
uöt32_t
)0x00004000)

	)

229 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
) || \

230 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

231 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
 ))

	)

240 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

241 
	#DMA_Mode_Cúcuœr
 ((
uöt32_t
)0x00000100)

	)

243 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_N‹mÆ
 ) || \

244 ((
MODE
Ë=
DMA_Mode_Cúcuœr
))

	)

253 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

254 
	#DMA_Pri‹ôy_Medium
 ((
uöt32_t
)0x00010000)

	)

255 
	#DMA_Pri‹ôy_High
 ((
uöt32_t
)0x00020000)

	)

256 
	#DMA_Pri‹ôy_VîyHigh
 ((
uöt32_t
)0x00030000)

	)

258 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_Low
 ) || \

259 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

260 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

261 ((
PRIORITY
Ë=
DMA_Pri‹ôy_VîyHigh
))

	)

270 
	#DMA_FIFOMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

271 
	#DMA_FIFOMode_E«bÀ
 ((
uöt32_t
)0x00000004)

	)

273 
	#IS_DMA_FIFO_MODE_STATE
(
STATE
Ë(((STATEË=
DMA_FIFOMode_DißbÀ
 ) || \

274 ((
STATE
Ë=
DMA_FIFOMode_E«bÀ
))

	)

283 
	#DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000000)

	)

284 
	#DMA_FIFOThªshﬁd_HÆfFuŒ
 ((
uöt32_t
)0x00000001)

	)

285 
	#DMA_FIFOThªshﬁd_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00000002)

	)

286 
	#DMA_FIFOThªshﬁd_FuŒ
 ((
uöt32_t
)0x00000003)

	)

288 
	#IS_DMA_FIFO_THRESHOLD
(
THRESHOLD
Ë(((THRESHOLDË=
DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
 ) || \

289 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_HÆfFuŒ
) || \

290 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_3Qu¨ãrsFuŒ
) || \

291 ((
THRESHOLD
Ë=
DMA_FIFOThªshﬁd_FuŒ
))

	)

300 
	#DMA_Mem‹yBur°_SögÀ
 ((
uöt32_t
)0x00000000)

	)

301 
	#DMA_Mem‹yBur°_INC4
 ((
uöt32_t
)0x00800000)

	)

302 
	#DMA_Mem‹yBur°_INC8
 ((
uöt32_t
)0x01000000)

	)

303 
	#DMA_Mem‹yBur°_INC16
 ((
uöt32_t
)0x01800000)

	)

305 
	#IS_DMA_MEMORY_BURST
(
BURST
Ë(((BURSTË=
DMA_Mem‹yBur°_SögÀ
) || \

306 ((
BURST
Ë=
DMA_Mem‹yBur°_INC4
) || \

307 ((
BURST
Ë=
DMA_Mem‹yBur°_INC8
) || \

308 ((
BURST
Ë=
DMA_Mem‹yBur°_INC16
))

	)

317 
	#DMA_PîùhîÆBur°_SögÀ
 ((
uöt32_t
)0x00000000)

	)

318 
	#DMA_PîùhîÆBur°_INC4
 ((
uöt32_t
)0x00200000)

	)

319 
	#DMA_PîùhîÆBur°_INC8
 ((
uöt32_t
)0x00400000)

	)

320 
	#DMA_PîùhîÆBur°_INC16
 ((
uöt32_t
)0x00600000)

	)

322 
	#IS_DMA_PERIPHERAL_BURST
(
BURST
Ë(((BURSTË=
DMA_PîùhîÆBur°_SögÀ
) || \

323 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC4
) || \

324 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC8
) || \

325 ((
BURST
Ë=
DMA_PîùhîÆBur°_INC16
))

	)

334 
	#DMA_FIFOSètus_Less1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000000 << 3)

	)

335 
	#DMA_FIFOSètus_1Qu¨ãrFuŒ
 ((
uöt32_t
)0x00000001 << 3)

	)

336 
	#DMA_FIFOSètus_HÆfFuŒ
 ((
uöt32_t
)0x00000002 << 3)

	)

337 
	#DMA_FIFOSètus_3Qu¨ãrsFuŒ
 ((
uöt32_t
)0x00000003 << 3)

	)

338 
	#DMA_FIFOSètus_Em±y
 ((
uöt32_t
)0x00000004 << 3)

	)

339 
	#DMA_FIFOSètus_FuŒ
 ((
uöt32_t
)0x00000005 << 3)

	)

341 
	#IS_DMA_FIFO_STATUS
(
STATUS
Ë(((STATUSË=
DMA_FIFOSètus_Less1Qu¨ãrFuŒ
 ) || \

342 ((
STATUS
Ë=
DMA_FIFOSètus_HÆfFuŒ
) || \

343 ((
STATUS
Ë=
DMA_FIFOSètus_1Qu¨ãrFuŒ
) || \

344 ((
STATUS
Ë=
DMA_FIFOSètus_3Qu¨ãrsFuŒ
) || \

345 ((
STATUS
Ë=
DMA_FIFOSètus_FuŒ
) || \

346 ((
STATUS
Ë=
DMA_FIFOSètus_Em±y
))

	)

354 
	#DMA_FLAG_FEIF0
 ((
uöt32_t
)0x10800001)

	)

355 
	#DMA_FLAG_DMEIF0
 ((
uöt32_t
)0x10800004)

	)

356 
	#DMA_FLAG_TEIF0
 ((
uöt32_t
)0x10000008)

	)

357 
	#DMA_FLAG_HTIF0
 ((
uöt32_t
)0x10000010)

	)

358 
	#DMA_FLAG_TCIF0
 ((
uöt32_t
)0x10000020)

	)

359 
	#DMA_FLAG_FEIF1
 ((
uöt32_t
)0x10000040)

	)

360 
	#DMA_FLAG_DMEIF1
 ((
uöt32_t
)0x10000100)

	)

361 
	#DMA_FLAG_TEIF1
 ((
uöt32_t
)0x10000200)

	)

362 
	#DMA_FLAG_HTIF1
 ((
uöt32_t
)0x10000400)

	)

363 
	#DMA_FLAG_TCIF1
 ((
uöt32_t
)0x10000800)

	)

364 
	#DMA_FLAG_FEIF2
 ((
uöt32_t
)0x10010000)

	)

365 
	#DMA_FLAG_DMEIF2
 ((
uöt32_t
)0x10040000)

	)

366 
	#DMA_FLAG_TEIF2
 ((
uöt32_t
)0x10080000)

	)

367 
	#DMA_FLAG_HTIF2
 ((
uöt32_t
)0x10100000)

	)

368 
	#DMA_FLAG_TCIF2
 ((
uöt32_t
)0x10200000)

	)

369 
	#DMA_FLAG_FEIF3
 ((
uöt32_t
)0x10400000)

	)

370 
	#DMA_FLAG_DMEIF3
 ((
uöt32_t
)0x11000000)

	)

371 
	#DMA_FLAG_TEIF3
 ((
uöt32_t
)0x12000000)

	)

372 
	#DMA_FLAG_HTIF3
 ((
uöt32_t
)0x14000000)

	)

373 
	#DMA_FLAG_TCIF3
 ((
uöt32_t
)0x18000000)

	)

374 
	#DMA_FLAG_FEIF4
 ((
uöt32_t
)0x20000001)

	)

375 
	#DMA_FLAG_DMEIF4
 ((
uöt32_t
)0x20000004)

	)

376 
	#DMA_FLAG_TEIF4
 ((
uöt32_t
)0x20000008)

	)

377 
	#DMA_FLAG_HTIF4
 ((
uöt32_t
)0x20000010)

	)

378 
	#DMA_FLAG_TCIF4
 ((
uöt32_t
)0x20000020)

	)

379 
	#DMA_FLAG_FEIF5
 ((
uöt32_t
)0x20000040)

	)

380 
	#DMA_FLAG_DMEIF5
 ((
uöt32_t
)0x20000100)

	)

381 
	#DMA_FLAG_TEIF5
 ((
uöt32_t
)0x20000200)

	)

382 
	#DMA_FLAG_HTIF5
 ((
uöt32_t
)0x20000400)

	)

383 
	#DMA_FLAG_TCIF5
 ((
uöt32_t
)0x20000800)

	)

384 
	#DMA_FLAG_FEIF6
 ((
uöt32_t
)0x20010000)

	)

385 
	#DMA_FLAG_DMEIF6
 ((
uöt32_t
)0x20040000)

	)

386 
	#DMA_FLAG_TEIF6
 ((
uöt32_t
)0x20080000)

	)

387 
	#DMA_FLAG_HTIF6
 ((
uöt32_t
)0x20100000)

	)

388 
	#DMA_FLAG_TCIF6
 ((
uöt32_t
)0x20200000)

	)

389 
	#DMA_FLAG_FEIF7
 ((
uöt32_t
)0x20400000)

	)

390 
	#DMA_FLAG_DMEIF7
 ((
uöt32_t
)0x21000000)

	)

391 
	#DMA_FLAG_TEIF7
 ((
uöt32_t
)0x22000000)

	)

392 
	#DMA_FLAG_HTIF7
 ((
uöt32_t
)0x24000000)

	)

393 
	#DMA_FLAG_TCIF7
 ((
uöt32_t
)0x28000000)

	)

395 
	#IS_DMA_CLEAR_FLAG
(
FLAG
) ((((FLAG) & 0x30000000) != 0x30000000) && (((FLAG) & 0x30000000) != 0) && \

396 (((
FLAG
Ë& 0xC082F082Ë=0x00Ë&& ((FLAGË!0x00))

	)

398 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA_FLAG_TCIF0
Ë|| ((FLAGË=
DMA_FLAG_HTIF0
) || \

399 ((
FLAG
Ë=
DMA_FLAG_TEIF0
Ë|| ((FLAGË=
DMA_FLAG_DMEIF0
) || \

400 ((
FLAG
Ë=
DMA_FLAG_FEIF0
Ë|| ((FLAGË=
DMA_FLAG_TCIF1
) || \

401 ((
FLAG
Ë=
DMA_FLAG_HTIF1
Ë|| ((FLAGË=
DMA_FLAG_TEIF1
) || \

402 ((
FLAG
Ë=
DMA_FLAG_DMEIF1
Ë|| ((FLAGË=
DMA_FLAG_FEIF1
) || \

403 ((
FLAG
Ë=
DMA_FLAG_TCIF2
Ë|| ((FLAGË=
DMA_FLAG_HTIF2
) || \

404 ((
FLAG
Ë=
DMA_FLAG_TEIF2
Ë|| ((FLAGË=
DMA_FLAG_DMEIF2
) || \

405 ((
FLAG
Ë=
DMA_FLAG_FEIF2
Ë|| ((FLAGË=
DMA_FLAG_TCIF3
) || \

406 ((
FLAG
Ë=
DMA_FLAG_HTIF3
Ë|| ((FLAGË=
DMA_FLAG_TEIF3
) || \

407 ((
FLAG
Ë=
DMA_FLAG_DMEIF3
Ë|| ((FLAGË=
DMA_FLAG_FEIF3
) || \

408 ((
FLAG
Ë=
DMA_FLAG_TCIF4
Ë|| ((FLAGË=
DMA_FLAG_HTIF4
) || \

409 ((
FLAG
Ë=
DMA_FLAG_TEIF4
Ë|| ((FLAGË=
DMA_FLAG_DMEIF4
) || \

410 ((
FLAG
Ë=
DMA_FLAG_FEIF4
Ë|| ((FLAGË=
DMA_FLAG_TCIF5
) || \

411 ((
FLAG
Ë=
DMA_FLAG_HTIF5
Ë|| ((FLAGË=
DMA_FLAG_TEIF5
) || \

412 ((
FLAG
Ë=
DMA_FLAG_DMEIF5
Ë|| ((FLAGË=
DMA_FLAG_FEIF5
) || \

413 ((
FLAG
Ë=
DMA_FLAG_TCIF6
Ë|| ((FLAGË=
DMA_FLAG_HTIF6
) || \

414 ((
FLAG
Ë=
DMA_FLAG_TEIF6
Ë|| ((FLAGË=
DMA_FLAG_DMEIF6
) || \

415 ((
FLAG
Ë=
DMA_FLAG_FEIF6
Ë|| ((FLAGË=
DMA_FLAG_TCIF7
) || \

416 ((
FLAG
Ë=
DMA_FLAG_HTIF7
Ë|| ((FLAGË=
DMA_FLAG_TEIF7
) || \

417 ((
FLAG
Ë=
DMA_FLAG_DMEIF7
Ë|| ((FLAGË=
DMA_FLAG_FEIF7
))

	)

426 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000010)

	)

427 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000008)

	)

428 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000004)

	)

429 
	#DMA_IT_DME
 ((
uöt32_t
)0x00000002)

	)

430 
	#DMA_IT_FE
 ((
uöt32_t
)0x00000080)

	)

432 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFF61Ë=0x00Ë&& ((ITË!0x00))

	)

441 
	#DMA_IT_FEIF0
 ((
uöt32_t
)0x90000001)

	)

442 
	#DMA_IT_DMEIF0
 ((
uöt32_t
)0x10001004)

	)

443 
	#DMA_IT_TEIF0
 ((
uöt32_t
)0x10002008)

	)

444 
	#DMA_IT_HTIF0
 ((
uöt32_t
)0x10004010)

	)

445 
	#DMA_IT_TCIF0
 ((
uöt32_t
)0x10008020)

	)

446 
	#DMA_IT_FEIF1
 ((
uöt32_t
)0x90000040)

	)

447 
	#DMA_IT_DMEIF1
 ((
uöt32_t
)0x10001100)

	)

448 
	#DMA_IT_TEIF1
 ((
uöt32_t
)0x10002200)

	)

449 
	#DMA_IT_HTIF1
 ((
uöt32_t
)0x10004400)

	)

450 
	#DMA_IT_TCIF1
 ((
uöt32_t
)0x10008800)

	)

451 
	#DMA_IT_FEIF2
 ((
uöt32_t
)0x90010000)

	)

452 
	#DMA_IT_DMEIF2
 ((
uöt32_t
)0x10041000)

	)

453 
	#DMA_IT_TEIF2
 ((
uöt32_t
)0x10082000)

	)

454 
	#DMA_IT_HTIF2
 ((
uöt32_t
)0x10104000)

	)

455 
	#DMA_IT_TCIF2
 ((
uöt32_t
)0x10208000)

	)

456 
	#DMA_IT_FEIF3
 ((
uöt32_t
)0x90400000)

	)

457 
	#DMA_IT_DMEIF3
 ((
uöt32_t
)0x11001000)

	)

458 
	#DMA_IT_TEIF3
 ((
uöt32_t
)0x12002000)

	)

459 
	#DMA_IT_HTIF3
 ((
uöt32_t
)0x14004000)

	)

460 
	#DMA_IT_TCIF3
 ((
uöt32_t
)0x18008000)

	)

461 
	#DMA_IT_FEIF4
 ((
uöt32_t
)0xA0000001)

	)

462 
	#DMA_IT_DMEIF4
 ((
uöt32_t
)0x20001004)

	)

463 
	#DMA_IT_TEIF4
 ((
uöt32_t
)0x20002008)

	)

464 
	#DMA_IT_HTIF4
 ((
uöt32_t
)0x20004010)

	)

465 
	#DMA_IT_TCIF4
 ((
uöt32_t
)0x20008020)

	)

466 
	#DMA_IT_FEIF5
 ((
uöt32_t
)0xA0000040)

	)

467 
	#DMA_IT_DMEIF5
 ((
uöt32_t
)0x20001100)

	)

468 
	#DMA_IT_TEIF5
 ((
uöt32_t
)0x20002200)

	)

469 
	#DMA_IT_HTIF5
 ((
uöt32_t
)0x20004400)

	)

470 
	#DMA_IT_TCIF5
 ((
uöt32_t
)0x20008800)

	)

471 
	#DMA_IT_FEIF6
 ((
uöt32_t
)0xA0010000)

	)

472 
	#DMA_IT_DMEIF6
 ((
uöt32_t
)0x20041000)

	)

473 
	#DMA_IT_TEIF6
 ((
uöt32_t
)0x20082000)

	)

474 
	#DMA_IT_HTIF6
 ((
uöt32_t
)0x20104000)

	)

475 
	#DMA_IT_TCIF6
 ((
uöt32_t
)0x20208000)

	)

476 
	#DMA_IT_FEIF7
 ((
uöt32_t
)0xA0400000)

	)

477 
	#DMA_IT_DMEIF7
 ((
uöt32_t
)0x21001000)

	)

478 
	#DMA_IT_TEIF7
 ((
uöt32_t
)0x22002000)

	)

479 
	#DMA_IT_HTIF7
 ((
uöt32_t
)0x24004000)

	)

480 
	#DMA_IT_TCIF7
 ((
uöt32_t
)0x28008000)

	)

482 
	#IS_DMA_CLEAR_IT
(
IT
) ((((IT) & 0x30000000) != 0x30000000) && \

483 (((
IT
) & 0x30000000) != 0) && ((IT) != 0x00) && \

484 (((
IT
Ë& 0x40820082Ë=0x00))

	)

486 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA_IT_TCIF0
Ë|| ((ITË=
DMA_IT_HTIF0
) || \

487 ((
IT
Ë=
DMA_IT_TEIF0
Ë|| ((ITË=
DMA_IT_DMEIF0
) || \

488 ((
IT
Ë=
DMA_IT_FEIF0
Ë|| ((ITË=
DMA_IT_TCIF1
) || \

489 ((
IT
Ë=
DMA_IT_HTIF1
Ë|| ((ITË=
DMA_IT_TEIF1
) || \

490 ((
IT
Ë=
DMA_IT_DMEIF1
)|| ((ITË=
DMA_IT_FEIF1
) || \

491 ((
IT
Ë=
DMA_IT_TCIF2
Ë|| ((ITË=
DMA_IT_HTIF2
) || \

492 ((
IT
Ë=
DMA_IT_TEIF2
Ë|| ((ITË=
DMA_IT_DMEIF2
) || \

493 ((
IT
Ë=
DMA_IT_FEIF2
Ë|| ((ITË=
DMA_IT_TCIF3
) || \

494 ((
IT
Ë=
DMA_IT_HTIF3
Ë|| ((ITË=
DMA_IT_TEIF3
) || \

495 ((
IT
Ë=
DMA_IT_DMEIF3
)|| ((ITË=
DMA_IT_FEIF3
) || \

496 ((
IT
Ë=
DMA_IT_TCIF4
Ë|| ((ITË=
DMA_IT_HTIF4
) || \

497 ((
IT
Ë=
DMA_IT_TEIF4
Ë|| ((ITË=
DMA_IT_DMEIF4
) || \

498 ((
IT
Ë=
DMA_IT_FEIF4
Ë|| ((ITË=
DMA_IT_TCIF5
) || \

499 ((
IT
Ë=
DMA_IT_HTIF5
Ë|| ((ITË=
DMA_IT_TEIF5
) || \

500 ((
IT
Ë=
DMA_IT_DMEIF5
)|| ((ITË=
DMA_IT_FEIF5
) || \

501 ((
IT
Ë=
DMA_IT_TCIF6
Ë|| ((ITË=
DMA_IT_HTIF6
) || \

502 ((
IT
Ë=
DMA_IT_TEIF6
Ë|| ((ITË=
DMA_IT_DMEIF6
) || \

503 ((
IT
Ë=
DMA_IT_FEIF6
Ë|| ((ITË=
DMA_IT_TCIF7
) || \

504 ((
IT
Ë=
DMA_IT_HTIF7
Ë|| ((ITË=
DMA_IT_TEIF7
) || \

505 ((
IT
Ë=
DMA_IT_DMEIF7
)|| ((ITË=
DMA_IT_FEIF7
))

	)

514 
	#DMA_PINCOS_Psize
 ((
uöt32_t
)0x00000000)

	)

515 
	#DMA_PINCOS_W‹dAlig√d
 ((
uöt32_t
)0x00008000)

	)

517 
	#IS_DMA_PINCOS_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PINCOS_Psize
) || \

518 ((
SIZE
Ë=
DMA_PINCOS_W‹dAlig√d
))

	)

527 
	#DMA_FlowCål_Mem‹y
 ((
uöt32_t
)0x00000000)

	)

528 
	#DMA_FlowCål_PîùhîÆ
 ((
uöt32_t
)0x00000020)

	)

530 
	#IS_DMA_FLOW_CTRL
(
CTRL
Ë(((CTRLË=
DMA_FlowCål_Mem‹y
) || \

531 ((
CTRL
Ë=
DMA_FlowCål_PîùhîÆ
))

	)

540 
	#DMA_Mem‹y_0
 ((
uöt32_t
)0x00000000)

	)

541 
	#DMA_Mem‹y_1
 ((
uöt32_t
)0x00080000)

	)

543 
	#IS_DMA_CURRENT_MEM
(
MEM
Ë(((MEMË=
DMA_Mem‹y_0
Ë|| ((MEMË=
DMA_Mem‹y_1
))

	)

556 
DMA_DeInô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

559 
DMA_Inô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

560 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

561 
DMA_Cmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

564 
DMA_PîùhIncOff£tSizeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_Pöcos
);

565 
DMA_FlowC⁄åﬁÀrC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FlowCål
);

568 
DMA_SëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt16_t
 
Cou¡î
);

569 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

572 
DMA_DoubÀBuf„rModeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹y1Ba£Addr
,

573 
uöt32_t
 
DMA_CuºítMem‹y
);

574 
DMA_DoubÀBuf„rModeCmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

575 
DMA_Mem‹yT¨gëC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹yBa£Addr
,

576 
uöt32_t
 
DMA_Mem‹yT¨gë
);

577 
uöt32_t
 
DMA_GëCuºítMem‹yT¨gë
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

580 
Fun˘i⁄ÆSèã
 
DMA_GëCmdSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

581 
uöt32_t
 
DMA_GëFIFOSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
);

582 
FœgSètus
 
DMA_GëFœgSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
);

583 
DMA_CÀ¨Fœg
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
);

584 
DMA_ITC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

585 
ITSètus
 
DMA_GëITSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
);

586 
DMA_CÀ¨ITPídögBô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
);

588 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_exti.h

24 #i‚de‡
__STM32F4xx_EXTI_H


25 
	#__STM32F4xx_EXTI_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

50 
EXTI_Mode_I¡îru±
 = 0x00,

51 
EXTI_Mode_Evít
 = 0x04

52 }
	tEXTIMode_Ty≥Def
;

54 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

62 
EXTI_Triggî_Risög
 = 0x08,

63 
EXTI_Triggî_FÆlög
 = 0x0C,

64 
EXTI_Triggî_Risög_FÆlög
 = 0x10

65 }
	tEXTITriggî_Ty≥Def
;

67 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
) || \

68 ((
TRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

69 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

	)

76 
uöt32_t
 
EXTI_Löe
;

79 
EXTIMode_Ty≥Def
 
EXTI_Mode
;

82 
EXTITriggî_Ty≥Def
 
EXTI_Triggî
;

85 
Fun˘i⁄ÆSèã
 
EXTI_LöeCmd
;

87 }
	tEXTI_InôTy≥Def
;

99 
	#EXTI_Löe0
 ((
uöt32_t
)0x00001Ë

	)

100 
	#EXTI_Löe1
 ((
uöt32_t
)0x00002Ë

	)

101 
	#EXTI_Löe2
 ((
uöt32_t
)0x00004Ë

	)

102 
	#EXTI_Löe3
 ((
uöt32_t
)0x00008Ë

	)

103 
	#EXTI_Löe4
 ((
uöt32_t
)0x00010Ë

	)

104 
	#EXTI_Löe5
 ((
uöt32_t
)0x00020Ë

	)

105 
	#EXTI_Löe6
 ((
uöt32_t
)0x00040Ë

	)

106 
	#EXTI_Löe7
 ((
uöt32_t
)0x00080Ë

	)

107 
	#EXTI_Löe8
 ((
uöt32_t
)0x00100Ë

	)

108 
	#EXTI_Löe9
 ((
uöt32_t
)0x00200Ë

	)

109 
	#EXTI_Löe10
 ((
uöt32_t
)0x00400Ë

	)

110 
	#EXTI_Löe11
 ((
uöt32_t
)0x00800Ë

	)

111 
	#EXTI_Löe12
 ((
uöt32_t
)0x01000Ë

	)

112 
	#EXTI_Löe13
 ((
uöt32_t
)0x02000Ë

	)

113 
	#EXTI_Löe14
 ((
uöt32_t
)0x04000Ë

	)

114 
	#EXTI_Löe15
 ((
uöt32_t
)0x08000Ë

	)

115 
	#EXTI_Löe16
 ((
uöt32_t
)0x10000Ë

	)

116 
	#EXTI_Löe17
 ((
uöt32_t
)0x20000Ë

	)

117 
	#EXTI_Löe18
 ((
uöt32_t
)0x40000Ë

	)

118 
	#EXTI_Löe19
 ((
uöt32_t
)0x80000Ë

	)

119 
	#EXTI_Löe20
 ((
uöt32_t
)0x00100000Ë

	)

120 
	#EXTI_Löe21
 ((
uöt32_t
)0x00200000Ë

	)

121 
	#EXTI_Löe22
 ((
uöt32_t
)0x00400000Ë

	)

123 
	#IS_EXTI_LINE
(
LINE
Ë((((LINEË& (
uöt32_t
)0xFF800000Ë=0x00Ë&& ((LINEË!(
uöt16_t
)0x00))

	)

125 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
) || \

126 ((
LINE
Ë=
EXTI_Löe2
Ë|| ((LINEË=
EXTI_Löe3
) || \

127 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

128 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

129 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

130 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

131 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

132 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

133 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

134 ((
LINE
Ë=
EXTI_Löe18
Ë|| ((LINEË=
EXTI_Löe19
) || \

135 ((
LINE
Ë=
EXTI_Löe20
Ë|| ((LINEË=
EXTI_Löe21
) ||\

136 ((
LINE
Ë=
EXTI_Löe22
))

	)

150 
EXTI_DeInô
();

153 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

154 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

155 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

158 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

159 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

160 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

161 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

163 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_flash.h

24 #i‚de‡
__STM32F4xx_FLASH_H


25 
	#__STM32F4xx_FLASH_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

48 
FLASH_BUSY
 = 1,

49 
FLASH_ERROR_PGS
,

50 
FLASH_ERROR_PGP
,

51 
FLASH_ERROR_PGA
,

52 
FLASH_ERROR_WRP
,

53 
FLASH_ERROR_PROGRAM
,

54 
FLASH_ERROR_OPERATION
,

55 
FLASH_COMPLETE


56 }
	tFLASH_Sètus
;

67 
	#FLASH_L©ícy_0
 ((
uöt8_t
)0x0000Ë

	)

68 
	#FLASH_L©ícy_1
 ((
uöt8_t
)0x0001Ë

	)

69 
	#FLASH_L©ícy_2
 ((
uöt8_t
)0x0002Ë

	)

70 
	#FLASH_L©ícy_3
 ((
uöt8_t
)0x0003Ë

	)

71 
	#FLASH_L©ícy_4
 ((
uöt8_t
)0x0004Ë

	)

72 
	#FLASH_L©ícy_5
 ((
uöt8_t
)0x0005Ë

	)

73 
	#FLASH_L©ícy_6
 ((
uöt8_t
)0x0006Ë

	)

74 
	#FLASH_L©ícy_7
 ((
uöt8_t
)0x0007Ë

	)

76 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
) || \

77 ((
LATENCY
Ë=
FLASH_L©ícy_1
) || \

78 ((
LATENCY
Ë=
FLASH_L©ícy_2
) || \

79 ((
LATENCY
Ë=
FLASH_L©ícy_3
) || \

80 ((
LATENCY
Ë=
FLASH_L©ícy_4
) || \

81 ((
LATENCY
Ë=
FLASH_L©ícy_5
) || \

82 ((
LATENCY
Ë=
FLASH_L©ícy_6
) || \

83 ((
LATENCY
Ë=
FLASH_L©ícy_7
))

	)

91 
	#VﬁègeR™ge_1
 ((
uöt8_t
)0x00Ë

	)

92 
	#VﬁègeR™ge_2
 ((
uöt8_t
)0x01Ë

	)

93 
	#VﬁègeR™ge_3
 ((
uöt8_t
)0x02Ë

	)

94 
	#VﬁègeR™ge_4
 ((
uöt8_t
)0x03Ë

	)

96 
	#IS_VOLTAGERANGE
(
RANGE
)(((RANGEË=
VﬁègeR™ge_1
) || \

97 ((
RANGE
Ë=
VﬁègeR™ge_2
) || \

98 ((
RANGE
Ë=
VﬁègeR™ge_3
) || \

99 ((
RANGE
Ë=
VﬁègeR™ge_4
))

	)

107 
	#FLASH_Se˘‹_0
 ((
uöt16_t
)0x0000Ë

	)

108 
	#FLASH_Se˘‹_1
 ((
uöt16_t
)0x0008Ë

	)

109 
	#FLASH_Se˘‹_2
 ((
uöt16_t
)0x0010Ë

	)

110 
	#FLASH_Se˘‹_3
 ((
uöt16_t
)0x0018Ë

	)

111 
	#FLASH_Se˘‹_4
 ((
uöt16_t
)0x0020Ë

	)

112 
	#FLASH_Se˘‹_5
 ((
uöt16_t
)0x0028Ë

	)

113 
	#FLASH_Se˘‹_6
 ((
uöt16_t
)0x0030Ë

	)

114 
	#FLASH_Se˘‹_7
 ((
uöt16_t
)0x0038Ë

	)

115 
	#FLASH_Se˘‹_8
 ((
uöt16_t
)0x0040Ë

	)

116 
	#FLASH_Se˘‹_9
 ((
uöt16_t
)0x0048Ë

	)

117 
	#FLASH_Se˘‹_10
 ((
uöt16_t
)0x0050Ë

	)

118 
	#FLASH_Se˘‹_11
 ((
uöt16_t
)0x0058Ë

	)

119 
	#IS_FLASH_SECTOR
(
SECTOR
Ë(((SECTORË=
FLASH_Se˘‹_0
Ë|| ((SECTORË=
FLASH_Se˘‹_1
) ||\

120 ((
SECTOR
Ë=
FLASH_Se˘‹_2
Ë|| ((SECTORË=
FLASH_Se˘‹_3
) ||\

121 ((
SECTOR
Ë=
FLASH_Se˘‹_4
Ë|| ((SECTORË=
FLASH_Se˘‹_5
) ||\

122 ((
SECTOR
Ë=
FLASH_Se˘‹_6
Ë|| ((SECTORË=
FLASH_Se˘‹_7
) ||\

123 ((
SECTOR
Ë=
FLASH_Se˘‹_8
Ë|| ((SECTORË=
FLASH_Se˘‹_9
) ||\

124 ((
SECTOR
Ë=
FLASH_Se˘‹_10
Ë|| ((SECTORË=
FLASH_Se˘‹_11
))

	)

125 
	#IS_FLASH_ADDRESS
(
ADDRESS
) ((((ADDRESS) >= 0x08000000) && ((ADDRESS) < 0x080FFFFF)) ||\

126 (((
ADDRESS
Ë>0x1FFF7800Ë&& ((ADDRESSË< 0x1FFF7A0F)))

	)

134 
	#OB_WRP_Se˘‹_0
 ((
uöt32_t
)0x00000001Ë

	)

135 
	#OB_WRP_Se˘‹_1
 ((
uöt32_t
)0x00000002Ë

	)

136 
	#OB_WRP_Se˘‹_2
 ((
uöt32_t
)0x00000004Ë

	)

137 
	#OB_WRP_Se˘‹_3
 ((
uöt32_t
)0x00000008Ë

	)

138 
	#OB_WRP_Se˘‹_4
 ((
uöt32_t
)0x00000010Ë

	)

139 
	#OB_WRP_Se˘‹_5
 ((
uöt32_t
)0x00000020Ë

	)

140 
	#OB_WRP_Se˘‹_6
 ((
uöt32_t
)0x00000040Ë

	)

141 
	#OB_WRP_Se˘‹_7
 ((
uöt32_t
)0x00000080Ë

	)

142 
	#OB_WRP_Se˘‹_8
 ((
uöt32_t
)0x00000100Ë

	)

143 
	#OB_WRP_Se˘‹_9
 ((
uöt32_t
)0x00000200Ë

	)

144 
	#OB_WRP_Se˘‹_10
 ((
uöt32_t
)0x00000400Ë

	)

145 
	#OB_WRP_Se˘‹_11
 ((
uöt32_t
)0x00000800Ë

	)

146 
	#OB_WRP_Se˘‹_AŒ
 ((
uöt32_t
)0x00000FFFË

	)

148 
	#IS_OB_WRP
(
SECTOR
)((((SECTORË& (
uöt32_t
)0xFFFFF000Ë=0x00000000Ë&& ((SECTORË!0x00000000))

	)

156 
	#OB_RDP_Levñ_0
 ((
uöt8_t
)0xAA)

	)

157 
	#OB_RDP_Levñ_1
 ((
uöt8_t
)0x55)

	)

160 
	#IS_OB_RDP
(
LEVEL
Ë(((LEVELË=
OB_RDP_Levñ_0
)||\

161 ((
LEVEL
Ë=
OB_RDP_Levñ_1
))

	)

170 
	#OB_IWDG_SW
 ((
uöt8_t
)0x20Ë

	)

171 
	#OB_IWDG_HW
 ((
uöt8_t
)0x00Ë

	)

172 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

180 
	#OB_STOP_NoRST
 ((
uöt8_t
)0x40Ë

	)

181 
	#OB_STOP_RST
 ((
uöt8_t
)0x00Ë

	)

182 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

191 
	#OB_STDBY_NoRST
 ((
uöt8_t
)0x80Ë

	)

192 
	#OB_STDBY_RST
 ((
uöt8_t
)0x00Ë

	)

193 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

201 
	#OB_BOR_LEVEL3
 ((
uöt8_t
)0x00Ë

	)

202 
	#OB_BOR_LEVEL2
 ((
uöt8_t
)0x04Ë

	)

203 
	#OB_BOR_LEVEL1
 ((
uöt8_t
)0x08Ë

	)

204 
	#OB_BOR_OFF
 ((
uöt8_t
)0x0CË

	)

205 
	#IS_OB_BOR
(
LEVEL
Ë(((LEVELË=
OB_BOR_LEVEL1
Ë|| ((LEVELË=
OB_BOR_LEVEL2
) ||\

206 ((
LEVEL
Ë=
OB_BOR_LEVEL3
Ë|| ((LEVELË=
OB_BOR_OFF
))

	)

214 
	#FLASH_IT_EOP
 ((
uöt32_t
)0x01000000Ë

	)

215 
	#FLASH_IT_ERR
 ((
uöt32_t
)0x02000000Ë

	)

216 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFCFFFFFFË=0x00000000Ë&& ((ITË!0x00000000))

	)

224 
	#FLASH_FLAG_EOP
 ((
uöt32_t
)0x00000001Ë

	)

225 
	#FLASH_FLAG_OPERR
 ((
uöt32_t
)0x00000002Ë

	)

226 
	#FLASH_FLAG_WRPERR
 ((
uöt32_t
)0x00000010Ë

	)

227 
	#FLASH_FLAG_PGAERR
 ((
uöt32_t
)0x00000020Ë

	)

228 
	#FLASH_FLAG_PGPERR
 ((
uöt32_t
)0x00000040Ë

	)

229 
	#FLASH_FLAG_PGSERR
 ((
uöt32_t
)0x00000080Ë

	)

230 
	#FLASH_FLAG_BSY
 ((
uöt32_t
)0x00010000Ë

	)

231 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFF0CË=0x00000000Ë&& ((FLAGË!0x00000000))

	)

232 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_EOP
Ë|| ((FLAGË=
FLASH_FLAG_OPERR
) || \

233 ((
FLAG
Ë=
FLASH_FLAG_WRPERR
Ë|| ((FLAGË=
FLASH_FLAG_PGAERR
) || \

234 ((
FLAG
Ë=
FLASH_FLAG_PGPERR
Ë|| ((FLAGË=
FLASH_FLAG_PGSERR
) || \

235 ((
FLAG
Ë=
FLASH_FLAG_BSY
))

	)

243 
	#FLASH_PSIZE_BYTE
 ((
uöt32_t
)0x00000000)

	)

244 
	#FLASH_PSIZE_HALF_WORD
 ((
uöt32_t
)0x00000100)

	)

245 
	#FLASH_PSIZE_WORD
 ((
uöt32_t
)0x00000200)

	)

246 
	#FLASH_PSIZE_DOUBLE_WORD
 ((
uöt32_t
)0x00000300)

	)

247 
	#CR_PSIZE_MASK
 ((
uöt32_t
)0xFFFFFCFF)

	)

255 
	#RDP_KEY
 ((
uöt16_t
)0x00A5)

	)

256 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123)

	)

257 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89AB)

	)

258 
	#FLASH_OPT_KEY1
 ((
uöt32_t
)0x08192A3B)

	)

259 
	#FLASH_OPT_KEY2
 ((
uöt32_t
)0x4C5D6E7F)

	)

267 
	#ACR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C00)

	)

271 
	#OPTCR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C14)

	)

272 
	#OPTCR_BYTE1_ADDRESS
 ((
uöt32_t
)0x40023C15)

	)

273 
	#OPTCR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C16)

	)

283 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

284 
FLASH_Pª„tchBuf„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

285 
FLASH_In°ru˘i⁄CacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

286 
FLASH_D©aCacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
FLASH_In°ru˘i⁄CacheRe£t
();

288 
FLASH_D©aCacheRe£t
();

291 
FLASH_U∆ock
();

292 
FLASH_Lock
();

293 
FLASH_Sètus
 
FLASH_Eø£Se˘‹
(
uöt32_t
 
FLASH_Se˘‹
, 
uöt8_t
 
VﬁègeR™ge
);

294 
FLASH_Sètus
 
FLASH_Eø£AŒSe˘‹s
(
uöt8_t
 
VﬁègeR™ge
);

295 
FLASH_Sètus
 
FLASH_ProgømDoubÀW‹d
(
uöt32_t
 
Addªss
, 
uöt64_t
 
D©a
);

296 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

297 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

298 
FLASH_Sètus
 
FLASH_ProgømByã
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

301 
FLASH_OB_U∆ock
();

302 
FLASH_OB_Lock
();

303 
FLASH_OB_WRPC⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

304 
FLASH_OB_RDPC⁄fig
(
uöt8_t
 
OB_RDP
);

305 
FLASH_OB_U£rC⁄fig
(
uöt8_t
 
OB_IWDG
, uöt8_à
OB_STOP
, uöt8_à
OB_STDBY
);

306 
FLASH_OB_BORC⁄fig
(
uöt8_t
 
OB_BOR
);

307 
FLASH_Sètus
 
FLASH_OB_Launch
();

308 
uöt8_t
 
FLASH_OB_GëU£r
();

309 
uöt16_t
 
FLASH_OB_GëWRP
();

310 
FœgSètus
 
FLASH_OB_GëRDP
();

311 
uöt8_t
 
FLASH_OB_GëBOR
();

314 
FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

315 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
);

316 
FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
);

317 
FLASH_Sètus
 
FLASH_GëSètus
();

318 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
();

320 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_fsmc.h

24 #i‚de‡
__STM32F4xx_FSMC_H


25 
	#__STM32F4xx_FSMC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

49 
uöt32_t
 
FSMC_AddªssSëupTime
;

54 
uöt32_t
 
FSMC_AddªssHﬁdTime
;

59 
uöt32_t
 
FSMC_D©aSëupTime
;

64 
uöt32_t
 
FSMC_BusTu∫AroundDuøti⁄
;

69 
uöt32_t
 
FSMC_CLKDivisi⁄
;

73 
uöt32_t
 
FSMC_D©aL©ícy
;

81 
uöt32_t
 
FSMC_Ac˚ssMode
;

83 }
	tFSMC_NORSRAMTimögInôTy≥Def
;

90 
uöt32_t
 
FSMC_B™k
;

93 
uöt32_t
 
FSMC_D©aAddªssMux
;

97 
uöt32_t
 
FSMC_Mem‹yTy≥
;

101 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

104 
uöt32_t
 
FSMC_Bur°Ac˚ssMode
;

108 
uöt32_t
 
FSMC_Asynchr⁄ousWaô
;

112 
uöt32_t
 
FSMC_WaôSig«lPﬁ¨ôy
;

116 
uöt32_t
 
FSMC_WøpMode
;

120 
uöt32_t
 
FSMC_WaôSig«lA˘ive
;

125 
uöt32_t
 
FSMC_WrôeO≥øti⁄
;

128 
uöt32_t
 
FSMC_WaôSig«l
;

132 
uöt32_t
 
FSMC_ExãndedMode
;

135 
uöt32_t
 
FSMC_WrôeBur°
;

138 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_RódWrôeTimögSåu˘
;

140 
FSMC_NORSRAMTimögInôTy≥Def
* 
FSMC_WrôeTimögSåu˘
;

141 }
	tFSMC_NORSRAMInôTy≥Def
;

148 
uöt32_t
 
FSMC_SëupTime
;

154 
uöt32_t
 
FSMC_WaôSëupTime
;

160 
uöt32_t
 
FSMC_HﬁdSëupTime
;

167 
uöt32_t
 
FSMC_HiZSëupTime
;

172 }
	tFSMC_NAND_PCCARDTimögInôTy≥Def
;

179 
uöt32_t
 
FSMC_B™k
;

182 
uöt32_t
 
FSMC_Waô„©uª
;

185 
uöt32_t
 
FSMC_Mem‹yD©aWidth
;

188 
uöt32_t
 
FSMC_ECC
;

191 
uöt32_t
 
FSMC_ECCPageSize
;

194 
uöt32_t
 
FSMC_TCLRSëupTime
;

198 
uöt32_t
 
FSMC_TARSëupTime
;

202 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

204 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

205 }
	tFSMC_NANDInôTy≥Def
;

213 
uöt32_t
 
FSMC_Waô„©uª
;

216 
uöt32_t
 
FSMC_TCLRSëupTime
;

220 
uöt32_t
 
FSMC_TARSëupTime
;

225 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_Comm⁄S∑˚TimögSåu˘
;

227 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_AâribuãS∑˚TimögSåu˘
;

229 
FSMC_NAND_PCCARDTimögInôTy≥Def
* 
FSMC_IOS∑˚TimögSåu˘
;

230 }
	tFSMC_PCCARDInôTy≥Def
;

241 
	#FSMC_B™k1_NORSRAM1
 ((
uöt32_t
)0x00000000)

	)

242 
	#FSMC_B™k1_NORSRAM2
 ((
uöt32_t
)0x00000002)

	)

243 
	#FSMC_B™k1_NORSRAM3
 ((
uöt32_t
)0x00000004)

	)

244 
	#FSMC_B™k1_NORSRAM4
 ((
uöt32_t
)0x00000006)

	)

252 
	#FSMC_B™k2_NAND
 ((
uöt32_t
)0x00000010)

	)

253 
	#FSMC_B™k3_NAND
 ((
uöt32_t
)0x00000100)

	)

261 
	#FSMC_B™k4_PCCARD
 ((
uöt32_t
)0x00001000)

	)

266 
	#IS_FSMC_NORSRAM_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k1_NORSRAM1
) || \

267 ((
BANK
Ë=
FSMC_B™k1_NORSRAM2
) || \

268 ((
BANK
Ë=
FSMC_B™k1_NORSRAM3
) || \

269 ((
BANK
Ë=
FSMC_B™k1_NORSRAM4
))

	)

271 
	#IS_FSMC_NAND_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

272 ((
BANK
Ë=
FSMC_B™k3_NAND
))

	)

274 
	#IS_FSMC_GETFLAG_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

275 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

276 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

	)

278 
	#IS_FSMC_IT_BANK
(
BANK
Ë(((BANKË=
FSMC_B™k2_NAND
) || \

279 ((
BANK
Ë=
FSMC_B™k3_NAND
) || \

280 ((
BANK
Ë=
FSMC_B™k4_PCCARD
))

	)

290 
	#FSMC_D©aAddªssMux_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

291 
	#FSMC_D©aAddªssMux_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

292 
	#IS_FSMC_MUX
(
MUX
Ë(((MUXË=
FSMC_D©aAddªssMux_DißbÀ
) || \

293 ((
MUX
Ë=
FSMC_D©aAddªssMux_E«bÀ
))

	)

302 
	#FSMC_Mem‹yTy≥_SRAM
 ((
uöt32_t
)0x00000000)

	)

303 
	#FSMC_Mem‹yTy≥_PSRAM
 ((
uöt32_t
)0x00000004)

	)

304 
	#FSMC_Mem‹yTy≥_NOR
 ((
uöt32_t
)0x00000008)

	)

305 
	#IS_FSMC_MEMORY
(
MEMORY
Ë(((MEMORYË=
FSMC_Mem‹yTy≥_SRAM
) || \

306 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_PSRAM
)|| \

307 ((
MEMORY
Ë=
FSMC_Mem‹yTy≥_NOR
))

	)

316 
	#FSMC_Mem‹yD©aWidth_8b
 ((
uöt32_t
)0x00000000)

	)

317 
	#FSMC_Mem‹yD©aWidth_16b
 ((
uöt32_t
)0x00000010)

	)

318 
	#IS_FSMC_MEMORY_WIDTH
(
WIDTH
Ë(((WIDTHË=
FSMC_Mem‹yD©aWidth_8b
) || \

319 ((
WIDTH
Ë=
FSMC_Mem‹yD©aWidth_16b
))

	)

328 
	#FSMC_Bur°Ac˚ssMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

329 
	#FSMC_Bur°Ac˚ssMode_E«bÀ
 ((
uöt32_t
)0x00000100)

	)

330 
	#IS_FSMC_BURSTMODE
(
STATE
Ë(((STATEË=
FSMC_Bur°Ac˚ssMode_DißbÀ
) || \

331 ((
STATE
Ë=
FSMC_Bur°Ac˚ssMode_E«bÀ
))

	)

339 
	#FSMC_Asynchr⁄ousWaô_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

340 
	#FSMC_Asynchr⁄ousWaô_E«bÀ
 ((
uöt32_t
)0x00008000)

	)

341 
	#IS_FSMC_ASYNWAIT
(
STATE
Ë(((STATEË=
FSMC_Asynchr⁄ousWaô_DißbÀ
) || \

342 ((
STATE
Ë=
FSMC_Asynchr⁄ousWaô_E«bÀ
))

	)

350 
	#FSMC_WaôSig«lPﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

351 
	#FSMC_WaôSig«lPﬁ¨ôy_High
 ((
uöt32_t
)0x00000200)

	)

352 
	#IS_FSMC_WAIT_POLARITY
(
POLARITY
Ë(((POLARITYË=
FSMC_WaôSig«lPﬁ¨ôy_Low
) || \

353 ((
POLARITY
Ë=
FSMC_WaôSig«lPﬁ¨ôy_High
))

	)

361 
	#FSMC_WøpMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

362 
	#FSMC_WøpMode_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

363 
	#IS_FSMC_WRAP_MODE
(
MODE
Ë(((MODEË=
FSMC_WøpMode_DißbÀ
) || \

364 ((
MODE
Ë=
FSMC_WøpMode_E«bÀ
))

	)

372 
	#FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
 ((
uöt32_t
)0x00000000)

	)

373 
	#FSMC_WaôSig«lA˘ive_DurögWaôSèã
 ((
uöt32_t
)0x00000800)

	)

374 
	#IS_FSMC_WAIT_SIGNAL_ACTIVE
(
ACTIVE
Ë(((ACTIVEË=
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
) || \

375 ((
ACTIVE
Ë=
FSMC_WaôSig«lA˘ive_DurögWaôSèã
))

	)

383 
	#FSMC_WrôeO≥øti⁄_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

384 
	#FSMC_WrôeO≥øti⁄_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

385 
	#IS_FSMC_WRITE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
FSMC_WrôeO≥øti⁄_DißbÀ
) || \

386 ((
OPERATION
Ë=
FSMC_WrôeO≥øti⁄_E«bÀ
))

	)

394 
	#FSMC_WaôSig«l_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

395 
	#FSMC_WaôSig«l_E«bÀ
 ((
uöt32_t
)0x00002000)

	)

396 
	#IS_FSMC_WAITE_SIGNAL
(
SIGNAL
Ë(((SIGNALË=
FSMC_WaôSig«l_DißbÀ
) || \

397 ((
SIGNAL
Ë=
FSMC_WaôSig«l_E«bÀ
))

	)

405 
	#FSMC_ExãndedMode_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

406 
	#FSMC_ExãndedMode_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

408 
	#IS_FSMC_EXTENDED_MODE
(
MODE
Ë(((MODEË=
FSMC_ExãndedMode_DißbÀ
) || \

409 ((
MODE
Ë=
FSMC_ExãndedMode_E«bÀ
))

	)

418 
	#FSMC_WrôeBur°_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

419 
	#FSMC_WrôeBur°_E«bÀ
 ((
uöt32_t
)0x00080000)

	)

420 
	#IS_FSMC_WRITE_BURST
(
BURST
Ë(((BURSTË=
FSMC_WrôeBur°_DißbÀ
) || \

421 ((
BURST
Ë=
FSMC_WrôeBur°_E«bÀ
))

	)

429 
	#IS_FSMC_ADDRESS_SETUP_TIME
(
TIME
Ë((TIMEË<0xF)

	)

437 
	#IS_FSMC_ADDRESS_HOLD_TIME
(
TIME
Ë((TIMEË<0xF)

	)

445 
	#IS_FSMC_DATASETUP_TIME
(
TIME
Ë(((TIMEË> 0Ë&& ((TIMEË<0xFF))

	)

453 
	#IS_FSMC_TURNAROUND_TIME
(
TIME
Ë((TIMEË<0xF)

	)

461 
	#IS_FSMC_CLK_DIV
(
DIV
Ë((DIVË<0xF)

	)

469 
	#IS_FSMC_DATA_LATENCY
(
LATENCY
Ë((LATENCYË<0xF)

	)

477 
	#FSMC_Ac˚ssMode_A
 ((
uöt32_t
)0x00000000)

	)

478 
	#FSMC_Ac˚ssMode_B
 ((
uöt32_t
)0x10000000)

	)

479 
	#FSMC_Ac˚ssMode_C
 ((
uöt32_t
)0x20000000)

	)

480 
	#FSMC_Ac˚ssMode_D
 ((
uöt32_t
)0x30000000)

	)

481 
	#IS_FSMC_ACCESS_MODE
(
MODE
Ë(((MODEË=
FSMC_Ac˚ssMode_A
) || \

482 ((
MODE
Ë=
FSMC_Ac˚ssMode_B
) || \

483 ((
MODE
Ë=
FSMC_Ac˚ssMode_C
) || \

484 ((
MODE
Ë=
FSMC_Ac˚ssMode_D
))

	)

500 
	#FSMC_Waô„©uª_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

501 
	#FSMC_Waô„©uª_E«bÀ
 ((
uöt32_t
)0x00000002)

	)

502 
	#IS_FSMC_WAIT_FEATURE
(
FEATURE
Ë(((FEATUREË=
FSMC_Waô„©uª_DißbÀ
) || \

503 ((
FEATURE
Ë=
FSMC_Waô„©uª_E«bÀ
))

	)

512 
	#FSMC_ECC_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

513 
	#FSMC_ECC_E«bÀ
 ((
uöt32_t
)0x00000040)

	)

514 
	#IS_FSMC_ECC_STATE
(
STATE
Ë(((STATEË=
FSMC_ECC_DißbÀ
) || \

515 ((
STATE
Ë=
FSMC_ECC_E«bÀ
))

	)

523 
	#FSMC_ECCPageSize_256Byãs
 ((
uöt32_t
)0x00000000)

	)

524 
	#FSMC_ECCPageSize_512Byãs
 ((
uöt32_t
)0x00020000)

	)

525 
	#FSMC_ECCPageSize_1024Byãs
 ((
uöt32_t
)0x00040000)

	)

526 
	#FSMC_ECCPageSize_2048Byãs
 ((
uöt32_t
)0x00060000)

	)

527 
	#FSMC_ECCPageSize_4096Byãs
 ((
uöt32_t
)0x00080000)

	)

528 
	#FSMC_ECCPageSize_8192Byãs
 ((
uöt32_t
)0x000A0000)

	)

529 
	#IS_FSMC_ECCPAGE_SIZE
(
SIZE
Ë(((SIZEË=
FSMC_ECCPageSize_256Byãs
) || \

530 ((
SIZE
Ë=
FSMC_ECCPageSize_512Byãs
) || \

531 ((
SIZE
Ë=
FSMC_ECCPageSize_1024Byãs
) || \

532 ((
SIZE
Ë=
FSMC_ECCPageSize_2048Byãs
) || \

533 ((
SIZE
Ë=
FSMC_ECCPageSize_4096Byãs
) || \

534 ((
SIZE
Ë=
FSMC_ECCPageSize_8192Byãs
))

	)

542 
	#IS_FSMC_TCLR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

550 
	#IS_FSMC_TAR_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

558 
	#IS_FSMC_SETUP_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

566 
	#IS_FSMC_WAIT_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

574 
	#IS_FSMC_HOLD_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

582 
	#IS_FSMC_HIZ_TIME
(
TIME
Ë((TIMEË<0xFF)

	)

590 
	#FSMC_IT_RisögEdge
 ((
uöt32_t
)0x00000008)

	)

591 
	#FSMC_IT_Levñ
 ((
uöt32_t
)0x00000010)

	)

592 
	#FSMC_IT_FÆlögEdge
 ((
uöt32_t
)0x00000020)

	)

593 
	#IS_FSMC_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFFC7Ë=0x00000000Ë&& ((ITË!0x00000000))

	)

594 
	#IS_FSMC_GET_IT
(
IT
Ë(((ITË=
FSMC_IT_RisögEdge
) || \

595 ((
IT
Ë=
FSMC_IT_Levñ
) || \

596 ((
IT
Ë=
FSMC_IT_FÆlögEdge
))

	)

604 
	#FSMC_FLAG_RisögEdge
 ((
uöt32_t
)0x00000001)

	)

605 
	#FSMC_FLAG_Levñ
 ((
uöt32_t
)0x00000002)

	)

606 
	#FSMC_FLAG_FÆlögEdge
 ((
uöt32_t
)0x00000004)

	)

607 
	#FSMC_FLAG_FEMPT
 ((
uöt32_t
)0x00000040)

	)

608 
	#IS_FSMC_GET_FLAG
(
FLAG
Ë(((FLAGË=
FSMC_FLAG_RisögEdge
) || \

609 ((
FLAG
Ë=
FSMC_FLAG_Levñ
) || \

610 ((
FLAG
Ë=
FSMC_FLAG_FÆlögEdge
) || \

611 ((
FLAG
Ë=
FSMC_FLAG_FEMPT
))

	)

613 
	#IS_FSMC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFF8Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

630 
FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
);

631 
FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

632 
FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
);

633 
FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

636 
FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
);

637 
FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

638 
FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
);

639 
FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

640 
FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

641 
uöt32_t
 
FSMC_GëECC
(uöt32_à
FSMC_B™k
);

644 
FSMC_PCCARDDeInô
();

645 
FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

646 
FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
);

647 
FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

650 
FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

651 
FœgSètus
 
FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

652 
FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
);

653 
ITSètus
 
FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

654 
FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
);

656 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_gpio.h

24 #i‚de‡
__STM32F4xx_GPIO_H


25 
	#__STM32F4xx_GPIO_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

44 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
GPIOA
) || \

45 ((
PERIPH
Ë=
GPIOB
) || \

46 ((
PERIPH
Ë=
GPIOC
) || \

47 ((
PERIPH
Ë=
GPIOD
) || \

48 ((
PERIPH
Ë=
GPIOE
) || \

49 ((
PERIPH
Ë=
GPIOF
) || \

50 ((
PERIPH
Ë=
GPIOG
) || \

51 ((
PERIPH
Ë=
GPIOH
) || \

52 ((
PERIPH
Ë=
GPIOI
))

	)

59 
GPIO_Mode_IN
 = 0x00,

60 
GPIO_Mode_OUT
 = 0x01,

61 
GPIO_Mode_AF
 = 0x02,

62 
GPIO_Mode_AN
 = 0x03

63 }
	tGPIOMode_Ty≥Def
;

64 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_IN
Ë|| ((MODEË=
GPIO_Mode_OUT
) || \

65 ((
MODE
Ë=
GPIO_Mode_AF
)|| ((MODEË=
GPIO_Mode_AN
))

	)

72 
GPIO_OTy≥_PP
 = 0x00,

73 
GPIO_OTy≥_OD
 = 0x01

74 }
	tGPIOOTy≥_Ty≥Def
;

75 
	#IS_GPIO_OTYPE
(
OTYPE
Ë(((OTYPEË=
GPIO_OTy≥_PP
Ë|| ((OTYPEË=
GPIO_OTy≥_OD
))

	)

83 
GPIO_S≥ed_2MHz
 = 0x00,

84 
GPIO_S≥ed_25MHz
 = 0x01,

85 
GPIO_S≥ed_50MHz
 = 0x02,

86 
GPIO_S≥ed_100MHz
 = 0x03

87 }
	tGPIOS≥ed_Ty≥Def
;

88 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_S≥ed_2MHz
Ë|| ((SPEEDË=
GPIO_S≥ed_25MHz
) || \

89 ((
SPEED
Ë=
GPIO_S≥ed_50MHz
)|| ((SPEEDË=
GPIO_S≥ed_100MHz
))

	)

96 
GPIO_PuPd_NOPULL
 = 0x00,

97 
GPIO_PuPd_UP
 = 0x01,

98 
GPIO_PuPd_DOWN
 = 0x02

99 }
	tGPIOPuPd_Ty≥Def
;

100 
	#IS_GPIO_PUPD
(
PUPD
Ë(((PUPDË=
GPIO_PuPd_NOPULL
Ë|| ((PUPDË=
GPIO_PuPd_UP
) || \

101 ((
PUPD
Ë=
GPIO_PuPd_DOWN
))

	)

108 
Bô_RESET
 = 0,

109 
Bô_SET


110 }
	tBôA˘i⁄
;

111 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

119 
uöt32_t
 
GPIO_Pö
;

122 
GPIOMode_Ty≥Def
 
GPIO_Mode
;

125 
GPIOS≥ed_Ty≥Def
 
GPIO_S≥ed
;

128 
GPIOOTy≥_Ty≥Def
 
GPIO_OTy≥
;

131 
GPIOPuPd_Ty≥Def
 
GPIO_PuPd
;

133 }
	tGPIO_InôTy≥Def
;

144 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

145 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

146 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

147 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

148 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

149 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

150 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

151 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

152 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

153 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

154 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

155 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

156 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

157 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

158 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

159 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

160 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

162 
	#IS_GPIO_PIN
(
PIN
Ë((((PINË& (
uöt16_t
)0x00Ë=0x00Ë&& ((PINË!(uöt16_t)0x00))

	)

163 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
) || \

164 ((
PIN
Ë=
GPIO_Pö_1
) || \

165 ((
PIN
Ë=
GPIO_Pö_2
) || \

166 ((
PIN
Ë=
GPIO_Pö_3
) || \

167 ((
PIN
Ë=
GPIO_Pö_4
) || \

168 ((
PIN
Ë=
GPIO_Pö_5
) || \

169 ((
PIN
Ë=
GPIO_Pö_6
) || \

170 ((
PIN
Ë=
GPIO_Pö_7
) || \

171 ((
PIN
Ë=
GPIO_Pö_8
) || \

172 ((
PIN
Ë=
GPIO_Pö_9
) || \

173 ((
PIN
Ë=
GPIO_Pö_10
) || \

174 ((
PIN
Ë=
GPIO_Pö_11
) || \

175 ((
PIN
Ë=
GPIO_Pö_12
) || \

176 ((
PIN
Ë=
GPIO_Pö_13
) || \

177 ((
PIN
Ë=
GPIO_Pö_14
) || \

178 ((
PIN
Ë=
GPIO_Pö_15
))

	)

187 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

188 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

189 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

190 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

191 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

192 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

193 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

194 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

195 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

196 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

197 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

198 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

199 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

200 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

201 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

202 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

204 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
) || \

205 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

206 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

207 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

208 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

209 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

210 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

211 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

212 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

213 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

214 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

215 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

216 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

217 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

218 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

219 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

	)

230 
	#GPIO_AF_RTC_50Hz
 ((
uöt8_t
)0x00Ë

	)

231 
	#GPIO_AF_MCO
 ((
uöt8_t
)0x00Ë

	)

232 
	#GPIO_AF_TAMPER
 ((
uöt8_t
)0x00Ë

	)

233 
	#GPIO_AF_SWJ
 ((
uöt8_t
)0x00Ë

	)

234 
	#GPIO_AF_TRACE
 ((
uöt8_t
)0x00Ë

	)

239 
	#GPIO_AF_TIM1
 ((
uöt8_t
)0x01Ë

	)

240 
	#GPIO_AF_TIM2
 ((
uöt8_t
)0x01Ë

	)

245 
	#GPIO_AF_TIM3
 ((
uöt8_t
)0x02Ë

	)

246 
	#GPIO_AF_TIM4
 ((
uöt8_t
)0x02Ë

	)

247 
	#GPIO_AF_TIM5
 ((
uöt8_t
)0x02Ë

	)

252 
	#GPIO_AF_TIM8
 ((
uöt8_t
)0x03Ë

	)

253 
	#GPIO_AF_TIM9
 ((
uöt8_t
)0x03Ë

	)

254 
	#GPIO_AF_TIM10
 ((
uöt8_t
)0x03Ë

	)

255 
	#GPIO_AF_TIM11
 ((
uöt8_t
)0x03Ë

	)

260 
	#GPIO_AF_I2C1
 ((
uöt8_t
)0x04Ë

	)

261 
	#GPIO_AF_I2C2
 ((
uöt8_t
)0x04Ë

	)

262 
	#GPIO_AF_I2C3
 ((
uöt8_t
)0x04Ë

	)

267 
	#GPIO_AF_SPI1
 ((
uöt8_t
)0x05Ë

	)

268 
	#GPIO_AF_SPI2
 ((
uöt8_t
)0x05Ë

	)

273 
	#GPIO_AF_SPI3
 ((
uöt8_t
)0x06Ë

	)

278 
	#GPIO_AF_USART1
 ((
uöt8_t
)0x07Ë

	)

279 
	#GPIO_AF_USART2
 ((
uöt8_t
)0x07Ë

	)

280 
	#GPIO_AF_USART3
 ((
uöt8_t
)0x07Ë

	)

281 
	#GPIO_AF_I2S3ext
 ((
uöt8_t
)0x07Ë

	)

286 
	#GPIO_AF_UART4
 ((
uöt8_t
)0x08Ë

	)

287 
	#GPIO_AF_UART5
 ((
uöt8_t
)0x08Ë

	)

288 
	#GPIO_AF_USART6
 ((
uöt8_t
)0x08Ë

	)

293 
	#GPIO_AF_CAN1
 ((
uöt8_t
)0x09Ë

	)

294 
	#GPIO_AF_CAN2
 ((
uöt8_t
)0x09Ë

	)

295 
	#GPIO_AF_TIM12
 ((
uöt8_t
)0x09Ë

	)

296 
	#GPIO_AF_TIM13
 ((
uöt8_t
)0x09Ë

	)

297 
	#GPIO_AF_TIM14
 ((
uöt8_t
)0x09Ë

	)

302 
	#GPIO_AF_OTG_FS
 ((
uöt8_t
)0xAË

	)

303 
	#GPIO_AF_OTG_HS
 ((
uöt8_t
)0xAË

	)

308 
	#GPIO_AF_ETH
 ((
uöt8_t
)0x0BË

	)

313 
	#GPIO_AF_FSMC
 ((
uöt8_t
)0xCË

	)

314 
	#GPIO_AF_OTG_HS_FS
 ((
uöt8_t
)0xCË

	)

315 
	#GPIO_AF_SDIO
 ((
uöt8_t
)0xCË

	)

320 
	#GPIO_AF_DCMI
 ((
uöt8_t
)0x0DË

	)

325 
	#GPIO_AF_EVENTOUT
 ((
uöt8_t
)0x0FË

	)

327 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF_RTC_50Hz
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

328 ((
AF
Ë=
GPIO_AF_MCO
Ë|| ((AFË=
GPIO_AF_TAMPER
) || \

329 ((
AF
Ë=
GPIO_AF_SWJ
Ë|| ((AFË=
GPIO_AF_TRACE
) || \

330 ((
AF
Ë=
GPIO_AF_TIM1
Ë|| ((AFË=
GPIO_AF_TIM2
) || \

331 ((
AF
Ë=
GPIO_AF_TIM3
Ë|| ((AFË=
GPIO_AF_TIM4
) || \

332 ((
AF
Ë=
GPIO_AF_TIM5
Ë|| ((AFË=
GPIO_AF_TIM8
) || \

333 ((
AF
Ë=
GPIO_AF_I2C1
Ë|| ((AFË=
GPIO_AF_I2C2
) || \

334 ((
AF
Ë=
GPIO_AF_I2C3
Ë|| ((AFË=
GPIO_AF_SPI1
) || \

335 ((
AF
Ë=
GPIO_AF_SPI2
Ë|| ((AFË=
GPIO_AF_TIM13
) || \

336 ((
AF
Ë=
GPIO_AF_SPI3
Ë|| ((AFË=
GPIO_AF_TIM14
) || \

337 ((
AF
Ë=
GPIO_AF_USART1
Ë|| ((AFË=
GPIO_AF_USART2
) || \

338 ((
AF
Ë=
GPIO_AF_USART3
Ë|| ((AFË=
GPIO_AF_UART4
) || \

339 ((
AF
Ë=
GPIO_AF_UART5
Ë|| ((AFË=
GPIO_AF_USART6
) || \

340 ((
AF
Ë=
GPIO_AF_CAN1
Ë|| ((AFË=
GPIO_AF_CAN2
) || \

341 ((
AF
Ë=
GPIO_AF_OTG_FS
Ë|| ((AFË=
GPIO_AF_OTG_HS
) || \

342 ((
AF
Ë=
GPIO_AF_ETH
Ë|| ((AFË=
GPIO_AF_FSMC
) || \

343 ((
AF
Ë=
GPIO_AF_OTG_HS_FS
Ë|| ((AFË=
GPIO_AF_SDIO
) || \

344 ((
AF
Ë=
GPIO_AF_DCMI
Ë|| ((AFË=
GPIO_AF_EVENTOUT
))

	)

353 
	#GPIO_Mode_AIN
 
GPIO_Mode_AN


	)

355 
	#GPIO_AF_OTG1_FS
 
GPIO_AF_OTG_FS


	)

356 
	#GPIO_AF_OTG2_HS
 
GPIO_AF_OTG_HS


	)

357 
	#GPIO_AF_OTG2_FS
 
GPIO_AF_OTG_HS_FS


	)

371 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

374 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

375 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

376 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

379 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

380 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

381 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

382 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

383 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

384 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

385 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

386 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

387 
GPIO_ToggÀBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

390 
GPIO_PöAFC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_PöSour˚
, 
uöt8_t
 
GPIO_AF
);

392 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_hash.h

24 #i‚de‡
__STM32F4xx_HASH_H


25 
	#__STM32F4xx_HASH_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

49 
uöt32_t
 
HASH_AlgoSñe˘i⁄
;

51 
uöt32_t
 
HASH_AlgoMode
;

53 
uöt32_t
 
HASH_D©aTy≥
;

56 
uöt32_t
 
HASH_HMACKeyTy≥
;

58 }
	tHASH_InôTy≥Def
;

65 
uöt32_t
 
D©a
[5];

67 } 
	tHASH_MsgDige°
;

74 
uöt32_t
 
HASH_IMR
;

75 
uöt32_t
 
HASH_STR
;

76 
uöt32_t
 
HASH_CR
;

77 
uöt32_t
 
HASH_CSR
[51];

78 }
	tHASH_C⁄ãxt
;

89 
	#HASH_AlgoSñe˘i⁄_SHA1
 ((
uöt16_t
)0x0000Ë

	)

90 
	#HASH_AlgoSñe˘i⁄_MD5
 ((
uöt16_t
)0x0080Ë

	)

92 
	#IS_HASH_ALGOSELECTION
(
ALGOSELECTION
Ë(((ALGOSELECTIONË=
HASH_AlgoSñe˘i⁄_SHA1
) || \

93 ((
ALGOSELECTION
Ë=
HASH_AlgoSñe˘i⁄_MD5
))

	)

101 
	#HASH_AlgoMode_HASH
 ((
uöt16_t
)0x0000Ë

	)

102 
	#HASH_AlgoMode_HMAC
 ((
uöt16_t
)0x0040Ë

	)

104 
	#IS_HASH_ALGOMODE
(
ALGOMODE
Ë(((ALGOMODEË=
HASH_AlgoMode_HASH
) || \

105 ((
ALGOMODE
Ë=
HASH_AlgoMode_HMAC
))

	)

113 
	#HASH_D©aTy≥_32b
 ((
uöt16_t
)0x0000)

	)

114 
	#HASH_D©aTy≥_16b
 ((
uöt16_t
)0x0010)

	)

115 
	#HASH_D©aTy≥_8b
 ((
uöt16_t
)0x0020)

	)

116 
	#HASH_D©aTy≥_1b
 ((
uöt16_t
)0x0030)

	)

118 
	#IS_HASH_DATATYPE
(
DATATYPE
Ë(((DATATYPEË=
HASH_D©aTy≥_32b
)|| \

119 ((
DATATYPE
Ë=
HASH_D©aTy≥_16b
)|| \

120 ((
DATATYPE
Ë=
HASH_D©aTy≥_8b
)|| \

121 ((
DATATYPE
Ë=
HASH_D©aTy≥_1b
))

	)

129 
	#HASH_HMACKeyTy≥_Sh‹tKey
 ((
uöt32_t
)0x00000000Ë

	)

130 
	#HASH_HMACKeyTy≥_L⁄gKey
 ((
uöt32_t
)0x00010000Ë

	)

132 
	#IS_HASH_HMAC_KEYTYPE
(
KEYTYPE
Ë(((KEYTYPEË=
HASH_HMACKeyTy≥_Sh‹tKey
) || \

133 ((
KEYTYPE
Ë=
HASH_HMACKeyTy≥_L⁄gKey
))

	)

141 
	#IS_HASH_VALIDBITSNUMBER
(
VALIDBITS
Ë((VALIDBITSË<0x1F)

	)

150 
	#HASH_IT_DINI
 ((
uöt8_t
)0x01Ë

	)

151 
	#HASH_IT_DCI
 ((
uöt8_t
)0x02Ë

	)

153 
	#IS_HASH_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xFCË=0x00Ë&& ((ITË!0x00))

	)

154 
	#IS_HASH_GET_IT
(
IT
Ë(((ITË=
HASH_IT_DINI
Ë|| ((ITË=
HASH_IT_DCI
))

	)

163 
	#HASH_FLAG_DINIS
 ((
uöt16_t
)0x0001Ë

	)

164 
	#HASH_FLAG_DCIS
 ((
uöt16_t
)0x0002Ë

	)

165 
	#HASH_FLAG_DMAS
 ((
uöt16_t
)0x0004Ë

	)

166 
	#HASH_FLAG_BUSY
 ((
uöt16_t
)0x0008Ë

	)

167 
	#HASH_FLAG_DINNE
 ((
uöt16_t
)0x1000Ë

	)

169 
	#IS_HASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
HASH_FLAG_DINIS
) || \

170 ((
FLAG
Ë=
HASH_FLAG_DCIS
) || \

171 ((
FLAG
Ë=
HASH_FLAG_DMAS
) || \

172 ((
FLAG
Ë=
HASH_FLAG_BUSY
) || \

173 ((
FLAG
Ë=
HASH_FLAG_DINNE
))

	)

175 
	#IS_HASH_CLEAR_FLAG
(
FLAG
)(((FLAGË=
HASH_FLAG_DINIS
) || \

176 ((
FLAG
Ë=
HASH_FLAG_DCIS
))

	)

190 
HASH_DeInô
();

193 
HASH_Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
);

194 
HASH_Såu˘Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
);

195 
HASH_Re£t
();

198 
HASH_D©aIn
(
uöt32_t
 
D©a
);

199 
uöt8_t
 
HASH_GëInFIFOW‹dsNbr
();

200 
HASH_SëLa°W‹dVÆidBôsNbr
(
uöt16_t
 
VÆidNumbî
);

201 
HASH_SèπDige°
();

202 
HASH_GëDige°
(
HASH_MsgDige°
* 
HASH_MesßgeDige°
);

205 
HASH_SaveC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtSave
);

206 
HASH_Re°‹eC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtRe°‹e
);

209 
HASH_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

212 
HASH_ITC⁄fig
(
uöt8_t
 
HASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

213 
FœgSètus
 
HASH_GëFœgSètus
(
uöt16_t
 
HASH_FLAG
);

214 
HASH_CÀ¨Fœg
(
uöt16_t
 
HASH_FLAG
);

215 
ITSètus
 
HASH_GëITSètus
(
uöt8_t
 
HASH_IT
);

216 
HASH_CÀ¨ITPídögBô
(
uöt8_t
 
HASH_IT
);

219 
Eº‹Sètus
 
HASH_SHA1
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[20]);

220 
Eº‹Sètus
 
HMAC_SHA1
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
,

221 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
,

222 
uöt8_t
 
Ouçut
[20]);

225 
Eº‹Sètus
 
HASH_MD5
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[16]);

226 
Eº‹Sètus
 
HMAC_MD5
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
,

227 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
,

228 
uöt8_t
 
Ouçut
[16]);

230 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_i2c.h

24 #i‚de‡
__STM32F4xx_I2C_H


25 
	#__STM32F4xx_I2C_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

50 
uöt32_t
 
I2C_ClockS≥ed
;

53 
uöt16_t
 
I2C_Mode
;

56 
uöt16_t
 
I2C_DutyCy˛e
;

59 
uöt16_t
 
I2C_OwnAddªss1
;

62 
uöt16_t
 
I2C_Ack
;

65 
uöt16_t
 
I2C_AcknowÀdgedAddªss
;

67 }
	tI2C_InôTy≥Def
;

76 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2C1
) || \

77 ((
PERIPH
Ë=
I2C2
) || \

78 ((
PERIPH
Ë=
I2C3
))

	)

83 
	#I2C_Mode_I2C
 ((
uöt16_t
)0x0000)

	)

84 
	#I2C_Mode_SMBusDevi˚
 ((
uöt16_t
)0x0002)

	)

85 
	#I2C_Mode_SMBusHo°
 ((
uöt16_t
)0x000A)

	)

86 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
) || \

87 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

88 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

	)

97 
	#I2C_DutyCy˛e_16_9
 ((
uöt16_t
)0x4000Ë

	)

98 
	#I2C_DutyCy˛e_2
 ((
uöt16_t
)0xBFFFË

	)

99 
	#IS_I2C_DUTY_CYCLE
(
CYCLE
Ë(((CYCLEË=
I2C_DutyCy˛e_16_9
) || \

100 ((
CYCLE
Ë=
I2C_DutyCy˛e_2
))

	)

109 
	#I2C_Ack_E«bÀ
 ((
uöt16_t
)0x0400)

	)

110 
	#I2C_Ack_DißbÀ
 ((
uöt16_t
)0x0000)

	)

111 
	#IS_I2C_ACK_STATE
(
STATE
Ë(((STATEË=
I2C_Ack_E«bÀ
) || \

112 ((
STATE
Ë=
I2C_Ack_DißbÀ
))

	)

121 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt8_t
)0x00)

	)

122 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt8_t
)0x01)

	)

123 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
) || \

124 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

	)

133 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt16_t
)0x4000)

	)

134 
	#I2C_AcknowÀdgedAddªss_10bô
 ((
uöt16_t
)0xC000)

	)

135 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
) || \

136 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

	)

145 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

146 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

147 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

148 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

149 
	#I2C_Regi°î_DR
 ((
uöt8_t
)0x10)

	)

150 
	#I2C_Regi°î_SR1
 ((
uöt8_t
)0x14)

	)

151 
	#I2C_Regi°î_SR2
 ((
uöt8_t
)0x18)

	)

152 
	#I2C_Regi°î_CCR
 ((
uöt8_t
)0x1C)

	)

153 
	#I2C_Regi°î_TRISE
 ((
uöt8_t
)0x20)

	)

154 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
) || \

155 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

156 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

157 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

158 ((
REGISTER
Ë=
I2C_Regi°î_DR
) || \

159 ((
REGISTER
Ë=
I2C_Regi°î_SR1
) || \

160 ((
REGISTER
Ë=
I2C_Regi°î_SR2
) || \

161 ((
REGISTER
Ë=
I2C_Regi°î_CCR
) || \

162 ((
REGISTER
Ë=
I2C_Regi°î_TRISE
))

	)

171 
	#I2C_NACKPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

172 
	#I2C_NACKPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

173 
	#IS_I2C_NACK_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_NACKPosôi⁄_Next
) || \

174 ((
POSITION
Ë=
I2C_NACKPosôi⁄_Cuºít
))

	)

183 
	#I2C_SMBusAÀπ_Low
 ((
uöt16_t
)0x2000)

	)

184 
	#I2C_SMBusAÀπ_High
 ((
uöt16_t
)0xDFFF)

	)

185 
	#IS_I2C_SMBUS_ALERT
(
ALERT
Ë(((ALERTË=
I2C_SMBusAÀπ_Low
) || \

186 ((
ALERT
Ë=
I2C_SMBusAÀπ_High
))

	)

195 
	#I2C_PECPosôi⁄_Next
 ((
uöt16_t
)0x0800)

	)

196 
	#I2C_PECPosôi⁄_Cuºít
 ((
uöt16_t
)0xF7FF)

	)

197 
	#IS_I2C_PEC_POSITION
(
POSITION
Ë(((POSITIONË=
I2C_PECPosôi⁄_Next
) || \

198 ((
POSITION
Ë=
I2C_PECPosôi⁄_Cuºít
))

	)

207 
	#I2C_IT_BUF
 ((
uöt16_t
)0x0400)

	)

208 
	#I2C_IT_EVT
 ((
uöt16_t
)0x0200)

	)

209 
	#I2C_IT_ERR
 ((
uöt16_t
)0x0100)

	)

210 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF8FFË=0x00Ë&& ((ITË!0x00))

	)

219 
	#I2C_IT_SMBALERT
 ((
uöt32_t
)0x01008000)

	)

220 
	#I2C_IT_TIMEOUT
 ((
uöt32_t
)0x01004000)

	)

221 
	#I2C_IT_PECERR
 ((
uöt32_t
)0x01001000)

	)

222 
	#I2C_IT_OVR
 ((
uöt32_t
)0x01000800)

	)

223 
	#I2C_IT_AF
 ((
uöt32_t
)0x01000400)

	)

224 
	#I2C_IT_ARLO
 ((
uöt32_t
)0x01000200)

	)

225 
	#I2C_IT_BERR
 ((
uöt32_t
)0x01000100)

	)

226 
	#I2C_IT_TXE
 ((
uöt32_t
)0x06000080)

	)

227 
	#I2C_IT_RXNE
 ((
uöt32_t
)0x06000040)

	)

228 
	#I2C_IT_STOPF
 ((
uöt32_t
)0x02000010)

	)

229 
	#I2C_IT_ADD10
 ((
uöt32_t
)0x02000008)

	)

230 
	#I2C_IT_BTF
 ((
uöt32_t
)0x02000004)

	)

231 
	#I2C_IT_ADDR
 ((
uöt32_t
)0x02000002)

	)

232 
	#I2C_IT_SB
 ((
uöt32_t
)0x02000001)

	)

234 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt16_t
)0x20FFË=0x00Ë&& ((ITË!(uöt16_t)0x00))

	)

236 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_SMBALERT
Ë|| ((ITË=
I2C_IT_TIMEOUT
) || \

237 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_OVR
) || \

238 ((
IT
Ë=
I2C_IT_AF
Ë|| ((ITË=
I2C_IT_ARLO
) || \

239 ((
IT
Ë=
I2C_IT_BERR
Ë|| ((ITË=
I2C_IT_TXE
) || \

240 ((
IT
Ë=
I2C_IT_RXNE
Ë|| ((ITË=
I2C_IT_STOPF
) || \

241 ((
IT
Ë=
I2C_IT_ADD10
Ë|| ((ITË=
I2C_IT_BTF
) || \

242 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_SB
))

	)

255 
	#I2C_FLAG_DUALF
 ((
uöt32_t
)0x00800000)

	)

256 
	#I2C_FLAG_SMBHOST
 ((
uöt32_t
)0x00400000)

	)

257 
	#I2C_FLAG_SMBDEFAULT
 ((
uöt32_t
)0x00200000)

	)

258 
	#I2C_FLAG_GENCALL
 ((
uöt32_t
)0x00100000)

	)

259 
	#I2C_FLAG_TRA
 ((
uöt32_t
)0x00040000)

	)

260 
	#I2C_FLAG_BUSY
 ((
uöt32_t
)0x00020000)

	)

261 
	#I2C_FLAG_MSL
 ((
uöt32_t
)0x00010000)

	)

267 
	#I2C_FLAG_SMBALERT
 ((
uöt32_t
)0x10008000)

	)

268 
	#I2C_FLAG_TIMEOUT
 ((
uöt32_t
)0x10004000)

	)

269 
	#I2C_FLAG_PECERR
 ((
uöt32_t
)0x10001000)

	)

270 
	#I2C_FLAG_OVR
 ((
uöt32_t
)0x10000800)

	)

271 
	#I2C_FLAG_AF
 ((
uöt32_t
)0x10000400)

	)

272 
	#I2C_FLAG_ARLO
 ((
uöt32_t
)0x10000200)

	)

273 
	#I2C_FLAG_BERR
 ((
uöt32_t
)0x10000100)

	)

274 
	#I2C_FLAG_TXE
 ((
uöt32_t
)0x10000080)

	)

275 
	#I2C_FLAG_RXNE
 ((
uöt32_t
)0x10000040)

	)

276 
	#I2C_FLAG_STOPF
 ((
uöt32_t
)0x10000010)

	)

277 
	#I2C_FLAG_ADD10
 ((
uöt32_t
)0x10000008)

	)

278 
	#I2C_FLAG_BTF
 ((
uöt32_t
)0x10000004)

	)

279 
	#I2C_FLAG_ADDR
 ((
uöt32_t
)0x10000002)

	)

280 
	#I2C_FLAG_SB
 ((
uöt32_t
)0x10000001)

	)

282 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0x20FFË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

284 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_DUALF
Ë|| ((FLAGË=
I2C_FLAG_SMBHOST
) || \

285 ((
FLAG
Ë=
I2C_FLAG_SMBDEFAULT
Ë|| ((FLAGË=
I2C_FLAG_GENCALL
) || \

286 ((
FLAG
Ë=
I2C_FLAG_TRA
Ë|| ((FLAGË=
I2C_FLAG_BUSY
) || \

287 ((
FLAG
Ë=
I2C_FLAG_MSL
Ë|| ((FLAGË=
I2C_FLAG_SMBALERT
) || \

288 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

289 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_AF
) || \

290 ((
FLAG
Ë=
I2C_FLAG_ARLO
Ë|| ((FLAGË=
I2C_FLAG_BERR
) || \

291 ((
FLAG
Ë=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_RXNE
) || \

292 ((
FLAG
Ë=
I2C_FLAG_STOPF
Ë|| ((FLAGË=
I2C_FLAG_ADD10
) || \

293 ((
FLAG
Ë=
I2C_FLAG_BTF
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

294 ((
FLAG
Ë=
I2C_FLAG_SB
))

	)

318 
	#I2C_EVENT_MASTER_MODE_SELECT
 ((
uöt32_t
)0x00030001Ë

	)

346 
	#I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
 ((
uöt32_t
)0x00070082Ë

	)

347 
	#I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
 ((
uöt32_t
)0x00030002Ë

	)

349 
	#I2C_EVENT_MASTER_MODE_ADDRESS10
 ((
uöt32_t
)0x00030008Ë

	)

382 
	#I2C_EVENT_MASTER_BYTE_RECEIVED
 ((
uöt32_t
)0x00030040Ë

	)

386 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00070080Ë

	)

388 
	#I2C_EVENT_MASTER_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00070084Ë

	)

425 
	#I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00020002Ë

	)

426 
	#I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
 ((
uöt32_t
)0x00060082Ë

	)

429 
	#I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00820000Ë

	)

430 
	#I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
 ((
uöt32_t
)0x00860080Ë

	)

433 
	#I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
 ((
uöt32_t
)0x00120000Ë

	)

464 
	#I2C_EVENT_SLAVE_BYTE_RECEIVED
 ((
uöt32_t
)0x00020040Ë

	)

466 
	#I2C_EVENT_SLAVE_STOP_DETECTED
 ((
uöt32_t
)0x00000010Ë

	)

470 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 ((
uöt32_t
)0x00060084Ë

	)

471 
	#I2C_EVENT_SLAVE_BYTE_TRANSMITTING
 ((
uöt32_t
)0x00060080Ë

	)

473 
	#I2C_EVENT_SLAVE_ACK_FAILURE
 ((
uöt32_t
)0x00000400Ë

	)

481 
	#IS_I2C_EVENT
(
EVENT
Ë(((EVENTË=
I2C_EVENT_SLAVE_TRANSMITTER_ADDRESS_MATCHED
) || \

482 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_ADDRESS_MATCHED
) || \

483 ((
EVENT
Ë=
I2C_EVENT_SLAVE_TRANSMITTER_SECONDADDRESS_MATCHED
) || \

484 ((
EVENT
Ë=
I2C_EVENT_SLAVE_RECEIVER_SECONDADDRESS_MATCHED
) || \

485 ((
EVENT
Ë=
I2C_EVENT_SLAVE_GENERALCALLADDRESS_MATCHED
) || \

486 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_RECEIVED
) || \

487 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_DUALF
)) || \

488 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_RECEIVED
 | 
I2C_FLAG_GENCALL
)) || \

489 ((
EVENT
Ë=
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
) || \

490 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_DUALF
)) || \

491 ((
EVENT
Ë=(
I2C_EVENT_SLAVE_BYTE_TRANSMITTED
 | 
I2C_FLAG_GENCALL
)) || \

492 ((
EVENT
Ë=
I2C_EVENT_SLAVE_STOP_DETECTED
) || \

493 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_SELECT
) || \

494 ((
EVENT
Ë=
I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED
) || \

495 ((
EVENT
Ë=
I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED
) || \

496 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_RECEIVED
) || \

497 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTED
) || \

498 ((
EVENT
Ë=
I2C_EVENT_MASTER_BYTE_TRANSMITTING
) || \

499 ((
EVENT
Ë=
I2C_EVENT_MASTER_MODE_ADDRESS10
) || \

500 ((
EVENT
Ë=
I2C_EVENT_SLAVE_ACK_FAILURE
))

	)

509 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<0x3FF)

	)

518 
	#IS_I2C_CLOCK_SPEED
(
SPEED
Ë(((SPEEDË>0x1Ë&& ((SPEEDË<400000))

	)

531 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

534 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

535 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

536 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

537 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

538 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

539 
I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
);

540 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

541 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
);

542 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

543 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

544 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

545 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

546 
I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
);

547 
I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
);

548 
I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
);

549 
I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

552 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

553 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

556 
I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

557 
I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
);

558 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

559 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

562 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

563 
I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

566 
uöt16_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

567 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

659 
Eº‹Sètus
 
I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
);

665 
uöt32_t
 
I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
);

671 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

674 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

675 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

676 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

678 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_iwdg.h

24 #i‚de‡
__STM32F4xx_IWDG_H


25 
	#__STM32F4xx_IWDG_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

52 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

53 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

54 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
) || \

55 ((
ACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

	)

63 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

64 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

65 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

66 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

67 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

68 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

69 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

70 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
) || \

71 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

72 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

73 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

74 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

75 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

76 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

	)

84 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

85 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

86 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
))

	)

87 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

100 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

101 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

102 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

103 
IWDG_RñﬂdCou¡î
();

106 
IWDG_E«bÀ
();

109 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

111 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_pwr.h

24 #i‚de‡
__STM32F4xx_PWR_H


25 
	#__STM32F4xx_PWR_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

53 
	#PWR_PVDLevñ_0
 
PWR_CR_PLS_LEV0


	)

54 
	#PWR_PVDLevñ_1
 
PWR_CR_PLS_LEV1


	)

55 
	#PWR_PVDLevñ_2
 
PWR_CR_PLS_LEV2


	)

56 
	#PWR_PVDLevñ_3
 
PWR_CR_PLS_LEV3


	)

57 
	#PWR_PVDLevñ_4
 
PWR_CR_PLS_LEV4


	)

58 
	#PWR_PVDLevñ_5
 
PWR_CR_PLS_LEV5


	)

59 
	#PWR_PVDLevñ_6
 
PWR_CR_PLS_LEV6


	)

60 
	#PWR_PVDLevñ_7
 
PWR_CR_PLS_LEV7


	)

62 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_0
Ë|| ((LEVELË=
PWR_PVDLevñ_1
)|| \

63 ((
LEVEL
Ë=
PWR_PVDLevñ_2
Ë|| ((LEVELË=
PWR_PVDLevñ_3
)|| \

64 ((
LEVEL
Ë=
PWR_PVDLevñ_4
Ë|| ((LEVELË=
PWR_PVDLevñ_5
)|| \

65 ((
LEVEL
Ë=
PWR_PVDLevñ_6
Ë|| ((LEVELË=
PWR_PVDLevñ_7
))

	)

75 
	#PWR_Reguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

76 
	#PWR_Reguœt‹_LowPowî
 
PWR_CR_LPDS


	)

77 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_Reguœt‹_ON
) || \

78 ((
REGULATOR
Ë=
PWR_Reguœt‹_LowPowî
))

	)

87 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

88 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

89 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

95 
	#PWR_Reguœt‹_Vﬁège_SˇÀ1
 ((
uöt32_t
)0x00004000)

	)

96 
	#PWR_Reguœt‹_Vﬁège_SˇÀ2
 ((
uöt32_t
)0x00000000)

	)

97 
	#IS_PWR_REGULATOR_VOLTAGE
(
VOLTAGE
Ë(((VOLTAGEË=
PWR_Reguœt‹_Vﬁège_SˇÀ1
Ë|| ((VOLTAGEË=
PWR_Reguœt‹_Vﬁège_SˇÀ2
))

	)

107 
	#PWR_FLAG_WU
 
PWR_CSR_WUF


	)

108 
	#PWR_FLAG_SB
 
PWR_CSR_SBF


	)

109 
	#PWR_FLAG_PVDO
 
PWR_CSR_PVDO


	)

110 
	#PWR_FLAG_BRR
 
PWR_CSR_BRR


	)

111 
	#PWR_FLAG_VOSRDY
 
PWR_CSR_VOSRDY


	)

116 
	#PWR_FLAG_REGRDY
 
PWR_FLAG_VOSRDY


	)

121 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
) || \

122 ((
FLAG
Ë=
PWR_FLAG_PVDO
Ë|| ((FLAGË=
PWR_FLAG_BRR
) || \

123 ((
FLAG
Ë=
PWR_FLAG_VOSRDY
))

	)

125 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
))

	)

138 
PWR_DeInô
();

141 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

144 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

145 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

148 
PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

151 
PWR_BackupReguœt‹Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

152 
PWR_MaöReguœt‹ModeC⁄fig
(
uöt32_t
 
PWR_Reguœt‹_Vﬁège
);

155 
PWR_FœshPowîDownCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

158 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

159 
PWR_E¡îSTANDBYMode
();

162 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

163 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

165 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_rcc.h

23 #i‚de‡
__STM32F4xx_RCC_H


24 
	#__STM32F4xx_RCC_H


	)

26 #ifde‡
__˝lu•lus


31 
	~"°m32f4xx.h
"

44 
uöt32_t
 
SYSCLK_Fªquícy
;

45 
uöt32_t
 
HCLK_Fªquícy
;

46 
uöt32_t
 
PCLK1_Fªquícy
;

47 
uöt32_t
 
PCLK2_Fªquícy
;

48 }
	tRCC_ClocksTy≥Def
;

59 
	#RCC_HSE_OFF
 ((
uöt8_t
)0x00)

	)

60 
	#RCC_HSE_ON
 ((
uöt8_t
)0x01)

	)

61 
	#RCC_HSE_By∑ss
 ((
uöt8_t
)0x05)

	)

62 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
) || \

63 ((
HSE
Ë=
RCC_HSE_By∑ss
))

	)

71 
	#RCC_PLLSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

72 
	#RCC_PLLSour˚_HSE
 ((
uöt32_t
)0x00400000)

	)

73 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI
) || \

74 ((
SOURCE
Ë=
RCC_PLLSour˚_HSE
))

	)

75 
	#IS_RCC_PLLM_VALUE
(
VALUE
Ë((VALUEË<63)

	)

76 
	#IS_RCC_PLLN_VALUE
(
VALUE
Ë((192 <(VALUE)Ë&& ((VALUEË<432))

	)

77 
	#IS_RCC_PLLP_VALUE
(
VALUE
Ë(((VALUEË=2Ë|| ((VALUEË=4Ë|| ((VALUEË=6Ë|| ((VALUEË=8))

	)

78 
	#IS_RCC_PLLQ_VALUE
(
VALUE
Ë((4 <(VALUE)Ë&& ((VALUEË<15))

	)

80 
	#IS_RCC_PLLI2SN_VALUE
(
VALUE
Ë((192 <(VALUE)Ë&& ((VALUEË<432))

	)

81 
	#IS_RCC_PLLI2SR_VALUE
(
VALUE
Ë((2 <(VALUE)Ë&& ((VALUEË<7))

	)

89 
	#RCC_SYSCLKSour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

90 
	#RCC_SYSCLKSour˚_HSE
 ((
uöt32_t
)0x00000001)

	)

91 
	#RCC_SYSCLKSour˚_PLLCLK
 ((
uöt32_t
)0x00000002)

	)

92 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
) || \

93 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

94 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

	)

102 
	#RCC_SYSCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

103 
	#RCC_SYSCLK_Div2
 ((
uöt32_t
)0x00000080)

	)

104 
	#RCC_SYSCLK_Div4
 ((
uöt32_t
)0x00000090)

	)

105 
	#RCC_SYSCLK_Div8
 ((
uöt32_t
)0x000000A0)

	)

106 
	#RCC_SYSCLK_Div16
 ((
uöt32_t
)0x000000B0)

	)

107 
	#RCC_SYSCLK_Div64
 ((
uöt32_t
)0x000000C0)

	)

108 
	#RCC_SYSCLK_Div128
 ((
uöt32_t
)0x000000D0)

	)

109 
	#RCC_SYSCLK_Div256
 ((
uöt32_t
)0x000000E0)

	)

110 
	#RCC_SYSCLK_Div512
 ((
uöt32_t
)0x000000F0)

	)

111 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
) || \

112 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

113 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

114 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

115 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

	)

123 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

124 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00001000)

	)

125 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00001400)

	)

126 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00001800)

	)

127 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00001C00)

	)

128 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
) || \

129 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

130 ((
PCLK
Ë=
RCC_HCLK_Div16
))

	)

138 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

139 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

140 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

141 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

142 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

143 
	#RCC_IT_PLLI2SRDY
 ((
uöt8_t
)0x20)

	)

144 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

145 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xC0Ë=0x00Ë&& ((ITË!0x00))

	)

146 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
) || \

147 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

148 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
) || \

149 ((
IT
Ë=
RCC_IT_PLLI2SRDY
))

	)

150 
	#IS_RCC_CLEAR_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x40Ë=0x00Ë&& ((ITË!0x00))

	)

158 
	#RCC_LSE_OFF
 ((
uöt8_t
)0x00)

	)

159 
	#RCC_LSE_ON
 ((
uöt8_t
)0x01)

	)

160 
	#RCC_LSE_By∑ss
 ((
uöt8_t
)0x04)

	)

161 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
) || \

162 ((
LSE
Ë=
RCC_LSE_By∑ss
))

	)

170 
	#RCC_RTCCLKSour˚_LSE
 ((
uöt32_t
)0x00000100)

	)

171 
	#RCC_RTCCLKSour˚_LSI
 ((
uöt32_t
)0x00000200)

	)

172 
	#RCC_RTCCLKSour˚_HSE_Div2
 ((
uöt32_t
)0x00020300)

	)

173 
	#RCC_RTCCLKSour˚_HSE_Div3
 ((
uöt32_t
)0x00030300)

	)

174 
	#RCC_RTCCLKSour˚_HSE_Div4
 ((
uöt32_t
)0x00040300)

	)

175 
	#RCC_RTCCLKSour˚_HSE_Div5
 ((
uöt32_t
)0x00050300)

	)

176 
	#RCC_RTCCLKSour˚_HSE_Div6
 ((
uöt32_t
)0x00060300)

	)

177 
	#RCC_RTCCLKSour˚_HSE_Div7
 ((
uöt32_t
)0x00070300)

	)

178 
	#RCC_RTCCLKSour˚_HSE_Div8
 ((
uöt32_t
)0x00080300)

	)

179 
	#RCC_RTCCLKSour˚_HSE_Div9
 ((
uöt32_t
)0x00090300)

	)

180 
	#RCC_RTCCLKSour˚_HSE_Div10
 ((
uöt32_t
)0x000A0300)

	)

181 
	#RCC_RTCCLKSour˚_HSE_Div11
 ((
uöt32_t
)0x000B0300)

	)

182 
	#RCC_RTCCLKSour˚_HSE_Div12
 ((
uöt32_t
)0x000C0300)

	)

183 
	#RCC_RTCCLKSour˚_HSE_Div13
 ((
uöt32_t
)0x000D0300)

	)

184 
	#RCC_RTCCLKSour˚_HSE_Div14
 ((
uöt32_t
)0x000E0300)

	)

185 
	#RCC_RTCCLKSour˚_HSE_Div15
 ((
uöt32_t
)0x000F0300)

	)

186 
	#RCC_RTCCLKSour˚_HSE_Div16
 ((
uöt32_t
)0x00100300)

	)

187 
	#RCC_RTCCLKSour˚_HSE_Div17
 ((
uöt32_t
)0x00110300)

	)

188 
	#RCC_RTCCLKSour˚_HSE_Div18
 ((
uöt32_t
)0x00120300)

	)

189 
	#RCC_RTCCLKSour˚_HSE_Div19
 ((
uöt32_t
)0x00130300)

	)

190 
	#RCC_RTCCLKSour˚_HSE_Div20
 ((
uöt32_t
)0x00140300)

	)

191 
	#RCC_RTCCLKSour˚_HSE_Div21
 ((
uöt32_t
)0x00150300)

	)

192 
	#RCC_RTCCLKSour˚_HSE_Div22
 ((
uöt32_t
)0x00160300)

	)

193 
	#RCC_RTCCLKSour˚_HSE_Div23
 ((
uöt32_t
)0x00170300)

	)

194 
	#RCC_RTCCLKSour˚_HSE_Div24
 ((
uöt32_t
)0x00180300)

	)

195 
	#RCC_RTCCLKSour˚_HSE_Div25
 ((
uöt32_t
)0x00190300)

	)

196 
	#RCC_RTCCLKSour˚_HSE_Div26
 ((
uöt32_t
)0x001A0300)

	)

197 
	#RCC_RTCCLKSour˚_HSE_Div27
 ((
uöt32_t
)0x001B0300)

	)

198 
	#RCC_RTCCLKSour˚_HSE_Div28
 ((
uöt32_t
)0x001C0300)

	)

199 
	#RCC_RTCCLKSour˚_HSE_Div29
 ((
uöt32_t
)0x001D0300)

	)

200 
	#RCC_RTCCLKSour˚_HSE_Div30
 ((
uöt32_t
)0x001E0300)

	)

201 
	#RCC_RTCCLKSour˚_HSE_Div31
 ((
uöt32_t
)0x001F0300)

	)

202 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
) || \

203 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

204 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div2
) || \

205 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div3
) || \

206 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div4
) || \

207 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div5
) || \

208 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div6
) || \

209 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div7
) || \

210 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div8
) || \

211 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div9
) || \

212 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div10
) || \

213 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div11
) || \

214 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div12
) || \

215 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div13
) || \

216 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div14
) || \

217 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div15
) || \

218 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div16
) || \

219 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div17
) || \

220 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div18
) || \

221 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div19
) || \

222 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div20
) || \

223 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div21
) || \

224 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div22
) || \

225 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div23
) || \

226 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div24
) || \

227 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div25
) || \

228 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div26
) || \

229 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div27
) || \

230 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div28
) || \

231 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div29
) || \

232 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div30
) || \

233 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div31
))

	)

241 
	#RCC_I2S2CLKSour˚_PLLI2S
 ((
uöt8_t
)0x00)

	)

242 
	#RCC_I2S2CLKSour˚_Ext
 ((
uöt8_t
)0x01)

	)

244 
	#IS_RCC_I2SCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S2CLKSour˚_PLLI2S
Ë|| ((SOURCEË=
RCC_I2S2CLKSour˚_Ext
))

	)

252 
	#RCC_AHB1Pîùh_GPIOA
 ((
uöt32_t
)0x00000001)

	)

253 
	#RCC_AHB1Pîùh_GPIOB
 ((
uöt32_t
)0x00000002)

	)

254 
	#RCC_AHB1Pîùh_GPIOC
 ((
uöt32_t
)0x00000004)

	)

255 
	#RCC_AHB1Pîùh_GPIOD
 ((
uöt32_t
)0x00000008)

	)

256 
	#RCC_AHB1Pîùh_GPIOE
 ((
uöt32_t
)0x00000010)

	)

257 
	#RCC_AHB1Pîùh_GPIOF
 ((
uöt32_t
)0x00000020)

	)

258 
	#RCC_AHB1Pîùh_GPIOG
 ((
uöt32_t
)0x00000040)

	)

259 
	#RCC_AHB1Pîùh_GPIOH
 ((
uöt32_t
)0x00000080)

	)

260 
	#RCC_AHB1Pîùh_GPIOI
 ((
uöt32_t
)0x00000100)

	)

261 
	#RCC_AHB1Pîùh_CRC
 ((
uöt32_t
)0x00001000)

	)

262 
	#RCC_AHB1Pîùh_FLITF
 ((
uöt32_t
)0x00008000)

	)

263 
	#RCC_AHB1Pîùh_SRAM1
 ((
uöt32_t
)0x00010000)

	)

264 
	#RCC_AHB1Pîùh_SRAM2
 ((
uöt32_t
)0x00020000)

	)

265 
	#RCC_AHB1Pîùh_BKPSRAM
 ((
uöt32_t
)0x00040000)

	)

266 
	#RCC_AHB1Pîùh_CCMDATARAMEN
 ((
uöt32_t
)0x00100000)

	)

267 
	#RCC_AHB1Pîùh_DMA1
 ((
uöt32_t
)0x00200000)

	)

268 
	#RCC_AHB1Pîùh_DMA2
 ((
uöt32_t
)0x00400000)

	)

269 
	#RCC_AHB1Pîùh_ETH_MAC
 ((
uöt32_t
)0x02000000)

	)

270 
	#RCC_AHB1Pîùh_ETH_MAC_Tx
 ((
uöt32_t
)0x04000000)

	)

271 
	#RCC_AHB1Pîùh_ETH_MAC_Rx
 ((
uöt32_t
)0x08000000)

	)

272 
	#RCC_AHB1Pîùh_ETH_MAC_PTP
 ((
uöt32_t
)0x10000000)

	)

273 
	#RCC_AHB1Pîùh_OTG_HS
 ((
uöt32_t
)0x20000000)

	)

274 
	#RCC_AHB1Pîùh_OTG_HS_ULPI
 ((
uöt32_t
)0x40000000)

	)

275 
	#IS_RCC_AHB1_CLOCK_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x818BEE00Ë=0x00Ë&& ((PERIPHË!0x00))

	)

276 
	#IS_RCC_AHB1_RESET_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xDD9FEE00Ë=0x00Ë&& ((PERIPHË!0x00))

	)

277 
	#IS_RCC_AHB1_LPMODE_PERIPH
(
PERIPH
Ë((((PERIPHË& 0x81986E00Ë=0x00Ë&& ((PERIPHË!0x00))

	)

285 
	#RCC_AHB2Pîùh_DCMI
 ((
uöt32_t
)0x00000001)

	)

286 
	#RCC_AHB2Pîùh_CRYP
 ((
uöt32_t
)0x00000010)

	)

287 
	#RCC_AHB2Pîùh_HASH
 ((
uöt32_t
)0x00000020)

	)

288 
	#RCC_AHB2Pîùh_RNG
 ((
uöt32_t
)0x00000040)

	)

289 
	#RCC_AHB2Pîùh_OTG_FS
 ((
uöt32_t
)0x00000080)

	)

290 
	#IS_RCC_AHB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFF0EË=0x00Ë&& ((PERIPHË!0x00))

	)

298 
	#RCC_AHB3Pîùh_FSMC
 ((
uöt32_t
)0x00000001)

	)

299 
	#IS_RCC_AHB3_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFFEË=0x00Ë&& ((PERIPHË!0x00))

	)

307 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

308 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

309 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

310 
	#RCC_APB1Pîùh_TIM5
 ((
uöt32_t
)0x00000008)

	)

311 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

312 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

313 
	#RCC_APB1Pîùh_TIM12
 ((
uöt32_t
)0x00000040)

	)

314 
	#RCC_APB1Pîùh_TIM13
 ((
uöt32_t
)0x00000080)

	)

315 
	#RCC_APB1Pîùh_TIM14
 ((
uöt32_t
)0x00000100)

	)

316 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

317 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

318 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

319 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

320 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

321 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

322 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

323 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

324 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

325 
	#RCC_APB1Pîùh_I2C3
 ((
uöt32_t
)0x00800000)

	)

326 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

327 
	#RCC_APB1Pîùh_CAN2
 ((
uöt32_t
)0x04000000)

	)

328 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

329 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

330 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xC9013600Ë=0x00Ë&& ((PERIPHË!0x00))

	)

338 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000001)

	)

339 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00000002)

	)

340 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00000010)

	)

341 
	#RCC_APB2Pîùh_USART6
 ((
uöt32_t
)0x00000020)

	)

342 
	#RCC_APB2Pîùh_ADC
 ((
uöt32_t
)0x00000100)

	)

343 
	#RCC_APB2Pîùh_ADC1
 ((
uöt32_t
)0x00000100)

	)

344 
	#RCC_APB2Pîùh_ADC2
 ((
uöt32_t
)0x00000200)

	)

345 
	#RCC_APB2Pîùh_ADC3
 ((
uöt32_t
)0x00000400)

	)

346 
	#RCC_APB2Pîùh_SDIO
 ((
uöt32_t
)0x00000800)

	)

347 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

348 
	#RCC_APB2Pîùh_SYSCFG
 ((
uöt32_t
)0x00004000)

	)

349 
	#RCC_APB2Pîùh_TIM9
 ((
uöt32_t
)0x00010000)

	)

350 
	#RCC_APB2Pîùh_TIM10
 ((
uöt32_t
)0x00020000)

	)

351 
	#RCC_APB2Pîùh_TIM11
 ((
uöt32_t
)0x00040000)

	)

352 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFF8A0CCË=0x00Ë&& ((PERIPHË!0x00))

	)

353 
	#IS_RCC_APB2_RESET_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFF8A6CCË=0x00Ë&& ((PERIPHË!0x00))

	)

361 
	#RCC_MCO1Sour˚_HSI
 ((
uöt32_t
)0x00000000)

	)

362 
	#RCC_MCO1Sour˚_LSE
 ((
uöt32_t
)0x00200000)

	)

363 
	#RCC_MCO1Sour˚_HSE
 ((
uöt32_t
)0x00400000)

	)

364 
	#RCC_MCO1Sour˚_PLLCLK
 ((
uöt32_t
)0x00600000)

	)

365 
	#RCC_MCO1Div_1
 ((
uöt32_t
)0x00000000)

	)

366 
	#RCC_MCO1Div_2
 ((
uöt32_t
)0x04000000)

	)

367 
	#RCC_MCO1Div_3
 ((
uöt32_t
)0x05000000)

	)

368 
	#RCC_MCO1Div_4
 ((
uöt32_t
)0x06000000)

	)

369 
	#RCC_MCO1Div_5
 ((
uöt32_t
)0x07000000)

	)

370 
	#IS_RCC_MCO1SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_MCO1Sour˚_HSI
Ë|| ((SOURCEË=
RCC_MCO1Sour˚_LSE
) || \

371 ((
SOURCE
Ë=
RCC_MCO1Sour˚_HSE
Ë|| ((SOURCEË=
RCC_MCO1Sour˚_PLLCLK
))

	)

373 
	#IS_RCC_MCO1DIV
(
DIV
Ë(((DIVË=
RCC_MCO1Div_1
Ë|| ((DIVË=
RCC_MCO1Div_2
) || \

374 ((
DIV
Ë=
RCC_MCO1Div_3
Ë|| ((DIVË=
RCC_MCO1Div_4
) || \

375 ((
DIV
Ë=
RCC_MCO1Div_5
))

	)

383 
	#RCC_MCO2Sour˚_SYSCLK
 ((
uöt32_t
)0x00000000)

	)

384 
	#RCC_MCO2Sour˚_PLLI2SCLK
 ((
uöt32_t
)0x40000000)

	)

385 
	#RCC_MCO2Sour˚_HSE
 ((
uöt32_t
)0x80000000)

	)

386 
	#RCC_MCO2Sour˚_PLLCLK
 ((
uöt32_t
)0xC0000000)

	)

387 
	#RCC_MCO2Div_1
 ((
uöt32_t
)0x00000000)

	)

388 
	#RCC_MCO2Div_2
 ((
uöt32_t
)0x20000000)

	)

389 
	#RCC_MCO2Div_3
 ((
uöt32_t
)0x28000000)

	)

390 
	#RCC_MCO2Div_4
 ((
uöt32_t
)0x30000000)

	)

391 
	#RCC_MCO2Div_5
 ((
uöt32_t
)0x38000000)

	)

392 
	#IS_RCC_MCO2SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_MCO2Sour˚_SYSCLK
Ë|| ((SOURCEË=
RCC_MCO2Sour˚_PLLI2SCLK
)|| \

393 ((
SOURCE
Ë=
RCC_MCO2Sour˚_HSE
Ë|| ((SOURCEË=
RCC_MCO2Sour˚_PLLCLK
))

	)

395 
	#IS_RCC_MCO2DIV
(
DIV
Ë(((DIVË=
RCC_MCO2Div_1
Ë|| ((DIVË=
RCC_MCO2Div_2
) || \

396 ((
DIV
Ë=
RCC_MCO2Div_3
Ë|| ((DIVË=
RCC_MCO2Div_4
) || \

397 ((
DIV
Ë=
RCC_MCO2Div_5
))

	)

405 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x21)

	)

406 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x31)

	)

407 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x39)

	)

408 
	#RCC_FLAG_PLLI2SRDY
 ((
uöt8_t
)0x3B)

	)

409 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x41)

	)

410 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x61)

	)

411 
	#RCC_FLAG_BORRST
 ((
uöt8_t
)0x79)

	)

412 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x7A)

	)

413 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x7B)

	)

414 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x7C)

	)

415 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x7D)

	)

416 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x7E)

	)

417 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x7F)

	)

418 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
) || \

419 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

420 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_BORRST
) || \

421 ((
FLAG
Ë=
RCC_FLAG_PINRST
Ë|| ((FLAGË=
RCC_FLAG_PORRST
) || \

422 ((
FLAG
Ë=
RCC_FLAG_SFTRST
Ë|| ((FLAGË=
RCC_FLAG_IWDGRST
)|| \

423 ((
FLAG
Ë=
RCC_FLAG_WWDGRST
)|| ((FLAGË=
RCC_FLAG_LPWRRST
)|| \

424 ((
FLAG
Ë=
RCC_FLAG_PLLI2SRDY
))

	)

425 
	#IS_RCC_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

438 
RCC_DeInô
();

441 
RCC_HSEC⁄fig
(
uöt8_t
 
RCC_HSE
);

442 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

443 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

444 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

445 
RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
);

446 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

448 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
PLLM
, uöt32_à
PLLN
, uöt32_à
PLLP
, uöt32_à
PLLQ
);

449 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

450 
RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
);

451 
RCC_PLLI2SCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

453 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

454 
RCC_MCO1C⁄fig
(
uöt32_t
 
RCC_MCO1Sour˚
, uöt32_à
RCC_MCO1Div
);

455 
RCC_MCO2C⁄fig
(
uöt32_t
 
RCC_MCO2Sour˚
, uöt32_à
RCC_MCO2Div
);

458 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

459 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

460 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

461 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

462 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

463 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

466 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

467 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

468 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

469 
RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SCLKSour˚
);

471 
RCC_AHB1PîùhClockCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

472 
RCC_AHB2PîùhClockCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

473 
RCC_AHB3PîùhClockCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

474 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

475 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

477 
RCC_AHB1PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

478 
RCC_AHB2PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

479 
RCC_AHB3PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

480 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

481 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

483 
RCC_AHB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

484 
RCC_AHB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

485 
RCC_AHB3PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

486 
RCC_APB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

487 
RCC_APB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

490 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

491 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

492 
RCC_CÀ¨Fœg
();

493 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

494 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

496 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_rng.h

24 #i‚de‡
__STM32F4xx_RNG_H


25 
	#__STM32F4xx_RNG_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

52 
	#RNG_FLAG_DRDY
 ((
uöt8_t
)0x0001Ë

	)

53 
	#RNG_FLAG_CECS
 ((
uöt8_t
)0x0002Ë

	)

54 
	#RNG_FLAG_SECS
 ((
uöt8_t
)0x0004Ë

	)

56 
	#IS_RNG_GET_FLAG
(
RNG_FLAG
Ë(((RNG_FLAGË=
RNG_FLAG_DRDY
) || \

57 ((
RNG_FLAG
Ë=
RNG_FLAG_CECS
) || \

58 ((
RNG_FLAG
Ë=
RNG_FLAG_SECS
))

	)

59 
	#IS_RNG_CLEAR_FLAG
(
RNG_FLAG
Ë(((RNG_FLAGË=
RNG_FLAG_CECS
) || \

60 ((
RNG_FLAG
Ë=
RNG_FLAG_SECS
))

	)

68 
	#RNG_IT_CEI
 ((
uöt8_t
)0x20Ë

	)

69 
	#RNG_IT_SEI
 ((
uöt8_t
)0x40Ë

	)

71 
	#IS_RNG_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x9FË=0x00Ë&& ((ITË!0x00))

	)

72 
	#IS_RNG_GET_IT
(
RNG_IT
Ë(((RNG_ITË=
RNG_IT_CEI
Ë|| ((RNG_ITË=
RNG_IT_SEI
))

	)

85 
RNG_DeInô
();

88 
RNG_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

91 
uöt32_t
 
RNG_GëR™domNumbî
();

94 
RNG_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
);

95 
FœgSètus
 
RNG_GëFœgSètus
(
uöt8_t
 
RNG_FLAG
);

96 
RNG_CÀ¨Fœg
(
uöt8_t
 
RNG_FLAG
);

97 
ITSètus
 
RNG_GëITSètus
(
uöt8_t
 
RNG_IT
);

98 
RNG_CÀ¨ITPídögBô
(
uöt8_t
 
RNG_IT
);

100 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_rtc.h

24 #i‚de‡
__STM32F4xx_RTC_H


25 
	#__STM32F4xx_RTC_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

49 
uöt32_t
 
RTC_HourF‹m©
;

52 
uöt32_t
 
RTC_AsynchPªdiv
;

55 
uöt32_t
 
RTC_SynchPªdiv
;

57 }
	tRTC_InôTy≥Def
;

64 
uöt8_t
 
RTC_Hours
;

69 
uöt8_t
 
RTC_Möuãs
;

72 
uöt8_t
 
RTC_Sec⁄ds
;

75 
uöt8_t
 
RTC_H12
;

77 }
	tRTC_TimeTy≥Def
;

84 
uöt8_t
 
RTC_WìkDay
;

87 
uöt8_t
 
RTC_M⁄th
;

90 
uöt8_t
 
RTC_D©e
;

93 
uöt8_t
 
RTC_Yór
;

95 }
	tRTC_D©eTy≥Def
;

102 
RTC_TimeTy≥Def
 
RTC_AœrmTime
;

104 
uöt32_t
 
RTC_AœrmMask
;

107 
uöt32_t
 
RTC_AœrmD©eWìkDaySñ
;

110 
uöt8_t
 
RTC_AœrmD©eWìkDay
;

115 }
	tRTC_AœrmTy≥Def
;

127 
	#RTC_HourF‹m©_24
 ((
uöt32_t
)0x00000000)

	)

128 
	#RTC_HourF‹m©_12
 ((
uöt32_t
)0x00000040)

	)

129 
	#IS_RTC_HOUR_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_HourF‹m©_12
) || \

130 ((
FORMAT
Ë=
RTC_HourF‹m©_24
))

	)

138 
	#IS_RTC_ASYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<0x7F)

	)

148 
	#IS_RTC_SYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<0x7FFF)

	)

157 
	#IS_RTC_HOUR12
(
HOUR
Ë(((HOURË> 0Ë&& ((HOURË<12))

	)

158 
	#IS_RTC_HOUR24
(
HOUR
Ë((HOURË<23)

	)

159 
	#IS_RTC_MINUTES
(
MINUTES
Ë((MINUTESË<59)

	)

160 
	#IS_RTC_SECONDS
(
SECONDS
Ë((SECONDSË<59)

	)

169 
	#RTC_H12_AM
 ((
uöt8_t
)0x00)

	)

170 
	#RTC_H12_PM
 ((
uöt8_t
)0x40)

	)

171 
	#IS_RTC_H12
(
PM
Ë(((PMË=
RTC_H12_AM
Ë|| ((PMË=
RTC_H12_PM
))

	)

180 
	#IS_RTC_YEAR
(
YEAR
Ë((YEARË<99)

	)

191 
	#RTC_M⁄th_J™u¨y
 ((
uöt8_t
)0x01)

	)

192 
	#RTC_M⁄th_Febru¨y
 ((
uöt8_t
)0x02)

	)

193 
	#RTC_M⁄th_M¨ch
 ((
uöt8_t
)0x03)

	)

194 
	#RTC_M⁄th_A¥û
 ((
uöt8_t
)0x04)

	)

195 
	#RTC_M⁄th_May
 ((
uöt8_t
)0x05)

	)

196 
	#RTC_M⁄th_Ju√
 ((
uöt8_t
)0x06)

	)

197 
	#RTC_M⁄th_July
 ((
uöt8_t
)0x07)

	)

198 
	#RTC_M⁄th_Augu°
 ((
uöt8_t
)0x08)

	)

199 
	#RTC_M⁄th_Sïãmbî
 ((
uöt8_t
)0x09)

	)

200 
	#RTC_M⁄th_O˘obî
 ((
uöt8_t
)0x10)

	)

201 
	#RTC_M⁄th_Novembî
 ((
uöt8_t
)0x11)

	)

202 
	#RTC_M⁄th_De˚mbî
 ((
uöt8_t
)0x12)

	)

203 
	#IS_RTC_MONTH
(
MONTH
Ë(((MONTHË>1Ë&& ((MONTHË<12))

	)

204 
	#IS_RTC_DATE
(
DATE
Ë(((DATEË>1Ë&& ((DATEË<31))

	)

214 
	#RTC_Wìkday_M⁄day
 ((
uöt8_t
)0x01)

	)

215 
	#RTC_Wìkday_Tuesday
 ((
uöt8_t
)0x02)

	)

216 
	#RTC_Wìkday_Wed√sday
 ((
uöt8_t
)0x03)

	)

217 
	#RTC_Wìkday_Thursday
 ((
uöt8_t
)0x04)

	)

218 
	#RTC_Wìkday_Friday
 ((
uöt8_t
)0x05)

	)

219 
	#RTC_Wìkday_S©urday
 ((
uöt8_t
)0x06)

	)

220 
	#RTC_Wìkday_Sunday
 ((
uöt8_t
)0x07)

	)

221 
	#IS_RTC_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_Wìkday_M⁄day
) || \

222 ((
WEEKDAY
Ë=
RTC_Wìkday_Tuesday
) || \

223 ((
WEEKDAY
Ë=
RTC_Wìkday_Wed√sday
) || \

224 ((
WEEKDAY
Ë=
RTC_Wìkday_Thursday
) || \

225 ((
WEEKDAY
Ë=
RTC_Wìkday_Friday
) || \

226 ((
WEEKDAY
Ë=
RTC_Wìkday_S©urday
) || \

227 ((
WEEKDAY
Ë=
RTC_Wìkday_Sunday
))

	)

236 
	#IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
DATE
Ë(((DATEË> 0Ë&& ((DATEË<31))

	)

237 
	#IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_Wìkday_M⁄day
) || \

238 ((
WEEKDAY
Ë=
RTC_Wìkday_Tuesday
) || \

239 ((
WEEKDAY
Ë=
RTC_Wìkday_Wed√sday
) || \

240 ((
WEEKDAY
Ë=
RTC_Wìkday_Thursday
) || \

241 ((
WEEKDAY
Ë=
RTC_Wìkday_Friday
) || \

242 ((
WEEKDAY
Ë=
RTC_Wìkday_S©urday
) || \

243 ((
WEEKDAY
Ë=
RTC_Wìkday_Sunday
))

	)

253 
	#RTC_AœrmD©eWìkDaySñ_D©e
 ((
uöt32_t
)0x00000000)

	)

254 
	#RTC_AœrmD©eWìkDaySñ_WìkDay
 ((
uöt32_t
)0x40000000)

	)

256 
	#IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
SEL
Ë(((SELË=
RTC_AœrmD©eWìkDaySñ_D©e
) || \

257 ((
SEL
Ë=
RTC_AœrmD©eWìkDaySñ_WìkDay
))

	)

267 
	#RTC_AœrmMask_N⁄e
 ((
uöt32_t
)0x00000000)

	)

268 
	#RTC_AœrmMask_D©eWìkDay
 ((
uöt32_t
)0x80000000)

	)

269 
	#RTC_AœrmMask_Hours
 ((
uöt32_t
)0x00800000)

	)

270 
	#RTC_AœrmMask_Möuãs
 ((
uöt32_t
)0x00008000)

	)

271 
	#RTC_AœrmMask_Sec⁄ds
 ((
uöt32_t
)0x00000080)

	)

272 
	#RTC_AœrmMask_AŒ
 ((
uöt32_t
)0x80808080)

	)

273 
	#IS_ALARM_MASK
(
MASK
Ë(((MASKË& 0x7F7F7F7FË=(
uöt32_t
)
RESET
)

	)

282 
	#RTC_Aœrm_A
 ((
uöt32_t
)0x00000100)

	)

283 
	#RTC_Aœrm_B
 ((
uöt32_t
)0x00000200)

	)

284 
	#IS_RTC_ALARM
(
ALARM
Ë(((ALARMË=
RTC_Aœrm_A
Ë|| ((ALARMË=
RTC_Aœrm_B
))

	)

285 
	#IS_RTC_CMD_ALARM
(
ALARM
Ë(((ALARMË& (
RTC_Aœrm_A
 | 
RTC_Aœrm_B
)Ë!(
uöt32_t
)
RESET
)

	)

294 
	#RTC_AœrmSubSec⁄dMask_AŒ
 ((
uöt32_t
)0x00000000Ë

	)

297 
	#RTC_AœrmSubSec⁄dMask_SS14_1
 ((
uöt32_t
)0x01000000Ë

	)

299 
	#RTC_AœrmSubSec⁄dMask_SS14_2
 ((
uöt32_t
)0x02000000Ë

	)

301 
	#RTC_AœrmSubSec⁄dMask_SS14_3
 ((
uöt32_t
)0x03000000Ë

	)

303 
	#RTC_AœrmSubSec⁄dMask_SS14_4
 ((
uöt32_t
)0x04000000Ë

	)

305 
	#RTC_AœrmSubSec⁄dMask_SS14_5
 ((
uöt32_t
)0x05000000Ë

	)

307 
	#RTC_AœrmSubSec⁄dMask_SS14_6
 ((
uöt32_t
)0x06000000Ë

	)

309 
	#RTC_AœrmSubSec⁄dMask_SS14_7
 ((
uöt32_t
)0x07000000Ë

	)

311 
	#RTC_AœrmSubSec⁄dMask_SS14_8
 ((
uöt32_t
)0x08000000Ë

	)

313 
	#RTC_AœrmSubSec⁄dMask_SS14_9
 ((
uöt32_t
)0x09000000Ë

	)

315 
	#RTC_AœrmSubSec⁄dMask_SS14_10
 ((
uöt32_t
)0x0A000000Ë

	)

317 
	#RTC_AœrmSubSec⁄dMask_SS14_11
 ((
uöt32_t
)0x0B000000Ë

	)

319 
	#RTC_AœrmSubSec⁄dMask_SS14_12
 ((
uöt32_t
)0x0C000000Ë

	)

321 
	#RTC_AœrmSubSec⁄dMask_SS14_13
 ((
uöt32_t
)0x0D000000Ë

	)

323 
	#RTC_AœrmSubSec⁄dMask_SS14
 ((
uöt32_t
)0x0E000000Ë

	)

325 
	#RTC_AœrmSubSec⁄dMask_N⁄e
 ((
uöt32_t
)0x0F000000Ë

	)

327 
	#IS_RTC_ALARM_SUB_SECOND_MASK
(
MASK
Ë(((MASKË=
RTC_AœrmSubSec⁄dMask_AŒ
) || \

328 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_1
) || \

329 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_2
) || \

330 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_3
) || \

331 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_4
) || \

332 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_5
) || \

333 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_6
) || \

334 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_7
) || \

335 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_8
) || \

336 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_9
) || \

337 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_10
) || \

338 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_11
) || \

339 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_12
) || \

340 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_13
) || \

341 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14
) || \

342 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_N⁄e
))

	)

351 
	#IS_RTC_ALARM_SUB_SECOND_VALUE
(
VALUE
Ë((VALUEË<0x00007FFF)

	)

360 
	#RTC_WakeUpClock_RTCCLK_Div16
 ((
uöt32_t
)0x00000000)

	)

361 
	#RTC_WakeUpClock_RTCCLK_Div8
 ((
uöt32_t
)0x00000001)

	)

362 
	#RTC_WakeUpClock_RTCCLK_Div4
 ((
uöt32_t
)0x00000002)

	)

363 
	#RTC_WakeUpClock_RTCCLK_Div2
 ((
uöt32_t
)0x00000003)

	)

364 
	#RTC_WakeUpClock_CK_SPRE_16bôs
 ((
uöt32_t
)0x00000004)

	)

365 
	#RTC_WakeUpClock_CK_SPRE_17bôs
 ((
uöt32_t
)0x00000006)

	)

366 
	#IS_RTC_WAKEUP_CLOCK
(
CLOCK
Ë(((CLOCKË=
RTC_WakeUpClock_RTCCLK_Div16
) || \

367 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div8
) || \

368 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div4
) || \

369 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div2
) || \

370 ((
CLOCK
Ë=
RTC_WakeUpClock_CK_SPRE_16bôs
) || \

371 ((
CLOCK
Ë=
RTC_WakeUpClock_CK_SPRE_17bôs
))

	)

372 
	#IS_RTC_WAKEUP_COUNTER
(
COUNTER
Ë((COUNTERË<0xFFFF)

	)

380 
	#RTC_TimeSèmpEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

381 
	#RTC_TimeSèmpEdge_FÆlög
 ((
uöt32_t
)0x00000008)

	)

382 
	#IS_RTC_TIMESTAMP_EDGE
(
EDGE
Ë(((EDGEË=
RTC_TimeSèmpEdge_Risög
) || \

383 ((
EDGE
Ë=
RTC_TimeSèmpEdge_FÆlög
))

	)

391 
	#RTC_Ouçut_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

392 
	#RTC_Ouçut_AœrmA
 ((
uöt32_t
)0x00200000)

	)

393 
	#RTC_Ouçut_AœrmB
 ((
uöt32_t
)0x00400000)

	)

394 
	#RTC_Ouçut_WakeUp
 ((
uöt32_t
)0x00600000)

	)

396 
	#IS_RTC_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_Ouçut_DißbÀ
) || \

397 ((
OUTPUT
Ë=
RTC_Ouçut_AœrmA
) || \

398 ((
OUTPUT
Ë=
RTC_Ouçut_AœrmB
) || \

399 ((
OUTPUT
Ë=
RTC_Ouçut_WakeUp
))

	)

408 
	#RTC_OuçutPﬁ¨ôy_High
 ((
uöt32_t
)0x00000000)

	)

409 
	#RTC_OuçutPﬁ¨ôy_Low
 ((
uöt32_t
)0x00100000)

	)

410 
	#IS_RTC_OUTPUT_POL
(
POL
Ë(((POLË=
RTC_OuçutPﬁ¨ôy_High
) || \

411 ((
POL
Ë=
RTC_OuçutPﬁ¨ôy_Low
))

	)

420 
	#RTC_CÆibSign_Posôive
 ((
uöt32_t
)0x00000000)

	)

421 
	#RTC_CÆibSign_Neg©ive
 ((
uöt32_t
)0x00000080)

	)

422 
	#IS_RTC_CALIB_SIGN
(
SIGN
Ë(((SIGNË=
RTC_CÆibSign_Posôive
) || \

423 ((
SIGN
Ë=
RTC_CÆibSign_Neg©ive
))

	)

424 
	#IS_RTC_CALIB_VALUE
(
VALUE
Ë((VALUEË< 0x20)

	)

433 
	#RTC_CÆibOuçut_512Hz
 ((
uöt32_t
)0x00000000)

	)

434 
	#RTC_CÆibOuçut_1Hz
 ((
uöt32_t
)0x00080000)

	)

435 
	#IS_RTC_CALIB_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_CÆibOuçut_512Hz
) || \

436 ((
OUTPUT
Ë=
RTC_CÆibOuçut_1Hz
))

	)

444 
	#RTC_SmoŸhCÆibPîiod_32£c
 ((
uöt32_t
)0x00000000Ë

	)

446 
	#RTC_SmoŸhCÆibPîiod_16£c
 ((
uöt32_t
)0x00002000Ë

	)

448 
	#RTC_SmoŸhCÆibPîiod_8£c
 ((
uöt32_t
)0x00004000Ë

	)

450 
	#IS_RTC_SMOOTH_CALIB_PERIOD
(
PERIOD
Ë(((PERIODË=
RTC_SmoŸhCÆibPîiod_32£c
) || \

451 ((
PERIOD
Ë=
RTC_SmoŸhCÆibPîiod_16£c
) || \

452 ((
PERIOD
Ë=
RTC_SmoŸhCÆibPîiod_8£c
))

	)

461 
	#RTC_SmoŸhCÆibPlusPul£s_Së
 ((
uöt32_t
)0x00008000Ë

	)

464 
	#RTC_SmoŸhCÆibPlusPul£s_Re£t
 ((
uöt32_t
)0x00000000Ë

	)

466 
	#IS_RTC_SMOOTH_CALIB_PLUS
(
PLUS
Ë(((PLUSË=
RTC_SmoŸhCÆibPlusPul£s_Së
) || \

467 ((
PLUS
Ë=
RTC_SmoŸhCÆibPlusPul£s_Re£t
))

	)

476 
	#IS_RTC_SMOOTH_CALIB_MINUS
(
VALUE
Ë((VALUEË<0x000001FF)

	)

485 
	#RTC_DayLightSavög_SUB1H
 ((
uöt32_t
)0x00020000)

	)

486 
	#RTC_DayLightSavög_ADD1H
 ((
uöt32_t
)0x00010000)

	)

487 
	#IS_RTC_DAYLIGHT_SAVING
(
SAVE
Ë(((SAVEË=
RTC_DayLightSavög_SUB1H
) || \

488 ((
SAVE
Ë=
RTC_DayLightSavög_ADD1H
))

	)

490 
	#RTC_St‹eO≥øti⁄_Re£t
 ((
uöt32_t
)0x00000000)

	)

491 
	#RTC_St‹eO≥øti⁄_Së
 ((
uöt32_t
)0x00040000)

	)

492 
	#IS_RTC_STORE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
RTC_St‹eO≥øti⁄_Re£t
) || \

493 ((
OPERATION
Ë=
RTC_St‹eO≥øti⁄_Së
))

	)

501 
	#RTC_Tam≥rTriggî_RisögEdge
 ((
uöt32_t
)0x00000000)

	)

502 
	#RTC_Tam≥rTriggî_FÆlögEdge
 ((
uöt32_t
)0x00000001)

	)

503 
	#RTC_Tam≥rTriggî_LowLevñ
 ((
uöt32_t
)0x00000000)

	)

504 
	#RTC_Tam≥rTriggî_HighLevñ
 ((
uöt32_t
)0x00000001)

	)

505 
	#IS_RTC_TAMPER_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
RTC_Tam≥rTriggî_RisögEdge
) || \

506 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_FÆlögEdge
) || \

507 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_LowLevñ
) || \

508 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_HighLevñ
))

	)

517 
	#RTC_Tam≥rFûãr_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

519 
	#RTC_Tam≥rFûãr_2Sam∂e
 ((
uöt32_t
)0x00000800Ë

	)

521 
	#RTC_Tam≥rFûãr_4Sam∂e
 ((
uöt32_t
)0x00001000Ë

	)

523 
	#RTC_Tam≥rFûãr_8Sam∂e
 ((
uöt32_t
)0x00001800Ë

	)

525 
	#IS_RTC_TAMPER_FILTER
(
FILTER
Ë(((FILTERË=
RTC_Tam≥rFûãr_DißbÀ
) || \

526 ((
FILTER
Ë=
RTC_Tam≥rFûãr_2Sam∂e
) || \

527 ((
FILTER
Ë=
RTC_Tam≥rFûãr_4Sam∂e
) || \

528 ((
FILTER
Ë=
RTC_Tam≥rFûãr_8Sam∂e
))

	)

536 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div32768
 ((
uöt32_t
)0x00000000Ë

	)

538 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div16384
 ((
uöt32_t
)0x000000100Ë

	)

540 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div8192
 ((
uöt32_t
)0x00000200Ë

	)

542 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div4096
 ((
uöt32_t
)0x00000300Ë

	)

544 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div2048
 ((
uöt32_t
)0x00000400Ë

	)

546 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div1024
 ((
uöt32_t
)0x00000500Ë

	)

548 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div512
 ((
uöt32_t
)0x00000600Ë

	)

550 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div256
 ((
uöt32_t
)0x00000700Ë

	)

552 
	#IS_RTC_TAMPER_SAMPLING_FREQ
(
FREQ
Ë(((FREQË==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div32768
) || \

553 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div16384
) || \

554 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div8192
) || \

555 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div4096
) || \

556 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div2048
) || \

557 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div1024
) || \

558 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div512
) || \

559 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div256
))

	)

568 
	#RTC_Tam≥rPªch¨geDuøti⁄_1RTCCLK
 ((
uöt32_t
)0x00000000Ë

	)

570 
	#RTC_Tam≥rPªch¨geDuøti⁄_2RTCCLK
 ((
uöt32_t
)0x00002000Ë

	)

572 
	#RTC_Tam≥rPªch¨geDuøti⁄_4RTCCLK
 ((
uöt32_t
)0x00004000Ë

	)

574 
	#RTC_Tam≥rPªch¨geDuøti⁄_8RTCCLK
 ((
uöt32_t
)0x00006000Ë

	)

577 
	#IS_RTC_TAMPER_PRECHARGE_DURATION
(
DURATION
Ë(((DURATIONË=
RTC_Tam≥rPªch¨geDuøti⁄_1RTCCLK
) || \

578 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_2RTCCLK
) || \

579 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_4RTCCLK
) || \

580 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_8RTCCLK
))

	)

588 
	#RTC_Tam≥r_1
 
RTC_TAFCR_TAMP1E


	)

589 
	#IS_RTC_TAMPER
(
TAMPER
Ë(((TAMPERË=
RTC_Tam≥r_1
))

	)

598 
	#RTC_Tam≥rPö_PC13
 ((
uöt32_t
)0x00000000)

	)

599 
	#RTC_Tam≥rPö_PI8
 ((
uöt32_t
)0x00010000)

	)

600 
	#IS_RTC_TAMPER_PIN
(
PIN
Ë(((PINË=
RTC_Tam≥rPö_PC13
) || \

601 ((
PIN
Ë=
RTC_Tam≥rPö_PI8
))

	)

609 
	#RTC_TimeSèmpPö_PC13
 ((
uöt32_t
)0x00000000)

	)

610 
	#RTC_TimeSèmpPö_PI8
 ((
uöt32_t
)0x00020000)

	)

611 
	#IS_RTC_TIMESTAMP_PIN
(
PIN
Ë(((PINË=
RTC_TimeSèmpPö_PC13
) || \

612 ((
PIN
Ë=
RTC_TimeSèmpPö_PI8
))

	)

620 
	#RTC_OuçutTy≥_O≥nDøö
 ((
uöt32_t
)0x00000000)

	)

621 
	#RTC_OuçutTy≥_PushPuŒ
 ((
uöt32_t
)0x00040000)

	)

622 
	#IS_RTC_OUTPUT_TYPE
(
TYPE
Ë(((TYPEË=
RTC_OuçutTy≥_O≥nDøö
) || \

623 ((
TYPE
Ë=
RTC_OuçutTy≥_PushPuŒ
))

	)

632 
	#RTC_Shi·Add1S_Re£t
 ((
uöt32_t
)0x00000000)

	)

633 
	#RTC_Shi·Add1S_Së
 ((
uöt32_t
)0x80000000)

	)

634 
	#IS_RTC_SHIFT_ADD1S
(
SEL
Ë(((SELË=
RTC_Shi·Add1S_Re£t
) || \

635 ((
SEL
Ë=
RTC_Shi·Add1S_Së
))

	)

643 
	#IS_RTC_SHIFT_SUBFS
(
FS
Ë((FSË<0x00007FFF)

	)

653 
	#RTC_BKP_DR0
 ((
uöt32_t
)0x00000000)

	)

654 
	#RTC_BKP_DR1
 ((
uöt32_t
)0x00000001)

	)

655 
	#RTC_BKP_DR2
 ((
uöt32_t
)0x00000002)

	)

656 
	#RTC_BKP_DR3
 ((
uöt32_t
)0x00000003)

	)

657 
	#RTC_BKP_DR4
 ((
uöt32_t
)0x00000004)

	)

658 
	#RTC_BKP_DR5
 ((
uöt32_t
)0x00000005)

	)

659 
	#RTC_BKP_DR6
 ((
uöt32_t
)0x00000006)

	)

660 
	#RTC_BKP_DR7
 ((
uöt32_t
)0x00000007)

	)

661 
	#RTC_BKP_DR8
 ((
uöt32_t
)0x00000008)

	)

662 
	#RTC_BKP_DR9
 ((
uöt32_t
)0x00000009)

	)

663 
	#RTC_BKP_DR10
 ((
uöt32_t
)0x0000000A)

	)

664 
	#RTC_BKP_DR11
 ((
uöt32_t
)0x0000000B)

	)

665 
	#RTC_BKP_DR12
 ((
uöt32_t
)0x0000000C)

	)

666 
	#RTC_BKP_DR13
 ((
uöt32_t
)0x0000000D)

	)

667 
	#RTC_BKP_DR14
 ((
uöt32_t
)0x0000000E)

	)

668 
	#RTC_BKP_DR15
 ((
uöt32_t
)0x0000000F)

	)

669 
	#RTC_BKP_DR16
 ((
uöt32_t
)0x00000010)

	)

670 
	#RTC_BKP_DR17
 ((
uöt32_t
)0x00000011)

	)

671 
	#RTC_BKP_DR18
 ((
uöt32_t
)0x00000012)

	)

672 
	#RTC_BKP_DR19
 ((
uöt32_t
)0x00000013)

	)

673 
	#IS_RTC_BKP
(
BKP
Ë(((BKPË=
RTC_BKP_DR0
) || \

674 ((
BKP
Ë=
RTC_BKP_DR1
) || \

675 ((
BKP
Ë=
RTC_BKP_DR2
) || \

676 ((
BKP
Ë=
RTC_BKP_DR3
) || \

677 ((
BKP
Ë=
RTC_BKP_DR4
) || \

678 ((
BKP
Ë=
RTC_BKP_DR5
) || \

679 ((
BKP
Ë=
RTC_BKP_DR6
) || \

680 ((
BKP
Ë=
RTC_BKP_DR7
) || \

681 ((
BKP
Ë=
RTC_BKP_DR8
) || \

682 ((
BKP
Ë=
RTC_BKP_DR9
) || \

683 ((
BKP
Ë=
RTC_BKP_DR10
) || \

684 ((
BKP
Ë=
RTC_BKP_DR11
) || \

685 ((
BKP
Ë=
RTC_BKP_DR12
) || \

686 ((
BKP
Ë=
RTC_BKP_DR13
) || \

687 ((
BKP
Ë=
RTC_BKP_DR14
) || \

688 ((
BKP
Ë=
RTC_BKP_DR15
) || \

689 ((
BKP
Ë=
RTC_BKP_DR16
) || \

690 ((
BKP
Ë=
RTC_BKP_DR17
) || \

691 ((
BKP
Ë=
RTC_BKP_DR18
) || \

692 ((
BKP
Ë=
RTC_BKP_DR19
))

	)

700 
	#RTC_F‹m©_BIN
 ((
uöt32_t
)0x000000000)

	)

701 
	#RTC_F‹m©_BCD
 ((
uöt32_t
)0x000000001)

	)

702 
	#IS_RTC_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_F‹m©_BIN
Ë|| ((FORMATË=
RTC_F‹m©_BCD
))

	)

711 
	#RTC_FLAG_RECALPF
 ((
uöt32_t
)0x00010000)

	)

712 
	#RTC_FLAG_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

713 
	#RTC_FLAG_TSOVF
 ((
uöt32_t
)0x00001000)

	)

714 
	#RTC_FLAG_TSF
 ((
uöt32_t
)0x00000800)

	)

715 
	#RTC_FLAG_WUTF
 ((
uöt32_t
)0x00000400)

	)

716 
	#RTC_FLAG_ALRBF
 ((
uöt32_t
)0x00000200)

	)

717 
	#RTC_FLAG_ALRAF
 ((
uöt32_t
)0x00000100)

	)

718 
	#RTC_FLAG_INITF
 ((
uöt32_t
)0x00000040)

	)

719 
	#RTC_FLAG_RSF
 ((
uöt32_t
)0x00000020)

	)

720 
	#RTC_FLAG_INITS
 ((
uöt32_t
)0x00000010)

	)

721 
	#RTC_FLAG_SHPF
 ((
uöt32_t
)0x00000008)

	)

722 
	#RTC_FLAG_WUTWF
 ((
uöt32_t
)0x00000004)

	)

723 
	#RTC_FLAG_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

724 
	#RTC_FLAG_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

725 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_TSOVF
Ë|| ((FLAGË=
RTC_FLAG_TSF
) || \

726 ((
FLAG
Ë=
RTC_FLAG_WUTF
Ë|| ((FLAGË=
RTC_FLAG_ALRBF
) || \

727 ((
FLAG
Ë=
RTC_FLAG_ALRAF
Ë|| ((FLAGË=
RTC_FLAG_INITF
) || \

728 ((
FLAG
Ë=
RTC_FLAG_RSF
Ë|| ((FLAGË=
RTC_FLAG_WUTWF
) || \

729 ((
FLAG
Ë=
RTC_FLAG_ALRBWF
Ë|| ((FLAGË=
RTC_FLAG_ALRAWF
) || \

730 ((
FLAG
Ë=
RTC_FLAG_TAMP1F
Ë|| ((FLAGË=
RTC_FLAG_RECALPF
) || \

731 ((
FLAG
Ë=
RTC_FLAG_SHPF
))

	)

732 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë(((FLAGË!(
uöt32_t
)
RESET
Ë&& (((FLAGË& 0xFFFF00DFË=(uöt32_t)RESET))

	)

740 
	#RTC_IT_TS
 ((
uöt32_t
)0x00008000)

	)

741 
	#RTC_IT_WUT
 ((
uöt32_t
)0x00004000)

	)

742 
	#RTC_IT_ALRB
 ((
uöt32_t
)0x00002000)

	)

743 
	#RTC_IT_ALRA
 ((
uöt32_t
)0x00001000)

	)

744 
	#RTC_IT_TAMP
 ((
uöt32_t
)0x00000004Ë

	)

745 
	#RTC_IT_TAMP1
 ((
uöt32_t
)0x00020000)

	)

747 
	#IS_RTC_CONFIG_IT
(
IT
Ë(((ITË!(
uöt32_t
)
RESET
Ë&& (((ITË& 0xFFFF0FFBË=(uöt32_t)RESET))

	)

748 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_TS
Ë|| ((ITË=
RTC_IT_WUT
) || \

749 ((
IT
Ë=
RTC_IT_ALRB
Ë|| ((ITË=
RTC_IT_ALRA
) || \

750 ((
IT
Ë=
RTC_IT_TAMP1
))

	)

751 
	#IS_RTC_CLEAR_IT
(
IT
Ë(((ITË!(
uöt32_t
)
RESET
Ë&& (((ITË& 0xFFFD0FFFË=(uöt32_t)RESET))

	)

760 
	#RTC_DigôÆCÆibC⁄fig
 
RTC_Cﬂr£CÆibC⁄fig


	)

761 
	#RTC_DigôÆCÆibCmd
 
RTC_Cﬂr£CÆibCmd


	)

775 
Eº‹Sètus
 
RTC_DeInô
();

778 
Eº‹Sètus
 
RTC_Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
);

779 
RTC_Såu˘Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
);

780 
RTC_WrôePrŸe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

781 
Eº‹Sètus
 
RTC_E¡îInôMode
();

782 
RTC_ExôInôMode
();

783 
Eº‹Sètus
 
RTC_WaôF‹Synchro
();

784 
Eº‹Sètus
 
RTC_RefClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

785 
RTC_By∑ssShadowCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

788 
Eº‹Sètus
 
RTC_SëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

789 
RTC_TimeSåu˘Inô
(
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

790 
RTC_GëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

791 
uöt32_t
 
RTC_GëSubSec⁄d
();

792 
Eº‹Sètus
 
RTC_SëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

793 
RTC_D©eSåu˘Inô
(
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

794 
RTC_GëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

797 
RTC_SëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

798 
RTC_AœrmSåu˘Inô
(
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

799 
RTC_GëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

800 
Eº‹Sètus
 
RTC_AœrmCmd
(
uöt32_t
 
RTC_Aœrm
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

801 
RTC_AœrmSubSec⁄dC⁄fig
(
uöt32_t
 
RTC_Aœrm
, uöt32_à
RTC_AœrmSubSec⁄dVÆue
, uöt32_à
RTC_AœrmSubSec⁄dMask
);

802 
uöt32_t
 
RTC_GëAœrmSubSec⁄d
(uöt32_à
RTC_Aœrm
);

805 
RTC_WakeUpClockC⁄fig
(
uöt32_t
 
RTC_WakeUpClock
);

806 
RTC_SëWakeUpCou¡î
(
uöt32_t
 
RTC_WakeUpCou¡î
);

807 
uöt32_t
 
RTC_GëWakeUpCou¡î
();

808 
Eº‹Sètus
 
RTC_WakeUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

811 
RTC_DayLightSavögC⁄fig
(
uöt32_t
 
RTC_DayLightSavög
, uöt32_à
RTC_St‹eO≥øti⁄
);

812 
uöt32_t
 
RTC_GëSt‹eO≥øti⁄
();

815 
RTC_OuçutC⁄fig
(
uöt32_t
 
RTC_Ouçut
, uöt32_à
RTC_OuçutPﬁ¨ôy
);

818 
Eº‹Sètus
 
RTC_Cﬂr£CÆibC⁄fig
(
uöt32_t
 
RTC_CÆibSign
, uöt32_à
VÆue
);

819 
Eº‹Sètus
 
RTC_Cﬂr£CÆibCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

820 
RTC_CÆibOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

821 
RTC_CÆibOuçutC⁄fig
(
uöt32_t
 
RTC_CÆibOuçut
);

822 
Eº‹Sètus
 
RTC_SmoŸhCÆibC⁄fig
(
uöt32_t
 
RTC_SmoŸhCÆibPîiod
,

823 
uöt32_t
 
RTC_SmoŸhCÆibPlusPul£s
,

824 
uöt32_t
 
RTC_SmouthCÆibMöusPul£sVÆue
);

827 
RTC_TimeSèmpCmd
(
uöt32_t
 
RTC_TimeSèmpEdge
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

828 
RTC_GëTimeSèmp
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_SèmpTimeSåu˘
,

829 
RTC_D©eTy≥Def
* 
RTC_SèmpD©eSåu˘
);

830 
uöt32_t
 
RTC_GëTimeSèmpSubSec⁄d
();

833 
RTC_Tam≥rTriggîC⁄fig
(
uöt32_t
 
RTC_Tam≥r
, uöt32_à
RTC_Tam≥rTriggî
);

834 
RTC_Tam≥rCmd
(
uöt32_t
 
RTC_Tam≥r
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

835 
RTC_Tam≥rFûãrC⁄fig
(
uöt32_t
 
RTC_Tam≥rFûãr
);

836 
RTC_Tam≥rSam∂ögFªqC⁄fig
(
uöt32_t
 
RTC_Tam≥rSam∂ögFªq
);

837 
RTC_Tam≥rPösPªch¨geDuøti⁄
(
uöt32_t
 
RTC_Tam≥rPªch¨geDuøti⁄
);

838 
RTC_TimeSèmpOnTam≥rDëe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

839 
RTC_Tam≥rPuŒUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

842 
RTC_WrôeBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
, uöt32_à
D©a
);

843 
uöt32_t
 
RTC_RódBackupRegi°î
(uöt32_à
RTC_BKP_DR
);

847 
RTC_Tam≥rPöSñe˘i⁄
(
uöt32_t
 
RTC_Tam≥rPö
);

848 
RTC_TimeSèmpPöSñe˘i⁄
(
uöt32_t
 
RTC_TimeSèmpPö
);

849 
RTC_OuçutTy≥C⁄fig
(
uöt32_t
 
RTC_OuçutTy≥
);

852 
Eº‹Sètus
 
RTC_SynchroShi·C⁄fig
(
uöt32_t
 
RTC_Shi·Add1S
, uöt32_à
RTC_Shi·SubFS
);

855 
RTC_ITC⁄fig
(
uöt32_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

856 
FœgSètus
 
RTC_GëFœgSètus
(
uöt32_t
 
RTC_FLAG
);

857 
RTC_CÀ¨Fœg
(
uöt32_t
 
RTC_FLAG
);

858 
ITSètus
 
RTC_GëITSètus
(
uöt32_t
 
RTC_IT
);

859 
RTC_CÀ¨ITPídögBô
(
uöt32_t
 
RTC_IT
);

861 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_sdio.h

24 #i‚de‡
__STM32F4xx_SDIO_H


25 
	#__STM32F4xx_SDIO_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

46 
uöt32_t
 
SDIO_ClockEdge
;

49 
uöt32_t
 
SDIO_ClockBy∑ss
;

53 
uöt32_t
 
SDIO_ClockPowîSave
;

57 
uöt32_t
 
SDIO_BusWide
;

60 
uöt32_t
 
SDIO_H¨dw¨eFlowC⁄åﬁ
;

63 
uöt8_t
 
SDIO_ClockDiv
;

66 } 
	tSDIO_InôTy≥Def
;

70 
uöt32_t
 
SDIO_Argumít
;

75 
uöt32_t
 
SDIO_CmdIndex
;

77 
uöt32_t
 
SDIO_Re•⁄£
;

80 
uöt32_t
 
SDIO_Waô
;

83 
uöt32_t
 
SDIO_CPSM
;

86 } 
	tSDIO_CmdInôTy≥Def
;

90 
uöt32_t
 
SDIO_D©aTimeOut
;

92 
uöt32_t
 
SDIO_D©aLígth
;

94 
uöt32_t
 
SDIO_D©aBlockSize
;

97 
uöt32_t
 
SDIO_Tøns„rDú
;

101 
uöt32_t
 
SDIO_Tøns„rMode
;

104 
uöt32_t
 
SDIO_DPSM
;

107 } 
	tSDIO_D©aInôTy≥Def
;

120 
	#SDIO_ClockEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

121 
	#SDIO_ClockEdge_FÆlög
 ((
uöt32_t
)0x00002000)

	)

122 
	#IS_SDIO_CLOCK_EDGE
(
EDGE
Ë(((EDGEË=
SDIO_ClockEdge_Risög
) || \

123 ((
EDGE
Ë=
SDIO_ClockEdge_FÆlög
))

	)

132 
	#SDIO_ClockBy∑ss_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

133 
	#SDIO_ClockBy∑ss_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

134 
	#IS_SDIO_CLOCK_BYPASS
(
BYPASS
Ë(((BYPASSË=
SDIO_ClockBy∑ss_DißbÀ
) || \

135 ((
BYPASS
Ë=
SDIO_ClockBy∑ss_E«bÀ
))

	)

144 
	#SDIO_ClockPowîSave_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

145 
	#SDIO_ClockPowîSave_E«bÀ
 ((
uöt32_t
)0x00000200)

	)

146 
	#IS_SDIO_CLOCK_POWER_SAVE
(
SAVE
Ë(((SAVEË=
SDIO_ClockPowîSave_DißbÀ
) || \

147 ((
SAVE
Ë=
SDIO_ClockPowîSave_E«bÀ
))

	)

156 
	#SDIO_BusWide_1b
 ((
uöt32_t
)0x00000000)

	)

157 
	#SDIO_BusWide_4b
 ((
uöt32_t
)0x00000800)

	)

158 
	#SDIO_BusWide_8b
 ((
uöt32_t
)0x00001000)

	)

159 
	#IS_SDIO_BUS_WIDE
(
WIDE
Ë(((WIDEË=
SDIO_BusWide_1b
Ë|| ((WIDEË=
SDIO_BusWide_4b
) || \

160 ((
WIDE
Ë=
SDIO_BusWide_8b
))

	)

170 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

171 
	#SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
 ((
uöt32_t
)0x00004000)

	)

172 
	#IS_SDIO_HARDWARE_FLOW_CONTROL
(
CONTROL
Ë(((CONTROLË=
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
) || \

173 ((
CONTROL
Ë=
SDIO_H¨dw¨eFlowC⁄åﬁ_E«bÀ
))

	)

182 
	#SDIO_PowîSèã_OFF
 ((
uöt32_t
)0x00000000)

	)

183 
	#SDIO_PowîSèã_ON
 ((
uöt32_t
)0x00000003)

	)

184 
	#IS_SDIO_POWER_STATE
(
STATE
Ë(((STATEË=
SDIO_PowîSèã_OFF
Ë|| ((STATEË=
SDIO_PowîSèã_ON
))

	)

194 
	#SDIO_IT_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

195 
	#SDIO_IT_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

196 
	#SDIO_IT_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

197 
	#SDIO_IT_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

198 
	#SDIO_IT_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

199 
	#SDIO_IT_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

200 
	#SDIO_IT_CMDREND
 ((
uöt32_t
)0x00000040)

	)

201 
	#SDIO_IT_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

202 
	#SDIO_IT_DATAEND
 ((
uöt32_t
)0x00000100)

	)

203 
	#SDIO_IT_STBITERR
 ((
uöt32_t
)0x00000200)

	)

204 
	#SDIO_IT_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

205 
	#SDIO_IT_CMDACT
 ((
uöt32_t
)0x00000800)

	)

206 
	#SDIO_IT_TXACT
 ((
uöt32_t
)0x00001000)

	)

207 
	#SDIO_IT_RXACT
 ((
uöt32_t
)0x00002000)

	)

208 
	#SDIO_IT_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

209 
	#SDIO_IT_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

210 
	#SDIO_IT_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

211 
	#SDIO_IT_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

212 
	#SDIO_IT_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

213 
	#SDIO_IT_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

214 
	#SDIO_IT_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

215 
	#SDIO_IT_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

216 
	#SDIO_IT_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

217 
	#SDIO_IT_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

218 
	#IS_SDIO_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF000000Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

227 
	#IS_SDIO_CMD_INDEX
(
INDEX
Ë((INDEXË< 0x40)

	)

236 
	#SDIO_Re•⁄£_No
 ((
uöt32_t
)0x00000000)

	)

237 
	#SDIO_Re•⁄£_Sh‹t
 ((
uöt32_t
)0x00000040)

	)

238 
	#SDIO_Re•⁄£_L⁄g
 ((
uöt32_t
)0x000000C0)

	)

239 
	#IS_SDIO_RESPONSE
(
RESPONSE
Ë(((RESPONSEË=
SDIO_Re•⁄£_No
) || \

240 ((
RESPONSE
Ë=
SDIO_Re•⁄£_Sh‹t
) || \

241 ((
RESPONSE
Ë=
SDIO_Re•⁄£_L⁄g
))

	)

250 
	#SDIO_Waô_No
 ((
uöt32_t
)0x00000000Ë

	)

251 
	#SDIO_Waô_IT
 ((
uöt32_t
)0x00000100Ë

	)

252 
	#SDIO_Waô_Píd
 ((
uöt32_t
)0x00000200Ë

	)

253 
	#IS_SDIO_WAIT
(
WAIT
Ë(((WAITË=
SDIO_Waô_No
Ë|| ((WAITË=
SDIO_Waô_IT
) || \

254 ((
WAIT
Ë=
SDIO_Waô_Píd
))

	)

263 
	#SDIO_CPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

264 
	#SDIO_CPSM_E«bÀ
 ((
uöt32_t
)0x00000400)

	)

265 
	#IS_SDIO_CPSM
(
CPSM
Ë(((CPSMË=
SDIO_CPSM_E«bÀ
Ë|| ((CPSMË=
SDIO_CPSM_DißbÀ
))

	)

274 
	#SDIO_RESP1
 ((
uöt32_t
)0x00000000)

	)

275 
	#SDIO_RESP2
 ((
uöt32_t
)0x00000004)

	)

276 
	#SDIO_RESP3
 ((
uöt32_t
)0x00000008)

	)

277 
	#SDIO_RESP4
 ((
uöt32_t
)0x0000000C)

	)

278 
	#IS_SDIO_RESP
(
RESP
Ë(((RESPË=
SDIO_RESP1
Ë|| ((RESPË=
SDIO_RESP2
) || \

279 ((
RESP
Ë=
SDIO_RESP3
Ë|| ((RESPË=
SDIO_RESP4
))

	)

288 
	#IS_SDIO_DATA_LENGTH
(
LENGTH
Ë((LENGTHË<0x01FFFFFF)

	)

297 
	#SDIO_D©aBlockSize_1b
 ((
uöt32_t
)0x00000000)

	)

298 
	#SDIO_D©aBlockSize_2b
 ((
uöt32_t
)0x00000010)

	)

299 
	#SDIO_D©aBlockSize_4b
 ((
uöt32_t
)0x00000020)

	)

300 
	#SDIO_D©aBlockSize_8b
 ((
uöt32_t
)0x00000030)

	)

301 
	#SDIO_D©aBlockSize_16b
 ((
uöt32_t
)0x00000040)

	)

302 
	#SDIO_D©aBlockSize_32b
 ((
uöt32_t
)0x00000050)

	)

303 
	#SDIO_D©aBlockSize_64b
 ((
uöt32_t
)0x00000060)

	)

304 
	#SDIO_D©aBlockSize_128b
 ((
uöt32_t
)0x00000070)

	)

305 
	#SDIO_D©aBlockSize_256b
 ((
uöt32_t
)0x00000080)

	)

306 
	#SDIO_D©aBlockSize_512b
 ((
uöt32_t
)0x00000090)

	)

307 
	#SDIO_D©aBlockSize_1024b
 ((
uöt32_t
)0x000000A0)

	)

308 
	#SDIO_D©aBlockSize_2048b
 ((
uöt32_t
)0x000000B0)

	)

309 
	#SDIO_D©aBlockSize_4096b
 ((
uöt32_t
)0x000000C0)

	)

310 
	#SDIO_D©aBlockSize_8192b
 ((
uöt32_t
)0x000000D0)

	)

311 
	#SDIO_D©aBlockSize_16384b
 ((
uöt32_t
)0x000000E0)

	)

312 
	#IS_SDIO_BLOCK_SIZE
(
SIZE
Ë(((SIZEË=
SDIO_D©aBlockSize_1b
) || \

313 ((
SIZE
Ë=
SDIO_D©aBlockSize_2b
) || \

314 ((
SIZE
Ë=
SDIO_D©aBlockSize_4b
) || \

315 ((
SIZE
Ë=
SDIO_D©aBlockSize_8b
) || \

316 ((
SIZE
Ë=
SDIO_D©aBlockSize_16b
) || \

317 ((
SIZE
Ë=
SDIO_D©aBlockSize_32b
) || \

318 ((
SIZE
Ë=
SDIO_D©aBlockSize_64b
) || \

319 ((
SIZE
Ë=
SDIO_D©aBlockSize_128b
) || \

320 ((
SIZE
Ë=
SDIO_D©aBlockSize_256b
) || \

321 ((
SIZE
Ë=
SDIO_D©aBlockSize_512b
) || \

322 ((
SIZE
Ë=
SDIO_D©aBlockSize_1024b
) || \

323 ((
SIZE
Ë=
SDIO_D©aBlockSize_2048b
) || \

324 ((
SIZE
Ë=
SDIO_D©aBlockSize_4096b
) || \

325 ((
SIZE
Ë=
SDIO_D©aBlockSize_8192b
) || \

326 ((
SIZE
Ë=
SDIO_D©aBlockSize_16384b
))

	)

335 
	#SDIO_Tøns„rDú_ToC¨d
 ((
uöt32_t
)0x00000000)

	)

336 
	#SDIO_Tøns„rDú_ToSDIO
 ((
uöt32_t
)0x00000002)

	)

337 
	#IS_SDIO_TRANSFER_DIR
(
DIR
Ë(((DIRË=
SDIO_Tøns„rDú_ToC¨d
) || \

338 ((
DIR
Ë=
SDIO_Tøns„rDú_ToSDIO
))

	)

347 
	#SDIO_Tøns„rMode_Block
 ((
uöt32_t
)0x00000000)

	)

348 
	#SDIO_Tøns„rMode_Såóm
 ((
uöt32_t
)0x00000004)

	)

349 
	#IS_SDIO_TRANSFER_MODE
(
MODE
Ë(((MODEË=
SDIO_Tøns„rMode_Såóm
) || \

350 ((
MODE
Ë=
SDIO_Tøns„rMode_Block
))

	)

359 
	#SDIO_DPSM_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

360 
	#SDIO_DPSM_E«bÀ
 ((
uöt32_t
)0x00000001)

	)

361 
	#IS_SDIO_DPSM
(
DPSM
Ë(((DPSMË=
SDIO_DPSM_E«bÀ
Ë|| ((DPSMË=
SDIO_DPSM_DißbÀ
))

	)

370 
	#SDIO_FLAG_CCRCFAIL
 ((
uöt32_t
)0x00000001)

	)

371 
	#SDIO_FLAG_DCRCFAIL
 ((
uöt32_t
)0x00000002)

	)

372 
	#SDIO_FLAG_CTIMEOUT
 ((
uöt32_t
)0x00000004)

	)

373 
	#SDIO_FLAG_DTIMEOUT
 ((
uöt32_t
)0x00000008)

	)

374 
	#SDIO_FLAG_TXUNDERR
 ((
uöt32_t
)0x00000010)

	)

375 
	#SDIO_FLAG_RXOVERR
 ((
uöt32_t
)0x00000020)

	)

376 
	#SDIO_FLAG_CMDREND
 ((
uöt32_t
)0x00000040)

	)

377 
	#SDIO_FLAG_CMDSENT
 ((
uöt32_t
)0x00000080)

	)

378 
	#SDIO_FLAG_DATAEND
 ((
uöt32_t
)0x00000100)

	)

379 
	#SDIO_FLAG_STBITERR
 ((
uöt32_t
)0x00000200)

	)

380 
	#SDIO_FLAG_DBCKEND
 ((
uöt32_t
)0x00000400)

	)

381 
	#SDIO_FLAG_CMDACT
 ((
uöt32_t
)0x00000800)

	)

382 
	#SDIO_FLAG_TXACT
 ((
uöt32_t
)0x00001000)

	)

383 
	#SDIO_FLAG_RXACT
 ((
uöt32_t
)0x00002000)

	)

384 
	#SDIO_FLAG_TXFIFOHE
 ((
uöt32_t
)0x00004000)

	)

385 
	#SDIO_FLAG_RXFIFOHF
 ((
uöt32_t
)0x00008000)

	)

386 
	#SDIO_FLAG_TXFIFOF
 ((
uöt32_t
)0x00010000)

	)

387 
	#SDIO_FLAG_RXFIFOF
 ((
uöt32_t
)0x00020000)

	)

388 
	#SDIO_FLAG_TXFIFOE
 ((
uöt32_t
)0x00040000)

	)

389 
	#SDIO_FLAG_RXFIFOE
 ((
uöt32_t
)0x00080000)

	)

390 
	#SDIO_FLAG_TXDAVL
 ((
uöt32_t
)0x00100000)

	)

391 
	#SDIO_FLAG_RXDAVL
 ((
uöt32_t
)0x00200000)

	)

392 
	#SDIO_FLAG_SDIOIT
 ((
uöt32_t
)0x00400000)

	)

393 
	#SDIO_FLAG_CEATAEND
 ((
uöt32_t
)0x00800000)

	)

394 
	#IS_SDIO_FLAG
(
FLAG
Ë(((FLAGË=
SDIO_FLAG_CCRCFAIL
) || \

395 ((
FLAG
Ë=
SDIO_FLAG_DCRCFAIL
) || \

396 ((
FLAG
Ë=
SDIO_FLAG_CTIMEOUT
) || \

397 ((
FLAG
Ë=
SDIO_FLAG_DTIMEOUT
) || \

398 ((
FLAG
Ë=
SDIO_FLAG_TXUNDERR
) || \

399 ((
FLAG
Ë=
SDIO_FLAG_RXOVERR
) || \

400 ((
FLAG
Ë=
SDIO_FLAG_CMDREND
) || \

401 ((
FLAG
Ë=
SDIO_FLAG_CMDSENT
) || \

402 ((
FLAG
Ë=
SDIO_FLAG_DATAEND
) || \

403 ((
FLAG
Ë=
SDIO_FLAG_STBITERR
) || \

404 ((
FLAG
Ë=
SDIO_FLAG_DBCKEND
) || \

405 ((
FLAG
Ë=
SDIO_FLAG_CMDACT
) || \

406 ((
FLAG
Ë=
SDIO_FLAG_TXACT
) || \

407 ((
FLAG
Ë=
SDIO_FLAG_RXACT
) || \

408 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOHE
) || \

409 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOHF
) || \

410 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOF
) || \

411 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOF
) || \

412 ((
FLAG
Ë=
SDIO_FLAG_TXFIFOE
) || \

413 ((
FLAG
Ë=
SDIO_FLAG_RXFIFOE
) || \

414 ((
FLAG
Ë=
SDIO_FLAG_TXDAVL
) || \

415 ((
FLAG
Ë=
SDIO_FLAG_RXDAVL
) || \

416 ((
FLAG
Ë=
SDIO_FLAG_SDIOIT
) || \

417 ((
FLAG
Ë=
SDIO_FLAG_CEATAEND
))

	)

419 
	#IS_SDIO_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((FLAGË!(uöt32_t)0x00))

	)

421 
	#IS_SDIO_GET_IT
(
IT
Ë(((ITË=
SDIO_IT_CCRCFAIL
) || \

422 ((
IT
Ë=
SDIO_IT_DCRCFAIL
) || \

423 ((
IT
Ë=
SDIO_IT_CTIMEOUT
) || \

424 ((
IT
Ë=
SDIO_IT_DTIMEOUT
) || \

425 ((
IT
Ë=
SDIO_IT_TXUNDERR
) || \

426 ((
IT
Ë=
SDIO_IT_RXOVERR
) || \

427 ((
IT
Ë=
SDIO_IT_CMDREND
) || \

428 ((
IT
Ë=
SDIO_IT_CMDSENT
) || \

429 ((
IT
Ë=
SDIO_IT_DATAEND
) || \

430 ((
IT
Ë=
SDIO_IT_STBITERR
) || \

431 ((
IT
Ë=
SDIO_IT_DBCKEND
) || \

432 ((
IT
Ë=
SDIO_IT_CMDACT
) || \

433 ((
IT
Ë=
SDIO_IT_TXACT
) || \

434 ((
IT
Ë=
SDIO_IT_RXACT
) || \

435 ((
IT
Ë=
SDIO_IT_TXFIFOHE
) || \

436 ((
IT
Ë=
SDIO_IT_RXFIFOHF
) || \

437 ((
IT
Ë=
SDIO_IT_TXFIFOF
) || \

438 ((
IT
Ë=
SDIO_IT_RXFIFOF
) || \

439 ((
IT
Ë=
SDIO_IT_TXFIFOE
) || \

440 ((
IT
Ë=
SDIO_IT_RXFIFOE
) || \

441 ((
IT
Ë=
SDIO_IT_TXDAVL
) || \

442 ((
IT
Ë=
SDIO_IT_RXDAVL
) || \

443 ((
IT
Ë=
SDIO_IT_SDIOIT
) || \

444 ((
IT
Ë=
SDIO_IT_CEATAEND
))

	)

446 
	#IS_SDIO_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFF3FF800Ë=0x00Ë&& ((ITË!(uöt32_t)0x00))

	)

456 
	#SDIO_RódWaôMode_CLK
 ((
uöt32_t
)0x00000000)

	)

457 
	#SDIO_RódWaôMode_DATA2
 ((
uöt32_t
)0x00000001)

	)

458 
	#IS_SDIO_READWAIT_MODE
(
MODE
Ë(((MODEË=
SDIO_RódWaôMode_CLK
) || \

459 ((
MODE
Ë=
SDIO_RódWaôMode_DATA2
))

	)

471 
SDIO_DeInô
();

474 
SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

475 
SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
);

476 
SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

477 
SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
);

478 
uöt32_t
 
SDIO_GëPowîSèã
();

481 
SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
);

482 
SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
);

483 
uöt8_t
 
SDIO_GëComm™dRe•⁄£
();

484 
uöt32_t
 
SDIO_GëRe•⁄£
(uöt32_à
SDIO_RESP
);

487 
SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

488 
SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
);

489 
uöt32_t
 
SDIO_GëD©aCou¡î
();

490 
uöt32_t
 
SDIO_RódD©a
();

491 
SDIO_WrôeD©a
(
uöt32_t
 
D©a
);

492 
uöt32_t
 
SDIO_GëFIFOCou¡
();

495 
SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

496 
SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
);

497 
SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
);

498 
SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
);

499 
SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

502 
SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

503 
SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

504 
SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

507 
SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

510 
SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

511 
FœgSètus
 
SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
);

512 
SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
);

513 
ITSètus
 
SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
);

514 
SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
);

516 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_spi.h

24 #i‚de‡
__STM32F4xx_SPI_H


25 
	#__STM32F4xx_SPI_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

50 
uöt16_t
 
SPI_Dúe˘i⁄
;

53 
uöt16_t
 
SPI_Mode
;

56 
uöt16_t
 
SPI_D©aSize
;

59 
uöt16_t
 
SPI_CPOL
;

62 
uöt16_t
 
SPI_CPHA
;

65 
uöt16_t
 
SPI_NSS
;

69 
uöt16_t
 
SPI_BaudR©ePªsˇÀr
;

75 
uöt16_t
 
SPI_Fú°Bô
;

78 
uöt16_t
 
SPI_CRCPﬁynomül
;

79 }
	tSPI_InôTy≥Def
;

88 
uöt16_t
 
I2S_Mode
;

91 
uöt16_t
 
I2S_Sènd¨d
;

94 
uöt16_t
 
I2S_D©aF‹m©
;

97 
uöt16_t
 
I2S_MCLKOuçut
;

100 
uöt32_t
 
I2S_AudioFªq
;

103 
uöt16_t
 
I2S_CPOL
;

105 }
	tI2S_InôTy≥Def
;

113 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI1
) || \

114 ((
PERIPH
Ë=
SPI2
) || \

115 ((
PERIPH
Ë=
SPI3
))

	)

117 
	#IS_SPI_ALL_PERIPH_EXT
(
PERIPH
Ë(((PERIPHË=
SPI1
) || \

118 ((
PERIPH
Ë=
SPI2
) || \

119 ((
PERIPH
Ë=
SPI3
) || \

120 ((
PERIPH
Ë=
I2S2ext
) || \

121 ((
PERIPH
Ë=
I2S3ext
))

	)

123 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI2
) || \

124 ((
PERIPH
Ë=
SPI3
))

	)

126 
	#IS_SPI_23_PERIPH_EXT
(
PERIPH
Ë(((PERIPHË=
SPI2
) || \

127 ((
PERIPH
Ë=
SPI3
) || \

128 ((
PERIPH
Ë=
I2S2ext
) || \

129 ((
PERIPH
Ë=
I2S3ext
))

	)

131 
	#IS_I2S_EXT_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2S2ext
) || \

132 ((
PERIPH
Ë=
I2S3ext
))

	)

139 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

140 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

141 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

142 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

143 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
) || \

144 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

145 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

146 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

	)

155 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

156 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

157 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
) || \

158 ((
MODE
Ë=
SPI_Mode_Sœve
))

	)

167 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0800)

	)

168 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0000)

	)

169 
	#IS_SPI_DATASIZE
(
DATASIZE
Ë(((DATASIZEË=
SPI_D©aSize_16b
) || \

170 ((
DATASIZE
Ë=
SPI_D©aSize_8b
))

	)

179 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

180 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

181 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
) || \

182 ((
CPOL
Ë=
SPI_CPOL_High
))

	)

191 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

192 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

193 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
) || \

194 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

	)

203 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

204 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

205 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
) || \

206 ((
NSS
Ë=
SPI_NSS_H¨d
))

	)

215 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

216 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

217 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

218 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

219 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

220 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

221 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

222 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

223 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
) || \

224 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

225 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

226 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

227 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

228 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

229 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

230 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

	)

239 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

240 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

241 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
) || \

242 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

	)

251 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

252 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

253 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

254 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

255 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
) || \

256 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

257 ((
MODE
Ë=
I2S_Mode_Ma°îTx
)|| \

258 ((
MODE
Ë=
I2S_Mode_Ma°îRx
))

	)

268 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

269 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

270 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

271 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

272 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

273 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
) || \

274 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

275 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

276 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

277 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

	)

286 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

287 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

288 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

289 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

290 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
) || \

291 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

292 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

293 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

	)

302 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

303 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

304 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
) || \

305 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

	)

314 
	#I2S_AudioFªq_192k
 ((
uöt32_t
)192000)

	)

315 
	#I2S_AudioFªq_96k
 ((
uöt32_t
)96000)

	)

316 
	#I2S_AudioFªq_48k
 ((
uöt32_t
)48000)

	)

317 
	#I2S_AudioFªq_44k
 ((
uöt32_t
)44100)

	)

318 
	#I2S_AudioFªq_32k
 ((
uöt32_t
)32000)

	)

319 
	#I2S_AudioFªq_22k
 ((
uöt32_t
)22050)

	)

320 
	#I2S_AudioFªq_16k
 ((
uöt32_t
)16000)

	)

321 
	#I2S_AudioFªq_11k
 ((
uöt32_t
)11025)

	)

322 
	#I2S_AudioFªq_8k
 ((
uöt32_t
)8000)

	)

323 
	#I2S_AudioFªq_DeÁu…
 ((
uöt32_t
)2)

	)

325 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë((((FREQË>
I2S_AudioFªq_8k
) && \

326 ((
FREQ
Ë<
I2S_AudioFªq_192k
)) || \

327 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

	)

336 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

337 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

338 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
) || \

339 ((
CPOL
Ë=
I2S_CPOL_High
))

	)

348 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

349 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

350 
	#IS_SPI_I2S_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((DMAREQË!0x00))

	)

359 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

360 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

361 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
) || \

362 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

	)

371 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

372 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

373 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

382 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

383 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

384 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
) || \

385 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

	)

394 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

395 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

396 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

397 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

398 
	#SPI_I2S_IT_TIFRFE
 ((
uöt8_t
)0x58)

	)

400 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
) || \

401 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

402 ((
IT
Ë=
SPI_I2S_IT_ERR
))

	)

404 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

405 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

406 
	#SPI_IT_CRCERR
 ((
uöt8_t
)0x54)

	)

408 
	#IS_SPI_I2S_CLEAR_IT
(
IT
Ë(((ITË=
SPI_IT_CRCERR
))

	)

410 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
)|| ((ITË=
SPI_I2S_IT_TXE
) || \

411 ((
IT
Ë=
SPI_IT_CRCERR
Ë|| ((ITË=
SPI_IT_MODF
) || \

412 ((
IT
Ë=
SPI_I2S_IT_OVR
Ë|| ((ITË=
I2S_IT_UDR
) ||\

413 ((
IT
Ë=
SPI_I2S_IT_TIFRFE
))

	)

422 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

423 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

424 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

425 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

426 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

427 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

428 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

429 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

430 
	#SPI_I2S_FLAG_TIFRFE
 ((
uöt16_t
)0x0100)

	)

432 
	#IS_SPI_I2S_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

433 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
) || \

434 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

435 ((
FLAG
Ë=
I2S_FLAG_UDR
Ë|| ((FLAGË=
I2S_FLAG_CHSIDE
) || \

436 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
)|| \

437 ((
FLAG
Ë=
SPI_I2S_FLAG_TIFRFE
))

	)

446 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

455 
	#SPI_DMAReq_Tx
 
SPI_I2S_DMAReq_Tx


	)

456 
	#SPI_DMAReq_Rx
 
SPI_I2S_DMAReq_Rx


	)

457 
	#SPI_IT_TXE
 
SPI_I2S_IT_TXE


	)

458 
	#SPI_IT_RXNE
 
SPI_I2S_IT_RXNE


	)

459 
	#SPI_IT_ERR
 
SPI_I2S_IT_ERR


	)

460 
	#SPI_IT_OVR
 
SPI_I2S_IT_OVR


	)

461 
	#SPI_FLAG_RXNE
 
SPI_I2S_FLAG_RXNE


	)

462 
	#SPI_FLAG_TXE
 
SPI_I2S_FLAG_TXE


	)

463 
	#SPI_FLAG_OVR
 
SPI_I2S_FLAG_OVR


	)

464 
	#SPI_FLAG_BSY
 
SPI_I2S_FLAG_BSY


	)

465 
	#SPI_DeInô
 
SPI_I2S_DeInô


	)

466 
	#SPI_ITC⁄fig
 
SPI_I2S_ITC⁄fig


	)

467 
	#SPI_DMACmd
 
SPI_I2S_DMACmd


	)

468 
	#SPI_SídD©a
 
SPI_I2S_SídD©a


	)

469 
	#SPI_Re˚iveD©a
 
SPI_I2S_Re˚iveD©a


	)

470 
	#SPI_GëFœgSètus
 
SPI_I2S_GëFœgSètus


	)

471 
	#SPI_CÀ¨Fœg
 
SPI_I2S_CÀ¨Fœg


	)

472 
	#SPI_GëITSètus
 
SPI_I2S_GëITSètus


	)

473 
	#SPI_CÀ¨ITPídögBô
 
SPI_I2S_CÀ¨ITPídögBô


	)

486 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

489 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

490 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

491 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

492 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

493 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

494 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

495 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

496 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

497 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

498 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

499 
SPI_TIModeCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

501 
I2S_FuŒDu∂exC⁄fig
(
SPI_Ty≥Def
* 
I2Sxext
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

504 
SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

505 
uöt16_t
 
SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
);

508 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

509 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

510 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

511 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

514 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

517 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

518 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

519 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

520 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

521 
SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

523 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_syscfg.h

24 #i‚de‡
__STM32F4xx_SYSCFG_H


25 
	#__STM32F4xx_SYSCFG_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

52 
	#EXTI_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

53 
	#EXTI_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

54 
	#EXTI_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

55 
	#EXTI_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

56 
	#EXTI_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

57 
	#EXTI_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

58 
	#EXTI_P‹tSour˚GPIOG
 ((
uöt8_t
)0x06)

	)

59 
	#EXTI_P‹tSour˚GPIOH
 ((
uöt8_t
)0x07)

	)

60 
	#EXTI_P‹tSour˚GPIOI
 ((
uöt8_t
)0x08)

	)

62 
	#IS_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
EXTI_P‹tSour˚GPIOA
) || \

63 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOB
) || \

64 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOC
) || \

65 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOD
) || \

66 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOE
) || \

67 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOF
) || \

68 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOG
) || \

69 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOH
) || \

70 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOI
))

	)

79 
	#EXTI_PöSour˚0
 ((
uöt8_t
)0x00)

	)

80 
	#EXTI_PöSour˚1
 ((
uöt8_t
)0x01)

	)

81 
	#EXTI_PöSour˚2
 ((
uöt8_t
)0x02)

	)

82 
	#EXTI_PöSour˚3
 ((
uöt8_t
)0x03)

	)

83 
	#EXTI_PöSour˚4
 ((
uöt8_t
)0x04)

	)

84 
	#EXTI_PöSour˚5
 ((
uöt8_t
)0x05)

	)

85 
	#EXTI_PöSour˚6
 ((
uöt8_t
)0x06)

	)

86 
	#EXTI_PöSour˚7
 ((
uöt8_t
)0x07)

	)

87 
	#EXTI_PöSour˚8
 ((
uöt8_t
)0x08)

	)

88 
	#EXTI_PöSour˚9
 ((
uöt8_t
)0x09)

	)

89 
	#EXTI_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

90 
	#EXTI_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

91 
	#EXTI_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

92 
	#EXTI_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

93 
	#EXTI_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

94 
	#EXTI_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

95 
	#IS_EXTI_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
EXTI_PöSour˚0
) || \

96 ((
PINSOURCE
Ë=
EXTI_PöSour˚1
) || \

97 ((
PINSOURCE
Ë=
EXTI_PöSour˚2
) || \

98 ((
PINSOURCE
Ë=
EXTI_PöSour˚3
) || \

99 ((
PINSOURCE
Ë=
EXTI_PöSour˚4
) || \

100 ((
PINSOURCE
Ë=
EXTI_PöSour˚5
) || \

101 ((
PINSOURCE
Ë=
EXTI_PöSour˚6
) || \

102 ((
PINSOURCE
Ë=
EXTI_PöSour˚7
) || \

103 ((
PINSOURCE
Ë=
EXTI_PöSour˚8
) || \

104 ((
PINSOURCE
Ë=
EXTI_PöSour˚9
) || \

105 ((
PINSOURCE
Ë=
EXTI_PöSour˚10
) || \

106 ((
PINSOURCE
Ë=
EXTI_PöSour˚11
) || \

107 ((
PINSOURCE
Ë=
EXTI_PöSour˚12
) || \

108 ((
PINSOURCE
Ë=
EXTI_PöSour˚13
) || \

109 ((
PINSOURCE
Ë=
EXTI_PöSour˚14
) || \

110 ((
PINSOURCE
Ë=
EXTI_PöSour˚15
))

	)

119 
	#SYSCFG_Mem‹yRem≠_Fœsh
 ((
uöt8_t
)0x00)

	)

120 
	#SYSCFG_Mem‹yRem≠_Sy°emFœsh
 ((
uöt8_t
)0x01)

	)

121 
	#SYSCFG_Mem‹yRem≠_FSMC
 ((
uöt8_t
)0x02)

	)

122 
	#SYSCFG_Mem‹yRem≠_SRAM
 ((
uöt8_t
)0x03)

	)

124 
	#IS_SYSCFG_MEMORY_REMAP_CONFING
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
) || \

125 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emFœsh
) || \

126 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
) || \

127 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_FSMC
))

	)

136 
	#SYSCFG_ETH_MedüI¡îÁ˚_MII
 ((
uöt32_t
)0x00000000)

	)

137 
	#SYSCFG_ETH_MedüI¡îÁ˚_RMII
 ((
uöt32_t
)0x00000001)

	)

139 
	#IS_SYSCFG_ETH_MEDIA_INTERFACE
(
INTERFACE
Ë(((INTERFACEË=
SYSCFG_ETH_MedüI¡îÁ˚_MII
) || \

140 ((
INTERFACE
Ë=
SYSCFG_ETH_MedüI¡îÁ˚_RMII
))

	)

152 
SYSCFG_DeInô
();

153 
SYSCFG_Mem‹yRem≠C⁄fig
(
uöt8_t
 
SYSCFG_Mem‹yRem≠
);

154 
SYSCFG_EXTILöeC⁄fig
(
uöt8_t
 
EXTI_P‹tSour˚GPIOx
, uöt8_à
EXTI_PöSour˚x
);

155 
SYSCFG_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
SYSCFG_ETH_MedüI¡îÁ˚
);

156 
SYSCFG_Com≥nßti⁄CñlCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

157 
FœgSètus
 
SYSCFG_GëCom≥nßti⁄CñlSètus
();

159 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_tim.h

24 #i‚de‡
__STM32F4xx_TIM_H


25 
	#__STM32F4xx_TIM_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

51 
uöt16_t
 
TIM_PªsˇÀr
;

54 
uöt16_t
 
TIM_Cou¡îMode
;

57 
uöt32_t
 
TIM_Pîiod
;

61 
uöt16_t
 
TIM_ClockDivisi⁄
;

64 
uöt8_t
 
TIM_Rïëôi⁄Cou¡î
;

72 } 
	tTIM_TimeBa£InôTy≥Def
;

80 
uöt16_t
 
TIM_OCMode
;

83 
uöt16_t
 
TIM_OuçutSèã
;

86 
uöt16_t
 
TIM_OuçutNSèã
;

90 
uöt32_t
 
TIM_Pul£
;

93 
uöt16_t
 
TIM_OCPﬁ¨ôy
;

96 
uöt16_t
 
TIM_OCNPﬁ¨ôy
;

100 
uöt16_t
 
TIM_OCIdÀSèã
;

104 
uöt16_t
 
TIM_OCNIdÀSèã
;

107 } 
	tTIM_OCInôTy≥Def
;

116 
uöt16_t
 
TIM_Ch™√l
;

119 
uöt16_t
 
TIM_ICPﬁ¨ôy
;

122 
uöt16_t
 
TIM_ICSñe˘i⁄
;

125 
uöt16_t
 
TIM_ICPªsˇÀr
;

128 
uöt16_t
 
TIM_ICFûãr
;

130 } 
	tTIM_ICInôTy≥Def
;

140 
uöt16_t
 
TIM_OSSRSèã
;

143 
uöt16_t
 
TIM_OSSISèã
;

146 
uöt16_t
 
TIM_LOCKLevñ
;

149 
uöt16_t
 
TIM_DódTime
;

153 
uöt16_t
 
TIM_Bªak
;

156 
uöt16_t
 
TIM_BªakPﬁ¨ôy
;

159 
uöt16_t
 
TIM_Autom©icOuçut
;

161 } 
	tTIM_BDTRInôTy≥Def
;

169 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

170 ((
PERIPH
Ë=
TIM2
) || \

171 ((
PERIPH
Ë=
TIM3
) || \

172 ((
PERIPH
Ë=
TIM4
) || \

173 ((
PERIPH
Ë=
TIM5
) || \

174 ((
PERIPH
Ë=
TIM6
) || \

175 ((
PERIPH
Ë=
TIM7
) || \

176 ((
PERIPH
Ë=
TIM8
) || \

177 ((
PERIPH
Ë=
TIM9
) || \

178 ((
PERIPH
Ë=
TIM10
) || \

179 ((
PERIPH
Ë=
TIM11
) || \

180 ((
PERIPH
Ë=
TIM12
) || \

181 (((
PERIPH
Ë=
TIM13
) || \

182 ((
PERIPH
Ë=
TIM14
)))

	)

184 
	#IS_TIM_LIST1_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

185 ((
PERIPH
Ë=
TIM2
) || \

186 ((
PERIPH
Ë=
TIM3
) || \

187 ((
PERIPH
Ë=
TIM4
) || \

188 ((
PERIPH
Ë=
TIM5
) || \

189 ((
PERIPH
Ë=
TIM8
) || \

190 ((
PERIPH
Ë=
TIM9
) || \

191 ((
PERIPH
Ë=
TIM10
) || \

192 ((
PERIPH
Ë=
TIM11
) || \

193 ((
PERIPH
Ë=
TIM12
) || \

194 ((
PERIPH
Ë=
TIM13
) || \

195 ((
PERIPH
Ë=
TIM14
))

	)

198 
	#IS_TIM_LIST2_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

199 ((
PERIPH
Ë=
TIM2
) || \

200 ((
PERIPH
Ë=
TIM3
) || \

201 ((
PERIPH
Ë=
TIM4
) || \

202 ((
PERIPH
Ë=
TIM5
) || \

203 ((
PERIPH
Ë=
TIM8
) || \

204 ((
PERIPH
Ë=
TIM9
) || \

205 ((
PERIPH
Ë=
TIM12
))

	)

207 
	#IS_TIM_LIST3_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

208 ((
PERIPH
Ë=
TIM2
) || \

209 ((
PERIPH
Ë=
TIM3
) || \

210 ((
PERIPH
Ë=
TIM4
) || \

211 ((
PERIPH
Ë=
TIM5
) || \

212 ((
PERIPH
Ë=
TIM8
))

	)

214 
	#IS_TIM_LIST4_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

215 ((
PERIPH
Ë=
TIM8
))

	)

217 
	#IS_TIM_LIST5_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
) || \

218 ((
PERIPH
Ë=
TIM2
) || \

219 ((
PERIPH
Ë=
TIM3
) || \

220 ((
PERIPH
Ë=
TIM4
) || \

221 ((
PERIPH
Ë=
TIM5
) || \

222 ((
PERIPH
Ë=
TIM6
) || \

223 ((
PERIPH
Ë=
TIM7
) || \

224 ((
PERIPH
Ë=
TIM8
))

	)

226 
	#IS_TIM_LIST6_PERIPH
(
TIMx
)(((TIMxË=
TIM2
) || \

227 ((
TIMx
Ë=
TIM5
) || \

228 ((
TIMx
Ë=
TIM11
))

	)

234 
	#TIM_OCMode_Timög
 ((
uöt16_t
)0x0000)

	)

235 
	#TIM_OCMode_A˘ive
 ((
uöt16_t
)0x0010)

	)

236 
	#TIM_OCMode_I«˘ive
 ((
uöt16_t
)0x0020)

	)

237 
	#TIM_OCMode_ToggÀ
 ((
uöt16_t
)0x0030)

	)

238 
	#TIM_OCMode_PWM1
 ((
uöt16_t
)0x0060)

	)

239 
	#TIM_OCMode_PWM2
 ((
uöt16_t
)0x0070)

	)

240 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

241 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

242 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

243 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

244 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

245 ((
MODE
Ë=
TIM_OCMode_PWM2
))

	)

246 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
) || \

247 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

248 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

249 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

250 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

251 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

252 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

253 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

262 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

263 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

264 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
) || \

265 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

	)

274 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

275 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

276 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

277 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

279 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

280 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

281 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

282 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

	)

284 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

285 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

	)

286 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
) || \

287 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

288 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

	)

297 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

298 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

299 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

300 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
) || \

301 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

302 ((
DIV
Ë=
TIM_CKD_DIV4
))

	)

311 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

312 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

313 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

314 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

315 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

316 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
) || \

317 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

318 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

319 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

320 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

	)

329 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

330 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

331 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
) || \

332 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

	)

341 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

342 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

343 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
) || \

344 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

	)

353 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

354 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

355 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
) || \

356 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

	)

365 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

366 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

367 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
) || \

368 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

	)

377 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

378 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

379 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
) || \

380 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

	)

389 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

390 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

391 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
) || \

392 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

	)

401 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

402 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

403 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
) || \

404 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

	)

413 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

414 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

415 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
) || \

416 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

	)

425 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

426 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

427 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
) || \

428 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

	)

437 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

438 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

439 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

440 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

441 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
) || \

442 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

443 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

444 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

	)

453 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

454 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

455 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
) || \

456 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

	)

465 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

466 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

467 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
) || \

468 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

	)

477 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

478 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

479 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
) || \

480 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

	)

489 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

490 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

491 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
) || \

492 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

	)

501 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

502 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

503 
	#TIM_ICPﬁ¨ôy_BŸhEdge
 ((
uöt16_t
)0x000A)

	)

504 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
) || \

505 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
)|| \

506 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_BŸhEdge
))

	)

515 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001Ë

	)

517 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002Ë

	)

519 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003Ë

	)

520 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
) || \

521 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

522 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

	)

531 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000Ë

	)

532 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004Ë

	)

533 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008Ë

	)

534 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000CË

	)

535 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
) || \

536 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

537 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

538 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

	)

547 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

548 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

549 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

550 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

551 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

552 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

553 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

554 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

555 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

557 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
) || \

558 ((
IT
Ë=
TIM_IT_CC1
) || \

559 ((
IT
Ë=
TIM_IT_CC2
) || \

560 ((
IT
Ë=
TIM_IT_CC3
) || \

561 ((
IT
Ë=
TIM_IT_CC4
) || \

562 ((
IT
Ë=
TIM_IT_COM
) || \

563 ((
IT
Ë=
TIM_IT_Triggî
) || \

564 ((
IT
Ë=
TIM_IT_Bªak
))

	)

573 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

574 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

575 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

576 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

577 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

578 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

579 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

580 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

581 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

582 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

583 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

584 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

585 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

586 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

587 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

588 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

589 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

590 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

591 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

592 
	#TIM_DMABa£_OR
 ((
uöt16_t
)0x0013)

	)

593 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
) || \

594 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

595 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

596 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

597 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

598 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

599 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

600 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

601 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

602 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

603 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

604 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

605 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

606 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

607 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

608 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

609 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

610 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

611 ((
BASE
Ë=
TIM_DMABa£_DCR
) || \

612 ((
BASE
Ë=
TIM_DMABa£_OR
))

	)

621 
	#TIM_DMABur°Lígth_1Tøns„r
 ((
uöt16_t
)0x0000)

	)

622 
	#TIM_DMABur°Lígth_2Tøns„rs
 ((
uöt16_t
)0x0100)

	)

623 
	#TIM_DMABur°Lígth_3Tøns„rs
 ((
uöt16_t
)0x0200)

	)

624 
	#TIM_DMABur°Lígth_4Tøns„rs
 ((
uöt16_t
)0x0300)

	)

625 
	#TIM_DMABur°Lígth_5Tøns„rs
 ((
uöt16_t
)0x0400)

	)

626 
	#TIM_DMABur°Lígth_6Tøns„rs
 ((
uöt16_t
)0x0500)

	)

627 
	#TIM_DMABur°Lígth_7Tøns„rs
 ((
uöt16_t
)0x0600)

	)

628 
	#TIM_DMABur°Lígth_8Tøns„rs
 ((
uöt16_t
)0x0700)

	)

629 
	#TIM_DMABur°Lígth_9Tøns„rs
 ((
uöt16_t
)0x0800)

	)

630 
	#TIM_DMABur°Lígth_10Tøns„rs
 ((
uöt16_t
)0x0900)

	)

631 
	#TIM_DMABur°Lígth_11Tøns„rs
 ((
uöt16_t
)0x0A00)

	)

632 
	#TIM_DMABur°Lígth_12Tøns„rs
 ((
uöt16_t
)0x0B00)

	)

633 
	#TIM_DMABur°Lígth_13Tøns„rs
 ((
uöt16_t
)0x0C00)

	)

634 
	#TIM_DMABur°Lígth_14Tøns„rs
 ((
uöt16_t
)0x0D00)

	)

635 
	#TIM_DMABur°Lígth_15Tøns„rs
 ((
uöt16_t
)0x0E00)

	)

636 
	#TIM_DMABur°Lígth_16Tøns„rs
 ((
uöt16_t
)0x0F00)

	)

637 
	#TIM_DMABur°Lígth_17Tøns„rs
 ((
uöt16_t
)0x1000)

	)

638 
	#TIM_DMABur°Lígth_18Tøns„rs
 ((
uöt16_t
)0x1100)

	)

639 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Tøns„r
) || \

640 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Tøns„rs
) || \

641 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Tøns„rs
) || \

642 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Tøns„rs
) || \

643 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Tøns„rs
) || \

644 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Tøns„rs
) || \

645 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Tøns„rs
) || \

646 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Tøns„rs
) || \

647 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Tøns„rs
) || \

648 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Tøns„rs
) || \

649 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Tøns„rs
) || \

650 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Tøns„rs
) || \

651 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Tøns„rs
) || \

652 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Tøns„rs
) || \

653 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Tøns„rs
) || \

654 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Tøns„rs
) || \

655 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Tøns„rs
) || \

656 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Tøns„rs
))

	)

665 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

666 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

667 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

668 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

669 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

670 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

671 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

672 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

682 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

683 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

684 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

685 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

686 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
) || \

687 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

688 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

689 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

	)

698 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

699 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

700 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

701 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

702 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

703 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

704 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

705 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

706 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

707 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

708 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

709 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

710 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

711 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

712 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

713 ((
SELECTION
Ë=
TIM_TS_ETRF
))

	)

714 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
) || \

715 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

716 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

717 ((
SELECTION
Ë=
TIM_TS_ITR3
))

	)

726 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

727 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

728 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

737 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

738 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

739 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
) || \

740 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

	)

749 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

750 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

751 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
) || \

752 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

	)

761 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

762 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

763 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

764 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

	)

773 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

774 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

775 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

776 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
) || \

777 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

778 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

	)

788 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

789 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

790 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

791 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

792 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

793 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

794 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

795 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

796 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

806 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000Ë

	)

809 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001Ë

	)

810 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
) || \

811 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

	)

820 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

821 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

822 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
) || \

823 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

	)

832 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

833 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

834 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
) || \

835 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

	)

845 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

846 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

847 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
) || \

848 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

	)

857 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

858 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

859 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

860 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

861 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

862 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

863 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

864 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

865 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
) || \

866 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

867 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

868 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

869 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

870 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

871 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

872 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

	)

881 
	#TIM_SœveMode_Re£t
 ((
uöt16_t
)0x0004)

	)

882 
	#TIM_SœveMode_G©ed
 ((
uöt16_t
)0x0005)

	)

883 
	#TIM_SœveMode_Triggî
 ((
uöt16_t
)0x0006)

	)

884 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt16_t
)0x0007)

	)

885 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
) || \

886 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

887 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

888 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
))

	)

897 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

898 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

899 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
) || \

900 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

	)

908 
	#TIM2_TIM8_TRGO
 ((
uöt16_t
)0x0000)

	)

909 
	#TIM2_ETH_PTP
 ((
uöt16_t
)0x0400)

	)

910 
	#TIM2_USBFS_SOF
 ((
uöt16_t
)0x0800)

	)

911 
	#TIM2_USBHS_SOF
 ((
uöt16_t
)0x0C00)

	)

913 
	#TIM5_GPIO
 ((
uöt16_t
)0x0000)

	)

914 
	#TIM5_LSI
 ((
uöt16_t
)0x0040)

	)

915 
	#TIM5_LSE
 ((
uöt16_t
)0x0080)

	)

916 
	#TIM5_RTC
 ((
uöt16_t
)0x00C0)

	)

918 
	#TIM11_GPIO
 ((
uöt16_t
)0x0000)

	)

919 
	#TIM11_HSE
 ((
uöt16_t
)0x0002)

	)

921 
	#IS_TIM_REMAP
(
TIM_REMAP
Ë(((TIM_REMAPË=
TIM2_TIM8_TRGO
)||\

922 ((
TIM_REMAP
Ë=
TIM2_ETH_PTP
)||\

923 ((
TIM_REMAP
Ë=
TIM2_USBFS_SOF
)||\

924 ((
TIM_REMAP
Ë=
TIM2_USBHS_SOF
)||\

925 ((
TIM_REMAP
Ë=
TIM5_GPIO
)||\

926 ((
TIM_REMAP
Ë=
TIM5_LSI
)||\

927 ((
TIM_REMAP
Ë=
TIM5_LSE
)||\

928 ((
TIM_REMAP
Ë=
TIM5_RTC
)||\

929 ((
TIM_REMAP
Ë=
TIM11_GPIO
)||\

930 ((
TIM_REMAP
Ë=
TIM11_HSE
))

	)

939 
	#TIM_FLAG_Upd©e
 ((
uöt16_t
)0x0001)

	)

940 
	#TIM_FLAG_CC1
 ((
uöt16_t
)0x0002)

	)

941 
	#TIM_FLAG_CC2
 ((
uöt16_t
)0x0004)

	)

942 
	#TIM_FLAG_CC3
 ((
uöt16_t
)0x0008)

	)

943 
	#TIM_FLAG_CC4
 ((
uöt16_t
)0x0010)

	)

944 
	#TIM_FLAG_COM
 ((
uöt16_t
)0x0020)

	)

945 
	#TIM_FLAG_Triggî
 ((
uöt16_t
)0x0040)

	)

946 
	#TIM_FLAG_Bªak
 ((
uöt16_t
)0x0080)

	)

947 
	#TIM_FLAG_CC1OF
 ((
uöt16_t
)0x0200)

	)

948 
	#TIM_FLAG_CC2OF
 ((
uöt16_t
)0x0400)

	)

949 
	#TIM_FLAG_CC3OF
 ((
uöt16_t
)0x0800)

	)

950 
	#TIM_FLAG_CC4OF
 ((
uöt16_t
)0x1000)

	)

951 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
) || \

952 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

953 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

954 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

955 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

956 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

957 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

958 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

959 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

960 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

961 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

962 ((
FLAG
Ë=
TIM_FLAG_CC4OF
))

	)

972 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

981 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

990 
	#TIM_DMABur°Lígth_1Byã
 
TIM_DMABur°Lígth_1Tøns„r


	)

991 
	#TIM_DMABur°Lígth_2Byãs
 
TIM_DMABur°Lígth_2Tøns„rs


	)

992 
	#TIM_DMABur°Lígth_3Byãs
 
TIM_DMABur°Lígth_3Tøns„rs


	)

993 
	#TIM_DMABur°Lígth_4Byãs
 
TIM_DMABur°Lígth_4Tøns„rs


	)

994 
	#TIM_DMABur°Lígth_5Byãs
 
TIM_DMABur°Lígth_5Tøns„rs


	)

995 
	#TIM_DMABur°Lígth_6Byãs
 
TIM_DMABur°Lígth_6Tøns„rs


	)

996 
	#TIM_DMABur°Lígth_7Byãs
 
TIM_DMABur°Lígth_7Tøns„rs


	)

997 
	#TIM_DMABur°Lígth_8Byãs
 
TIM_DMABur°Lígth_8Tøns„rs


	)

998 
	#TIM_DMABur°Lígth_9Byãs
 
TIM_DMABur°Lígth_9Tøns„rs


	)

999 
	#TIM_DMABur°Lígth_10Byãs
 
TIM_DMABur°Lígth_10Tøns„rs


	)

1000 
	#TIM_DMABur°Lígth_11Byãs
 
TIM_DMABur°Lígth_11Tøns„rs


	)

1001 
	#TIM_DMABur°Lígth_12Byãs
 
TIM_DMABur°Lígth_12Tøns„rs


	)

1002 
	#TIM_DMABur°Lígth_13Byãs
 
TIM_DMABur°Lígth_13Tøns„rs


	)

1003 
	#TIM_DMABur°Lígth_14Byãs
 
TIM_DMABur°Lígth_14Tøns„rs


	)

1004 
	#TIM_DMABur°Lígth_15Byãs
 
TIM_DMABur°Lígth_15Tøns„rs


	)

1005 
	#TIM_DMABur°Lígth_16Byãs
 
TIM_DMABur°Lígth_16Tøns„rs


	)

1006 
	#TIM_DMABur°Lígth_17Byãs
 
TIM_DMABur°Lígth_17Tøns„rs


	)

1007 
	#TIM_DMABur°Lígth_18Byãs
 
TIM_DMABur°Lígth_18Tøns„rs


	)

1020 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

1021 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1022 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1023 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

1024 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

1025 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Cou¡î
);

1026 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Aut‹ñﬂd
);

1027 
uöt32_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1028 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1029 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1030 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

1031 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1032 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

1033 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1034 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1037 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1038 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1039 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1040 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1041 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1042 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
);

1043 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª1
);

1044 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª2
);

1045 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª3
);

1046 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª4
);

1047 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1048 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1049 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1050 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1051 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1052 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1053 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1054 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1055 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1056 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1057 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1058 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1059 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1060 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1061 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1062 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1063 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1064 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1065 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1066 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1067 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1068 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1069 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1070 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

1071 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

1074 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1075 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1076 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1077 
uöt32_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1078 
uöt32_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1079 
uöt32_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1080 
uöt32_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1081 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1082 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1083 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1084 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1087 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

1088 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

1089 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1090 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1091 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1094 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1095 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

1096 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1097 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1098 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1099 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1100 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

1101 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1102 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1105 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

1106 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1107 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1108 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

1109 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1110 
uöt16_t
 
ExtTRGFûãr
);

1111 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1112 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

1115 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1116 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

1117 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
);

1118 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1119 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1120 
uöt16_t
 
ExtTRGFûãr
);

1123 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1124 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

1125 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1128 
TIM_Rem≠C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Rem≠
);

1130 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_usart.h

24 #i‚de‡
__STM32F4xx_USART_H


25 
	#__STM32F4xx_USART_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

50 
uöt32_t
 
USART_BaudR©e
;

56 
uöt16_t
 
USART_W‹dLígth
;

59 
uöt16_t
 
USART_St›Bôs
;

62 
uöt16_t
 
USART_P¨ôy
;

69 
uöt16_t
 
USART_Mode
;

72 
uöt16_t
 
USART_H¨dw¨eFlowC⁄åﬁ
;

75 } 
	tUSART_InôTy≥Def
;

84 
uöt16_t
 
USART_Clock
;

87 
uöt16_t
 
USART_CPOL
;

90 
uöt16_t
 
USART_CPHA
;

93 
uöt16_t
 
USART_La°Bô
;

96 } 
	tUSART_ClockInôTy≥Def
;

104 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

105 ((
PERIPH
Ë=
USART2
) || \

106 ((
PERIPH
Ë=
USART3
) || \

107 ((
PERIPH
Ë=
UART4
) || \

108 ((
PERIPH
Ë=
UART5
) || \

109 ((
PERIPH
Ë=
USART6
))

	)

111 
	#IS_USART_1236_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
) || \

112 ((
PERIPH
Ë=
USART2
) || \

113 ((
PERIPH
Ë=
USART3
) || \

114 ((
PERIPH
Ë=
USART6
))

	)

120 
	#USART_W‹dLígth_8b
 ((
uöt16_t
)0x0000)

	)

121 
	#USART_W‹dLígth_9b
 ((
uöt16_t
)0x1000)

	)

123 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
) || \

124 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

	)

133 
	#USART_St›Bôs_1
 ((
uöt16_t
)0x0000)

	)

134 
	#USART_St›Bôs_0_5
 ((
uöt16_t
)0x1000)

	)

135 
	#USART_St›Bôs_2
 ((
uöt16_t
)0x2000)

	)

136 
	#USART_St›Bôs_1_5
 ((
uöt16_t
)0x3000)

	)

137 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
) || \

138 ((
STOPBITS
Ë=
USART_St›Bôs_0_5
) || \

139 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

140 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

	)

149 
	#USART_P¨ôy_No
 ((
uöt16_t
)0x0000)

	)

150 
	#USART_P¨ôy_Eví
 ((
uöt16_t
)0x0400)

	)

151 
	#USART_P¨ôy_Odd
 ((
uöt16_t
)0x0600)

	)

152 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
) || \

153 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

154 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

	)

163 
	#USART_Mode_Rx
 ((
uöt16_t
)0x0004)

	)

164 
	#USART_Mode_Tx
 ((
uöt16_t
)0x0008)

	)

165 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt16_t
)0xFFF3Ë=0x00Ë&& ((MODEË!(uöt16_t)0x00))

	)

173 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt16_t
)0x0000)

	)

174 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 ((
uöt16_t
)0x0100)

	)

175 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 ((
uöt16_t
)0x0200)

	)

176 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 ((
uöt16_t
)0x0300)

	)

177 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

178 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

179 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

180 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

181 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

	)

189 
	#USART_Clock_DißbÀ
 ((
uöt16_t
)0x0000)

	)

190 
	#USART_Clock_E«bÀ
 ((
uöt16_t
)0x0800)

	)

191 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
) || \

192 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

	)

201 
	#USART_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

202 
	#USART_CPOL_High
 ((
uöt16_t
)0x0400)

	)

203 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

213 
	#USART_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

214 
	#USART_CPHA_2Edge
 ((
uöt16_t
)0x0200)

	)

215 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

225 
	#USART_La°Bô_DißbÀ
 ((
uöt16_t
)0x0000)

	)

226 
	#USART_La°Bô_E«bÀ
 ((
uöt16_t
)0x0100)

	)

227 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
) || \

228 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

	)

237 
	#USART_IT_PE
 ((
uöt16_t
)0x0028)

	)

238 
	#USART_IT_TXE
 ((
uöt16_t
)0x0727)

	)

239 
	#USART_IT_TC
 ((
uöt16_t
)0x0626)

	)

240 
	#USART_IT_RXNE
 ((
uöt16_t
)0x0525)

	)

241 
	#USART_IT_ORE_RX
 ((
uöt16_t
)0x0325Ë

	)

242 
	#USART_IT_IDLE
 ((
uöt16_t
)0x0424)

	)

243 
	#USART_IT_LBD
 ((
uöt16_t
)0x0846)

	)

244 
	#USART_IT_CTS
 ((
uöt16_t
)0x096A)

	)

245 
	#USART_IT_ERR
 ((
uöt16_t
)0x0060)

	)

246 
	#USART_IT_ORE_ER
 ((
uöt16_t
)0x0360Ë

	)

247 
	#USART_IT_NE
 ((
uöt16_t
)0x0260)

	)

248 
	#USART_IT_FE
 ((
uöt16_t
)0x0160)

	)

253 
	#USART_IT_ORE
 
USART_IT_ORE_ER


	)

258 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

259 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

260 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

261 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
))

	)

262 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
) || \

263 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

264 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

265 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

266 ((
IT
Ë=
USART_IT_ORE_RX
Ë|| ((ITË=
USART_IT_ORE_ER
) || \

267 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
))

	)

268 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

269 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
))

	)

278 
	#USART_DMAReq_Tx
 ((
uöt16_t
)0x0080)

	)

279 
	#USART_DMAReq_Rx
 ((
uöt16_t
)0x0040)

	)

280 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt16_t
)0xFF3FË=0x00Ë&& ((DMAREQË!(uöt16_t)0x00))

	)

290 
	#USART_WakeUp_IdÀLöe
 ((
uöt16_t
)0x0000)

	)

291 
	#USART_WakeUp_AddªssM¨k
 ((
uöt16_t
)0x0800)

	)

292 
	#IS_USART_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
) || \

293 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

	)

302 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt16_t
)0x0000)

	)

303 
	#USART_LINBªakDëe˘Lígth_11b
 ((
uöt16_t
)0x0020)

	)

304 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
) \

305 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

306 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

	)

315 
	#USART_IrDAMode_LowPowî
 ((
uöt16_t
)0x0004)

	)

316 
	#USART_IrDAMode_N‹mÆ
 ((
uöt16_t
)0x0000)

	)

317 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
) || \

318 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

	)

327 
	#USART_FLAG_CTS
 ((
uöt16_t
)0x0200)

	)

328 
	#USART_FLAG_LBD
 ((
uöt16_t
)0x0100)

	)

329 
	#USART_FLAG_TXE
 ((
uöt16_t
)0x0080)

	)

330 
	#USART_FLAG_TC
 ((
uöt16_t
)0x0040)

	)

331 
	#USART_FLAG_RXNE
 ((
uöt16_t
)0x0020)

	)

332 
	#USART_FLAG_IDLE
 ((
uöt16_t
)0x0010)

	)

333 
	#USART_FLAG_ORE
 ((
uöt16_t
)0x0008)

	)

334 
	#USART_FLAG_NE
 ((
uöt16_t
)0x0004)

	)

335 
	#USART_FLAG_FE
 ((
uöt16_t
)0x0002)

	)

336 
	#USART_FLAG_PE
 ((
uöt16_t
)0x0001)

	)

337 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
) || \

338 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

339 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

340 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

341 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
))

	)

343 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xFC9FË=0x00Ë&& ((FLAGË!(uöt16_t)0x00))

	)

345 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 7500001))

	)

346 
	#IS_USART_ADDRESS
(
ADDRESS
Ë((ADDRESSË<0xF)

	)

347 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

361 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

364 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

365 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

366 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

367 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

368 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

369 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

370 
USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

371 
USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

374 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

375 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

378 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

379 
USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
);

380 
USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

383 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
);

384 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

385 
USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
);

388 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

391 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

392 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

393 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

396 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
);

397 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

400 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

403 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

404 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

405 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
);

406 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

407 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
);

409 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_wwdg.h

24 #i‚de‡
__STM32F4xx_WWDG_H


25 
	#__STM32F4xx_WWDG_H


	)

27 #ifde‡
__˝lu•lus


32 
	~"°m32f4xx.h
"

53 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

54 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

55 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

56 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

57 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
) || \

58 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

59 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

60 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

	)

61 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

62 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

76 
WWDG_DeInô
();

79 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

80 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

81 
WWDG_E«bÀIT
();

82 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

85 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

88 
FœgSètus
 
WWDG_GëFœgSètus
();

89 
WWDG_CÀ¨Fœg
();

91 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\misc.c

70 
	~"misc.h
"

83 
	#AIRCR_VECTKEY_MASK
 ((
uöt32_t
)0x05FA0000)

	)

112 
	$NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
)

115 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
NVIC_Pri‹ôyGroup
));

118 
SCB
->
AIRCR
 = 
AIRCR_VECTKEY_MASK
 | 
NVIC_Pri‹ôyGroup
;

119 
	}
}

130 
	$NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
)

132 
uöt8_t
 
tmµri‹ôy
 = 0x00, 
tmµª
 = 0x00, 
tmpsub
 = 0x0F;

135 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
));

136 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
));

137 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
));

139 i‡(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
 !
DISABLE
)

142 
tmµri‹ôy
 = (0x700 - ((
SCB
->
AIRCR
Ë& (
uöt32_t
)0x700))>> 0x08;

143 
tmµª
 = (0x4 - 
tmµri‹ôy
);

144 
tmpsub
 =Åmpsub >> 
tmµri‹ôy
;

146 
tmµri‹ôy
 = 
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 << 
tmµª
;

147 
tmµri‹ôy
 |(
uöt8_t
)(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
 & 
tmpsub
);

149 
tmµri‹ôy
 =Åmppriority << 0x04;

151 
NVIC
->
IP
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
] = 
tmµri‹ôy
;

154 
NVIC
->
ISER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

155 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

160 
NVIC
->
ICER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

161 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

163 
	}
}

174 
	$NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
)

177 
	`as£π_∑øm
(
	`IS_NVIC_VECTTAB
(
NVIC_Ve˘Tab
));

178 
	`as£π_∑øm
(
	`IS_NVIC_OFFSET
(
Off£t
));

180 
SCB
->
VTOR
 = 
NVIC_Ve˘Tab
 | (
Off£t
 & (
uöt32_t
)0x1FFFFF80);

181 
	}
}

193 
	$NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

196 
	`as£π_∑øm
(
	`IS_NVIC_LP
(
LowPowîMode
));

197 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

199 i‡(
NewSèã
 !
DISABLE
)

201 
SCB
->
SCR
 |
LowPowîMode
;

205 
SCB
->
SCR
 &(
uöt32_t
)(~(uöt32_t)
LowPowîMode
);

207 
	}
}

217 
	$SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
)

220 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
SysTick_CLKSour˚
));

221 i‡(
SysTick_CLKSour˚
 =
SysTick_CLKSour˚_HCLK
)

223 
SysTick
->
CTRL
 |
SysTick_CLKSour˚_HCLK
;

227 
SysTick
->
CTRL
 &
SysTick_CLKSour˚_HCLK_Div8
;

229 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_adc.c

98 
	~"°m32f4xx_adc.h
"

99 
	~"°m32f4xx_rcc.h
"

114 
	#CR1_DISCNUM_RESET
 ((
uöt32_t
)0xFFFF1FFF)

	)

117 
	#CR1_AWDCH_RESET
 ((
uöt32_t
)0xFFFFFFE0)

	)

120 
	#CR1_AWDMode_RESET
 ((
uöt32_t
)0xFF3FFDFF)

	)

123 
	#CR1_CLEAR_MASK
 ((
uöt32_t
)0xFCFFFEFF)

	)

126 
	#CR2_EXTEN_RESET
 ((
uöt32_t
)0xCFFFFFFF)

	)

129 
	#CR2_JEXTEN_RESET
 ((
uöt32_t
)0xFFCFFFFF)

	)

132 
	#CR2_JEXTSEL_RESET
 ((
uöt32_t
)0xFFF0FFFF)

	)

135 
	#CR2_CLEAR_MASK
 ((
uöt32_t
)0xC0FFF7FD)

	)

138 
	#SQR3_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

139 
	#SQR2_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

140 
	#SQR1_SQ_SET
 ((
uöt32_t
)0x0000001F)

	)

143 
	#SQR1_L_RESET
 ((
uöt32_t
)0xFF0FFFFF)

	)

146 
	#JSQR_JSQ_SET
 ((
uöt32_t
)0x0000001F)

	)

149 
	#JSQR_JL_SET
 ((
uöt32_t
)0x00300000)

	)

150 
	#JSQR_JL_RESET
 ((
uöt32_t
)0xFFCFFFFF)

	)

153 
	#SMPR1_SMP_SET
 ((
uöt32_t
)0x00000007)

	)

154 
	#SMPR2_SMP_SET
 ((
uöt32_t
)0x00000007)

	)

157 
	#JDR_OFFSET
 ((
uöt8_t
)0x28)

	)

160 
	#CDR_ADDRESS
 ((
uöt32_t
)0x40012308)

	)

163 
	#CR_CLEAR_MASK
 ((
uöt32_t
)0xFFFC30E0)

	)

206 
	$ADC_DeInô
()

209 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC
, 
ENABLE
);

212 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_ADC
, 
DISABLE
);

213 
	}
}

228 
	$ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

230 
uöt32_t
 
tm¥eg1
 = 0;

231 
uöt8_t
 
tm¥eg2
 = 0;

233 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

234 
	`as£π_∑øm
(
	`IS_ADC_RESOLUTION
(
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
));

235 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
));

236 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
));

237 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG_EDGE
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
));

238 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
));

239 
	`as£π_∑øm
(
	`IS_ADC_DATA_ALIGN
(
ADC_InôSåu˘
->
ADC_D©aAlign
));

240 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_LENGTH
(
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
));

244 
tm¥eg1
 = 
ADCx
->
CR1
;

247 
tm¥eg1
 &
CR1_CLEAR_MASK
;

252 
tm¥eg1
 |(
uöt32_t
)(((uöt32_t)
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 << 8) | \

253 
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
);

255 
ADCx
->
CR1
 = 
tm¥eg1
;

258 
tm¥eg1
 = 
ADCx
->
CR2
;

261 
tm¥eg1
 &
CR2_CLEAR_MASK
;

269 
tm¥eg1
 |(
uöt32_t
)(
ADC_InôSåu˘
->
ADC_D©aAlign
 | \

270 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 |

271 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
 | \

272 ((
uöt32_t
)
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 << 1));

275 
ADCx
->
CR2
 = 
tm¥eg1
;

278 
tm¥eg1
 = 
ADCx
->
SQR1
;

281 
tm¥eg1
 &
SQR1_L_RESET
;

285 
tm¥eg2
 |(
uöt8_t
)(
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
 - (uint8_t)1);

286 
tm¥eg1
 |((
uöt32_t
)
tm¥eg2
 << 20);

289 
ADCx
->
SQR1
 = 
tm¥eg1
;

290 
	}
}

303 
	$ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

306 
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
 = 
ADC_Resﬁuti⁄_12b
;

309 
ADC_InôSåu˘
->
ADC_SˇnC⁄vMode
 = 
DISABLE
;

312 
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 = 
DISABLE
;

315 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEdge
 = 
ADC_Exã∫ÆTrigC⁄vEdge_N⁄e
;

318 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄v
 = 
ADC_Exã∫ÆTrigC⁄v_T1_CC1
;

321 
ADC_InôSåu˘
->
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

324 
ADC_InôSåu˘
->
ADC_NbrOfC⁄vîsi⁄
 = 1;

325 
	}
}

334 
	$ADC_Comm⁄Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
)

336 
uöt32_t
 
tm¥eg1
 = 0;

338 
	`as£π_∑øm
(
	`IS_ADC_MODE
(
ADC_Comm⁄InôSåu˘
->
ADC_Mode
));

339 
	`as£π_∑øm
(
	`IS_ADC_PRESCALER
(
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
));

340 
	`as£π_∑øm
(
	`IS_ADC_DMA_ACCESS_MODE
(
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
));

341 
	`as£π_∑øm
(
	`IS_ADC_SAMPLING_DELAY
(
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
));

344 
tm¥eg1
 = 
ADC
->
CCR
;

347 
tm¥eg1
 &
CR_CLEAR_MASK
;

355 
tm¥eg1
 |(
uöt32_t
)(
ADC_Comm⁄InôSåu˘
->
ADC_Mode
 |

356 
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
 |

357 
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
 |

358 
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
);

361 
ADC
->
CCR
 = 
tm¥eg1
;

362 
	}
}

370 
	$ADC_Comm⁄Såu˘Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
)

373 
ADC_Comm⁄InôSåu˘
->
ADC_Mode
 = 
ADC_Mode_Indïídít
;

376 
ADC_Comm⁄InôSåu˘
->
ADC_PªsˇÀr
 = 
ADC_PªsˇÀr_Div2
;

379 
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
 = 
ADC_DMAAc˚ssMode_DißbÀd
;

382 
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
 = 
ADC_TwoSam∂ögDñay_5Cy˛es
;

383 
	}
}

392 
	$ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

395 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

396 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

397 i‡(
NewSèã
 !
DISABLE
)

400 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_ADON
;

405 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_ADON
);

407 
	}
}

450 
	$ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
)

452 
uöt32_t
 
tm¥eg
 = 0;

454 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

455 
	`as£π_∑øm
(
	`IS_ADC_ANALOG_WATCHDOG
(
ADC_A«logW©chdog
));

458 
tm¥eg
 = 
ADCx
->
CR1
;

461 
tm¥eg
 &
CR1_AWDMode_RESET
;

464 
tm¥eg
 |
ADC_A«logW©chdog
;

467 
ADCx
->
CR1
 = 
tm¥eg
;

468 
	}
}

479 
	$ADC_A«logW©chdogThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,

480 
uöt16_t
 
LowThªshﬁd
)

483 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

484 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
HighThªshﬁd
));

485 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
LowThªshﬁd
));

488 
ADCx
->
HTR
 = 
HighThªshﬁd
;

491 
ADCx
->
LTR
 = 
LowThªshﬁd
;

492 
	}
}

520 
	$ADC_A«logW©chdogSögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
)

522 
uöt32_t
 
tm¥eg
 = 0;

524 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

525 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

528 
tm¥eg
 = 
ADCx
->
CR1
;

531 
tm¥eg
 &
CR1_AWDCH_RESET
;

534 
tm¥eg
 |
ADC_Ch™√l
;

537 
ADCx
->
CR1
 = 
tm¥eg
;

538 
	}
}

585 
	$ADC_TempSís‹VªfötCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

588 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

589 i‡(
NewSèã
 !
DISABLE
)

592 
ADC
->
CCR
 |(
uöt32_t
)
ADC_CCR_TSVREFE
;

597 
ADC
->
CCR
 &(
uöt32_t
)(~
ADC_CCR_TSVREFE
);

599 
	}
}

607 
	$ADC_VBATCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

610 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

611 i‡(
NewSèã
 !
DISABLE
)

614 
ADC
->
CCR
 |(
uöt32_t
)
ADC_CCR_VBATE
;

619 
ADC
->
CCR
 &(
uöt32_t
)(~
ADC_CCR_VBATE
);

621 
	}
}

708 
	$ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

710 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

712 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

713 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

714 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_RANK
(
R™k
));

715 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

718 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

721 
tm¥eg1
 = 
ADCx
->
SMPR1
;

724 
tm¥eg2
 = 
SMPR1_SMP_SET
 << (3 * (
ADC_Ch™√l
 - 10));

727 
tm¥eg1
 &~
tm¥eg2
;

730 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 10));

733 
tm¥eg1
 |
tm¥eg2
;

736 
ADCx
->
SMPR1
 = 
tm¥eg1
;

741 
tm¥eg1
 = 
ADCx
->
SMPR2
;

744 
tm¥eg2
 = 
SMPR2_SMP_SET
 << (3 * 
ADC_Ch™√l
);

747 
tm¥eg1
 &~
tm¥eg2
;

750 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

753 
tm¥eg1
 |
tm¥eg2
;

756 
ADCx
->
SMPR2
 = 
tm¥eg1
;

759 i‡(
R™k
 < 7)

762 
tm¥eg1
 = 
ADCx
->
SQR3
;

765 
tm¥eg2
 = 
SQR3_SQ_SET
 << (5 * (
R™k
 - 1));

768 
tm¥eg1
 &~
tm¥eg2
;

771 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 1));

774 
tm¥eg1
 |
tm¥eg2
;

777 
ADCx
->
SQR3
 = 
tm¥eg1
;

780 i‡(
R™k
 < 13)

783 
tm¥eg1
 = 
ADCx
->
SQR2
;

786 
tm¥eg2
 = 
SQR2_SQ_SET
 << (5 * (
R™k
 - 7));

789 
tm¥eg1
 &~
tm¥eg2
;

792 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 7));

795 
tm¥eg1
 |
tm¥eg2
;

798 
ADCx
->
SQR2
 = 
tm¥eg1
;

804 
tm¥eg1
 = 
ADCx
->
SQR1
;

807 
tm¥eg2
 = 
SQR1_SQ_SET
 << (5 * (
R™k
 - 13));

810 
tm¥eg1
 &~
tm¥eg2
;

813 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
R™k
 - 13));

816 
tm¥eg1
 |
tm¥eg2
;

819 
ADCx
->
SQR1
 = 
tm¥eg1
;

821 
	}
}

828 
	$ADC_So·w¨eSèπC⁄v
(
ADC_Ty≥Def
* 
ADCx
)

831 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

834 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_SWSTART
;

835 
	}
}

842 
FœgSètus
 
	$ADC_GëSo·w¨eSèπC⁄vSètus
(
ADC_Ty≥Def
* 
ADCx
)

844 
FœgSètus
 
bô°©us
 = 
RESET
;

846 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

849 i‡((
ADCx
->
CR2
 & 
ADC_CR2_JSWSTART
Ë!(
uöt32_t
)
RESET
)

852 
bô°©us
 = 
SET
;

857 
bô°©us
 = 
RESET
;

861  
bô°©us
;

862 
	}
}

872 
	$ADC_EOCOnEachReguœrCh™√lCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

875 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

876 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

878 i‡(
NewSèã
 !
DISABLE
)

881 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_EOCS
;

886 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_EOCS
);

888 
	}
}

897 
	$ADC_C⁄töuousModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

900 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

901 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

903 i‡(
NewSèã
 !
DISABLE
)

906 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_CONT
;

911 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_CONT
);

913 
	}
}

923 
	$ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
)

925 
uöt32_t
 
tm¥eg1
 = 0;

926 
uöt32_t
 
tm¥eg2
 = 0;

929 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

930 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_DISC_NUMBER
(
Numbî
));

933 
tm¥eg1
 = 
ADCx
->
CR1
;

936 
tm¥eg1
 &
CR1_DISCNUM_RESET
;

939 
tm¥eg2
 = 
Numbî
 - 1;

940 
tm¥eg1
 |
tm¥eg2
 << 13;

943 
ADCx
->
CR1
 = 
tm¥eg1
;

944 
	}
}

955 
	$ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

958 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

959 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

961 i‡(
NewSèã
 !
DISABLE
)

964 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_DISCEN
;

969 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_DISCEN
);

971 
	}
}

978 
uöt16_t
 
	$ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
)

981 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

984  (
uöt16_t
Ë
ADCx
->
DR
;

985 
	}
}

999 
uöt32_t
 
	$ADC_GëMu…iModeC⁄vîsi⁄VÆue
()

1002  (*(
__IO
 
uöt32_t
 *Ë
CDR_ADDRESS
);

1003 
	}
}

1048 
	$ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1051 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1052 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1053 i‡(
NewSèã
 !
DISABLE
)

1056 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_DMA
;

1061 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_DMA
);

1063 
	}
}

1072 
	$ADC_DMAReque°A·îLa°Tøns„rCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1075 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1076 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1077 i‡(
NewSèã
 !
DISABLE
)

1080 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_DDS
;

1085 
ADCx
->
CR2
 &(
uöt32_t
)(~
ADC_CR2_DDS
);

1087 
	}
}

1099 
	$ADC_Mu…iModeDMAReque°A·îLa°Tøns„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1102 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1103 i‡(
NewSèã
 !
DISABLE
)

1106 
ADC
->
CCR
 |(
uöt32_t
)
ADC_CCR_DDS
;

1111 
ADC
->
CCR
 &(
uöt32_t
)(~
ADC_CCR_DDS
);

1113 
	}
}

1186 
	$ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

1188 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0, 
tm¥eg3
 = 0;

1190 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1191 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1192 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_RANK
(
R™k
));

1193 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

1195 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

1198 
tm¥eg1
 = 
ADCx
->
SMPR1
;

1200 
tm¥eg2
 = 
SMPR1_SMP_SET
 << (3*(
ADC_Ch™√l
 - 10));

1202 
tm¥eg1
 &~
tm¥eg2
;

1204 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3*(
ADC_Ch™√l
 - 10));

1206 
tm¥eg1
 |
tm¥eg2
;

1208 
ADCx
->
SMPR1
 = 
tm¥eg1
;

1213 
tm¥eg1
 = 
ADCx
->
SMPR2
;

1215 
tm¥eg2
 = 
SMPR2_SMP_SET
 << (3 * 
ADC_Ch™√l
);

1217 
tm¥eg1
 &~
tm¥eg2
;

1219 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

1221 
tm¥eg1
 |
tm¥eg2
;

1223 
ADCx
->
SMPR2
 = 
tm¥eg1
;

1227 
tm¥eg1
 = 
ADCx
->
JSQR
;

1229 
tm¥eg3
 = (
tm¥eg1
 & 
JSQR_JL_SET
)>> 20;

1231 
tm¥eg2
 = 
JSQR_JSQ_SET
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

1233 
tm¥eg1
 &~
tm¥eg2
;

1235 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (5 * (
uöt8_t
)((
R™k
 + 3Ë- (
tm¥eg3
 + 1)));

1237 
tm¥eg1
 |
tm¥eg2
;

1239 
ADCx
->
JSQR
 = 
tm¥eg1
;

1240 
	}
}

1249 
	$ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Lígth
)

1251 
uöt32_t
 
tm¥eg1
 = 0;

1252 
uöt32_t
 
tm¥eg2
 = 0;

1254 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1255 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_LENGTH
(
Lígth
));

1258 
tm¥eg1
 = 
ADCx
->
JSQR
;

1261 
tm¥eg1
 &
JSQR_JL_RESET
;

1264 
tm¥eg2
 = 
Lígth
 - 1;

1265 
tm¥eg1
 |
tm¥eg2
 << 20;

1268 
ADCx
->
JSQR
 = 
tm¥eg1
;

1269 
	}
}

1284 
	$ADC_SëInje˘edOff£t
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
, 
uöt16_t
 
Off£t
)

1286 
__IO
 
uöt32_t
 
tmp
 = 0;

1288 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1289 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1290 
	`as£π_∑øm
(
	`IS_ADC_OFFSET
(
Off£t
));

1292 
tmp
 = (
uöt32_t
)
ADCx
;

1293 
tmp
 +
ADC_Inje˘edCh™√l
;

1296 *(
__IO
 
uöt32_t
 *Ë
tmp
 = (uöt32_t)
Off£t
;

1297 
	}
}

1322 
	$ADC_Exã∫ÆTrigInje˘edC⁄vC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄v
)

1324 
uöt32_t
 
tm¥eg
 = 0;

1326 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1327 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG
(
ADC_Exã∫ÆTrigInjecC⁄v
));

1330 
tm¥eg
 = 
ADCx
->
CR2
;

1333 
tm¥eg
 &
CR2_JEXTSEL_RESET
;

1336 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄v
;

1339 
ADCx
->
CR2
 = 
tm¥eg
;

1340 
	}
}

1356 
	$ADC_Exã∫ÆTrigInje˘edC⁄vEdgeC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄vEdge
)

1358 
uöt32_t
 
tm¥eg
 = 0;

1360 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1361 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG_EDGE
(
ADC_Exã∫ÆTrigInjecC⁄vEdge
));

1363 
tm¥eg
 = 
ADCx
->
CR2
;

1365 
tm¥eg
 &
CR2_JEXTEN_RESET
;

1367 
tm¥eg
 |
ADC_Exã∫ÆTrigInjecC⁄vEdge
;

1369 
ADCx
->
CR2
 = 
tm¥eg
;

1370 
	}
}

1377 
	$ADC_So·w¨eSèπInje˘edC⁄v
(
ADC_Ty≥Def
* 
ADCx
)

1380 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1382 
ADCx
->
CR2
 |(
uöt32_t
)
ADC_CR2_JSWSTART
;

1383 
	}
}

1390 
FœgSètus
 
	$ADC_GëSo·w¨eSèπInje˘edC⁄vCmdSètus
(
ADC_Ty≥Def
* 
ADCx
)

1392 
FœgSètus
 
bô°©us
 = 
RESET
;

1394 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1397 i‡((
ADCx
->
CR2
 & 
ADC_CR2_JSWSTART
Ë!(
uöt32_t
)
RESET
)

1400 
bô°©us
 = 
SET
;

1405 
bô°©us
 = 
RESET
;

1408  
bô°©us
;

1409 
	}
}

1419 
	$ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1422 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1423 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1424 i‡(
NewSèã
 !
DISABLE
)

1427 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_JAUTO
;

1432 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_JAUTO
);

1434 
	}
}

1445 
	$ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1448 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1449 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1450 i‡(
NewSèã
 !
DISABLE
)

1453 
ADCx
->
CR1
 |(
uöt32_t
)
ADC_CR1_JDISCEN
;

1458 
ADCx
->
CR1
 &(
uöt32_t
)(~
ADC_CR1_JDISCEN
);

1460 
	}
}

1473 
uöt16_t
 
	$ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
)

1475 
__IO
 
uöt32_t
 
tmp
 = 0;

1478 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1479 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

1481 
tmp
 = (
uöt32_t
)
ADCx
;

1482 
tmp
 +
ADC_Inje˘edCh™√l
 + 
JDR_OFFSET
;

1485  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

1486 
	}
}

1581 
	$ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1583 
uöt32_t
 
ômask
 = 0;

1585 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1586 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1587 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1590 
ômask
 = (
uöt8_t
)
ADC_IT
;

1591 
ômask
 = (
uöt32_t
)0x01 << itmask;

1593 i‡(
NewSèã
 !
DISABLE
)

1596 
ADCx
->
CR1
 |
ômask
;

1601 
ADCx
->
CR1
 &(~(
uöt32_t
)
ômask
);

1603 
	}
}

1618 
FœgSètus
 
	$ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1620 
FœgSètus
 
bô°©us
 = 
RESET
;

1622 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1623 
	`as£π_∑øm
(
	`IS_ADC_GET_FLAG
(
ADC_FLAG
));

1626 i‡((
ADCx
->
SR
 & 
ADC_FLAG
Ë!(
uöt8_t
)
RESET
)

1629 
bô°©us
 = 
SET
;

1634 
bô°©us
 = 
RESET
;

1637  
bô°©us
;

1638 
	}
}

1653 
	$ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_FLAG
)

1656 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1657 
	`as£π_∑øm
(
	`IS_ADC_CLEAR_FLAG
(
ADC_FLAG
));

1660 
ADCx
->
SR
 = ~(
uöt32_t
)
ADC_FLAG
;

1661 
	}
}

1674 
ITSètus
 
	$ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1676 
ITSètus
 
bô°©us
 = 
RESET
;

1677 
uöt32_t
 
ômask
 = 0, 
íabÀ°©us
 = 0;

1680 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1681 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1684 
ômask
 = 
ADC_IT
 >> 8;

1687 
íabÀ°©us
 = (
ADCx
->
CR1
 & ((
uöt32_t
)0x01 << (
uöt8_t
)
ADC_IT
)) ;

1690 i‡(((
ADCx
->
SR
 & 
ômask
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1693 
bô°©us
 = 
SET
;

1698 
bô°©us
 = 
RESET
;

1701  
bô°©us
;

1702 
	}
}

1715 
	$ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_IT
)

1717 
uöt8_t
 
ômask
 = 0;

1719 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1720 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

1722 
ômask
 = (
uöt8_t
)(
ADC_IT
 >> 8);

1724 
ADCx
->
SR
 = ~(
uöt32_t
)
ômask
;

1725 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_can.c

80 
	~"°m32f4xx_ˇn.h
"

81 
	~"°m32f4xx_rcc.h
"

95 
	#MCR_DBF
 ((
uöt32_t
)0x00010000Ë

	)

98 
	#TMIDxR_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

101 
	#FMR_FINIT
 ((
uöt32_t
)0x00000001Ë

	)

104 
	#INAK_TIMEOUT
 ((
uöt32_t
)0x0000FFFF)

	)

106 
	#SLAK_TIMEOUT
 ((
uöt32_t
)0x0000FFFF)

	)

109 
	#CAN_FLAGS_TSR
 ((
uöt32_t
)0x08000000)

	)

111 
	#CAN_FLAGS_RF1R
 ((
uöt32_t
)0x04000000)

	)

113 
	#CAN_FLAGS_RF0R
 ((
uöt32_t
)0x02000000)

	)

115 
	#CAN_FLAGS_MSR
 ((
uöt32_t
)0x01000000)

	)

117 
	#CAN_FLAGS_ESR
 ((
uöt32_t
)0x00F00000)

	)

120 
	#CAN_TXMAILBOX_0
 ((
uöt8_t
)0x00)

	)

121 
	#CAN_TXMAILBOX_1
 ((
uöt8_t
)0x01)

	)

122 
	#CAN_TXMAILBOX_2
 ((
uöt8_t
)0x02)

	)

124 
	#CAN_MODE_MASK
 ((
uöt32_t
Ë0x00000003)

	)

130 
ITSètus
 
CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
);

162 
	$CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
)

165 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

167 i‡(
CANx
 =
CAN1
)

170 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
ENABLE
);

172 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
DISABLE
);

177 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
ENABLE
);

179 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN2
, 
DISABLE
);

181 
	}
}

192 
uöt8_t
 
	$CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

194 
uöt8_t
 
InôSètus
 = 
CAN_InôSètus_Faûed
;

195 
uöt32_t
 
waô_ack
 = 0x00000000;

197 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

198 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TTCM
));

199 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_ABOM
));

200 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_AWUM
));

201 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_NART
));

202 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_RFLM
));

203 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TXFP
));

204 
	`as£π_∑øm
(
	`IS_CAN_MODE
(
CAN_InôSåu˘
->
CAN_Mode
));

205 
	`as£π_∑øm
(
	`IS_CAN_SJW
(
CAN_InôSåu˘
->
CAN_SJW
));

206 
	`as£π_∑øm
(
	`IS_CAN_BS1
(
CAN_InôSåu˘
->
CAN_BS1
));

207 
	`as£π_∑øm
(
	`IS_CAN_BS2
(
CAN_InôSåu˘
->
CAN_BS2
));

208 
	`as£π_∑øm
(
	`IS_CAN_PRESCALER
(
CAN_InôSåu˘
->
CAN_PªsˇÀr
));

211 
CANx
->
MCR
 &(~(
uöt32_t
)
CAN_MCR_SLEEP
);

214 
CANx
->
MCR
 |
CAN_MCR_INRQ
 ;

217 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë!CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

219 
waô_ack
++;

223 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) != CAN_MSR_INAK)

225 
InôSètus
 = 
CAN_InôSètus_Faûed
;

230 i‡(
CAN_InôSåu˘
->
CAN_TTCM
 =
ENABLE
)

232 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

236 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TTCM
;

240 i‡(
CAN_InôSåu˘
->
CAN_ABOM
 =
ENABLE
)

242 
CANx
->
MCR
 |
CAN_MCR_ABOM
;

246 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_ABOM
;

250 i‡(
CAN_InôSåu˘
->
CAN_AWUM
 =
ENABLE
)

252 
CANx
->
MCR
 |
CAN_MCR_AWUM
;

256 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_AWUM
;

260 i‡(
CAN_InôSåu˘
->
CAN_NART
 =
ENABLE
)

262 
CANx
->
MCR
 |
CAN_MCR_NART
;

266 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_NART
;

270 i‡(
CAN_InôSåu˘
->
CAN_RFLM
 =
ENABLE
)

272 
CANx
->
MCR
 |
CAN_MCR_RFLM
;

276 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_RFLM
;

280 i‡(
CAN_InôSåu˘
->
CAN_TXFP
 =
ENABLE
)

282 
CANx
->
MCR
 |
CAN_MCR_TXFP
;

286 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TXFP
;

290 
CANx
->
BTR
 = (
uöt32_t
)((uöt32_t)
CAN_InôSåu˘
->
CAN_Mode
 << 30) | \

291 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_SJW
 << 24) | \

292 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS1
 << 16) | \

293 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS2
 << 20) | \

294 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_PªsˇÀr
 - 1);

297 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_INRQ
;

300 
waô_ack
 = 0;

302 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë=CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

304 
waô_ack
++;

308 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) == CAN_MSR_INAK)

310 
InôSètus
 = 
CAN_InôSètus_Faûed
;

314 
InôSètus
 = 
CAN_InôSètus_Suc˚ss
 ;

319  
InôSètus
;

320 
	}
}

329 
	$CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
)

331 
uöt32_t
 
fûãr_numbî_bô_pos
 = 0;

333 
	`as£π_∑øm
(
	`IS_CAN_FILTER_NUMBER
(
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
));

334 
	`as£π_∑øm
(
	`IS_CAN_FILTER_MODE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
));

335 
	`as£π_∑øm
(
	`IS_CAN_FILTER_SCALE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
));

336 
	`as£π_∑øm
(
	`IS_CAN_FILTER_FIFO
(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
));

337 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
));

339 
fûãr_numbî_bô_pos
 = ((
uöt32_t
)1Ë<< 
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
;

342 
CAN1
->
FMR
 |
FMR_FINIT
;

345 
CAN1
->
FA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

348 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_16bô
)

351 
CAN1
->
FS1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

355 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

356 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
) << 16) |

357 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

361 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

362 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

363 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
);

366 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_32bô
)

369 
CAN1
->
FS1R
 |
fûãr_numbî_bô_pos
;

371 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

372 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
) << 16) |

373 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

375 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

376 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

377 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
);

381 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
 =
CAN_FûãrMode_IdMask
)

384 
CAN1
->
FM1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

389 
CAN1
->
FM1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

393 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO0
)

396 
CAN1
->
FFA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

399 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO1
)

402 
CAN1
->
FFA1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

406 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
 =
ENABLE
)

408 
CAN1
->
FA1R
 |
fûãr_numbî_bô_pos
;

412 
CAN1
->
FMR
 &~
FMR_FINIT
;

413 
	}
}

420 
	$CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

425 
CAN_InôSåu˘
->
CAN_TTCM
 = 
DISABLE
;

428 
CAN_InôSåu˘
->
CAN_ABOM
 = 
DISABLE
;

431 
CAN_InôSåu˘
->
CAN_AWUM
 = 
DISABLE
;

434 
CAN_InôSåu˘
->
CAN_NART
 = 
DISABLE
;

437 
CAN_InôSåu˘
->
CAN_RFLM
 = 
DISABLE
;

440 
CAN_InôSåu˘
->
CAN_TXFP
 = 
DISABLE
;

443 
CAN_InôSåu˘
->
CAN_Mode
 = 
CAN_Mode_N‹mÆ
;

446 
CAN_InôSåu˘
->
CAN_SJW
 = 
CAN_SJW_1tq
;

449 
CAN_InôSåu˘
->
CAN_BS1
 = 
CAN_BS1_4tq
;

452 
CAN_InôSåu˘
->
CAN_BS2
 = 
CAN_BS2_3tq
;

455 
CAN_InôSåu˘
->
CAN_PªsˇÀr
 = 1;

456 
	}
}

463 
	$CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
)

466 
	`as£π_∑øm
(
	`IS_CAN_BANKNUMBER
(
CAN_B™kNumbî
));

469 
CAN1
->
FMR
 |
FMR_FINIT
;

472 
CAN1
->
FMR
 &(
uöt32_t
)0xFFFFC0F1 ;

473 
CAN1
->
FMR
 |(
uöt32_t
)(
CAN_B™kNumbî
)<<8;

476 
CAN1
->
FMR
 &~
FMR_FINIT
;

477 
	}
}

488 
	$CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

491 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

492 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

494 i‡(
NewSèã
 !
DISABLE
)

497 
CANx
->
MCR
 |
MCR_DBF
;

502 
CANx
->
MCR
 &~
MCR_DBF
;

504 
	}
}

518 
	$CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

521 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

522 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

523 i‡(
NewSèã
 !
DISABLE
)

526 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

529 
CANx
->
sTxMaûBox
[0].
TDTR
 |((
uöt32_t
)
CAN_TDT0R_TGT
);

530 
CANx
->
sTxMaûBox
[1].
TDTR
 |((
uöt32_t
)
CAN_TDT1R_TGT
);

531 
CANx
->
sTxMaûBox
[2].
TDTR
 |((
uöt32_t
)
CAN_TDT2R_TGT
);

536 
CANx
->
MCR
 &(
uöt32_t
)(~(uöt32_t)
CAN_MCR_TTCM
);

539 
CANx
->
sTxMaûBox
[0].
TDTR
 &((
uöt32_t
)~
CAN_TDT0R_TGT
);

540 
CANx
->
sTxMaûBox
[1].
TDTR
 &((
uöt32_t
)~
CAN_TDT1R_TGT
);

541 
CANx
->
sTxMaûBox
[2].
TDTR
 &((
uöt32_t
)~
CAN_TDT2R_TGT
);

543 
	}
}

572 
uöt8_t
 
	$CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
)

574 
uöt8_t
 
å™smô_maûbox
 = 0;

576 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

577 
	`as£π_∑øm
(
	`IS_CAN_IDTYPE
(
TxMesßge
->
IDE
));

578 
	`as£π_∑øm
(
	`IS_CAN_RTR
(
TxMesßge
->
RTR
));

579 
	`as£π_∑øm
(
	`IS_CAN_DLC
(
TxMesßge
->
DLC
));

582 i‡((
CANx
->
TSR
&
CAN_TSR_TME0
) == CAN_TSR_TME0)

584 
å™smô_maûbox
 = 0;

586 i‡((
CANx
->
TSR
&
CAN_TSR_TME1
) == CAN_TSR_TME1)

588 
å™smô_maûbox
 = 1;

590 i‡((
CANx
->
TSR
&
CAN_TSR_TME2
) == CAN_TSR_TME2)

592 
å™smô_maûbox
 = 2;

596 
å™smô_maûbox
 = 
CAN_TxSètus_NoMaûBox
;

599 i‡(
å™smô_maûbox
 !
CAN_TxSètus_NoMaûBox
)

602 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 &
TMIDxR_TXRQ
;

603 i‡(
TxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

605 
	`as£π_∑øm
(
	`IS_CAN_STDID
(
TxMesßge
->
StdId
));

606 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
StdId
 << 21) | \

607 
TxMesßge
->
RTR
);

611 
	`as£π_∑øm
(
	`IS_CAN_EXTID
(
TxMesßge
->
ExtId
));

612 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
ExtId
 << 3) | \

613 
TxMesßge
->
IDE
 | \

614 
TxMesßge
->
RTR
);

618 
TxMesßge
->
DLC
 &(
uöt8_t
)0x0000000F;

619 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 &(
uöt32_t
)0xFFFFFFF0;

620 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 |
TxMesßge
->
DLC
;

623 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDLR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[3] << 24) |

624 ((
uöt32_t
)
TxMesßge
->
D©a
[2] << 16) |

625 ((
uöt32_t
)
TxMesßge
->
D©a
[1] << 8) |

626 ((
uöt32_t
)
TxMesßge
->
D©a
[0]));

627 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDHR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[7] << 24) |

628 ((
uöt32_t
)
TxMesßge
->
D©a
[6] << 16) |

629 ((
uöt32_t
)
TxMesßge
->
D©a
[5] << 8) |

630 ((
uöt32_t
)
TxMesßge
->
D©a
[4]));

632 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |
TMIDxR_TXRQ
;

634  
å™smô_maûbox
;

635 
	}
}

644 
uöt8_t
 
	$CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
TønsmôMaûbox
)

646 
uöt32_t
 
°©e
 = 0;

649 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

650 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
TønsmôMaûbox
));

652 
TønsmôMaûbox
)

654 (
CAN_TXMAILBOX_0
):

655 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
);

657 (
CAN_TXMAILBOX_1
):

658 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
);

660 (
CAN_TXMAILBOX_2
):

661 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
);

664 
°©e
 = 
CAN_TxSètus_Faûed
;

667 
°©e
)

670 (0x0): 
°©e
 = 
CAN_TxSètus_Pídög
;

673 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TME0
): 
°©e
 = 
CAN_TxSètus_Faûed
;

675 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TME1
): 
°©e
 = 
CAN_TxSètus_Faûed
;

677 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TME2
): 
°©e
 = 
CAN_TxSètus_Faûed
;

680 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
):
°©e
 = 
CAN_TxSètus_Ok
;

682 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
):
°©e
 = 
CAN_TxSètus_Ok
;

684 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
):
°©e
 = 
CAN_TxSètus_Ok
;

686 : 
°©e
 = 
CAN_TxSètus_Faûed
;

689  (
uöt8_t
Ë
°©e
;

690 
	}
}

698 
	$CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
)

701 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

702 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
Maûbox
));

704 
Maûbox
)

706 (
CAN_TXMAILBOX_0
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ0
;

708 (
CAN_TXMAILBOX_1
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ1
;

710 (
CAN_TXMAILBOX_2
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ2
;

715 
	}
}

745 
	$CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
)

748 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

749 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

751 
RxMesßge
->
IDE
 = (
uöt8_t
)0x04 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

752 i‡(
RxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

754 
RxMesßge
->
StdId
 = (
uöt32_t
)0x000007FF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 21);

758 
RxMesßge
->
ExtId
 = (
uöt32_t
)0x1FFFFFFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 3);

761 
RxMesßge
->
RTR
 = (
uöt8_t
)0x02 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

763 
RxMesßge
->
DLC
 = (
uöt8_t
)0x0F & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
;

765 
RxMesßge
->
FMI
 = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
 >> 8);

767 
RxMesßge
->
D©a
[0] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
;

768 
RxMesßge
->
D©a
[1] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 8);

769 
RxMesßge
->
D©a
[2] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 16);

770 
RxMesßge
->
D©a
[3] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 24);

771 
RxMesßge
->
D©a
[4] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
;

772 
RxMesßge
->
D©a
[5] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 8);

773 
RxMesßge
->
D©a
[6] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 16);

774 
RxMesßge
->
D©a
[7] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 24);

777 i‡(
FIFONumbî
 =
CAN_FIFO0
)

779 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

784 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

786 
	}
}

794 
	$CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

797 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

798 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

800 i‡(
FIFONumbî
 =
CAN_FIFO0
)

802 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

807 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

809 
	}
}

817 
uöt8_t
 
	$CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

819 
uöt8_t
 
mesßge_≥ndög
=0;

821 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

822 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

823 i‡(
FIFONumbî
 =
CAN_FIFO0
)

825 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF0R
&(
uöt32_t
)0x03);

827 i‡(
FIFONumbî
 =
CAN_FIFO1
)

829 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF1R
&(
uöt32_t
)0x03);

833 
mesßge_≥ndög
 = 0;

835  
mesßge_≥ndög
;

836 
	}
}

867 
uöt8_t
 
	$CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
CAN_O≥øtögMode
)

869 
uöt8_t
 
°©us
 = 
CAN_ModeSètus_Faûed
;

872 
uöt32_t
 
timeout
 = 
INAK_TIMEOUT
;

875 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

876 
	`as£π_∑øm
(
	`IS_CAN_OPERATING_MODE
(
CAN_O≥øtögMode
));

878 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_Inôüliz©i⁄
)

881 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_SLEEP
)Ë| 
CAN_MCR_INRQ
);

884 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
Ë&& (
timeout
 != 0))

886 
timeout
--;

888 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
)

890 
°©us
 = 
CAN_ModeSètus_Faûed
;

894 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

897 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_N‹mÆ
)

900 
CANx
->
MCR
 &(
uöt32_t
)(~(
CAN_MCR_SLEEP
|
CAN_MCR_INRQ
));

903 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!0Ë&& (
timeout
!=0))

905 
timeout
--;

907 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
) != 0)

909 
°©us
 = 
CAN_ModeSètus_Faûed
;

913 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

916 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_SÀï
)

919 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

922 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
Ë&& (
timeout
!=0))

924 
timeout
--;

926 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
)

928 
°©us
 = 
CAN_ModeSètus_Faûed
;

932 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

937 
°©us
 = 
CAN_ModeSètus_Faûed
;

940  (
uöt8_t
Ë
°©us
;

941 
	}
}

948 
uöt8_t
 
	$CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
)

950 
uöt8_t
 
¶ìp°©us
 = 
CAN_SÀï_Faûed
;

953 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

956 
CANx
->
MCR
 = (((CANx->MCRË& (
uöt32_t
)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

959 i‡((
CANx
->
MSR
 & (
CAN_MSR_SLAK
|
CAN_MSR_INAK
)) == CAN_MSR_SLAK)

962 
¶ìp°©us
 = 
CAN_SÀï_Ok
;

965  (
uöt8_t
)
¶ìp°©us
;

966 
	}
}

973 
uöt8_t
 
	$CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
)

975 
uöt32_t
 
waô_¶ak
 = 
SLAK_TIMEOUT
;

976 
uöt8_t
 
wakeup°©us
 = 
CAN_WakeUp_Faûed
;

979 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

982 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_SLEEP
;

985 ((
CANx
->
MSR
 & 
CAN_MSR_SLAK
Ë=CAN_MSR_SLAK)&&(
waô_¶ak
!=0x00))

987 
waô_¶ak
--;

989 if((
CANx
->
MSR
 & 
CAN_MSR_SLAK
) != CAN_MSR_SLAK)

992 
wakeup°©us
 = 
CAN_WakeUp_Ok
;

995  (
uöt8_t
)
wakeup°©us
;

996 
	}
}

1035 
uöt8_t
 
	$CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
)

1037 
uöt8_t
 
îr‹code
=0;

1040 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1043 
îr‹code
 = (((
uöt8_t
)
CANx
->
ESR
Ë& (uöt8_t)
CAN_ESR_LEC
);

1046  
îr‹code
;

1047 
	}
}

1060 
uöt8_t
 
	$CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

1062 
uöt8_t
 
cou¡î
=0;

1065 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1068 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_REC
)>> 24);

1071  
cou¡î
;

1072 
	}
}

1080 
uöt8_t
 
	$CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

1082 
uöt8_t
 
cou¡î
=0;

1085 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1088 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_TEC
)>> 16);

1091  
cou¡î
;

1092 
	}
}

1287 
	$CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1290 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1291 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1292 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1294 i‡(
NewSèã
 !
DISABLE
)

1297 
CANx
->
IER
 |
CAN_IT
;

1302 
CANx
->
IER
 &~
CAN_IT
;

1304 
	}
}

1327 
FœgSètus
 
	$CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1329 
FœgSètus
 
bô°©us
 = 
RESET
;

1332 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1333 
	`as£π_∑øm
(
	`IS_CAN_GET_FLAG
(
CAN_FLAG
));

1336 if((
CAN_FLAG
 & 
CAN_FLAGS_ESR
Ë!(
uöt32_t
)
RESET
)

1339 i‡((
CANx
->
ESR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1342 
bô°©us
 = 
SET
;

1347 
bô°©us
 = 
RESET
;

1350 if((
CAN_FLAG
 & 
CAN_FLAGS_MSR
Ë!(
uöt32_t
)
RESET
)

1353 i‡((
CANx
->
MSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1356 
bô°©us
 = 
SET
;

1361 
bô°©us
 = 
RESET
;

1364 if((
CAN_FLAG
 & 
CAN_FLAGS_TSR
Ë!(
uöt32_t
)
RESET
)

1367 i‡((
CANx
->
TSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1370 
bô°©us
 = 
SET
;

1375 
bô°©us
 = 
RESET
;

1378 if((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
Ë!(
uöt32_t
)
RESET
)

1381 i‡((
CANx
->
RF0R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1384 
bô°©us
 = 
SET
;

1389 
bô°©us
 = 
RESET
;

1395 i‡((
uöt32_t
)(
CANx
->
RF1R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(uöt32_t)
RESET
)

1398 
bô°©us
 = 
SET
;

1403 
bô°©us
 = 
RESET
;

1407  
bô°©us
;

1408 
	}
}

1427 
	$CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1429 
uöt32_t
 
Êagtmp
=0;

1431 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1432 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_FLAG
(
CAN_FLAG
));

1434 i‡(
CAN_FLAG
 =
CAN_FLAG_LEC
)

1437 
CANx
->
ESR
 = (
uöt32_t
)
RESET
;

1441 
Êagtmp
 = 
CAN_FLAG
 & 0x000FFFFF;

1443 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
)!=(
uöt32_t
)
RESET
)

1446 
CANx
->
RF0R
 = (
uöt32_t
)(
Êagtmp
);

1448 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF1R
)!=(
uöt32_t
)
RESET
)

1451 
CANx
->
RF1R
 = (
uöt32_t
)(
Êagtmp
);

1453 i‡((
CAN_FLAG
 & 
CAN_FLAGS_TSR
)!=(
uöt32_t
)
RESET
)

1456 
CANx
->
TSR
 = (
uöt32_t
)(
Êagtmp
);

1461 
CANx
->
MSR
 = (
uöt32_t
)(
Êagtmp
);

1464 
	}
}

1487 
ITSètus
 
	$CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1489 
ITSètus
 
ô°©us
 = 
RESET
;

1491 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1492 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1495 if((
CANx
->
IER
 & 
CAN_IT
Ë!
RESET
)

1498 
CAN_IT
)

1500 
CAN_IT_TME
:

1502 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
);

1504 
CAN_IT_FMP0
:

1506 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FMP0
);

1508 
CAN_IT_FF0
:

1510 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FULL0
);

1512 
CAN_IT_FOV0
:

1514 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FOVR0
);

1516 
CAN_IT_FMP1
:

1518 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FMP1
);

1520 
CAN_IT_FF1
:

1522 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FULL1
);

1524 
CAN_IT_FOV1
:

1526 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FOVR1
);

1528 
CAN_IT_WKU
:

1530 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_WKUI
);

1532 
CAN_IT_SLK
:

1534 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_SLAKI
);

1536 
CAN_IT_EWG
:

1538 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EWGF
);

1540 
CAN_IT_EPV
:

1542 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EPVF
);

1544 
CAN_IT_BOF
:

1546 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_BOFF
);

1548 
CAN_IT_LEC
:

1550 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_LEC
);

1552 
CAN_IT_ERR
:

1554 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_ERRI
);

1558 
ô°©us
 = 
RESET
;

1565 
ô°©us
 = 
RESET
;

1569  
ô°©us
;

1570 
	}
}

1591 
	$CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1594 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1595 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_IT
(
CAN_IT
));

1597 
CAN_IT
)

1599 
CAN_IT_TME
:

1601 
CANx
->
TSR
 = 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
;

1603 
CAN_IT_FF0
:

1605 
CANx
->
RF0R
 = 
CAN_RF0R_FULL0
;

1607 
CAN_IT_FOV0
:

1609 
CANx
->
RF0R
 = 
CAN_RF0R_FOVR0
;

1611 
CAN_IT_FF1
:

1613 
CANx
->
RF1R
 = 
CAN_RF1R_FULL1
;

1615 
CAN_IT_FOV1
:

1617 
CANx
->
RF1R
 = 
CAN_RF1R_FOVR1
;

1619 
CAN_IT_WKU
:

1621 
CANx
->
MSR
 = 
CAN_MSR_WKUI
;

1623 
CAN_IT_SLK
:

1625 
CANx
->
MSR
 = 
CAN_MSR_SLAKI
;

1627 
CAN_IT_EWG
:

1629 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1632 
CAN_IT_EPV
:

1634 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1637 
CAN_IT_BOF
:

1639 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1642 
CAN_IT_LEC
:

1644 
CANx
->
ESR
 = 
RESET
;

1646 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1648 
CAN_IT_ERR
:

1650 
CANx
->
ESR
 = 
RESET
;

1652 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1658 
	}
}

1669 
ITSètus
 
	$CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
)

1671 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

1673 i‡((
CAN_Reg
 & 
It_Bô
Ë!(
uöt32_t
)
RESET
)

1676 
≥ndögbô°©us
 = 
SET
;

1681 
≥ndögbô°©us
 = 
RESET
;

1683  
≥ndögbô°©us
;

1684 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_crc.c

23 
	~"°m32f4xx_¸c.h
"

50 
	$CRC_Re£tDR
()

53 
CRC
->
CR
 = 
CRC_CR_RESET
;

54 
	}
}

61 
uöt32_t
 
	$CRC_CÆcCRC
(
uöt32_t
 
D©a
)

63 
CRC
->
DR
 = 
D©a
;

65  (
CRC
->
DR
);

66 
	}
}

74 
uöt32_t
 
	$CRC_CÆcBlockCRC
(
uöt32_t
 
pBuf„r
[], uöt32_à
Buf„rLígth
)

76 
uöt32_t
 
ödex
 = 0;

78 
ödex
 = 0; index < 
Buf„rLígth
; index++)

80 
CRC
->
DR
 = 
pBuf„r
[
ödex
];

82  (
CRC
->
DR
);

83 
	}
}

90 
uöt32_t
 
	$CRC_GëCRC
()

92  (
CRC
->
DR
);

93 
	}
}

100 
	$CRC_SëIDRegi°î
(
uöt8_t
 
IDVÆue
)

102 
CRC
->
IDR
 = 
IDVÆue
;

103 
	}
}

110 
uöt8_t
 
	$CRC_GëIDRegi°î
()

112  (
CRC
->
IDR
);

113 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_cryp.c

159 
	~"°m32f4xx_¸yp.h
"

160 
	~"°m32f4xx_rcc.h
"

173 
	#FLAG_MASK
 ((
uöt8_t
)0x20)

	)

174 
	#MAX_TIMEOUT
 ((
uöt16_t
)0xFFFF)

	)

215 
	$CRYP_DeInô
()

218 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_CRYP
, 
ENABLE
);

221 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_CRYP
, 
DISABLE
);

222 
	}
}

231 
	$CRYP_Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
)

234 
	`as£π_∑øm
(
	`IS_CRYP_ALGOMODE
(
CRYP_InôSåu˘
->
CRYP_AlgoMode
));

235 
	`as£π_∑øm
(
	`IS_CRYP_DATATYPE
(
CRYP_InôSåu˘
->
CRYP_D©aTy≥
));

236 
	`as£π_∑øm
(
	`IS_CRYP_ALGODIR
(
CRYP_InôSåu˘
->
CRYP_AlgoDú
));

239 
CRYP
->
CR
 &~
CRYP_CR_ALGOMODE
;

240 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_AlgoMode
;

243 
CRYP
->
CR
 &~
CRYP_CR_DATATYPE
;

244 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_D©aTy≥
;

247 i‡((
CRYP_InôSåu˘
->
CRYP_AlgoMode
 =
CRYP_AlgoMode_AES_ECB
) ||

248 (
CRYP_InôSåu˘
->
CRYP_AlgoMode
 =
CRYP_AlgoMode_AES_CBC
) ||

249 (
CRYP_InôSåu˘
->
CRYP_AlgoMode
 =
CRYP_AlgoMode_AES_CTR
) ||

250 (
CRYP_InôSåu˘
->
CRYP_AlgoMode
 =
CRYP_AlgoMode_AES_Key
))

252 
	`as£π_∑øm
(
	`IS_CRYP_KEYSIZE
(
CRYP_InôSåu˘
->
CRYP_KeySize
));

253 
CRYP
->
CR
 &~
CRYP_CR_KEYSIZE
;

254 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_KeySize
;

260 
CRYP
->
CR
 &~
CRYP_CR_ALGODIR
;

261 
CRYP
->
CR
 |
CRYP_InôSåu˘
->
CRYP_AlgoDú
;

262 
	}
}

270 
	$CRYP_Såu˘Inô
(
CRYP_InôTy≥Def
* 
CRYP_InôSåu˘
)

273 
CRYP_InôSåu˘
->
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

276 
CRYP_InôSåu˘
->
CRYP_AlgoMode
 = 
CRYP_AlgoMode_TDES_ECB
;

279 
CRYP_InôSåu˘
->
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_32b
;

282 
CRYP_InôSåu˘
->
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

283 
	}
}

292 
	$CRYP_KeyInô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
)

295 
CRYP
->
K0LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Le·
;

296 
CRYP
->
K0RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Right
;

297 
CRYP
->
K1LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Le·
;

298 
CRYP
->
K1RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Right
;

299 
CRYP
->
K2LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Le·
;

300 
CRYP
->
K2RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Right
;

301 
CRYP
->
K3LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Le·
;

302 
CRYP
->
K3RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Right
;

303 
	}
}

311 
	$CRYP_KeySåu˘Inô
(
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
)

313 
CRYP_KeyInôSåu˘
->
CRYP_Key0Le·
 = 0;

314 
CRYP_KeyInôSåu˘
->
CRYP_Key0Right
 = 0;

315 
CRYP_KeyInôSåu˘
->
CRYP_Key1Le·
 = 0;

316 
CRYP_KeyInôSåu˘
->
CRYP_Key1Right
 = 0;

317 
CRYP_KeyInôSåu˘
->
CRYP_Key2Le·
 = 0;

318 
CRYP_KeyInôSåu˘
->
CRYP_Key2Right
 = 0;

319 
CRYP_KeyInôSåu˘
->
CRYP_Key3Le·
 = 0;

320 
CRYP_KeyInôSåu˘
->
CRYP_Key3Right
 = 0;

321 
	}
}

329 
	$CRYP_IVInô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
)

331 
CRYP
->
IV0LR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV0Le·
;

332 
CRYP
->
IV0RR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV0Right
;

333 
CRYP
->
IV1LR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV1Le·
;

334 
CRYP
->
IV1RR
 = 
CRYP_IVInôSåu˘
->
CRYP_IV1Right
;

335 
	}
}

343 
	$CRYP_IVSåu˘Inô
(
CRYP_IVInôTy≥Def
* 
CRYP_IVInôSåu˘
)

345 
CRYP_IVInôSåu˘
->
CRYP_IV0Le·
 = 0;

346 
CRYP_IVInôSåu˘
->
CRYP_IV0Right
 = 0;

347 
CRYP_IVInôSåu˘
->
CRYP_IV1Le·
 = 0;

348 
CRYP_IVInôSåu˘
->
CRYP_IV1Right
 = 0;

349 
	}
}

358 
	$CRYP_FIFOFlush
()

361 
CRYP
->
CR
 |
CRYP_CR_FFLUSH
;

362 
	}
}

370 
	$CRYP_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

373 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

375 i‡(
NewSèã
 !
DISABLE
)

378 
CRYP
->
CR
 |
CRYP_CR_CRYPEN
;

383 
CRYP
->
CR
 &~
CRYP_CR_CRYPEN
;

385 
	}
}

413 
	$CRYP_D©aIn
(
uöt32_t
 
D©a
)

415 
CRYP
->
DR
 = 
D©a
;

416 
	}
}

423 
uöt32_t
 
	$CRYP_D©aOut
()

425  
CRYP
->
DOUT
;

426 
	}
}

466 
Eº‹Sètus
 
	$CRYP_SaveC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtSave
,

467 
CRYP_KeyInôTy≥Def
* 
CRYP_KeyInôSåu˘
)

469 
__IO
 
uöt32_t
 
timeout
 = 0;

470 
uöt32_t
 
ckeckmask
 = 0, 
bô°©us
;

471 
Eº‹Sètus
 
°©us
 = 
ERROR
;

474 
CRYP
->
DMACR
 &~(
uöt32_t
)
CRYP_DMACR_DIEN
;

480 i‡((
CRYP
->
CR
 & (
uöt32_t
)(
CRYP_CR_ALGOMODE_TDES_ECB
 | 
CRYP_CR_ALGOMODE_TDES_CBC
)) != (uint32_t)0 )

482 
ckeckmask
 = 
CRYP_SR_IFEM
 | 
CRYP_SR_BUSY
 ;

486 
ckeckmask
 = 
CRYP_SR_IFEM
 | 
CRYP_SR_BUSY
 | 
CRYP_SR_OFNE
;

491 
bô°©us
 = 
CRYP
->
SR
 & 
ckeckmask
;

492 
timeout
++;

494 (
timeout
 !
MAX_TIMEOUT
Ë&& (
bô°©us
 !
CRYP_SR_IFEM
));

496 i‡((
CRYP
->
SR
 & 
ckeckmask
Ë!
CRYP_SR_IFEM
)

498 
°©us
 = 
ERROR
;

506 
CRYP
->
DMACR
 &~(
uöt32_t
)
CRYP_DMACR_DOEN
;

507 
CRYP
->
CR
 &~(
uöt32_t
)
CRYP_CR_CRYPEN
;

510 
CRYP_C⁄ãxtSave
->
CR_bôs9to2
 = 
CRYP
->
CR
 & (
CRYP_CR_KEYSIZE
 |

511 
CRYP_CR_DATATYPE
 |

512 
CRYP_CR_ALGOMODE
 |

513 
CRYP_CR_ALGODIR
);

516 
CRYP_C⁄ãxtSave
->
CRYP_IV0LR
 = 
CRYP
->
IV0LR
;

517 
CRYP_C⁄ãxtSave
->
CRYP_IV0RR
 = 
CRYP
->
IV0RR
;

518 
CRYP_C⁄ãxtSave
->
CRYP_IV1LR
 = 
CRYP
->
IV1LR
;

519 
CRYP_C⁄ãxtSave
->
CRYP_IV1RR
 = 
CRYP
->
IV1RR
;

522 
CRYP_C⁄ãxtSave
->
CRYP_K0LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Le·
;

523 
CRYP_C⁄ãxtSave
->
CRYP_K0RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key0Right
;

524 
CRYP_C⁄ãxtSave
->
CRYP_K1LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Le·
;

525 
CRYP_C⁄ãxtSave
->
CRYP_K1RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key1Right
;

526 
CRYP_C⁄ãxtSave
->
CRYP_K2LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Le·
;

527 
CRYP_C⁄ãxtSave
->
CRYP_K2RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key2Right
;

528 
CRYP_C⁄ãxtSave
->
CRYP_K3LR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Le·
;

529 
CRYP_C⁄ãxtSave
->
CRYP_K3RR
 = 
CRYP_KeyInôSåu˘
->
CRYP_Key3Right
;

534 
°©us
 = 
SUCCESS
;

537  
°©us
;

538 
	}
}

551 
	$CRYP_Re°‹eC⁄ãxt
(
CRYP_C⁄ãxt
* 
CRYP_C⁄ãxtRe°‹e
)

555 
CRYP
->
CR
 = 
CRYP_C⁄ãxtRe°‹e
->
CR_bôs9to2
;

558 
CRYP
->
K0LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K0LR
;

559 
CRYP
->
K0RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K0RR
;

560 
CRYP
->
K1LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K1LR
;

561 
CRYP
->
K1RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K1RR
;

562 
CRYP
->
K2LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K2LR
;

563 
CRYP
->
K2RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K2RR
;

564 
CRYP
->
K3LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K3LR
;

565 
CRYP
->
K3RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_K3RR
;

568 
CRYP
->
IV0LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV0LR
;

569 
CRYP
->
IV0RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV0RR
;

570 
CRYP
->
IV1LR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV1LR
;

571 
CRYP
->
IV1RR
 = 
CRYP_C⁄ãxtRe°‹e
->
CRYP_IV1RR
;

574 
CRYP
->
CR
 |
CRYP_CR_CRYPEN
;

575 
	}
}

612 
	$CRYP_DMACmd
(
uöt8_t
 
CRYP_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

615 
	`as£π_∑øm
(
	`IS_CRYP_DMAREQ
(
CRYP_DMAReq
));

616 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

618 i‡(
NewSèã
 !
DISABLE
)

621 
CRYP
->
DMACR
 |
CRYP_DMAReq
;

626 
CRYP
->
DMACR
 &(
uöt8_t
)~
CRYP_DMAReq
;

628 
	}
}

737 
	$CRYP_ITC⁄fig
(
uöt8_t
 
CRYP_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

740 
	`as£π_∑øm
(
	`IS_CRYP_CONFIG_IT
(
CRYP_IT
));

741 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

743 i‡(
NewSèã
 !
DISABLE
)

746 
CRYP
->
IMSCR
 |
CRYP_IT
;

751 
CRYP
->
IMSCR
 &(
uöt8_t
)~
CRYP_IT
;

753 
	}
}

765 
ITSètus
 
	$CRYP_GëITSètus
(
uöt8_t
 
CRYP_IT
)

767 
ITSètus
 
bô°©us
 = 
RESET
;

769 
	`as£π_∑øm
(
	`IS_CRYP_GET_IT
(
CRYP_IT
));

772 i‡((
CRYP
->
MISR
 & 
CRYP_IT
Ë!(
uöt8_t
)
RESET
)

775 
bô°©us
 = 
SET
;

780 
bô°©us
 = 
RESET
;

783  
bô°©us
;

784 
	}
}

799 
FœgSètus
 
	$CRYP_GëFœgSètus
(
uöt8_t
 
CRYP_FLAG
)

801 
FœgSètus
 
bô°©us
 = 
RESET
;

802 
uöt32_t
 
ãm¥eg
 = 0;

805 
	`as£π_∑øm
(
	`IS_CRYP_GET_FLAG
(
CRYP_FLAG
));

808 i‡((
CRYP_FLAG
 & 
FLAG_MASK
) != 0x00)

810 
ãm¥eg
 = 
CRYP
->
RISR
;

814 
ãm¥eg
 = 
CRYP
->
SR
;

819 i‡((
ãm¥eg
 & 
CRYP_FLAG
 ) !(
uöt8_t
)
RESET
)

822 
bô°©us
 = 
SET
;

827 
bô°©us
 = 
RESET
;

831  
bô°©us
;

832 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_cryp_aes.c

46 
	~"°m32f4xx_¸yp.h
"

59 
	#AESBUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

98 
Eº‹Sètus
 
	$CRYP_AES_ECB
(
uöt8_t
 
Mode
, uöt8_t* 
Key
, 
uöt16_t
 
Keysize
,

99 
uöt8_t
* 
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_t* 
Ouçut
)

101 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

102 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

103 
__IO
 
uöt32_t
 
cou¡î
 = 0;

104 
uöt32_t
 
busy°©us
 = 0;

105 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

106 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

107 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

108 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

109 
uöt32_t
 
i
 = 0;

112 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

114 
Keysize
)

117 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

118 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

119 
keyaddr
+=4;

120 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

121 
keyaddr
+=4;

122 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

123 
keyaddr
+=4;

124 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

127 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

128 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

129 
keyaddr
+=4;

130 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

131 
keyaddr
+=4;

132 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

133 
keyaddr
+=4;

134 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

135 
keyaddr
+=4;

136 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

137 
keyaddr
+=4;

138 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

141 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

142 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

143 
keyaddr
+=4;

144 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

145 
keyaddr
+=4;

146 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

147 
keyaddr
+=4;

148 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

149 
keyaddr
+=4;

150 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

151 
keyaddr
+=4;

152 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

153 
keyaddr
+=4;

154 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

155 
keyaddr
+=4;

156 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

163 if(
Mode
 =
MODE_DECRYPT
)

166 
	`CRYP_FIFOFlush
();

169 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

170 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_Key
;

171 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_32b
;

172 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

175 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

178 
	`CRYP_Cmd
(
ENABLE
);

183 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

184 
cou¡î
++;

185 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

187 i‡(
busy°©us
 !
RESET
)

189 
°©us
 = 
ERROR
;

194 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

201 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

204 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

207 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_ECB
;

208 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

209 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

212 
	`CRYP_FIFOFlush
();

215 
	`CRYP_Cmd
(
ENABLE
);

217 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=16)

221 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

222 
öpuèddr
+=4;

223 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

224 
öpuèddr
+=4;

225 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

226 
öpuèddr
+=4;

227 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

228 
öpuèddr
+=4;

231 
cou¡î
 = 0;

234 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

235 
cou¡î
++;

236 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

238 i‡(
busy°©us
 !
RESET
)

240 
°©us
 = 
ERROR
;

246 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

247 
ouçuèddr
+=4;

248 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

249 
ouçuèddr
+=4;

250 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

251 
ouçuèddr
+=4;

252 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

253 
ouçuèddr
+=4;

258 
	`CRYP_Cmd
(
DISABLE
);

260  
°©us
;

261 
	}
}

279 
Eº‹Sètus
 
	$CRYP_AES_CBC
(
uöt8_t
 
Mode
, uöt8_à
InôVe˘‹s
[16], uöt8_à*
Key
,

280 
uöt16_t
 
Keysize
, 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

281 
uöt8_t
 *
Ouçut
)

283 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

284 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

285 
CRYP_IVInôTy≥Def
 
AES_CRYP_IVInôSåu˘uª
;

286 
__IO
 
uöt32_t
 
cou¡î
 = 0;

287 
uöt32_t
 
busy°©us
 = 0;

288 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

289 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

290 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

291 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

292 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

293 
uöt32_t
 
i
 = 0;

296 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

298 
Keysize
)

301 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

302 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

303 
keyaddr
+=4;

304 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

305 
keyaddr
+=4;

306 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

307 
keyaddr
+=4;

308 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

311 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

312 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

313 
keyaddr
+=4;

314 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

315 
keyaddr
+=4;

316 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

317 
keyaddr
+=4;

318 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

319 
keyaddr
+=4;

320 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

321 
keyaddr
+=4;

322 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

325 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

326 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

327 
keyaddr
+=4;

328 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

329 
keyaddr
+=4;

330 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

331 
keyaddr
+=4;

332 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

333 
keyaddr
+=4;

334 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

335 
keyaddr
+=4;

336 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

337 
keyaddr
+=4;

338 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

339 
keyaddr
+=4;

340 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

347 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

348 
ivaddr
+=4;

349 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

350 
ivaddr
+=4;

351 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

352 
ivaddr
+=4;

353 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

357 if(
Mode
 =
MODE_DECRYPT
)

360 
	`CRYP_FIFOFlush
();

363 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

364 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_Key
;

365 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_32b
;

367 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

370 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

373 
	`CRYP_Cmd
(
ENABLE
);

378 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

379 
cou¡î
++;

380 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

382 i‡(
busy°©us
 !
RESET
)

384 
°©us
 = 
ERROR
;

389 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

395 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

398 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

400 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_CBC
;

401 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

402 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

405 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

408 
	`CRYP_FIFOFlush
();

411 
	`CRYP_Cmd
(
ENABLE
);

414 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=16)

418 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

419 
öpuèddr
+=4;

420 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

421 
öpuèddr
+=4;

422 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

423 
öpuèddr
+=4;

424 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

425 
öpuèddr
+=4;

427 
cou¡î
 = 0;

430 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

431 
cou¡î
++;

432 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

434 i‡(
busy°©us
 !
RESET
)

436 
°©us
 = 
ERROR
;

442 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

443 
ouçuèddr
+=4;

444 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

445 
ouçuèddr
+=4;

446 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

447 
ouçuèddr
+=4;

448 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

449 
ouçuèddr
+=4;

454 
	`CRYP_Cmd
(
DISABLE
);

456  
°©us
;

457 
	}
}

475 
Eº‹Sètus
 
	$CRYP_AES_CTR
(
uöt8_t
 
Mode
, uöt8_à
InôVe˘‹s
[16], uöt8_à*
Key
,

476 
uöt16_t
 
Keysize
, 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
,

477 
uöt8_t
 *
Ouçut
)

479 
CRYP_InôTy≥Def
 
AES_CRYP_InôSåu˘uª
;

480 
CRYP_KeyInôTy≥Def
 
AES_CRYP_KeyInôSåu˘uª
;

481 
CRYP_IVInôTy≥Def
 
AES_CRYP_IVInôSåu˘uª
;

482 
__IO
 
uöt32_t
 
cou¡î
 = 0;

483 
uöt32_t
 
busy°©us
 = 0;

484 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

485 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

486 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

487 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

488 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

489 
uöt32_t
 
i
 = 0;

492 
	`CRYP_KeySåu˘Inô
(&
AES_CRYP_KeyInôSåu˘uª
);

494 
Keysize
)

497 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_128b
;

498 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

499 
keyaddr
+=4;

500 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

501 
keyaddr
+=4;

502 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

503 
keyaddr
+=4;

504 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

507 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_192b
;

508 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

509 
keyaddr
+=4;

510 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

511 
keyaddr
+=4;

512 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

513 
keyaddr
+=4;

514 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

515 
keyaddr
+=4;

516 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

517 
keyaddr
+=4;

518 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

521 
AES_CRYP_InôSåu˘uª
.
CRYP_KeySize
 = 
CRYP_KeySize_256b
;

522 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

523 
keyaddr
+=4;

524 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key0Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

525 
keyaddr
+=4;

526 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

527 
keyaddr
+=4;

528 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

529 
keyaddr
+=4;

530 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

531 
keyaddr
+=4;

532 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

533 
keyaddr
+=4;

534 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

535 
keyaddr
+=4;

536 
AES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

542 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

543 
ivaddr
+=4;

544 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

545 
ivaddr
+=4;

546 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

547 
ivaddr
+=4;

548 
AES_CRYP_IVInôSåu˘uª
.
CRYP_IV1Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

551 
	`CRYP_KeyInô
(&
AES_CRYP_KeyInôSåu˘uª
);

554 if(
Mode
 =
MODE_DECRYPT
)

557 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

563 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

565 
AES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_AES_CTR
;

566 
AES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

567 
	`CRYP_Inô
(&
AES_CRYP_InôSåu˘uª
);

570 
	`CRYP_IVInô
(&
AES_CRYP_IVInôSåu˘uª
);

573 
	`CRYP_FIFOFlush
();

576 
	`CRYP_Cmd
(
ENABLE
);

578 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=16)

582 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

583 
öpuèddr
+=4;

584 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

585 
öpuèddr
+=4;

586 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

587 
öpuèddr
+=4;

588 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

589 
öpuèddr
+=4;

591 
cou¡î
 = 0;

594 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

595 
cou¡î
++;

596 }(
cou¡î
 !
AESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

598 i‡(
busy°©us
 !
RESET
)

600 
°©us
 = 
ERROR
;

606 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

607 
ouçuèddr
+=4;

608 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

609 
ouçuèddr
+=4;

610 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

611 
ouçuèddr
+=4;

612 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

613 
ouçuèddr
+=4;

617 
	`CRYP_Cmd
(
DISABLE
);

619  
°©us
;

620 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_cryp_des.c

43 
	~"°m32f4xx_¸yp.h
"

57 
	#DESBUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

94 
Eº‹Sètus
 
	$CRYP_DES_ECB
(
uöt8_t
 
Mode
, uöt8_à
Key
[8], uöt8_à*
I≈ut
,

95 
uöt32_t
 
IÀngth
, 
uöt8_t
 *
Ouçut
)

97 
CRYP_InôTy≥Def
 
DES_CRYP_InôSåu˘uª
;

98 
CRYP_KeyInôTy≥Def
 
DES_CRYP_KeyInôSåu˘uª
;

99 
__IO
 
uöt32_t
 
cou¡î
 = 0;

100 
uöt32_t
 
busy°©us
 = 0;

101 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

102 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

103 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

104 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

105 
uöt32_t
 
i
 = 0;

108 
	`CRYP_KeySåu˘Inô
(&
DES_CRYP_KeyInôSåu˘uª
);

111 if–
Mode
 =
MODE_ENCRYPT
 )

113 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

117 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

120 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_DES_ECB
;

121 
DES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

122 
	`CRYP_Inô
(&
DES_CRYP_InôSåu˘uª
);

125 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

126 
keyaddr
+=4;

127 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

128 
	`CRYP_KeyInô
(& 
DES_CRYP_KeyInôSåu˘uª
);

131 
	`CRYP_FIFOFlush
();

134 
	`CRYP_Cmd
(
ENABLE
);

136 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

140 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

141 
öpuèddr
+=4;

142 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

143 
öpuèddr
+=4;

146 
cou¡î
 = 0;

149 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

150 
cou¡î
++;

151 }(
cou¡î
 !
DESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

153 i‡(
busy°©us
 !
RESET
)

155 
°©us
 = 
ERROR
;

161 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

162 
ouçuèddr
+=4;

163 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

164 
ouçuèddr
+=4;

169 
	`CRYP_Cmd
(
DISABLE
);

171  
°©us
;

172 
	}
}

189 
Eº‹Sètus
 
	$CRYP_DES_CBC
(
uöt8_t
 
Mode
, uöt8_à
Key
[8], uöt8_à
InôVe˘‹s
[8],

190 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_à*
Ouçut
)

192 
CRYP_InôTy≥Def
 
DES_CRYP_InôSåu˘uª
;

193 
CRYP_KeyInôTy≥Def
 
DES_CRYP_KeyInôSåu˘uª
;

194 
CRYP_IVInôTy≥Def
 
DES_CRYP_IVInôSåu˘uª
;

195 
__IO
 
uöt32_t
 
cou¡î
 = 0;

196 
uöt32_t
 
busy°©us
 = 0;

197 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

198 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

199 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

200 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

201 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

202 
uöt32_t
 
i
 = 0;

205 
	`CRYP_KeySåu˘Inô
(&
DES_CRYP_KeyInôSåu˘uª
);

208 if(
Mode
 =
MODE_ENCRYPT
)

210 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

214 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

217 
DES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_DES_CBC
;

218 
DES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

219 
	`CRYP_Inô
(&
DES_CRYP_InôSåu˘uª
);

222 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

223 
keyaddr
+=4;

224 
DES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

225 
	`CRYP_KeyInô
(& 
DES_CRYP_KeyInôSåu˘uª
);

228 
DES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

229 
ivaddr
+=4;

230 
DES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

231 
	`CRYP_IVInô
(&
DES_CRYP_IVInôSåu˘uª
);

234 
	`CRYP_FIFOFlush
();

237 
	`CRYP_Cmd
(
ENABLE
);

239 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

242 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

243 
öpuèddr
+=4;

244 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

245 
öpuèddr
+=4;

248 
cou¡î
 = 0;

251 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

252 
cou¡î
++;

253 }(
cou¡î
 !
DESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

255 i‡(
busy°©us
 !
RESET
)

257 
°©us
 = 
ERROR
;

262 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

263 
ouçuèddr
+=4;

264 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

265 
ouçuèddr
+=4;

270 
	`CRYP_Cmd
(
DISABLE
);

272  
°©us
;

273 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_cryp_tdes.c

43 
	~"°m32f4xx_¸yp.h
"

57 
	#TDESBUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

96 
Eº‹Sètus
 
	$CRYP_TDES_ECB
(
uöt8_t
 
Mode
, uöt8_à
Key
[24], uöt8_à*
I≈ut
,

97 
uöt32_t
 
IÀngth
, 
uöt8_t
 *
Ouçut
)

99 
CRYP_InôTy≥Def
 
TDES_CRYP_InôSåu˘uª
;

100 
CRYP_KeyInôTy≥Def
 
TDES_CRYP_KeyInôSåu˘uª
;

101 
__IO
 
uöt32_t
 
cou¡î
 = 0;

102 
uöt32_t
 
busy°©us
 = 0;

103 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

104 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

105 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

106 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

107 
uöt32_t
 
i
 = 0;

110 
	`CRYP_KeySåu˘Inô
(&
TDES_CRYP_KeyInôSåu˘uª
);

113 if(
Mode
 =
MODE_ENCRYPT
)

115 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

119 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

122 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_TDES_ECB
;

123 
TDES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

124 
	`CRYP_Inô
(&
TDES_CRYP_InôSåu˘uª
);

127 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

128 
keyaddr
+=4;

129 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

130 
keyaddr
+=4;

131 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

132 
keyaddr
+=4;

133 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

134 
keyaddr
+=4;

135 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

136 
keyaddr
+=4;

137 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

138 
	`CRYP_KeyInô
(& 
TDES_CRYP_KeyInôSåu˘uª
);

141 
	`CRYP_FIFOFlush
();

144 
	`CRYP_Cmd
(
ENABLE
);

146 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

149 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

150 
öpuèddr
+=4;

151 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

152 
öpuèddr
+=4;

155 
cou¡î
 = 0;

158 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

159 
cou¡î
++;

160 }(
cou¡î
 !
TDESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

162 i‡(
busy°©us
 !
RESET
)

164 
°©us
 = 
ERROR
;

170 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

171 
ouçuèddr
+=4;

172 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

173 
ouçuèddr
+=4;

178 
	`CRYP_Cmd
(
DISABLE
);

180  
°©us
;

181 
	}
}

198 
Eº‹Sètus
 
	$CRYP_TDES_CBC
(
uöt8_t
 
Mode
, uöt8_à
Key
[24], uöt8_à
InôVe˘‹s
[8],

199 
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀngth
, uöt8_à*
Ouçut
)

201 
CRYP_InôTy≥Def
 
TDES_CRYP_InôSåu˘uª
;

202 
CRYP_KeyInôTy≥Def
 
TDES_CRYP_KeyInôSåu˘uª
;

203 
CRYP_IVInôTy≥Def
 
TDES_CRYP_IVInôSåu˘uª
;

204 
__IO
 
uöt32_t
 
cou¡î
 = 0;

205 
uöt32_t
 
busy°©us
 = 0;

206 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

207 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

208 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

209 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

210 
uöt32_t
 
ivaddr
 = (uöt32_t)
InôVe˘‹s
;

211 
uöt32_t
 
i
 = 0;

214 
	`CRYP_KeySåu˘Inô
(&
TDES_CRYP_KeyInôSåu˘uª
);

217 if(
Mode
 =
MODE_ENCRYPT
)

219 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_En¸y±
;

223 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoDú
 = 
CRYP_AlgoDú_De¸y±
;

225 
TDES_CRYP_InôSåu˘uª
.
CRYP_AlgoMode
 = 
CRYP_AlgoMode_TDES_CBC
;

226 
TDES_CRYP_InôSåu˘uª
.
CRYP_D©aTy≥
 = 
CRYP_D©aTy≥_8b
;

228 
	`CRYP_Inô
(&
TDES_CRYP_InôSåu˘uª
);

231 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

232 
keyaddr
+=4;

233 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key1Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

234 
keyaddr
+=4;

235 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

236 
keyaddr
+=4;

237 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key2Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

238 
keyaddr
+=4;

239 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Le·
 = 
	`__REV
(*(
uöt32_t
*)(
keyaddr
));

240 
keyaddr
+=4;

241 
TDES_CRYP_KeyInôSåu˘uª
.
CRYP_Key3Right

	`__REV
(*(
uöt32_t
*)(
keyaddr
));

242 
	`CRYP_KeyInô
(& 
TDES_CRYP_KeyInôSåu˘uª
);

245 
TDES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Le·
 = 
	`__REV
(*(
uöt32_t
*)(
ivaddr
));

246 
ivaddr
+=4;

247 
TDES_CRYP_IVInôSåu˘uª
.
CRYP_IV0Right

	`__REV
(*(
uöt32_t
*)(
ivaddr
));

248 
	`CRYP_IVInô
(&
TDES_CRYP_IVInôSåu˘uª
);

251 
	`CRYP_FIFOFlush
();

254 
	`CRYP_Cmd
(
ENABLE
);

256 
i
=0; ((i<
IÀngth
Ë&& (
°©us
 !
ERROR
)); i+=8)

259 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

260 
öpuèddr
+=4;

261 
	`CRYP_D©aIn
(*(
uöt32_t
*)(
öpuèddr
));

262 
öpuèddr
+=4;

265 
cou¡î
 = 0;

268 
busy°©us
 = 
	`CRYP_GëFœgSètus
(
CRYP_FLAG_BUSY
);

269 
cou¡î
++;

270 }(
cou¡î
 !
TDESBUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

272 i‡(
busy°©us
 !
RESET
)

274 
°©us
 = 
ERROR
;

280 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

281 
ouçuèddr
+=4;

282 *(
uöt32_t
*)(
ouçuèddr
Ë
	`CRYP_D©aOut
();

283 
ouçuèddr
+=4;

288 
	`CRYP_Cmd
(
DISABLE
);

290  
°©us
;

291 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_dac.c

118 
	~"°m32f4xx_dac.h
"

119 
	~"°m32f4xx_rcc.h
"

134 
	#CR_CLEAR_MASK
 ((
uöt32_t
)0x00000FFE)

	)

137 
	#DUAL_SWTRIG_SET
 ((
uöt32_t
)0x00000003)

	)

138 
	#DUAL_SWTRIG_RESET
 ((
uöt32_t
)0xFFFFFFFC)

	)

141 
	#DHR12R1_OFFSET
 ((
uöt32_t
)0x00000008)

	)

142 
	#DHR12R2_OFFSET
 ((
uöt32_t
)0x00000014)

	)

143 
	#DHR12RD_OFFSET
 ((
uöt32_t
)0x00000020)

	)

146 
	#DOR_OFFSET
 ((
uöt32_t
)0x0000002C)

	)

174 
	$DAC_DeInô
()

177 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
ENABLE
);

179 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
DISABLE
);

180 
	}
}

193 
	$DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

195 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

198 
	`as£π_∑øm
(
	`IS_DAC_TRIGGER
(
DAC_InôSåu˘
->
DAC_Triggî
));

199 
	`as£π_∑øm
(
	`IS_DAC_GENERATE_WAVE
(
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
));

200 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
));

201 
	`as£π_∑øm
(
	`IS_DAC_OUTPUT_BUFFER_STATE
(
DAC_InôSåu˘
->
DAC_OuçutBuf„r
));

205 
tm¥eg1
 = 
DAC
->
CR
;

207 
tm¥eg1
 &~(
CR_CLEAR_MASK
 << 
DAC_Ch™√l
);

214 
tm¥eg2
 = (
DAC_InôSåu˘
->
DAC_Triggî
 | DAC_InôSåu˘->
DAC_WaveGíî©i⁄
 |

215 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 | \

216 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
);

218 
tm¥eg1
 |
tm¥eg2
 << 
DAC_Ch™√l
;

220 
DAC
->
CR
 = 
tm¥eg1
;

221 
	}
}

229 
	$DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

233 
DAC_InôSåu˘
->
DAC_Triggî
 = 
DAC_Triggî_N⁄e
;

235 
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
 = 
DAC_WaveGíî©i⁄_N⁄e
;

237 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 = 
DAC_LFSRUnmask_Bô0
;

239 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
 = 
DAC_OuçutBuf„r_E«bÀ
;

240 
	}
}

253 
	$DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

256 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

257 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

259 i‡(
NewSèã
 !
DISABLE
)

262 
DAC
->
CR
 |(
DAC_CR_EN1
 << 
DAC_Ch™√l
);

267 
DAC
->
CR
 &(~(
DAC_CR_EN1
 << 
DAC_Ch™√l
));

269 
	}
}

281 
	$DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

284 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

285 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

287 i‡(
NewSèã
 !
DISABLE
)

290 
DAC
->
SWTRIGR
 |(
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4);

295 
DAC
->
SWTRIGR
 &~((
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4));

297 
	}
}

305 
	$DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

308 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

310 i‡(
NewSèã
 !
DISABLE
)

313 
DAC
->
SWTRIGR
 |
DUAL_SWTRIG_SET
;

318 
DAC
->
SWTRIGR
 &
DUAL_SWTRIG_RESET
;

320 
	}
}

336 
	$DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

339 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

340 
	`as£π_∑øm
(
	`IS_DAC_WAVE
(
DAC_Wave
));

341 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

343 i‡(
NewSèã
 !
DISABLE
)

346 
DAC
->
CR
 |
DAC_Wave
 << 
DAC_Ch™√l
;

351 
DAC
->
CR
 &~(
DAC_Wave
 << 
DAC_Ch™√l
);

353 
	}
}

365 
	$DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

367 
__IO
 
uöt32_t
 
tmp
 = 0;

370 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

371 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

373 
tmp
 = (
uöt32_t
)
DAC_BASE
;

374 
tmp
 +
DHR12R1_OFFSET
 + 
DAC_Align
;

377 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

378 
	}
}

390 
	$DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

392 
__IO
 
uöt32_t
 
tmp
 = 0;

395 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

396 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

398 
tmp
 = (
uöt32_t
)
DAC_BASE
;

399 
tmp
 +
DHR12R2_OFFSET
 + 
DAC_Align
;

402 *(
__IO
 
uöt32_t
 *)
tmp
 = 
D©a
;

403 
	}
}

418 
	$DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
)

420 
uöt32_t
 
d©a
 = 0, 
tmp
 = 0;

423 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

424 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a1
));

425 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a2
));

428 i‡(
DAC_Align
 =
DAC_Align_8b_R
)

430 
d©a
 = ((
uöt32_t
)
D©a2
 << 8Ë| 
D©a1
;

434 
d©a
 = ((
uöt32_t
)
D©a2
 << 16Ë| 
D©a1
;

437 
tmp
 = (
uöt32_t
)
DAC_BASE
;

438 
tmp
 +
DHR12RD_OFFSET
 + 
DAC_Align
;

441 *(
__IO
 
uöt32_t
 *)
tmp
 = 
d©a
;

442 
	}
}

452 
uöt16_t
 
	$DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
)

454 
__IO
 
uöt32_t
 
tmp
 = 0;

457 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

459 
tmp
 = (
uöt32_t
Ë
DAC_BASE
 ;

460 
tmp
 +
DOR_OFFSET
 + ((
uöt32_t
)
DAC_Ch™√l
 >> 2);

463  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

464 
	}
}

497 
	$DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

500 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

501 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

503 i‡(
NewSèã
 !
DISABLE
)

506 
DAC
->
CR
 |(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
);

511 
DAC
->
CR
 &(~(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
));

513 
	}
}

545 
	$DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

548 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

549 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

550 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

552 i‡(
NewSèã
 !
DISABLE
)

555 
DAC
->
CR
 |(
DAC_IT
 << 
DAC_Ch™√l
);

560 
DAC
->
CR
 &(~(
uöt32_t
)(
DAC_IT
 << 
DAC_Ch™√l
));

562 
	}
}

577 
FœgSètus
 
	$DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

579 
FœgSètus
 
bô°©us
 = 
RESET
;

581 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

582 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

585 i‡((
DAC
->
SR
 & (
DAC_FLAG
 << 
DAC_Ch™√l
)Ë!(
uöt8_t
)
RESET
)

588 
bô°©us
 = 
SET
;

593 
bô°©us
 = 
RESET
;

596  
bô°©us
;

597 
	}
}

612 
	$DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

615 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

616 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

619 
DAC
->
SR
 = (
DAC_FLAG
 << 
DAC_Ch™√l
);

620 
	}
}

635 
ITSètus
 
	$DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

637 
ITSètus
 
bô°©us
 = 
RESET
;

638 
uöt32_t
 
íabÀ°©us
 = 0;

641 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

642 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

645 
íabÀ°©us
 = (
DAC
->
CR
 & (
DAC_IT
 << 
DAC_Ch™√l
)) ;

648 i‡(((
DAC
->
SR
 & (
DAC_IT
 << 
DAC_Ch™√l
)Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

651 
bô°©us
 = 
SET
;

656 
bô°©us
 = 
RESET
;

659  
bô°©us
;

660 
	}
}

675 
	$DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

678 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

679 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

682 
DAC
->
SR
 = (
DAC_IT
 << 
DAC_Ch™√l
);

683 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_dbgmcu.c

23 
	~"°m32f4xx_dbgmcu.h
"

36 
	#IDCODE_DEVID_MASK
 ((
uöt32_t
)0x00000FFF)

	)

52 
uöt32_t
 
	$DBGMCU_GëREVID
()

54 (
DBGMCU
->
IDCODE
 >> 16);

55 
	}
}

62 
uöt32_t
 
	$DBGMCU_GëDEVID
()

64 (
DBGMCU
->
IDCODE
 & 
IDCODE_DEVID_MASK
);

65 
	}
}

78 
	$DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

81 
	`as£π_∑øm
(
	`IS_DBGMCU_PERIPH
(
DBGMCU_Pîùh
));

82 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

83 i‡(
NewSèã
 !
DISABLE
)

85 
DBGMCU
->
CR
 |
DBGMCU_Pîùh
;

89 
DBGMCU
->
CR
 &~
DBGMCU_Pîùh
;

91 
	}
}

117 
	$DBGMCU_APB1PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

120 
	`as£π_∑øm
(
	`IS_DBGMCU_APB1PERIPH
(
DBGMCU_Pîùh
));

121 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

123 i‡(
NewSèã
 !
DISABLE
)

125 
DBGMCU
->
APB1FZ
 |
DBGMCU_Pîùh
;

129 
DBGMCU
->
APB1FZ
 &~
DBGMCU_Pîùh
;

131 
	}
}

146 
	$DBGMCU_APB2PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

149 
	`as£π_∑øm
(
	`IS_DBGMCU_APB2PERIPH
(
DBGMCU_Pîùh
));

150 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

152 i‡(
NewSèã
 !
DISABLE
)

154 
DBGMCU
->
APB2FZ
 |
DBGMCU_Pîùh
;

158 
DBGMCU
->
APB2FZ
 &~
DBGMCU_Pîùh
;

160 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_dcmi.c

82 
	~"°m32f4xx_dcmi.h
"

83 
	~"°m32f4xx_rcc.h
"

122 
	$DCMI_DeInô
()

124 
DCMI
->
CR
 = 0x0;

125 
DCMI
->
IER
 = 0x0;

126 
DCMI
->
ICR
 = 0x1F;

127 
DCMI
->
ESCR
 = 0x0;

128 
DCMI
->
ESUR
 = 0x0;

129 
DCMI
->
CWSTRTR
 = 0x0;

130 
DCMI
->
CWSIZER
 = 0x0;

131 
	}
}

139 
	$DCMI_Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
)

141 
uöt32_t
 
ãmp
 = 0x0;

144 
	`as£π_∑øm
(
	`IS_DCMI_CAPTURE_MODE
(
DCMI_InôSåu˘
->
DCMI_C≠tuªMode
));

145 
	`as£π_∑øm
(
	`IS_DCMI_SYNCHRO
(
DCMI_InôSåu˘
->
DCMI_SynchroMode
));

146 
	`as£π_∑øm
(
	`IS_DCMI_PCKPOLARITY
(
DCMI_InôSåu˘
->
DCMI_PCKPﬁ¨ôy
));

147 
	`as£π_∑øm
(
	`IS_DCMI_VSPOLARITY
(
DCMI_InôSåu˘
->
DCMI_VSPﬁ¨ôy
));

148 
	`as£π_∑øm
(
	`IS_DCMI_HSPOLARITY
(
DCMI_InôSåu˘
->
DCMI_HSPﬁ¨ôy
));

149 
	`as£π_∑øm
(
	`IS_DCMI_CAPTURE_RATE
(
DCMI_InôSåu˘
->
DCMI_C≠tuªR©e
));

150 
	`as£π_∑øm
(
	`IS_DCMI_EXTENDED_DATA
(
DCMI_InôSåu˘
->
DCMI_ExãndedD©aMode
));

154 
DCMI
->
CR
 &~(
DCMI_CR_ENABLE
 | 
DCMI_CR_CAPTURE
);

157 
ãmp
 = 
DCMI
->
CR
;

159 
ãmp
 &~((
uöt32_t
)
DCMI_CR_CM
 | 
DCMI_CR_ESS
 | 
DCMI_CR_PCKPOL
 |

160 
DCMI_CR_HSPOL
 | 
DCMI_CR_VSPOL
 | 
DCMI_CR_FCRC_0
 |

161 
DCMI_CR_FCRC_1
 | 
DCMI_CR_EDM_0
 | 
DCMI_CR_EDM_1
);

164 
ãmp
 |((
uöt32_t
)
DCMI_InôSåu˘
->
DCMI_C≠tuªMode
 |

165 
DCMI_InôSåu˘
->
DCMI_SynchroMode
 |

166 
DCMI_InôSåu˘
->
DCMI_PCKPﬁ¨ôy
 |

167 
DCMI_InôSåu˘
->
DCMI_VSPﬁ¨ôy
 |

168 
DCMI_InôSåu˘
->
DCMI_HSPﬁ¨ôy
 |

169 
DCMI_InôSåu˘
->
DCMI_C≠tuªR©e
 |

170 
DCMI_InôSåu˘
->
DCMI_ExãndedD©aMode
);

172 
DCMI
->
CR
 = 
ãmp
;

173 
	}
}

181 
	$DCMI_Såu˘Inô
(
DCMI_InôTy≥Def
* 
DCMI_InôSåu˘
)

184 
DCMI_InôSåu˘
->
DCMI_C≠tuªMode
 = 
DCMI_C≠tuªMode_C⁄töuous
;

185 
DCMI_InôSåu˘
->
DCMI_SynchroMode
 = 
DCMI_SynchroMode_H¨dw¨e
;

186 
DCMI_InôSåu˘
->
DCMI_PCKPﬁ¨ôy
 = 
DCMI_PCKPﬁ¨ôy_FÆlög
;

187 
DCMI_InôSåu˘
->
DCMI_VSPﬁ¨ôy
 = 
DCMI_VSPﬁ¨ôy_Low
;

188 
DCMI_InôSåu˘
->
DCMI_HSPﬁ¨ôy
 = 
DCMI_HSPﬁ¨ôy_Low
;

189 
DCMI_InôSåu˘
->
DCMI_C≠tuªR©e
 = 
DCMI_C≠tuªR©e_AŒ_Føme
;

190 
DCMI_InôSåu˘
->
DCMI_ExãndedD©aMode
 = 
DCMI_ExãndedD©aMode_8b
;

191 
	}
}

201 
	$DCMI_CROPC⁄fig
(
DCMI_CROPInôTy≥Def
* 
DCMI_CROPInôSåu˘
)

204 
DCMI
->
CWSTRTR
 = (
uöt32_t
)((uöt32_t)
DCMI_CROPInôSåu˘
->
DCMI_H‹iz⁄èlOff£tCou¡
 |

205 ((
uöt32_t
)
DCMI_CROPInôSåu˘
->
DCMI_VîtiˇlSèπLöe
 << 16));

208 
DCMI
->
CWSIZER
 = (
uöt32_t
)(
DCMI_CROPInôSåu˘
->
DCMI_C≠tuªCou¡
 |

209 ((
uöt32_t
)
DCMI_CROPInôSåu˘
->
DCMI_VîtiˇlLöeCou¡
 << 16));

210 
	}
}

219 
	$DCMI_CROPCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

222 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

224 i‡(
NewSèã
 !
DISABLE
)

227 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_CROP
;

232 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_CROP
;

234 
	}
}

242 
	$DCMI_SëEmbeddedSynchroCodes
(
DCMI_CodesInôTy≥Def
* 
DCMI_CodesInôSåu˘
)

244 
DCMI
->
ESCR
 = (
uöt32_t
)(
DCMI_CodesInôSåu˘
->
DCMI_FømeSèπCode
 |

245 ((
uöt32_t
)
DCMI_CodesInôSåu˘
->
DCMI_LöeSèπCode
 << 8)|

246 ((
uöt32_t
)
DCMI_CodesInôSåu˘
->
DCMI_LöeEndCode
 << 16)|

247 ((
uöt32_t
)
DCMI_CodesInôSåu˘
->
DCMI_FømeEndCode
 << 24));

248 
	}
}

257 
	$DCMI_JPEGCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

260 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

262 i‡(
NewSèã
 !
DISABLE
)

265 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_JPEG
;

270 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_JPEG
;

272 
	}
}

295 
	$DCMI_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

298 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

300 i‡(
NewSèã
 !
DISABLE
)

303 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_ENABLE
;

308 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_ENABLE
;

310 
	}
}

318 
	$DCMI_C≠tuªCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

321 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

323 i‡(
NewSèã
 !
DISABLE
)

326 
DCMI
->
CR
 |(
uöt32_t
)
DCMI_CR_CAPTURE
;

331 
DCMI
->
CR
 &~(
uöt32_t
)
DCMI_CR_CAPTURE
;

333 
	}
}

340 
uöt32_t
 
	$DCMI_RódD©a
()

342  
DCMI
->
DR
;

343 
	}
}

373 
	$DCMI_ITC⁄fig
(
uöt16_t
 
DCMI_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

376 
	`as£π_∑øm
(
	`IS_DCMI_CONFIG_IT
(
DCMI_IT
));

377 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

379 i‡(
NewSèã
 !
DISABLE
)

382 
DCMI
->
IER
 |
DCMI_IT
;

387 
DCMI
->
IER
 &(
uöt16_t
)(~
DCMI_IT
);

389 
	}
}

410 
FœgSètus
 
	$DCMI_GëFœgSètus
(
uöt16_t
 
DCMI_FLAG
)

412 
FœgSètus
 
bô°©us
 = 
RESET
;

413 
uöt32_t
 
dcmúeg
, 
ãm¥eg
 = 0;

416 
	`as£π_∑øm
(
	`IS_DCMI_GET_FLAG
(
DCMI_FLAG
));

419 
dcmúeg
 = (((
uöt16_t
)
DCMI_FLAG
) >> 12);

421 i‡(
dcmúeg
 == 0x01)

423 
ãm¥eg

DCMI
->
RISR
;

425 i‡(
dcmúeg
 == 0x02)

427 
ãm¥eg
 = 
DCMI
->
SR
;

431 
ãm¥eg
 = 
DCMI
->
MISR
;

434 i‡((
ãm¥eg
 & 
DCMI_FLAG
Ë!(
uöt16_t
)
RESET
 )

436 
bô°©us
 = 
SET
;

440 
bô°©us
 = 
RESET
;

443  
bô°©us
;

444 
	}
}

457 
	$DCMI_CÀ¨Fœg
(
uöt16_t
 
DCMI_FLAG
)

460 
	`as£π_∑øm
(
	`IS_DCMI_CLEAR_FLAG
(
DCMI_FLAG
));

465 
DCMI
->
ICR
 = 
DCMI_FLAG
;

466 
	}
}

479 
ITSètus
 
	$DCMI_GëITSètus
(
uöt16_t
 
DCMI_IT
)

481 
ITSètus
 
bô°©us
 = 
RESET
;

482 
uöt32_t
 
ô°©us
 = 0;

485 
	`as£π_∑øm
(
	`IS_DCMI_GET_IT
(
DCMI_IT
));

487 
ô°©us
 = 
DCMI
->
MISR
 & 
DCMI_IT
;

489 i‡((
ô°©us
 !(
uöt16_t
)
RESET
))

491 
bô°©us
 = 
SET
;

495 
bô°©us
 = 
RESET
;

497  
bô°©us
;

498 
	}
}

511 
	$DCMI_CÀ¨ITPídögBô
(
uöt16_t
 
DCMI_IT
)

516 
DCMI
->
ICR
 = 
DCMI_IT
;

517 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_dma.c

116 
	~"°m32f4xx_dma.h
"

117 
	~"°m32f4xx_rcc.h
"

132 
	#TRANSFER_IT_ENABLE_MASK
 (
uöt32_t
)(
DMA_SxCR_TCIE
 | 
DMA_SxCR_HTIE
 | \

133 
DMA_SxCR_TEIE
 | 
DMA_SxCR_DMEIE
)

	)

135 
	#DMA_Såóm0_IT_MASK
 (
uöt32_t
)(
DMA_LISR_FEIF0
 | 
DMA_LISR_DMEIF0
 | \

136 
DMA_LISR_TEIF0
 | 
DMA_LISR_HTIF0
 | \

137 
DMA_LISR_TCIF0
)

	)

139 
	#DMA_Såóm1_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 << 6)

	)

140 
	#DMA_Såóm2_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 << 16)

	)

141 
	#DMA_Såóm3_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 << 22)

	)

142 
	#DMA_Såóm4_IT_MASK
 (
uöt32_t
)(
DMA_Såóm0_IT_MASK
 | (uöt32_t)0x20000000)

	)

143 
	#DMA_Såóm5_IT_MASK
 (
uöt32_t
)(
DMA_Såóm1_IT_MASK
 | (uöt32_t)0x20000000)

	)

144 
	#DMA_Såóm6_IT_MASK
 (
uöt32_t
)(
DMA_Såóm2_IT_MASK
 | (uöt32_t)0x20000000)

	)

145 
	#DMA_Såóm7_IT_MASK
 (
uöt32_t
)(
DMA_Såóm3_IT_MASK
 | (uöt32_t)0x20000000)

	)

146 
	#TRANSFER_IT_MASK
 (
uöt32_t
)0x0F3C0F3C

	)

147 
	#HIGH_ISR_MASK
 (
uöt32_t
)0x20000000

	)

148 
	#RESERVED_MASK
 (
uöt32_t
)0x0F7D0F7D

	)

188 
	$DMA_DeInô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

191 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

194 
DMAy_Såómx
->
CR
 &~((
uöt32_t
)
DMA_SxCR_EN
);

197 
DMAy_Såómx
->
CR
 = 0;

200 
DMAy_Såómx
->
NDTR
 = 0;

203 
DMAy_Såómx
->
PAR
 = 0;

206 
DMAy_Såómx
->
M0AR
 = 0;

209 
DMAy_Såómx
->
M1AR
 = 0;

212 
DMAy_Såómx
->
FCR
 = (
uöt32_t
)0x00000021;

215 i‡(
DMAy_Såómx
 =
DMA1_Såóm0
)

218 
DMA1
->
LIFCR
 = 
DMA_Såóm0_IT_MASK
;

220 i‡(
DMAy_Såómx
 =
DMA1_Såóm1
)

223 
DMA1
->
LIFCR
 = 
DMA_Såóm1_IT_MASK
;

225 i‡(
DMAy_Såómx
 =
DMA1_Såóm2
)

228 
DMA1
->
LIFCR
 = 
DMA_Såóm2_IT_MASK
;

230 i‡(
DMAy_Såómx
 =
DMA1_Såóm3
)

233 
DMA1
->
LIFCR
 = 
DMA_Såóm3_IT_MASK
;

235 i‡(
DMAy_Såómx
 =
DMA1_Såóm4
)

238 
DMA1
->
HIFCR
 = 
DMA_Såóm4_IT_MASK
;

240 i‡(
DMAy_Såómx
 =
DMA1_Såóm5
)

243 
DMA1
->
HIFCR
 = 
DMA_Såóm5_IT_MASK
;

245 i‡(
DMAy_Såómx
 =
DMA1_Såóm6
)

248 
DMA1
->
HIFCR
 = (
uöt32_t
)
DMA_Såóm6_IT_MASK
;

250 i‡(
DMAy_Såómx
 =
DMA1_Såóm7
)

253 
DMA1
->
HIFCR
 = 
DMA_Såóm7_IT_MASK
;

255 i‡(
DMAy_Såómx
 =
DMA2_Såóm0
)

258 
DMA2
->
LIFCR
 = 
DMA_Såóm0_IT_MASK
;

260 i‡(
DMAy_Såómx
 =
DMA2_Såóm1
)

263 
DMA2
->
LIFCR
 = 
DMA_Såóm1_IT_MASK
;

265 i‡(
DMAy_Såómx
 =
DMA2_Såóm2
)

268 
DMA2
->
LIFCR
 = 
DMA_Såóm2_IT_MASK
;

270 i‡(
DMAy_Såómx
 =
DMA2_Såóm3
)

273 
DMA2
->
LIFCR
 = 
DMA_Såóm3_IT_MASK
;

275 i‡(
DMAy_Såómx
 =
DMA2_Såóm4
)

278 
DMA2
->
HIFCR
 = 
DMA_Såóm4_IT_MASK
;

280 i‡(
DMAy_Såómx
 =
DMA2_Såóm5
)

283 
DMA2
->
HIFCR
 = 
DMA_Såóm5_IT_MASK
;

285 i‡(
DMAy_Såómx
 =
DMA2_Såóm6
)

288 
DMA2
->
HIFCR
 = 
DMA_Såóm6_IT_MASK
;

292 i‡(
DMAy_Såómx
 =
DMA2_Såóm7
)

295 
DMA2
->
HIFCR
 = 
DMA_Såóm7_IT_MASK
;

298 
	}
}

311 
	$DMA_Inô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

313 
uöt32_t
 
tm¥eg
 = 0;

316 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

317 
	`as£π_∑øm
(
	`IS_DMA_CHANNEL
(
DMA_InôSåu˘
->
DMA_Ch™√l
));

318 
	`as£π_∑øm
(
	`IS_DMA_DIRECTION
(
DMA_InôSåu˘
->
DMA_DIR
));

319 
	`as£π_∑øm
(
	`IS_DMA_BUFFER_SIZE
(
DMA_InôSåu˘
->
DMA_Buf„rSize
));

320 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
DMA_InôSåu˘
->
DMA_PîùhîÆInc
));

321 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
DMA_InôSåu˘
->
DMA_Mem‹yInc
));

322 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
));

323 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
));

324 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
DMA_InôSåu˘
->
DMA_Mode
));

325 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
DMA_InôSåu˘
->
DMA_Pri‹ôy
));

326 
	`as£π_∑øm
(
	`IS_DMA_FIFO_MODE_STATE
(
DMA_InôSåu˘
->
DMA_FIFOMode
));

327 
	`as£π_∑øm
(
	`IS_DMA_FIFO_THRESHOLD
(
DMA_InôSåu˘
->
DMA_FIFOThªshﬁd
));

328 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_BURST
(
DMA_InôSåu˘
->
DMA_Mem‹yBur°
));

329 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_BURST
(
DMA_InôSåu˘
->
DMA_PîùhîÆBur°
));

333 
tm¥eg
 = 
DMAy_Såómx
->
CR
;

336 
tm¥eg
 &((
uöt32_t
)~(
DMA_SxCR_CHSEL
 | 
DMA_SxCR_MBURST
 | 
DMA_SxCR_PBURST
 | \

337 
DMA_SxCR_PL
 | 
DMA_SxCR_MSIZE
 | 
DMA_SxCR_PSIZE
 | \

338 
DMA_SxCR_MINC
 | 
DMA_SxCR_PINC
 | 
DMA_SxCR_CIRC
 | \

339 
DMA_SxCR_DIR
));

352 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_Ch™√l
 | DMA_InôSåu˘->
DMA_DIR
 |

353 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 | DMA_InôSåu˘->
DMA_Mem‹yInc
 |

354 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 | DMA_InôSåu˘->
DMA_Mem‹yD©aSize
 |

355 
DMA_InôSåu˘
->
DMA_Mode
 | DMA_InôSåu˘->
DMA_Pri‹ôy
 |

356 
DMA_InôSåu˘
->
DMA_Mem‹yBur°
 | DMA_InôSåu˘->
DMA_PîùhîÆBur°
;

359 
DMAy_Såómx
->
CR
 = 
tm¥eg
;

363 
tm¥eg
 = 
DMAy_Såómx
->
FCR
;

366 
tm¥eg
 &(
uöt32_t
)~(
DMA_SxFCR_DMDIS
 | 
DMA_SxFCR_FTH
);

371 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_FIFOMode
 | DMA_InôSåu˘->
DMA_FIFOThªshﬁd
;

374 
DMAy_Såómx
->
FCR
 = 
tm¥eg
;

378 
DMAy_Såómx
->
NDTR
 = 
DMA_InôSåu˘
->
DMA_Buf„rSize
;

382 
DMAy_Såómx
->
PAR
 = 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
;

386 
DMAy_Såómx
->
M0AR
 = 
DMA_InôSåu˘
->
DMA_Mem‹y0Ba£Addr
;

387 
	}
}

395 
	$DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

399 
DMA_InôSåu˘
->
DMA_Ch™√l
 = 0;

402 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
 = 0;

405 
DMA_InôSåu˘
->
DMA_Mem‹y0Ba£Addr
 = 0;

408 
DMA_InôSåu˘
->
DMA_DIR
 = 
DMA_DIR_PîùhîÆToMem‹y
;

411 
DMA_InôSåu˘
->
DMA_Buf„rSize
 = 0;

414 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

417 
DMA_InôSåu˘
->
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_DißbÀ
;

420 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

423 
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

426 
DMA_InôSåu˘
->
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

429 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_Low
;

432 
DMA_InôSåu˘
->
DMA_FIFOMode
 = 
DMA_FIFOMode_DißbÀ
;

435 
DMA_InôSåu˘
->
DMA_FIFOThªshﬁd
 = 
DMA_FIFOThªshﬁd_1Qu¨ãrFuŒ
;

438 
DMA_InôSåu˘
->
DMA_Mem‹yBur°
 = 
DMA_Mem‹yBur°_SögÀ
;

441 
DMA_InôSåu˘
->
DMA_PîùhîÆBur°
 = 
DMA_PîùhîÆBur°_SögÀ
;

442 
	}
}

470 
	$DMA_Cmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

473 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

474 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

476 i‡(
NewSèã
 !
DISABLE
)

479 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_EN
;

484 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_EN
;

486 
	}
}

506 
	$DMA_PîùhIncOff£tSizeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_Pöcos
)

509 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

510 
	`as£π_∑øm
(
	`IS_DMA_PINCOS_SIZE
(
DMA_Pöcos
));

513 if(
DMA_Pöcos
 !
DMA_PINCOS_Psize
)

516 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_PINCOS
;

521 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_PINCOS
;

523 
	}
}

542 
	$DMA_FlowC⁄åﬁÀrC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FlowCål
)

545 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

546 
	`as£π_∑øm
(
	`IS_DMA_FLOW_CTRL
(
DMA_FlowCål
));

549 if(
DMA_FlowCål
 !
DMA_FlowCål_Mem‹y
)

552 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_PFCTRL
;

557 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_PFCTRL
;

559 
	}
}

626 
	$DMA_SëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt16_t
 
Cou¡î
)

629 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

632 
DMAy_Såómx
->
NDTR
 = (
uöt16_t
)
Cou¡î
;

633 
	}
}

641 
uöt16_t
 
	$DMA_GëCuºD©aCou¡î
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

644 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

647  ((
uöt16_t
)(
DMAy_Såómx
->
NDTR
));

648 
	}
}

718 
	$DMA_DoubÀBuf„rModeC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹y1Ba£Addr
,

719 
uöt32_t
 
DMA_CuºítMem‹y
)

722 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

723 
	`as£π_∑øm
(
	`IS_DMA_CURRENT_MEM
(
DMA_CuºítMem‹y
));

725 i‡(
DMA_CuºítMem‹y
 !
DMA_Mem‹y_0
)

728 
DMAy_Såómx
->
CR
 |(
uöt32_t
)(
DMA_SxCR_CT
);

733 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)(
DMA_SxCR_CT
);

737 
DMAy_Såómx
->
M1AR
 = 
Mem‹y1Ba£Addr
;

738 
	}
}

749 
	$DMA_DoubÀBuf„rModeCmd
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

752 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

753 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

756 i‡(
NewSèã
 !
DISABLE
)

759 
DMAy_Såómx
->
CR
 |(
uöt32_t
)
DMA_SxCR_DBM
;

764 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)
DMA_SxCR_DBM
;

766 
	}
}

790 
	$DMA_Mem‹yT¨gëC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
Mem‹yBa£Addr
,

791 
uöt32_t
 
DMA_Mem‹yT¨gë
)

794 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

795 
	`as£π_∑øm
(
	`IS_DMA_CURRENT_MEM
(
DMA_Mem‹yT¨gë
));

798 i‡(
DMA_Mem‹yT¨gë
 !
DMA_Mem‹y_0
)

801 
DMAy_Såómx
->
M1AR
 = 
Mem‹yBa£Addr
;

806 
DMAy_Såómx
->
M0AR
 = 
Mem‹yBa£Addr
;

808 
	}
}

816 
uöt32_t
 
	$DMA_GëCuºítMem‹yT¨gë
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

818 
uöt32_t
 
tmp
 = 0;

821 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

824 i‡((
DMAy_Såómx
->
CR
 & 
DMA_SxCR_CT
) != 0)

827 
tmp
 = 1;

832 
tmp
 = 0;

834  
tmp
;

835 
	}
}

925 
Fun˘i⁄ÆSèã
 
	$DMA_GëCmdSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

927 
Fun˘i⁄ÆSèã
 
°©e
 = 
DISABLE
;

930 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

932 i‡((
DMAy_Såómx
->
CR
 & (
uöt32_t
)
DMA_SxCR_EN
) != 0)

935 
°©e
 = 
ENABLE
;

941 
°©e
 = 
DISABLE
;

943  
°©e
;

944 
	}
}

959 
uöt32_t
 
	$DMA_GëFIFOSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
)

961 
uöt32_t
 
tm¥eg
 = 0;

964 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

967 
tm¥eg
 = (
uöt32_t
)((
DMAy_Såómx
->
FCR
 & 
DMA_SxFCR_FS
));

969  
tm¥eg
;

970 
	}
}

986 
FœgSètus
 
	$DMA_GëFœgSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
)

988 
FœgSètus
 
bô°©us
 = 
RESET
;

989 
DMA_Ty≥Def
* 
DMAy
;

990 
uöt32_t
 
tm¥eg
 = 0;

993 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

994 
	`as£π_∑øm
(
	`IS_DMA_GET_FLAG
(
DMA_FLAG
));

997 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1000 
DMAy
 = 
DMA1
;

1005 
DMAy
 = 
DMA2
;

1009 i‡((
DMA_FLAG
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1012 
tm¥eg
 = 
DMAy
->
HISR
;

1017 
tm¥eg
 = 
DMAy
->
LISR
;

1021 
tm¥eg
 &(
uöt32_t
)
RESERVED_MASK
;

1024 i‡((
tm¥eg
 & 
DMA_FLAG
Ë!(
uöt32_t
)
RESET
)

1027 
bô°©us
 = 
SET
;

1032 
bô°©us
 = 
RESET
;

1036  
bô°©us
;

1037 
	}
}

1053 
	$DMA_CÀ¨Fœg
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_FLAG
)

1055 
DMA_Ty≥Def
* 
DMAy
;

1058 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1059 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_FLAG
(
DMA_FLAG
));

1062 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1065 
DMAy
 = 
DMA1
;

1070 
DMAy
 = 
DMA2
;

1074 i‡((
DMA_FLAG
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1077 
DMAy
->
HIFCR
 = (
uöt32_t
)(
DMA_FLAG
 & 
RESERVED_MASK
);

1082 
DMAy
->
LIFCR
 = (
uöt32_t
)(
DMA_FLAG
 & 
RESERVED_MASK
);

1084 
	}
}

1100 
	$DMA_ITC⁄fig
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1103 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1104 
	`as£π_∑øm
(
	`IS_DMA_CONFIG_IT
(
DMA_IT
));

1105 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1108 i‡((
DMA_IT
 & 
DMA_IT_FE
) != 0)

1110 i‡(
NewSèã
 !
DISABLE
)

1113 
DMAy_Såómx
->
FCR
 |(
uöt32_t
)
DMA_IT_FE
;

1118 
DMAy_Såómx
->
FCR
 &~(
uöt32_t
)
DMA_IT_FE
;

1123 i‡(
DMA_IT
 !
DMA_IT_FE
)

1125 i‡(
NewSèã
 !
DISABLE
)

1128 
DMAy_Såómx
->
CR
 |(
uöt32_t
)(
DMA_IT
 & 
TRANSFER_IT_ENABLE_MASK
);

1133 
DMAy_Såómx
->
CR
 &~(
uöt32_t
)(
DMA_IT
 & 
TRANSFER_IT_ENABLE_MASK
);

1136 
	}
}

1152 
ITSètus
 
	$DMA_GëITSètus
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
)

1154 
ITSètus
 
bô°©us
 = 
RESET
;

1155 
DMA_Ty≥Def
* 
DMAy
;

1156 
uöt32_t
 
tm¥eg
 = 0, 
íabÀ°©us
 = 0;

1159 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1160 
	`as£π_∑øm
(
	`IS_DMA_GET_IT
(
DMA_IT
));

1163 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1166 
DMAy
 = 
DMA1
;

1171 
DMAy
 = 
DMA2
;

1175 i‡((
DMA_IT
 & 
TRANSFER_IT_MASK
Ë!(
uöt32_t
)
RESET
)

1178 
tm¥eg
 = (
uöt32_t
)((
DMA_IT
 >> 11Ë& 
TRANSFER_IT_ENABLE_MASK
);

1181 
íabÀ°©us
 = (
uöt32_t
)(
DMAy_Såómx
->
CR
 & 
tm¥eg
);

1186 
íabÀ°©us
 = (
uöt32_t
)(
DMAy_Såómx
->
FCR
 & 
DMA_IT_FE
);

1190 i‡((
DMA_IT
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1193 
tm¥eg
 = 
DMAy
->
HISR
 ;

1198 
tm¥eg
 = 
DMAy
->
LISR
 ;

1202 
tm¥eg
 &(
uöt32_t
)
RESERVED_MASK
;

1205 i‡(((
tm¥eg
 & 
DMA_IT
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

1208 
bô°©us
 = 
SET
;

1213 
bô°©us
 = 
RESET
;

1217  
bô°©us
;

1218 
	}
}

1234 
	$DMA_CÀ¨ITPídögBô
(
DMA_Såóm_Ty≥Def
* 
DMAy_Såómx
, 
uöt32_t
 
DMA_IT
)

1236 
DMA_Ty≥Def
* 
DMAy
;

1239 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Såómx
));

1240 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_IT
(
DMA_IT
));

1243 i‡(
DMAy_Såómx
 < 
DMA2_Såóm0
)

1246 
DMAy
 = 
DMA1
;

1251 
DMAy
 = 
DMA2
;

1255 i‡((
DMA_IT
 & 
HIGH_ISR_MASK
Ë!(
uöt32_t
)
RESET
)

1258 
DMAy
->
HIFCR
 = (
uöt32_t
)(
DMA_IT
 & 
RESERVED_MASK
);

1263 
DMAy
->
LIFCR
 = (
uöt32_t
)(
DMA_IT
 & 
RESERVED_MASK
);

1265 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_exti.c

61 
	~"°m32f4xx_exti.h
"

75 
	#EXTI_LINENONE
 ((
uöt32_t
)0x00000Ë

	)

103 
	$EXTI_DeInô
()

105 
EXTI
->
IMR
 = 0x00000000;

106 
EXTI
->
EMR
 = 0x00000000;

107 
EXTI
->
RTSR
 = 0x00000000;

108 
EXTI
->
FTSR
 = 0x00000000;

109 
EXTI
->
PR
 = 0x007FFFFF;

110 
	}
}

119 
	$EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

121 
uöt32_t
 
tmp
 = 0;

124 
	`as£π_∑øm
(
	`IS_EXTI_MODE
(
EXTI_InôSåu˘
->
EXTI_Mode
));

125 
	`as£π_∑øm
(
	`IS_EXTI_TRIGGER
(
EXTI_InôSåu˘
->
EXTI_Triggî
));

126 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_InôSåu˘
->
EXTI_Löe
));

127 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
EXTI_InôSåu˘
->
EXTI_LöeCmd
));

129 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

131 i‡(
EXTI_InôSåu˘
->
EXTI_LöeCmd
 !
DISABLE
)

134 
EXTI
->
IMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

135 
EXTI
->
EMR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

137 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

139 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

142 
EXTI
->
RTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

143 
EXTI
->
FTSR
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

146 i‡(
EXTI_InôSåu˘
->
EXTI_Triggî
 =
EXTI_Triggî_Risög_FÆlög
)

149 
EXTI
->
RTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

150 
EXTI
->
FTSR
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

154 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

155 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Triggî
;

157 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
EXTI_InôSåu˘
->
EXTI_Löe
;

162 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
;

165 *(
__IO
 
uöt32_t
 *Ë
tmp
 &~
EXTI_InôSåu˘
->
EXTI_Löe
;

167 
	}
}

175 
	$EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

177 
EXTI_InôSåu˘
->
EXTI_Löe
 = 
EXTI_LINENONE
;

178 
EXTI_InôSåu˘
->
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

179 
EXTI_InôSåu˘
->
EXTI_Triggî
 = 
EXTI_Triggî_FÆlög
;

180 
EXTI_InôSåu˘
->
EXTI_LöeCmd
 = 
DISABLE
;

181 
	}
}

190 
	$EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
)

193 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

195 
EXTI
->
SWIER
 |
EXTI_Löe
;

196 
	}
}

220 
FœgSètus
 
	$EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
)

222 
FœgSètus
 
bô°©us
 = 
RESET
;

224 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

226 i‡((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
)

228 
bô°©us
 = 
SET
;

232 
bô°©us
 = 
RESET
;

234  
bô°©us
;

235 
	}
}

243 
	$EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
)

246 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

248 
EXTI
->
PR
 = 
EXTI_Löe
;

249 
	}
}

257 
ITSètus
 
	$EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
)

259 
ITSètus
 
bô°©us
 = 
RESET
;

260 
uöt32_t
 
íabÀ°©us
 = 0;

262 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

264 
íabÀ°©us
 = 
EXTI
->
IMR
 & 
EXTI_Löe
;

265 i‡(((
EXTI
->
PR
 & 
EXTI_Löe
Ë!(
uöt32_t
)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

267 
bô°©us
 = 
SET
;

271 
bô°©us
 = 
RESET
;

273  
bô°©us
;

274 
	}
}

282 
	$EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
)

285 
	`as£π_∑øm
(
	`IS_EXTI_LINE
(
EXTI_Löe
));

287 
EXTI
->
PR
 = 
EXTI_Löe
;

288 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_flash.c

70 
	~"°m32f4xx_Êash.h
"

83 
	#SECTOR_MASK
 ((
uöt32_t
)0xFFFFFF07)

	)

166 
	$FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
)

169 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FLASH_L©ícy
));

172 *(
__IO
 
uöt8_t
 *)
ACR_BYTE0_ADDRESS
 = (uöt8_t)
FLASH_L©ícy
;

173 
	}
}

181 
	$FLASH_Pª„tchBuf„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

184 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

187 if(
NewSèã
 !
DISABLE
)

189 
FLASH
->
ACR
 |
FLASH_ACR_PRFTEN
;

193 
FLASH
->
ACR
 &(~
FLASH_ACR_PRFTEN
);

195 
	}
}

203 
	$FLASH_In°ru˘i⁄CacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

206 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

208 if(
NewSèã
 !
DISABLE
)

210 
FLASH
->
ACR
 |
FLASH_ACR_ICEN
;

214 
FLASH
->
ACR
 &(~
FLASH_ACR_ICEN
);

216 
	}
}

224 
	$FLASH_D©aCacheCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

227 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

229 if(
NewSèã
 !
DISABLE
)

231 
FLASH
->
ACR
 |
FLASH_ACR_DCEN
;

235 
FLASH
->
ACR
 &(~
FLASH_ACR_DCEN
);

237 
	}
}

245 
	$FLASH_In°ru˘i⁄CacheRe£t
()

247 
FLASH
->
ACR
 |
FLASH_ACR_ICRST
;

248 
	}
}

256 
	$FLASH_D©aCacheRe£t
()

258 
FLASH
->
ACR
 |
FLASH_ACR_DCRST
;

259 
	}
}

300 
	$FLASH_U∆ock
()

302 if((
FLASH
->
CR
 & 
FLASH_CR_LOCK
Ë!
RESET
)

305 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

306 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

308 
	}
}

315 
	$FLASH_Lock
()

318 
FLASH
->
CR
 |
FLASH_CR_LOCK
;

319 
	}
}

341 
FLASH_Sètus
 
	$FLASH_Eø£Se˘‹
(
uöt32_t
 
FLASH_Se˘‹
, 
uöt8_t
 
VﬁègeR™ge
)

343 
uöt32_t
 
tmp_psize
 = 0x0;

344 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

347 
	`as£π_∑øm
(
	`IS_FLASH_SECTOR
(
FLASH_Se˘‹
));

348 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

350 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

352 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

354 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

356 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

358 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

360 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

364 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

367 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

369 if(
°©us
 =
FLASH_COMPLETE
)

372 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

373 
FLASH
->
CR
 |
tmp_psize
;

374 
FLASH
->
CR
 &
SECTOR_MASK
;

375 
FLASH
->
CR
 |
FLASH_CR_SER
 | 
FLASH_Se˘‹
;

376 
FLASH
->
CR
 |
FLASH_CR_STRT
;

379 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

382 
FLASH
->
CR
 &(~
FLASH_CR_SER
);

383 
FLASH
->
CR
 &
SECTOR_MASK
;

386  
°©us
;

387 
	}
}

406 
FLASH_Sètus
 
	$FLASH_Eø£AŒSe˘‹s
(
uöt8_t
 
VﬁègeR™ge
)

408 
uöt32_t
 
tmp_psize
 = 0x0;

409 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

412 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

413 
	`as£π_∑øm
(
	`IS_VOLTAGERANGE
(
VﬁègeR™ge
));

415 if(
VﬁègeR™ge
 =
VﬁègeR™ge_1
)

417 
tmp_psize
 = 
FLASH_PSIZE_BYTE
;

419 if(
VﬁègeR™ge
 =
VﬁègeR™ge_2
)

421 
tmp_psize
 = 
FLASH_PSIZE_HALF_WORD
;

423 if(
VﬁègeR™ge
 =
VﬁègeR™ge_3
)

425 
tmp_psize
 = 
FLASH_PSIZE_WORD
;

429 
tmp_psize
 = 
FLASH_PSIZE_DOUBLE_WORD
;

431 if(
°©us
 =
FLASH_COMPLETE
)

434 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

435 
FLASH
->
CR
 |
tmp_psize
;

436 
FLASH
->
CR
 |
FLASH_CR_MER
;

437 
FLASH
->
CR
 |
FLASH_CR_STRT
;

440 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

443 
FLASH
->
CR
 &(~
FLASH_CR_MER
);

447  
°©us
;

448 
	}
}

459 
FLASH_Sètus
 
	$FLASH_ProgømDoubÀW‹d
(
uöt32_t
 
Addªss
, 
uöt64_t
 
D©a
)

461 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

464 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

467 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

469 if(
°©us
 =
FLASH_COMPLETE
)

472 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

473 
FLASH
->
CR
 |
FLASH_PSIZE_DOUBLE_WORD
;

474 
FLASH
->
CR
 |
FLASH_CR_PG
;

476 *(
__IO
 
uöt64_t
*)
Addªss
 = 
D©a
;

479 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

482 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

485  
°©us
;

486 
	}
}

497 
FLASH_Sètus
 
	$FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

499 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

502 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

505 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

507 if(
°©us
 =
FLASH_COMPLETE
)

510 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

511 
FLASH
->
CR
 |
FLASH_PSIZE_WORD
;

512 
FLASH
->
CR
 |
FLASH_CR_PG
;

514 *(
__IO
 
uöt32_t
*)
Addªss
 = 
D©a
;

517 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

520 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

523  
°©us
;

524 
	}
}

535 
FLASH_Sètus
 
	$FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

537 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

540 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

543 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

545 if(
°©us
 =
FLASH_COMPLETE
)

548 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

549 
FLASH
->
CR
 |
FLASH_PSIZE_HALF_WORD
;

550 
FLASH
->
CR
 |
FLASH_CR_PG
;

552 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

555 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

558 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

561  
°©us
;

562 
	}
}

573 
FLASH_Sètus
 
	$FLASH_ProgømByã
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

575 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

578 
	`as£π_∑øm
(
	`IS_FLASH_ADDRESS
(
Addªss
));

581 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

583 if(
°©us
 =
FLASH_COMPLETE
)

586 
FLASH
->
CR
 &
CR_PSIZE_MASK
;

587 
FLASH
->
CR
 |
FLASH_PSIZE_BYTE
;

588 
FLASH
->
CR
 |
FLASH_CR_PG
;

590 *(
__IO
 
uöt8_t
*)
Addªss
 = 
D©a
;

593 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

596 
FLASH
->
CR
 &(~
FLASH_CR_PG
);

600  
°©us
;

601 
	}
}

658 
	$FLASH_OB_U∆ock
()

660 if((
FLASH
->
OPTCR
 & 
FLASH_OPTCR_OPTLOCK
Ë!
RESET
)

663 
FLASH
->
OPTKEYR
 = 
FLASH_OPT_KEY1
;

664 
FLASH
->
OPTKEYR
 = 
FLASH_OPT_KEY2
;

666 
	}
}

673 
	$FLASH_OB_Lock
()

676 
FLASH
->
OPTCR
 |
FLASH_OPTCR_OPTLOCK
;

677 
	}
}

689 
	$FLASH_OB_WRPC⁄fig
(
uöt32_t
 
OB_WRP
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

691 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

694 
	`as£π_∑øm
(
	`IS_OB_WRP
(
OB_WRP
));

695 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

697 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

699 if(
°©us
 =
FLASH_COMPLETE
)

701 if(
NewSèã
 !
DISABLE
)

703 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 &(~
OB_WRP
);

707 *(
__IO
 
uöt16_t
*)
OPTCR_BYTE2_ADDRESS
 |(uöt16_t)
OB_WRP
;

710 
	}
}

724 
	$FLASH_OB_RDPC⁄fig
(
uöt8_t
 
OB_RDP
)

726 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

729 
	`as£π_∑øm
(
	`IS_OB_RDP
(
OB_RDP
));

731 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

733 if(
°©us
 =
FLASH_COMPLETE
)

735 *(
__IO
 
uöt8_t
*)
OPTCR_BYTE1_ADDRESS
 = 
OB_RDP
;

738 
	}
}

756 
	$FLASH_OB_U£rC⁄fig
(
uöt8_t
 
OB_IWDG
, uöt8_à
OB_STOP
, uöt8_à
OB_STDBY
)

758 
uöt8_t
 
›ti⁄tmp
 = 0xFF;

759 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

762 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
(
OB_IWDG
));

763 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
(
OB_STOP
));

764 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
(
OB_STDBY
));

767 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

769 if(
°©us
 =
FLASH_COMPLETE
)

772 
›ti⁄tmp
 = (
uöt8_t
)((*(
__IO
 uöt8_à*)
OPTCR_BYTE0_ADDRESS
) & (uint8_t)0x0F);

775 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 = 
OB_IWDG
 | (uöt8_t)(
OB_STDBY
 | (uöt8_t)(
OB_STOP
 | ((uöt8_t)
›ti⁄tmp
)));

777 
	}
}

789 
	$FLASH_OB_BORC⁄fig
(
uöt8_t
 
OB_BOR
)

792 
	`as£π_∑øm
(
	`IS_OB_BOR
(
OB_BOR
));

795 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 &(~
FLASH_OPTCR_BOR_LEV
);

796 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 |
OB_BOR
;

798 
	}
}

806 
FLASH_Sètus
 
	$FLASH_OB_Launch
()

808 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

811 *(
__IO
 
uöt8_t
 *)
OPTCR_BYTE0_ADDRESS
 |
FLASH_OPTCR_OPTSTRT
;

814 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
();

816  
°©us
;

817 
	}
}

825 
uöt8_t
 
	$FLASH_OB_GëU£r
()

828  (
uöt8_t
)(
FLASH
->
OPTCR
 >> 5);

829 
	}
}

836 
uöt16_t
 
	$FLASH_OB_GëWRP
()

839  (*(
__IO
 
uöt16_t
 *)(
OPTCR_BYTE2_ADDRESS
));

840 
	}
}

849 
FœgSètus
 
	$FLASH_OB_GëRDP
()

851 
FœgSètus
 
ªad°©us
 = 
RESET
;

853 i‡((*(
__IO
 
uöt8_t
*)(
OPTCR_BYTE1_ADDRESS
Ë!(uöt8_t)
OB_RDP_Levñ_0
))

855 
ªad°©us
 = 
SET
;

859 
ªad°©us
 = 
RESET
;

861  
ªad°©us
;

862 
	}
}

873 
uöt8_t
 
	$FLASH_OB_GëBOR
()

876  (
uöt8_t
)(*(
__IO
 uöt8_à*)(
OPTCR_BYTE0_ADDRESS
) & (uint8_t)0x0C);

877 
	}
}

903 
	$FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

906 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

907 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

909 if(
NewSèã
 !
DISABLE
)

912 
FLASH
->
CR
 |
FLASH_IT
;

917 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

919 
	}
}

934 
FœgSètus
 
	$FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
)

936 
FœgSètus
 
bô°©us
 = 
RESET
;

938 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
));

940 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

942 
bô°©us
 = 
SET
;

946 
bô°©us
 = 
RESET
;

949  
bô°©us
;

950 
	}
}

964 
	$FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
)

967 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
));

970 
FLASH
->
SR
 = 
FLASH_FLAG
;

971 
	}
}

979 
FLASH_Sètus
 
	$FLASH_GëSètus
()

981 
FLASH_Sètus
 
Êash°©us
 = 
FLASH_COMPLETE
;

983 if((
FLASH
->
SR
 & 
FLASH_FLAG_BSY
) == FLASH_FLAG_BSY)

985 
Êash°©us
 = 
FLASH_BUSY
;

989 if((
FLASH
->
SR
 & 
FLASH_FLAG_WRPERR
Ë!(
uöt32_t
)0x00)

991 
Êash°©us
 = 
FLASH_ERROR_WRP
;

995 if((
FLASH
->
SR
 & (
uöt32_t
)0xEF) != (uint32_t)0x00)

997 
Êash°©us
 = 
FLASH_ERROR_PROGRAM
;

1001 if((
FLASH
->
SR
 & 
FLASH_FLAG_OPERR
Ë!(
uöt32_t
)0x00)

1003 
Êash°©us
 = 
FLASH_ERROR_OPERATION
;

1007 
Êash°©us
 = 
FLASH_COMPLETE
;

1013  
Êash°©us
;

1014 
	}
}

1022 
FLASH_Sètus
 
	$FLASH_WaôF‹La°O≥øti⁄
()

1024 
__IO
 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1027 
°©us
 = 
	`FLASH_GëSètus
();

1032 
°©us
 =
FLASH_BUSY
)

1034 
°©us
 = 
	`FLASH_GëSètus
();

1037  
°©us
;

1038 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_fsmc.c

30 
	~"°m32f4xx_fsmc.h
"

31 
	~"°m32f4xx_rcc.h
"

47 
	#BCR_MBKEN_SET
 ((
uöt32_t
)0x00000001)

	)

48 
	#BCR_MBKEN_RESET
 ((
uöt32_t
)0x000FFFFE)

	)

49 
	#BCR_FACCEN_SET
 ((
uöt32_t
)0x00000040)

	)

52 
	#PCR_PBKEN_SET
 ((
uöt32_t
)0x00000004)

	)

53 
	#PCR_PBKEN_RESET
 ((
uöt32_t
)0x000FFFFB)

	)

54 
	#PCR_ECCEN_SET
 ((
uöt32_t
)0x00000040)

	)

55 
	#PCR_ECCEN_RESET
 ((
uöt32_t
)0x000FFFBF)

	)

56 
	#PCR_MEMORYTYPE_NAND
 ((
uöt32_t
)0x00000008)

	)

116 
	$FSMC_NORSRAMDeInô
(
uöt32_t
 
FSMC_B™k
)

119 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

122 if(
FSMC_B™k
 =
FSMC_B™k1_NORSRAM1
)

124 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030DB;

129 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] = 0x000030D2;

131 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
 + 1] = 0x0FFFFFFF;

132 
FSMC_B™k1E
->
BWTR
[
FSMC_B™k
] = 0x0FFFFFFF;

133 
	}
}

143 
	$FSMC_NORSRAMInô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

146 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
));

147 
	`as£π_∑øm
(
	`IS_FSMC_MUX
(
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
));

148 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
));

149 
	`as£π_∑øm
(
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

150 
	`as£π_∑øm
(
	`IS_FSMC_BURSTMODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
));

151 
	`as£π_∑øm
(
	`IS_FSMC_ASYNWAIT
(
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
));

152 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_POLARITY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
));

153 
	`as£π_∑øm
(
	`IS_FSMC_WRAP_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
));

154 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_SIGNAL_ACTIVE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
));

155 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_OPERATION
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
));

156 
	`as£π_∑øm
(
	`IS_FSMC_WAITE_SIGNAL
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
));

157 
	`as£π_∑øm
(
	`IS_FSMC_EXTENDED_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
));

158 
	`as£π_∑øm
(
	`IS_FSMC_WRITE_BURST
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
));

159 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

160 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

161 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

162 
	`as£π_∑øm
(
	`IS_FSMC_TURNAROUND_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
));

163 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

164 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

165 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

168 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

169 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 |

170 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 |

171 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

172 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 |

173 
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
 |

174 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 |

175 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 |

176 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 |

177 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 |

178 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 |

179 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 |

180 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
;

181 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 =
FSMC_Mem‹yTy≥_NOR
)

183 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] |(
uöt32_t
)
BCR_FACCEN_SET
;

186 
FSMC_B™k1
->
BTCR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
+1] =

187 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

188 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4) |

189 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

190 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 << 16) |

191 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

192 (
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

193 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

197 if(
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 =
FSMC_ExãndedMode_E«bÀ
)

199 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_SETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
));

200 
	`as£π_∑øm
(
	`IS_FSMC_ADDRESS_HOLD_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
));

201 
	`as£π_∑øm
(
	`IS_FSMC_DATASETUP_TIME
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
));

202 
	`as£π_∑øm
(
	`IS_FSMC_CLK_DIV
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
));

203 
	`as£π_∑øm
(
	`IS_FSMC_DATA_LATENCY
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
));

204 
	`as£π_∑øm
(
	`IS_FSMC_ACCESS_MODE
(
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
));

205 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] =

206 (
uöt32_t
)
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 |

207 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 << 4 )|

208 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 << 8) |

209 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 << 20) |

210 (
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 << 24) |

211 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
;

215 
FSMC_B™k1E
->
BWTR
[
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
] = 0x0FFFFFFF;

217 
	}
}

225 
	$FSMC_NORSRAMSåu˘Inô
(
FSMC_NORSRAMInôTy≥Def
* 
FSMC_NORSRAMInôSåu˘
)

228 
FSMC_NORSRAMInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k1_NORSRAM1
;

229 
FSMC_NORSRAMInôSåu˘
->
FSMC_D©aAddªssMux
 = 
FSMC_D©aAddªssMux_E«bÀ
;

230 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yTy≥
 = 
FSMC_Mem‹yTy≥_SRAM
;

231 
FSMC_NORSRAMInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

232 
FSMC_NORSRAMInôSåu˘
->
FSMC_Bur°Ac˚ssMode
 = 
FSMC_Bur°Ac˚ssMode_DißbÀ
;

233 
FSMC_NORSRAMInôSåu˘
->
FSMC_Asynchr⁄ousWaô
 = 
FSMC_Asynchr⁄ousWaô_DißbÀ
;

234 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lPﬁ¨ôy
 = 
FSMC_WaôSig«lPﬁ¨ôy_Low
;

235 
FSMC_NORSRAMInôSåu˘
->
FSMC_WøpMode
 = 
FSMC_WøpMode_DißbÀ
;

236 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«lA˘ive
 = 
FSMC_WaôSig«lA˘ive_Bef‹eWaôSèã
;

237 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeO≥øti⁄
 = 
FSMC_WrôeO≥øti⁄_E«bÀ
;

238 
FSMC_NORSRAMInôSåu˘
->
FSMC_WaôSig«l
 = 
FSMC_WaôSig«l_E«bÀ
;

239 
FSMC_NORSRAMInôSåu˘
->
FSMC_ExãndedMode
 = 
FSMC_ExãndedMode_DißbÀ
;

240 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeBur°
 = 
FSMC_WrôeBur°_DißbÀ
;

241 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

242 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

243 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

244 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

245 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

246 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

247 
FSMC_NORSRAMInôSåu˘
->
FSMC_RódWrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

248 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssSëupTime
 = 0xF;

249 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_AddªssHﬁdTime
 = 0xF;

250 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aSëupTime
 = 0xFF;

251 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_BusTu∫AroundDuøti⁄
 = 0xF;

252 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_CLKDivisi⁄
 = 0xF;

253 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_D©aL©ícy
 = 0xF;

254 
FSMC_NORSRAMInôSåu˘
->
FSMC_WrôeTimögSåu˘
->
FSMC_Ac˚ssMode
 = 
FSMC_Ac˚ssMode_A
;

255 
	}
}

268 
	$FSMC_NORSRAMCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

270 
	`as£π_∑øm
(
	`IS_FSMC_NORSRAM_BANK
(
FSMC_B™k
));

271 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

273 i‡(
NewSèã
 !
DISABLE
)

276 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] |
BCR_MBKEN_SET
;

281 
FSMC_B™k1
->
BTCR
[
FSMC_B™k
] &
BCR_MBKEN_RESET
;

283 
	}
}

339 
	$FSMC_NANDDeInô
(
uöt32_t
 
FSMC_B™k
)

342 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

344 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

347 
FSMC_B™k2
->
PCR2
 = 0x00000018;

348 
FSMC_B™k2
->
SR2
 = 0x00000040;

349 
FSMC_B™k2
->
PMEM2
 = 0xFCFCFCFC;

350 
FSMC_B™k2
->
PATT2
 = 0xFCFCFCFC;

356 
FSMC_B™k3
->
PCR3
 = 0x00000018;

357 
FSMC_B™k3
->
SR3
 = 0x00000040;

358 
FSMC_B™k3
->
PMEM3
 = 0xFCFCFCFC;

359 
FSMC_B™k3
->
PATT3
 = 0xFCFCFCFC;

361 
	}
}

370 
	$FSMC_NANDInô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

372 
uöt32_t
 
tmµ¸
 = 0x00000000, 
tmµmem
 = 0x00000000, 
tmµ©t
 = 0x00000000;

375 
	`as£π_∑øm
–
	`IS_FSMC_NAND_BANK
(
FSMC_NANDInôSåu˘
->
FSMC_B™k
));

376 
	`as£π_∑øm
–
	`IS_FSMC_WAIT_FEATURE
(
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
));

377 
	`as£π_∑øm
–
	`IS_FSMC_MEMORY_WIDTH
(
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
));

378 
	`as£π_∑øm
–
	`IS_FSMC_ECC_STATE
(
FSMC_NANDInôSåu˘
->
FSMC_ECC
));

379 
	`as£π_∑øm
–
	`IS_FSMC_ECCPAGE_SIZE
(
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
));

380 
	`as£π_∑øm
–
	`IS_FSMC_TCLR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
));

381 
	`as£π_∑øm
–
	`IS_FSMC_TAR_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
));

382 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

383 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

384 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

385 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

386 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

387 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

388 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

389 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

392 
tmµ¸
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 |

393 
PCR_MEMORYTYPE_NAND
 |

394 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 |

395 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 |

396 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 |

397 (
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9 )|

398 (
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

401 
tmµmem
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

402 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

403 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

404 (
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

407 
tmµ©t
 = (
uöt32_t
)
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

408 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

409 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

410 (
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

412 if(
FSMC_NANDInôSåu˘
->
FSMC_B™k
 =
FSMC_B™k2_NAND
)

415 
FSMC_B™k2
->
PCR2
 = 
tmµ¸
;

416 
FSMC_B™k2
->
PMEM2
 = 
tmµmem
;

417 
FSMC_B™k2
->
PATT2
 = 
tmµ©t
;

422 
FSMC_B™k3
->
PCR3
 = 
tmµ¸
;

423 
FSMC_B™k3
->
PMEM3
 = 
tmµmem
;

424 
FSMC_B™k3
->
PATT3
 = 
tmµ©t
;

426 
	}
}

435 
	$FSMC_NANDSåu˘Inô
(
FSMC_NANDInôTy≥Def
* 
FSMC_NANDInôSåu˘
)

438 
FSMC_NANDInôSåu˘
->
FSMC_B™k
 = 
FSMC_B™k2_NAND
;

439 
FSMC_NANDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

440 
FSMC_NANDInôSåu˘
->
FSMC_Mem‹yD©aWidth
 = 
FSMC_Mem‹yD©aWidth_8b
;

441 
FSMC_NANDInôSåu˘
->
FSMC_ECC
 = 
FSMC_ECC_DißbÀ
;

442 
FSMC_NANDInôSåu˘
->
FSMC_ECCPageSize
 = 
FSMC_ECCPageSize_256Byãs
;

443 
FSMC_NANDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

444 
FSMC_NANDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

445 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

446 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

447 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

448 
FSMC_NANDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

449 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

450 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

451 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

452 
FSMC_NANDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

453 
	}
}

464 
	$FSMC_NANDCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

466 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

467 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

469 i‡(
NewSèã
 !
DISABLE
)

472 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

474 
FSMC_B™k2
->
PCR2
 |
PCR_PBKEN_SET
;

478 
FSMC_B™k3
->
PCR3
 |
PCR_PBKEN_SET
;

484 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

486 
FSMC_B™k2
->
PCR2
 &
PCR_PBKEN_RESET
;

490 
FSMC_B™k3
->
PCR3
 &
PCR_PBKEN_RESET
;

493 
	}
}

504 
	$FSMC_NANDECCCmd
(
uöt32_t
 
FSMC_B™k
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

506 
	`as£π_∑øm
(
	`IS_FSMC_NAND_BANK
(
FSMC_B™k
));

507 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

509 i‡(
NewSèã
 !
DISABLE
)

512 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

514 
FSMC_B™k2
->
PCR2
 |
PCR_ECCEN_SET
;

518 
FSMC_B™k3
->
PCR3
 |
PCR_ECCEN_SET
;

524 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

526 
FSMC_B™k2
->
PCR2
 &
PCR_ECCEN_RESET
;

530 
FSMC_B™k3
->
PCR3
 &
PCR_ECCEN_RESET
;

533 
	}
}

543 
uöt32_t
 
	$FSMC_GëECC
(
uöt32_t
 
FSMC_B™k
)

545 
uöt32_t
 
eccvÆ
 = 0x00000000;

547 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

550 
eccvÆ
 = 
FSMC_B™k2
->
ECCR2
;

555 
eccvÆ
 = 
FSMC_B™k3
->
ECCR3
;

558 (
eccvÆ
);

559 
	}
}

607 
	$FSMC_PCCARDDeInô
()

610 
FSMC_B™k4
->
PCR4
 = 0x00000018;

611 
FSMC_B™k4
->
SR4
 = 0x00000000;

612 
FSMC_B™k4
->
PMEM4
 = 0xFCFCFCFC;

613 
FSMC_B™k4
->
PATT4
 = 0xFCFCFCFC;

614 
FSMC_B™k4
->
PIO4
 = 0xFCFCFCFC;

615 
	}
}

624 
	$FSMC_PCCARDInô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

627 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_FEATURE
(
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
));

628 
	`as£π_∑øm
(
	`IS_FSMC_TCLR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
));

629 
	`as£π_∑øm
(
	`IS_FSMC_TAR_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
));

631 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
));

632 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

633 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

634 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

636 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
));

637 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

638 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

639 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

640 
	`as£π_∑øm
(
	`IS_FSMC_SETUP_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
));

641 
	`as£π_∑øm
(
	`IS_FSMC_WAIT_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
));

642 
	`as£π_∑øm
(
	`IS_FSMC_HOLD_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
));

643 
	`as£π_∑øm
(
	`IS_FSMC_HIZ_TIME
(
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
));

646 
FSMC_B™k4
->
PCR4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 |

647 
FSMC_Mem‹yD©aWidth_16b
 |

648 (
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 << 9) |

649 (
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 << 13);

652 
FSMC_B™k4
->
PMEM4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 |

653 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

654 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

655 (
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

658 
FSMC_B™k4
->
PATT4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

659 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

660 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

661 (
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

664 
FSMC_B™k4
->
PIO4
 = (
uöt32_t
)
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 |

665 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 << 8) |

666 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 << 16)|

667 (
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 << 24);

668 
	}
}

676 
	$FSMC_PCCARDSåu˘Inô
(
FSMC_PCCARDInôTy≥Def
* 
FSMC_PCCARDInôSåu˘
)

679 
FSMC_PCCARDInôSåu˘
->
FSMC_Waô„©uª
 = 
FSMC_Waô„©uª_DißbÀ
;

680 
FSMC_PCCARDInôSåu˘
->
FSMC_TCLRSëupTime
 = 0x0;

681 
FSMC_PCCARDInôSåu˘
->
FSMC_TARSëupTime
 = 0x0;

682 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

683 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

684 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

685 
FSMC_PCCARDInôSåu˘
->
FSMC_Comm⁄S∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

686 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

687 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

688 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

689 
FSMC_PCCARDInôSåu˘
->
FSMC_AâribuãS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

690 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_SëupTime
 = 0xFC;

691 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_WaôSëupTime
 = 0xFC;

692 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HﬁdSëupTime
 = 0xFC;

693 
FSMC_PCCARDInôSåu˘
->
FSMC_IOS∑˚TimögSåu˘
->
FSMC_HiZSëupTime
 = 0xFC;

694 
	}
}

702 
	$FSMC_PCCARDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

704 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

706 i‡(
NewSèã
 !
DISABLE
)

709 
FSMC_B™k4
->
PCR4
 |
PCR_PBKEN_SET
;

714 
FSMC_B™k4
->
PCR4
 &
PCR_PBKEN_RESET
;

716 
	}
}

749 
	$FSMC_ITC⁄fig
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

751 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

752 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

753 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

755 i‡(
NewSèã
 !
DISABLE
)

758 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

760 
FSMC_B™k2
->
SR2
 |
FSMC_IT
;

763 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

765 
FSMC_B™k3
->
SR3
 |
FSMC_IT
;

770 
FSMC_B™k4
->
SR4
 |
FSMC_IT
;

776 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

779 
FSMC_B™k2
->
SR2
 &(
uöt32_t
)~
FSMC_IT
;

782 i‡(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

784 
FSMC_B™k3
->
SR3
 &(
uöt32_t
)~
FSMC_IT
;

789 
FSMC_B™k4
->
SR4
 &(
uöt32_t
)~
FSMC_IT
;

792 
	}
}

809 
FœgSètus
 
	$FSMC_GëFœgSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

811 
FœgSètus
 
bô°©us
 = 
RESET
;

812 
uöt32_t
 
tmp§
 = 0x00000000;

815 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

816 
	`as£π_∑øm
(
	`IS_FSMC_GET_FLAG
(
FSMC_FLAG
));

818 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

820 
tmp§
 = 
FSMC_B™k2
->
SR2
;

822 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

824 
tmp§
 = 
FSMC_B™k3
->
SR3
;

829 
tmp§
 = 
FSMC_B™k4
->
SR4
;

833 i‡((
tmp§
 & 
FSMC_FLAG
Ë!(
uöt16_t
)
RESET
 )

835 
bô°©us
 = 
SET
;

839 
bô°©us
 = 
RESET
;

842  
bô°©us
;

843 
	}
}

859 
	$FSMC_CÀ¨Fœg
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_FLAG
)

862 
	`as£π_∑øm
(
	`IS_FSMC_GETFLAG_BANK
(
FSMC_B™k
));

863 
	`as£π_∑øm
(
	`IS_FSMC_CLEAR_FLAG
(
FSMC_FLAG
)) ;

865 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

867 
FSMC_B™k2
->
SR2
 &~
FSMC_FLAG
;

869 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

871 
FSMC_B™k3
->
SR3
 &~
FSMC_FLAG
;

876 
FSMC_B™k4
->
SR4
 &~
FSMC_FLAG
;

878 
	}
}

894 
ITSètus
 
	$FSMC_GëITSètus
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

896 
ITSètus
 
bô°©us
 = 
RESET
;

897 
uöt32_t
 
tmp§
 = 0x0, 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

900 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

901 
	`as£π_∑øm
(
	`IS_FSMC_GET_IT
(
FSMC_IT
));

903 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

905 
tmp§
 = 
FSMC_B™k2
->
SR2
;

907 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

909 
tmp§
 = 
FSMC_B™k3
->
SR3
;

914 
tmp§
 = 
FSMC_B™k4
->
SR4
;

917 
ô°©us
 = 
tmp§
 & 
FSMC_IT
;

919 
ôíabÀ
 = 
tmp§
 & (
FSMC_IT
 >> 3);

920 i‡((
ô°©us
 !(
uöt32_t
)
RESET
Ë&& (
ôíabÀ
 != (uint32_t)RESET))

922 
bô°©us
 = 
SET
;

926 
bô°©us
 = 
RESET
;

928  
bô°©us
;

929 
	}
}

945 
	$FSMC_CÀ¨ITPídögBô
(
uöt32_t
 
FSMC_B™k
, uöt32_à
FSMC_IT
)

948 
	`as£π_∑øm
(
	`IS_FSMC_IT_BANK
(
FSMC_B™k
));

949 
	`as£π_∑øm
(
	`IS_FSMC_IT
(
FSMC_IT
));

951 if(
FSMC_B™k
 =
FSMC_B™k2_NAND
)

953 
FSMC_B™k2
->
SR2
 &~(
FSMC_IT
 >> 3);

955 if(
FSMC_B™k
 =
FSMC_B™k3_NAND
)

957 
FSMC_B™k3
->
SR3
 &~(
FSMC_IT
 >> 3);

962 
FSMC_B™k4
->
SR4
 &~(
FSMC_IT
 >> 3);

964 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_gpio.c

79 
	~"°m32f4xx_gpio.h
"

80 
	~"°m32f4xx_rcc.h
"

120 
	$GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
)

123 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

125 i‡(
GPIOx
 =
GPIOA
)

127 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOA
, 
ENABLE
);

128 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOA
, 
DISABLE
);

130 i‡(
GPIOx
 =
GPIOB
)

132 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOB
, 
ENABLE
);

133 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOB
, 
DISABLE
);

135 i‡(
GPIOx
 =
GPIOC
)

137 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOC
, 
ENABLE
);

138 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOC
, 
DISABLE
);

140 i‡(
GPIOx
 =
GPIOD
)

142 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOD
, 
ENABLE
);

143 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOD
, 
DISABLE
);

145 i‡(
GPIOx
 =
GPIOE
)

147 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOE
, 
ENABLE
);

148 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOE
, 
DISABLE
);

150 i‡(
GPIOx
 =
GPIOF
)

152 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOF
, 
ENABLE
);

153 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOF
, 
DISABLE
);

155 i‡(
GPIOx
 =
GPIOG
)

157 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOG
, 
ENABLE
);

158 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOG
, 
DISABLE
);

160 i‡(
GPIOx
 =
GPIOH
)

162 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOH
, 
ENABLE
);

163 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOH
, 
DISABLE
);

167 i‡(
GPIOx
 =
GPIOI
)

169 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOI
, 
ENABLE
);

170 
	`RCC_AHB1PîùhRe£tCmd
(
RCC_AHB1Pîùh_GPIOI
, 
DISABLE
);

173 
	}
}

182 
	$GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

184 
uöt32_t
 
pöpos
 = 0x00, 
pos
 = 0x00 , 
cuºíçö
 = 0x00;

187 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

188 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_InôSåu˘
->
GPIO_Pö
));

189 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_InôSåu˘
->
GPIO_Mode
));

190 
	`as£π_∑øm
(
	`IS_GPIO_PUPD
(
GPIO_InôSåu˘
->
GPIO_PuPd
));

194 
pöpos
 = 0x00;Öinpos < 0x10;Öinpos++)

196 
pos
 = ((
uöt32_t
)0x01Ë<< 
pöpos
;

198 
cuºíçö
 = (
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
;

200 i‡(
cuºíçö
 =
pos
)

202 
GPIOx
->
MODER
 &~(
GPIO_MODER_MODER0
 << (
pöpos
 * 2));

203 
GPIOx
->
MODER
 |(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
Ë<< (
pöpos
 * 2));

205 i‡((
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_OUT
Ë|| (GPIO_InôSåu˘->GPIO_Modê=
GPIO_Mode_AF
))

208 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_InôSåu˘
->
GPIO_S≥ed
));

211 
GPIOx
->
OSPEEDR
 &~(
GPIO_OSPEEDER_OSPEEDR0
 << (
pöpos
 * 2));

212 
GPIOx
->
OSPEEDR
 |((
uöt32_t
)(
GPIO_InôSåu˘
->
GPIO_S≥ed
Ë<< (
pöpos
 * 2));

215 
	`as£π_∑øm
(
	`IS_GPIO_OTYPE
(
GPIO_InôSåu˘
->
GPIO_OTy≥
));

218 
GPIOx
->
OTYPER
 &~((
GPIO_OTYPER_OT_0
Ë<< ((
uöt16_t
)
pöpos
)) ;

219 
GPIOx
->
OTYPER
 |(
uöt16_t
)(((uöt16_t)
GPIO_InôSåu˘
->
GPIO_OTy≥
Ë<< ((uöt16_t)
pöpos
));

223 
GPIOx
->
PUPDR
 &~(
GPIO_PUPDR_PUPDR0
 << ((
uöt16_t
)
pöpos
 * 2));

224 
GPIOx
->
PUPDR
 |(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_PuPd
Ë<< (
pöpos
 * 2));

227 
	}
}

234 
	$GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

237 
GPIO_InôSåu˘
->
GPIO_Pö
 = 
GPIO_Pö_AŒ
;

238 
GPIO_InôSåu˘
->
GPIO_Mode
 = 
GPIO_Mode_IN
;

239 
GPIO_InôSåu˘
->
GPIO_S≥ed
 = 
GPIO_S≥ed_2MHz
;

240 
GPIO_InôSåu˘
->
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

241 
GPIO_InôSåu˘
->
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

242 
	}
}

255 
	$GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

257 
__IO
 
uöt32_t
 
tmp
 = 0x00010000;

260 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

261 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

263 
tmp
 |
GPIO_Pö
;

265 
GPIOx
->
LCKR
 = 
tmp
;

267 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

269 
GPIOx
->
LCKR
 = 
tmp
;

271 
tmp
 = 
GPIOx
->
LCKR
;

273 
tmp
 = 
GPIOx
->
LCKR
;

274 
	}
}

299 
uöt8_t
 
	$GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

301 
uöt8_t
 
bô°©us
 = 0x00;

304 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

305 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

307 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

309 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

313 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

315  
bô°©us
;

316 
	}
}

323 
uöt16_t
 
	$GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

326 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

328  ((
uöt16_t
)
GPIOx
->
IDR
);

329 
	}
}

338 
uöt8_t
 
	$GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

340 
uöt8_t
 
bô°©us
 = 0x00;

343 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

344 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

346 i‡((
GPIOx
->
ODR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

348 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

352 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

354  
bô°©us
;

355 
	}
}

362 
uöt16_t
 
	$GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

365 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

367  ((
uöt16_t
)
GPIOx
->
ODR
);

368 
	}
}

380 
	$GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

383 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

384 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

386 
GPIOx
->
BSRRL
 = 
GPIO_Pö
;

387 
	}
}

399 
	$GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

402 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

403 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

405 
GPIOx
->
BSRRH
 = 
GPIO_Pö
;

406 
	}
}

419 
	$GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
)

422 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

423 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

424 
	`as£π_∑øm
(
	`IS_GPIO_BIT_ACTION
(
BôVÆ
));

426 i‡(
BôVÆ
 !
Bô_RESET
)

428 
GPIOx
->
BSRRL
 = 
GPIO_Pö
;

432 
GPIOx
->
BSRRH
 = 
GPIO_Pö
 ;

434 
	}
}

442 
	$GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
)

445 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

447 
GPIOx
->
ODR
 = 
P‹tVÆ
;

448 
	}
}

456 
	$GPIO_ToggÀBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

459 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

461 
GPIOx
->
ODR
 ^
GPIO_Pö
;

462 
	}
}

529 
	$GPIO_PöAFC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_PöSour˚
, 
uöt8_t
 
GPIO_AF
)

531 
uöt32_t
 
ãmp
 = 0x00;

532 
uöt32_t
 
ãmp_2
 = 0x00;

535 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

536 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

537 
	`as£π_∑øm
(
	`IS_GPIO_AF
(
GPIO_AF
));

539 
ãmp
 = ((
uöt32_t
)(
GPIO_AF
Ë<< ((uöt32_t)((uöt32_t)
GPIO_PöSour˚
 & (uint32_t)0x07) * 4)) ;

540 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] &~((
uöt32_t
)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;

541 
ãmp_2
 = 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] | 
ãmp
;

542 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] = 
ãmp_2
;

543 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_hash.c

123 
	~"°m32f4xx_hash.h
"

124 
	~"°m32f4xx_rcc.h
"

171 
	$HASH_DeInô
()

174 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_HASH
, 
ENABLE
);

176 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_HASH
, 
DISABLE
);

177 
	}
}

191 
	$HASH_Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
)

194 
	`as£π_∑øm
(
	`IS_HASH_ALGOSELECTION
(
HASH_InôSåu˘
->
HASH_AlgoSñe˘i⁄
));

195 
	`as£π_∑øm
(
	`IS_HASH_DATATYPE
(
HASH_InôSåu˘
->
HASH_D©aTy≥
));

196 
	`as£π_∑øm
(
	`IS_HASH_ALGOMODE
(
HASH_InôSåu˘
->
HASH_AlgoMode
));

199 
HASH
->
CR
 &~ (
HASH_CR_ALGO
 | 
HASH_CR_DATATYPE
 | 
HASH_CR_MODE
);

200 
HASH
->
CR
 |(
HASH_InôSåu˘
->
HASH_AlgoSñe˘i⁄
 | \

201 
HASH_InôSåu˘
->
HASH_D©aTy≥
 | \

202 
HASH_InôSåu˘
->
HASH_AlgoMode
);

205 if(
HASH_InôSåu˘
->
HASH_AlgoMode
 =
HASH_AlgoMode_HMAC
)

207 
	`as£π_∑øm
(
	`IS_HASH_HMAC_KEYTYPE
(
HASH_InôSåu˘
->
HASH_HMACKeyTy≥
));

208 
HASH
->
CR
 &~
HASH_CR_LKEY
;

209 
HASH
->
CR
 |
HASH_InôSåu˘
->
HASH_HMACKeyTy≥
;

214 
HASH
->
CR
 |
HASH_CR_INIT
;

215 
	}
}

225 
	$HASH_Såu˘Inô
(
HASH_InôTy≥Def
* 
HASH_InôSåu˘
)

228 
HASH_InôSåu˘
->
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_SHA1
;

231 
HASH_InôSåu˘
->
HASH_AlgoMode
 = 
HASH_AlgoMode_HASH
;

234 
HASH_InôSåu˘
->
HASH_D©aTy≥
 = 
HASH_D©aTy≥_32b
;

237 
HASH_InôSåu˘
->
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_Sh‹tKey
;

238 
	}
}

249 
	$HASH_Re£t
()

252 
HASH
->
CR
 |
HASH_CR_INIT
;

253 
	}
}

291 
	$HASH_SëLa°W‹dVÆidBôsNbr
(
uöt16_t
 
VÆidNumbî
)

294 
	`as£π_∑øm
(
	`IS_HASH_VALIDBITSNUMBER
(
VÆidNumbî
));

297 
HASH
->
STR
 &~(
HASH_STR_NBW
);

298 
HASH
->
STR
 |
VÆidNumbî
;

299 
	}
}

306 
	$HASH_D©aIn
(
uöt32_t
 
D©a
)

309 
HASH
->
DIN
 = 
D©a
;

310 
	}
}

317 
uöt8_t
 
	$HASH_GëInFIFOW‹dsNbr
()

320  ((
HASH
->
CR
 & 
HASH_CR_NBW
) >> 8);

321 
	}
}

331 
	$HASH_GëDige°
(
HASH_MsgDige°
* 
HASH_MesßgeDige°
)

334 
HASH_MesßgeDige°
->
D©a
[0] = 
HASH
->
HR
[0];

335 
HASH_MesßgeDige°
->
D©a
[1] = 
HASH
->
HR
[1];

336 
HASH_MesßgeDige°
->
D©a
[2] = 
HASH
->
HR
[2];

337 
HASH_MesßgeDige°
->
D©a
[3] = 
HASH
->
HR
[3];

338 
HASH_MesßgeDige°
->
D©a
[4] = 
HASH
->
HR
[4];

339 
	}
}

346 
	$HASH_SèπDige°
()

349 
HASH
->
STR
 |
HASH_STR_DCAL
;

350 
	}
}

389 
	$HASH_SaveC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtSave
)

391 
uöt8_t
 
i
 = 0;

394 
HASH_C⁄ãxtSave
->
HASH_IMR
 = 
HASH
->
IMR
;

395 
HASH_C⁄ãxtSave
->
HASH_STR
 = 
HASH
->
STR
;

396 
HASH_C⁄ãxtSave
->
HASH_CR
 = 
HASH
->
CR
;

397 
i
=0; i<=50;i++)

399 
HASH_C⁄ãxtSave
->
HASH_CSR
[
i
] = 
HASH
->
CSR
[i];

401 
	}
}

411 
	$HASH_Re°‹eC⁄ãxt
(
HASH_C⁄ãxt
* 
HASH_C⁄ãxtRe°‹e
)

413 
uöt8_t
 
i
 = 0;

416 
HASH
->
IMR
 = 
HASH_C⁄ãxtRe°‹e
->
HASH_IMR
;

417 
HASH
->
STR
 = 
HASH_C⁄ãxtRe°‹e
->
HASH_STR
;

418 
HASH
->
CR
 = 
HASH_C⁄ãxtRe°‹e
->
HASH_CR
;

421 
HASH
->
CR
 |
HASH_CR_INIT
;

424 
i
=0; i<=50;i++)

426 
HASH
->
CSR
[
i
] = 
HASH_C⁄ãxtRe°‹e
->
HASH_CSR
[i];

428 
	}
}

460 
	$HASH_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

463 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

465 i‡(
NewSèã
 !
DISABLE
)

468 
HASH
->
CR
 |
HASH_CR_DMAE
;

473 
HASH
->
CR
 &~
HASH_CR_DMAE
;

475 
	}
}

555 
	$HASH_ITC⁄fig
(
uöt8_t
 
HASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

558 
	`as£π_∑øm
(
	`IS_HASH_IT
(
HASH_IT
));

559 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

561 i‡(
NewSèã
 !
DISABLE
)

564 
HASH
->
IMR
 |
HASH_IT
;

569 
HASH
->
IMR
 &(
uöt8_t
Ë~
HASH_IT
;

571 
	}
}

584 
FœgSètus
 
	$HASH_GëFœgSètus
(
uöt16_t
 
HASH_FLAG
)

586 
FœgSètus
 
bô°©us
 = 
RESET
;

587 
uöt32_t
 
ãm¥eg
 = 0;

590 
	`as£π_∑øm
(
	`IS_HASH_GET_FLAG
(
HASH_FLAG
));

593 i‡((
HASH_FLAG
 & 
HASH_FLAG_DINNE
Ë!(
uöt16_t
)
RESET
 )

595 
ãm¥eg
 = 
HASH
->
CR
;

599 
ãm¥eg
 = 
HASH
->
SR
;

603 i‡((
ãm¥eg
 & 
HASH_FLAG
Ë!(
uöt16_t
)
RESET
)

606 
bô°©us
 = 
SET
;

611 
bô°©us
 = 
RESET
;

615  
bô°©us
;

616 
	}
}

625 
	$HASH_CÀ¨Fœg
(
uöt16_t
 
HASH_FLAG
)

628 
	`as£π_∑øm
(
	`IS_HASH_CLEAR_FLAG
(
HASH_FLAG
));

631 
HASH
->
SR
 = ~(
uöt32_t
)
HASH_FLAG
;

632 
	}
}

641 
ITSètus
 
	$HASH_GëITSètus
(
uöt8_t
 
HASH_IT
)

643 
ITSètus
 
bô°©us
 = 
RESET
;

644 
uöt32_t
 
tm¥eg
 = 0;

647 
	`as£π_∑øm
(
	`IS_HASH_GET_IT
(
HASH_IT
));

651 
tm¥eg
 = 
HASH
->
SR
;

653 i‡(((
HASH
->
IMR
 & 
tm¥eg
Ë& 
HASH_IT
Ë!
RESET
)

656 
bô°©us
 = 
SET
;

661 
bô°©us
 = 
RESET
;

664  
bô°©us
;

665 
	}
}

675 
	$HASH_CÀ¨ITPídögBô
(
uöt8_t
 
HASH_IT
)

678 
	`as£π_∑øm
(
	`IS_HASH_IT
(
HASH_IT
));

681 
HASH
->
SR
 = (
uöt8_t
)~
HASH_IT
;

682 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_hash_md5.c

41 
	~"°m32f4xx_hash.h
"

54 
	#MD5BUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

87 
Eº‹Sètus
 
	$HASH_MD5
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[16])

89 
HASH_InôTy≥Def
 
MD5_HASH_InôSåu˘uª
;

90 
HASH_MsgDige°
 
MD5_MesßgeDige°
;

91 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

92 
uöt32_t
 
i
 = 0;

93 
__IO
 
uöt32_t
 
cou¡î
 = 0;

94 
uöt32_t
 
busy°©us
 = 0;

95 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

96 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

97 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

101 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

104 
	`HASH_DeInô
();

107 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_MD5
;

108 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HASH
;

109 
MD5_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

110 
	`HASH_Inô
(&
MD5_HASH_InôSåu˘uª
);

113 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

116 
i
=0; i<
IÀn
; i+=4)

118 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

119 
öpuèddr
+=4;

123 
	`HASH_SèπDige°
();

128 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

129 
cou¡î
++;

130 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

132 i‡(
busy°©us
 !
RESET
)

134 
°©us
 = 
ERROR
;

139 
	`HASH_GëDige°
(&
MD5_MesßgeDige°
);

140 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[0]);

141 
ouçuèddr
+=4;

142 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[1]);

143 
ouçuèddr
+=4;

144 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[2]);

145 
ouçuèddr
+=4;

146 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[3]);

148  
°©us
;

149 
	}
}

162 
Eº‹Sètus
 
	$HMAC_MD5
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
, uöt8_à*
I≈ut
,

163 
uöt32_t
 
IÀn
, 
uöt8_t
 
Ouçut
[16])

165 
HASH_InôTy≥Def
 
MD5_HASH_InôSåu˘uª
;

166 
HASH_MsgDige°
 
MD5_MesßgeDige°
;

167 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

168 
__IO
 
uöt16_t
 
nbvÆidbôskey
 = 0;

169 
uöt32_t
 
i
 = 0;

170 
__IO
 
uöt32_t
 
cou¡î
 = 0;

171 
uöt32_t
 
busy°©us
 = 0;

172 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

173 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

174 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

175 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

178 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

181 
nbvÆidbôskey
 = 8 * (
KeyÀn
 % 4);

184 
	`HASH_DeInô
();

187 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_MD5
;

188 
MD5_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HMAC
;

189 
MD5_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

190 if(
KeyÀn
 > 64)

193 
MD5_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_L⁄gKey
;

198 
MD5_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_Sh‹tKey
;

200 
	`HASH_Inô
(&
MD5_HASH_InôSåu˘uª
);

203 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

206 
i
=0; i<
KeyÀn
; i+=4)

208 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

209 
keyaddr
+=4;

213 
	`HASH_SèπDige°
();

218 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

219 
cou¡î
++;

220 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

222 i‡(
busy°©us
 !
RESET
)

224 
°©us
 = 
ERROR
;

229 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

232 
i
=0; i<
IÀn
; i+=4)

234 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

235 
öpuèddr
+=4;

239 
	`HASH_SèπDige°
();

242 
cou¡î
 =0;

245 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

246 
cou¡î
++;

247 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

249 i‡(
busy°©us
 !
RESET
)

251 
°©us
 = 
ERROR
;

256 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

259 
keyaddr
 = (
uöt32_t
)
Key
;

260 
i
=0; i<
KeyÀn
; i+=4)

262 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

263 
keyaddr
+=4;

267 
	`HASH_SèπDige°
();

270 
cou¡î
 =0;

273 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

274 
cou¡î
++;

275 }(
cou¡î
 !
MD5BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

277 i‡(
busy°©us
 !
RESET
)

279 
°©us
 = 
ERROR
;

284 
	`HASH_GëDige°
(&
MD5_MesßgeDige°
);

285 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[0]);

286 
ouçuèddr
+=4;

287 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[1]);

288 
ouçuèddr
+=4;

289 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[2]);

290 
ouçuèddr
+=4;

291 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
MD5_MesßgeDige°
.
D©a
[3]);

295  
°©us
;

296 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_hash_sha1.c

41 
	~"°m32f4xx_hash.h
"

54 
	#SHA1BUSY_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

87 
Eº‹Sètus
 
	$HASH_SHA1
(
uöt8_t
 *
I≈ut
, 
uöt32_t
 
IÀn
, uöt8_à
Ouçut
[20])

89 
HASH_InôTy≥Def
 
SHA1_HASH_InôSåu˘uª
;

90 
HASH_MsgDige°
 
SHA1_MesßgeDige°
;

91 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

92 
uöt32_t
 
i
 = 0;

93 
__IO
 
uöt32_t
 
cou¡î
 = 0;

94 
uöt32_t
 
busy°©us
 = 0;

95 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

96 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

97 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

100 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

103 
	`HASH_DeInô
();

106 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_SHA1
;

107 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HASH
;

108 
SHA1_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

109 
	`HASH_Inô
(&
SHA1_HASH_InôSåu˘uª
);

112 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

115 
i
=0; i<
IÀn
; i+=4)

117 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

118 
öpuèddr
+=4;

122 
	`HASH_SèπDige°
();

127 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

128 
cou¡î
++;

129 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

131 i‡(
busy°©us
 !
RESET
)

133 
°©us
 = 
ERROR
;

138 
	`HASH_GëDige°
(&
SHA1_MesßgeDige°
);

139 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[0]);

140 
ouçuèddr
+=4;

141 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[1]);

142 
ouçuèddr
+=4;

143 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[2]);

144 
ouçuèddr
+=4;

145 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[3]);

146 
ouçuèddr
+=4;

147 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[4]);

149  
°©us
;

150 
	}
}

163 
Eº‹Sètus
 
	$HMAC_SHA1
(
uöt8_t
 *
Key
, 
uöt32_t
 
KeyÀn
, uöt8_à*
I≈ut
,

164 
uöt32_t
 
IÀn
, 
uöt8_t
 
Ouçut
[20])

166 
HASH_InôTy≥Def
 
SHA1_HASH_InôSåu˘uª
;

167 
HASH_MsgDige°
 
SHA1_MesßgeDige°
;

168 
__IO
 
uöt16_t
 
nbvÆidbôsd©a
 = 0;

169 
__IO
 
uöt16_t
 
nbvÆidbôskey
 = 0;

170 
uöt32_t
 
i
 = 0;

171 
__IO
 
uöt32_t
 
cou¡î
 = 0;

172 
uöt32_t
 
busy°©us
 = 0;

173 
Eº‹Sètus
 
°©us
 = 
SUCCESS
;

174 
uöt32_t
 
keyaddr
 = (uöt32_t)
Key
;

175 
uöt32_t
 
öpuèddr
 = (uöt32_t)
I≈ut
;

176 
uöt32_t
 
ouçuèddr
 = (uöt32_t)
Ouçut
;

179 
nbvÆidbôsd©a
 = 8 * (
IÀn
 % 4);

182 
nbvÆidbôskey
 = 8 * (
KeyÀn
 % 4);

185 
	`HASH_DeInô
();

188 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoSñe˘i⁄
 = 
HASH_AlgoSñe˘i⁄_SHA1
;

189 
SHA1_HASH_InôSåu˘uª
.
HASH_AlgoMode
 = 
HASH_AlgoMode_HMAC
;

190 
SHA1_HASH_InôSåu˘uª
.
HASH_D©aTy≥
 = 
HASH_D©aTy≥_8b
;

191 if(
KeyÀn
 > 64)

194 
SHA1_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_L⁄gKey
;

199 
SHA1_HASH_InôSåu˘uª
.
HASH_HMACKeyTy≥
 = 
HASH_HMACKeyTy≥_Sh‹tKey
;

201 
	`HASH_Inô
(&
SHA1_HASH_InôSåu˘uª
);

204 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

207 
i
=0; i<
KeyÀn
; i+=4)

209 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

210 
keyaddr
+=4;

214 
	`HASH_SèπDige°
();

219 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

220 
cou¡î
++;

221 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

223 i‡(
busy°©us
 !
RESET
)

225 
°©us
 = 
ERROR
;

230 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôsd©a
);

233 
i
=0; i<
IÀn
; i+=4)

235 
	`HASH_D©aIn
(*(
uöt32_t
*)
öpuèddr
);

236 
öpuèddr
+=4;

240 
	`HASH_SèπDige°
();

244 
cou¡î
 =0;

247 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

248 
cou¡î
++;

249 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

251 i‡(
busy°©us
 !
RESET
)

253 
°©us
 = 
ERROR
;

258 
	`HASH_SëLa°W‹dVÆidBôsNbr
(
nbvÆidbôskey
);

261 
keyaddr
 = (
uöt32_t
)
Key
;

262 
i
=0; i<
KeyÀn
; i+=4)

264 
	`HASH_D©aIn
(*(
uöt32_t
*)
keyaddr
);

265 
keyaddr
+=4;

269 
	`HASH_SèπDige°
();

272 
cou¡î
 =0;

275 
busy°©us
 = 
	`HASH_GëFœgSètus
(
HASH_FLAG_BUSY
);

276 
cou¡î
++;

277 }(
cou¡î
 !
SHA1BUSY_TIMEOUT
Ë&& (
busy°©us
 !
RESET
));

279 i‡(
busy°©us
 !
RESET
)

281 
°©us
 = 
ERROR
;

286 
	`HASH_GëDige°
(&
SHA1_MesßgeDige°
);

287 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[0]);

288 
ouçuèddr
+=4;

289 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[1]);

290 
ouçuèddr
+=4;

291 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[2]);

292 
ouçuèddr
+=4;

293 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[3]);

294 
ouçuèddr
+=4;

295 *(
uöt32_t
*)(
ouçuèddr
Ë
	`__REV
(
SHA1_MesßgeDige°
.
D©a
[4]);

299  
°©us
;

300 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_i2c.c

87 
	~"°m32f4xx_i2c.h
"

88 
	~"°m32f4xx_rcc.h
"

102 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)0xFBF5Ë

	)

103 
	#FLAG_MASK
 ((
uöt32_t
)0x00FFFFFFË

	)

104 
	#ITEN_MASK
 ((
uöt32_t
)0x07000000Ë

	)

132 
	$I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
)

135 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

137 i‡(
I2Cx
 =
I2C1
)

140 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
ENABLE
);

142 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
DISABLE
);

144 i‡(
I2Cx
 =
I2C2
)

147 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
ENABLE
);

149 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
DISABLE
);

153 i‡(
I2Cx
 =
I2C3
)

156 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C3
, 
ENABLE
);

158 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C3
, 
DISABLE
);

161 
	}
}

175 
	$I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

177 
uöt16_t
 
tm¥eg
 = 0, 
‰eqønge
 = 0;

178 
uöt16_t
 
ªsu…
 = 0x04;

179 
uöt32_t
 
p˛k1
 = 8000000;

180 
RCC_ClocksTy≥Def
 
rcc_˛ocks
;

182 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

183 
	`as£π_∑øm
(
	`IS_I2C_CLOCK_SPEED
(
I2C_InôSåu˘
->
I2C_ClockS≥ed
));

184 
	`as£π_∑øm
(
	`IS_I2C_MODE
(
I2C_InôSåu˘
->
I2C_Mode
));

185 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_InôSåu˘
->
I2C_DutyCy˛e
));

186 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS1
(
I2C_InôSåu˘
->
I2C_OwnAddªss1
));

187 
	`as£π_∑øm
(
	`IS_I2C_ACK_STATE
(
I2C_InôSåu˘
->
I2C_Ack
));

188 
	`as£π_∑øm
(
	`IS_I2C_ACKNOWLEDGE_ADDRESS
(
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
));

192 
tm¥eg
 = 
I2Cx
->
CR2
;

194 
tm¥eg
 &(
uöt16_t
)~((uöt16_t)
I2C_CR2_FREQ
);

196 
	`RCC_GëClocksFªq
(&
rcc_˛ocks
);

197 
p˛k1
 = 
rcc_˛ocks
.
PCLK1_Fªquícy
;

199 
‰eqønge
 = (
uöt16_t
)(
p˛k1
 / 1000000);

200 
tm¥eg
 |
‰eqønge
;

202 
I2Cx
->
CR2
 = 
tm¥eg
;

206 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_PE
);

209 
tm¥eg
 = 0;

212 i‡(
I2C_InôSåu˘
->
I2C_ClockS≥ed
 <= 100000)

215 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 << 1));

217 i‡(
ªsu…
 < 0x04)

220 
ªsu…
 = 0x04;

223 
tm¥eg
 |
ªsu…
;

225 
I2Cx
->
TRISE
 = 
‰eqønge
 + 1;

232 i‡(
I2C_InôSåu˘
->
I2C_DutyCy˛e
 =
I2C_DutyCy˛e_2
)

235 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 3));

240 
ªsu…
 = (
uöt16_t
)(
p˛k1
 / (
I2C_InôSåu˘
->
I2C_ClockS≥ed
 * 25));

242 
ªsu…
 |
I2C_DutyCy˛e_16_9
;

246 i‡((
ªsu…
 & 
I2C_CCR_CCR
) == 0)

249 
ªsu…
 |(
uöt16_t
)0x0001;

252 
tm¥eg
 |(
uöt16_t
)(
ªsu…
 | 
I2C_CCR_FS
);

254 
I2Cx
->
TRISE
 = (
uöt16_t
)(((
‰eqønge
 * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);

258 
I2Cx
->
CCR
 = 
tm¥eg
;

260 
I2Cx
->
CR1
 |
I2C_CR1_PE
;

264 
tm¥eg
 = 
I2Cx
->
CR1
;

266 
tm¥eg
 &
CR1_CLEAR_MASK
;

270 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
I2C_InôSåu˘
->
I2C_Mode
 | I2C_InôSåu˘->
I2C_Ack
);

272 
I2Cx
->
CR1
 = 
tm¥eg
;

276 
I2Cx
->
OAR1
 = (
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 | I2C_InôSåu˘->
I2C_OwnAddªss1
);

277 
	}
}

284 
	$I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

288 
I2C_InôSåu˘
->
I2C_ClockS≥ed
 = 5000;

290 
I2C_InôSåu˘
->
I2C_Mode
 = 
I2C_Mode_I2C
;

292 
I2C_InôSåu˘
->
I2C_DutyCy˛e
 = 
I2C_DutyCy˛e_2
;

294 
I2C_InôSåu˘
->
I2C_OwnAddªss1
 = 0;

296 
I2C_InôSåu˘
->
I2C_Ack
 = 
I2C_Ack_DißbÀ
;

298 
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 = 
I2C_AcknowÀdgedAddªss_7bô
;

299 
	}
}

308 
	$I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

311 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

312 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

313 i‡(
NewSèã
 !
DISABLE
)

316 
I2Cx
->
CR1
 |
I2C_CR1_PE
;

321 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_PE
);

323 
	}
}

332 
	$I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

335 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

336 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

337 i‡(
NewSèã
 !
DISABLE
)

340 
I2Cx
->
CR1
 |
I2C_CR1_START
;

345 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_START
);

347 
	}
}

356 
	$I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

359 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

360 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

361 i‡(
NewSèã
 !
DISABLE
)

364 
I2Cx
->
CR1
 |
I2C_CR1_STOP
;

369 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_STOP
);

371 
	}
}

384 
	$I2C_Síd7bôAddªss
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
, uöt8_à
I2C_Dúe˘i⁄
)

387 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

388 
	`as£π_∑øm
(
	`IS_I2C_DIRECTION
(
I2C_Dúe˘i⁄
));

390 i‡(
I2C_Dúe˘i⁄
 !
I2C_Dúe˘i⁄_Tønsmôãr
)

393 
Addªss
 |
I2C_OAR1_ADD0
;

398 
Addªss
 &(
uöt8_t
)~((uöt8_t)
I2C_OAR1_ADD0
);

401 
I2Cx
->
DR
 = 
Addªss
;

402 
	}
}

411 
	$I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

414 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

415 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

416 i‡(
NewSèã
 !
DISABLE
)

419 
I2Cx
->
CR1
 |
I2C_CR1_ACK
;

424 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ACK
);

426 
	}
}

434 
	$I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Addªss
)

436 
uöt16_t
 
tm¥eg
 = 0;

439 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

442 
tm¥eg
 = 
I2Cx
->
OAR2
;

445 
tm¥eg
 &(
uöt16_t
)~((uöt16_t)
I2C_OAR2_ADD2
);

448 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
Addªss
 & (uint16_t)0x00FE);

451 
I2Cx
->
OAR2
 = 
tm¥eg
;

452 
	}
}

461 
	$I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

464 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

465 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

466 i‡(
NewSèã
 !
DISABLE
)

469 
I2Cx
->
OAR2
 |
I2C_OAR2_ENDUAL
;

474 
I2Cx
->
OAR2
 &(
uöt16_t
)~((uöt16_t)
I2C_OAR2_ENDUAL
);

476 
	}
}

485 
	$I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

488 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

489 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

490 i‡(
NewSèã
 !
DISABLE
)

493 
I2Cx
->
CR1
 |
I2C_CR1_ENGC
;

498 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ENGC
);

500 
	}
}

511 
	$I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

514 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

515 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

516 i‡(
NewSèã
 !
DISABLE
)

519 
I2Cx
->
CR1
 |
I2C_CR1_SWRST
;

524 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_SWRST
);

526 
	}
}

535 
	$I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

538 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

539 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

540 i‡(
NewSèã
 =
DISABLE
)

543 
I2Cx
->
CR1
 |
I2C_CR1_NOSTRETCH
;

548 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_NOSTRETCH
);

550 
	}
}

561 
	$I2C_Fa°ModeDutyCy˛eC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_DutyCy˛e
)

564 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

565 
	`as£π_∑øm
(
	`IS_I2C_DUTY_CYCLE
(
I2C_DutyCy˛e
));

566 i‡(
I2C_DutyCy˛e
 !
I2C_DutyCy˛e_16_9
)

569 
I2Cx
->
CCR
 &
I2C_DutyCy˛e_2
;

574 
I2Cx
->
CCR
 |
I2C_DutyCy˛e_16_9
;

576 
	}
}

599 
	$I2C_NACKPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_NACKPosôi⁄
)

602 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

603 
	`as£π_∑øm
(
	`IS_I2C_NACK_POSITION
(
I2C_NACKPosôi⁄
));

606 i‡(
I2C_NACKPosôi⁄
 =
I2C_NACKPosôi⁄_Next
)

609 
I2Cx
->
CR1
 |
I2C_NACKPosôi⁄_Next
;

614 
I2Cx
->
CR1
 &
I2C_NACKPosôi⁄_Cuºít
;

616 
	}
}

627 
	$I2C_SMBusAÀπC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_SMBusAÀπ
)

630 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

631 
	`as£π_∑øm
(
	`IS_I2C_SMBUS_ALERT
(
I2C_SMBusAÀπ
));

632 i‡(
I2C_SMBusAÀπ
 =
I2C_SMBusAÀπ_Low
)

635 
I2Cx
->
CR1
 |
I2C_SMBusAÀπ_Low
;

640 
I2Cx
->
CR1
 &
I2C_SMBusAÀπ_High
;

642 
	}
}

651 
	$I2C_ARPCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

654 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

655 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

656 i‡(
NewSèã
 !
DISABLE
)

659 
I2Cx
->
CR1
 |
I2C_CR1_ENARP
;

664 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ENARP
);

666 
	}
}

689 
	$I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
)

692 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

694 
I2Cx
->
DR
 = 
D©a
;

695 
	}
}

702 
uöt8_t
 
	$I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
)

705 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

707  (
uöt8_t
)
I2Cx
->
DR
;

708 
	}
}

733 
	$I2C_TønsmôPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

736 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

737 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

738 i‡(
NewSèã
 !
DISABLE
)

741 
I2Cx
->
CR1
 |
I2C_CR1_PEC
;

746 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_PEC
);

748 
	}
}

764 
	$I2C_PECPosôi⁄C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_PECPosôi⁄
)

767 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

768 
	`as£π_∑øm
(
	`IS_I2C_PEC_POSITION
(
I2C_PECPosôi⁄
));

769 i‡(
I2C_PECPosôi⁄
 =
I2C_PECPosôi⁄_Next
)

772 
I2Cx
->
CR1
 |
I2C_PECPosôi⁄_Next
;

777 
I2Cx
->
CR1
 &
I2C_PECPosôi⁄_Cuºít
;

779 
	}
}

788 
	$I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

791 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

792 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

793 i‡(
NewSèã
 !
DISABLE
)

796 
I2Cx
->
CR1
 |
I2C_CR1_ENPEC
;

801 
I2Cx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
I2C_CR1_ENPEC
);

803 
	}
}

810 
uöt8_t
 
	$I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
)

813 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

815  ((
I2Cx
->
SR2
) >> 8);

816 
	}
}

843 
	$I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

846 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

847 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

848 i‡(
NewSèã
 !
DISABLE
)

851 
I2Cx
->
CR2
 |
I2C_CR2_DMAEN
;

856 
I2Cx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
I2C_CR2_DMAEN
);

858 
	}
}

867 
	$I2C_DMALa°Tøns„rCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

870 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

871 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

872 i‡(
NewSèã
 !
DISABLE
)

875 
I2Cx
->
CR2
 |
I2C_CR2_LAST
;

880 
I2Cx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
I2C_CR2_LAST
);

882 
	}
}

1005 
uöt16_t
 
	$I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
)

1007 
__IO
 
uöt32_t
 
tmp
 = 0;

1010 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1011 
	`as£π_∑øm
(
	`IS_I2C_REGISTER
(
I2C_Regi°î
));

1013 
tmp
 = (
uöt32_t
Ë
I2Cx
;

1014 
tmp
 +
I2C_Regi°î
;

1017  (*(
__IO
 
uöt16_t
 *Ë
tmp
);

1018 
	}
}

1032 
	$I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1035 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1036 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1037 
	`as£π_∑øm
(
	`IS_I2C_CONFIG_IT
(
I2C_IT
));

1039 i‡(
NewSèã
 !
DISABLE
)

1042 
I2Cx
->
CR2
 |
I2C_IT
;

1047 
I2Cx
->
CR2
 &(
uöt16_t
)~
I2C_IT
;

1049 
	}
}

1091 
Eº‹Sètus
 
	$I2C_CheckEvít
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_EVENT
)

1093 
uöt32_t
 
œ°evít
 = 0;

1094 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1095 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1098 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1099 
	`as£π_∑øm
(
	`IS_I2C_EVENT
(
I2C_EVENT
));

1102 
Êag1
 = 
I2Cx
->
SR1
;

1103 
Êag2
 = 
I2Cx
->
SR2
;

1104 
Êag2
 = flag2 << 16;

1107 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_MASK
;

1110 i‡((
œ°evít
 & 
I2C_EVENT
) == I2C_EVENT)

1113 
°©us
 = 
SUCCESS
;

1118 
°©us
 = 
ERROR
;

1121  
°©us
;

1122 
	}
}

1139 
uöt32_t
 
	$I2C_GëLa°Evít
(
I2C_Ty≥Def
* 
I2Cx
)

1141 
uöt32_t
 
œ°evít
 = 0;

1142 
uöt32_t
 
Êag1
 = 0, 
Êag2
 = 0;

1145 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1148 
Êag1
 = 
I2Cx
->
SR1
;

1149 
Êag2
 = 
I2Cx
->
SR2
;

1150 
Êag2
 = flag2 << 16;

1153 
œ°evít
 = (
Êag1
 | 
Êag2
Ë& 
FLAG_MASK
;

1156  
œ°evít
;

1157 
	}
}

1194 
FœgSètus
 
	$I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1196 
FœgSètus
 
bô°©us
 = 
RESET
;

1197 
__IO
 
uöt32_t
 
i2¸eg
 = 0, 
i2cxba£
 = 0;

1200 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1201 
	`as£π_∑øm
(
	`IS_I2C_GET_FLAG
(
I2C_FLAG
));

1204 
i2cxba£
 = (
uöt32_t
)
I2Cx
;

1207 
i2¸eg
 = 
I2C_FLAG
 >> 28;

1210 
I2C_FLAG
 &
FLAG_MASK
;

1212 if(
i2¸eg
 != 0)

1215 
i2cxba£
 += 0x14;

1220 
I2C_FLAG
 = (
uöt32_t
)(I2C_FLAG >> 16);

1222 
i2cxba£
 += 0x18;

1225 if(((*(
__IO
 
uöt32_t
 *)
i2cxba£
Ë& 
I2C_FLAG
Ë!(uöt32_t)
RESET
)

1228 
bô°©us
 = 
SET
;

1233 
bô°©us
 = 
RESET
;

1237  
bô°©us
;

1238 
	}
}

1271 
	$I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1273 
uöt32_t
 
Êagpos
 = 0;

1275 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1276 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_FLAG
(
I2C_FLAG
));

1278 
Êagpos
 = 
I2C_FLAG
 & 
FLAG_MASK
;

1280 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1281 
	}
}

1305 
ITSètus
 
	$I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1307 
ITSètus
 
bô°©us
 = 
RESET
;

1308 
uöt32_t
 
íabÀ°©us
 = 0;

1311 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1312 
	`as£π_∑øm
(
	`IS_I2C_GET_IT
(
I2C_IT
));

1315 
íabÀ°©us
 = (
uöt32_t
)(((
I2C_IT
 & 
ITEN_MASK
Ë>> 16Ë& (
I2Cx
->
CR2
)) ;

1318 
I2C_IT
 &
FLAG_MASK
;

1321 i‡(((
I2Cx
->
SR1
 & 
I2C_IT
Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

1324 
bô°©us
 = 
SET
;

1329 
bô°©us
 = 
RESET
;

1332  
bô°©us
;

1333 
	}
}

1365 
	$I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1367 
uöt32_t
 
Êagpos
 = 0;

1369 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1370 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_IT
(
I2C_IT
));

1373 
Êagpos
 = 
I2C_IT
 & 
FLAG_MASK
;

1376 
I2Cx
->
SR1
 = (
uöt16_t
)~
Êagpos
;

1377 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_iwdg.c

82 
	~"°m32f4xx_iwdg.h
"

97 
	#KR_KEY_RELOAD
 ((
uöt16_t
)0xAAAA)

	)

98 
	#KR_KEY_ENABLE
 ((
uöt16_t
)0xCCCC)

	)

129 
	$IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
)

132 
	`as£π_∑øm
(
	`IS_IWDG_WRITE_ACCESS
(
IWDG_WrôeAc˚ss
));

133 
IWDG
->
KR
 = 
IWDG_WrôeAc˚ss
;

134 
	}
}

149 
	$IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
)

152 
	`as£π_∑øm
(
	`IS_IWDG_PRESCALER
(
IWDG_PªsˇÀr
));

153 
IWDG
->
PR
 = 
IWDG_PªsˇÀr
;

154 
	}
}

162 
	$IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
)

165 
	`as£π_∑øm
(
	`IS_IWDG_RELOAD
(
Rñﬂd
));

166 
IWDG
->
RLR
 = 
Rñﬂd
;

167 
	}
}

175 
	$IWDG_RñﬂdCou¡î
()

177 
IWDG
->
KR
 = 
KR_KEY_RELOAD
;

178 
	}
}

201 
	$IWDG_E«bÀ
()

203 
IWDG
->
KR
 = 
KR_KEY_ENABLE
;

204 
	}
}

230 
FœgSètus
 
	$IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
)

232 
FœgSètus
 
bô°©us
 = 
RESET
;

234 
	`as£π_∑øm
(
	`IS_IWDG_FLAG
(
IWDG_FLAG
));

235 i‡((
IWDG
->
SR
 & 
IWDG_FLAG
Ë!(
uöt32_t
)
RESET
)

237 
bô°©us
 = 
SET
;

241 
bô°©us
 = 
RESET
;

244  
bô°©us
;

245 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_pwr.c

32 
	~"°m32f4xx_pwr.h
"

33 
	~"°m32f4xx_rcc.h
"

47 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

52 
	#CR_OFFSET
 (
PWR_OFFSET
 + 0x00)

	)

53 
	#DBP_BôNumbî
 0x08

	)

54 
	#CR_DBP_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
DBP_BôNumbî
 * 4))

	)

57 
	#PVDE_BôNumbî
 0x04

	)

58 
	#CR_PVDE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PVDE_BôNumbî
 * 4))

	)

61 
	#FPDS_BôNumbî
 0x09

	)

62 
	#CR_FPDS_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
FPDS_BôNumbî
 * 4))

	)

65 
	#PMODE_BôNumbî
 0x0E

	)

66 
	#CR_PMODE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PMODE_BôNumbî
 * 4))

	)

72 
	#CSR_OFFSET
 (
PWR_OFFSET
 + 0x04)

	)

73 
	#EWUP_BôNumbî
 0x08

	)

74 
	#CSR_EWUP_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
EWUP_BôNumbî
 * 4))

	)

77 
	#BRE_BôNumbî
 0x09

	)

78 
	#CSR_BRE_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
BRE_BôNumbî
 * 4))

	)

83 
	#CR_DS_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

84 
	#CR_PLS_MASK
 ((
uöt32_t
)0xFFFFFF1F)

	)

120 
	$PWR_DeInô
()

122 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
ENABLE
);

123 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
DISABLE
);

124 
	}
}

135 
	$PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

138 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

140 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
NewSèã
;

141 
	}
}

181 
	$PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
)

183 
uöt32_t
 
tm¥eg
 = 0;

186 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
PWR_PVDLevñ
));

188 
tm¥eg
 = 
PWR
->
CR
;

191 
tm¥eg
 &
CR_PLS_MASK
;

194 
tm¥eg
 |
PWR_PVDLevñ
;

197 
PWR
->
CR
 = 
tm¥eg
;

198 
	}
}

206 
	$PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

209 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

211 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
NewSèã
;

212 
	}
}

240 
	$PWR_WakeUpPöCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

243 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

245 *(
__IO
 
uöt32_t
 *Ë
CSR_EWUP_BB
 = (uöt32_t)
NewSèã
;

246 
	}
}

298 
	$PWR_BackupReguœt‹Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

301 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

303 *(
__IO
 
uöt32_t
 *Ë
CSR_BRE_BB
 = (uöt32_t)
NewSèã
;

304 
	}
}

318 
	$PWR_MaöReguœt‹ModeC⁄fig
(
uöt32_t
 
PWR_Reguœt‹_Vﬁège
)

321 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR_VOLTAGE
(
PWR_Reguœt‹_Vﬁège
));

323 i‡(
PWR_Reguœt‹_Vﬁège
 =
PWR_Reguœt‹_Vﬁège_SˇÀ2
)

325 
PWR
->
CR
 &~
PWR_Reguœt‹_Vﬁège_SˇÀ1
;

329 
PWR
->
CR
 |
PWR_Reguœt‹_Vﬁège_SˇÀ1
;

331 
	}
}

360 
	$PWR_FœshPowîDownCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

363 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

365 *(
__IO
 
uöt32_t
 *Ë
CR_FPDS_BB
 = (uöt32_t)
NewSèã
;

366 
	}
}

500 
	$PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

502 
uöt32_t
 
tm¥eg
 = 0;

505 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
PWR_Reguœt‹
));

506 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

509 
tm¥eg
 = 
PWR
->
CR
;

511 
tm¥eg
 &
CR_DS_MASK
;

514 
tm¥eg
 |
PWR_Reguœt‹
;

517 
PWR
->
CR
 = 
tm¥eg
;

520 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

523 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

526 
	`__WFI
();

531 
	`__WFE
();

534 
SCB
->
SCR
 &(
uöt32_t
)~((uöt32_t)
SCB_SCR_SLEEPDEEP_Msk
);

535 
	}
}

548 
	$PWR_E¡îSTANDBYMode
()

551 
PWR
->
CR
 |
PWR_CR_CWUF
;

554 
PWR
->
CR
 |
PWR_CR_PDDS
;

557 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

560 #i‡
	`deföed
 ( 
__CC_ARM
 )

561 
	`__f‹˚_°‹es
();

564 
	`__WFI
();

565 
	}
}

605 
FœgSètus
 
	$PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
)

607 
FœgSètus
 
bô°©us
 = 
RESET
;

610 
	`as£π_∑øm
(
	`IS_PWR_GET_FLAG
(
PWR_FLAG
));

612 i‡((
PWR
->
CSR
 & 
PWR_FLAG
Ë!(
uöt32_t
)
RESET
)

614 
bô°©us
 = 
SET
;

618 
bô°©us
 = 
RESET
;

621  
bô°©us
;

622 
	}
}

632 
	$PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
)

635 
	`as£π_∑øm
(
	`IS_PWR_CLEAR_FLAG
(
PWR_FLAG
));

637 
PWR
->
CR
 |
PWR_FLAG
 << 2;

638 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_rcc.c

56 
	~"°m32f4xx_rcc.h
"

70 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

73 
	#CR_OFFSET
 (
RCC_OFFSET
 + 0x00)

	)

74 
	#HSION_BôNumbî
 0x00

	)

75 
	#CR_HSION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
HSION_BôNumbî
 * 4))

	)

77 
	#CSSON_BôNumbî
 0x13

	)

78 
	#CR_CSSON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
CSSON_BôNumbî
 * 4))

	)

80 
	#PLLON_BôNumbî
 0x18

	)

81 
	#CR_PLLON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLON_BôNumbî
 * 4))

	)

83 
	#PLLI2SON_BôNumbî
 0x1A

	)

84 
	#CR_PLLI2SON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLI2SON_BôNumbî
 * 4))

	)

88 
	#CFGR_OFFSET
 (
RCC_OFFSET
 + 0x08)

	)

89 
	#I2SSRC_BôNumbî
 0x17

	)

90 
	#CFGR_I2SSRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
I2SSRC_BôNumbî
 * 4))

	)

94 
	#BDCR_OFFSET
 (
RCC_OFFSET
 + 0x70)

	)

95 
	#RTCEN_BôNumbî
 0x0F

	)

96 
	#BDCR_RTCEN_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
RTCEN_BôNumbî
 * 4))

	)

98 
	#BDRST_BôNumbî
 0x10

	)

99 
	#BDCR_BDRST_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
BDRST_BôNumbî
 * 4))

	)

102 
	#CSR_OFFSET
 (
RCC_OFFSET
 + 0x74)

	)

103 
	#LSION_BôNumbî
 0x00

	)

104 
	#CSR_LSION_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
LSION_BôNumbî
 * 4))

	)

107 
	#CFGR_MCO2_RESET_MASK
 ((
uöt32_t
)0x07FFFFFF)

	)

108 
	#CFGR_MCO1_RESET_MASK
 ((
uöt32_t
)0xF89FFFFF)

	)

111 
	#FLAG_MASK
 ((
uöt8_t
)0x1F)

	)

114 
	#CR_BYTE3_ADDRESS
 ((
uöt32_t
)0x40023802)

	)

117 
	#CIR_BYTE2_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 0x0C + 0x01))

	)

120 
	#CIR_BYTE3_ADDRESS
 ((
uöt32_t
)(
RCC_BASE
 + 0x0C + 0x02))

	)

123 
	#BDCR_ADDRESS
 (
PERIPH_BASE
 + 
BDCR_OFFSET
)

	)

127 
__I
 
uöt8_t
 
	gAPBAHBPªscTabÀ
[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};

196 
	$RCC_DeInô
()

199 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

202 
RCC
->
CFGR
 = 0x00000000;

205 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

208 
RCC
->
PLLCFGR
 = 0x24003010;

211 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

214 
RCC
->
CIR
 = 0x00000000;

215 
	}
}

237 
	$RCC_HSEC⁄fig
(
uöt8_t
 
RCC_HSE
)

240 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_HSE
));

243 *(
__IO
 
uöt8_t
 *Ë
CR_BYTE3_ADDRESS
 = 
RCC_HSE_OFF
;

246 *(
__IO
 
uöt8_t
 *Ë
CR_BYTE3_ADDRESS
 = 
RCC_HSE
;

247 
	}
}

261 
Eº‹Sètus
 
	$RCC_WaôF‹HSESèπUp
()

263 
__IO
 
uöt32_t
 
°¨tupcou¡î
 = 0;

264 
Eº‹Sètus
 
°©us
 = 
ERROR
;

265 
FœgSètus
 
h£°©us
 = 
RESET
;

269 
h£°©us
 = 
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
);

270 
°¨tupcou¡î
++;

271 } (
°¨tupcou¡î
 !
HSE_STARTUP_TIMEOUT
Ë&& (
h£°©us
 =
RESET
));

273 i‡(
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
Ë!
RESET
)

275 
°©us
 = 
SUCCESS
;

279 
°©us
 = 
ERROR
;

281  (
°©us
);

282 
	}
}

292 
	$RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
)

294 
uöt32_t
 
tm¥eg
 = 0;

296 
	`as£π_∑øm
(
	`IS_RCC_CALIBRATION_VALUE
(
HSICÆibøti⁄VÆue
));

298 
tm¥eg
 = 
RCC
->
CR
;

301 
tm¥eg
 &~
RCC_CR_HSITRIM
;

304 
tm¥eg
 |(
uöt32_t
)
HSICÆibøti⁄VÆue
 << 3;

307 
RCC
->
CR
 = 
tm¥eg
;

308 
	}
}

328 
	$RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

331 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

333 *(
__IO
 
uöt32_t
 *Ë
CR_HSION_BB
 = (uöt32_t)
NewSèã
;

334 
	}
}

353 
	$RCC_LSEC⁄fig
(
uöt8_t
 
RCC_LSE
)

356 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_LSE
));

360 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

363 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_OFF
;

366 
RCC_LSE
)

368 
RCC_LSE_ON
:

370 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_ON
;

372 
RCC_LSE_By∑ss
:

374 *(
__IO
 
uöt8_t
 *Ë
BDCR_ADDRESS
 = 
RCC_LSE_By∑ss
 | 
RCC_LSE_ON
;

379 
	}
}

393 
	$RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

396 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

398 *(
__IO
 
uöt32_t
 *Ë
CSR_LSION_BB
 = (uöt32_t)
NewSèã
;

399 
	}
}

436 
	$RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
PLLM
, uöt32_à
PLLN
, uöt32_à
PLLP
, uöt32_à
PLLQ
)

439 
	`as£π_∑øm
(
	`IS_RCC_PLL_SOURCE
(
RCC_PLLSour˚
));

440 
	`as£π_∑øm
(
	`IS_RCC_PLLM_VALUE
(
PLLM
));

441 
	`as£π_∑øm
(
	`IS_RCC_PLLN_VALUE
(
PLLN
));

442 
	`as£π_∑øm
(
	`IS_RCC_PLLP_VALUE
(
PLLP
));

443 
	`as£π_∑øm
(
	`IS_RCC_PLLQ_VALUE
(
PLLQ
));

445 
RCC
->
PLLCFGR
 = 
PLLM
 | (
PLLN
 << 6Ë| (((
PLLP
 >> 1Ë-1Ë<< 16Ë| (
RCC_PLLSour˚
) |

446 (
PLLQ
 << 24);

447 
	}
}

459 
	$RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

462 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

463 *(
__IO
 
uöt32_t
 *Ë
CR_PLLON_BB
 = (uöt32_t)
NewSèã
;

464 
	}
}

485 
	$RCC_PLLI2SC⁄fig
(
uöt32_t
 
PLLI2SN
, uöt32_à
PLLI2SR
)

488 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SN_VALUE
(
PLLI2SN
));

489 
	`as£π_∑øm
(
	`IS_RCC_PLLI2SR_VALUE
(
PLLI2SR
));

491 
RCC
->
PLLI2SCFGR
 = (
PLLI2SN
 << 6Ë| (
PLLI2SR
 << 28);

492 
	}
}

500 
	$RCC_PLLI2SCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

503 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

504 *(
__IO
 
uöt32_t
 *Ë
CR_PLLI2SON_BB
 = (uöt32_t)
NewSèã
;

505 
	}
}

518 
	$RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

521 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

522 *(
__IO
 
uöt32_t
 *Ë
CR_CSSON_BB
 = (uöt32_t)
NewSèã
;

523 
	}
}

543 
	$RCC_MCO1C⁄fig
(
uöt32_t
 
RCC_MCO1Sour˚
, uöt32_à
RCC_MCO1Div
)

545 
uöt32_t
 
tm¥eg
 = 0;

548 
	`as£π_∑øm
(
	`IS_RCC_MCO1SOURCE
(
RCC_MCO1Sour˚
));

549 
	`as£π_∑øm
(
	`IS_RCC_MCO1DIV
(
RCC_MCO1Div
));

551 
tm¥eg
 = 
RCC
->
CFGR
;

554 
tm¥eg
 &
CFGR_MCO1_RESET_MASK
;

557 
tm¥eg
 |
RCC_MCO1Sour˚
 | 
RCC_MCO1Div
;

560 
RCC
->
CFGR
 = 
tm¥eg
;

561 
	}
}

581 
	$RCC_MCO2C⁄fig
(
uöt32_t
 
RCC_MCO2Sour˚
, uöt32_à
RCC_MCO2Div
)

583 
uöt32_t
 
tm¥eg
 = 0;

586 
	`as£π_∑øm
(
	`IS_RCC_MCO2SOURCE
(
RCC_MCO2Sour˚
));

587 
	`as£π_∑øm
(
	`IS_RCC_MCO2DIV
(
RCC_MCO2Div
));

589 
tm¥eg
 = 
RCC
->
CFGR
;

592 
tm¥eg
 &
CFGR_MCO2_RESET_MASK
;

595 
tm¥eg
 |
RCC_MCO2Sour˚
 | 
RCC_MCO2Div
;

598 
RCC
->
CFGR
 = 
tm¥eg
;

599 
	}
}

687 
	$RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
)

689 
uöt32_t
 
tm¥eg
 = 0;

692 
	`as£π_∑øm
(
	`IS_RCC_SYSCLK_SOURCE
(
RCC_SYSCLKSour˚
));

694 
tm¥eg
 = 
RCC
->
CFGR
;

697 
tm¥eg
 &~
RCC_CFGR_SW
;

700 
tm¥eg
 |
RCC_SYSCLKSour˚
;

703 
RCC
->
CFGR
 = 
tm¥eg
;

704 
	}
}

715 
uöt8_t
 
	$RCC_GëSYSCLKSour˚
()

717  ((
uöt8_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_SWS
));

718 
	}
}

740 
	$RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
)

742 
uöt32_t
 
tm¥eg
 = 0;

745 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_SYSCLK
));

747 
tm¥eg
 = 
RCC
->
CFGR
;

750 
tm¥eg
 &~
RCC_CFGR_HPRE
;

753 
tm¥eg
 |
RCC_SYSCLK
;

756 
RCC
->
CFGR
 = 
tm¥eg
;

757 
	}
}

772 
	$RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
)

774 
uöt32_t
 
tm¥eg
 = 0;

777 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

779 
tm¥eg
 = 
RCC
->
CFGR
;

782 
tm¥eg
 &~
RCC_CFGR_PPRE1
;

785 
tm¥eg
 |
RCC_HCLK
;

788 
RCC
->
CFGR
 = 
tm¥eg
;

789 
	}
}

803 
	$RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
)

805 
uöt32_t
 
tm¥eg
 = 0;

808 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

810 
tm¥eg
 = 
RCC
->
CFGR
;

813 
tm¥eg
 &~
RCC_CFGR_PPRE2
;

816 
tm¥eg
 |
RCC_HCLK
 << 3;

819 
RCC
->
CFGR
 = 
tm¥eg
;

820 
	}
}

855 
	$RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
)

857 
uöt32_t
 
tmp
 = 0, 
¥esc
 = 0, 
∂lvco
 = 0, 
∂Õ
 = 2, 
∂lsour˚
 = 0, 
∂lm
 = 2;

860 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

862 
tmp
)

865 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

868 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VALUE
;

875 
∂lsour˚
 = (
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
) >> 22;

876 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

878 i‡(
∂lsour˚
 != 0)

881 
∂lvco
 = (
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

886 
∂lvco
 = (
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

889 
∂Õ
 = (((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLP
) >>16) + 1 ) *2;

890 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
∂lvco
/
∂Õ
;

893 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

899 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
;

900 
tmp
 =Åmp >> 4;

901 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

903 
RCC_Clocks
->
HCLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
 >> 
¥esc
;

906 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
;

907 
tmp
 =Åmp >> 10;

908 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

910 
RCC_Clocks
->
PCLK1_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

913 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
;

914 
tmp
 =Åmp >> 13;

915 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

917 
RCC_Clocks
->
PCLK2_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

918 
	}
}

980 
	$RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
)

982 
uöt32_t
 
tm¥eg
 = 0;

985 
	`as£π_∑øm
(
	`IS_RCC_RTCCLK_SOURCE
(
RCC_RTCCLKSour˚
));

987 i‡((
RCC_RTCCLKSour˚
 & 0x00000300) == 0x00000300)

989 
tm¥eg
 = 
RCC
->
CFGR
;

992 
tm¥eg
 &~
RCC_CFGR_RTCPRE
;

995 
tm¥eg
 |(
RCC_RTCCLKSour˚
 & 0xFFFFCFF);

998 
RCC
->
CFGR
 = 
tm¥eg
;

1002 
RCC
->
BDCR
 |(
RCC_RTCCLKSour˚
 & 0x00000FFF);

1003 
	}
}

1012 
	$RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1015 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1017 *(
__IO
 
uöt32_t
 *Ë
BDCR_RTCEN_BB
 = (uöt32_t)
NewSèã
;

1018 
	}
}

1029 
	$RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1032 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1033 *(
__IO
 
uöt32_t
 *Ë
BDCR_BDRST_BB
 = (uöt32_t)
NewSèã
;

1034 
	}
}

1046 
	$RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SCLKSour˚
)

1049 
	`as£π_∑øm
(
	`IS_RCC_I2SCLK_SOURCE
(
RCC_I2SCLKSour˚
));

1051 *(
__IO
 
uöt32_t
 *Ë
CFGR_I2SSRC_BB
 = 
RCC_I2SCLKSour˚
;

1052 
	}
}

1085 
	$RCC_AHB1PîùhClockCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1088 
	`as£π_∑øm
(
	`IS_RCC_AHB1_CLOCK_PERIPH
(
RCC_AHB1Pîùh
));

1090 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1091 i‡(
NewSèã
 !
DISABLE
)

1093 
RCC
->
AHB1ENR
 |
RCC_AHB1Pîùh
;

1097 
RCC
->
AHB1ENR
 &~
RCC_AHB1Pîùh
;

1099 
	}
}

1117 
	$RCC_AHB2PîùhClockCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1120 
	`as£π_∑øm
(
	`IS_RCC_AHB2_PERIPH
(
RCC_AHB2Pîùh
));

1121 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1123 i‡(
NewSèã
 !
DISABLE
)

1125 
RCC
->
AHB2ENR
 |
RCC_AHB2Pîùh
;

1129 
RCC
->
AHB2ENR
 &~
RCC_AHB2Pîùh
;

1131 
	}
}

1144 
	$RCC_AHB3PîùhClockCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1147 
	`as£π_∑øm
(
	`IS_RCC_AHB3_PERIPH
(
RCC_AHB3Pîùh
));

1148 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1150 i‡(
NewSèã
 !
DISABLE
)

1152 
RCC
->
AHB3ENR
 |
RCC_AHB3Pîùh
;

1156 
RCC
->
AHB3ENR
 &~
RCC_AHB3Pîùh
;

1158 
	}
}

1194 
	$RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1197 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1198 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1200 i‡(
NewSèã
 !
DISABLE
)

1202 
RCC
->
APB1ENR
 |
RCC_APB1Pîùh
;

1206 
RCC
->
APB1ENR
 &~
RCC_APB1Pîùh
;

1208 
	}
}

1234 
	$RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1237 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1238 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1240 i‡(
NewSèã
 !
DISABLE
)

1242 
RCC
->
APB2ENR
 |
RCC_APB2Pîùh
;

1246 
RCC
->
APB2ENR
 &~
RCC_APB2Pîùh
;

1248 
	}
}

1273 
	$RCC_AHB1PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1276 
	`as£π_∑øm
(
	`IS_RCC_AHB1_RESET_PERIPH
(
RCC_AHB1Pîùh
));

1277 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1279 i‡(
NewSèã
 !
DISABLE
)

1281 
RCC
->
AHB1RSTR
 |
RCC_AHB1Pîùh
;

1285 
RCC
->
AHB1RSTR
 &~
RCC_AHB1Pîùh
;

1287 
	}
}

1302 
	$RCC_AHB2PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1305 
	`as£π_∑øm
(
	`IS_RCC_AHB2_PERIPH
(
RCC_AHB2Pîùh
));

1306 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1308 i‡(
NewSèã
 !
DISABLE
)

1310 
RCC
->
AHB2RSTR
 |
RCC_AHB2Pîùh
;

1314 
RCC
->
AHB2RSTR
 &~
RCC_AHB2Pîùh
;

1316 
	}
}

1326 
	$RCC_AHB3PîùhRe£tCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1329 
	`as£π_∑øm
(
	`IS_RCC_AHB3_PERIPH
(
RCC_AHB3Pîùh
));

1330 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1332 i‡(
NewSèã
 !
DISABLE
)

1334 
RCC
->
AHB3RSTR
 |
RCC_AHB3Pîùh
;

1338 
RCC
->
AHB3RSTR
 &~
RCC_AHB3Pîùh
;

1340 
	}
}

1373 
	$RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1376 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1377 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1378 i‡(
NewSèã
 !
DISABLE
)

1380 
RCC
->
APB1RSTR
 |
RCC_APB1Pîùh
;

1384 
RCC
->
APB1RSTR
 &~
RCC_APB1Pîùh
;

1386 
	}
}

1409 
	$RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1412 
	`as£π_∑øm
(
	`IS_RCC_APB2_RESET_PERIPH
(
RCC_APB2Pîùh
));

1413 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1414 i‡(
NewSèã
 !
DISABLE
)

1416 
RCC
->
APB2RSTR
 |
RCC_APB2Pîùh
;

1420 
RCC
->
APB2RSTR
 &~
RCC_APB2Pîùh
;

1422 
	}
}

1455 
	$RCC_AHB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1458 
	`as£π_∑øm
(
	`IS_RCC_AHB1_LPMODE_PERIPH
(
RCC_AHB1Pîùh
));

1459 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1460 i‡(
NewSèã
 !
DISABLE
)

1462 
RCC
->
AHB1LPENR
 |
RCC_AHB1Pîùh
;

1466 
RCC
->
AHB1LPENR
 &~
RCC_AHB1Pîùh
;

1468 
	}
}

1487 
	$RCC_AHB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1490 
	`as£π_∑øm
(
	`IS_RCC_AHB2_PERIPH
(
RCC_AHB2Pîùh
));

1491 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1492 i‡(
NewSèã
 !
DISABLE
)

1494 
RCC
->
AHB2LPENR
 |
RCC_AHB2Pîùh
;

1498 
RCC
->
AHB2LPENR
 &~
RCC_AHB2Pîùh
;

1500 
	}
}

1514 
	$RCC_AHB3PîùhClockLPModeCmd
(
uöt32_t
 
RCC_AHB3Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1517 
	`as£π_∑øm
(
	`IS_RCC_AHB3_PERIPH
(
RCC_AHB3Pîùh
));

1518 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1519 i‡(
NewSèã
 !
DISABLE
)

1521 
RCC
->
AHB3LPENR
 |
RCC_AHB3Pîùh
;

1525 
RCC
->
AHB3LPENR
 &~
RCC_AHB3Pîùh
;

1527 
	}
}

1564 
	$RCC_APB1PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1567 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1568 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1569 i‡(
NewSèã
 !
DISABLE
)

1571 
RCC
->
APB1LPENR
 |
RCC_APB1Pîùh
;

1575 
RCC
->
APB1LPENR
 &~
RCC_APB1Pîùh
;

1577 
	}
}

1604 
	$RCC_APB2PîùhClockLPModeCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1607 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1608 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1609 i‡(
NewSèã
 !
DISABLE
)

1611 
RCC
->
APB2LPENR
 |
RCC_APB2Pîùh
;

1615 
RCC
->
APB2LPENR
 &~
RCC_APB2Pîùh
;

1617 
	}
}

1649 
	$RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1652 
	`as£π_∑øm
(
	`IS_RCC_IT
(
RCC_IT
));

1653 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1654 i‡(
NewSèã
 !
DISABLE
)

1657 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 |
RCC_IT
;

1662 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 &(uöt8_t)~
RCC_IT
;

1664 
	}
}

1685 
FœgSètus
 
	$RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
)

1687 
uöt32_t
 
tmp
 = 0;

1688 
uöt32_t
 
°©u§eg
 = 0;

1689 
FœgSètus
 
bô°©us
 = 
RESET
;

1692 
	`as£π_∑øm
(
	`IS_RCC_FLAG
(
RCC_FLAG
));

1695 
tmp
 = 
RCC_FLAG
 >> 5;

1696 i‡(
tmp
 == 1)

1698 
°©u§eg
 = 
RCC
->
CR
;

1700 i‡(
tmp
 == 2)

1702 
°©u§eg
 = 
RCC
->
BDCR
;

1706 
°©u§eg
 = 
RCC
->
CSR
;

1710 
tmp
 = 
RCC_FLAG
 & 
FLAG_MASK
;

1711 i‡((
°©u§eg
 & ((
uöt32_t
)1 << 
tmp
)Ë!(uöt32_t)
RESET
)

1713 
bô°©us
 = 
SET
;

1717 
bô°©us
 = 
RESET
;

1720  
bô°©us
;

1721 
	}
}

1730 
	$RCC_CÀ¨Fœg
()

1733 
RCC
->
CSR
 |
RCC_CSR_RMVF
;

1734 
	}
}

1749 
ITSètus
 
	$RCC_GëITSètus
(
uöt8_t
 
RCC_IT
)

1751 
ITSètus
 
bô°©us
 = 
RESET
;

1754 
	`as£π_∑øm
(
	`IS_RCC_GET_IT
(
RCC_IT
));

1757 i‡((
RCC
->
CIR
 & 
RCC_IT
Ë!(
uöt32_t
)
RESET
)

1759 
bô°©us
 = 
SET
;

1763 
bô°©us
 = 
RESET
;

1766  
bô°©us
;

1767 
	}
}

1782 
	$RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
)

1785 
	`as£π_∑øm
(
	`IS_RCC_CLEAR_IT
(
RCC_IT
));

1789 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE3_ADDRESS
 = 
RCC_IT
;

1790 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_rng.c

51 
	~"°m32f4xx_∫g.h
"

52 
	~"°m32f4xx_rcc.h
"

94 
	$RNG_DeInô
()

97 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_RNG
, 
ENABLE
);

100 
	`RCC_AHB2PîùhRe£tCmd
(
RCC_AHB2Pîùh_RNG
, 
DISABLE
);

101 
	}
}

109 
	$RNG_Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

112 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

114 i‡(
NewSèã
 !
DISABLE
)

117 
RNG
->
CR
 |
RNG_CR_RNGEN
;

122 
RNG
->
CR
 &~
RNG_CR_RNGEN
;

124 
	}
}

171 
uöt32_t
 
	$RNG_GëR™domNumbî
()

174  
RNG
->
DR
;

175 
	}
}

268 
	$RNG_ITC⁄fig
(
Fun˘i⁄ÆSèã
 
NewSèã
)

271 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

273 i‡(
NewSèã
 !
DISABLE
)

276 
RNG
->
CR
 |
RNG_CR_IE
;

281 
RNG
->
CR
 &~
RNG_CR_IE
;

283 
	}
}

294 
FœgSètus
 
	$RNG_GëFœgSètus
(
uöt8_t
 
RNG_FLAG
)

296 
FœgSètus
 
bô°©us
 = 
RESET
;

298 
	`as£π_∑øm
(
	`IS_RNG_GET_FLAG
(
RNG_FLAG
));

301 i‡((
RNG
->
SR
 & 
RNG_FLAG
Ë!(
uöt8_t
)
RESET
)

304 
bô°©us
 = 
SET
;

309 
bô°©us
 = 
RESET
;

312  
bô°©us
;

313 
	}
}

327 
	$RNG_CÀ¨Fœg
(
uöt8_t
 
RNG_FLAG
)

330 
	`as£π_∑øm
(
	`IS_RNG_CLEAR_FLAG
(
RNG_FLAG
));

332 
RNG
->
SR
 = ~(
uöt32_t
)(((uöt32_t)
RNG_FLAG
) << 4);

333 
	}
}

343 
ITSètus
 
	$RNG_GëITSètus
(
uöt8_t
 
RNG_IT
)

345 
ITSètus
 
bô°©us
 = 
RESET
;

347 
	`as£π_∑øm
(
	`IS_RNG_GET_IT
(
RNG_IT
));

350 i‡((
RNG
->
SR
 & 
RNG_IT
Ë!(
uöt8_t
)
RESET
)

353 
bô°©us
 = 
SET
;

358 
bô°©us
 = 
RESET
;

361  
bô°©us
;

362 
	}
}

373 
	$RNG_CÀ¨ITPídögBô
(
uöt8_t
 
RNG_IT
)

376 
	`as£π_∑øm
(
	`IS_RNG_IT
(
RNG_IT
));

379 
RNG
->
SR
 = (
uöt8_t
)~
RNG_IT
;

380 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_rtc.c

277 
	~"°m32f4xx_πc.h
"

278 
	~"°m32f4xx_rcc.h
"

293 
	#RTC_TR_RESERVED_MASK
 ((
uöt32_t
)0x007F7F7F)

	)

294 
	#RTC_DR_RESERVED_MASK
 ((
uöt32_t
)0x00FFFF3F)

	)

295 
	#RTC_INIT_MASK
 ((
uöt32_t
)0xFFFFFFFF)

	)

296 
	#RTC_RSF_MASK
 ((
uöt32_t
)0xFFFFFF5F)

	)

297 
	#RTC_FLAGS_MASK
 ((
uöt32_t
)(
RTC_FLAG_TSOVF
 | 
RTC_FLAG_TSF
 | 
RTC_FLAG_WUTF
 | \

298 
RTC_FLAG_ALRBF
 | 
RTC_FLAG_ALRAF
 | 
RTC_FLAG_INITF
 | \

299 
RTC_FLAG_RSF
 | 
RTC_FLAG_INITS
 | 
RTC_FLAG_WUTWF
 | \

300 
RTC_FLAG_ALRBWF
 | 
RTC_FLAG_ALRAWF
 | 
RTC_FLAG_TAMP1F
 ))

	)

302 
	#INITMODE_TIMEOUT
 ((
uöt32_t
Ë0x00010000)

	)

303 
	#SYNCHRO_TIMEOUT
 ((
uöt32_t
Ë0x00020000)

	)

304 
	#RECALPF_TIMEOUT
 ((
uöt32_t
Ë0x00020000)

	)

305 
	#SHPF_TIMEOUT
 ((
uöt32_t
Ë0x00001000)

	)

310 
uöt8_t
 
RTC_ByãToBcd2
(uöt8_à
VÆue
);

311 
uöt8_t
 
RTC_Bcd2ToByã
(uöt8_à
VÆue
);

367 
Eº‹Sètus
 
	$RTC_DeInô
()

369 
__IO
 
uöt32_t
 
wutcou¡î
 = 0x00;

370 
uöt32_t
 
wutwf°©us
 = 0x00;

371 
Eº‹Sètus
 
°©us
 = 
ERROR
;

374 
RTC
->
WPR
 = 0xCA;

375 
RTC
->
WPR
 = 0x53;

378 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

380 
°©us
 = 
ERROR
;

385 
RTC
->
TR
 = (
uöt32_t
)0x00000000;

386 
RTC
->
DR
 = (
uöt32_t
)0x00002101;

388 
RTC
->
CR
 &(
uöt32_t
)0x00000007;

393 
wutwf°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_WUTWF
;

394 
wutcou¡î
++;

395 } (
wutcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
wutwf°©us
 == 0x00));

397 i‡((
RTC
->
ISR
 & 
RTC_ISR_WUTWF
Ë=
RESET
)

399 
°©us
 = 
ERROR
;

404 
RTC
->
CR
 &(
uöt32_t
)0x00000000;

405 
RTC
->
WUTR
 = (
uöt32_t
)0x0000FFFF;

406 
RTC
->
PRER
 = (
uöt32_t
)0x007F00FF;

407 
RTC
->
CALIBR
 = (
uöt32_t
)0x00000000;

408 
RTC
->
ALRMAR
 = (
uöt32_t
)0x00000000;

409 
RTC
->
ALRMBR
 = (
uöt32_t
)0x00000000;

412 
RTC
->
ISR
 = (
uöt32_t
)0x00000000;

415 
RTC
->
TAFCR
 = 0x00000000;

417 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

419 
°©us
 = 
ERROR
;

423 
°©us
 = 
SUCCESS
;

429 
RTC
->
WPR
 = 0xFF;

431  
°©us
;

432 
	}
}

445 
Eº‹Sètus
 
	$RTC_Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
)

447 
Eº‹Sètus
 
°©us
 = 
ERROR
;

450 
	`as£π_∑øm
(
	`IS_RTC_HOUR_FORMAT
(
RTC_InôSåu˘
->
RTC_HourF‹m©
));

451 
	`as£π_∑øm
(
	`IS_RTC_ASYNCH_PREDIV
(
RTC_InôSåu˘
->
RTC_AsynchPªdiv
));

452 
	`as£π_∑øm
(
	`IS_RTC_SYNCH_PREDIV
(
RTC_InôSåu˘
->
RTC_SynchPªdiv
));

455 
RTC
->
WPR
 = 0xCA;

456 
RTC
->
WPR
 = 0x53;

459 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

461 
°©us
 = 
ERROR
;

466 
RTC
->
CR
 &((
uöt32_t
)~(
RTC_CR_FMT
));

468 
RTC
->
CR
 |((
uöt32_t
)(
RTC_InôSåu˘
->
RTC_HourF‹m©
));

471 
RTC
->
PRER
 = (
uöt32_t
)(
RTC_InôSåu˘
->
RTC_SynchPªdiv
);

472 
RTC
->
PRER
 |(
uöt32_t
)(
RTC_InôSåu˘
->
RTC_AsynchPªdiv
 << 16);

475 
	`RTC_ExôInôMode
();

477 
°©us
 = 
SUCCESS
;

480 
RTC
->
WPR
 = 0xFF;

482  
°©us
;

483 
	}
}

491 
	$RTC_Såu˘Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
)

494 
RTC_InôSåu˘
->
RTC_HourF‹m©
 = 
RTC_HourF‹m©_24
;

497 
RTC_InôSåu˘
->
RTC_AsynchPªdiv
 = (
uöt32_t
)0x7F;

500 
RTC_InôSåu˘
->
RTC_SynchPªdiv
 = (
uöt32_t
)0xFF;

501 
	}
}

513 
	$RTC_WrôePrŸe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

516 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

518 i‡(
NewSèã
 !
DISABLE
)

521 
RTC
->
WPR
 = 0xFF;

526 
RTC
->
WPR
 = 0xCA;

527 
RTC
->
WPR
 = 0x53;

529 
	}
}

540 
Eº‹Sètus
 
	$RTC_E¡îInôMode
()

542 
__IO
 
uöt32_t
 
öôcou¡î
 = 0x00;

543 
Eº‹Sètus
 
°©us
 = 
ERROR
;

544 
uöt32_t
 
öô°©us
 = 0x00;

547 i‡((
RTC
->
ISR
 & 
RTC_ISR_INITF
Ë=(
uöt32_t
)
RESET
)

550 
RTC
->
ISR
 = (
uöt32_t
)
RTC_INIT_MASK
;

555 
öô°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_INITF
;

556 
öôcou¡î
++;

557 } (
öôcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
öô°©us
 == 0x00));

559 i‡((
RTC
->
ISR
 & 
RTC_ISR_INITF
Ë!
RESET
)

561 
°©us
 = 
SUCCESS
;

565 
°©us
 = 
ERROR
;

570 
°©us
 = 
SUCCESS
;

573  (
°©us
);

574 
	}
}

585 
	$RTC_ExôInôMode
()

588 
RTC
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

589 
	}
}

607 
Eº‹Sètus
 
	$RTC_WaôF‹Synchro
()

609 
__IO
 
uöt32_t
 
synchrocou¡î
 = 0;

610 
Eº‹Sètus
 
°©us
 = 
ERROR
;

611 
uöt32_t
 
synchro°©us
 = 0x00;

614 
RTC
->
WPR
 = 0xCA;

615 
RTC
->
WPR
 = 0x53;

618 
RTC
->
ISR
 &(
uöt32_t
)
RTC_RSF_MASK
;

623 
synchro°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_RSF
;

624 
synchrocou¡î
++;

625 } (
synchrocou¡î
 !
SYNCHRO_TIMEOUT
Ë&& (
synchro°©us
 == 0x00));

627 i‡((
RTC
->
ISR
 & 
RTC_ISR_RSF
Ë!
RESET
)

629 
°©us
 = 
SUCCESS
;

633 
°©us
 = 
ERROR
;

637 
RTC
->
WPR
 = 0xFF;

639  (
°©us
);

640 
	}
}

650 
Eº‹Sètus
 
	$RTC_RefClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

652 
Eº‹Sètus
 
°©us
 = 
ERROR
;

655 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

658 
RTC
->
WPR
 = 0xCA;

659 
RTC
->
WPR
 = 0x53;

662 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

664 
°©us
 = 
ERROR
;

668 i‡(
NewSèã
 !
DISABLE
)

671 
RTC
->
CR
 |
RTC_CR_REFCKON
;

676 
RTC
->
CR
 &~
RTC_CR_REFCKON
;

679 
	`RTC_ExôInôMode
();

681 
°©us
 = 
SUCCESS
;

685 
RTC
->
WPR
 = 0xFF;

687  
°©us
;

688 
	}
}

698 
	$RTC_By∑ssShadowCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

701 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

704 
RTC
->
WPR
 = 0xCA;

705 
RTC
->
WPR
 = 0x53;

707 i‡(
NewSèã
 !
DISABLE
)

710 
RTC
->
CR
 |(
uöt8_t
)
RTC_CR_BYPSHAD
;

715 
RTC
->
CR
 &(
uöt8_t
)~
RTC_CR_BYPSHAD
;

719 
RTC
->
WPR
 = 0xFF;

720 
	}
}

753 
Eº‹Sètus
 
	$RTC_SëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

755 
uöt32_t
 
tm¥eg
 = 0;

756 
Eº‹Sètus
 
°©us
 = 
ERROR
;

759 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

761 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

763 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

765 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
RTC_TimeSåu˘
->
RTC_Hours
));

766 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_TimeSåu˘
->
RTC_H12
));

770 
RTC_TimeSåu˘
->
RTC_H12
 = 0x00;

771 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
RTC_TimeSåu˘
->
RTC_Hours
));

773 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
RTC_TimeSåu˘
->
RTC_Möuãs
));

774 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
));

778 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

780 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Hours
);

781 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

782 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_TimeSåu˘
->
RTC_H12
));

786 
RTC_TimeSåu˘
->
RTC_H12
 = 0x00;

787 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Hours
)));

789 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Möuãs
)));

790 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
)));

794 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

796 
tm¥eg
 = (((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_Hours
) << 16) | \

797 ((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_Möuãs
) << 8) | \

798 ((
uöt32_t
)
RTC_TimeSåu˘
->
RTC_Sec⁄ds
) | \

799 ((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_H12
) << 16));

803 
tm¥eg
 = (
uöt32_t
)(((uöt32_t)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Hours
) << 16) | \

804 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Möuãs
) << 8) | \

805 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
)) | \

806 (((
uöt32_t
)
RTC_TimeSåu˘
->
RTC_H12
) << 16));

810 
RTC
->
WPR
 = 0xCA;

811 
RTC
->
WPR
 = 0x53;

814 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

816 
°©us
 = 
ERROR
;

821 
RTC
->
TR
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_TR_RESERVED_MASK
);

824 
	`RTC_ExôInôMode
();

826 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

828 
°©us
 = 
ERROR
;

832 
°©us
 = 
SUCCESS
;

837 
RTC
->
WPR
 = 0xFF;

839  
°©us
;

840 
	}
}

849 
	$RTC_TimeSåu˘Inô
(
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

852 
RTC_TimeSåu˘
->
RTC_H12
 = 
RTC_H12_AM
;

853 
RTC_TimeSåu˘
->
RTC_Hours
 = 0;

854 
RTC_TimeSåu˘
->
RTC_Möuãs
 = 0;

855 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = 0;

856 
	}
}

868 
	$RTC_GëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

870 
uöt32_t
 
tm¥eg
 = 0;

873 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

876 
tm¥eg
 = (
uöt32_t
)(
RTC
->
TR
 & 
RTC_TR_RESERVED_MASK
);

879 
RTC_TimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

880 
RTC_TimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >>8);

881 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)(
tm¥eg
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

882 
RTC_TimeSåu˘
->
RTC_H12
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_PM
)) >> 16);

885 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

888 
RTC_TimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Hours);

889 
RTC_TimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Minutes);

890 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Seconds);

892 
	}
}

901 
uöt32_t
 
	$RTC_GëSubSec⁄d
()

903 
uöt32_t
 
tm¥eg
 = 0;

906 
tm¥eg
 = (
uöt32_t
)(
RTC
->
SSR
);

909 (Ë(
RTC
->
DR
);

911  (
tm¥eg
);

912 
	}
}

926 
Eº‹Sètus
 
	$RTC_SëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

928 
uöt32_t
 
tm¥eg
 = 0;

929 
Eº‹Sètus
 
°©us
 = 
ERROR
;

932 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

934 i‡((
RTC_F‹m©
 =
RTC_F‹m©_BIN
Ë&& ((
RTC_D©eSåu˘
->
RTC_M⁄th
 & 0x10) == 0x10))

936 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (RTC_D©eSåu˘->RTC_M⁄th & (
uöt32_t
)~(0x10)) + 0x0A;

938 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

940 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
RTC_D©eSåu˘
->
RTC_Yór
));

941 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
RTC_D©eSåu˘
->
RTC_M⁄th
));

942 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
RTC_D©eSåu˘
->
RTC_D©e
));

946 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_Yór
)));

947 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_M⁄th
);

948 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
tm¥eg
));

949 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_D©e
);

950 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
tm¥eg
));

952 
	`as£π_∑øm
(
	`IS_RTC_WEEKDAY
(
RTC_D©eSåu˘
->
RTC_WìkDay
));

955 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

957 
tm¥eg
 = ((((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_Yór
) << 16) | \

958 (((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_M⁄th
) << 8) | \

959 ((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_D©e
) | \

960 (((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_WìkDay
) << 13));

964 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_Yór
) << 16) | \

965 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_M⁄th
) << 8) | \

966 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_D©e
)) | \

967 ((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_WìkDay
 << 13));

971 
RTC
->
WPR
 = 0xCA;

972 
RTC
->
WPR
 = 0x53;

975 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

977 
°©us
 = 
ERROR
;

982 
RTC
->
DR
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_DR_RESERVED_MASK
);

985 
	`RTC_ExôInôMode
();

987 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

989 
°©us
 = 
ERROR
;

993 
°©us
 = 
SUCCESS
;

997 
RTC
->
WPR
 = 0xFF;

999  
°©us
;

1000 
	}
}

1009 
	$RTC_D©eSåu˘Inô
(
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

1012 
RTC_D©eSåu˘
->
RTC_WìkDay
 = 
RTC_Wìkday_M⁄day
;

1013 
RTC_D©eSåu˘
->
RTC_D©e
 = 1;

1014 
RTC_D©eSåu˘
->
RTC_M⁄th
 = 
RTC_M⁄th_J™u¨y
;

1015 
RTC_D©eSåu˘
->
RTC_Yór
 = 0;

1016 
	}
}

1028 
	$RTC_GëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

1030 
uöt32_t
 
tm¥eg
 = 0;

1033 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1036 
tm¥eg
 = (
uöt32_t
)(
RTC
->
DR
 & 
RTC_DR_RESERVED_MASK
);

1039 
RTC_D©eSåu˘
->
RTC_Yór
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_YT
 | 
RTC_DR_YU
)) >> 16);

1040 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

1041 
RTC_D©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)(
tm¥eg
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

1042 
RTC_D©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_WDU
)) >> 13);

1045 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1048 
RTC_D©eSåu˘
->
RTC_Yór
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Year);

1049 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Month);

1050 
RTC_D©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Date);

1052 
	}
}

1088 
	$RTC_SëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1090 
uöt32_t
 
tm¥eg
 = 0;

1093 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1094 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1095 
	`as£π_∑øm
(
	`IS_ALARM_MASK
(
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1096 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
));

1098 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1100 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

1102 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
));

1103 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
));

1107 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 0x00;

1108 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
));

1110 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
));

1111 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
));

1113 if(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 =
RTC_AœrmD©eWìkDaySñ_D©e
)

1115 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
));

1119 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
));

1124 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

1126 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
);

1127 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

1128 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
));

1132 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 0x00;

1133 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
)));

1136 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
)));

1137 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
)));

1139 if(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 =
RTC_AœrmD©eWìkDaySñ_D©e
)

1141 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
);

1142 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
tm¥eg
));

1146 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
);

1147 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
tm¥eg
));

1152 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

1154 
tm¥eg
 = (((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
) << 16) | \

1155 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
) << 8) | \

1156 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
) | \

1157 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
) << 16) | \

1158 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
) << 24) | \

1159 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
) | \

1160 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1164 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
) << 16) | \

1165 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
) << 8) | \

1166 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
)) | \

1167 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
) << 16) | \

1168 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
) << 24) | \

1169 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
) | \

1170 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1174 
RTC
->
WPR
 = 0xCA;

1175 
RTC
->
WPR
 = 0x53;

1178 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1180 
RTC
->
ALRMAR
 = (
uöt32_t
)
tm¥eg
;

1184 
RTC
->
ALRMBR
 = (
uöt32_t
)
tm¥eg
;

1188 
RTC
->
WPR
 = 0xFF;

1189 
	}
}

1199 
	$RTC_AœrmSåu˘Inô
(
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1202 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 
RTC_H12_AM
;

1203 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = 0;

1204 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = 0;

1205 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = 0;

1208 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 = 
RTC_AœrmD©eWìkDaySñ_D©e
;

1209 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = 1;

1212 
RTC_AœrmSåu˘
->
RTC_AœrmMask
 = 
RTC_AœrmMask_N⁄e
;

1213 
	}
}

1229 
	$RTC_GëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1231 
uöt32_t
 
tm¥eg
 = 0;

1234 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1235 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1238 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1240 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ALRMAR
);

1244 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ALRMBR
);

1248 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_HT
 | \

1249 
RTC_ALRMAR_HU
)) >> 16);

1250 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_MNT
 | \

1251 
RTC_ALRMAR_MNU
)) >> 8);

1252 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = (
uöt32_t
)(
tm¥eg
 & (
RTC_ALRMAR_ST
 | \

1253 
RTC_ALRMAR_SU
));

1254 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = (
uöt32_t
)((
tm¥eg
 & 
RTC_ALRMAR_PM
) >> 16);

1255 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_DT
 | 
RTC_ALRMAR_DU
)) >> 24);

1256 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_ALRMAR_WDSEL
);

1257 
RTC_AœrmSåu˘
->
RTC_AœrmMask
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_AœrmMask_AŒ
);

1259 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1261 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1262 
RTC_AœrmTime
.
RTC_Hours
);

1263 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1264 
RTC_AœrmTime
.
RTC_Möuãs
);

1265 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1266 
RTC_AœrmTime
.
RTC_Sec⁄ds
);

1267 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct->RTC_AlarmDateWeekDay);

1269 
	}
}

1283 
Eº‹Sètus
 
	$RTC_AœrmCmd
(
uöt32_t
 
RTC_Aœrm
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1285 
__IO
 
uöt32_t
 
Æ¨mcou¡î
 = 0x00;

1286 
uöt32_t
 
Æ¨m°©us
 = 0x00;

1287 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1290 
	`as£π_∑øm
(
	`IS_RTC_CMD_ALARM
(
RTC_Aœrm
));

1291 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1294 
RTC
->
WPR
 = 0xCA;

1295 
RTC
->
WPR
 = 0x53;

1298 i‡(
NewSèã
 !
DISABLE
)

1300 
RTC
->
CR
 |(
uöt32_t
)
RTC_Aœrm
;

1302 
°©us
 = 
SUCCESS
;

1307 
RTC
->
CR
 &(
uöt32_t
)~
RTC_Aœrm
;

1312 
Æ¨m°©us
 = 
RTC
->
ISR
 & (
RTC_Aœrm
 >> 8);

1313 
Æ¨mcou¡î
++;

1314 } (
Æ¨mcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
Æ¨m°©us
 == 0x00));

1316 i‡((
RTC
->
ISR
 & (
RTC_Aœrm
 >> 8)Ë=
RESET
)

1318 
°©us
 = 
ERROR
;

1322 
°©us
 = 
SUCCESS
;

1327 
RTC
->
WPR
 = 0xFF;

1329  
°©us
;

1330 
	}
}

1377 
	$RTC_AœrmSubSec⁄dC⁄fig
(
uöt32_t
 
RTC_Aœrm
, uöt32_à
RTC_AœrmSubSec⁄dVÆue
, uöt32_à
RTC_AœrmSubSec⁄dMask
)

1379 
uöt32_t
 
tm¥eg
 = 0;

1382 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1383 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_VALUE
(
RTC_AœrmSubSec⁄dVÆue
));

1384 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_MASK
(
RTC_AœrmSubSec⁄dMask
));

1387 
RTC
->
WPR
 = 0xCA;

1388 
RTC
->
WPR
 = 0x53;

1391 
tm¥eg
 = (
uöt32_t
Ë(uöt32_t)(
RTC_AœrmSubSec⁄dVÆue
Ë| (uöt32_t)(
RTC_AœrmSubSec⁄dMask
);

1393 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1396 
RTC
->
ALRMASSR
 = 
tm¥eg
;

1401 
RTC
->
ALRMBSSR
 = 
tm¥eg
;

1405 
RTC
->
WPR
 = 0xFF;

1407 
	}
}

1418 
uöt32_t
 
	$RTC_GëAœrmSubSec⁄d
(
uöt32_t
 
RTC_Aœrm
)

1420 
uöt32_t
 
tm¥eg
 = 0;

1423 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1425 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ALRMASSR
Ë& 
RTC_ALRMASSR_SS
);

1429 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ALRMBSSR
Ë& 
RTC_ALRMBSSR_SS
);

1432  (
tm¥eg
);

1433 
	}
}

1467 
	$RTC_WakeUpClockC⁄fig
(
uöt32_t
 
RTC_WakeUpClock
)

1470 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_CLOCK
(
RTC_WakeUpClock
));

1473 
RTC
->
WPR
 = 0xCA;

1474 
RTC
->
WPR
 = 0x53;

1477 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_WUCKSEL
;

1480 
RTC
->
CR
 |(
uöt32_t
)
RTC_WakeUpClock
;

1483 
RTC
->
WPR
 = 0xFF;

1484 
	}
}

1494 
	$RTC_SëWakeUpCou¡î
(
uöt32_t
 
RTC_WakeUpCou¡î
)

1497 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_COUNTER
(
RTC_WakeUpCou¡î
));

1500 
RTC
->
WPR
 = 0xCA;

1501 
RTC
->
WPR
 = 0x53;

1504 
RTC
->
WUTR
 = (
uöt32_t
)
RTC_WakeUpCou¡î
;

1507 
RTC
->
WPR
 = 0xFF;

1508 
	}
}

1515 
uöt32_t
 
	$RTC_GëWakeUpCou¡î
()

1518  ((
uöt32_t
)(
RTC
->
WUTR
 & 
RTC_WUTR_WUT
));

1519 
	}
}

1527 
Eº‹Sètus
 
	$RTC_WakeUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1529 
__IO
 
uöt32_t
 
wutcou¡î
 = 0x00;

1530 
uöt32_t
 
wutwf°©us
 = 0x00;

1531 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1534 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1537 
RTC
->
WPR
 = 0xCA;

1538 
RTC
->
WPR
 = 0x53;

1540 i‡(
NewSèã
 !
DISABLE
)

1543 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_WUTE
;

1544 
°©us
 = 
SUCCESS
;

1549 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_WUTE
;

1553 
wutwf°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_WUTWF
;

1554 
wutcou¡î
++;

1555 } (
wutcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
wutwf°©us
 == 0x00));

1557 i‡((
RTC
->
ISR
 & 
RTC_ISR_WUTWF
Ë=
RESET
)

1559 
°©us
 = 
ERROR
;

1563 
°©us
 = 
SUCCESS
;

1568 
RTC
->
WPR
 = 0xFF;

1570  
°©us
;

1571 
	}
}

1604 
	$RTC_DayLightSavögC⁄fig
(
uöt32_t
 
RTC_DayLightSavög
, uöt32_à
RTC_St‹eO≥øti⁄
)

1607 
	`as£π_∑øm
(
	`IS_RTC_DAYLIGHT_SAVING
(
RTC_DayLightSavög
));

1608 
	`as£π_∑øm
(
	`IS_RTC_STORE_OPERATION
(
RTC_St‹eO≥øti⁄
));

1611 
RTC
->
WPR
 = 0xCA;

1612 
RTC
->
WPR
 = 0x53;

1615 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_BCK
);

1618 
RTC
->
CR
 |(
uöt32_t
)(
RTC_DayLightSavög
 | 
RTC_St‹eO≥øti⁄
);

1621 
RTC
->
WPR
 = 0xFF;

1622 
	}
}

1631 
uöt32_t
 
	$RTC_GëSt‹eO≥øti⁄
()

1633  (
RTC
->
CR
 & 
RTC_CR_BCK
);

1634 
	}
}

1670 
	$RTC_OuçutC⁄fig
(
uöt32_t
 
RTC_Ouçut
, uöt32_à
RTC_OuçutPﬁ¨ôy
)

1673 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT
(
RTC_Ouçut
));

1674 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT_POL
(
RTC_OuçutPﬁ¨ôy
));

1677 
RTC
->
WPR
 = 0xCA;

1678 
RTC
->
WPR
 = 0x53;

1681 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_OSEL
 | 
RTC_CR_POL
);

1684 
RTC
->
CR
 |(
uöt32_t
)(
RTC_Ouçut
 | 
RTC_OuçutPﬁ¨ôy
);

1687 
RTC
->
WPR
 = 0xFF;

1688 
	}
}

1724 
Eº‹Sètus
 
	$RTC_Cﬂr£CÆibC⁄fig
(
uöt32_t
 
RTC_CÆibSign
, uöt32_à
VÆue
)

1726 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1729 
	`as£π_∑øm
(
	`IS_RTC_CALIB_SIGN
(
RTC_CÆibSign
));

1730 
	`as£π_∑øm
(
	`IS_RTC_CALIB_VALUE
(
VÆue
));

1733 
RTC
->
WPR
 = 0xCA;

1734 
RTC
->
WPR
 = 0x53;

1737 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

1739 
°©us
 = 
ERROR
;

1744 
RTC
->
CALIBR
 = (
uöt32_t
)(
RTC_CÆibSign
 | 
VÆue
);

1746 
	`RTC_ExôInôMode
();

1748 
°©us
 = 
SUCCESS
;

1752 
RTC
->
WPR
 = 0xFF;

1754  
°©us
;

1755 
	}
}

1765 
Eº‹Sètus
 
	$RTC_Cﬂr£CÆibCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1767 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1770 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1773 
RTC
->
WPR
 = 0xCA;

1774 
RTC
->
WPR
 = 0x53;

1777 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

1779 
°©us
 = 
ERROR
;

1783 i‡(
NewSèã
 !
DISABLE
)

1786 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_DCE
;

1791 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_DCE
;

1794 
	`RTC_ExôInôMode
();

1796 
°©us
 = 
SUCCESS
;

1800 
RTC
->
WPR
 = 0xFF;

1802  
°©us
;

1803 
	}
}

1811 
	$RTC_CÆibOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1814 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1817 
RTC
->
WPR
 = 0xCA;

1818 
RTC
->
WPR
 = 0x53;

1820 i‡(
NewSèã
 !
DISABLE
)

1823 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_COE
;

1828 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_COE
;

1832 
RTC
->
WPR
 = 0xFF;

1833 
	}
}

1843 
	$RTC_CÆibOuçutC⁄fig
(
uöt32_t
 
RTC_CÆibOuçut
)

1846 
	`as£π_∑øm
(
	`IS_RTC_CALIB_OUTPUT
(
RTC_CÆibOuçut
));

1849 
RTC
->
WPR
 = 0xCA;

1850 
RTC
->
WPR
 = 0x53;

1853 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_COSEL
);

1856 
RTC
->
CR
 |(
uöt32_t
)
RTC_CÆibOuçut
;

1859 
RTC
->
WPR
 = 0xFF;

1860 
	}
}

1879 
Eº‹Sètus
 
	$RTC_SmoŸhCÆibC⁄fig
(
uöt32_t
 
RTC_SmoŸhCÆibPîiod
,

1880 
uöt32_t
 
RTC_SmoŸhCÆibPlusPul£s
,

1881 
uöt32_t
 
RTC_SmouthCÆibMöusPul£sVÆue
)

1883 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1884 
uöt32_t
 
ªˇÕfcou¡
 = 0;

1887 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PERIOD
(
RTC_SmoŸhCÆibPîiod
));

1888 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PLUS
(
RTC_SmoŸhCÆibPlusPul£s
));

1889 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_MINUS
(
RTC_SmouthCÆibMöusPul£sVÆue
));

1892 
RTC
->
WPR
 = 0xCA;

1893 
RTC
->
WPR
 = 0x53;

1896 i‡((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
)

1899 ((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
Ë&& (
ªˇÕfcou¡
 !
RECALPF_TIMEOUT
))

1901 
ªˇÕfcou¡
++;

1906 i‡((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë=
RESET
)

1909 
RTC
->
CALR
 = (
uöt32_t
)((uöt32_t)
RTC_SmoŸhCÆibPîiod
 | (uöt32_t)
RTC_SmoŸhCÆibPlusPul£s
 | (uöt32_t)
RTC_SmouthCÆibMöusPul£sVÆue
);

1911 
°©us
 = 
SUCCESS
;

1915 
°©us
 = 
ERROR
;

1919 
RTC
->
WPR
 = 0xFF;

1921  (
Eº‹Sètus
)(
°©us
);

1922 
	}
}

1955 
	$RTC_TimeSèmpCmd
(
uöt32_t
 
RTC_TimeSèmpEdge
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1957 
uöt32_t
 
tm¥eg
 = 0;

1960 
	`as£π_∑øm
(
	`IS_RTC_TIMESTAMP_EDGE
(
RTC_TimeSèmpEdge
));

1961 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1964 
tm¥eg
 = (
uöt32_t
)(
RTC
->
CR
 & (uöt32_t)~(
RTC_CR_TSEDGE
 | 
RTC_CR_TSE
));

1967 i‡(
NewSèã
 !
DISABLE
)

1969 
tm¥eg
 |(
uöt32_t
)(
RTC_TimeSèmpEdge
 | 
RTC_CR_TSE
);

1973 
tm¥eg
 |(
uöt32_t
)(
RTC_TimeSèmpEdge
);

1977 
RTC
->
WPR
 = 0xCA;

1978 
RTC
->
WPR
 = 0x53;

1981 
RTC
->
CR
 = (
uöt32_t
)
tm¥eg
;

1984 
RTC
->
WPR
 = 0xFF;

1985 
	}
}

1999 
	$RTC_GëTimeSèmp
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_SèmpTimeSåu˘
,

2000 
RTC_D©eTy≥Def
* 
RTC_SèmpD©eSåu˘
)

2002 
uöt32_t
 
tm±ime
 = 0, 
tmpd©e
 = 0;

2005 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

2008 
tm±ime
 = (
uöt32_t
)(
RTC
->
TSTR
 & 
RTC_TR_RESERVED_MASK
);

2009 
tmpd©e
 = (
uöt32_t
)(
RTC
->
TSDR
 & 
RTC_DR_RESERVED_MASK
);

2012 
RTC_SèmpTimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

2013 
RTC_SèmpTimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >> 8);

2014 
RTC_SèmpTimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)(
tm±ime
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

2015 
RTC_SèmpTimeSåu˘
->
RTC_H12
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_PM
)) >> 16);

2018 
RTC_SèmpD©eSåu˘
->
RTC_Yór
 = 0;

2019 
RTC_SèmpD©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

2020 
RTC_SèmpD©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)(
tmpd©e
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

2021 
RTC_SèmpD©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_WDU
)) >> 13);

2024 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

2027 
RTC_SèmpTimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Hours);

2028 
RTC_SèmpTimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Minutes);

2029 
RTC_SèmpTimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Seconds);

2032 
RTC_SèmpD©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_Month);

2033 
RTC_SèmpD©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_Date);

2034 
RTC_SèmpD©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_WeekDay);

2036 
	}
}

2043 
uöt32_t
 
	$RTC_GëTimeSèmpSubSec⁄d
()

2046  (
uöt32_t
)(
RTC
->
TSSSR
);

2047 
	}
}

2078 
	$RTC_Tam≥rTriggîC⁄fig
(
uöt32_t
 
RTC_Tam≥r
, uöt32_à
RTC_Tam≥rTriggî
)

2081 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
RTC_Tam≥r
));

2082 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_TRIGGER
(
RTC_Tam≥rTriggî
));

2084 i‡(
RTC_Tam≥rTriggî
 =
RTC_Tam≥rTriggî_RisögEdge
)

2087 
RTC
->
TAFCR
 &(
uöt32_t
)((uöt32_t)~(
RTC_Tam≥r
 << 1));

2092 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_Tam≥r
 << 1);

2094 
	}
}

2104 
	$RTC_Tam≥rCmd
(
uöt32_t
 
RTC_Tam≥r
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2107 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
RTC_Tam≥r
));

2108 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2110 i‡(
NewSèã
 !
DISABLE
)

2113 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥r
;

2118 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_Tam≥r
;

2120 
	}
}

2135 
	$RTC_Tam≥rFûãrC⁄fig
(
uöt32_t
 
RTC_Tam≥rFûãr
)

2138 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_FILTER
(
RTC_Tam≥rFûãr
));

2141 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPFLT
);

2144 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rFûãr
;

2145 
	}
}

2169 
	$RTC_Tam≥rSam∂ögFªqC⁄fig
(
uöt32_t
 
RTC_Tam≥rSam∂ögFªq
)

2172 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_SAMPLING_FREQ
(
RTC_Tam≥rSam∂ögFªq
));

2175 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPFREQ
);

2178 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rSam∂ögFªq
;

2179 
	}
}

2192 
	$RTC_Tam≥rPösPªch¨geDuøti⁄
(
uöt32_t
 
RTC_Tam≥rPªch¨geDuøti⁄
)

2195 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PRECHARGE_DURATION
(
RTC_Tam≥rPªch¨geDuøti⁄
));

2198 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPPRCH
);

2201 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rPªch¨geDuøti⁄
;

2202 
	}
}

2212 
	$RTC_TimeSèmpOnTam≥rDëe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

2215 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2217 i‡(
NewSèã
 !
DISABLE
)

2220 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_TAFCR_TAMPTS
;

2225 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_TAMPTS
;

2227 
	}
}

2235 
	$RTC_Tam≥rPuŒUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

2238 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2240 i‡(
NewSèã
 !
DISABLE
)

2243 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_TAMPPUDIS
;

2248 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_TAFCR_TAMPPUDIS
;

2250 
	}
}

2276 
	$RTC_WrôeBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
, uöt32_à
D©a
)

2278 
__IO
 
uöt32_t
 
tmp
 = 0;

2281 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
RTC_BKP_DR
));

2283 
tmp
 = 
RTC_BASE
 + 0x50;

2284 
tmp
 +(
RTC_BKP_DR
 * 4);

2287 *(
__IO
 
uöt32_t
 *)
tmp
 = (uöt32_t)
D©a
;

2288 
	}
}

2297 
uöt32_t
 
	$RTC_RódBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
)

2299 
__IO
 
uöt32_t
 
tmp
 = 0;

2302 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
RTC_BKP_DR
));

2304 
tmp
 = 
RTC_BASE
 + 0x50;

2305 
tmp
 +(
RTC_BKP_DR
 * 4);

2308  (*(
__IO
 
uöt32_t
 *)
tmp
);

2309 
	}
}

2337 
	$RTC_Tam≥rPöSñe˘i⁄
(
uöt32_t
 
RTC_Tam≥rPö
)

2340 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PIN
(
RTC_Tam≥rPö
));

2342 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPINSEL
);

2343 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_Tam≥rPö
);

2344 
	}
}

2354 
	$RTC_TimeSèmpPöSñe˘i⁄
(
uöt32_t
 
RTC_TimeSèmpPö
)

2357 
	`as£π_∑øm
(
	`IS_RTC_TIMESTAMP_PIN
(
RTC_TimeSèmpPö
));

2359 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TSINSEL
);

2360 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_TimeSèmpPö
);

2361 
	}
}

2373 
	$RTC_OuçutTy≥C⁄fig
(
uöt32_t
 
RTC_OuçutTy≥
)

2376 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT_TYPE
(
RTC_OuçutTy≥
));

2378 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_ALARMOUTTYPE
);

2379 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_OuçutTy≥
);

2380 
	}
}

2411 
Eº‹Sètus
 
	$RTC_SynchroShi·C⁄fig
(
uöt32_t
 
RTC_Shi·Add1S
, uöt32_à
RTC_Shi·SubFS
)

2413 
Eº‹Sètus
 
°©us
 = 
ERROR
;

2414 
uöt32_t
 
shpfcou¡
 = 0;

2417 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_ADD1S
(
RTC_Shi·Add1S
));

2418 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_SUBFS
(
RTC_Shi·SubFS
));

2421 
RTC
->
WPR
 = 0xCA;

2422 
RTC
->
WPR
 = 0x53;

2425 i‡((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë!
RESET
)

2428 ((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë!
RESET
Ë&& (
shpfcou¡
 !
SHPF_TIMEOUT
))

2430 
shpfcou¡
++;

2435 i‡((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë=
RESET
)

2438 if((
RTC
->
CR
 & 
RTC_CR_REFCKON
Ë=
RESET
)

2441 
RTC
->
SHIFTR
 = (
uöt32_t
)(uöt32_t)(
RTC_Shi·SubFS
Ë| (uöt32_t)(
RTC_Shi·Add1S
);

2443 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

2445 
°©us
 = 
ERROR
;

2449 
°©us
 = 
SUCCESS
;

2454 
°©us
 = 
ERROR
;

2459 
°©us
 = 
ERROR
;

2463 
RTC
->
WPR
 = 0xFF;

2465  (
Eº‹Sètus
)(
°©us
);

2466 
	}
}

2530 
	$RTC_ITC⁄fig
(
uöt32_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2533 
	`as£π_∑øm
(
	`IS_RTC_CONFIG_IT
(
RTC_IT
));

2534 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2537 
RTC
->
WPR
 = 0xCA;

2538 
RTC
->
WPR
 = 0x53;

2540 i‡(
NewSèã
 !
DISABLE
)

2543 
RTC
->
CR
 |(
uöt32_t
)(
RTC_IT
 & ~
RTC_TAFCR_TAMPIE
);

2545 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_IT
 & 
RTC_TAFCR_TAMPIE
);

2550 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_IT
 & (uöt32_t)~
RTC_TAFCR_TAMPIE
);

2552 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_IT
 & 
RTC_TAFCR_TAMPIE
);

2555 
RTC
->
WPR
 = 0xFF;

2556 
	}
}

2576 
FœgSètus
 
	$RTC_GëFœgSètus
(
uöt32_t
 
RTC_FLAG
)

2578 
FœgSètus
 
bô°©us
 = 
RESET
;

2579 
uöt32_t
 
tm¥eg
 = 0;

2582 
	`as£π_∑øm
(
	`IS_RTC_GET_FLAG
(
RTC_FLAG
));

2585 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ISR
 & 
RTC_FLAGS_MASK
);

2588 i‡((
tm¥eg
 & 
RTC_FLAG
Ë!(
uöt32_t
)
RESET
)

2590 
bô°©us
 = 
SET
;

2594 
bô°©us
 = 
RESET
;

2596  
bô°©us
;

2597 
	}
}

2612 
	$RTC_CÀ¨Fœg
(
uöt32_t
 
RTC_FLAG
)

2615 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_FLAG
(
RTC_FLAG
));

2618 
RTC
->
ISR
 = (
uöt32_t
)((uöt32_t)(~((
RTC_FLAG
 | 
RTC_ISR_INIT
)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));

2619 
	}
}

2632 
ITSètus
 
	$RTC_GëITSètus
(
uöt32_t
 
RTC_IT
)

2634 
ITSètus
 
bô°©us
 = 
RESET
;

2635 
uöt32_t
 
tm¥eg
 = 0, 
íabÀ°©us
 = 0;

2638 
	`as£π_∑øm
(
	`IS_RTC_GET_IT
(
RTC_IT
));

2641 
tm¥eg
 = (
uöt32_t
)(
RTC
->
TAFCR
 & (
RTC_TAFCR_TAMPIE
));

2644 
íabÀ°©us
 = (
uöt32_t
)((
RTC
->
CR
 & 
RTC_IT
Ë| (
tm¥eg
 & (RTC_IT >> 15)));

2647 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ISR
 & (uöt32_t)(
RTC_IT
 >> 4)));

2650 i‡((
íabÀ°©us
 !(
uöt32_t
)
RESET
Ë&& ((
tm¥eg
 & 0x0000FFFF) != (uint32_t)RESET))

2652 
bô°©us
 = 
SET
;

2656 
bô°©us
 = 
RESET
;

2658  
bô°©us
;

2659 
	}
}

2672 
	$RTC_CÀ¨ITPídögBô
(
uöt32_t
 
RTC_IT
)

2674 
uöt32_t
 
tm¥eg
 = 0;

2677 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_IT
(
RTC_IT
));

2680 
tm¥eg
 = (
uöt32_t
)(
RTC_IT
 >> 4);

2683 
RTC
->
ISR
 = (
uöt32_t
)((uöt32_t)(~((
tm¥eg
 | 
RTC_ISR_INIT
)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));

2684 
	}
}

2695 
uöt8_t
 
	$RTC_ByãToBcd2
(
uöt8_t
 
VÆue
)

2697 
uöt8_t
 
bcdhigh
 = 0;

2699 
VÆue
 >= 10)

2701 
bcdhigh
++;

2702 
VÆue
 -= 10;

2705  ((
uöt8_t
)(
bcdhigh
 << 4Ë| 
VÆue
);

2706 
	}
}

2713 
uöt8_t
 
	$RTC_Bcd2ToByã
(
uöt8_t
 
VÆue
)

2715 
uöt8_t
 
tmp
 = 0;

2716 
tmp
 = ((
uöt8_t
)(
VÆue
 & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;

2717  (
tmp
 + (
VÆue
 & (
uöt8_t
)0x0F));

2718 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_sdio.c

149 
	~"°m32f4xx_sdio.h
"

150 
	~"°m32f4xx_rcc.h
"

165 
	#SDIO_OFFSET
 (
SDIO_BASE
 - 
PERIPH_BASE
)

	)

169 
	#CLKCR_OFFSET
 (
SDIO_OFFSET
 + 0x04)

	)

170 
	#CLKEN_BôNumbî
 0x08

	)

171 
	#CLKCR_CLKEN_BB
 (
PERIPH_BB_BASE
 + (
CLKCR_OFFSET
 * 32Ë+ (
CLKEN_BôNumbî
 * 4))

	)

175 
	#CMD_OFFSET
 (
SDIO_OFFSET
 + 0x0C)

	)

176 
	#SDIOSUSPEND_BôNumbî
 0x0B

	)

177 
	#CMD_SDIOSUSPEND_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
SDIOSUSPEND_BôNumbî
 * 4))

	)

180 
	#ENCMDCOMPL_BôNumbî
 0x0C

	)

181 
	#CMD_ENCMDCOMPL_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ENCMDCOMPL_BôNumbî
 * 4))

	)

184 
	#NIEN_BôNumbî
 0x0D

	)

185 
	#CMD_NIEN_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
NIEN_BôNumbî
 * 4))

	)

188 
	#ATACMD_BôNumbî
 0x0E

	)

189 
	#CMD_ATACMD_BB
 (
PERIPH_BB_BASE
 + (
CMD_OFFSET
 * 32Ë+ (
ATACMD_BôNumbî
 * 4))

	)

193 
	#DCTRL_OFFSET
 (
SDIO_OFFSET
 + 0x2C)

	)

194 
	#DMAEN_BôNumbî
 0x03

	)

195 
	#DCTRL_DMAEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
DMAEN_BôNumbî
 * 4))

	)

198 
	#RWSTART_BôNumbî
 0x08

	)

199 
	#DCTRL_RWSTART_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTART_BôNumbî
 * 4))

	)

202 
	#RWSTOP_BôNumbî
 0x09

	)

203 
	#DCTRL_RWSTOP_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWSTOP_BôNumbî
 * 4))

	)

206 
	#RWMOD_BôNumbî
 0x0A

	)

207 
	#DCTRL_RWMOD_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
RWMOD_BôNumbî
 * 4))

	)

210 
	#SDIOEN_BôNumbî
 0x0B

	)

211 
	#DCTRL_SDIOEN_BB
 (
PERIPH_BB_BASE
 + (
DCTRL_OFFSET
 * 32Ë+ (
SDIOEN_BôNumbî
 * 4))

	)

216 
	#CLKCR_CLEAR_MASK
 ((
uöt32_t
)0xFFFF8100)

	)

220 
	#PWR_PWRCTRL_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

224 
	#DCTRL_CLEAR_MASK
 ((
uöt32_t
)0xFFFFFF08)

	)

228 
	#CMD_CLEAR_MASK
 ((
uöt32_t
)0xFFFFF800)

	)

231 
	#SDIO_RESP_ADDR
 ((
uöt32_t
)(
SDIO_BASE
 + 0x14))

	)

259 
	$SDIO_DeInô
()

261 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SDIO
, 
ENABLE
);

262 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SDIO
, 
DISABLE
);

263 
	}
}

272 
	$SDIO_Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

274 
uöt32_t
 
tm¥eg
 = 0;

277 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_EDGE
(
SDIO_InôSåu˘
->
SDIO_ClockEdge
));

278 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_BYPASS
(
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
));

279 
	`as£π_∑øm
(
	`IS_SDIO_CLOCK_POWER_SAVE
(
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
));

280 
	`as£π_∑øm
(
	`IS_SDIO_BUS_WIDE
(
SDIO_InôSåu˘
->
SDIO_BusWide
));

281 
	`as£π_∑øm
(
	`IS_SDIO_HARDWARE_FLOW_CONTROL
(
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
));

285 
tm¥eg
 = 
SDIO
->
CLKCR
;

288 
tm¥eg
 &
CLKCR_CLEAR_MASK
;

296 
tm¥eg
 |(
SDIO_InôSåu˘
->
SDIO_ClockDiv
 | SDIO_InôSåu˘->
SDIO_ClockPowîSave
 |

297 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 | SDIO_InôSåu˘->
SDIO_BusWide
 |

298 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 | SDIO_InôSåu˘->
SDIO_H¨dw¨eFlowC⁄åﬁ
);

301 
SDIO
->
CLKCR
 = 
tm¥eg
;

302 
	}
}

310 
	$SDIO_Såu˘Inô
(
SDIO_InôTy≥Def
* 
SDIO_InôSåu˘
)

313 
SDIO_InôSåu˘
->
SDIO_ClockDiv
 = 0x00;

314 
SDIO_InôSåu˘
->
SDIO_ClockEdge
 = 
SDIO_ClockEdge_Risög
;

315 
SDIO_InôSåu˘
->
SDIO_ClockBy∑ss
 = 
SDIO_ClockBy∑ss_DißbÀ
;

316 
SDIO_InôSåu˘
->
SDIO_ClockPowîSave
 = 
SDIO_ClockPowîSave_DißbÀ
;

317 
SDIO_InôSåu˘
->
SDIO_BusWide
 = 
SDIO_BusWide_1b
;

318 
SDIO_InôSåu˘
->
SDIO_H¨dw¨eFlowC⁄åﬁ
 = 
SDIO_H¨dw¨eFlowC⁄åﬁ_DißbÀ
;

319 
	}
}

327 
	$SDIO_ClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

330 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

332 *(
__IO
 
uöt32_t
 *Ë
CLKCR_CLKEN_BB
 = (uöt32_t)
NewSèã
;

333 
	}
}

343 
	$SDIO_SëPowîSèã
(
uöt32_t
 
SDIO_PowîSèã
)

346 
	`as£π_∑øm
(
	`IS_SDIO_POWER_STATE
(
SDIO_PowîSèã
));

348 
SDIO
->
POWER
 = 
SDIO_PowîSèã
;

349 
	}
}

360 
uöt32_t
 
	$SDIO_GëPowîSèã
()

362  (
SDIO
->
POWER
 & (~
PWR_PWRCTRL_MASK
));

363 
	}
}

392 
	$SDIO_SídComm™d
(
SDIO_CmdInôTy≥Def
 *
SDIO_CmdInôSåu˘
)

394 
uöt32_t
 
tm¥eg
 = 0;

397 
	`as£π_∑øm
(
	`IS_SDIO_CMD_INDEX
(
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
));

398 
	`as£π_∑øm
(
	`IS_SDIO_RESPONSE
(
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
));

399 
	`as£π_∑øm
(
	`IS_SDIO_WAIT
(
SDIO_CmdInôSåu˘
->
SDIO_Waô
));

400 
	`as£π_∑øm
(
	`IS_SDIO_CPSM
(
SDIO_CmdInôSåu˘
->
SDIO_CPSM
));

404 
SDIO
->
ARG
 = 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
;

408 
tm¥eg
 = 
SDIO
->
CMD
;

410 
tm¥eg
 &
CMD_CLEAR_MASK
;

415 
tm¥eg
 |(
uöt32_t
)
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 | SDIO_CmdInôSåu˘->
SDIO_Re•⁄£


416 | 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 | SDIO_CmdInôSåu˘->
SDIO_CPSM
;

419 
SDIO
->
CMD
 = 
tm¥eg
;

420 
	}
}

428 
	$SDIO_CmdSåu˘Inô
(
SDIO_CmdInôTy≥Def
* 
SDIO_CmdInôSåu˘
)

431 
SDIO_CmdInôSåu˘
->
SDIO_Argumít
 = 0x00;

432 
SDIO_CmdInôSåu˘
->
SDIO_CmdIndex
 = 0x00;

433 
SDIO_CmdInôSåu˘
->
SDIO_Re•⁄£
 = 
SDIO_Re•⁄£_No
;

434 
SDIO_CmdInôSåu˘
->
SDIO_Waô
 = 
SDIO_Waô_No
;

435 
SDIO_CmdInôSåu˘
->
SDIO_CPSM
 = 
SDIO_CPSM_DißbÀ
;

436 
	}
}

443 
uöt8_t
 
	$SDIO_GëComm™dRe•⁄£
()

445  (
uöt8_t
)(
SDIO
->
RESPCMD
);

446 
	}
}

458 
uöt32_t
 
	$SDIO_GëRe•⁄£
(
uöt32_t
 
SDIO_RESP
)

460 
__IO
 
uöt32_t
 
tmp
 = 0;

463 
	`as£π_∑øm
(
	`IS_SDIO_RESP
(
SDIO_RESP
));

465 
tmp
 = 
SDIO_RESP_ADDR
 + 
SDIO_RESP
;

467  (*(
__IO
 
uöt32_t
 *Ë
tmp
);

468 
	}
}

496 
	$SDIO_D©aC⁄fig
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

498 
uöt32_t
 
tm¥eg
 = 0;

501 
	`as£π_∑øm
(
	`IS_SDIO_DATA_LENGTH
(
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
));

502 
	`as£π_∑øm
(
	`IS_SDIO_BLOCK_SIZE
(
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
));

503 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_DIR
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
));

504 
	`as£π_∑øm
(
	`IS_SDIO_TRANSFER_MODE
(
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
));

505 
	`as£π_∑øm
(
	`IS_SDIO_DPSM
(
SDIO_D©aInôSåu˘
->
SDIO_DPSM
));

509 
SDIO
->
DTIMER
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
;

513 
SDIO
->
DLEN
 = 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
;

517 
tm¥eg
 = 
SDIO
->
DCTRL
;

519 
tm¥eg
 &
DCTRL_CLEAR_MASK
;

524 
tm¥eg
 |(
uöt32_t
)
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 | SDIO_D©aInôSåu˘->
SDIO_Tøns„rDú


525 | 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 | SDIO_D©aInôSåu˘->
SDIO_DPSM
;

528 
SDIO
->
DCTRL
 = 
tm¥eg
;

529 
	}
}

537 
	$SDIO_D©aSåu˘Inô
(
SDIO_D©aInôTy≥Def
* 
SDIO_D©aInôSåu˘
)

540 
SDIO_D©aInôSåu˘
->
SDIO_D©aTimeOut
 = 0xFFFFFFFF;

541 
SDIO_D©aInôSåu˘
->
SDIO_D©aLígth
 = 0x00;

542 
SDIO_D©aInôSåu˘
->
SDIO_D©aBlockSize
 = 
SDIO_D©aBlockSize_1b
;

543 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rDú
 = 
SDIO_Tøns„rDú_ToC¨d
;

544 
SDIO_D©aInôSåu˘
->
SDIO_Tøns„rMode
 = 
SDIO_Tøns„rMode_Block
;

545 
SDIO_D©aInôSåu˘
->
SDIO_DPSM
 = 
SDIO_DPSM_DißbÀ
;

546 
	}
}

553 
uöt32_t
 
	$SDIO_GëD©aCou¡î
()

555  
SDIO
->
DCOUNT
;

556 
	}
}

563 
uöt32_t
 
	$SDIO_RódD©a
()

565  
SDIO
->
FIFO
;

566 
	}
}

573 
	$SDIO_WrôeD©a
(
uöt32_t
 
D©a
)

575 
SDIO
->
FIFO
 = 
D©a
;

576 
	}
}

583 
uöt32_t
 
	$SDIO_GëFIFOCou¡
()

585  
SDIO
->
FIFOCNT
;

586 
	}
}

612 
	$SDIO_SèπSDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

615 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

617 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTART_BB
 = (uöt32_tË
NewSèã
;

618 
	}
}

626 
	$SDIO_St›SDIORódWaô
(
Fun˘i⁄ÆSèã
 
NewSèã
)

629 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

631 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWSTOP_BB
 = (uöt32_tË
NewSèã
;

632 
	}
}

642 
	$SDIO_SëSDIORódWaôMode
(
uöt32_t
 
SDIO_RódWaôMode
)

645 
	`as£π_∑øm
(
	`IS_SDIO_READWAIT_MODE
(
SDIO_RódWaôMode
));

647 *(
__IO
 
uöt32_t
 *Ë
DCTRL_RWMOD_BB
 = 
SDIO_RódWaôMode
;

648 
	}
}

656 
	$SDIO_SëSDIOO≥øti⁄
(
Fun˘i⁄ÆSèã
 
NewSèã
)

659 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

661 *(
__IO
 
uöt32_t
 *Ë
DCTRL_SDIOEN_BB
 = (uöt32_t)
NewSèã
;

662 
	}
}

670 
	$SDIO_SídSDIOSu•ídCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

673 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

675 *(
__IO
 
uöt32_t
 *Ë
CMD_SDIOSUSPEND_BB
 = (uöt32_t)
NewSèã
;

676 
	}
}

702 
	$SDIO_Comm™dCom∂ëi⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

705 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

707 *(
__IO
 
uöt32_t
 *Ë
CMD_ENCMDCOMPL_BB
 = (uöt32_t)
NewSèã
;

708 
	}
}

716 
	$SDIO_CEATAITCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

719 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

721 *(
__IO
 
uöt32_t
 *Ë
CMD_NIEN_BB
 = (uöt32_t)((~((uöt32_t)
NewSèã
)) & ((uint32_t)0x1));

722 
	}
}

730 
	$SDIO_SídCEATACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

733 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

735 *(
__IO
 
uöt32_t
 *Ë
CMD_ATACMD_BB
 = (uöt32_t)
NewSèã
;

736 
	}
}

762 
	$SDIO_DMACmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

765 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

767 *(
__IO
 
uöt32_t
 *Ë
DCTRL_DMAEN_BB
 = (uöt32_t)
NewSèã
;

768 
	}
}

820 
	$SDIO_ITC⁄fig
(
uöt32_t
 
SDIO_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

823 
	`as£π_∑øm
(
	`IS_SDIO_IT
(
SDIO_IT
));

824 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

826 i‡(
NewSèã
 !
DISABLE
)

829 
SDIO
->
MASK
 |
SDIO_IT
;

834 
SDIO
->
MASK
 &~
SDIO_IT
;

836 
	}
}

868 
FœgSètus
 
	$SDIO_GëFœgSètus
(
uöt32_t
 
SDIO_FLAG
)

870 
FœgSètus
 
bô°©us
 = 
RESET
;

873 
	`as£π_∑øm
(
	`IS_SDIO_FLAG
(
SDIO_FLAG
));

875 i‡((
SDIO
->
STA
 & 
SDIO_FLAG
Ë!(
uöt32_t
)
RESET
)

877 
bô°©us
 = 
SET
;

881 
bô°©us
 = 
RESET
;

883  
bô°©us
;

884 
	}
}

905 
	$SDIO_CÀ¨Fœg
(
uöt32_t
 
SDIO_FLAG
)

908 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_FLAG
(
SDIO_FLAG
));

910 
SDIO
->
ICR
 = 
SDIO_FLAG
;

911 
	}
}

944 
ITSètus
 
	$SDIO_GëITSètus
(
uöt32_t
 
SDIO_IT
)

946 
ITSètus
 
bô°©us
 = 
RESET
;

949 
	`as£π_∑øm
(
	`IS_SDIO_GET_IT
(
SDIO_IT
));

950 i‡((
SDIO
->
STA
 & 
SDIO_IT
Ë!(
uöt32_t
)
RESET
)

952 
bô°©us
 = 
SET
;

956 
bô°©us
 = 
RESET
;

958  
bô°©us
;

959 
	}
}

980 
	$SDIO_CÀ¨ITPídögBô
(
uöt32_t
 
SDIO_IT
)

983 
	`as£π_∑øm
(
	`IS_SDIO_CLEAR_IT
(
SDIO_IT
));

985 
SDIO
->
ICR
 = 
SDIO_IT
;

986 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_spi.c

152 
	~"°m32f4xx_•i.h
"

153 
	~"°m32f4xx_rcc.h
"

168 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)0x3040)

	)

169 
	#I2SCFGR_CLEAR_MASK
 ((
uöt16_t
)0xF040)

	)

172 
	#PLLCFGR_PPLR_MASK
 ((
uöt32_t
)0x70000000)

	)

173 
	#PLLCFGR_PPLN_MASK
 ((
uöt32_t
)0x00007FC0)

	)

175 
	#SPI_CR2_FRF
 ((
uöt16_t
)0x0010)

	)

176 
	#SPI_SR_TIFRFE
 ((
uöt16_t
)0x0100)

	)

218 
	$SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
)

221 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

223 i‡(
SPIx
 =
SPI1
)

226 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
ENABLE
);

228 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
DISABLE
);

230 i‡(
SPIx
 =
SPI2
)

233 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
ENABLE
);

235 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
DISABLE
);

239 i‡(
SPIx
 =
SPI3
)

242 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
ENABLE
);

244 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
DISABLE
);

247 
	}
}

257 
	$SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

259 
uöt16_t
 
tm¥eg
 = 0;

262 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

265 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_MODE
(
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
));

266 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
SPI_InôSåu˘
->
SPI_Mode
));

267 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_InôSåu˘
->
SPI_D©aSize
));

268 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
SPI_InôSåu˘
->
SPI_CPOL
));

269 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
SPI_InôSåu˘
->
SPI_CPHA
));

270 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
SPI_InôSåu˘
->
SPI_NSS
));

271 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
));

272 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
SPI_InôSåu˘
->
SPI_Fú°Bô
));

273 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
));

277 
tm¥eg
 = 
SPIx
->
CR1
;

279 
tm¥eg
 &
CR1_CLEAR_MASK
;

288 
tm¥eg
 |(
uöt16_t
)((
uöt32_t
)
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 | SPI_InôSåu˘->
SPI_Mode
 |

289 
SPI_InôSåu˘
->
SPI_D©aSize
 | SPI_InôSåu˘->
SPI_CPOL
 |

290 
SPI_InôSåu˘
->
SPI_CPHA
 | SPI_InôSåu˘->
SPI_NSS
 |

291 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 | SPI_InôSåu˘->
SPI_Fú°Bô
);

293 
SPIx
->
CR1
 = 
tm¥eg
;

296 
SPIx
->
I2SCFGR
 &(
uöt16_t
)~((uöt16_t)
SPI_I2SCFGR_I2SMOD
);

299 
SPIx
->
CRCPR
 = 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
;

300 
	}
}

321 
	$I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

323 
uöt16_t
 
tm¥eg
 = 0, 
i2sdiv
 = 2, 
i2sodd
 = 0, 
∑ckëÀngth
 = 1;

324 
uöt32_t
 
tmp
 = 0, 
i2s˛k
 = 0;

325 #i‚de‡
I2S_EXTERNAL_CLOCK_VAL


326 
uöt32_t
 
∂lm
 = 0, 
∂ 
 = 0, 
∂Ã
 = 0;

330 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

331 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

332 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

333 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

334 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

335 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
I2S_InôSåu˘
->
I2S_AudioFªq
));

336 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

340 
SPIx
->
I2SCFGR
 &
I2SCFGR_CLEAR_MASK
;

341 
SPIx
->
I2SPR
 = 0x0002;

344 
tm¥eg
 = 
SPIx
->
I2SCFGR
;

347 if(
I2S_InôSåu˘
->
I2S_AudioFªq
 =
I2S_AudioFªq_DeÁu…
)

349 
i2sodd
 = (
uöt16_t
)0;

350 
i2sdiv
 = (
uöt16_t
)2;

356 if(
I2S_InôSåu˘
->
I2S_D©aF‹m©
 =
I2S_D©aF‹m©_16b
)

359 
∑ckëÀngth
 = 1;

364 
∑ckëÀngth
 = 2;

371 #ifde‡
I2S_EXTERNAL_CLOCK_VAL


373 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_I2SSRC
) == 0)

375 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_I2SSRC
;

379 
i2s˛k
 = 
I2S_EXTERNAL_CLOCK_VAL
;

383 i‡((
RCC
->
CFGR
 & 
RCC_CFGR_I2SSRC
) != 0)

385 
RCC
->
CFGR
 &~(
uöt32_t
)
RCC_CFGR_I2SSRC
;

389 
∂ 
 = (
uöt32_t
)(((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SN
) >> 6) & \

390 (
RCC_PLLI2SCFGR_PLLI2SN
 >> 6));

393 
∂Ã
 = (
uöt32_t
)(((
RCC
->
PLLI2SCFGR
 & 
RCC_PLLI2SCFGR_PLLI2SR
) >> 28) & \

394 (
RCC_PLLI2SCFGR_PLLI2SR
 >> 28));

397 
∂lm
 = (
uöt32_t
)(
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
);

400 
i2s˛k
 = (
uöt32_t
)(((
HSE_VALUE
 / 
∂lm
Ë* 
∂ 
Ë/ 
∂Ã
);

404 if(
I2S_InôSåu˘
->
I2S_MCLKOuçut
 =
I2S_MCLKOuçut_E«bÀ
)

407 
tmp
 = (
uöt16_t
)(((((
i2s˛k
 / 256Ë* 10Ë/ 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

412 
tmp
 = (
uöt16_t
)(((((
i2s˛k
 / (32 * 
∑ckëÀngth
)Ë*10 ) / 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

416 
tmp
 =Åmp / 10;

419 
i2sodd
 = (
uöt16_t
)(
tmp
 & (uint16_t)0x0001);

422 
i2sdiv
 = (
uöt16_t
)((
tmp
 - 
i2sodd
) / 2);

425 
i2sodd
 = (
uöt16_t
) (i2sodd << 8);

429 i‡((
i2sdiv
 < 2) || (i2sdiv > 0xFF))

432 
i2sdiv
 = 2;

433 
i2sodd
 = 0;

437 
SPIx
->
I2SPR
 = (
uöt16_t
)((uöt16_t)
i2sdiv
 | (uöt16_t)(
i2sodd
 | (uöt16_t)
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

440 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
SPI_I2SCFGR_I2SMOD
 | (uöt16_t)(
I2S_InôSåu˘
->
I2S_Mode
 | \

441 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

442 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

445 
SPIx
->
I2SCFGR
 = 
tm¥eg
;

446 
	}
}

453 
	$SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

457 
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

459 
SPI_InôSåu˘
->
SPI_Mode
 = 
SPI_Mode_Sœve
;

461 
SPI_InôSåu˘
->
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

463 
SPI_InôSåu˘
->
SPI_CPOL
 = 
SPI_CPOL_Low
;

465 
SPI_InôSåu˘
->
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

467 
SPI_InôSåu˘
->
SPI_NSS
 = 
SPI_NSS_H¨d
;

469 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_2
;

471 
SPI_InôSåu˘
->
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

473 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
 = 7;

474 
	}
}

481 
	$I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

485 
I2S_InôSåu˘
->
I2S_Mode
 = 
I2S_Mode_SœveTx
;

488 
I2S_InôSåu˘
->
I2S_Sènd¨d
 = 
I2S_Sènd¨d_Phûlùs
;

491 
I2S_InôSåu˘
->
I2S_D©aF‹m©
 = 
I2S_D©aF‹m©_16b
;

494 
I2S_InôSåu˘
->
I2S_MCLKOuçut
 = 
I2S_MCLKOuçut_DißbÀ
;

497 
I2S_InôSåu˘
->
I2S_AudioFªq
 = 
I2S_AudioFªq_DeÁu…
;

500 
I2S_InôSåu˘
->
I2S_CPOL
 = 
I2S_CPOL_Low
;

501 
	}
}

510 
	$SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

513 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

514 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

515 i‡(
NewSèã
 !
DISABLE
)

518 
SPIx
->
CR1
 |
SPI_CR1_SPE
;

523 
SPIx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
SPI_CR1_SPE
);

525 
	}
}

535 
	$I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

538 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH_EXT
(
SPIx
));

539 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

541 i‡(
NewSèã
 !
DISABLE
)

544 
SPIx
->
I2SCFGR
 |
SPI_I2SCFGR_I2SE
;

549 
SPIx
->
I2SCFGR
 &(
uöt16_t
)~((uöt16_t)
SPI_I2SCFGR_I2SE
);

551 
	}
}

562 
	$SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
)

565 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

566 
	`as£π_∑øm
(
	`IS_SPI_DATASIZE
(
SPI_D©aSize
));

568 
SPIx
->
CR1
 &(
uöt16_t
)~
SPI_D©aSize_16b
;

570 
SPIx
->
CR1
 |
SPI_D©aSize
;

571 
	}
}

582 
	$SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
)

585 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

586 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION
(
SPI_Dúe˘i⁄
));

587 i‡(
SPI_Dúe˘i⁄
 =
SPI_Dúe˘i⁄_Tx
)

590 
SPIx
->
CR1
 |
SPI_Dúe˘i⁄_Tx
;

595 
SPIx
->
CR1
 &
SPI_Dúe˘i⁄_Rx
;

597 
	}
}

608 
	$SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
)

611 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

612 
	`as£π_∑øm
(
	`IS_SPI_NSS_INTERNAL
(
SPI_NSSI¡î«lSo·
));

613 i‡(
SPI_NSSI¡î«lSo·
 !
SPI_NSSI¡î«lSo·_Re£t
)

616 
SPIx
->
CR1
 |
SPI_NSSI¡î«lSo·_Së
;

621 
SPIx
->
CR1
 &
SPI_NSSI¡î«lSo·_Re£t
;

623 
	}
}

632 
	$SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

635 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

636 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

637 i‡(
NewSèã
 !
DISABLE
)

640 
SPIx
->
CR2
 |(
uöt16_t
)
SPI_CR2_SSOE
;

645 
SPIx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
SPI_CR2_SSOE
);

647 
	}
}

663 
	$SPI_TIModeCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

666 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

667 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

669 i‡(
NewSèã
 !
DISABLE
)

672 
SPIx
->
CR2
 |
SPI_CR2_FRF
;

677 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_CR2_FRF
;

679 
	}
}

700 
	$I2S_FuŒDu∂exC⁄fig
(
SPI_Ty≥Def
* 
I2Sxext
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

702 
uöt16_t
 
tm¥eg
 = 0, 
tmp
 = 0;

705 
	`as£π_∑øm
(
	`IS_I2S_EXT_PERIPH
(
I2Sxext
));

706 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

707 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

708 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

709 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

713 
I2Sxext
->
I2SCFGR
 &
I2SCFGR_CLEAR_MASK
;

714 
I2Sxext
->
I2SPR
 = 0x0002;

717 
tm¥eg
 = 
I2Sxext
->
I2SCFGR
;

720 i‡((
I2S_InôSåu˘
->
I2S_Mode
 =
I2S_Mode_Ma°îTx
Ë|| (I2S_InôSåu˘->I2S_Modê=
I2S_Mode_SœveTx
))

722 
tmp
 = 
I2S_Mode_SœveRx
;

726 i‡((
I2S_InôSåu˘
->
I2S_Mode
 =
I2S_Mode_Ma°îRx
Ë|| (I2S_InôSåu˘->I2S_Modê=
I2S_Mode_SœveRx
))

728 
tmp
 = 
I2S_Mode_SœveTx
;

734 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
SPI_I2SCFGR_I2SMOD
 | (uöt16_t)(
tmp
 | \

735 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

736 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

739 
I2Sxext
->
I2SCFGR
 = 
tm¥eg
;

740 
	}
}

775 
uöt16_t
 
	$SPI_I2S_Re˚iveD©a
(
SPI_Ty≥Def
* 
SPIx
)

778 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

781  
SPIx
->
DR
;

782 
	}
}

791 
	$SPI_I2S_SídD©a
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
)

794 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

797 
SPIx
->
DR
 = 
D©a
;

798 
	}
}

880 
	$SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

883 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

884 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

885 i‡(
NewSèã
 !
DISABLE
)

888 
SPIx
->
CR1
 |
SPI_CR1_CRCEN
;

893 
SPIx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
SPI_CR1_CRCEN
);

895 
	}
}

902 
	$SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
)

905 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

908 
SPIx
->
CR1
 |
SPI_CR1_CRCNEXT
;

909 
	}
}

920 
uöt16_t
 
	$SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
)

922 
uöt16_t
 
¸¸eg
 = 0;

924 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

925 
	`as£π_∑øm
(
	`IS_SPI_CRC
(
SPI_CRC
));

926 i‡(
SPI_CRC
 !
SPI_CRC_Rx
)

929 
¸¸eg
 = 
SPIx
->
TXCRCR
;

934 
¸¸eg
 = 
SPIx
->
RXCRCR
;

937  
¸¸eg
;

938 
	}
}

945 
uöt16_t
 
	$SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
)

948 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

951  
SPIx
->
CRCPR
;

952 
	}
}

982 
	$SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

985 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

986 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

987 
	`as£π_∑øm
(
	`IS_SPI_I2S_DMAREQ
(
SPI_I2S_DMAReq
));

989 i‡(
NewSèã
 !
DISABLE
)

992 
SPIx
->
CR2
 |
SPI_I2S_DMAReq
;

997 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_I2S_DMAReq
;

999 
	}
}

1091 
	$SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1093 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0 ;

1096 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1097 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1098 
	`as£π_∑øm
(
	`IS_SPI_I2S_CONFIG_IT
(
SPI_I2S_IT
));

1101 
ôpos
 = 
SPI_I2S_IT
 >> 4;

1104 
ômask
 = (
uöt16_t
)1 << (uöt16_t)
ôpos
;

1106 i‡(
NewSèã
 !
DISABLE
)

1109 
SPIx
->
CR2
 |
ômask
;

1114 
SPIx
->
CR2
 &(
uöt16_t
)~
ômask
;

1116 
	}
}

1135 
FœgSètus
 
	$SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

1137 
FœgSètus
 
bô°©us
 = 
RESET
;

1139 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1140 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_FLAG
(
SPI_I2S_FLAG
));

1143 i‡((
SPIx
->
SR
 & 
SPI_I2S_FLAG
Ë!(
uöt16_t
)
RESET
)

1146 
bô°©us
 = 
SET
;

1151 
bô°©us
 = 
RESET
;

1154  
bô°©us
;

1155 
	}
}

1176 
	$SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

1179 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1180 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_FLAG
(
SPI_I2S_FLAG
));

1183 
SPIx
->
SR
 = (
uöt16_t
)~
SPI_I2S_FLAG
;

1184 
	}
}

1201 
ITSètus
 
	$SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

1203 
ITSètus
 
bô°©us
 = 
RESET
;

1204 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0, 
íabÀ°©us
 = 0;

1207 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1208 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_IT
(
SPI_I2S_IT
));

1211 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

1214 
ômask
 = 
SPI_I2S_IT
 >> 4;

1217 
ômask
 = 0x01 << itmask;

1220 
íabÀ°©us
 = (
SPIx
->
CR2
 & 
ômask
) ;

1223 i‡(((
SPIx
->
SR
 & 
ôpos
Ë!(
uöt16_t
)
RESET
Ë&& 
íabÀ°©us
)

1226 
bô°©us
 = 
SET
;

1231 
bô°©us
 = 
RESET
;

1234  
bô°©us
;

1235 
	}
}

1256 
	$SPI_I2S_CÀ¨ITPídögBô
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

1258 
uöt16_t
 
ôpos
 = 0;

1260 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1261 
	`as£π_∑øm
(
	`IS_SPI_I2S_CLEAR_IT
(
SPI_I2S_IT
));

1264 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

1267 
SPIx
->
SR
 = (
uöt16_t
)~
ôpos
;

1268 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_syscfg.c

43 
	~"°m32f4xx_syscfg.h
"

44 
	~"°m32f4xx_rcc.h
"

58 
	#SYSCFG_OFFSET
 (
SYSCFG_BASE
 - 
PERIPH_BASE
)

	)

61 
	#PMC_OFFSET
 (
SYSCFG_OFFSET
 + 0x04)

	)

62 
	#MII_RMII_SEL_BôNumbî
 ((
uöt8_t
)0x17)

	)

63 
	#PMC_MII_RMII_SEL_BB
 (
PERIPH_BB_BASE
 + (
PMC_OFFSET
 * 32Ë+ (
MII_RMII_SEL_BôNumbî
 * 4))

	)

67 
	#CMPCR_OFFSET
 (
SYSCFG_OFFSET
 + 0x20)

	)

68 
	#CMP_PD_BôNumbî
 ((
uöt8_t
)0x00)

	)

69 
	#CMPCR_CMP_PD_BB
 (
PERIPH_BB_BASE
 + (
CMPCR_OFFSET
 * 32Ë+ (
CMP_PD_BôNumbî
 * 4))

	)

86 
	$SYSCFG_DeInô
()

88 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SYSCFG
, 
ENABLE
);

89 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SYSCFG
, 
DISABLE
);

90 
	}
}

102 
	$SYSCFG_Mem‹yRem≠C⁄fig
(
uöt8_t
 
SYSCFG_Mem‹yRem≠
)

105 
	`as£π_∑øm
(
	`IS_SYSCFG_MEMORY_REMAP_CONFING
(
SYSCFG_Mem‹yRem≠
));

107 
SYSCFG
->
MEMRMP
 = 
SYSCFG_Mem‹yRem≠
;

108 
	}
}

119 
	$SYSCFG_EXTILöeC⁄fig
(
uöt8_t
 
EXTI_P‹tSour˚GPIOx
, uöt8_à
EXTI_PöSour˚x
)

121 
uöt32_t
 
tmp
 = 0x00;

124 
	`as£π_∑øm
(
	`IS_EXTI_PORT_SOURCE
(
EXTI_P‹tSour˚GPIOx
));

125 
	`as£π_∑øm
(
	`IS_EXTI_PIN_SOURCE
(
EXTI_PöSour˚x
));

127 
tmp
 = ((
uöt32_t
)0x0FË<< (0x04 * (
EXTI_PöSour˚x
 & (
uöt8_t
)0x03));

128 
SYSCFG
->
EXTICR
[
EXTI_PöSour˚x
 >> 0x02] &~
tmp
;

129 
SYSCFG
->
EXTICR
[
EXTI_PöSour˚x
 >> 0x02] |(((
uöt32_t
)
EXTI_P‹tSour˚GPIOx
Ë<< (0x04 * (EXTI_PöSour˚x & (
uöt8_t
)0x03)));

130 
	}
}

140 
	$SYSCFG_ETH_MedüI¡îÁ˚C⁄fig
(
uöt32_t
 
SYSCFG_ETH_MedüI¡îÁ˚
)

142 
	`as£π_∑øm
(
	`IS_SYSCFG_ETH_MEDIA_INTERFACE
(
SYSCFG_ETH_MedüI¡îÁ˚
));

144 *(
__IO
 
uöt32_t
 *Ë
PMC_MII_RMII_SEL_BB
 = 
SYSCFG_ETH_MedüI¡îÁ˚
;

145 
	}
}

157 
	$SYSCFG_Com≥nßti⁄CñlCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

160 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

162 *(
__IO
 
uöt32_t
 *Ë
CMPCR_CMP_PD_BB
 = (uöt32_t)
NewSèã
;

163 
	}
}

170 
FœgSètus
 
	$SYSCFG_GëCom≥nßti⁄CñlSètus
()

172 
FœgSètus
 
bô°©us
 = 
RESET
;

174 i‡((
SYSCFG
->
CMPCR
 & 
SYSCFG_CMPCR_READY
 ) !(
uöt32_t
)
RESET
)

176 
bô°©us
 = 
SET
;

180 
bô°©us
 = 
RESET
;

182  
bô°©us
;

183 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_tim.c

114 
	~"°m32f4xx_tim.h
"

115 
	~"°m32f4xx_rcc.h
"

130 
	#SMCR_ETR_MASK
 ((
uöt16_t
)0x00FF)

	)

131 
	#CCMR_OFFSET
 ((
uöt16_t
)0x0018)

	)

132 
	#CCER_CCE_SET
 ((
uöt16_t
)0x0001)

	)

133 
	#CCER_CCNE_SET
 ((
uöt16_t
)0x0004)

	)

134 
	#CCMR_OC13M_MASK
 ((
uöt16_t
)0xFF8F)

	)

135 
	#CCMR_OC24M_MASK
 ((
uöt16_t
)0x8FFF)

	)

140 
TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

141 
uöt16_t
 
TIM_ICFûãr
);

142 
TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

143 
uöt16_t
 
TIM_ICFûãr
);

144 
TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

145 
uöt16_t
 
TIM_ICFûãr
);

146 
TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

147 
uöt16_t
 
TIM_ICFûãr
);

194 
	$TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
)

197 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

199 i‡(
TIMx
 =
TIM1
)

201 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
ENABLE
);

202 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
DISABLE
);

204 i‡(
TIMx
 =
TIM2
)

206 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
ENABLE
);

207 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
DISABLE
);

209 i‡(
TIMx
 =
TIM3
)

211 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

212 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
DISABLE
);

214 i‡(
TIMx
 =
TIM4
)

216 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

217 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
DISABLE
);

219 i‡(
TIMx
 =
TIM5
)

221 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
ENABLE
);

222 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM5
, 
DISABLE
);

224 i‡(
TIMx
 =
TIM6
)

226 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
ENABLE
);

227 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
DISABLE
);

229 i‡(
TIMx
 =
TIM7
)

231 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
ENABLE
);

232 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
DISABLE
);

234 i‡(
TIMx
 =
TIM8
)

236 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
ENABLE
);

237 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
DISABLE
);

239 i‡(
TIMx
 =
TIM9
)

241 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
ENABLE
);

242 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM9
, 
DISABLE
);

244 i‡(
TIMx
 =
TIM10
)

246 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
ENABLE
);

247 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM10
, 
DISABLE
);

249 i‡(
TIMx
 =
TIM11
)

251 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
ENABLE
);

252 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM11
, 
DISABLE
);

254 i‡(
TIMx
 =
TIM12
)

256 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
ENABLE
);

257 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM12
, 
DISABLE
);

259 i‡(
TIMx
 =
TIM13
)

261 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
ENABLE
);

262 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM13
, 
DISABLE
);

266 i‡(
TIMx
 =
TIM14
)

268 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
ENABLE
);

269 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM14
, 
DISABLE
);

272 
	}
}

282 
	$TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

284 
uöt16_t
 
tmp¸1
 = 0;

287 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

288 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
));

289 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
));

291 
tmp¸1
 = 
TIMx
->
CR1
;

293 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)||

294 (
TIMx
 =
TIM2
Ë|| (TIMx =
TIM3
)||

295 (
TIMx
 =
TIM4
Ë|| (TIMx =
TIM5
))

298 
tmp¸1
 &(
uöt16_t
)(~(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
));

299 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
;

302 if((
TIMx
 !
TIM6
Ë&& (TIMx !
TIM7
))

305 
tmp¸1
 &(
uöt16_t
)(~
TIM_CR1_CKD
);

306 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
;

309 
TIMx
->
CR1
 = 
tmp¸1
;

312 
TIMx
->
ARR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 ;

315 
TIMx
->
PSC
 = 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
;

317 i‡((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

320 
TIMx
->
RCR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
;

325 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode_Immedüã
;

326 
	}
}

334 
	$TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

337 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 = 0xFFFFFFFF;

338 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
 = 0x0000;

339 
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

340 
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

341 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
 = 0x0000;

342 
	}
}

354 
	$TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
)

357 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

358 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER_RELOAD
(
TIM_PSCRñﬂdMode
));

360 
TIMx
->
PSC
 = 
PªsˇÀr
;

362 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode
;

363 
	}
}

377 
	$TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
)

379 
uöt16_t
 
tmp¸1
 = 0;

382 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

383 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_Cou¡îMode
));

385 
tmp¸1
 = 
TIMx
->
CR1
;

388 
tmp¸1
 &(
uöt16_t
)~(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
);

391 
tmp¸1
 |
TIM_Cou¡îMode
;

394 
TIMx
->
CR1
 = 
tmp¸1
;

395 
	}
}

403 
	$TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Cou¡î
)

406 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

409 
TIMx
->
CNT
 = 
Cou¡î
;

410 
	}
}

418 
	$TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Aut‹ñﬂd
)

421 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

424 
TIMx
->
ARR
 = 
Aut‹ñﬂd
;

425 
	}
}

432 
uöt32_t
 
	$TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
)

435 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

438  
TIMx
->
CNT
;

439 
	}
}

446 
uöt16_t
 
	$TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
)

449 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

452  
TIMx
->
PSC
;

453 
	}
}

462 
	$TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

465 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

466 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

468 i‡(
NewSèã
 !
DISABLE
)

471 
TIMx
->
CR1
 |
TIM_CR1_UDIS
;

476 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_UDIS
;

478 
	}
}

491 
	$TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
)

494 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

495 
	`as£π_∑øm
(
	`IS_TIM_UPDATE_SOURCE
(
TIM_Upd©eSour˚
));

497 i‡(
TIM_Upd©eSour˚
 !
TIM_Upd©eSour˚_GlobÆ
)

500 
TIMx
->
CR1
 |
TIM_CR1_URS
;

505 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_URS
;

507 
	}
}

516 
	$TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

519 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

520 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

522 i‡(
NewSèã
 !
DISABLE
)

525 
TIMx
->
CR1
 |
TIM_CR1_ARPE
;

530 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_ARPE
;

532 
	}
}

543 
	$TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
)

546 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

547 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
TIM_OPMode
));

550 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_OPM
;

553 
TIMx
->
CR1
 |
TIM_OPMode
;

554 
	}
}

566 
	$TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
)

569 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

570 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_CKD
));

573 
TIMx
->
CR1
 &(
uöt16_t
)(~
TIM_CR1_CKD
);

576 
TIMx
->
CR1
 |
TIM_CKD
;

577 
	}
}

586 
	$TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

589 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

590 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

592 i‡(
NewSèã
 !
DISABLE
)

595 
TIMx
->
CR1
 |
TIM_CR1_CEN
;

600 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_CEN
;

602 
	}
}

665 
	$TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

667 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

670 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

671 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

672 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

673 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

676 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC1E
;

679 
tmpc˚r
 = 
TIMx
->
CCER
;

681 
tmp¸2
 = 
TIMx
->
CR2
;

684 
tmpccmrx
 = 
TIMx
->
CCMR1
;

687 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_OC1M
;

688 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_CC1S
;

690 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

693 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1P
;

695 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
;

698 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutSèã
;

700 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

702 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

703 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

704 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

705 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

708 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1NP
;

710 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
;

712 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1NE
;

715 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
;

717 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS1
;

718 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS1N
;

720 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
;

722 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
;

725 
TIMx
->
CR2
 = 
tmp¸2
;

728 
TIMx
->
CCMR1
 = 
tmpccmrx
;

731 
TIMx
->
CCR1
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

734 
TIMx
->
CCER
 = 
tmpc˚r
;

735 
	}
}

746 
	$TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

748 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

751 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

752 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

753 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

754 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

757 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC2E
;

760 
tmpc˚r
 = 
TIMx
->
CCER
;

762 
tmp¸2
 = 
TIMx
->
CR2
;

765 
tmpccmrx
 = 
TIMx
->
CCMR1
;

768 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_OC2M
;

769 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR1_CC2S
;

772 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

775 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2P
;

777 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 4);

780 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 4);

782 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

784 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

785 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

786 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

787 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

790 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2NP
;

792 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 4);

794 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2NE
;

797 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 4);

799 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS2
;

800 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS2N
;

802 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 2);

804 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 2);

807 
TIMx
->
CR2
 = 
tmp¸2
;

810 
TIMx
->
CCMR1
 = 
tmpccmrx
;

813 
TIMx
->
CCR2
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

816 
TIMx
->
CCER
 = 
tmpc˚r
;

817 
	}
}

827 
	$TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

829 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

832 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

833 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

834 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

835 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

838 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC3E
;

841 
tmpc˚r
 = 
TIMx
->
CCER
;

843 
tmp¸2
 = 
TIMx
->
CR2
;

846 
tmpccmrx
 = 
TIMx
->
CCMR2
;

849 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_OC3M
;

850 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_CC3S
;

852 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

855 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3P
;

857 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 8);

860 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 8);

862 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

864 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

865 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

866 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

867 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

870 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3NP
;

872 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 8);

874 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3NE
;

877 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 8);

879 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS3
;

880 
tmp¸2
 &(
uöt16_t
)~
TIM_CR2_OIS3N
;

882 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 4);

884 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 4);

887 
TIMx
->
CR2
 = 
tmp¸2
;

890 
TIMx
->
CCMR2
 = 
tmpccmrx
;

893 
TIMx
->
CCR3
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

896 
TIMx
->
CCER
 = 
tmpc˚r
;

897 
	}
}

907 
	$TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

909 
uöt16_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

912 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

913 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

914 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

915 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

918 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC4E
;

921 
tmpc˚r
 = 
TIMx
->
CCER
;

923 
tmp¸2
 = 
TIMx
->
CR2
;

926 
tmpccmrx
 = 
TIMx
->
CCMR2
;

929 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_OC4M
;

930 
tmpccmrx
 &(
uöt16_t
)~
TIM_CCMR2_CC4S
;

933 
tmpccmrx
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

936 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC4P
;

938 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 12);

941 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 12);

943 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

945 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

947 
tmp¸2
 &=(
uöt16_t
Ë~
TIM_CR2_OIS4
;

949 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 6);

952 
TIMx
->
CR2
 = 
tmp¸2
;

955 
TIMx
->
CCMR2
 = 
tmpccmrx
;

958 
TIMx
->
CCR4
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

961 
TIMx
->
CCER
 = 
tmpc˚r
;

962 
	}
}

970 
	$TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

973 
TIM_OCInôSåu˘
->
TIM_OCMode
 = 
TIM_OCMode_Timög
;

974 
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 = 
TIM_OuçutSèã_DißbÀ
;

975 
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 = 
TIM_OuçutNSèã_DißbÀ
;

976 
TIM_OCInôSåu˘
->
TIM_Pul£
 = 0x00000000;

977 
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

978 
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

979 
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

980 
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 = 
TIM_OCNIdÀSèã_Re£t
;

981 
	}
}

1006 
	$TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_OCMode
)

1008 
uöt32_t
 
tmp
 = 0;

1009 
uöt16_t
 
tmp1
 = 0;

1012 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1013 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1014 
	`as£π_∑øm
(
	`IS_TIM_OCM
(
TIM_OCMode
));

1016 
tmp
 = (
uöt32_t
Ë
TIMx
;

1017 
tmp
 +
CCMR_OFFSET
;

1019 
tmp1
 = 
CCER_CCE_SET
 << (
uöt16_t
)
TIM_Ch™√l
;

1022 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp1
;

1024 if((
TIM_Ch™√l
 =
TIM_Ch™√l_1
Ë||(TIM_Ch™√»=
TIM_Ch™√l_3
))

1026 
tmp
 +(
TIM_Ch™√l
>>1);

1029 *(
__IO
 
uöt32_t
 *Ë
tmp
 &
CCMR_OC13M_MASK
;

1032 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
TIM_OCMode
;

1036 
tmp
 +(
uöt16_t
)(
TIM_Ch™√l
 - (uint16_t)4)>> (uint16_t)1;

1039 *(
__IO
 
uöt32_t
 *Ë
tmp
 &
CCMR_OC24M_MASK
;

1042 *(
__IO
 
uöt32_t
 *Ë
tmp
 |(
uöt16_t
)(
TIM_OCMode
 << 8);

1044 
	}
}

1052 
	$TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª1
)

1055 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1058 
TIMx
->
CCR1
 = 
Com∑ª1
;

1059 
	}
}

1068 
	$TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª2
)

1071 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1074 
TIMx
->
CCR2
 = 
Com∑ª2
;

1075 
	}
}

1083 
	$TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª3
)

1086 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1089 
TIMx
->
CCR3
 = 
Com∑ª3
;

1090 
	}
}

1098 
	$TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª4
)

1101 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1104 
TIMx
->
CCR4
 = 
Com∑ª4
;

1105 
	}
}

1116 
	$TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1118 
uöt16_t
 
tmpccmr1
 = 0;

1121 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1122 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1123 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1126 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC1M
;

1129 
tmpccmr1
 |
TIM_F‹˚dA˘i⁄
;

1132 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1133 
	}
}

1145 
	$TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1147 
uöt16_t
 
tmpccmr1
 = 0;

1150 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1151 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1152 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1155 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC2M
;

1158 
tmpccmr1
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1161 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1162 
	}
}

1173 
	$TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1175 
uöt16_t
 
tmpccmr2
 = 0;

1178 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1179 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1181 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1184 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC3M
;

1187 
tmpccmr2
 |
TIM_F‹˚dA˘i⁄
;

1190 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1191 
	}
}

1202 
	$TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1204 
uöt16_t
 
tmpccmr2
 = 0;

1207 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1208 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1209 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1212 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC4M
;

1215 
tmpccmr2
 |(
uöt16_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1218 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1219 
	}
}

1230 
	$TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1232 
uöt16_t
 
tmpccmr1
 = 0;

1235 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1236 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1238 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1241 
tmpccmr1
 &(
uöt16_t
)(~
TIM_CCMR1_OC1PE
);

1244 
tmpccmr1
 |
TIM_OCPªlﬂd
;

1247 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1248 
	}
}

1260 
	$TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1262 
uöt16_t
 
tmpccmr1
 = 0;

1265 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1266 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1268 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1271 
tmpccmr1
 &(
uöt16_t
)(~
TIM_CCMR1_OC2PE
);

1274 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1277 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1278 
	}
}

1289 
	$TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1291 
uöt16_t
 
tmpccmr2
 = 0;

1294 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1295 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1297 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1300 
tmpccmr2
 &(
uöt16_t
)(~
TIM_CCMR2_OC3PE
);

1303 
tmpccmr2
 |
TIM_OCPªlﬂd
;

1306 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1307 
	}
}

1318 
	$TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1320 
uöt16_t
 
tmpccmr2
 = 0;

1323 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1324 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1326 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1329 
tmpccmr2
 &(
uöt16_t
)(~
TIM_CCMR2_OC4PE
);

1332 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCPªlﬂd
 << 8);

1335 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1336 
	}
}

1347 
	$TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1349 
uöt16_t
 
tmpccmr1
 = 0;

1352 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1353 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1356 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1359 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC1FE
;

1362 
tmpccmr1
 |
TIM_OCFa°
;

1365 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1366 
	}
}

1378 
	$TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1380 
uöt16_t
 
tmpccmr1
 = 0;

1383 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1384 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1387 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1390 
tmpccmr1
 &(
uöt16_t
)(~
TIM_CCMR1_OC2FE
);

1393 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1396 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1397 
	}
}

1408 
	$TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1410 
uöt16_t
 
tmpccmr2
 = 0;

1413 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1414 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1417 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1420 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC3FE
;

1423 
tmpccmr2
 |
TIM_OCFa°
;

1426 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1427 
	}
}

1438 
	$TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1440 
uöt16_t
 
tmpccmr2
 = 0;

1443 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1444 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1447 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1450 
tmpccmr2
 &(
uöt16_t
)(~
TIM_CCMR2_OC4FE
);

1453 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCFa°
 << 8);

1456 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1457 
	}
}

1468 
	$TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1470 
uöt16_t
 
tmpccmr1
 = 0;

1473 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1474 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1476 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1479 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC1CE
;

1482 
tmpccmr1
 |
TIM_OCCÀ¨
;

1485 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1486 
	}
}

1498 
	$TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1500 
uöt16_t
 
tmpccmr1
 = 0;

1503 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1504 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1506 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1509 
tmpccmr1
 &(
uöt16_t
)~
TIM_CCMR1_OC2CE
;

1512 
tmpccmr1
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1515 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1516 
	}
}

1527 
	$TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1529 
uöt16_t
 
tmpccmr2
 = 0;

1532 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1533 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1535 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1538 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC3CE
;

1541 
tmpccmr2
 |
TIM_OCCÀ¨
;

1544 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1545 
	}
}

1556 
	$TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1558 
uöt16_t
 
tmpccmr2
 = 0;

1561 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1562 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1564 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1567 
tmpccmr2
 &(
uöt16_t
)~
TIM_CCMR2_OC4CE
;

1570 
tmpccmr2
 |(
uöt16_t
)(
TIM_OCCÀ¨
 << 8);

1573 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1574 
	}
}

1585 
	$TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1587 
uöt16_t
 
tmpc˚r
 = 0;

1590 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1591 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1593 
tmpc˚r
 = 
TIMx
->
CCER
;

1596 
tmpc˚r
 &(
uöt16_t
)(~
TIM_CCER_CC1P
);

1597 
tmpc˚r
 |
TIM_OCPﬁ¨ôy
;

1600 
TIMx
->
CCER
 = 
tmpc˚r
;

1601 
	}
}

1612 
	$TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1614 
uöt16_t
 
tmpc˚r
 = 0;

1616 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1617 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1619 
tmpc˚r
 = 
TIMx
->
CCER
;

1622 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC1NP
;

1623 
tmpc˚r
 |
TIM_OCNPﬁ¨ôy
;

1626 
TIMx
->
CCER
 = 
tmpc˚r
;

1627 
	}
}

1639 
	$TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1641 
uöt16_t
 
tmpc˚r
 = 0;

1644 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1645 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1647 
tmpc˚r
 = 
TIMx
->
CCER
;

1650 
tmpc˚r
 &(
uöt16_t
)(~
TIM_CCER_CC2P
);

1651 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 4);

1654 
TIMx
->
CCER
 = 
tmpc˚r
;

1655 
	}
}

1666 
	$TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1668 
uöt16_t
 
tmpc˚r
 = 0;

1671 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1672 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1674 
tmpc˚r
 = 
TIMx
->
CCER
;

1677 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC2NP
;

1678 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 4);

1681 
TIMx
->
CCER
 = 
tmpc˚r
;

1682 
	}
}

1693 
	$TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1695 
uöt16_t
 
tmpc˚r
 = 0;

1698 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1699 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1701 
tmpc˚r
 = 
TIMx
->
CCER
;

1704 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3P
;

1705 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 8);

1708 
TIMx
->
CCER
 = 
tmpc˚r
;

1709 
	}
}

1720 
	$TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

1722 
uöt16_t
 
tmpc˚r
 = 0;

1725 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1726 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

1728 
tmpc˚r
 = 
TIMx
->
CCER
;

1731 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC3NP
;

1732 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCNPﬁ¨ôy
 << 8);

1735 
TIMx
->
CCER
 = 
tmpc˚r
;

1736 
	}
}

1747 
	$TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

1749 
uöt16_t
 
tmpc˚r
 = 0;

1752 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1753 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

1755 
tmpc˚r
 = 
TIMx
->
CCER
;

1758 
tmpc˚r
 &(
uöt16_t
)~
TIM_CCER_CC4P
;

1759 
tmpc˚r
 |(
uöt16_t
)(
TIM_OCPﬁ¨ôy
 << 12);

1762 
TIMx
->
CCER
 = 
tmpc˚r
;

1763 
	}
}

1778 
	$TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
)

1780 
uöt16_t
 
tmp
 = 0;

1783 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1784 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1785 
	`as£π_∑øm
(
	`IS_TIM_CCX
(
TIM_CCx
));

1787 
tmp
 = 
CCER_CCE_SET
 << 
TIM_Ch™√l
;

1790 
TIMx
->
CCER
 &(
uöt16_t
)~ 
tmp
;

1793 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCx
 << 
TIM_Ch™√l
);

1794 
	}
}

1808 
	$TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
)

1810 
uöt16_t
 
tmp
 = 0;

1813 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1814 
	`as£π_∑øm
(
	`IS_TIM_COMPLEMENTARY_CHANNEL
(
TIM_Ch™√l
));

1815 
	`as£π_∑øm
(
	`IS_TIM_CCXN
(
TIM_CCxN
));

1817 
tmp
 = 
CCER_CCNE_SET
 << 
TIM_Ch™√l
;

1820 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp
;

1823 
TIMx
->
CCER
 |(
uöt16_t
)(
TIM_CCxN
 << 
TIM_Ch™√l
);

1824 
	}
}

1890 
	$TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1893 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1894 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

1895 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
));

1896 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
));

1897 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
TIM_ICInôSåu˘
->
TIM_ICFûãr
));

1899 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

1902 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1903 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1904 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1906 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1908 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_2
)

1911 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1912 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1913 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1914 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1916 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1918 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_3
)

1921 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1922 
	`TI3_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1923 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1924 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1926 
	`TIM_SëIC3PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1931 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1932 
	`TI4_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

1933 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

1934 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1936 
	`TIM_SëIC4PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1938 
	}
}

1946 
	$TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1949 
TIM_ICInôSåu˘
->
TIM_Ch™√l
 = 
TIM_Ch™√l_1
;

1950 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1951 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

1952 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
 = 
TIM_ICPSC_DIV1
;

1953 
TIM_ICInôSåu˘
->
TIM_ICFûãr
 = 0x00;

1954 
	}
}

1965 
	$TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

1967 
uöt16_t
 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1968 
uöt16_t
 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

1971 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1974 i‡(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 =
TIM_ICPﬁ¨ôy_Risög
)

1976 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_FÆlög
;

1980 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

1983 i‡(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 =
TIM_ICSñe˘i⁄_Dúe˘TI
)

1985 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Indúe˘TI
;

1989 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

1991 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

1994 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

1995 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

1997 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

1999 
	`TI2_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2001 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2006 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

2007 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2009 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2011 
	`TI1_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2013 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2015 
	}
}

2022 
uöt32_t
 
	$TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
)

2025 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2028  
TIMx
->
CCR1
;

2029 
	}
}

2037 
uöt32_t
 
	$TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
)

2040 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2043  
TIMx
->
CCR2
;

2044 
	}
}

2051 
uöt32_t
 
	$TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
)

2054 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2057  
TIMx
->
CCR3
;

2058 
	}
}

2065 
uöt32_t
 
	$TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
)

2068 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2071  
TIMx
->
CCR4
;

2072 
	}
}

2085 
	$TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2088 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2089 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2092 
TIMx
->
CCMR1
 &(
uöt16_t
)~
TIM_CCMR1_IC1PSC
;

2095 
TIMx
->
CCMR1
 |
TIM_ICPSC
;

2096 
	}
}

2110 
	$TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2113 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2114 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2117 
TIMx
->
CCMR1
 &(
uöt16_t
)~
TIM_CCMR1_IC2PSC
;

2120 
TIMx
->
CCMR1
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2121 
	}
}

2134 
	$TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2137 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2138 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2141 
TIMx
->
CCMR2
 &(
uöt16_t
)~
TIM_CCMR2_IC3PSC
;

2144 
TIMx
->
CCMR2
 |
TIM_ICPSC
;

2145 
	}
}

2158 
	$TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2161 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2162 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2165 
TIMx
->
CCMR2
 &(
uöt16_t
)~
TIM_CCMR2_IC4PSC
;

2168 
TIMx
->
CCMR2
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2169 
	}
}

2211 
	$TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
)

2214 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2215 
	`as£π_∑øm
(
	`IS_TIM_OSSR_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
));

2216 
	`as£π_∑øm
(
	`IS_TIM_OSSI_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
));

2217 
	`as£π_∑øm
(
	`IS_TIM_LOCK_LEVEL
(
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
));

2218 
	`as£π_∑øm
(
	`IS_TIM_BREAK_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Bªak
));

2219 
	`as£π_∑øm
(
	`IS_TIM_BREAK_POLARITY
(
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
));

2220 
	`as£π_∑øm
(
	`IS_TIM_AUTOMATIC_OUTPUT_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
));

2224 
TIMx
->
BDTR
 = (
uöt32_t
)
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 | TIM_BDTRInôSåu˘->
TIM_OSSISèã
 |

2225 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 | TIM_BDTRInôSåu˘->
TIM_DódTime
 |

2226 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 | TIM_BDTRInôSåu˘->
TIM_BªakPﬁ¨ôy
 |

2227 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
;

2228 
	}
}

2236 
	$TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
)

2239 
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 = 
TIM_OSSRSèã_DißbÀ
;

2240 
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
 = 
TIM_OSSISèã_DißbÀ
;

2241 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 = 
TIM_LOCKLevñ_OFF
;

2242 
TIM_BDTRInôSåu˘
->
TIM_DódTime
 = 0x00;

2243 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 = 
TIM_Bªak_DißbÀ
;

2244 
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
 = 
TIM_BªakPﬁ¨ôy_Low
;

2245 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
 = 
TIM_Autom©icOuçut_DißbÀ
;

2246 
	}
}

2255 
	$TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2258 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2259 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2261 i‡(
NewSèã
 !
DISABLE
)

2264 
TIMx
->
BDTR
 |
TIM_BDTR_MOE
;

2269 
TIMx
->
BDTR
 &(
uöt16_t
)~
TIM_BDTR_MOE
;

2271 
	}
}

2280 
	$TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2283 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2284 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2286 i‡(
NewSèã
 !
DISABLE
)

2289 
TIMx
->
CR2
 |
TIM_CR2_CCUS
;

2294 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCUS
;

2296 
	}
}

2305 
	$TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2308 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2309 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2310 i‡(
NewSèã
 !
DISABLE
)

2313 
TIMx
->
CR2
 |
TIM_CR2_CCPC
;

2318 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCPC
;

2320 
	}
}

2362 
	$TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2365 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2366 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

2367 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2369 i‡(
NewSèã
 !
DISABLE
)

2372 
TIMx
->
DIER
 |
TIM_IT
;

2377 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_IT
;

2379 
	}
}

2400 
	$TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
)

2403 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2404 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
TIM_EvítSour˚
));

2407 
TIMx
->
EGR
 = 
TIM_EvítSour˚
;

2408 
	}
}

2433 
FœgSètus
 
	$TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2435 
ITSètus
 
bô°©us
 = 
RESET
;

2437 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2438 
	`as£π_∑øm
(
	`IS_TIM_GET_FLAG
(
TIM_FLAG
));

2441 i‡((
TIMx
->
SR
 & 
TIM_FLAG
Ë!(
uöt16_t
)
RESET
)

2443 
bô°©us
 = 
SET
;

2447 
bô°©us
 = 
RESET
;

2449  
bô°©us
;

2450 
	}
}

2475 
	$TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

2478 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2481 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_FLAG
;

2482 
	}
}

2503 
ITSètus
 
	$TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2505 
ITSètus
 
bô°©us
 = 
RESET
;

2506 
uöt16_t
 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

2508 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2509 
	`as£π_∑øm
(
	`IS_TIM_GET_IT
(
TIM_IT
));

2511 
ô°©us
 = 
TIMx
->
SR
 & 
TIM_IT
;

2513 
ôíabÀ
 = 
TIMx
->
DIER
 & 
TIM_IT
;

2514 i‡((
ô°©us
 !(
uöt16_t
)
RESET
Ë&& (
ôíabÀ
 != (uint16_t)RESET))

2516 
bô°©us
 = 
SET
;

2520 
bô°©us
 = 
RESET
;

2522  
bô°©us
;

2523 
	}
}

2544 
	$TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

2547 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2550 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_IT
;

2551 
	}
}

2581 
	$TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
)

2584 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2585 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
TIM_DMABa£
));

2586 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
TIM_DMABur°Lígth
));

2589 
TIMx
->
DCR
 = 
TIM_DMABa£
 | 
TIM_DMABur°Lígth
;

2590 
	}
}

2608 
	$TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2611 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

2612 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
TIM_DMASour˚
));

2613 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2615 i‡(
NewSèã
 !
DISABLE
)

2618 
TIMx
->
DIER
 |
TIM_DMASour˚
;

2623 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_DMASour˚
;

2625 
	}
}

2634 
	$TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2637 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2638 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2640 i‡(
NewSèã
 !
DISABLE
)

2643 
TIMx
->
CR2
 |
TIM_CR2_CCDS
;

2648 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCDS
;

2650 
	}
}

2673 
	$TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
)

2676 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2679 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

2680 
	}
}

2694 
	$TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

2697 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2698 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

2701 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_I≈utTriggîSour˚
);

2704 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

2705 
	}
}

2724 
	$TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

2725 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
)

2728 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2729 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICPﬁ¨ôy
));

2730 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
ICFûãr
));

2733 i‡(
TIM_TIxExã∫ÆCLKSour˚
 =
TIM_TIxExã∫ÆCLK1Sour˚_TI2
)

2735 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

2739 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

2742 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_TIxExã∫ÆCLKSour˚
);

2744 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

2745 
	}
}

2764 
	$TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

2765 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

2767 
uöt16_t
 
tmpsm¸
 = 0;

2770 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2771 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

2772 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

2773 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

2775 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

2778 
tmpsm¸
 = 
TIMx
->
SMCR
;

2781 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

2784 
tmpsm¸
 |
TIM_SœveMode_Exã∫Æ1
;

2787 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_TS
;

2788 
tmpsm¸
 |
TIM_TS_ETRF
;

2791 
TIMx
->
SMCR
 = 
tmpsm¸
;

2792 
	}
}

2811 
	$TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

2812 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

2815 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2816 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

2817 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

2818 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

2821 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

2824 
TIMx
->
SMCR
 |
TIM_SMCR_ECE
;

2825 
	}
}

2879 
	$TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

2881 
uöt16_t
 
tmpsm¸
 = 0;

2884 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2885 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

2888 
tmpsm¸
 = 
TIMx
->
SMCR
;

2891 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_TS
;

2894 
tmpsm¸
 |
TIM_I≈utTriggîSour˚
;

2897 
TIMx
->
SMCR
 = 
tmpsm¸
;

2898 
	}
}

2922 
	$TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
)

2925 
	`as£π_∑øm
(
	`IS_TIM_LIST5_PERIPH
(
TIMx
));

2926 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
TIM_TRGOSour˚
));

2929 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_MMS
;

2931 
TIMx
->
CR2
 |
TIM_TRGOSour˚
;

2932 
	}
}

2946 
	$TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_SœveMode
)

2949 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2950 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
TIM_SœveMode
));

2953 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

2956 
TIMx
->
SMCR
 |
TIM_SœveMode
;

2957 
	}
}

2969 
	$TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
)

2972 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2973 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
TIM_Ma°îSœveMode
));

2976 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_MSM
;

2979 
TIMx
->
SMCR
 |
TIM_Ma°îSœveMode
;

2980 
	}
}

2999 
	$TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

3000 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

3002 
uöt16_t
 
tmpsm¸
 = 0;

3005 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

3006 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

3007 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

3008 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

3010 
tmpsm¸
 = 
TIMx
->
SMCR
;

3013 
tmpsm¸
 &
SMCR_ETR_MASK
;

3016 
tmpsm¸
 |(
uöt16_t
)(
TIM_ExtTRGPªsˇÀr
 | (uöt16_t)(
TIM_ExtTRGPﬁ¨ôy
 | (uöt16_t)(
ExtTRGFûãr
 << (uint16_t)8)));

3019 
TIMx
->
SMCR
 = 
tmpsm¸
;

3020 
	}
}

3057 
	$TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

3058 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
)

3060 
uöt16_t
 
tmpsm¸
 = 0;

3061 
uöt16_t
 
tmpccmr1
 = 0;

3062 
uöt16_t
 
tmpc˚r
 = 0;

3065 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

3066 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
TIM_EncodîMode
));

3067 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC1Pﬁ¨ôy
));

3068 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC2Pﬁ¨ôy
));

3071 
tmpsm¸
 = 
TIMx
->
SMCR
;

3074 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3077 
tmpc˚r
 = 
TIMx
->
CCER
;

3080 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

3081 
tmpsm¸
 |
TIM_EncodîMode
;

3084 
tmpccmr1
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR1_CC2S
);

3085 
tmpccmr1
 |
TIM_CCMR1_CC1S_0
 | 
TIM_CCMR1_CC2S_0
;

3088 
tmpc˚r
 &((
uöt16_t
)~
TIM_CCER_CC1P
Ë& ((uöt16_t)~
TIM_CCER_CC2P
);

3089 
tmpc˚r
 |(
uöt16_t
)(
TIM_IC1Pﬁ¨ôy
 | (uöt16_t)(
TIM_IC2Pﬁ¨ôy
 << (uint16_t)4));

3092 
TIMx
->
SMCR
 = 
tmpsm¸
;

3095 
TIMx
->
CCMR1
 = 
tmpccmr1
;

3098 
TIMx
->
CCER
 = 
tmpc˚r
;

3099 
	}
}

3109 
	$TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

3112 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

3113 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

3115 i‡(
NewSèã
 !
DISABLE
)

3118 
TIMx
->
CR2
 |
TIM_CR2_TI1S
;

3123 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_TI1S
;

3125 
	}
}

3160 
	$TIM_Rem≠C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Rem≠
)

3163 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

3164 
	`as£π_∑øm
(
	`IS_TIM_REMAP
(
TIM_Rem≠
));

3167 
TIMx
->
OR
 = 
TIM_Rem≠
;

3168 
	}
}

3191 
	$TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3192 
uöt16_t
 
TIM_ICFûãr
)

3194 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0;

3197 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC1E
;

3198 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3199 
tmpc˚r
 = 
TIMx
->
CCER
;

3202 
tmpccmr1
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR1_IC1F
);

3203 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

3206 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
);

3207 
tmpc˚r
 |(
uöt16_t
)(
TIM_ICPﬁ¨ôy
 | (uöt16_t)
TIM_CCER_CC1E
);

3210 
TIMx
->
CCMR1
 = 
tmpccmr1
;

3211 
TIMx
->
CCER
 = 
tmpc˚r
;

3212 
	}
}

3232 
	$TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3233 
uöt16_t
 
TIM_ICFûãr
)

3235 
uöt16_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3238 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC2E
;

3239 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3240 
tmpc˚r
 = 
TIMx
->
CCER
;

3241 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 4);

3244 
tmpccmr1
 &((
uöt16_t
)~
TIM_CCMR1_CC2S
Ë& ((uöt16_t)~
TIM_CCMR1_IC2F
);

3245 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

3246 
tmpccmr1
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

3249 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
);

3250 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC2E
);

3253 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

3254 
TIMx
->
CCER
 = 
tmpc˚r
;

3255 
	}
}

3274 
	$TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3275 
uöt16_t
 
TIM_ICFûãr
)

3277 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3280 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC3E
;

3281 
tmpccmr2
 = 
TIMx
->
CCMR2
;

3282 
tmpc˚r
 = 
TIMx
->
CCER
;

3283 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 8);

3286 
tmpccmr2
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR2_IC3F
);

3287 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

3290 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC3P
 | 
TIM_CCER_CC3NP
);

3291 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC3E
);

3294 
TIMx
->
CCMR2
 = 
tmpccmr2
;

3295 
TIMx
->
CCER
 = 
tmpc˚r
;

3296 
	}
}

3315 
	$TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3316 
uöt16_t
 
TIM_ICFûãr
)

3318 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3321 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC4E
;

3322 
tmpccmr2
 = 
TIMx
->
CCMR2
;

3323 
tmpc˚r
 = 
TIMx
->
CCER
;

3324 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 12);

3327 
tmpccmr2
 &((
uöt16_t
)~
TIM_CCMR1_CC2S
Ë& ((uöt16_t)~
TIM_CCMR1_IC2F
);

3328 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

3329 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

3332 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC4P
 | 
TIM_CCER_CC4NP
);

3333 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC4E
);

3336 
TIMx
->
CCMR2
 = 
tmpccmr2
;

3337 
TIMx
->
CCER
 = 
tmpc˚r
 ;

3338 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_usart.c

85 
	~"°m32f4xx_ußπ.h
"

86 
	~"°m32f4xx_rcc.h
"

101 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR1_M
 | 
USART_CR1_PCE
 | \

102 
USART_CR1_PS
 | 
USART_CR1_TE
 | \

103 
USART_CR1_RE
))

	)

106 
	#CR2_CLOCK_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR2_CLKEN
 | 
USART_CR2_CPOL
 | \

107 
USART_CR2_CPHA
 | 
USART_CR2_LBCL
))

	)

110 
	#CR3_CLEAR_MASK
 ((
uöt16_t
)(
USART_CR3_RTSE
 | 
USART_CR3_CTSE
))

	)

113 
	#IT_MASK
 ((
uöt16_t
)0x001F)

	)

178 
	$USART_DeInô
(
USART_Ty≥Def
* 
USARTx
)

181 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

183 i‡(
USARTx
 =
USART1
)

185 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
ENABLE
);

186 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
DISABLE
);

188 i‡(
USARTx
 =
USART2
)

190 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

191 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
DISABLE
);

193 i‡(
USARTx
 =
USART3
)

195 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

196 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
DISABLE
);

198 i‡(
USARTx
 =
UART4
)

200 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
ENABLE
);

201 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
DISABLE
);

203 i‡(
USARTx
 =
UART5
)

205 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
ENABLE
);

206 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
DISABLE
);

210 i‡(
USARTx
 =
USART6
)

212 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART6
, 
ENABLE
);

213 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART6
, 
DISABLE
);

216 
	}
}

227 
	$USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
)

229 
uöt32_t
 
tm¥eg
 = 0x00, 
≠b˛ock
 = 0x00;

230 
uöt32_t
 
öãgîdividî
 = 0x00;

231 
uöt32_t
 
‰a˘i⁄Ædividî
 = 0x00;

232 
RCC_ClocksTy≥Def
 
RCC_ClocksSètus
;

235 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

236 
	`as£π_∑øm
(
	`IS_USART_BAUDRATE
(
USART_InôSåu˘
->
USART_BaudR©e
));

237 
	`as£π_∑øm
(
	`IS_USART_WORD_LENGTH
(
USART_InôSåu˘
->
USART_W‹dLígth
));

238 
	`as£π_∑øm
(
	`IS_USART_STOPBITS
(
USART_InôSåu˘
->
USART_St›Bôs
));

239 
	`as£π_∑øm
(
	`IS_USART_PARITY
(
USART_InôSåu˘
->
USART_P¨ôy
));

240 
	`as£π_∑øm
(
	`IS_USART_MODE
(
USART_InôSåu˘
->
USART_Mode
));

241 
	`as£π_∑øm
(
	`IS_USART_HARDWARE_FLOW_CONTROL
(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
));

244 i‡(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 !
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
)

246 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

250 
tm¥eg
 = 
USARTx
->
CR2
;

253 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_STOP
);

257 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_St›Bôs
;

260 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

263 
tm¥eg
 = 
USARTx
->
CR1
;

266 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR1_CLEAR_MASK
);

272 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_W‹dLígth
 | USART_InôSåu˘->
USART_P¨ôy
 |

273 
USART_InôSåu˘
->
USART_Mode
;

276 
USARTx
->
CR1
 = (
uöt16_t
)
tm¥eg
;

279 
tm¥eg
 = 
USARTx
->
CR3
;

282 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR3_CLEAR_MASK
);

286 
tm¥eg
 |
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
;

289 
USARTx
->
CR3
 = (
uöt16_t
)
tm¥eg
;

293 
	`RCC_GëClocksFªq
(&
RCC_ClocksSètus
);

295 i‡((
USARTx
 =
USART1
Ë|| (USARTx =
USART6
))

297 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK2_Fªquícy
;

301 
≠b˛ock
 = 
RCC_ClocksSètus
.
PCLK1_Fªquícy
;

305 i‡((
USARTx
->
CR1
 & 
USART_CR1_OVER8
) != 0)

308 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (2 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

313 
öãgîdividî
 = ((25 * 
≠b˛ock
Ë/ (4 * (
USART_InôSåu˘
->
USART_BaudR©e
)));

315 
tm¥eg
 = (
öãgîdividî
 / 100) << 4;

318 
‰a˘i⁄Ædividî
 = 
öãgîdividî
 - (100 * (
tm¥eg
 >> 4));

321 i‡((
USARTx
->
CR1
 & 
USART_CR1_OVER8
) != 0)

323 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 8Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x07);

327 
tm¥eg
 |((((
‰a˘i⁄Ædividî
 * 16Ë+ 50Ë/ 100)Ë& ((
uöt8_t
)0x0F);

331 
USARTx
->
BRR
 = (
uöt16_t
)
tm¥eg
;

332 
	}
}

340 
	$USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
)

343 
USART_InôSåu˘
->
USART_BaudR©e
 = 9600;

344 
USART_InôSåu˘
->
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

345 
USART_InôSåu˘
->
USART_St›Bôs
 = 
USART_St›Bôs_1
;

346 
USART_InôSåu˘
->
USART_P¨ôy
 = 
USART_P¨ôy_No
 ;

347 
USART_InôSåu˘
->
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

348 
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

349 
	}
}

360 
	$USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

362 
uöt32_t
 
tm¥eg
 = 0x00;

364 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

365 
	`as£π_∑øm
(
	`IS_USART_CLOCK
(
USART_ClockInôSåu˘
->
USART_Clock
));

366 
	`as£π_∑øm
(
	`IS_USART_CPOL
(
USART_ClockInôSåu˘
->
USART_CPOL
));

367 
	`as£π_∑øm
(
	`IS_USART_CPHA
(
USART_ClockInôSåu˘
->
USART_CPHA
));

368 
	`as£π_∑øm
(
	`IS_USART_LASTBIT
(
USART_ClockInôSåu˘
->
USART_La°Bô
));

371 
tm¥eg
 = 
USARTx
->
CR2
;

373 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR2_CLOCK_CLEAR_MASK
);

379 
tm¥eg
 |(
uöt32_t
)
USART_ClockInôSåu˘
->
USART_Clock
 | USART_ClockInôSåu˘->
USART_CPOL
 |

380 
USART_ClockInôSåu˘
->
USART_CPHA
 | USART_ClockInôSåu˘->
USART_La°Bô
;

382 
USARTx
->
CR2
 = (
uöt16_t
)
tm¥eg
;

383 
	}
}

391 
	$USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

394 
USART_ClockInôSåu˘
->
USART_Clock
 = 
USART_Clock_DißbÀ
;

395 
USART_ClockInôSåu˘
->
USART_CPOL
 = 
USART_CPOL_Low
;

396 
USART_ClockInôSåu˘
->
USART_CPHA
 = 
USART_CPHA_1Edge
;

397 
USART_ClockInôSåu˘
->
USART_La°Bô
 = 
USART_La°Bô_DißbÀ
;

398 
	}
}

408 
	$USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

411 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

412 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

414 i‡(
NewSèã
 !
DISABLE
)

417 
USARTx
->
CR1
 |
USART_CR1_UE
;

422 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_UE
);

424 
	}
}

434 
	$USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
)

437 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

440 
USARTx
->
GTPR
 &
USART_GTPR_GT
;

442 
USARTx
->
GTPR
 |
USART_PªsˇÀr
;

443 
	}
}

455 
	$USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

458 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

459 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

461 i‡(
NewSèã
 !
DISABLE
)

464 
USARTx
->
CR1
 |
USART_CR1_OVER8
;

469 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_OVER8
);

471 
	}
}

481 
	$USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

484 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

485 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

487 i‡(
NewSèã
 !
DISABLE
)

490 
USARTx
->
CR3
 |
USART_CR3_ONEBIT
;

495 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_ONEBIT
);

497 
	}
}

538 
	$USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
)

541 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

542 
	`as£π_∑øm
(
	`IS_USART_DATA
(
D©a
));

545 
USARTx
->
DR
 = (
D©a
 & (
uöt16_t
)0x01FF);

546 
	}
}

554 
uöt16_t
 
	$USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
)

557 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

560  (
uöt16_t
)(
USARTx
->
DR
 & (uint16_t)0x01FF);

561 
	}
}

605 
	$USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
)

608 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

609 
	`as£π_∑øm
(
	`IS_USART_ADDRESS
(
USART_Addªss
));

612 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_ADD
);

614 
USARTx
->
CR2
 |
USART_Addªss
;

615 
	}
}

625 
	$USART_Re˚ivîWakeUpCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

628 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

629 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

631 i‡(
NewSèã
 !
DISABLE
)

634 
USARTx
->
CR1
 |
USART_CR1_RWU
;

639 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_RWU
);

641 
	}
}

652 
	$USART_WakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_WakeUp
)

655 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

656 
	`as£π_∑øm
(
	`IS_USART_WAKEUP
(
USART_WakeUp
));

658 
USARTx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
USART_CR1_WAKE
);

659 
USARTx
->
CR1
 |
USART_WakeUp
;

660 
	}
}

721 
	$USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_LINBªakDëe˘Lígth
)

724 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

725 
	`as£π_∑øm
(
	`IS_USART_LIN_BREAK_DETECT_LENGTH
(
USART_LINBªakDëe˘Lígth
));

727 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_LBDL
);

728 
USARTx
->
CR2
 |
USART_LINBªakDëe˘Lígth
;

729 
	}
}

739 
	$USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

742 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

743 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

745 i‡(
NewSèã
 !
DISABLE
)

748 
USARTx
->
CR2
 |
USART_CR2_LINEN
;

753 
USARTx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
USART_CR2_LINEN
);

755 
	}
}

763 
	$USART_SídBªak
(
USART_Ty≥Def
* 
USARTx
)

766 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

769 
USARTx
->
CR1
 |
USART_CR1_SBK
;

770 
	}
}

816 
	$USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

819 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

820 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

822 i‡(
NewSèã
 !
DISABLE
)

825 
USARTx
->
CR3
 |
USART_CR3_HDSEL
;

830 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_HDSEL
);

832 
	}
}

901 
	$USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
)

904 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

907 
USARTx
->
GTPR
 &
USART_GTPR_PSC
;

909 
USARTx
->
GTPR
 |(
uöt16_t
)((uöt16_t)
USART_Gu¨dTime
 << 0x08);

910 
	}
}

920 
	$USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

923 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

924 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

925 i‡(
NewSèã
 !
DISABLE
)

928 
USARTx
->
CR3
 |
USART_CR3_SCEN
;

933 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_SCEN
);

935 
	}
}

945 
	$USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

948 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

949 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

950 i‡(
NewSèã
 !
DISABLE
)

953 
USARTx
->
CR3
 |
USART_CR3_NACK
;

958 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_NACK
);

960 
	}
}

1016 
	$USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IrDAMode
)

1019 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1020 
	`as£π_∑øm
(
	`IS_USART_IRDA_MODE
(
USART_IrDAMode
));

1022 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_IRLP
);

1023 
USARTx
->
CR3
 |
USART_IrDAMode
;

1024 
	}
}

1034 
	$USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1037 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1038 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1040 i‡(
NewSèã
 !
DISABLE
)

1043 
USARTx
->
CR3
 |
USART_CR3_IREN
;

1048 
USARTx
->
CR3
 &(
uöt16_t
)~((uöt16_t)
USART_CR3_IREN
);

1050 
	}
}

1080 
	$USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1083 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1084 
	`as£π_∑øm
(
	`IS_USART_DMAREQ
(
USART_DMAReq
));

1085 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1087 i‡(
NewSèã
 !
DISABLE
)

1091 
USARTx
->
CR3
 |
USART_DMAReq
;

1097 
USARTx
->
CR3
 &(
uöt16_t
)~
USART_DMAReq
;

1099 
	}
}

1208 
	$USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1210 
uöt32_t
 
ußπªg
 = 0x00, 
ôpos
 = 0x00, 
ômask
 = 0x00;

1211 
uöt32_t
 
ußπxba£
 = 0x00;

1213 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1214 
	`as£π_∑øm
(
	`IS_USART_CONFIG_IT
(
USART_IT
));

1215 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1218 i‡(
USART_IT
 =
USART_IT_CTS
)

1220 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1223 
ußπxba£
 = (
uöt32_t
)
USARTx
;

1226 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

1229 
ôpos
 = 
USART_IT
 & 
IT_MASK
;

1230 
ômask
 = (((
uöt32_t
)0x01Ë<< 
ôpos
);

1232 i‡(
ußπªg
 == 0x01)

1234 
ußπxba£
 += 0x0C;

1236 i‡(
ußπªg
 == 0x02)

1238 
ußπxba£
 += 0x10;

1242 
ußπxba£
 += 0x14;

1244 i‡(
NewSèã
 !
DISABLE
)

1246 *(
__IO
 
uöt32_t
*)
ußπxba£
 |
ômask
;

1250 *(
__IO
 
uöt32_t
*)
ußπxba£
 &~
ômask
;

1252 
	}
}

1272 
FœgSètus
 
	$USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

1274 
FœgSètus
 
bô°©us
 = 
RESET
;

1276 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1277 
	`as£π_∑øm
(
	`IS_USART_FLAG
(
USART_FLAG
));

1280 i‡(
USART_FLAG
 =
USART_FLAG_CTS
)

1282 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1285 i‡((
USARTx
->
SR
 & 
USART_FLAG
Ë!(
uöt16_t
)
RESET
)

1287 
bô°©us
 = 
SET
;

1291 
bô°©us
 = 
RESET
;

1293  
bô°©us
;

1294 
	}
}

1321 
	$USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_FLAG
)

1324 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1325 
	`as£π_∑øm
(
	`IS_USART_CLEAR_FLAG
(
USART_FLAG
));

1328 i‡((
USART_FLAG
 & 
USART_FLAG_CTS
) == USART_FLAG_CTS)

1330 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1333 
USARTx
->
SR
 = (
uöt16_t
)~
USART_FLAG
;

1334 
	}
}

1355 
ITSètus
 
	$USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1357 
uöt32_t
 
bôpos
 = 0x00, 
ômask
 = 0x00, 
ußπªg
 = 0x00;

1358 
ITSètus
 
bô°©us
 = 
RESET
;

1360 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1361 
	`as£π_∑øm
(
	`IS_USART_GET_IT
(
USART_IT
));

1364 i‡(
USART_IT
 =
USART_IT_CTS
)

1366 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1370 
ußπªg
 = (((
uöt8_t
)
USART_IT
) >> 0x05);

1372 
ômask
 = 
USART_IT
 & 
IT_MASK
;

1373 
ômask
 = (
uöt32_t
)0x01 << itmask;

1375 i‡(
ußπªg
 == 0x01)

1377 
ômask
 &
USARTx
->
CR1
;

1379 i‡(
ußπªg
 == 0x02)

1381 
ômask
 &
USARTx
->
CR2
;

1385 
ômask
 &
USARTx
->
CR3
;

1388 
bôpos
 = 
USART_IT
 >> 0x08;

1389 
bôpos
 = (
uöt32_t
)0x01 << bitpos;

1390 
bôpos
 &
USARTx
->
SR
;

1391 i‡((
ômask
 !(
uöt16_t
)
RESET
)&&(
bôpos
 != (uint16_t)RESET))

1393 
bô°©us
 = 
SET
;

1397 
bô°©us
 = 
RESET
;

1400  
bô°©us
;

1401 
	}
}

1429 
	$USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
USART_IT
)

1431 
uöt16_t
 
bôpos
 = 0x00, 
ômask
 = 0x00;

1433 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1434 
	`as£π_∑øm
(
	`IS_USART_CLEAR_IT
(
USART_IT
));

1437 i‡(
USART_IT
 =
USART_IT_CTS
)

1439 
	`as£π_∑øm
(
	`IS_USART_1236_PERIPH
(
USARTx
));

1442 
bôpos
 = 
USART_IT
 >> 0x08;

1443 
ômask
 = ((
uöt16_t
)0x01 << (uöt16_t)
bôpos
);

1444 
USARTx
->
SR
 = (
uöt16_t
)~
ômask
;

1445 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_wwdg.c

80 
	~"°m32f4xx_wwdg.h
"

81 
	~"°m32f4xx_rcc.h
"

96 
	#WWDG_OFFSET
 (
WWDG_BASE
 - 
PERIPH_BASE
)

	)

98 
	#CFR_OFFSET
 (
WWDG_OFFSET
 + 0x04)

	)

99 
	#EWI_BôNumbî
 0x09

	)

100 
	#CFR_EWI_BB
 (
PERIPH_BB_BASE
 + (
CFR_OFFSET
 * 32Ë+ (
EWI_BôNumbî
 * 4))

	)

104 
	#CFR_WDGTB_MASK
 ((
uöt32_t
)0xFFFFFE7F)

	)

105 
	#CFR_W_MASK
 ((
uöt32_t
)0xFFFFFF80)

	)

106 
	#BIT_MASK
 ((
uöt8_t
)0x7F)

	)

134 
	$WWDG_DeInô
()

136 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
ENABLE
);

137 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
DISABLE
);

138 
	}
}

150 
	$WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
)

152 
uöt32_t
 
tm¥eg
 = 0;

154 
	`as£π_∑øm
(
	`IS_WWDG_PRESCALER
(
WWDG_PªsˇÀr
));

156 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_WDGTB_MASK
;

158 
tm¥eg
 |
WWDG_PªsˇÀr
;

160 
WWDG
->
CFR
 = 
tm¥eg
;

161 
	}
}

169 
	$WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
)

171 
__IO
 
uöt32_t
 
tm¥eg
 = 0;

174 
	`as£π_∑øm
(
	`IS_WWDG_WINDOW_VALUE
(
WödowVÆue
));

177 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_W_MASK
;

180 
tm¥eg
 |
WödowVÆue
 & (
uöt32_t
Ë
BIT_MASK
;

183 
WWDG
->
CFR
 = 
tm¥eg
;

184 
	}
}

192 
	$WWDG_E«bÀIT
()

194 *(
__IO
 
uöt32_t
 *Ë
CFR_EWI_BB
 = (uöt32_t)
ENABLE
;

195 
	}
}

204 
	$WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
)

207 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

210 
WWDG
->
CR
 = 
Cou¡î
 & 
BIT_MASK
;

211 
	}
}

235 
	$WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
)

238 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

239 
WWDG
->
CR
 = 
WWDG_CR_WDGA
 | 
Cou¡î
;

240 
	}
}

262 
FœgSètus
 
	$WWDG_GëFœgSètus
()

264 
FœgSètus
 
bô°©us
 = 
RESET
;

266 i‡((
WWDG
->
SR
Ë!(
uöt32_t
)
RESET
)

268 
bô°©us
 = 
SET
;

272 
bô°©us
 = 
RESET
;

274  
bô°©us
;

275 
	}
}

282 
	$WWDG_CÀ¨Fœg
()

284 
WWDG
->
SR
 = (
uöt32_t
)
RESET
;

285 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\cmsis\arm_common_tables.h

24 #i‚de‡
_ARM_COMMON_TABLES_H


25 
	#_ARM_COMMON_TABLES_H


	)

27 
	~"¨m_m©h.h
"

29 
uöt16_t
 
¨mBôRevTabÀ
[256];

30 
q15_t
 
¨mRecùTabÀQ15
[64];

31 
q31_t
 
¨mRecùTabÀQ31
[64];

32 c⁄° 
q31_t
 
ªÆC€fAQ31
[1024];

33 c⁄° 
q31_t
 
ªÆC€fBQ31
[1024];

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\cmsis\arm_math.h

251 #i‚de‡
_ARM_MATH_H


252 
	#_ARM_MATH_H


	)

254 
	#__CMSIS_GENERIC


	)

256 #i‡
deföed
 (
ARM_MATH_CM4
)

257 
	~"c‹e_cm4.h
"

258 #ñi‡
deföed
 (
ARM_MATH_CM3
)

259 
	~"c‹e_cm3.h
"

260 #ñi‡
deföed
 (
ARM_MATH_CM0
)

261 
	~"c‹e_cm0.h
"

263 
	~"ARMCM4.h
"

267 #unde‡
__CMSIS_GENERIC


268 
	~"°rög.h
"

269 
	~"m©h.h
"

270 #ifdef 
__˝lu•lus


280 
	#DELTA_Q31
 (0x100)

	)

281 
	#DELTA_Q15
 0x5

	)

282 
	#INDEX_MASK
 0x0000003F

	)

283 
	#PI
 3.14159265358979f

	)

289 
	#TABLE_SIZE
 256

	)

290 
	#TABLE_SPACING_Q31
 0x800000

	)

291 
	#TABLE_SPACING_Q15
 0x80

	)

298 
	#INPUT_SPACING
 0xB60B61

	)

307 
ARM_MATH_SUCCESS
 = 0,

308 
ARM_MATH_ARGUMENT_ERROR
 = -1,

309 
ARM_MATH_LENGTH_ERROR
 = -2,

310 
ARM_MATH_SIZE_MISMATCH
 = -3,

311 
ARM_MATH_NANINF
 = -4,

312 
ARM_MATH_SINGULAR
 = -5,

313 
ARM_MATH_TEST_FAILURE
 = -6

314 } 
	t¨m_°©us
;

319 
öt8_t
 
	tq7_t
;

324 
öt16_t
 
	tq15_t
;

329 
öt32_t
 
	tq31_t
;

334 
öt64_t
 
	tq63_t
;

339 
	tÊﬂt32_t
;

344 
	tÊﬂt64_t
;

349 
	#__SIMD32
(
addr
Ë(*(
öt32_t
 **Ë& (addr))

	)

351 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0
)

355 
	#__PKHBT
(
ARG1
, 
ARG2
, 
ARG3
Ë–(((
öt32_t
)(ARG1) << 0) & (int32_t)0x0000FFFF) | \

356 (((
öt32_t
)(
ARG2
Ë<< 
ARG3
Ë& (öt32_t)0xFFFF0000Ë)

	)

364 #i‚de‡
ARM_MATH_BIG_ENDIAN


366 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v0) << 0) & (int32_t)0x000000FF) | \

367 (((
öt32_t
)(
v1
) << 8) & (int32_t)0x0000FF00) | \

368 (((
öt32_t
)(
v2
) << 16) & (int32_t)0x00FF0000) | \

369 (((
öt32_t
)(
v3
Ë<< 24Ë& (öt32_t)0xFF000000Ë)

	)

372 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v3) << 0) & (int32_t)0x000000FF) | \

373 (((
öt32_t
)(
v2
) << 8) & (int32_t)0x0000FF00) | \

374 (((
öt32_t
)(
v1
) << 16) & (int32_t)0x00FF0000) | \

375 (((
öt32_t
)(
v0
Ë<< 24Ë& (öt32_t)0xFF000000Ë)

	)

383 
__INLINE
 
q31_t
 
˛ù_q63_to_q31
(

384 
q63_t
 
x
)

386  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

387 ((0x7FFFFFFF ^ ((
q31_t
Ë(
x
 >> 63)))) : (q31_t) x;

393 
__INLINE
 
q15_t
 
˛ù_q63_to_q15
(

394 
q63_t
 
x
)

396  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

397 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 63)))) : (q15_t) (x >> 15);

403 
__INLINE
 
q7_t
 
˛ù_q31_to_q7
(

404 
q31_t
 
x
)

406  ((
q31_t
Ë(
x
 >> 24) != ((q31_t) x >> 23)) ?

407 ((0x7F ^ ((
q7_t
Ë(
x
 >> 31)))) : (q7_t) x;

413 
__INLINE
 
q15_t
 
˛ù_q31_to_q15
(

414 
q31_t
 
x
)

416  ((
q31_t
Ë(
x
 >> 16) != ((q31_t) x >> 15)) ?

417 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 31)))) : (q15_t) x;

424 
__INLINE
 
q63_t
 
mu…32x64
(

425 
q63_t
 
x
,

426 
q31_t
 
y
)

428  ((((
q63_t
Ë(
x
 & 0x00000000FFFFFFFFË* 
y
) >> 32) +

429 (((
q63_t
Ë(
x
 >> 32Ë* 
y
)));

433 #i‡
deföed
 (
ARM_MATH_CM0
Ë&& deföed ( 
__CC_ARM
 )

434 
	#__CLZ
 
__˛z


	)

437 #i‡
deföed
 (
ARM_MATH_CM0
Ë&& ((deföed (
__ICCARM__
)Ë||(deföed (
__GNUC__
)Ë|| deföed (
__TASKING__
) )

439 
__INLINE
 
uöt32_t
 
__CLZ
(
q31_t
 
d©a
);

442 
__INLINE
 
uöt32_t
 
__CLZ
(
q31_t
 
d©a
)

444 
uöt32_t
 
cou¡
 = 0;

445 
uöt32_t
 
mask
 = 0x80000000;

447 (
d©a
 & 
mask
) == 0)

449 
cou¡
 += 1u;

450 
mask
 = mask >> 1u;

453 (
cou¡
);

463 
__INLINE
 
uöt32_t
 
¨m_ªcù_q31
(

464 
q31_t
 
ö
,

465 
q31_t
 * 
d°
,

466 
q31_t
 * 
pRecùTabÀ
)

469 
uöt32_t
 
out
, 
ãmpVÆ
;

470 
uöt32_t
 
ödex
, 
i
;

471 
uöt32_t
 
signBôs
;

473 if(
ö
 > 0)

475 
signBôs
 = 
__CLZ
(
ö
) - 1;

479 
signBôs
 = 
__CLZ
(-
ö
) - 1;

483 
ö
 = i¿<< 
signBôs
;

486 
ödex
 = (
uöt32_t
Ë(
ö
 >> 24u);

487 
ödex
 = (ödex & 
INDEX_MASK
);

490 
out
 = 
pRecùTabÀ
[
ödex
];

494 
i
 = 0u; i < 2u; i++)

496 
ãmpVÆ
 = (
q31_t
Ë(((
q63_t
Ë
ö
 * 
out
) >> 31u);

497 
ãmpVÆ
 = 0x7FFFFFFF -ÅempVal;

500 
out
 = (
q31_t
Ë
˛ù_q63_to_q31
(((
q63_t
Ëouà* 
ãmpVÆ
) >> 30u);

504 *
d°
 = 
out
;

507  (
signBôs
 + 1u);

514 
__INLINE
 
uöt32_t
 
¨m_ªcù_q15
(

515 
q15_t
 
ö
,

516 
q15_t
 * 
d°
,

517 
q15_t
 * 
pRecùTabÀ
)

520 
uöt32_t
 
out
 = 0, 
ãmpVÆ
 = 0;

521 
uöt32_t
 
ödex
 = 0, 
i
 = 0;

522 
uöt32_t
 
signBôs
 = 0;

524 if(
ö
 > 0)

526 
signBôs
 = 
__CLZ
(
ö
) - 17;

530 
signBôs
 = 
__CLZ
(-
ö
) - 17;

534 
ö
 = i¿<< 
signBôs
;

537 
ödex
 = 
ö
 >> 8;

538 
ödex
 = (ödex & 
INDEX_MASK
);

541 
out
 = 
pRecùTabÀ
[
ödex
];

545 
i
 = 0; i < 2; i++)

547 
ãmpVÆ
 = (
q15_t
Ë(((
q31_t
Ë
ö
 * 
out
) >> 15);

548 
ãmpVÆ
 = 0x7FFF -ÅempVal;

550 
out
 = (
q15_t
Ë(((
q31_t
Ëouà* 
ãmpVÆ
) >> 14);

554 *
d°
 = 
out
;

557  (
signBôs
 + 1);

565 #i‡
deföed
(
ARM_MATH_CM0
)

567 
__INLINE
 
q31_t
 
__SSAT
(

568 
q31_t
 
x
,

569 
uöt32_t
 
y
)

571 
öt32_t
 
posMax
, 
√gMö
;

572 
uöt32_t
 
i
;

574 
posMax
 = 1;

575 
i
 = 0; i < (
y
 - 1); i++)

577 
posMax
 =ÖosMax * 2;

580 if(
x
 > 0)

582 
posMax
 = (posMax - 1);

584 if(
x
 > 
posMax
)

586 
x
 = 
posMax
;

591 
√gMö
 = -
posMax
;

593 if(
x
 < 
√gMö
)

595 
x
 = 
√gMö
;

598  (
x
);

610 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0
)

615 
__INLINE
 
q31_t
 
__QADD8
(

616 
q31_t
 
x
,

617 
q31_t
 
y
)

620 
q31_t
 
sum
;

621 
q7_t
 
r
, 
s
, 
t
, 
u
;

623 
r
 = (Ë
x
;

624 
s
 = (Ë
y
;

626 
r
 = 
__SSAT
((
q31_t
Ë‘ + 
s
), 8);

627 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë+ ((
y
 << 16) >> 24))), 8);

628 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë+ ((
y
 << 8) >> 24))), 8);

629 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë+ (
y
 >> 24))), 8);

631 
sum
 = (((
q31_t
Ë
u
 << 24Ë& 0xFF000000Ë| (((q31_tË
t
 << 16) & 0x00FF0000) |

632 (((
q31_t
Ë
s
 << 8Ë& 0x0000FF00Ë| (
r
 & 0x000000FF);

634  
sum
;

641 
__INLINE
 
q31_t
 
__QSUB8
(

642 
q31_t
 
x
,

643 
q31_t
 
y
)

646 
q31_t
 
sum
;

647 
q31_t
 
r
, 
s
, 
t
, 
u
;

649 
r
 = (Ë
x
;

650 
s
 = (Ë
y
;

652 
r
 = 
__SSAT
(‘ - 
s
), 8);

653 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë- ((
y
 << 16) >> 24))), 8) << 8;

654 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë- ((
y
 << 8) >> 24))), 8) << 16;

655 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë- (
y
 >> 24))), 8) << 24;

657 
sum
 =

658 (
u
 & 0xFF000000Ë| (
t
 & 0x00FF0000Ë| (
s
 & 0x0000FF00Ë| (
r
 & 0x000000FF);

660  
sum
;

670 
__INLINE
 
q31_t
 
__QADD16
(

671 
q31_t
 
x
,

672 
q31_t
 
y
)

675 
q31_t
 
sum
;

676 
q31_t
 
r
, 
s
;

678 
r
 = (Ë
x
;

679 
s
 = (Ë
y
;

681 
r
 = 
__SSAT
‘ + 
s
, 16);

682 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë+ (
y
 >> 16))), 16) << 16;

684 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

686  
sum
;

693 
__INLINE
 
q31_t
 
__SHADD16
(

694 
q31_t
 
x
,

695 
q31_t
 
y
)

698 
q31_t
 
sum
;

699 
q31_t
 
r
, 
s
;

701 
r
 = (Ë
x
;

702 
s
 = (Ë
y
;

704 
r
 = (‘ >> 1Ë+ (
s
 >> 1));

705 
s
 = ((
q31_t
Ë((
x
 >> 17Ë+ (
y
 >> 17))) << 16;

707 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

709  
sum
;

716 
__INLINE
 
q31_t
 
__QSUB16
(

717 
q31_t
 
x
,

718 
q31_t
 
y
)

721 
q31_t
 
sum
;

722 
q31_t
 
r
, 
s
;

724 
r
 = (Ë
x
;

725 
s
 = (Ë
y
;

727 
r
 = 
__SSAT
‘ - 
s
, 16);

728 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë- (
y
 >> 16))), 16) << 16;

730 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

732  
sum
;

738 
__INLINE
 
q31_t
 
__SHSUB16
(

739 
q31_t
 
x
,

740 
q31_t
 
y
)

743 
q31_t
 
diff
;

744 
q31_t
 
r
, 
s
;

746 
r
 = (Ë
x
;

747 
s
 = (Ë
y
;

749 
r
 = (‘ >> 1Ë- (
s
 >> 1));

750 
s
 = (((
x
 >> 17Ë- (
y
 >> 17)) << 16);

752 
diff
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

754  
diff
;

760 
__INLINE
 
q31_t
 
__QASX
(

761 
q31_t
 
x
,

762 
q31_t
 
y
)

765 
q31_t
 
sum
 = 0;

767 
sum
 = ((sum + 
˛ù_q31_to_q15
((
q31_t
Ë((Ë(
x
 >> 16Ë+ (Ë
y
))) << 16) +

768 
˛ù_q31_to_q15
((
q31_t
Ë((Ë
x
 - (Ë(
y
 >> 16)));

770  
sum
;

776 
__INLINE
 
q31_t
 
__SHASX
(

777 
q31_t
 
x
,

778 
q31_t
 
y
)

781 
q31_t
 
sum
;

782 
q31_t
 
r
, 
s
;

784 
r
 = (Ë
x
;

785 
s
 = (Ë
y
;

787 
r
 = (‘ >> 1Ë- (
y
 >> 17));

788 
s
 = (((
x
 >> 17) + (s >> 1)) << 16);

790 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

792  
sum
;

799 
__INLINE
 
q31_t
 
__QSAX
(

800 
q31_t
 
x
,

801 
q31_t
 
y
)

804 
q31_t
 
sum
 = 0;

806 
sum
 = ((sum + 
˛ù_q31_to_q15
((
q31_t
Ë((Ë(
x
 >> 16Ë- (Ë
y
))) << 16) +

807 
˛ù_q31_to_q15
((
q31_t
Ë((Ë
x
 + (Ë(
y
 >> 16)));

809  
sum
;

815 
__INLINE
 
q31_t
 
__SHSAX
(

816 
q31_t
 
x
,

817 
q31_t
 
y
)

820 
q31_t
 
sum
;

821 
q31_t
 
r
, 
s
;

823 
r
 = (Ë
x
;

824 
s
 = (Ë
y
;

826 
r
 = (‘ >> 1Ë+ (
y
 >> 17));

827 
s
 = (((
x
 >> 17) - (s >> 1)) << 16);

829 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

831  
sum
;

837 
__INLINE
 
q31_t
 
__SMUSDX
(

838 
q31_t
 
x
,

839 
q31_t
 
y
)

842  ((
q31_t
)(((Ë
x
 * (Ë(
y
 >> 16)) -

843 ((Ë(
x
 >> 16Ë* (Ë
y
)));

849 
__INLINE
 
q31_t
 
__SMUADX
(

850 
q31_t
 
x
,

851 
q31_t
 
y
)

854  ((
q31_t
)(((Ë
x
 * (Ë(
y
 >> 16)) +

855 ((Ë(
x
 >> 16Ë* (Ë
y
)));

861 
__INLINE
 
q31_t
 
__QADD
(

862 
q31_t
 
x
,

863 
q31_t
 
y
)

865  
˛ù_q63_to_q31
((
q63_t
Ë
x
 + 
y
);

871 
__INLINE
 
q31_t
 
__QSUB
(

872 
q31_t
 
x
,

873 
q31_t
 
y
)

875  
˛ù_q63_to_q31
((
q63_t
Ë
x
 - 
y
);

881 
__INLINE
 
q31_t
 
__SMLAD
(

882 
q31_t
 
x
,

883 
q31_t
 
y
,

884 
q31_t
 
sum
)

887  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
 >> 16)) +

888 ((Ë
x
 * (Ë
y
));

894 
__INLINE
 
q31_t
 
__SMLADX
(

895 
q31_t
 
x
,

896 
q31_t
 
y
,

897 
q31_t
 
sum
)

900  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
)) +

901 ((Ë
x
 * (Ë(
y
 >> 16)));

907 
__INLINE
 
q31_t
 
__SMLSDX
(

908 
q31_t
 
x
,

909 
q31_t
 
y
,

910 
q31_t
 
sum
)

913  (
sum
 - ((Ë(
x
 >> 16Ë* (Ë(
y
)) +

914 ((Ë
x
 * (Ë(
y
 >> 16)));

920 
__INLINE
 
q63_t
 
__SMLALD
(

921 
q31_t
 
x
,

922 
q31_t
 
y
,

923 
q63_t
 
sum
)

926  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
 >> 16)) +

927 ((Ë
x
 * (Ë
y
));

933 
__INLINE
 
q63_t
 
__SMLALDX
(

934 
q31_t
 
x
,

935 
q31_t
 
y
,

936 
q63_t
 
sum
)

939  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë
y
)) +

940 ((Ë
x
 * (Ë(
y
 >> 16));

946 
__INLINE
 
q31_t
 
__SMUAD
(

947 
q31_t
 
x
,

948 
q31_t
 
y
)

951  (((
x
 >> 16Ë* (
y
 >> 16)) +

952 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

958 
__INLINE
 
q31_t
 
__SMUSD
(

959 
q31_t
 
x
,

960 
q31_t
 
y
)

963  (-((
x
 >> 16Ë* (
y
 >> 16)) +

964 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

978 
uöt16_t
 
numT≠s
;

979 
q7_t
 *
pSèã
;

980 
q7_t
 *
pC€ffs
;

981 } 
	t¨m_fú_ö°™˚_q7
;

988 
uöt16_t
 
numT≠s
;

989 
q15_t
 *
pSèã
;

990 
q15_t
 *
pC€ffs
;

991 } 
	t¨m_fú_ö°™˚_q15
;

998 
uöt16_t
 
numT≠s
;

999 
q31_t
 *
pSèã
;

1000 
q31_t
 *
pC€ffs
;

1001 } 
	t¨m_fú_ö°™˚_q31
;

1008 
uöt16_t
 
numT≠s
;

1009 
Êﬂt32_t
 *
pSèã
;

1010 
Êﬂt32_t
 *
pC€ffs
;

1011 } 
	t¨m_fú_ö°™˚_f32
;

1022 
¨m_fú_q7
(

1023 c⁄° 
¨m_fú_ö°™˚_q7
 * 
S
,

1024 
q7_t
 * 
pSrc
,

1025 
q7_t
 * 
pD°
,

1026 
uöt32_t
 
blockSize
);

1038 
¨m_fú_öô_q7
(

1039 
¨m_fú_ö°™˚_q7
 * 
S
,

1040 
uöt16_t
 
numT≠s
,

1041 
q7_t
 * 
pC€ffs
,

1042 
q7_t
 * 
pSèã
,

1043 
uöt32_t
 
blockSize
);

1054 
¨m_fú_q15
(

1055 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1056 
q15_t
 * 
pSrc
,

1057 
q15_t
 * 
pD°
,

1058 
uöt32_t
 
blockSize
);

1068 
¨m_fú_Á°_q15
(

1069 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1070 
q15_t
 * 
pSrc
,

1071 
q15_t
 * 
pD°
,

1072 
uöt32_t
 
blockSize
);

1085 
¨m_°©us
 
¨m_fú_öô_q15
(

1086 
¨m_fú_ö°™˚_q15
 * 
S
,

1087 
uöt16_t
 
numT≠s
,

1088 
q15_t
 * 
pC€ffs
,

1089 
q15_t
 * 
pSèã
,

1090 
uöt32_t
 
blockSize
);

1100 
¨m_fú_q31
(

1101 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1102 
q31_t
 * 
pSrc
,

1103 
q31_t
 * 
pD°
,

1104 
uöt32_t
 
blockSize
);

1114 
¨m_fú_Á°_q31
(

1115 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1116 
q31_t
 * 
pSrc
,

1117 
q31_t
 * 
pD°
,

1118 
uöt32_t
 
blockSize
);

1129 
¨m_fú_öô_q31
(

1130 
¨m_fú_ö°™˚_q31
 * 
S
,

1131 
uöt16_t
 
numT≠s
,

1132 
q31_t
 * 
pC€ffs
,

1133 
q31_t
 * 
pSèã
,

1134 
uöt32_t
 
blockSize
);

1144 
¨m_fú_f32
(

1145 c⁄° 
¨m_fú_ö°™˚_f32
 * 
S
,

1146 
Êﬂt32_t
 * 
pSrc
,

1147 
Êﬂt32_t
 * 
pD°
,

1148 
uöt32_t
 
blockSize
);

1159 
¨m_fú_öô_f32
(

1160 
¨m_fú_ö°™˚_f32
 * 
S
,

1161 
uöt16_t
 
numT≠s
,

1162 
Êﬂt32_t
 * 
pC€ffs
,

1163 
Êﬂt32_t
 * 
pSèã
,

1164 
uöt32_t
 
blockSize
);

1172 
öt8_t
 
numSèges
;

1173 
q15_t
 *
pSèã
;

1174 
q15_t
 *
pC€ffs
;

1175 
öt8_t
 
po°Shi·
;

1177 } 
	t¨m_biquad_ˇsd_df1_ö°_q15
;

1185 
uöt32_t
 
numSèges
;

1186 
q31_t
 *
pSèã
;

1187 
q31_t
 *
pC€ffs
;

1188 
uöt8_t
 
po°Shi·
;

1190 } 
	t¨m_biquad_ˇsd_df1_ö°_q31
;

1197 
uöt32_t
 
numSèges
;

1198 
Êﬂt32_t
 *
pSèã
;

1199 
Êﬂt32_t
 *
pC€ffs
;

1202 } 
	t¨m_biquad_ˇsd_df1_ö°_f32
;

1215 
¨m_biquad_ˇsˇde_df1_q15
(

1216 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1217 
q15_t
 * 
pSrc
,

1218 
q15_t
 * 
pD°
,

1219 
uöt32_t
 
blockSize
);

1231 
¨m_biquad_ˇsˇde_df1_öô_q15
(

1232 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1233 
uöt8_t
 
numSèges
,

1234 
q15_t
 * 
pC€ffs
,

1235 
q15_t
 * 
pSèã
,

1236 
öt8_t
 
po°Shi·
);

1248 
¨m_biquad_ˇsˇde_df1_Á°_q15
(

1249 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1250 
q15_t
 * 
pSrc
,

1251 
q15_t
 * 
pD°
,

1252 
uöt32_t
 
blockSize
);

1264 
¨m_biquad_ˇsˇde_df1_q31
(

1265 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1266 
q31_t
 * 
pSrc
,

1267 
q31_t
 * 
pD°
,

1268 
uöt32_t
 
blockSize
);

1279 
¨m_biquad_ˇsˇde_df1_Á°_q31
(

1280 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1281 
q31_t
 * 
pSrc
,

1282 
q31_t
 * 
pD°
,

1283 
uöt32_t
 
blockSize
);

1295 
¨m_biquad_ˇsˇde_df1_öô_q31
(

1296 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1297 
uöt8_t
 
numSèges
,

1298 
q31_t
 * 
pC€ffs
,

1299 
q31_t
 * 
pSèã
,

1300 
öt8_t
 
po°Shi·
);

1311 
¨m_biquad_ˇsˇde_df1_f32
(

1312 c⁄° 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1313 
Êﬂt32_t
 * 
pSrc
,

1314 
Êﬂt32_t
 * 
pD°
,

1315 
uöt32_t
 
blockSize
);

1326 
¨m_biquad_ˇsˇde_df1_öô_f32
(

1327 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1328 
uöt8_t
 
numSèges
,

1329 
Êﬂt32_t
 * 
pC€ffs
,

1330 
Êﬂt32_t
 * 
pSèã
);

1339 
uöt16_t
 
numRows
;

1340 
uöt16_t
 
numCﬁs
;

1341 
Êﬂt32_t
 *
pD©a
;

1342 } 
	t¨m_m©rix_ö°™˚_f32
;

1350 
uöt16_t
 
numRows
;

1351 
uöt16_t
 
numCﬁs
;

1352 
q15_t
 *
pD©a
;

1354 } 
	t¨m_m©rix_ö°™˚_q15
;

1362 
uöt16_t
 
numRows
;

1363 
uöt16_t
 
numCﬁs
;

1364 
q31_t
 *
pD©a
;

1366 } 
	t¨m_m©rix_ö°™˚_q31
;

1379 
¨m_°©us
 
¨m_m©_add_f32
(

1380 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1381 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1382 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1393 
¨m_°©us
 
¨m_m©_add_q15
(

1394 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1395 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1396 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1407 
¨m_°©us
 
¨m_m©_add_q31
(

1408 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1409 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1410 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1421 
¨m_°©us
 
¨m_m©_å™s_f32
(

1422 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1423 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1434 
¨m_°©us
 
¨m_m©_å™s_q15
(

1435 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1436 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1446 
¨m_°©us
 
¨m_m©_å™s_q31
(

1447 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1448 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1460 
¨m_°©us
 
¨m_m©_mu…_f32
(

1461 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1462 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1463 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1474 
¨m_°©us
 
¨m_m©_mu…_q15
(

1475 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1476 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1477 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1478 
q15_t
 * 
pSèã
);

1490 
¨m_°©us
 
¨m_m©_mu…_Á°_q15
(

1491 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1492 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1493 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1494 
q15_t
 * 
pSèã
);

1505 
¨m_°©us
 
¨m_m©_mu…_q31
(

1506 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1507 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1508 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1519 
¨m_°©us
 
¨m_m©_mu…_Á°_q31
(

1520 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1521 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1522 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1534 
¨m_°©us
 
¨m_m©_sub_f32
(

1535 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1536 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1537 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1548 
¨m_°©us
 
¨m_m©_sub_q15
(

1549 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1550 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1551 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1562 
¨m_°©us
 
¨m_m©_sub_q31
(

1563 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1564 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1565 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1576 
¨m_°©us
 
¨m_m©_sˇÀ_f32
(

1577 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1578 
Êﬂt32_t
 
sˇÀ
,

1579 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1591 
¨m_°©us
 
¨m_m©_sˇÀ_q15
(

1592 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1593 
q15_t
 
sˇÀFø˘
,

1594 
öt32_t
 
shi·
,

1595 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1607 
¨m_°©us
 
¨m_m©_sˇÀ_q31
(

1608 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1609 
q31_t
 
sˇÀFø˘
,

1610 
öt32_t
 
shi·
,

1611 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1623 
¨m_m©_öô_q31
(

1624 
¨m_m©rix_ö°™˚_q31
 * 
S
,

1625 
uöt16_t
 
nRows
,

1626 
uöt16_t
 
nCﬁumns
,

1627 
q31_t
 *
pD©a
);

1638 
¨m_m©_öô_q15
(

1639 
¨m_m©rix_ö°™˚_q15
 * 
S
,

1640 
uöt16_t
 
nRows
,

1641 
uöt16_t
 
nCﬁumns
,

1642 
q15_t
 *
pD©a
);

1653 
¨m_m©_öô_f32
(

1654 
¨m_m©rix_ö°™˚_f32
 * 
S
,

1655 
uöt16_t
 
nRows
,

1656 
uöt16_t
 
nCﬁumns
,

1657 
Êﬂt32_t
 *
pD©a
);

1666 
q15_t
 
A0
;

1667 #ifde‡
ARM_MATH_CM0


1668 
q15_t
 
A1
;

1669 
q15_t
 
A2
;

1671 
q31_t
 
A1
;

1673 
q15_t
 
°©e
[3];

1674 
q15_t
 
Kp
;

1675 
q15_t
 
Ki
;

1676 
q15_t
 
Kd
;

1677 } 
	t¨m_pid_ö°™˚_q15
;

1684 
q31_t
 
A0
;

1685 
q31_t
 
A1
;

1686 
q31_t
 
A2
;

1687 
q31_t
 
°©e
[3];

1688 
q31_t
 
Kp
;

1689 
q31_t
 
Ki
;

1690 
q31_t
 
Kd
;

1692 } 
	t¨m_pid_ö°™˚_q31
;

1699 
Êﬂt32_t
 
A0
;

1700 
Êﬂt32_t
 
A1
;

1701 
Êﬂt32_t
 
A2
;

1702 
Êﬂt32_t
 
°©e
[3];

1703 
Êﬂt32_t
 
Kp
;

1704 
Êﬂt32_t
 
Ki
;

1705 
Êﬂt32_t
 
Kd
;

1706 } 
	t¨m_pid_ö°™˚_f32
;

1716 
¨m_pid_öô_f32
(

1717 
¨m_pid_ö°™˚_f32
 * 
S
,

1718 
öt32_t
 
ª£tSèãFœg
);

1725 
¨m_pid_ª£t_f32
(

1726 
¨m_pid_ö°™˚_f32
 * 
S
);

1735 
¨m_pid_öô_q31
(

1736 
¨m_pid_ö°™˚_q31
 * 
S
,

1737 
öt32_t
 
ª£tSèãFœg
);

1746 
¨m_pid_ª£t_q31
(

1747 
¨m_pid_ö°™˚_q31
 * 
S
);

1755 
¨m_pid_öô_q15
(

1756 
¨m_pid_ö°™˚_q15
 * 
S
,

1757 
öt32_t
 
ª£tSèãFœg
);

1764 
¨m_pid_ª£t_q15
(

1765 
¨m_pid_ö°™˚_q15
 * 
S
);

1773 
uöt32_t
 
nVÆues
;

1774 
Êﬂt32_t
 
x1
;

1775 
Êﬂt32_t
 
xS∑cög
;

1776 
Êﬂt32_t
 *
pYD©a
;

1777 } 
	t¨m_löór_öãΩ_ö°™˚_f32
;

1785 
uöt16_t
 
numRows
;

1786 
uöt16_t
 
numCﬁs
;

1787 
Êﬂt32_t
 *
pD©a
;

1788 } 
	t¨m_bûöór_öãΩ_ö°™˚_f32
;

1796 
uöt16_t
 
numRows
;

1797 
uöt16_t
 
numCﬁs
;

1798 
q31_t
 *
pD©a
;

1799 } 
	t¨m_bûöór_öãΩ_ö°™˚_q31
;

1807 
uöt16_t
 
numRows
;

1808 
uöt16_t
 
numCﬁs
;

1809 
q15_t
 *
pD©a
;

1810 } 
	t¨m_bûöór_öãΩ_ö°™˚_q15
;

1818 
uöt16_t
 
numRows
;

1819 
uöt16_t
 
numCﬁs
;

1820 
q7_t
 *
pD©a
;

1821 } 
	t¨m_bûöór_öãΩ_ö°™˚_q7
;

1833 
¨m_mu…_q7
(

1834 
q7_t
 * 
pSrcA
,

1835 
q7_t
 * 
pSrcB
,

1836 
q7_t
 * 
pD°
,

1837 
uöt32_t
 
blockSize
);

1848 
¨m_mu…_q15
(

1849 
q15_t
 * 
pSrcA
,

1850 
q15_t
 * 
pSrcB
,

1851 
q15_t
 * 
pD°
,

1852 
uöt32_t
 
blockSize
);

1863 
¨m_mu…_q31
(

1864 
q31_t
 * 
pSrcA
,

1865 
q31_t
 * 
pSrcB
,

1866 
q31_t
 * 
pD°
,

1867 
uöt32_t
 
blockSize
);

1878 
¨m_mu…_f32
(

1879 
Êﬂt32_t
 * 
pSrcA
,

1880 
Êﬂt32_t
 * 
pSrcB
,

1881 
Êﬂt32_t
 * 
pD°
,

1882 
uöt32_t
 
blockSize
);

1891 
uöt16_t
 
f·Lí
;

1892 
uöt8_t
 
if·Fœg
;

1893 
uöt8_t
 
bôRevî£Fœg
;

1894 
q15_t
 *
pTwiddÀ
;

1895 
uöt16_t
 *
pBôRevTabÀ
;

1896 
uöt16_t
 
twidC€fModifõr
;

1897 
uöt16_t
 
bôRevFa˘‹
;

1898 } 
	t¨m_cf·_ødix4_ö°™˚_q15
;

1906 
uöt16_t
 
f·Lí
;

1907 
uöt8_t
 
if·Fœg
;

1908 
uöt8_t
 
bôRevî£Fœg
;

1909 
q31_t
 *
pTwiddÀ
;

1910 
uöt16_t
 *
pBôRevTabÀ
;

1911 
uöt16_t
 
twidC€fModifõr
;

1912 
uöt16_t
 
bôRevFa˘‹
;

1913 } 
	t¨m_cf·_ødix4_ö°™˚_q31
;

1921 
uöt16_t
 
f·Lí
;

1922 
uöt8_t
 
if·Fœg
;

1923 
uöt8_t
 
bôRevî£Fœg
;

1924 
Êﬂt32_t
 *
pTwiddÀ
;

1925 
uöt16_t
 *
pBôRevTabÀ
;

1926 
uöt16_t
 
twidC€fModifõr
;

1927 
uöt16_t
 
bôRevFa˘‹
;

1928 
Êﬂt32_t
 
⁄ebyf·Lí
;

1929 } 
	t¨m_cf·_ødix4_ö°™˚_f32
;

1938 
¨m_cf·_ødix4_q15
(

1939 c⁄° 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

1940 
q15_t
 * 
pSrc
);

1951 
¨m_°©us
 
¨m_cf·_ødix4_öô_q15
(

1952 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

1953 
uöt16_t
 
f·Lí
,

1954 
uöt8_t
 
if·Fœg
,

1955 
uöt8_t
 
bôRevî£Fœg
);

1964 
¨m_cf·_ødix4_q31
(

1965 c⁄° 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

1966 
q31_t
 * 
pSrc
);

1977 
¨m_°©us
 
¨m_cf·_ødix4_öô_q31
(

1978 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

1979 
uöt16_t
 
f·Lí
,

1980 
uöt8_t
 
if·Fœg
,

1981 
uöt8_t
 
bôRevî£Fœg
);

1990 
¨m_cf·_ødix4_f32
(

1991 c⁄° 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

1992 
Êﬂt32_t
 * 
pSrc
);

2003 
¨m_°©us
 
¨m_cf·_ødix4_öô_f32
(

2004 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

2005 
uöt16_t
 
f·Lí
,

2006 
uöt8_t
 
if·Fœg
,

2007 
uöt8_t
 
bôRevî£Fœg
);

2024 
¨m_ødix4_buâîÊy_f32
(

2025 
Êﬂt32_t
 * 
pSrc
,

2026 
uöt16_t
 
f·Lí
,

2027 
Êﬂt32_t
 * 
pC€f
,

2028 
uöt16_t
 
twidC€fModifõr
);

2040 
¨m_ødix4_buâîÊy_övî£_f32
(

2041 
Êﬂt32_t
 * 
pSrc
,

2042 
uöt16_t
 
f·Lí
,

2043 
Êﬂt32_t
 * 
pC€f
,

2044 
uöt16_t
 
twidC€fModifõr
,

2045 
Êﬂt32_t
 
⁄ebyf·Lí
);

2056 
¨m_bôªvîßl_f32
(

2057 
Êﬂt32_t
 *
pSrc
,

2058 
uöt16_t
 
f·Size
,

2059 
uöt16_t
 
bôRevFa˘‹
,

2060 
uöt16_t
 *
pBôRevTab
);

2071 
¨m_ødix4_buâîÊy_q31
(

2072 
q31_t
 *
pSrc
,

2073 
uöt32_t
 
f·Lí
,

2074 
q31_t
 *
pC€f
,

2075 
uöt32_t
 
twidC€fModifõr
);

2086 
¨m_ødix4_buâîÊy_övî£_q31
(

2087 
q31_t
 * 
pSrc
,

2088 
uöt32_t
 
f·Lí
,

2089 
q31_t
 * 
pC€f
,

2090 
uöt32_t
 
twidC€fModifõr
);

2101 
¨m_bôªvîßl_q31
(

2102 
q31_t
 * 
pSrc
,

2103 
uöt32_t
 
f·Lí
,

2104 
uöt16_t
 
bôRevFa˘‹
,

2105 
uöt16_t
 *
pBôRevTab
);

2116 
¨m_ødix4_buâîÊy_q15
(

2117 
q15_t
 *
pSrc16
,

2118 
uöt32_t
 
f·Lí
,

2119 
q15_t
 *
pC€f16
,

2120 
uöt32_t
 
twidC€fModifõr
);

2131 
¨m_ødix4_buâîÊy_övî£_q15
(

2132 
q15_t
 *
pSrc16
,

2133 
uöt32_t
 
f·Lí
,

2134 
q15_t
 *
pC€f16
,

2135 
uöt32_t
 
twidC€fModifõr
);

2146 
¨m_bôªvîßl_q15
(

2147 
q15_t
 * 
pSrc
,

2148 
uöt32_t
 
f·Lí
,

2149 
uöt16_t
 
bôRevFa˘‹
,

2150 
uöt16_t
 *
pBôRevTab
);

2158 
uöt32_t
 
f·LíRól
;

2159 
uöt32_t
 
f·LíBy2
;

2160 
uöt8_t
 
if·FœgR
;

2161 
uöt8_t
 
bôRevî£FœgR
;

2162 
uöt32_t
 
twidC€fRModifõr
;

2163 
q15_t
 *
pTwiddÀARól
;

2164 
q15_t
 *
pTwiddÀBRól
;

2165 
¨m_cf·_ødix4_ö°™˚_q15
 *
pCf·
;

2166 } 
	t¨m_rf·_ö°™˚_q15
;

2174 
uöt32_t
 
f·LíRól
;

2175 
uöt32_t
 
f·LíBy2
;

2176 
uöt8_t
 
if·FœgR
;

2177 
uöt8_t
 
bôRevî£FœgR
;

2178 
uöt32_t
 
twidC€fRModifõr
;

2179 
q31_t
 *
pTwiddÀARól
;

2180 
q31_t
 *
pTwiddÀBRól
;

2181 
¨m_cf·_ødix4_ö°™˚_q31
 *
pCf·
;

2182 } 
	t¨m_rf·_ö°™˚_q31
;

2190 
uöt32_t
 
f·LíRól
;

2191 
uöt16_t
 
f·LíBy2
;

2192 
uöt8_t
 
if·FœgR
;

2193 
uöt8_t
 
bôRevî£FœgR
;

2194 
uöt32_t
 
twidC€fRModifõr
;

2195 
Êﬂt32_t
 *
pTwiddÀARól
;

2196 
Êﬂt32_t
 *
pTwiddÀBRól
;

2197 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2198 } 
	t¨m_rf·_ö°™˚_f32
;

2208 
¨m_rf·_q15
(

2209 c⁄° 
¨m_rf·_ö°™˚_q15
 * 
S
,

2210 
q15_t
 * 
pSrc
,

2211 
q15_t
 * 
pD°
);

2223 
¨m_°©us
 
¨m_rf·_öô_q15
(

2224 
¨m_rf·_ö°™˚_q15
 * 
S
,

2225 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

2226 
uöt32_t
 
f·LíRól
,

2227 
uöt32_t
 
if·FœgR
,

2228 
uöt32_t
 
bôRevî£Fœg
);

2238 
¨m_rf·_q31
(

2239 c⁄° 
¨m_rf·_ö°™˚_q31
 * 
S
,

2240 
q31_t
 * 
pSrc
,

2241 
q31_t
 * 
pD°
);

2253 
¨m_°©us
 
¨m_rf·_öô_q31
(

2254 
¨m_rf·_ö°™˚_q31
 * 
S
,

2255 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

2256 
uöt32_t
 
f·LíRól
,

2257 
uöt32_t
 
if·FœgR
,

2258 
uöt32_t
 
bôRevî£Fœg
);

2270 
¨m_°©us
 
¨m_rf·_öô_f32
(

2271 
¨m_rf·_ö°™˚_f32
 * 
S
,

2272 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2273 
uöt32_t
 
f·LíRól
,

2274 
uöt32_t
 
if·FœgR
,

2275 
uöt32_t
 
bôRevî£Fœg
);

2285 
¨m_rf·_f32
(

2286 c⁄° 
¨m_rf·_ö°™˚_f32
 * 
S
,

2287 
Êﬂt32_t
 * 
pSrc
,

2288 
Êﬂt32_t
 * 
pD°
);

2296 
uöt16_t
 
N
;

2297 
uöt16_t
 
Nby2
;

2298 
Êﬂt32_t
 
n‹mÆize
;

2299 
Êﬂt32_t
 *
pTwiddÀ
;

2300 
Êﬂt32_t
 *
pCosFa˘‹
;

2301 
¨m_rf·_ö°™˚_f32
 *
pRf·
;

2302 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2303 } 
	t¨m_d˘4_ö°™˚_f32
;

2316 
¨m_°©us
 
¨m_d˘4_öô_f32
(

2317 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2318 
¨m_rf·_ö°™˚_f32
 * 
S_RFFT
,

2319 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2320 
uöt16_t
 
N
,

2321 
uöt16_t
 
Nby2
,

2322 
Êﬂt32_t
 
n‹mÆize
);

2332 
¨m_d˘4_f32
(

2333 c⁄° 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2334 
Êﬂt32_t
 * 
pSèã
,

2335 
Êﬂt32_t
 * 
pI∆öeBuf„r
);

2343 
uöt16_t
 
N
;

2344 
uöt16_t
 
Nby2
;

2345 
q31_t
 
n‹mÆize
;

2346 
q31_t
 *
pTwiddÀ
;

2347 
q31_t
 *
pCosFa˘‹
;

2348 
¨m_rf·_ö°™˚_q31
 *
pRf·
;

2349 
¨m_cf·_ødix4_ö°™˚_q31
 *
pCf·
;

2350 } 
	t¨m_d˘4_ö°™˚_q31
;

2363 
¨m_°©us
 
¨m_d˘4_öô_q31
(

2364 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2365 
¨m_rf·_ö°™˚_q31
 * 
S_RFFT
,

2366 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

2367 
uöt16_t
 
N
,

2368 
uöt16_t
 
Nby2
,

2369 
q31_t
 
n‹mÆize
);

2379 
¨m_d˘4_q31
(

2380 c⁄° 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2381 
q31_t
 * 
pSèã
,

2382 
q31_t
 * 
pI∆öeBuf„r
);

2390 
uöt16_t
 
N
;

2391 
uöt16_t
 
Nby2
;

2392 
q15_t
 
n‹mÆize
;

2393 
q15_t
 *
pTwiddÀ
;

2394 
q15_t
 *
pCosFa˘‹
;

2395 
¨m_rf·_ö°™˚_q15
 *
pRf·
;

2396 
¨m_cf·_ødix4_ö°™˚_q15
 *
pCf·
;

2397 } 
	t¨m_d˘4_ö°™˚_q15
;

2410 
¨m_°©us
 
¨m_d˘4_öô_q15
(

2411 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2412 
¨m_rf·_ö°™˚_q15
 * 
S_RFFT
,

2413 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

2414 
uöt16_t
 
N
,

2415 
uöt16_t
 
Nby2
,

2416 
q15_t
 
n‹mÆize
);

2426 
¨m_d˘4_q15
(

2427 c⁄° 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2428 
q15_t
 * 
pSèã
,

2429 
q15_t
 * 
pI∆öeBuf„r
);

2440 
¨m_add_f32
(

2441 
Êﬂt32_t
 * 
pSrcA
,

2442 
Êﬂt32_t
 * 
pSrcB
,

2443 
Êﬂt32_t
 * 
pD°
,

2444 
uöt32_t
 
blockSize
);

2455 
¨m_add_q7
(

2456 
q7_t
 * 
pSrcA
,

2457 
q7_t
 * 
pSrcB
,

2458 
q7_t
 * 
pD°
,

2459 
uöt32_t
 
blockSize
);

2470 
¨m_add_q15
(

2471 
q15_t
 * 
pSrcA
,

2472 
q15_t
 * 
pSrcB
,

2473 
q15_t
 * 
pD°
,

2474 
uöt32_t
 
blockSize
);

2485 
¨m_add_q31
(

2486 
q31_t
 * 
pSrcA
,

2487 
q31_t
 * 
pSrcB
,

2488 
q31_t
 * 
pD°
,

2489 
uöt32_t
 
blockSize
);

2500 
¨m_sub_f32
(

2501 
Êﬂt32_t
 * 
pSrcA
,

2502 
Êﬂt32_t
 * 
pSrcB
,

2503 
Êﬂt32_t
 * 
pD°
,

2504 
uöt32_t
 
blockSize
);

2515 
¨m_sub_q7
(

2516 
q7_t
 * 
pSrcA
,

2517 
q7_t
 * 
pSrcB
,

2518 
q7_t
 * 
pD°
,

2519 
uöt32_t
 
blockSize
);

2530 
¨m_sub_q15
(

2531 
q15_t
 * 
pSrcA
,

2532 
q15_t
 * 
pSrcB
,

2533 
q15_t
 * 
pD°
,

2534 
uöt32_t
 
blockSize
);

2545 
¨m_sub_q31
(

2546 
q31_t
 * 
pSrcA
,

2547 
q31_t
 * 
pSrcB
,

2548 
q31_t
 * 
pD°
,

2549 
uöt32_t
 
blockSize
);

2560 
¨m_sˇÀ_f32
(

2561 
Êﬂt32_t
 * 
pSrc
,

2562 
Êﬂt32_t
 
sˇÀ
,

2563 
Êﬂt32_t
 * 
pD°
,

2564 
uöt32_t
 
blockSize
);

2576 
¨m_sˇÀ_q7
(

2577 
q7_t
 * 
pSrc
,

2578 
q7_t
 
sˇÀFø˘
,

2579 
öt8_t
 
shi·
,

2580 
q7_t
 * 
pD°
,

2581 
uöt32_t
 
blockSize
);

2593 
¨m_sˇÀ_q15
(

2594 
q15_t
 * 
pSrc
,

2595 
q15_t
 
sˇÀFø˘
,

2596 
öt8_t
 
shi·
,

2597 
q15_t
 * 
pD°
,

2598 
uöt32_t
 
blockSize
);

2610 
¨m_sˇÀ_q31
(

2611 
q31_t
 * 
pSrc
,

2612 
q31_t
 
sˇÀFø˘
,

2613 
öt8_t
 
shi·
,

2614 
q31_t
 * 
pD°
,

2615 
uöt32_t
 
blockSize
);

2625 
¨m_abs_q7
(

2626 
q7_t
 * 
pSrc
,

2627 
q7_t
 * 
pD°
,

2628 
uöt32_t
 
blockSize
);

2638 
¨m_abs_f32
(

2639 
Êﬂt32_t
 * 
pSrc
,

2640 
Êﬂt32_t
 * 
pD°
,

2641 
uöt32_t
 
blockSize
);

2651 
¨m_abs_q15
(

2652 
q15_t
 * 
pSrc
,

2653 
q15_t
 * 
pD°
,

2654 
uöt32_t
 
blockSize
);

2664 
¨m_abs_q31
(

2665 
q31_t
 * 
pSrc
,

2666 
q31_t
 * 
pD°
,

2667 
uöt32_t
 
blockSize
);

2678 
¨m_dŸ_¥od_f32
(

2679 
Êﬂt32_t
 * 
pSrcA
,

2680 
Êﬂt32_t
 * 
pSrcB
,

2681 
uöt32_t
 
blockSize
,

2682 
Êﬂt32_t
 * 
ªsu…
);

2693 
¨m_dŸ_¥od_q7
(

2694 
q7_t
 * 
pSrcA
,

2695 
q7_t
 * 
pSrcB
,

2696 
uöt32_t
 
blockSize
,

2697 
q31_t
 * 
ªsu…
);

2708 
¨m_dŸ_¥od_q15
(

2709 
q15_t
 * 
pSrcA
,

2710 
q15_t
 * 
pSrcB
,

2711 
uöt32_t
 
blockSize
,

2712 
q63_t
 * 
ªsu…
);

2723 
¨m_dŸ_¥od_q31
(

2724 
q31_t
 * 
pSrcA
,

2725 
q31_t
 * 
pSrcB
,

2726 
uöt32_t
 
blockSize
,

2727 
q63_t
 * 
ªsu…
);

2738 
¨m_shi·_q7
(

2739 
q7_t
 * 
pSrc
,

2740 
öt8_t
 
shi·Bôs
,

2741 
q7_t
 * 
pD°
,

2742 
uöt32_t
 
blockSize
);

2753 
¨m_shi·_q15
(

2754 
q15_t
 * 
pSrc
,

2755 
öt8_t
 
shi·Bôs
,

2756 
q15_t
 * 
pD°
,

2757 
uöt32_t
 
blockSize
);

2768 
¨m_shi·_q31
(

2769 
q31_t
 * 
pSrc
,

2770 
öt8_t
 
shi·Bôs
,

2771 
q31_t
 * 
pD°
,

2772 
uöt32_t
 
blockSize
);

2783 
¨m_off£t_f32
(

2784 
Êﬂt32_t
 * 
pSrc
,

2785 
Êﬂt32_t
 
off£t
,

2786 
Êﬂt32_t
 * 
pD°
,

2787 
uöt32_t
 
blockSize
);

2798 
¨m_off£t_q7
(

2799 
q7_t
 * 
pSrc
,

2800 
q7_t
 
off£t
,

2801 
q7_t
 * 
pD°
,

2802 
uöt32_t
 
blockSize
);

2813 
¨m_off£t_q15
(

2814 
q15_t
 * 
pSrc
,

2815 
q15_t
 
off£t
,

2816 
q15_t
 * 
pD°
,

2817 
uöt32_t
 
blockSize
);

2828 
¨m_off£t_q31
(

2829 
q31_t
 * 
pSrc
,

2830 
q31_t
 
off£t
,

2831 
q31_t
 * 
pD°
,

2832 
uöt32_t
 
blockSize
);

2842 
¨m_√g©e_f32
(

2843 
Êﬂt32_t
 * 
pSrc
,

2844 
Êﬂt32_t
 * 
pD°
,

2845 
uöt32_t
 
blockSize
);

2855 
¨m_√g©e_q7
(

2856 
q7_t
 * 
pSrc
,

2857 
q7_t
 * 
pD°
,

2858 
uöt32_t
 
blockSize
);

2868 
¨m_√g©e_q15
(

2869 
q15_t
 * 
pSrc
,

2870 
q15_t
 * 
pD°
,

2871 
uöt32_t
 
blockSize
);

2881 
¨m_√g©e_q31
(

2882 
q31_t
 * 
pSrc
,

2883 
q31_t
 * 
pD°
,

2884 
uöt32_t
 
blockSize
);

2892 
¨m_c›y_f32
(

2893 
Êﬂt32_t
 * 
pSrc
,

2894 
Êﬂt32_t
 * 
pD°
,

2895 
uöt32_t
 
blockSize
);

2904 
¨m_c›y_q7
(

2905 
q7_t
 * 
pSrc
,

2906 
q7_t
 * 
pD°
,

2907 
uöt32_t
 
blockSize
);

2916 
¨m_c›y_q15
(

2917 
q15_t
 * 
pSrc
,

2918 
q15_t
 * 
pD°
,

2919 
uöt32_t
 
blockSize
);

2928 
¨m_c›y_q31
(

2929 
q31_t
 * 
pSrc
,

2930 
q31_t
 * 
pD°
,

2931 
uöt32_t
 
blockSize
);

2939 
¨m_fûl_f32
(

2940 
Êﬂt32_t
 
vÆue
,

2941 
Êﬂt32_t
 * 
pD°
,

2942 
uöt32_t
 
blockSize
);

2951 
¨m_fûl_q7
(

2952 
q7_t
 
vÆue
,

2953 
q7_t
 * 
pD°
,

2954 
uöt32_t
 
blockSize
);

2963 
¨m_fûl_q15
(

2964 
q15_t
 
vÆue
,

2965 
q15_t
 * 
pD°
,

2966 
uöt32_t
 
blockSize
);

2975 
¨m_fûl_q31
(

2976 
q31_t
 
vÆue
,

2977 
q31_t
 * 
pD°
,

2978 
uöt32_t
 
blockSize
);

2990 
¨m_c⁄v_f32
(

2991 
Êﬂt32_t
 * 
pSrcA
,

2992 
uöt32_t
 
§cALí
,

2993 
Êﬂt32_t
 * 
pSrcB
,

2994 
uöt32_t
 
§cBLí
,

2995 
Êﬂt32_t
 * 
pD°
);

3007 
¨m_c⁄v_q15
(

3008 
q15_t
 * 
pSrcA
,

3009 
uöt32_t
 
§cALí
,

3010 
q15_t
 * 
pSrcB
,

3011 
uöt32_t
 
§cBLí
,

3012 
q15_t
 * 
pD°
);

3024 
¨m_c⁄v_Á°_q15
(

3025 
q15_t
 * 
pSrcA
,

3026 
uöt32_t
 
§cALí
,

3027 
q15_t
 * 
pSrcB
,

3028 
uöt32_t
 
§cBLí
,

3029 
q15_t
 * 
pD°
);

3041 
¨m_c⁄v_q31
(

3042 
q31_t
 * 
pSrcA
,

3043 
uöt32_t
 
§cALí
,

3044 
q31_t
 * 
pSrcB
,

3045 
uöt32_t
 
§cBLí
,

3046 
q31_t
 * 
pD°
);

3058 
¨m_c⁄v_Á°_q31
(

3059 
q31_t
 * 
pSrcA
,

3060 
uöt32_t
 
§cALí
,

3061 
q31_t
 * 
pSrcB
,

3062 
uöt32_t
 
§cBLí
,

3063 
q31_t
 * 
pD°
);

3075 
¨m_c⁄v_q7
(

3076 
q7_t
 * 
pSrcA
,

3077 
uöt32_t
 
§cALí
,

3078 
q7_t
 * 
pSrcB
,

3079 
uöt32_t
 
§cBLí
,

3080 
q7_t
 * 
pD°
);

3094 
¨m_°©us
 
¨m_c⁄v_∑πül_f32
(

3095 
Êﬂt32_t
 * 
pSrcA
,

3096 
uöt32_t
 
§cALí
,

3097 
Êﬂt32_t
 * 
pSrcB
,

3098 
uöt32_t
 
§cBLí
,

3099 
Êﬂt32_t
 * 
pD°
,

3100 
uöt32_t
 
fú°Index
,

3101 
uöt32_t
 
numPoöts
);

3115 
¨m_°©us
 
¨m_c⁄v_∑πül_q15
(

3116 
q15_t
 * 
pSrcA
,

3117 
uöt32_t
 
§cALí
,

3118 
q15_t
 * 
pSrcB
,

3119 
uöt32_t
 
§cBLí
,

3120 
q15_t
 * 
pD°
,

3121 
uöt32_t
 
fú°Index
,

3122 
uöt32_t
 
numPoöts
);

3136 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q15
(

3137 
q15_t
 * 
pSrcA
,

3138 
uöt32_t
 
§cALí
,

3139 
q15_t
 * 
pSrcB
,

3140 
uöt32_t
 
§cBLí
,

3141 
q15_t
 * 
pD°
,

3142 
uöt32_t
 
fú°Index
,

3143 
uöt32_t
 
numPoöts
);

3157 
¨m_°©us
 
¨m_c⁄v_∑πül_q31
(

3158 
q31_t
 * 
pSrcA
,

3159 
uöt32_t
 
§cALí
,

3160 
q31_t
 * 
pSrcB
,

3161 
uöt32_t
 
§cBLí
,

3162 
q31_t
 * 
pD°
,

3163 
uöt32_t
 
fú°Index
,

3164 
uöt32_t
 
numPoöts
);

3179 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q31
(

3180 
q31_t
 * 
pSrcA
,

3181 
uöt32_t
 
§cALí
,

3182 
q31_t
 * 
pSrcB
,

3183 
uöt32_t
 
§cBLí
,

3184 
q31_t
 * 
pD°
,

3185 
uöt32_t
 
fú°Index
,

3186 
uöt32_t
 
numPoöts
);

3200 
¨m_°©us
 
¨m_c⁄v_∑πül_q7
(

3201 
q7_t
 * 
pSrcA
,

3202 
uöt32_t
 
§cALí
,

3203 
q7_t
 * 
pSrcB
,

3204 
uöt32_t
 
§cBLí
,

3205 
q7_t
 * 
pD°
,

3206 
uöt32_t
 
fú°Index
,

3207 
uöt32_t
 
numPoöts
);

3216 
uöt8_t
 
M
;

3217 
uöt16_t
 
numT≠s
;

3218 
q15_t
 *
pC€ffs
;

3219 
q15_t
 *
pSèã
;

3220 } 
	t¨m_fú_decim©e_ö°™˚_q15
;

3228 
uöt8_t
 
M
;

3229 
uöt16_t
 
numT≠s
;

3230 
q31_t
 *
pC€ffs
;

3231 
q31_t
 *
pSèã
;

3233 } 
	t¨m_fú_decim©e_ö°™˚_q31
;

3241 
uöt8_t
 
M
;

3242 
uöt16_t
 
numT≠s
;

3243 
Êﬂt32_t
 *
pC€ffs
;

3244 
Êﬂt32_t
 *
pSèã
;

3246 } 
	t¨m_fú_decim©e_ö°™˚_f32
;

3259 
¨m_fú_decim©e_f32
(

3260 c⁄° 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3261 
Êﬂt32_t
 * 
pSrc
,

3262 
Êﬂt32_t
 * 
pD°
,

3263 
uöt32_t
 
blockSize
);

3278 
¨m_°©us
 
¨m_fú_decim©e_öô_f32
(

3279 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3280 
uöt16_t
 
numT≠s
,

3281 
uöt8_t
 
M
,

3282 
Êﬂt32_t
 * 
pC€ffs
,

3283 
Êﬂt32_t
 * 
pSèã
,

3284 
uöt32_t
 
blockSize
);

3295 
¨m_fú_decim©e_q15
(

3296 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3297 
q15_t
 * 
pSrc
,

3298 
q15_t
 * 
pD°
,

3299 
uöt32_t
 
blockSize
);

3310 
¨m_fú_decim©e_Á°_q15
(

3311 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3312 
q15_t
 * 
pSrc
,

3313 
q15_t
 * 
pD°
,

3314 
uöt32_t
 
blockSize
);

3330 
¨m_°©us
 
¨m_fú_decim©e_öô_q15
(

3331 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3332 
uöt16_t
 
numT≠s
,

3333 
uöt8_t
 
M
,

3334 
q15_t
 * 
pC€ffs
,

3335 
q15_t
 * 
pSèã
,

3336 
uöt32_t
 
blockSize
);

3347 
¨m_fú_decim©e_q31
(

3348 c⁄° 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3349 
q31_t
 * 
pSrc
,

3350 
q31_t
 * 
pD°
,

3351 
uöt32_t
 
blockSize
);

3362 
¨m_fú_decim©e_Á°_q31
(

3363 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3364 
q31_t
 * 
pSrc
,

3365 
q31_t
 * 
pD°
,

3366 
uöt32_t
 
blockSize
);

3381 
¨m_°©us
 
¨m_fú_decim©e_öô_q31
(

3382 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3383 
uöt16_t
 
numT≠s
,

3384 
uöt8_t
 
M
,

3385 
q31_t
 * 
pC€ffs
,

3386 
q31_t
 * 
pSèã
,

3387 
uöt32_t
 
blockSize
);

3397 
uöt8_t
 
L
;

3398 
uöt16_t
 
pha£Lígth
;

3399 
q15_t
 *
pC€ffs
;

3400 
q15_t
 *
pSèã
;

3401 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q15
;

3409 
uöt8_t
 
L
;

3410 
uöt16_t
 
pha£Lígth
;

3411 
q31_t
 *
pC€ffs
;

3412 
q31_t
 *
pSèã
;

3413 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q31
;

3421 
uöt8_t
 
L
;

3422 
uöt16_t
 
pha£Lígth
;

3423 
Êﬂt32_t
 *
pC€ffs
;

3424 
Êﬂt32_t
 *
pSèã
;

3425 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_f32
;

3437 
¨m_fú_öãΩﬁ©e_q15
(

3438 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3439 
q15_t
 * 
pSrc
,

3440 
q15_t
 * 
pD°
,

3441 
uöt32_t
 
blockSize
);

3456 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q15
(

3457 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3458 
uöt8_t
 
L
,

3459 
uöt16_t
 
numT≠s
,

3460 
q15_t
 * 
pC€ffs
,

3461 
q15_t
 * 
pSèã
,

3462 
uöt32_t
 
blockSize
);

3473 
¨m_fú_öãΩﬁ©e_q31
(

3474 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3475 
q31_t
 * 
pSrc
,

3476 
q31_t
 * 
pD°
,

3477 
uöt32_t
 
blockSize
);

3491 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q31
(

3492 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3493 
uöt8_t
 
L
,

3494 
uöt16_t
 
numT≠s
,

3495 
q31_t
 * 
pC€ffs
,

3496 
q31_t
 * 
pSèã
,

3497 
uöt32_t
 
blockSize
);

3509 
¨m_fú_öãΩﬁ©e_f32
(

3510 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3511 
Êﬂt32_t
 * 
pSrc
,

3512 
Êﬂt32_t
 * 
pD°
,

3513 
uöt32_t
 
blockSize
);

3527 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_f32
(

3528 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3529 
uöt8_t
 
L
,

3530 
uöt16_t
 
numT≠s
,

3531 
Êﬂt32_t
 * 
pC€ffs
,

3532 
Êﬂt32_t
 * 
pSèã
,

3533 
uöt32_t
 
blockSize
);

3541 
uöt8_t
 
numSèges
;

3542 
q63_t
 *
pSèã
;

3543 
q31_t
 *
pC€ffs
;

3544 
uöt8_t
 
po°Shi·
;

3546 } 
	t¨m_biquad_ˇs_df1_32x64_ös_q31
;

3557 
¨m_biquad_ˇs_df1_32x64_q31
(

3558 c⁄° 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3559 
q31_t
 * 
pSrc
,

3560 
q31_t
 * 
pD°
,

3561 
uöt32_t
 
blockSize
);

3573 
¨m_biquad_ˇs_df1_32x64_öô_q31
(

3574 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3575 
uöt8_t
 
numSèges
,

3576 
q31_t
 * 
pC€ffs
,

3577 
q63_t
 * 
pSèã
,

3578 
uöt8_t
 
po°Shi·
);

3588 
uöt8_t
 
numSèges
;

3589 
Êﬂt32_t
 *
pSèã
;

3590 
Êﬂt32_t
 *
pC€ffs
;

3591 } 
	t¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
;

3603 
¨m_biquad_ˇsˇde_df2T_f32
(

3604 c⁄° 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3605 
Êﬂt32_t
 * 
pSrc
,

3606 
Êﬂt32_t
 * 
pD°
,

3607 
uöt32_t
 
blockSize
);

3619 
¨m_biquad_ˇsˇde_df2T_öô_f32
(

3620 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3621 
uöt8_t
 
numSèges
,

3622 
Êﬂt32_t
 * 
pC€ffs
,

3623 
Êﬂt32_t
 * 
pSèã
);

3633 
uöt16_t
 
numSèges
;

3634 
q15_t
 *
pSèã
;

3635 
q15_t
 *
pC€ffs
;

3636 } 
	t¨m_fú_œâi˚_ö°™˚_q15
;

3644 
uöt16_t
 
numSèges
;

3645 
q31_t
 *
pSèã
;

3646 
q31_t
 *
pC€ffs
;

3647 } 
	t¨m_fú_œâi˚_ö°™˚_q31
;

3655 
uöt16_t
 
numSèges
;

3656 
Êﬂt32_t
 *
pSèã
;

3657 
Êﬂt32_t
 *
pC€ffs
;

3658 } 
	t¨m_fú_œâi˚_ö°™˚_f32
;

3669 
¨m_fú_œâi˚_öô_q15
(

3670 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3671 
uöt16_t
 
numSèges
,

3672 
q15_t
 * 
pC€ffs
,

3673 
q15_t
 * 
pSèã
);

3684 
¨m_fú_œâi˚_q15
(

3685 c⁄° 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3686 
q15_t
 * 
pSrc
,

3687 
q15_t
 * 
pD°
,

3688 
uöt32_t
 
blockSize
);

3699 
¨m_fú_œâi˚_öô_q31
(

3700 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

3701 
uöt16_t
 
numSèges
,

3702 
q31_t
 * 
pC€ffs
,

3703 
q31_t
 * 
pSèã
);

3715 
¨m_fú_œâi˚_q31
(

3716 c⁄° 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

3717 
q31_t
 * 
pSrc
,

3718 
q31_t
 * 
pD°
,

3719 
uöt32_t
 
blockSize
);

3730 
¨m_fú_œâi˚_öô_f32
(

3731 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

3732 
uöt16_t
 
numSèges
,

3733 
Êﬂt32_t
 * 
pC€ffs
,

3734 
Êﬂt32_t
 * 
pSèã
);

3745 
¨m_fú_œâi˚_f32
(

3746 c⁄° 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

3747 
Êﬂt32_t
 * 
pSrc
,

3748 
Êﬂt32_t
 * 
pD°
,

3749 
uöt32_t
 
blockSize
);

3756 
uöt16_t
 
numSèges
;

3757 
q15_t
 *
pSèã
;

3758 
q15_t
 *
pkC€ffs
;

3759 
q15_t
 *
pvC€ffs
;

3760 } 
	t¨m_iú_œâi˚_ö°™˚_q15
;

3767 
uöt16_t
 
numSèges
;

3768 
q31_t
 *
pSèã
;

3769 
q31_t
 *
pkC€ffs
;

3770 
q31_t
 *
pvC€ffs
;

3771 } 
	t¨m_iú_œâi˚_ö°™˚_q31
;

3778 
uöt16_t
 
numSèges
;

3779 
Êﬂt32_t
 *
pSèã
;

3780 
Êﬂt32_t
 *
pkC€ffs
;

3781 
Êﬂt32_t
 *
pvC€ffs
;

3782 } 
	t¨m_iú_œâi˚_ö°™˚_f32
;

3793 
¨m_iú_œâi˚_f32
(

3794 c⁄° 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

3795 
Êﬂt32_t
 * 
pSrc
,

3796 
Êﬂt32_t
 * 
pD°
,

3797 
uöt32_t
 
blockSize
);

3810 
¨m_iú_œâi˚_öô_f32
(

3811 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

3812 
uöt16_t
 
numSèges
,

3813 
Êﬂt32_t
 *
pkC€ffs
,

3814 
Êﬂt32_t
 *
pvC€ffs
,

3815 
Êﬂt32_t
 *
pSèã
,

3816 
uöt32_t
 
blockSize
);

3828 
¨m_iú_œâi˚_q31
(

3829 c⁄° 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

3830 
q31_t
 * 
pSrc
,

3831 
q31_t
 * 
pD°
,

3832 
uöt32_t
 
blockSize
);

3846 
¨m_iú_œâi˚_öô_q31
(

3847 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

3848 
uöt16_t
 
numSèges
,

3849 
q31_t
 *
pkC€ffs
,

3850 
q31_t
 *
pvC€ffs
,

3851 
q31_t
 *
pSèã
,

3852 
uöt32_t
 
blockSize
);

3864 
¨m_iú_œâi˚_q15
(

3865 c⁄° 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

3866 
q15_t
 * 
pSrc
,

3867 
q15_t
 * 
pD°
,

3868 
uöt32_t
 
blockSize
);

3882 
¨m_iú_œâi˚_öô_q15
(

3883 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

3884 
uöt16_t
 
numSèges
,

3885 
q15_t
 *
pkC€ffs
,

3886 
q15_t
 *
pvC€ffs
,

3887 
q15_t
 *
pSèã
,

3888 
uöt32_t
 
blockSize
);

3896 
uöt16_t
 
numT≠s
;

3897 
Êﬂt32_t
 *
pSèã
;

3898 
Êﬂt32_t
 *
pC€ffs
;

3899 
Êﬂt32_t
 
mu
;

3900 } 
	t¨m_lms_ö°™˚_f32
;

3913 
¨m_lms_f32
(

3914 c⁄° 
¨m_lms_ö°™˚_f32
 * 
S
,

3915 
Êﬂt32_t
 * 
pSrc
,

3916 
Êﬂt32_t
 * 
pRef
,

3917 
Êﬂt32_t
 * 
pOut
,

3918 
Êﬂt32_t
 * 
pEº
,

3919 
uöt32_t
 
blockSize
);

3932 
¨m_lms_öô_f32
(

3933 
¨m_lms_ö°™˚_f32
 * 
S
,

3934 
uöt16_t
 
numT≠s
,

3935 
Êﬂt32_t
 * 
pC€ffs
,

3936 
Êﬂt32_t
 * 
pSèã
,

3937 
Êﬂt32_t
 
mu
,

3938 
uöt32_t
 
blockSize
);

3946 
uöt16_t
 
numT≠s
;

3947 
q15_t
 *
pSèã
;

3948 
q15_t
 *
pC€ffs
;

3949 
q15_t
 
mu
;

3950 
uöt32_t
 
po°Shi·
;

3951 } 
	t¨m_lms_ö°™˚_q15
;

3966 
¨m_lms_öô_q15
(

3967 
¨m_lms_ö°™˚_q15
 * 
S
,

3968 
uöt16_t
 
numT≠s
,

3969 
q15_t
 * 
pC€ffs
,

3970 
q15_t
 * 
pSèã
,

3971 
q15_t
 
mu
,

3972 
uöt32_t
 
blockSize
,

3973 
uöt32_t
 
po°Shi·
);

3986 
¨m_lms_q15
(

3987 c⁄° 
¨m_lms_ö°™˚_q15
 * 
S
,

3988 
q15_t
 * 
pSrc
,

3989 
q15_t
 * 
pRef
,

3990 
q15_t
 * 
pOut
,

3991 
q15_t
 * 
pEº
,

3992 
uöt32_t
 
blockSize
);

4001 
uöt16_t
 
numT≠s
;

4002 
q31_t
 *
pSèã
;

4003 
q31_t
 *
pC€ffs
;

4004 
q31_t
 
mu
;

4005 
uöt32_t
 
po°Shi·
;

4007 } 
	t¨m_lms_ö°™˚_q31
;

4020 
¨m_lms_q31
(

4021 c⁄° 
¨m_lms_ö°™˚_q31
 * 
S
,

4022 
q31_t
 * 
pSrc
,

4023 
q31_t
 * 
pRef
,

4024 
q31_t
 * 
pOut
,

4025 
q31_t
 * 
pEº
,

4026 
uöt32_t
 
blockSize
);

4040 
¨m_lms_öô_q31
(

4041 
¨m_lms_ö°™˚_q31
 * 
S
,

4042 
uöt16_t
 
numT≠s
,

4043 
q31_t
 *
pC€ffs
,

4044 
q31_t
 *
pSèã
,

4045 
q31_t
 
mu
,

4046 
uöt32_t
 
blockSize
,

4047 
uöt32_t
 
po°Shi·
);

4055 
uöt16_t
 
numT≠s
;

4056 
Êﬂt32_t
 *
pSèã
;

4057 
Êﬂt32_t
 *
pC€ffs
;

4058 
Êﬂt32_t
 
mu
;

4059 
Êﬂt32_t
 
íîgy
;

4060 
Êﬂt32_t
 
x0
;

4061 } 
	t¨m_lms_n‹m_ö°™˚_f32
;

4074 
¨m_lms_n‹m_f32
(

4075 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4076 
Êﬂt32_t
 * 
pSrc
,

4077 
Êﬂt32_t
 * 
pRef
,

4078 
Êﬂt32_t
 * 
pOut
,

4079 
Êﬂt32_t
 * 
pEº
,

4080 
uöt32_t
 
blockSize
);

4093 
¨m_lms_n‹m_öô_f32
(

4094 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4095 
uöt16_t
 
numT≠s
,

4096 
Êﬂt32_t
 * 
pC€ffs
,

4097 
Êﬂt32_t
 * 
pSèã
,

4098 
Êﬂt32_t
 
mu
,

4099 
uöt32_t
 
blockSize
);

4107 
uöt16_t
 
numT≠s
;

4108 
q31_t
 *
pSèã
;

4109 
q31_t
 *
pC€ffs
;

4110 
q31_t
 
mu
;

4111 
uöt8_t
 
po°Shi·
;

4112 
q31_t
 *
ªcùTabÀ
;

4113 
q31_t
 
íîgy
;

4114 
q31_t
 
x0
;

4115 } 
	t¨m_lms_n‹m_ö°™˚_q31
;

4128 
¨m_lms_n‹m_q31
(

4129 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4130 
q31_t
 * 
pSrc
,

4131 
q31_t
 * 
pRef
,

4132 
q31_t
 * 
pOut
,

4133 
q31_t
 * 
pEº
,

4134 
uöt32_t
 
blockSize
);

4148 
¨m_lms_n‹m_öô_q31
(

4149 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4150 
uöt16_t
 
numT≠s
,

4151 
q31_t
 * 
pC€ffs
,

4152 
q31_t
 * 
pSèã
,

4153 
q31_t
 
mu
,

4154 
uöt32_t
 
blockSize
,

4155 
uöt8_t
 
po°Shi·
);

4163 
uöt16_t
 
numT≠s
;

4164 
q15_t
 *
pSèã
;

4165 
q15_t
 *
pC€ffs
;

4166 
q15_t
 
mu
;

4167 
uöt8_t
 
po°Shi·
;

4168 
q15_t
 *
ªcùTabÀ
;

4169 
q15_t
 
íîgy
;

4170 
q15_t
 
x0
;

4171 } 
	t¨m_lms_n‹m_ö°™˚_q15
;

4184 
¨m_lms_n‹m_q15
(

4185 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4186 
q15_t
 * 
pSrc
,

4187 
q15_t
 * 
pRef
,

4188 
q15_t
 * 
pOut
,

4189 
q15_t
 * 
pEº
,

4190 
uöt32_t
 
blockSize
);

4205 
¨m_lms_n‹m_öô_q15
(

4206 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4207 
uöt16_t
 
numT≠s
,

4208 
q15_t
 * 
pC€ffs
,

4209 
q15_t
 * 
pSèã
,

4210 
q15_t
 
mu
,

4211 
uöt32_t
 
blockSize
,

4212 
uöt8_t
 
po°Shi·
);

4224 
¨m_c‹ªœã_f32
(

4225 
Êﬂt32_t
 * 
pSrcA
,

4226 
uöt32_t
 
§cALí
,

4227 
Êﬂt32_t
 * 
pSrcB
,

4228 
uöt32_t
 
§cBLí
,

4229 
Êﬂt32_t
 * 
pD°
);

4241 
¨m_c‹ªœã_q15
(

4242 
q15_t
 * 
pSrcA
,

4243 
uöt32_t
 
§cALí
,

4244 
q15_t
 * 
pSrcB
,

4245 
uöt32_t
 
§cBLí
,

4246 
q15_t
 * 
pD°
);

4258 
¨m_c‹ªœã_Á°_q15
(

4259 
q15_t
 * 
pSrcA
,

4260 
uöt32_t
 
§cALí
,

4261 
q15_t
 * 
pSrcB
,

4262 
uöt32_t
 
§cBLí
,

4263 
q15_t
 * 
pD°
);

4275 
¨m_c‹ªœã_q31
(

4276 
q31_t
 * 
pSrcA
,

4277 
uöt32_t
 
§cALí
,

4278 
q31_t
 * 
pSrcB
,

4279 
uöt32_t
 
§cBLí
,

4280 
q31_t
 * 
pD°
);

4292 
¨m_c‹ªœã_Á°_q31
(

4293 
q31_t
 * 
pSrcA
,

4294 
uöt32_t
 
§cALí
,

4295 
q31_t
 * 
pSrcB
,

4296 
uöt32_t
 
§cBLí
,

4297 
q31_t
 * 
pD°
);

4309 
¨m_c‹ªœã_q7
(

4310 
q7_t
 * 
pSrcA
,

4311 
uöt32_t
 
§cALí
,

4312 
q7_t
 * 
pSrcB
,

4313 
uöt32_t
 
§cBLí
,

4314 
q7_t
 * 
pD°
);

4321 
uöt16_t
 
numT≠s
;

4322 
uöt16_t
 
°©eIndex
;

4323 
Êﬂt32_t
 *
pSèã
;

4324 
Êﬂt32_t
 *
pC€ffs
;

4325 
uöt16_t
 
maxDñay
;

4326 
öt32_t
 *
pT≠Dñay
;

4327 } 
	t¨m_fú_•¨£_ö°™˚_f32
;

4335 
uöt16_t
 
numT≠s
;

4336 
uöt16_t
 
°©eIndex
;

4337 
q31_t
 *
pSèã
;

4338 
q31_t
 *
pC€ffs
;

4339 
uöt16_t
 
maxDñay
;

4340 
öt32_t
 *
pT≠Dñay
;

4341 } 
	t¨m_fú_•¨£_ö°™˚_q31
;

4349 
uöt16_t
 
numT≠s
;

4350 
uöt16_t
 
°©eIndex
;

4351 
q15_t
 *
pSèã
;

4352 
q15_t
 *
pC€ffs
;

4353 
uöt16_t
 
maxDñay
;

4354 
öt32_t
 *
pT≠Dñay
;

4355 } 
	t¨m_fú_•¨£_ö°™˚_q15
;

4363 
uöt16_t
 
numT≠s
;

4364 
uöt16_t
 
°©eIndex
;

4365 
q7_t
 *
pSèã
;

4366 
q7_t
 *
pC€ffs
;

4367 
uöt16_t
 
maxDñay
;

4368 
öt32_t
 *
pT≠Dñay
;

4369 } 
	t¨m_fú_•¨£_ö°™˚_q7
;

4381 
¨m_fú_•¨£_f32
(

4382 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4383 
Êﬂt32_t
 * 
pSrc
,

4384 
Êﬂt32_t
 * 
pD°
,

4385 
Êﬂt32_t
 * 
pS¸©chIn
,

4386 
uöt32_t
 
blockSize
);

4400 
¨m_fú_•¨£_öô_f32
(

4401 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4402 
uöt16_t
 
numT≠s
,

4403 
Êﬂt32_t
 * 
pC€ffs
,

4404 
Êﬂt32_t
 * 
pSèã
,

4405 
öt32_t
 * 
pT≠Dñay
,

4406 
uöt16_t
 
maxDñay
,

4407 
uöt32_t
 
blockSize
);

4419 
¨m_fú_•¨£_q31
(

4420 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4421 
q31_t
 * 
pSrc
,

4422 
q31_t
 * 
pD°
,

4423 
q31_t
 * 
pS¸©chIn
,

4424 
uöt32_t
 
blockSize
);

4438 
¨m_fú_•¨£_öô_q31
(

4439 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4440 
uöt16_t
 
numT≠s
,

4441 
q31_t
 * 
pC€ffs
,

4442 
q31_t
 * 
pSèã
,

4443 
öt32_t
 * 
pT≠Dñay
,

4444 
uöt16_t
 
maxDñay
,

4445 
uöt32_t
 
blockSize
);

4458 
¨m_fú_•¨£_q15
(

4459 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4460 
q15_t
 * 
pSrc
,

4461 
q15_t
 * 
pD°
,

4462 
q15_t
 * 
pS¸©chIn
,

4463 
q31_t
 * 
pS¸©chOut
,

4464 
uöt32_t
 
blockSize
);

4479 
¨m_fú_•¨£_öô_q15
(

4480 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4481 
uöt16_t
 
numT≠s
,

4482 
q15_t
 * 
pC€ffs
,

4483 
q15_t
 * 
pSèã
,

4484 
öt32_t
 * 
pT≠Dñay
,

4485 
uöt16_t
 
maxDñay
,

4486 
uöt32_t
 
blockSize
);

4499 
¨m_fú_•¨£_q7
(

4500 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4501 
q7_t
 * 
pSrc
,

4502 
q7_t
 * 
pD°
,

4503 
q7_t
 * 
pS¸©chIn
,

4504 
q31_t
 * 
pS¸©chOut
,

4505 
uöt32_t
 
blockSize
);

4519 
¨m_fú_•¨£_öô_q7
(

4520 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4521 
uöt16_t
 
numT≠s
,

4522 
q7_t
 * 
pC€ffs
,

4523 
q7_t
 * 
pSèã
,

4524 
öt32_t
 *
pT≠Dñay
,

4525 
uöt16_t
 
maxDñay
,

4526 
uöt32_t
 
blockSize
);

4537 
¨m_sö_cos_f32
(

4538 
Êﬂt32_t
 
thëa
,

4539 
Êﬂt32_t
 *
pSöVÆ
,

4540 
Êﬂt32_t
 *
pCcosVÆ
);

4550 
¨m_sö_cos_q31
(

4551 
q31_t
 
thëa
,

4552 
q31_t
 *
pSöVÆ
,

4553 
q31_t
 *
pCosVÆ
);

4564 
¨m_cm∂x_c⁄j_f32
(

4565 
Êﬂt32_t
 * 
pSrc
,

4566 
Êﬂt32_t
 * 
pD°
,

4567 
uöt32_t
 
numSam∂es
);

4577 
¨m_cm∂x_c⁄j_q31
(

4578 
q31_t
 * 
pSrc
,

4579 
q31_t
 * 
pD°
,

4580 
uöt32_t
 
numSam∂es
);

4590 
¨m_cm∂x_c⁄j_q15
(

4591 
q15_t
 * 
pSrc
,

4592 
q15_t
 * 
pD°
,

4593 
uöt32_t
 
numSam∂es
);

4605 
¨m_cm∂x_mag_squ¨ed_f32
(

4606 
Êﬂt32_t
 * 
pSrc
,

4607 
Êﬂt32_t
 * 
pD°
,

4608 
uöt32_t
 
numSam∂es
);

4618 
¨m_cm∂x_mag_squ¨ed_q31
(

4619 
q31_t
 * 
pSrc
,

4620 
q31_t
 * 
pD°
,

4621 
uöt32_t
 
numSam∂es
);

4631 
¨m_cm∂x_mag_squ¨ed_q15
(

4632 
q15_t
 * 
pSrc
,

4633 
q15_t
 * 
pD°
,

4634 
uöt32_t
 
numSam∂es
);

4711 
__INLINE
 
Êﬂt32_t
 
¨m_pid_f32
(

4712 
¨m_pid_ö°™˚_f32
 * 
S
,

4713 
Êﬂt32_t
 
ö
)

4715 
Êﬂt32_t
 
out
;

4718 
out
 = (
S
->
A0
 * 
ö
) +

4719 (
S
->
A1
 * S->
°©e
[0]Ë+ (S->
A2
 * S->state[1]) + (S->state[2]);

4722 
S
->
°©e
[1] = S->state[0];

4723 
S
->
°©e
[0] = 
ö
;

4724 
S
->
°©e
[2] = 
out
;

4727  (
out
);

4746 
__INLINE
 
q31_t
 
¨m_pid_q31
(

4747 
¨m_pid_ö°™˚_q31
 * 
S
,

4748 
q31_t
 
ö
)

4750 
q63_t
 
acc
;

4751 
q31_t
 
out
;

4754 
acc
 = (
q63_t
Ë
S
->
A0
 * 
ö
;

4757 
acc
 +(
q63_t
Ë
S
->
A1
 * S->
°©e
[0];

4760 
acc
 +(
q63_t
Ë
S
->
A2
 * S->
°©e
[1];

4763 
out
 = (
q31_t
Ë(
acc
 >> 31u);

4766 
out
 +
S
->
°©e
[2];

4769 
S
->
°©e
[1] = S->state[0];

4770 
S
->
°©e
[0] = 
ö
;

4771 
S
->
°©e
[2] = 
out
;

4774  (
out
);

4794 
__INLINE
 
q15_t
 
¨m_pid_q15
(

4795 
¨m_pid_ö°™˚_q15
 * 
S
,

4796 
q15_t
 
ö
)

4798 
q63_t
 
acc
;

4799 
q15_t
 
out
;

4803 #ifde‡
ARM_MATH_CM0


4806 
acc
 = ((
q31_t
Ë
S
->
A0
 )* 
ö
 ;

4811 
acc
 = (
q31_t
Ë
__SMUAD
(
S
->
A0
, 
ö
);

4815 #ifde‡
ARM_MATH_CM0


4818 
acc
 +(
q31_t
Ë
S
->
A1
 * S->
°©e
[0] ;

4819 
acc
 +(
q31_t
Ë
S
->
A2
 * S->
°©e
[1] ;

4824 
acc
 = 
__SMLALD
(
S
->
A1
, (
q31_t
)
__SIMD32
(S->
°©e
),ácc);

4829 
acc
 +(
q31_t
Ë
S
->
°©e
[2] << 15;

4832 
out
 = (
q15_t
Ë(
__SSAT
((
acc
 >> 15), 16));

4835 
S
->
°©e
[1] = S->state[0];

4836 
S
->
°©e
[0] = 
ö
;

4837 
S
->
°©e
[2] = 
out
;

4840  (
out
);

4857 
¨m_°©us
 
¨m_m©_övî£_f32
(

4858 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
§c
,

4859 
¨m_m©rix_ö°™˚_f32
 * 
d°
);

4905 
__INLINE
 
¨m_˛¨ke_f32
(

4906 
Êﬂt32_t
 
Ia
,

4907 
Êﬂt32_t
 
Ib
,

4908 
Êﬂt32_t
 * 
pIÆpha
,

4909 
Êﬂt32_t
 * 
pIbëa
)

4912 *
pIÆpha
 = 
Ia
;

4915 *
pIbëa
 = ((
Êﬂt32_t
Ë0.57735026919 * 
Ia
 + (Êﬂt32_tË1.15470053838 * 
Ib
);

4934 
__INLINE
 
¨m_˛¨ke_q31
(

4935 
q31_t
 
Ia
,

4936 
q31_t
 
Ib
,

4937 
q31_t
 * 
pIÆpha
,

4938 
q31_t
 * 
pIbëa
)

4940 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

4943 *
pIÆpha
 = 
Ia
;

4946 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë
Ia
 * 0x24F34E8B) >> 30);

4949 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë
Ib
 * 0x49E69D16) >> 30);

4952 *
pIbëa
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

4966 
¨m_q7_to_q31
(

4967 
q7_t
 * 
pSrc
,

4968 
q31_t
 * 
pD°
,

4969 
uöt32_t
 
blockSize
);

5009 
__INLINE
 
¨m_öv_˛¨ke_f32
(

5010 
Êﬂt32_t
 
IÆpha
,

5011 
Êﬂt32_t
 
Ibëa
,

5012 
Êﬂt32_t
 * 
pIa
,

5013 
Êﬂt32_t
 * 
pIb
)

5016 *
pIa
 = 
IÆpha
;

5019 *
pIb
 = -0.5 * 
IÆpha
 + (
Êﬂt32_t
Ë0.8660254039 *
Ibëa
;

5038 
__INLINE
 
¨m_öv_˛¨ke_q31
(

5039 
q31_t
 
IÆpha
,

5040 
q31_t
 
Ibëa
,

5041 
q31_t
 * 
pIa
,

5042 
q31_t
 * 
pIb
)

5044 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5047 *
pIa
 = 
IÆpha
;

5050 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
) * (0x40000000)) >> 31);

5053 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
) * (0x6ED9EBA1)) >> 31);

5056 *
pIb
 = 
__QSUB
(
¥odu˘2
, 
¥odu˘1
);

5071 
¨m_q7_to_q15
(

5072 
q7_t
 * 
pSrc
,

5073 
q15_t
 * 
pD°
,

5074 
uöt32_t
 
blockSize
);

5125 
__INLINE
 
¨m_∑rk_f32
(

5126 
Êﬂt32_t
 
IÆpha
,

5127 
Êﬂt32_t
 
Ibëa
,

5128 
Êﬂt32_t
 * 
pId
,

5129 
Êﬂt32_t
 * 
pIq
,

5130 
Êﬂt32_t
 
söVÆ
,

5131 
Êﬂt32_t
 
cosVÆ
)

5134 *
pId
 = 
IÆpha
 * 
cosVÆ
 + 
Ibëa
 * 
söVÆ
;

5137 *
pIq
 = -
IÆpha
 * 
söVÆ
 + 
Ibëa
 * 
cosVÆ
;

5159 
__INLINE
 
¨m_∑rk_q31
(

5160 
q31_t
 
IÆpha
,

5161 
q31_t
 
Ibëa
,

5162 
q31_t
 * 
pId
,

5163 
q31_t
 * 
pIq
,

5164 
q31_t
 
söVÆ
,

5165 
q31_t
 
cosVÆ
)

5167 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5168 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5171 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
cosVÆ
)) >> 31);

5174 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
söVÆ
)) >> 31);

5178 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
söVÆ
)) >> 31);

5181 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
cosVÆ
)) >> 31);

5184 *
pId
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

5187 *
pIq
 = 
__QSUB
(
¥odu˘4
, 
¥odu˘3
);

5201 
¨m_q7_to_Êﬂt
(

5202 
q7_t
 * 
pSrc
,

5203 
Êﬂt32_t
 * 
pD°
,

5204 
uöt32_t
 
blockSize
);

5244 
__INLINE
 
¨m_öv_∑rk_f32
(

5245 
Êﬂt32_t
 
Id
,

5246 
Êﬂt32_t
 
Iq
,

5247 
Êﬂt32_t
 * 
pIÆpha
,

5248 
Êﬂt32_t
 * 
pIbëa
,

5249 
Êﬂt32_t
 
söVÆ
,

5250 
Êﬂt32_t
 
cosVÆ
)

5253 *
pIÆpha
 = 
Id
 * 
cosVÆ
 - 
Iq
 * 
söVÆ
;

5256 *
pIbëa
 = 
Id
 * 
söVÆ
 + 
Iq
 * 
cosVÆ
;

5279 
__INLINE
 
¨m_öv_∑rk_q31
(

5280 
q31_t
 
Id
,

5281 
q31_t
 
Iq
,

5282 
q31_t
 * 
pIÆpha
,

5283 
q31_t
 * 
pIbëa
,

5284 
q31_t
 
söVÆ
,

5285 
q31_t
 
cosVÆ
)

5287 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5288 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5291 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
cosVÆ
)) >> 31);

5294 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
söVÆ
)) >> 31);

5298 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
söVÆ
)) >> 31);

5301 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
cosVÆ
)) >> 31);

5304 *
pIÆpha
 = 
__QSUB
(
¥odu˘1
, 
¥odu˘2
);

5307 *
pIbëa
 = 
__QADD
(
¥odu˘4
, 
¥odu˘3
);

5323 
¨m_q31_to_Êﬂt
(

5324 
q31_t
 * 
pSrc
,

5325 
Êﬂt32_t
 * 
pD°
,

5326 
uöt32_t
 
blockSize
);

5377 
__INLINE
 
Êﬂt32_t
 
¨m_löór_öãΩ_f32
(

5378 
¨m_löór_öãΩ_ö°™˚_f32
 * 
S
,

5379 
Êﬂt32_t
 
x
)

5382 
Êﬂt32_t
 
y
;

5383 
Êﬂt32_t
 
x0
, 
x1
;

5384 
Êﬂt32_t
 
y0
, 
y1
;

5385 
Êﬂt32_t
 
xS∑cög
 = 
S
->xSpacing;

5386 
öt32_t
 
i
;

5387 
Êﬂt32_t
 *
pYD©a
 = 
S
->pYData;

5390 
i
 = (
x
 - 
S
->
x1
Ë/ 
xS∑cög
;

5392 if(
i
 < 0)

5395 
y
 = 
pYD©a
[0];

5397 if(
i
 >
S
->
nVÆues
)

5400 
y
 = 
pYD©a
[
S
->
nVÆues
-1];

5405 
x0
 = 
S
->
x1
 + 
i
 * 
xS∑cög
;

5406 
x1
 = 
S
->x1 + (
i
 +1Ë* 
xS∑cög
;

5409 
y0
 = 
pYD©a
[
i
];

5410 
y1
 = 
pYD©a
[
i
 + 1];

5413 
y
 = 
y0
 + (
x
 - 
x0
Ë* ((
y1
 - y0)/(
x1
-x0));

5418  (
y
);

5436 
__INLINE
 
q31_t
 
¨m_löór_öãΩ_q31
(q31_à*
pYD©a
,

5437 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5439 
q31_t
 
y
;

5440 
q31_t
 
y0
, 
y1
;

5441 
q31_t
 
‰a˘
;

5442 
öt32_t
 
ödex
;

5447 
ödex
 = ((
x
 & 0xFFF00000) >> 20);

5449 if(
ödex
 >(
nVÆues
 - 1))

5451 (
pYD©a
[
nVÆues
 - 1]);

5453 if(
ödex
 < 0)

5455 (
pYD©a
[0]);

5462 
‰a˘
 = (
x
 & 0x000FFFFF) << 11;

5465 
y0
 = 
pYD©a
[
ödex
];

5466 
y1
 = 
pYD©a
[
ödex
 + 1u];

5469 
y
 = ((
q31_t
Ë((
q63_t
Ë
y0
 * (0x7FFFFFFF - 
‰a˘
) >> 32));

5472 
y
 +((
q31_t
Ë(((
q63_t
Ë
y1
 * 
‰a˘
) >> 32));

5475  (
y
 << 1u);

5496 
__INLINE
 
q15_t
 
¨m_löór_öãΩ_q15
(q15_à*
pYD©a
, 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5498 
q63_t
 
y
;

5499 
q15_t
 
y0
, 
y1
;

5500 
q31_t
 
‰a˘
;

5501 
öt32_t
 
ödex
;

5506 
ödex
 = ((
x
 & 0xFFF00000) >> 20u);

5508 if(
ödex
 >(
nVÆues
 - 1))

5510 (
pYD©a
[
nVÆues
 - 1]);

5512 if(
ödex
 < 0)

5514 (
pYD©a
[0]);

5520 
‰a˘
 = (
x
 & 0x000FFFFF);

5523 
y0
 = 
pYD©a
[
ödex
];

5524 
y1
 = 
pYD©a
[
ödex
 + 1u];

5527 
y
 = ((
q63_t
Ë
y0
 * (0xFFFFF - 
‰a˘
));

5530 
y
 +((
q63_t
Ë
y1
 * (
‰a˘
));

5533  (
y
 >> 20);

5553 
__INLINE
 
q7_t
 
¨m_löór_öãΩ_q7
(q7_à*
pYD©a
, 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5555 
q31_t
 
y
;

5556 
q7_t
 
y0
, 
y1
;

5557 
q31_t
 
‰a˘
;

5558 
öt32_t
 
ödex
;

5563 
ödex
 = ((
x
 & 0xFFF00000) >> 20u);

5566 if(
ödex
 >(
nVÆues
 - 1))

5568 (
pYD©a
[
nVÆues
 - 1]);

5570 if(
ödex
 < 0)

5572 (
pYD©a
[0]);

5579 
‰a˘
 = (
x
 & 0x000FFFFF);

5582 
y0
 = 
pYD©a
[
ödex
];

5583 
y1
 = 
pYD©a
[
ödex
 + 1u];

5586 
y
 = ((
y0
 * (0xFFFFF - 
‰a˘
)));

5589 
y
 +(
y1
 * 
‰a˘
);

5592  (
y
 >> 20u);

5607 
Êﬂt32_t
 
¨m_sö_f32
(

5608 
Êﬂt32_t
 
x
);

5616 
q31_t
 
¨m_sö_q31
(

5617 
q31_t
 
x
);

5625 
q15_t
 
¨m_sö_q15
(

5626 
q15_t
 
x
);

5634 
Êﬂt32_t
 
¨m_cos_f32
(

5635 
Êﬂt32_t
 
x
);

5643 
q31_t
 
¨m_cos_q31
(

5644 
q31_t
 
x
);

5652 
q15_t
 
¨m_cos_q15
(

5653 
q15_t
 
x
);

5695 
__INLINE
 
¨m_°©us
 
¨m_sqπ_f32
(

5696 
Êﬂt32_t
 
ö
, flﬂt32_à*
pOut
)

5698 if(
ö
 > 0)

5702 #i‡(
__FPU_USED
 =1Ë&& 
deföed
 ( 
__CC_ARM
 )

5703 *
pOut
 = 
__sqπf
(
ö
);

5705 *
pOut
 = 
sqπf
(
ö
);

5708  (
ARM_MATH_SUCCESS
);

5712 *
pOut
 = 0.0f;

5713  (
ARM_MATH_ARGUMENT_ERROR
);

5726 
¨m_°©us
 
¨m_sqπ_q31
(

5727 
q31_t
 
ö
, q31_à*
pOut
);

5736 
¨m_°©us
 
¨m_sqπ_q15
(

5737 
q15_t
 
ö
, q15_à*
pOut
);

5752 
__INLINE
 
¨m_cúcuœrWrôe_f32
(

5753 
öt32_t
 * 
cúcBuf„r
,

5754 
öt32_t
 
L
,

5755 
uöt16_t
 * 
wrôeOff£t
,

5756 
öt32_t
 
buf„rInc
,

5757 c⁄° 
öt32_t
 * 
§c
,

5758 
öt32_t
 
§cInc
,

5759 
uöt32_t
 
blockSize
)

5761 
uöt32_t
 
i
 = 0u;

5762 
öt32_t
 
wOff£t
;

5766 
wOff£t
 = *
wrôeOff£t
;

5769 
i
 = 
blockSize
;

5771 
i
 > 0u)

5774 
cúcBuf„r
[
wOff£t
] = *
§c
;

5777 
§c
 +
§cInc
;

5780 
wOff£t
 +
buf„rInc
;

5781 if(
wOff£t
 >
L
)

5782 
wOff£t
 -
L
;

5785 
i
--;

5789 *
wrôeOff£t
 = 
wOff£t
;

5797 
__INLINE
 
¨m_cúcuœrRód_f32
(

5798 
öt32_t
 * 
cúcBuf„r
,

5799 
öt32_t
 
L
,

5800 
öt32_t
 * 
ªadOff£t
,

5801 
öt32_t
 
buf„rInc
,

5802 
öt32_t
 * 
d°
,

5803 
öt32_t
 * 
d°_ba£
,

5804 
öt32_t
 
d°_Àngth
,

5805 
öt32_t
 
d°Inc
,

5806 
uöt32_t
 
blockSize
)

5808 
uöt32_t
 
i
 = 0u;

5809 
öt32_t
 
rOff£t
, 
d°_íd
;

5813 
rOff£t
 = *
ªadOff£t
;

5814 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

5817 
i
 = 
blockSize
;

5819 
i
 > 0u)

5822 *
d°
 = 
cúcBuf„r
[
rOff£t
];

5825 
d°
 +
d°Inc
;

5827 if(
d°
 =(
öt32_t
 *Ë
d°_íd
)

5829 
d°
 = 
d°_ba£
;

5833 
rOff£t
 +
buf„rInc
;

5835 if(
rOff£t
 >
L
)

5837 
rOff£t
 -
L
;

5841 
i
--;

5845 *
ªadOff£t
 = 
rOff£t
;

5852 
__INLINE
 
¨m_cúcuœrWrôe_q15
(

5853 
q15_t
 * 
cúcBuf„r
,

5854 
öt32_t
 
L
,

5855 
uöt16_t
 * 
wrôeOff£t
,

5856 
öt32_t
 
buf„rInc
,

5857 c⁄° 
q15_t
 * 
§c
,

5858 
öt32_t
 
§cInc
,

5859 
uöt32_t
 
blockSize
)

5861 
uöt32_t
 
i
 = 0u;

5862 
öt32_t
 
wOff£t
;

5866 
wOff£t
 = *
wrôeOff£t
;

5869 
i
 = 
blockSize
;

5871 
i
 > 0u)

5874 
cúcBuf„r
[
wOff£t
] = *
§c
;

5877 
§c
 +
§cInc
;

5880 
wOff£t
 +
buf„rInc
;

5881 if(
wOff£t
 >
L
)

5882 
wOff£t
 -
L
;

5885 
i
--;

5889 *
wrôeOff£t
 = 
wOff£t
;

5897 
__INLINE
 
¨m_cúcuœrRód_q15
(

5898 
q15_t
 * 
cúcBuf„r
,

5899 
öt32_t
 
L
,

5900 
öt32_t
 * 
ªadOff£t
,

5901 
öt32_t
 
buf„rInc
,

5902 
q15_t
 * 
d°
,

5903 
q15_t
 * 
d°_ba£
,

5904 
öt32_t
 
d°_Àngth
,

5905 
öt32_t
 
d°Inc
,

5906 
uöt32_t
 
blockSize
)

5908 
uöt32_t
 
i
 = 0;

5909 
öt32_t
 
rOff£t
, 
d°_íd
;

5913 
rOff£t
 = *
ªadOff£t
;

5915 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

5918 
i
 = 
blockSize
;

5920 
i
 > 0u)

5923 *
d°
 = 
cúcBuf„r
[
rOff£t
];

5926 
d°
 +
d°Inc
;

5928 if(
d°
 =(
q15_t
 *Ë
d°_íd
)

5930 
d°
 = 
d°_ba£
;

5934 
rOff£t
 +
buf„rInc
;

5936 if(
rOff£t
 >
L
)

5938 
rOff£t
 -
L
;

5942 
i
--;

5946 *
ªadOff£t
 = 
rOff£t
;

5954 
__INLINE
 
¨m_cúcuœrWrôe_q7
(

5955 
q7_t
 * 
cúcBuf„r
,

5956 
öt32_t
 
L
,

5957 
uöt16_t
 * 
wrôeOff£t
,

5958 
öt32_t
 
buf„rInc
,

5959 c⁄° 
q7_t
 * 
§c
,

5960 
öt32_t
 
§cInc
,

5961 
uöt32_t
 
blockSize
)

5963 
uöt32_t
 
i
 = 0u;

5964 
öt32_t
 
wOff£t
;

5968 
wOff£t
 = *
wrôeOff£t
;

5971 
i
 = 
blockSize
;

5973 
i
 > 0u)

5976 
cúcBuf„r
[
wOff£t
] = *
§c
;

5979 
§c
 +
§cInc
;

5982 
wOff£t
 +
buf„rInc
;

5983 if(
wOff£t
 >
L
)

5984 
wOff£t
 -
L
;

5987 
i
--;

5991 *
wrôeOff£t
 = 
wOff£t
;

5999 
__INLINE
 
¨m_cúcuœrRód_q7
(

6000 
q7_t
 * 
cúcBuf„r
,

6001 
öt32_t
 
L
,

6002 
öt32_t
 * 
ªadOff£t
,

6003 
öt32_t
 
buf„rInc
,

6004 
q7_t
 * 
d°
,

6005 
q7_t
 * 
d°_ba£
,

6006 
öt32_t
 
d°_Àngth
,

6007 
öt32_t
 
d°Inc
,

6008 
uöt32_t
 
blockSize
)

6010 
uöt32_t
 
i
 = 0;

6011 
öt32_t
 
rOff£t
, 
d°_íd
;

6015 
rOff£t
 = *
ªadOff£t
;

6017 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

6020 
i
 = 
blockSize
;

6022 
i
 > 0u)

6025 *
d°
 = 
cúcBuf„r
[
rOff£t
];

6028 
d°
 +
d°Inc
;

6030 if(
d°
 =(
q7_t
 *Ë
d°_íd
)

6032 
d°
 = 
d°_ba£
;

6036 
rOff£t
 +
buf„rInc
;

6038 if(
rOff£t
 >
L
)

6040 
rOff£t
 -
L
;

6044 
i
--;

6048 *
ªadOff£t
 = 
rOff£t
;

6060 
¨m_powî_q31
(

6061 
q31_t
 * 
pSrc
,

6062 
uöt32_t
 
blockSize
,

6063 
q63_t
 * 
pResu…
);

6073 
¨m_powî_f32
(

6074 
Êﬂt32_t
 * 
pSrc
,

6075 
uöt32_t
 
blockSize
,

6076 
Êﬂt32_t
 * 
pResu…
);

6086 
¨m_powî_q15
(

6087 
q15_t
 * 
pSrc
,

6088 
uöt32_t
 
blockSize
,

6089 
q63_t
 * 
pResu…
);

6099 
¨m_powî_q7
(

6100 
q7_t
 * 
pSrc
,

6101 
uöt32_t
 
blockSize
,

6102 
q31_t
 * 
pResu…
);

6112 
¨m_món_q7
(

6113 
q7_t
 * 
pSrc
,

6114 
uöt32_t
 
blockSize
,

6115 
q7_t
 * 
pResu…
);

6124 
¨m_món_q15
(

6125 
q15_t
 * 
pSrc
,

6126 
uöt32_t
 
blockSize
,

6127 
q15_t
 * 
pResu…
);

6136 
¨m_món_q31
(

6137 
q31_t
 * 
pSrc
,

6138 
uöt32_t
 
blockSize
,

6139 
q31_t
 * 
pResu…
);

6148 
¨m_món_f32
(

6149 
Êﬂt32_t
 * 
pSrc
,

6150 
uöt32_t
 
blockSize
,

6151 
Êﬂt32_t
 * 
pResu…
);

6161 
¨m_v¨_f32
(

6162 
Êﬂt32_t
 * 
pSrc
,

6163 
uöt32_t
 
blockSize
,

6164 
Êﬂt32_t
 * 
pResu…
);

6174 
¨m_v¨_q31
(

6175 
q31_t
 * 
pSrc
,

6176 
uöt32_t
 
blockSize
,

6177 
q63_t
 * 
pResu…
);

6187 
¨m_v¨_q15
(

6188 
q15_t
 * 
pSrc
,

6189 
uöt32_t
 
blockSize
,

6190 
q31_t
 * 
pResu…
);

6200 
¨m_rms_f32
(

6201 
Êﬂt32_t
 * 
pSrc
,

6202 
uöt32_t
 
blockSize
,

6203 
Êﬂt32_t
 * 
pResu…
);

6213 
¨m_rms_q31
(

6214 
q31_t
 * 
pSrc
,

6215 
uöt32_t
 
blockSize
,

6216 
q31_t
 * 
pResu…
);

6226 
¨m_rms_q15
(

6227 
q15_t
 * 
pSrc
,

6228 
uöt32_t
 
blockSize
,

6229 
q15_t
 * 
pResu…
);

6239 
¨m_°d_f32
(

6240 
Êﬂt32_t
 * 
pSrc
,

6241 
uöt32_t
 
blockSize
,

6242 
Êﬂt32_t
 * 
pResu…
);

6252 
¨m_°d_q31
(

6253 
q31_t
 * 
pSrc
,

6254 
uöt32_t
 
blockSize
,

6255 
q31_t
 * 
pResu…
);

6265 
¨m_°d_q15
(

6266 
q15_t
 * 
pSrc
,

6267 
uöt32_t
 
blockSize
,

6268 
q15_t
 * 
pResu…
);

6278 
¨m_cm∂x_mag_f32
(

6279 
Êﬂt32_t
 * 
pSrc
,

6280 
Êﬂt32_t
 * 
pD°
,

6281 
uöt32_t
 
numSam∂es
);

6291 
¨m_cm∂x_mag_q31
(

6292 
q31_t
 * 
pSrc
,

6293 
q31_t
 * 
pD°
,

6294 
uöt32_t
 
numSam∂es
);

6304 
¨m_cm∂x_mag_q15
(

6305 
q15_t
 * 
pSrc
,

6306 
q15_t
 * 
pD°
,

6307 
uöt32_t
 
numSam∂es
);

6319 
¨m_cm∂x_dŸ_¥od_q15
(

6320 
q15_t
 * 
pSrcA
,

6321 
q15_t
 * 
pSrcB
,

6322 
uöt32_t
 
numSam∂es
,

6323 
q31_t
 * 
ªÆResu…
,

6324 
q31_t
 * 
imagResu…
);

6336 
¨m_cm∂x_dŸ_¥od_q31
(

6337 
q31_t
 * 
pSrcA
,

6338 
q31_t
 * 
pSrcB
,

6339 
uöt32_t
 
numSam∂es
,

6340 
q63_t
 * 
ªÆResu…
,

6341 
q63_t
 * 
imagResu…
);

6353 
¨m_cm∂x_dŸ_¥od_f32
(

6354 
Êﬂt32_t
 * 
pSrcA
,

6355 
Êﬂt32_t
 * 
pSrcB
,

6356 
uöt32_t
 
numSam∂es
,

6357 
Êﬂt32_t
 * 
ªÆResu…
,

6358 
Êﬂt32_t
 * 
imagResu…
);

6369 
¨m_cm∂x_mu…_ªÆ_q15
(

6370 
q15_t
 * 
pSrcCm∂x
,

6371 
q15_t
 * 
pSrcRól
,

6372 
q15_t
 * 
pCm∂xD°
,

6373 
uöt32_t
 
numSam∂es
);

6384 
¨m_cm∂x_mu…_ªÆ_q31
(

6385 
q31_t
 * 
pSrcCm∂x
,

6386 
q31_t
 * 
pSrcRól
,

6387 
q31_t
 * 
pCm∂xD°
,

6388 
uöt32_t
 
numSam∂es
);

6399 
¨m_cm∂x_mu…_ªÆ_f32
(

6400 
Êﬂt32_t
 * 
pSrcCm∂x
,

6401 
Êﬂt32_t
 * 
pSrcRól
,

6402 
Êﬂt32_t
 * 
pCm∂xD°
,

6403 
uöt32_t
 
numSam∂es
);

6414 
¨m_mö_q7
(

6415 
q7_t
 * 
pSrc
,

6416 
uöt32_t
 
blockSize
,

6417 
q7_t
 * 
ªsu…
,

6418 
uöt32_t
 * 
ödex
);

6429 
¨m_mö_q15
(

6430 
q15_t
 * 
pSrc
,

6431 
uöt32_t
 
blockSize
,

6432 
q15_t
 * 
pResu…
,

6433 
uöt32_t
 * 
pIndex
);

6443 
¨m_mö_q31
(

6444 
q31_t
 * 
pSrc
,

6445 
uöt32_t
 
blockSize
,

6446 
q31_t
 * 
pResu…
,

6447 
uöt32_t
 * 
pIndex
);

6458 
¨m_mö_f32
(

6459 
Êﬂt32_t
 * 
pSrc
,

6460 
uöt32_t
 
blockSize
,

6461 
Êﬂt32_t
 * 
pResu…
,

6462 
uöt32_t
 * 
pIndex
);

6473 
¨m_max_q7
(

6474 
q7_t
 * 
pSrc
,

6475 
uöt32_t
 
blockSize
,

6476 
q7_t
 * 
pResu…
,

6477 
uöt32_t
 * 
pIndex
);

6488 
¨m_max_q15
(

6489 
q15_t
 * 
pSrc
,

6490 
uöt32_t
 
blockSize
,

6491 
q15_t
 * 
pResu…
,

6492 
uöt32_t
 * 
pIndex
);

6503 
¨m_max_q31
(

6504 
q31_t
 * 
pSrc
,

6505 
uöt32_t
 
blockSize
,

6506 
q31_t
 * 
pResu…
,

6507 
uöt32_t
 * 
pIndex
);

6518 
¨m_max_f32
(

6519 
Êﬂt32_t
 * 
pSrc
,

6520 
uöt32_t
 
blockSize
,

6521 
Êﬂt32_t
 * 
pResu…
,

6522 
uöt32_t
 * 
pIndex
);

6533 
¨m_cm∂x_mu…_cm∂x_q15
(

6534 
q15_t
 * 
pSrcA
,

6535 
q15_t
 * 
pSrcB
,

6536 
q15_t
 * 
pD°
,

6537 
uöt32_t
 
numSam∂es
);

6548 
¨m_cm∂x_mu…_cm∂x_q31
(

6549 
q31_t
 * 
pSrcA
,

6550 
q31_t
 * 
pSrcB
,

6551 
q31_t
 * 
pD°
,

6552 
uöt32_t
 
numSam∂es
);

6563 
¨m_cm∂x_mu…_cm∂x_f32
(

6564 
Êﬂt32_t
 * 
pSrcA
,

6565 
Êﬂt32_t
 * 
pSrcB
,

6566 
Êﬂt32_t
 * 
pD°
,

6567 
uöt32_t
 
numSam∂es
);

6576 
¨m_Êﬂt_to_q31
(

6577 
Êﬂt32_t
 * 
pSrc
,

6578 
q31_t
 * 
pD°
,

6579 
uöt32_t
 
blockSize
);

6588 
¨m_Êﬂt_to_q15
(

6589 
Êﬂt32_t
 * 
pSrc
,

6590 
q15_t
 * 
pD°
,

6591 
uöt32_t
 
blockSize
);

6600 
¨m_Êﬂt_to_q7
(

6601 
Êﬂt32_t
 * 
pSrc
,

6602 
q7_t
 * 
pD°
,

6603 
uöt32_t
 
blockSize
);

6613 
¨m_q31_to_q15
(

6614 
q31_t
 * 
pSrc
,

6615 
q15_t
 * 
pD°
,

6616 
uöt32_t
 
blockSize
);

6625 
¨m_q31_to_q7
(

6626 
q31_t
 * 
pSrc
,

6627 
q7_t
 * 
pD°
,

6628 
uöt32_t
 
blockSize
);

6637 
¨m_q15_to_Êﬂt
(

6638 
q15_t
 * 
pSrc
,

6639 
Êﬂt32_t
 * 
pD°
,

6640 
uöt32_t
 
blockSize
);

6650 
¨m_q15_to_q31
(

6651 
q15_t
 * 
pSrc
,

6652 
q31_t
 * 
pD°
,

6653 
uöt32_t
 
blockSize
);

6663 
¨m_q15_to_q7
(

6664 
q15_t
 * 
pSrc
,

6665 
q7_t
 * 
pD°
,

6666 
uöt32_t
 
blockSize
);

6740 
__INLINE
 
Êﬂt32_t
 
¨m_bûöór_öãΩ_f32
(

6741 c⁄° 
¨m_bûöór_öãΩ_ö°™˚_f32
 * 
S
,

6742 
Êﬂt32_t
 
X
,

6743 
Êﬂt32_t
 
Y
)

6745 
Êﬂt32_t
 
out
;

6746 
Êﬂt32_t
 
f00
, 
f01
, 
f10
, 
f11
;

6747 
Êﬂt32_t
 *
pD©a
 = 
S
->pData;

6748 
öt32_t
 
xIndex
, 
yIndex
, 
ödex
;

6749 
Êﬂt32_t
 
xdiff
, 
ydiff
;

6750 
Êﬂt32_t
 
b1
, 
b2
, 
b3
, 
b4
;

6752 
xIndex
 = (
öt32_t
Ë
X
;

6753 
yIndex
 = (
öt32_t
Ë
Y
;

6757 if(
xIndex
 < 0 || xIndex > (
S
->
numRows
-1Ë|| 
yIndex
 < 0 || yIndex > ( S->
numCﬁs
-1))

6763 
ödex
 = (
xIndex
 - 1Ë+ (
yIndex
-1Ë* 
S
->
numCﬁs
 ;

6767 
f00
 = 
pD©a
[
ödex
];

6768 
f01
 = 
pD©a
[
ödex
 + 1];

6771 
ödex
 = (
xIndex
-1Ë+ (
yIndex
Ë* 
S
->
numCﬁs
;

6775 
f10
 = 
pD©a
[
ödex
];

6776 
f11
 = 
pD©a
[
ödex
 + 1];

6779 
b1
 = 
f00
;

6780 
b2
 = 
f01
 - 
f00
;

6781 
b3
 = 
f10
 - 
f00
;

6782 
b4
 = 
f00
 - 
f01
 - 
f10
 + 
f11
;

6785 
xdiff
 = 
X
 - 
xIndex
;

6788 
ydiff
 = 
Y
 - 
yIndex
;

6791 
out
 = 
b1
 + 
b2
 * 
xdiff
 + 
b3
 * 
ydiff
 + 
b4
 * xdiff * ydiff;

6794  (
out
);

6807 
__INLINE
 
q31_t
 
¨m_bûöór_öãΩ_q31
(

6808 
¨m_bûöór_öãΩ_ö°™˚_q31
 * 
S
,

6809 
q31_t
 
X
,

6810 
q31_t
 
Y
)

6812 
q31_t
 
out
;

6813 
q31_t
 
acc
 = 0;

6814 
q31_t
 
x‰a˘
, 
y‰a˘
;

6815 
q31_t
 
x1
, 
x2
, 
y1
, 
y2
;

6816 
öt32_t
 
rI
, 
cI
;

6817 
q31_t
 *
pYD©a
 = 
S
->
pD©a
;

6818 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6824 
rI
 = ((
X
 & 0xFFF00000) >> 20u);

6829 
cI
 = ((
Y
 & 0xFFF00000) >> 20u);

6833 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6840 
x‰a˘
 = (
X
 & 0x000FFFFF) << 11u;

6843 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6844 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

6848 
y‰a˘
 = (
Y
 & 0x000FFFFF) << 11u;

6851 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

6852 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

6855 
out
 = ((
q31_t
Ë(((
q63_t
Ë
x1
 * (0x7FFFFFFF - 
x‰a˘
)) >> 32));

6856 
acc
 = ((
q31_t
Ë(((
q63_t
Ë
out
 * (0x7FFFFFFF - 
y‰a˘
)) >> 32));

6859 
out
 = ((
q31_t
Ë((
q63_t
Ë
x2
 * (0x7FFFFFFF - 
y‰a˘
) >> 32));

6860 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
x‰a˘
) >> 32));

6863 
out
 = ((
q31_t
Ë((
q63_t
Ë
y1
 * (0x7FFFFFFF - 
x‰a˘
) >> 32));

6864 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

6867 
out
 = ((
q31_t
Ë((
q63_t
Ë
y2
 * (
x‰a˘
) >> 32));

6868 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

6871  (
acc
 << 2u);

6883 
__INLINE
 
q15_t
 
¨m_bûöór_öãΩ_q15
(

6884 
¨m_bûöór_öãΩ_ö°™˚_q15
 * 
S
,

6885 
q31_t
 
X
,

6886 
q31_t
 
Y
)

6888 
q63_t
 
acc
 = 0;

6889 
q31_t
 
out
;

6890 
q15_t
 
x1
, 
x2
, 
y1
, 
y2
;

6891 
q31_t
 
x‰a˘
, 
y‰a˘
;

6892 
öt32_t
 
rI
, 
cI
;

6893 
q15_t
 *
pYD©a
 = 
S
->
pD©a
;

6894 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6899 
rI
 = ((
X
 & 0xFFF00000) >> 20);

6904 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

6908 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6915 
x‰a˘
 = (
X
 & 0x000FFFFF);

6918 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6919 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

6924 
y‰a˘
 = (
Y
 & 0x000FFFFF);

6927 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

6928 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

6934 
out
 = (
q31_t
Ë(((
q63_t
Ë
x1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

6935 
acc
 = ((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
));

6938 
out
 = (
q31_t
Ë(((
q63_t
Ë
x2
 * (0xFFFFF - 
y‰a˘
)) >> 4u);

6939 
acc
 +((
q63_t
Ë
out
 * (
x‰a˘
));

6942 
out
 = (
q31_t
Ë(((
q63_t
Ë
y1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

6943 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

6946 
out
 = (
q31_t
Ë(((
q63_t
Ë
y2
 * (
x‰a˘
)) >> 4u);

6947 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

6951  (
acc
 >> 36);

6963 
__INLINE
 
q7_t
 
¨m_bûöór_öãΩ_q7
(

6964 
¨m_bûöór_öãΩ_ö°™˚_q7
 * 
S
,

6965 
q31_t
 
X
,

6966 
q31_t
 
Y
)

6968 
q63_t
 
acc
 = 0;

6969 
q31_t
 
out
;

6970 
q31_t
 
x‰a˘
, 
y‰a˘
;

6971 
q7_t
 
x1
, 
x2
, 
y1
, 
y2
;

6972 
öt32_t
 
rI
, 
cI
;

6973 
q7_t
 *
pYD©a
 = 
S
->
pD©a
;

6974 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6979 
rI
 = ((
X
 & 0xFFF00000) >> 20);

6984 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

6988 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6995 
x‰a˘
 = (
X
 & 0x000FFFFF);

6998 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6999 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

7004 
y‰a˘
 = (
Y
 & 0x000FFFFF);

7007 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

7008 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

7011 
out
 = ((
x1
 * (0xFFFFF - 
x‰a˘
)));

7012 
acc
 = (((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
)));

7015 
out
 = ((
x2
 * (0xFFFFF - 
y‰a˘
)));

7016 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7019 
out
 = ((
y1
 * (0xFFFFF - 
x‰a˘
)));

7020 
acc
 +(((
q63_t
Ë
out
 * (
y‰a˘
)));

7023 
out
 = ((
y2
 * (
y‰a˘
)));

7024 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7027  (
acc
 >> 40);

7040 #ifdef 
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\cmsis\core_cm4.h

23 #i‡
deföed
 ( 
__ICCARM__
 )

24 #¥agm®
sy°em_ö˛ude


27 #ifde‡
__˝lu•lus


31 #i‚de‡
__CORE_CM4_H_GENERIC


32 
	#__CORE_CM4_H_GENERIC


	)

76 
	#__CM4_CMSIS_VERSION_MAIN
 (0x02Ë

	)

77 
	#__CM4_CMSIS_VERSION_SUB
 (0x10Ë

	)

78 
	#__CM4_CMSIS_VERSION
 ((
__CM4_CMSIS_VERSION_MAIN
 << 16Ë| 
__CM4_CMSIS_VERSION_SUB
Ë

	)

80 
	#__CORTEX_M
 (0x04Ë

	)

83 #i‡ 
deföed
 ( 
__CC_ARM
 )

84 
	#__ASM
 
__asm


	)

85 
	#__INLINE
 
__ölöe


	)

87 #ñi‡
deföed
 ( 
__ICCARM__
 )

88 
	#__ASM
 
__asm


	)

89 
	#__INLINE
 
ölöe


	)

91 #ñi‡
deföed
 ( 
__GNUC__
 )

92 
	#__ASM
 
__asm


	)

93 
	#__INLINE
 
ölöe


	)

95 #ñi‡
deföed
 ( 
__TASKING__
 )

96 
	#__ASM
 
__asm


	)

97 
	#__INLINE
 
ölöe


	)

102 #i‡
deföed
 ( 
__CC_ARM
 )

103 #i‡
deföed
 
__TARGET_FPU_VFP


104 #i‡(
__FPU_PRESENT
 == 1)

105 
	#__FPU_USED
 1

	)

108 
	#__FPU_USED
 0

	)

111 
	#__FPU_USED
 0

	)

114 #ñi‡
deföed
 ( 
__ICCARM__
 )

115 #i‡
deföed
 
__ARMVFP__


116 #i‡(
__FPU_PRESENT
 == 1)

117 
	#__FPU_USED
 1

	)

120 
	#__FPU_USED
 0

	)

123 
	#__FPU_USED
 0

	)

126 #ñi‡
deföed
 ( 
__GNUC__
 )

127 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

128 #i‡(
__FPU_PRESENT
 == 1)

129 
	#__FPU_USED
 1

	)

132 
	#__FPU_USED
 0

	)

135 
	#__FPU_USED
 0

	)

138 #ñi‡
deföed
 ( 
__TASKING__
 )

140 
	#__FPU_USED
 0

	)

143 
	~<°döt.h
>

144 
	~<c‹e_cmIn°r.h
>

145 
	~<c‹e_cmFunc.h
>

146 
	~<c‹e_cm4_simd.h
>

150 #i‚de‡
__CMSIS_GENERIC


152 #i‚de‡
__CORE_CM4_H_DEPENDANT


153 
	#__CORE_CM4_H_DEPENDANT


	)

156 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


157 #i‚de‡
__CM4_REV


158 
	#__CM4_REV
 0x0000

	)

162 #i‚de‡
__FPU_PRESENT


163 
	#__FPU_PRESENT
 0

	)

167 #i‚de‡
__MPU_PRESENT


168 
	#__MPU_PRESENT
 0

	)

172 #i‚de‡
__NVIC_PRIO_BITS


173 
	#__NVIC_PRIO_BITS
 4

	)

177 #i‚de‡
__Víd‹_SysTickC⁄fig


178 
	#__Víd‹_SysTickC⁄fig
 0

	)

184 #ifde‡
__˝lu•lus


185 
	#__I
 vﬁ©ûê

	)

187 
	#__I
 vﬁ©ûêc⁄°

	)

189 
	#__O
 vﬁ©ûê

	)

190 
	#__IO
 vﬁ©ûê

	)

222 #i‡(
__CORTEX_M
 != 0x04)

223 
uöt32_t
 
_ª£rved0
:27;

225 
uöt32_t
 
_ª£rved0
:16;

226 
uöt32_t
 
GE
:4;

227 
uöt32_t
 
_ª£rved1
:7;

229 
uöt32_t
 
Q
:1;

230 
uöt32_t
 
V
:1;

231 
uöt32_t
 
C
:1;

232 
uöt32_t
 
Z
:1;

233 
uöt32_t
 
N
:1;

234 } 
b
;

235 
uöt32_t
 
w
;

236 } 
	tAPSR_Ty≥
;

245 
uöt32_t
 
ISR
:9;

246 
uöt32_t
 
_ª£rved0
:23;

247 } 
b
;

248 
uöt32_t
 
w
;

249 } 
	tIPSR_Ty≥
;

258 
uöt32_t
 
ISR
:9;

259 #i‡(
__CORTEX_M
 != 0x04)

260 
uöt32_t
 
_ª£rved0
:15;

262 
uöt32_t
 
_ª£rved0
:7;

263 
uöt32_t
 
GE
:4;

264 
uöt32_t
 
_ª£rved1
:4;

266 
uöt32_t
 
T
:1;

267 
uöt32_t
 
IT
:2;

268 
uöt32_t
 
Q
:1;

269 
uöt32_t
 
V
:1;

270 
uöt32_t
 
C
:1;

271 
uöt32_t
 
Z
:1;

272 
uöt32_t
 
N
:1;

273 } 
b
;

274 
uöt32_t
 
w
;

275 } 
	txPSR_Ty≥
;

284 
uöt32_t
 
nPRIV
:1;

285 
uöt32_t
 
SPSEL
:1;

286 
uöt32_t
 
FPCA
:1;

287 
uöt32_t
 
_ª£rved0
:29;

288 } 
b
;

289 
uöt32_t
 
w
;

290 } 
	tCONTROL_Ty≥
;

305 
__IO
 
uöt32_t
 
ISER
[8];

306 
uöt32_t
 
RESERVED0
[24];

307 
__IO
 
uöt32_t
 
ICER
[8];

308 
uöt32_t
 
RSERVED1
[24];

309 
__IO
 
uöt32_t
 
ISPR
[8];

310 
uöt32_t
 
RESERVED2
[24];

311 
__IO
 
uöt32_t
 
ICPR
[8];

312 
uöt32_t
 
RESERVED3
[24];

313 
__IO
 
uöt32_t
 
IABR
[8];

314 
uöt32_t
 
RESERVED4
[56];

315 
__IO
 
uöt8_t
 
IP
[240];

316 
uöt32_t
 
RESERVED5
[644];

317 
__O
 
uöt32_t
 
STIR
;

318 } 
	tNVIC_Ty≥
;

321 
	#NVIC_STIR_INTID_Pos
 0

	)

322 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

337 
__I
 
uöt32_t
 
CPUID
;

338 
__IO
 
uöt32_t
 
ICSR
;

339 
__IO
 
uöt32_t
 
VTOR
;

340 
__IO
 
uöt32_t
 
AIRCR
;

341 
__IO
 
uöt32_t
 
SCR
;

342 
__IO
 
uöt32_t
 
CCR
;

343 
__IO
 
uöt8_t
 
SHP
[12];

344 
__IO
 
uöt32_t
 
SHCSR
;

345 
__IO
 
uöt32_t
 
CFSR
;

346 
__IO
 
uöt32_t
 
HFSR
;

347 
__IO
 
uöt32_t
 
DFSR
;

348 
__IO
 
uöt32_t
 
MMFAR
;

349 
__IO
 
uöt32_t
 
BFAR
;

350 
__IO
 
uöt32_t
 
AFSR
;

351 
__I
 
uöt32_t
 
PFR
[2];

352 
__I
 
uöt32_t
 
DFR
;

353 
__I
 
uöt32_t
 
ADR
;

354 
__I
 
uöt32_t
 
MMFR
[4];

355 
__I
 
uöt32_t
 
ISAR
[5];

356 
uöt32_t
 
RESERVED0
[5];

357 
__IO
 
uöt32_t
 
CPACR
;

358 } 
	tSCB_Ty≥
;

361 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

362 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

364 
	#SCB_CPUID_VARIANT_Pos
 20

	)

365 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

367 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

368 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

370 
	#SCB_CPUID_PARTNO_Pos
 4

	)

371 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

373 
	#SCB_CPUID_REVISION_Pos
 0

	)

374 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

377 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

378 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

380 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

381 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

383 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

384 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

386 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

387 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

389 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

390 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

392 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

393 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

395 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

396 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

398 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

399 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

401 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

402 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

404 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

405 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

408 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

409 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

412 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

413 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

415 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

416 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

418 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

419 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

421 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

422 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

424 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

425 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

427 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

428 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

430 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

431 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

434 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

435 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

437 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

438 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

440 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

441 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

444 
	#SCB_CCR_STKALIGN_Pos
 9

	)

445 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

447 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

448 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

450 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

451 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

453 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

454 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

456 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

457 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

459 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

460 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

463 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

464 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

466 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

467 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

469 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

470 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

472 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

473 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

475 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

476 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

478 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

479 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

481 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

482 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

484 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

485 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

487 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

488 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

490 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

491 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

493 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

494 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

496 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

497 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

499 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

500 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

502 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

503 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

506 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

507 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

509 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

510 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

512 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

513 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

516 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

517 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

519 
	#SCB_HFSR_FORCED_Pos
 30

	)

520 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

522 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

523 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

526 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

527 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

529 
	#SCB_DFSR_VCATCH_Pos
 3

	)

530 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

532 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

533 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

535 
	#SCB_DFSR_BKPT_Pos
 1

	)

536 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

538 
	#SCB_DFSR_HALTED_Pos
 0

	)

539 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

554 
uöt32_t
 
RESERVED0
[1];

555 
__I
 
uöt32_t
 
ICTR
;

556 
__IO
 
uöt32_t
 
ACTLR
;

557 } 
	tSCnSCB_Ty≥
;

560 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

561 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

564 
	#SCnSCB_ACTLR_DISOOFP_Pos
 9

	)

565 
	#SCnSCB_ACTLR_DISOOFP_Msk
 (1UL << 
SCnSCB_ACTLR_DISOOFP_Pos
Ë

	)

567 
	#SCnSCB_ACTLR_DISFPCA_Pos
 8

	)

568 
	#SCnSCB_ACTLR_DISFPCA_Msk
 (1UL << 
SCnSCB_ACTLR_DISFPCA_Pos
Ë

	)

570 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2

	)

571 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

573 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1

	)

574 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

576 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

577 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

592 
__IO
 
uöt32_t
 
CTRL
;

593 
__IO
 
uöt32_t
 
LOAD
;

594 
__IO
 
uöt32_t
 
VAL
;

595 
__I
 
uöt32_t
 
CALIB
;

596 } 
	tSysTick_Ty≥
;

599 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

600 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

602 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

603 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

605 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

606 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

608 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

609 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

612 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

613 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

616 
	#SysTick_VAL_CURRENT_Pos
 0

	)

617 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

620 
	#SysTick_CALIB_NOREF_Pos
 31

	)

621 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

623 
	#SysTick_CALIB_SKEW_Pos
 30

	)

624 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

626 
	#SysTick_CALIB_TENMS_Pos
 0

	)

627 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

642 
__O
 union

644 
__O
 
uöt8_t
 
u8
;

645 
__O
 
uöt16_t
 
u16
;

646 
__O
 
uöt32_t
 
u32
;

647 } 
PORT
 [32];

648 
uöt32_t
 
RESERVED0
[864];

649 
__IO
 
uöt32_t
 
TER
;

650 
uöt32_t
 
RESERVED1
[15];

651 
__IO
 
uöt32_t
 
TPR
;

652 
uöt32_t
 
RESERVED2
[15];

653 
__IO
 
uöt32_t
 
TCR
;

654 } 
	tITM_Ty≥
;

657 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

658 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

661 
	#ITM_TCR_BUSY_Pos
 23

	)

662 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

664 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

665 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

667 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

668 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

670 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

671 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

673 
	#ITM_TCR_SWOENA_Pos
 4

	)

674 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

676 
	#ITM_TCR_TXENA_Pos
 3

	)

677 
	#ITM_TCR_TXENA_Msk
 (1UL << 
ITM_TCR_TXENA_Pos
Ë

	)

679 
	#ITM_TCR_SYNCENA_Pos
 2

	)

680 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

682 
	#ITM_TCR_TSENA_Pos
 1

	)

683 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

685 
	#ITM_TCR_ITMENA_Pos
 0

	)

686 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

691 #i‡(
__MPU_PRESENT
 == 1)

702 
__I
 
uöt32_t
 
TYPE
;

703 
__IO
 
uöt32_t
 
CTRL
;

704 
__IO
 
uöt32_t
 
RNR
;

705 
__IO
 
uöt32_t
 
RBAR
;

706 
__IO
 
uöt32_t
 
RASR
;

707 
__IO
 
uöt32_t
 
RBAR_A1
;

708 
__IO
 
uöt32_t
 
RASR_A1
;

709 
__IO
 
uöt32_t
 
RBAR_A2
;

710 
__IO
 
uöt32_t
 
RASR_A2
;

711 
__IO
 
uöt32_t
 
RBAR_A3
;

712 
__IO
 
uöt32_t
 
RASR_A3
;

713 } 
	tMPU_Ty≥
;

716 
	#MPU_TYPE_IREGION_Pos
 16

	)

717 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

719 
	#MPU_TYPE_DREGION_Pos
 8

	)

720 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

722 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

723 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

726 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

727 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

729 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

730 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

732 
	#MPU_CTRL_ENABLE_Pos
 0

	)

733 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

736 
	#MPU_RNR_REGION_Pos
 0

	)

737 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

740 
	#MPU_RBAR_ADDR_Pos
 5

	)

741 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

743 
	#MPU_RBAR_VALID_Pos
 4

	)

744 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

746 
	#MPU_RBAR_REGION_Pos
 0

	)

747 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

750 
	#MPU_RASR_ATTRS_Pos
 16

	)

751 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

753 
	#MPU_RASR_SRD_Pos
 8

	)

754 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

756 
	#MPU_RASR_SIZE_Pos
 1

	)

757 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

759 
	#MPU_RASR_ENABLE_Pos
 0

	)

760 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

766 #i‡(
__FPU_PRESENT
 == 1)

777 
uöt32_t
 
RESERVED0
[1];

778 
__IO
 
uöt32_t
 
FPCCR
;

779 
__IO
 
uöt32_t
 
FPCAR
;

780 
__IO
 
uöt32_t
 
FPDSCR
;

781 
__I
 
uöt32_t
 
MVFR0
;

782 
__I
 
uöt32_t
 
MVFR1
;

783 } 
	tFPU_Ty≥
;

786 
	#FPU_FPCCR_ASPEN_Pos
 31

	)

787 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

789 
	#FPU_FPCCR_LSPEN_Pos
 30

	)

790 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

792 
	#FPU_FPCCR_MONRDY_Pos
 8

	)

793 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

795 
	#FPU_FPCCR_BFRDY_Pos
 6

	)

796 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

798 
	#FPU_FPCCR_MMRDY_Pos
 5

	)

799 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

801 
	#FPU_FPCCR_HFRDY_Pos
 4

	)

802 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

804 
	#FPU_FPCCR_THREAD_Pos
 3

	)

805 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

807 
	#FPU_FPCCR_USER_Pos
 1

	)

808 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

810 
	#FPU_FPCCR_LSPACT_Pos
 0

	)

811 
	#FPU_FPCCR_LSPACT_Msk
 (1UL << 
FPU_FPCCR_LSPACT_Pos
Ë

	)

814 
	#FPU_FPCAR_ADDRESS_Pos
 3

	)

815 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

818 
	#FPU_FPDSCR_AHP_Pos
 26

	)

819 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

821 
	#FPU_FPDSCR_DN_Pos
 25

	)

822 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

824 
	#FPU_FPDSCR_FZ_Pos
 24

	)

825 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

827 
	#FPU_FPDSCR_RMode_Pos
 22

	)

828 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

831 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28

	)

832 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

834 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24

	)

835 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

837 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20

	)

838 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

840 
	#FPU_MVFR0_Divide_Pos
 16

	)

841 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

843 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12

	)

844 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

846 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8

	)

847 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

849 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4

	)

850 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

852 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0

	)

853 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL << 
FPU_MVFR0_A_SIMD_ªgi°îs_Pos
Ë

	)

856 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28

	)

857 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

859 
	#FPU_MVFR1_FP_HPFP_Pos
 24

	)

860 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

862 
	#FPU_MVFR1_D_NaN_mode_Pos
 4

	)

863 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

865 
	#FPU_MVFR1_FtZ_mode_Pos
 0

	)

866 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL << 
FPU_MVFR1_FtZ_mode_Pos
Ë

	)

882 
__IO
 
uöt32_t
 
DHCSR
;

883 
__O
 
uöt32_t
 
DCRSR
;

884 
__IO
 
uöt32_t
 
DCRDR
;

885 
__IO
 
uöt32_t
 
DEMCR
;

886 } 
	tC‹eDebug_Ty≥
;

889 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

890 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

892 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

893 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

895 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

896 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

898 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

899 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

901 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

902 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

904 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

905 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

907 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

908 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

910 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

911 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

913 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

914 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

916 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

917 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

919 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

920 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

922 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

923 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

926 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

927 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

929 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

930 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

933 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

934 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

936 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

937 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

939 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

940 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

942 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

943 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

945 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

946 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

948 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

949 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

951 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

952 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

954 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

955 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

957 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

958 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

960 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

961 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

963 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

964 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

966 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

967 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

969 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

970 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

980 
	#SCS_BASE
 (0xE000E000ULË

	)

981 
	#ITM_BASE
 (0xE0000000ULË

	)

982 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

983 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

984 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

985 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

987 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

988 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

989 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

990 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

991 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

992 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

994 #i‡(
__MPU_PRESENT
 == 1)

995 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

996 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

999 #i‡(
__FPU_PRESENT
 == 1)

1000 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

1001 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

1037 
__INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1039 
uöt32_t
 
ªg_vÆue
;

1040 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1042 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1043 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1044 
ªg_vÆue
 = (reg_value |

1045 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1046 (
Pri‹ôyGroupTmp
 << 8));

1047 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1058 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1060  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1071 
__INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1074 
NVIC
->
ISER
[(
uöt32_t
)((
öt32_t
)
IRQn
) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));

1085 
__INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1087 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1100 
__INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1102 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1113 
__INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1115 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1126 
__INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1128 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1139 
__INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1141 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1156 
__INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1158 if(
IRQn
 < 0) {

1159 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1161 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1177 
__INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1180 if(
IRQn
 < 0) {

1181 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1183 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1201 
__INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1203 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1204 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1205 
uöt32_t
 
SubPri‹ôyBôs
;

1207 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1208 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1211 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1212 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1231 
__INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1233 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1234 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1235 
uöt32_t
 
SubPri‹ôyBôs
;

1237 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1238 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1240 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1241 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1249 
__INLINE
 
NVIC_Sy°emRe£t
()

1251 
__DSB
();

1253 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1254 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1255 
SCB_AIRCR_SYSRESETREQ_Msk
);

1256 
__DSB
();

1270 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1281 
__INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1283 i‡(
ticks
 > 
SysTick_LOAD_RELOAD_Msk
)  (1);

1285 
SysTick
->
LOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

1286 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1287 
SysTick
->
VAL
 = 0;

1288 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1289 
SysTick_CTRL_TICKINT_Msk
 |

1290 
SysTick_CTRL_ENABLE_Msk
;

1306 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1307 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1319 
__INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1321 i‡((
	gC‹eDebug
->
	gDEMCR
 & 
	gC‹eDebug_DEMCR_TRCENA_Msk
) &&

1322 (
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1323 (
	gITM
->
	gTER
 & (1UL << 0) ) )

1325 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1326 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1328  (
	gch
);

1341 
__INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 () {

1342 
öt32_t
 
	gch
 = -1;

1344 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1345 
ch
 = 
ITM_RxBuf„r
;

1346 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1349  (
	gch
);

1361 
__INLINE
 
öt32_t
 
ITM_CheckCh¨
 () {

1363 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1376 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\cmsis\core_cm4_simd.h

24 #ifde‡
__˝lu•lus


28 #i‚de‡
__CORE_CM4_SIMD_H


29 
	#__CORE_CM4_SIMD_H


	)

43 #i‡ 
deföed
 ( 
__CC_ARM
 )

47 
	#__SADD8
 
__ßdd8


	)

48 
	#__QADD8
 
__qadd8


	)

49 
	#__SHADD8
 
__shadd8


	)

50 
	#__UADD8
 
__uadd8


	)

51 
	#__UQADD8
 
__uqadd8


	)

52 
	#__UHADD8
 
__uhadd8


	)

53 
	#__SSUB8
 
__ssub8


	)

54 
	#__QSUB8
 
__qsub8


	)

55 
	#__SHSUB8
 
__shsub8


	)

56 
	#__USUB8
 
__usub8


	)

57 
	#__UQSUB8
 
__uqsub8


	)

58 
	#__UHSUB8
 
__uhsub8


	)

59 
	#__SADD16
 
__ßdd16


	)

60 
	#__QADD16
 
__qadd16


	)

61 
	#__SHADD16
 
__shadd16


	)

62 
	#__UADD16
 
__uadd16


	)

63 
	#__UQADD16
 
__uqadd16


	)

64 
	#__UHADD16
 
__uhadd16


	)

65 
	#__SSUB16
 
__ssub16


	)

66 
	#__QSUB16
 
__qsub16


	)

67 
	#__SHSUB16
 
__shsub16


	)

68 
	#__USUB16
 
__usub16


	)

69 
	#__UQSUB16
 
__uqsub16


	)

70 
	#__UHSUB16
 
__uhsub16


	)

71 
	#__SASX
 
__ßsx


	)

72 
	#__QASX
 
__qasx


	)

73 
	#__SHASX
 
__shasx


	)

74 
	#__UASX
 
__uasx


	)

75 
	#__UQASX
 
__uqasx


	)

76 
	#__UHASX
 
__uhasx


	)

77 
	#__SSAX
 
__sßx


	)

78 
	#__QSAX
 
__qßx


	)

79 
	#__SHSAX
 
__shßx


	)

80 
	#__USAX
 
__ußx


	)

81 
	#__UQSAX
 
__uqßx


	)

82 
	#__UHSAX
 
__uhßx


	)

83 
	#__USAD8
 
__ußd8


	)

84 
	#__USADA8
 
__ußda8


	)

85 
	#__SSAT16
 
__sßt16


	)

86 
	#__USAT16
 
__ußt16


	)

87 
	#__UXTB16
 
__uxtb16


	)

88 
	#__UXTAB16
 
__uxèb16


	)

89 
	#__SXTB16
 
__sxtb16


	)

90 
	#__SXTAB16
 
__sxèb16


	)

91 
	#__SMUAD
 
__smuad


	)

92 
	#__SMUADX
 
__smuadx


	)

93 
	#__SMLAD
 
__smœd


	)

94 
	#__SMLADX
 
__smœdx


	)

95 
	#__SMLALD
 
__smœld


	)

96 
	#__SMLALDX
 
__smœldx


	)

97 
	#__SMUSD
 
__smusd


	)

98 
	#__SMUSDX
 
__smusdx


	)

99 
	#__SMLSD
 
__smlsd


	)

100 
	#__SMLSDX
 
__smlsdx


	)

101 
	#__SMLSLD
 
__sml¶d


	)

102 
	#__SMLSLDX
 
__sml¶dx


	)

103 
	#__SEL
 
__£l


	)

104 
	#__QADD
 
__qadd


	)

105 
	#__QSUB
 
__qsub


	)

107 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0x0000FFFFUL) | \

108 ((((
uöt32_t
)(
ARG2
)Ë<< (
ARG3
)Ë& 0xFFFF0000ULË)

	)

110 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0xFFFF0000UL) | \

111 ((((
uöt32_t
)(
ARG2
)Ë>> (
ARG3
)Ë& 0x0000FFFFULË)

	)

118 #ñi‡
deföed
 ( 
__ICCARM__
 )

121 
	~<cmsis_ür.h
>

190 #ñi‡
deföed
 ( 
__GNUC__
 )

194 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

196 
uöt32_t
 
ªsu…
;

198 
__ASM
 vﬁ©ûê("ßdd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

199 (
ªsu…
);

200 
	}
}

202 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

204 
uöt32_t
 
ªsu…
;

206 
__ASM
 vﬁ©ûê("qadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

207 (
ªsu…
);

208 
	}
}

210 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

212 
uöt32_t
 
ªsu…
;

214 
__ASM
 vﬁ©ûê("shadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

215 (
ªsu…
);

216 
	}
}

218 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

220 
uöt32_t
 
ªsu…
;

222 
__ASM
 vﬁ©ûê("uadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

223 (
ªsu…
);

224 
	}
}

226 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

228 
uöt32_t
 
ªsu…
;

230 
__ASM
 vﬁ©ûê("uqadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

231 (
ªsu…
);

232 
	}
}

234 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

236 
uöt32_t
 
ªsu…
;

238 
__ASM
 vﬁ©ûê("uhadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

239 (
ªsu…
);

240 
	}
}

243 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

245 
uöt32_t
 
ªsu…
;

247 
__ASM
 vﬁ©ûê("ssub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

248 (
ªsu…
);

249 
	}
}

251 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

253 
uöt32_t
 
ªsu…
;

255 
__ASM
 vﬁ©ûê("qsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

256 (
ªsu…
);

257 
	}
}

259 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

261 
uöt32_t
 
ªsu…
;

263 
__ASM
 vﬁ©ûê("shsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

264 (
ªsu…
);

265 
	}
}

267 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

269 
uöt32_t
 
ªsu…
;

271 
__ASM
 vﬁ©ûê("usub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

272 (
ªsu…
);

273 
	}
}

275 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

277 
uöt32_t
 
ªsu…
;

279 
__ASM
 vﬁ©ûê("uqsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

280 (
ªsu…
);

281 
	}
}

283 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

285 
uöt32_t
 
ªsu…
;

287 
__ASM
 vﬁ©ûê("uhsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

288 (
ªsu…
);

289 
	}
}

292 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

294 
uöt32_t
 
ªsu…
;

296 
__ASM
 vﬁ©ûê("ßdd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

297 (
ªsu…
);

298 
	}
}

300 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

302 
uöt32_t
 
ªsu…
;

304 
__ASM
 vﬁ©ûê("qadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

305 (
ªsu…
);

306 
	}
}

308 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

310 
uöt32_t
 
ªsu…
;

312 
__ASM
 vﬁ©ûê("shadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

313 (
ªsu…
);

314 
	}
}

316 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

318 
uöt32_t
 
ªsu…
;

320 
__ASM
 vﬁ©ûê("uadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

321 (
ªsu…
);

322 
	}
}

324 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

326 
uöt32_t
 
ªsu…
;

328 
__ASM
 vﬁ©ûê("uqadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

329 (
ªsu…
);

330 
	}
}

332 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

334 
uöt32_t
 
ªsu…
;

336 
__ASM
 vﬁ©ûê("uhadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

337 (
ªsu…
);

338 
	}
}

340 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

342 
uöt32_t
 
ªsu…
;

344 
__ASM
 vﬁ©ûê("ssub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

345 (
ªsu…
);

346 
	}
}

348 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

350 
uöt32_t
 
ªsu…
;

352 
__ASM
 vﬁ©ûê("qsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

353 (
ªsu…
);

354 
	}
}

356 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

358 
uöt32_t
 
ªsu…
;

360 
__ASM
 vﬁ©ûê("shsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

361 (
ªsu…
);

362 
	}
}

364 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

366 
uöt32_t
 
ªsu…
;

368 
__ASM
 vﬁ©ûê("usub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

369 (
ªsu…
);

370 
	}
}

372 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

374 
uöt32_t
 
ªsu…
;

376 
__ASM
 vﬁ©ûê("uqsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

377 (
ªsu…
);

378 
	}
}

380 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

382 
uöt32_t
 
ªsu…
;

384 
__ASM
 vﬁ©ûê("uhsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

385 (
ªsu…
);

386 
	}
}

388 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

390 
uöt32_t
 
ªsu…
;

392 
__ASM
 vﬁ©ûê("ßsx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

393 (
ªsu…
);

394 
	}
}

396 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

398 
uöt32_t
 
ªsu…
;

400 
__ASM
 vﬁ©ûê("qasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

401 (
ªsu…
);

402 
	}
}

404 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

406 
uöt32_t
 
ªsu…
;

408 
__ASM
 vﬁ©ûê("shasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

409 (
ªsu…
);

410 
	}
}

412 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

414 
uöt32_t
 
ªsu…
;

416 
__ASM
 vﬁ©ûê("uasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

417 (
ªsu…
);

418 
	}
}

420 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

422 
uöt32_t
 
ªsu…
;

424 
__ASM
 vﬁ©ûê("uqasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

425 (
ªsu…
);

426 
	}
}

428 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

430 
uöt32_t
 
ªsu…
;

432 
__ASM
 vﬁ©ûê("uhasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

433 (
ªsu…
);

434 
	}
}

436 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

438 
uöt32_t
 
ªsu…
;

440 
__ASM
 vﬁ©ûê("sßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

441 (
ªsu…
);

442 
	}
}

444 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

446 
uöt32_t
 
ªsu…
;

448 
__ASM
 vﬁ©ûê("qßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

449 (
ªsu…
);

450 
	}
}

452 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

454 
uöt32_t
 
ªsu…
;

456 
__ASM
 vﬁ©ûê("shßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

457 (
ªsu…
);

458 
	}
}

460 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

462 
uöt32_t
 
ªsu…
;

464 
__ASM
 vﬁ©ûê("ußx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

465 (
ªsu…
);

466 
	}
}

468 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UQSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

470 
uöt32_t
 
ªsu…
;

472 
__ASM
 vﬁ©ûê("uqßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

473 (
ªsu…
);

474 
	}
}

476 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

478 
uöt32_t
 
ªsu…
;

480 
__ASM
 vﬁ©ûê("uhßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

481 (
ªsu…
);

482 
	}
}

484 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USAD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

486 
uöt32_t
 
ªsu…
;

488 
__ASM
 vﬁ©ûê("ußd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

489 (
ªsu…
);

490 
	}
}

492 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__USADA8
(
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

494 
uöt32_t
 
ªsu…
;

496 
__ASM
 vﬁ©ûê("ußda8 %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

497 (
ªsu…
);

498 
	}
}

500 
	#__SSAT16
(
ARG1
,
ARG2
) \

502 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

503 
	`__ASM
 ("sßt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

504 
__RES
; \

505 })

	)

507 
	#__USAT16
(
ARG1
,
ARG2
) \

509 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

510 
	`__ASM
 ("ußt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

511 
__RES
; \

512 })

	)

514 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UXTB16
(
uöt32_t
 
›1
)

516 
uöt32_t
 
ªsu…
;

518 
__ASM
 vﬁ©ûê("uxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

519 (
ªsu…
);

520 
	}
}

522 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__UXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

524 
uöt32_t
 
ªsu…
;

526 
__ASM
 vﬁ©ûê("uxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

527 (
ªsu…
);

528 
	}
}

530 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SXTB16
(
uöt32_t
 
›1
)

532 
uöt32_t
 
ªsu…
;

534 
__ASM
 vﬁ©ûê("sxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

535 (
ªsu…
);

536 
	}
}

538 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

540 
uöt32_t
 
ªsu…
;

542 
__ASM
 vﬁ©ûê("sxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

543 (
ªsu…
);

544 
	}
}

546 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUAD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

548 
uöt32_t
 
ªsu…
;

550 
__ASM
 vﬁ©ûê("smuad %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

551 (
ªsu…
);

552 
	}
}

554 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUADX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

556 
uöt32_t
 
ªsu…
;

558 
__ASM
 vﬁ©ûê("smuadx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

559 (
ªsu…
);

560 
	}
}

562 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLAD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

564 
uöt32_t
 
ªsu…
;

566 
__ASM
 vﬁ©ûê("smœd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

567 (
ªsu…
);

568 
	}
}

570 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLADX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

572 
uöt32_t
 
ªsu…
;

574 
__ASM
 vﬁ©ûê("smœdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

575 (
ªsu…
);

576 
	}
}

578 
	#__SMLALD
(
ARG1
,
ARG2
,
ARG3
) \

580 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
uöt64_t
)(
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \

581 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

582 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

583 })

	)

585 
	#__SMLALDX
(
ARG1
,
ARG2
,
ARG3
) \

587 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
uöt64_t
)(
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \

588 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

589 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

590 })

	)

592 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUSD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

594 
uöt32_t
 
ªsu…
;

596 
__ASM
 vﬁ©ûê("smusd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

597 (
ªsu…
);

598 
	}
}

600 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMUSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

602 
uöt32_t
 
ªsu…
;

604 
__ASM
 vﬁ©ûê("smusdx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

605 (
ªsu…
);

606 
	}
}

608 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLSD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

610 
uöt32_t
 
ªsu…
;

612 
__ASM
 vﬁ©ûê("smlsd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

613 (
ªsu…
);

614 
	}
}

616 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SMLSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

618 
uöt32_t
 
ªsu…
;

620 
__ASM
 vﬁ©ûê("smlsdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

621 (
ªsu…
);

622 
	}
}

624 
	#__SMLSLD
(
ARG1
,
ARG2
,
ARG3
) \

626 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \

627 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

628 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

629 })

	)

631 
	#__SMLSLDX
(
ARG1
,
ARG2
,
ARG3
) \

633 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \

634 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

635 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

636 })

	)

638 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__SEL
 (
uöt32_t
 
›1
, uöt32_à
›2
)

640 
uöt32_t
 
ªsu…
;

642 
__ASM
 vﬁ©ûê("£»%0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

643 (
ªsu…
);

644 
	}
}

646 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QADD
(
uöt32_t
 
›1
, uöt32_à
›2
)

648 
uöt32_t
 
ªsu…
;

650 
__ASM
 vﬁ©ûê("qadd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

651 (
ªsu…
);

652 
	}
}

654 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__QSUB
(
uöt32_t
 
›1
, uöt32_à
›2
)

656 
uöt32_t
 
ªsu…
;

658 
__ASM
 vﬁ©ûê("qsub %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

659 (
ªsu…
);

660 
	}
}

662 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
) \

664 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

665 
	`__ASM
 ("pkhbà%0, %1, %2,Ü¶ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

666 
__RES
; \

667 })

	)

669 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
) \

671 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

672 i‡(
ARG3
 == 0) \

673 
	`__ASM
 ("pkhtb %0, %1, %2" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
) ); \

675 
	`__ASM
 ("pkhtb %0, %1, %2,á§ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

676 
__RES
; \

677 })

	)

683 #ñi‡
deföed
 ( 
__TASKING__
 )

699 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\cmsis\core_cmFunc.h

24 #i‚de‡
__CORE_CMFUNC_H


25 
	#__CORE_CMFUNC_H


	)

34 #i‡ 
deföed
 ( 
__CC_ARM
 )

37 #i‡(
__ARMCC_VERSION
 < 400677)

50 
__INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

52 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

53 (
__ªgC⁄åﬁ
);

54 
	}
}

63 
__INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

65 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

66 
__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

67 
	}
}

76 
__INLINE
 
uöt32_t
 
	$__gë_IPSR
()

78 
uöt32_t
 
__ªgIPSR
 
	`__ASM
("ipsr");

79 (
__ªgIPSR
);

80 
	}
}

89 
__INLINE
 
uöt32_t
 
	$__gë_APSR
()

91 
uöt32_t
 
__ªgAPSR
 
	`__ASM
("apsr");

92 (
__ªgAPSR
);

93 
	}
}

102 
__INLINE
 
uöt32_t
 
	$__gë_xPSR
()

104 
uöt32_t
 
__ªgXPSR
 
	`__ASM
("xpsr");

105 (
__ªgXPSR
);

106 
	}
}

115 
__INLINE
 
uöt32_t
 
	$__gë_PSP
()

117 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

118 (
__ªgPro˚ssSèckPoöãr
);

119 
	}
}

128 
__INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

130 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

131 
__ªgPro˚ssSèckPoöãr
 = 
t›OfProcSèck
;

132 
	}
}

141 
__INLINE
 
uöt32_t
 
	$__gë_MSP
()

143 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

144 (
__ªgMaöSèckPoöãr
);

145 
	}
}

154 
__INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

156 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

157 
__ªgMaöSèckPoöãr
 = 
t›OfMaöSèck
;

158 
	}
}

167 
__INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

169 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

170 (
__ªgPriMask
);

171 
	}
}

180 
__INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

182 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

183 
__ªgPriMask
 = (
¥iMask
);

184 
	}
}

187 #i‡ (
__CORTEX_M
 >= 0x03)

194 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

202 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

211 
__INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

213 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

214 (
__ªgBa£Pri
);

215 
	}
}

224 
__INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

226 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

227 
__ªgBa£Pri
 = (
ba£Pri
 & 0xff);

228 
	}
}

237 
__INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

239 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

240 (
__ªgFau…Mask
);

241 
	}
}

250 
__INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

252 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

253 
__ªgFau…Mask
 = (
Áu…Mask
 & (
uöt32_t
)1);

254 
	}
}

259 #i‡ (
__CORTEX_M
 == 0x04)

267 
__INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

269 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

270 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

271 (
__ªgÂs¸
);

275 
	}
}

284 
__INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

286 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

287 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

288 
__ªgÂs¸
 = (
Âs¸
);

290 
	}
}

295 #ñi‡
deföed
 ( 
__ICCARM__
 )

298 
	~<cmsis_ür.h
>

300 #ñi‡
deföed
 ( 
__GNUC__
 )

308 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__íabÀ_úq
()

310 
__ASM
 volatile ("cpsie i");

311 
	}
}

319 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__dißbÀ_úq
()

321 
__ASM
 volatile ("cpsid i");

322 
	}
}

331 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

333 
uöt32_t
 
ªsu…
;

335 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

336 (
ªsu…
);

337 
	}
}

346 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

348 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) );

349 
	}
}

358 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_IPSR
()

360 
uöt32_t
 
ªsu…
;

362 
__ASM
 vﬁ©ûê("MRS %0, ip§" : "Ù" (
ªsu…
) );

363 (
ªsu…
);

364 
	}
}

373 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_APSR
()

375 
uöt32_t
 
ªsu…
;

377 
__ASM
 vﬁ©ûê("MRS %0,áp§" : "Ù" (
ªsu…
) );

378 (
ªsu…
);

379 
	}
}

388 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_xPSR
()

390 
uöt32_t
 
ªsu…
;

392 
__ASM
 vﬁ©ûê("MRS %0, xp§" : "Ù" (
ªsu…
) );

393 (
ªsu…
);

394 
	}
}

403 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_PSP
()

405 
uöt32_t
 
ªsu…
;

407 
__ASM
 vﬁ©ûê("MRS %0,Ö•\n" : "Ù" (
ªsu…
) );

408 (
ªsu…
);

409 
	}
}

418 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

420 
__ASM
 vﬁ©ûê("MSRÖ•, %0\n" : : "r" (
t›OfProcSèck
) );

421 
	}
}

430 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_MSP
()

432 
uöt32_t
 
ªsu…
;

434 
__ASM
 vﬁ©ûê("MRS %0, m•\n" : "Ù" (
ªsu…
) );

435 (
ªsu…
);

436 
	}
}

445 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

447 
__ASM
 vﬁ©ûê("MSR m•, %0\n" : : "r" (
t›OfMaöSèck
) );

448 
	}
}

457 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

459 
uöt32_t
 
ªsu…
;

461 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

462 (
ªsu…
);

463 
	}
}

472 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

474 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) );

475 
	}
}

478 #i‡ (
__CORTEX_M
 >= 0x03)

485 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__íabÀ_Áu…_úq
()

487 
__ASM
 volatile ("cpsie f");

488 
	}
}

496 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__dißbÀ_Áu…_úq
()

498 
__ASM
 volatile ("cpsid f");

499 
	}
}

508 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

510 
uöt32_t
 
ªsu…
;

512 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

513 (
ªsu…
);

514 
	}
}

523 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

525 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) );

526 
	}
}

535 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

537 
uöt32_t
 
ªsu…
;

539 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

540 (
ªsu…
);

541 
	}
}

550 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

552 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) );

553 
	}
}

558 #i‡ (
__CORTEX_M
 == 0x04)

566 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

568 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

569 
uöt32_t
 
ªsu…
;

571 
__ASM
 vﬁ©ûê("VMRS %0, fps¸" : "Ù" (
ªsu…
) );

572 (
ªsu…
);

576 
	}
}

585 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

587 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

588 
__ASM
 vﬁ©ûê("VMSR fps¸, %0" : : "r" (
Âs¸
) );

590 
	}
}

595 #ñi‡
deföed
 ( 
__TASKING__
 )

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\cmsis\core_cmInstr.h

24 #i‚de‡
__CORE_CMINSTR_H


25 
	#__CORE_CMINSTR_H


	)

34 #i‡ 
deföed
 ( 
__CC_ARM
 )

37 #i‡(
__ARMCC_VERSION
 < 400677)

46 
	#__NOP
 
__n›


	)

54 
	#__WFI
 
__wfi


	)

62 
	#__WFE
 
__w„


	)

69 
	#__SEV
 
__£v


	)

78 
	#__ISB
(Ë
	`__isb
(0xF)

	)

86 
	#__DSB
(Ë
	`__dsb
(0xF)

	)

94 
	#__DMB
(Ë
	`__dmb
(0xF)

	)

104 
	#__REV
 
__ªv


	)

114 
__INLINE
 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

116 
ªv16
 
r0
,Ñ0

117 
bx
 
Ã


118 
	}
}

128 
__INLINE
 
__ASM
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

130 
ªvsh
 
r0
,Ñ0

131 
bx
 
Ã


132 
	}
}

135 #i‡ (
__CORTEX_M
 >= 0x03)

144 
	#__RBIT
 
__rbô


	)

154 
	#__LDREXB
(
±r
Ë((
uöt8_t
 ) 
	`__ldªx
’å))

	)

164 
	#__LDREXH
(
±r
Ë((
uöt16_t
Ë
	`__ldªx
’å))

	)

174 
	#__LDREXW
(
±r
Ë((
uöt32_t
 ) 
	`__ldªx
’å))

	)

186 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

198 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

210 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

218 
	#__CLREX
 
__˛ªx


	)

229 
	#__SSAT
 
__sßt


	)

240 
	#__USAT
 
__ußt


	)

250 
	#__CLZ
 
__˛z


	)

256 #ñi‡
deföed
 ( 
__ICCARM__
 )

259 
	~<cmsis_ür.h
>

262 #ñi‡
deföed
 ( 
__GNUC__
 )

269 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__NOP
()

271 
__ASM
 volatile ("nop");

272 
	}
}

280 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__WFI
()

282 
__ASM
 volatile ("wfi");

283 
	}
}

291 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__WFE
()

293 
__ASM
 volatile ("wfe");

294 
	}
}

301 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__SEV
()

303 
__ASM
 volatile ("sev");

304 
	}
}

313 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__ISB
()

315 
__ASM
 volatile ("isb");

316 
	}
}

324 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__DSB
()

326 
__ASM
 volatile ("dsb");

327 
	}
}

335 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__DMB
()

337 
__ASM
 volatile ("dmb");

338 
	}
}

348 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

350 
uöt32_t
 
ªsu…
;

352 
__ASM
 vﬁ©ûê("ªv %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

353 (
ªsu…
);

354 
	}
}

364 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

366 
uöt32_t
 
ªsu…
;

368 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

369 (
ªsu…
);

370 
	}
}

380 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

382 
uöt32_t
 
ªsu…
;

384 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

385 (
ªsu…
);

386 
	}
}

389 #i‡ (
__CORTEX_M
 >= 0x03)

398 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

400 
uöt32_t
 
ªsu…
;

402 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

403 (
ªsu…
);

404 
	}
}

414 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt8_t
 
	$__LDREXB
(vﬁ©ûê
uöt8_t
 *
addr
)

416 
uöt8_t
 
ªsu…
;

418 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

419 (
ªsu…
);

420 
	}
}

430 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt16_t
 
	$__LDREXH
(vﬁ©ûê
uöt16_t
 *
addr
)

432 
uöt16_t
 
ªsu…
;

434 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

435 (
ªsu…
);

436 
	}
}

446 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__LDREXW
(vﬁ©ûê
uöt32_t
 *
addr
)

448 
uöt32_t
 
ªsu…
;

450 
__ASM
 vﬁ©ûê("ldªx %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

451 (
ªsu…
);

452 
	}
}

464 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

466 
uöt32_t
 
ªsu…
;

468 
__ASM
 vﬁ©ûê("°ªxb %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

469 (
ªsu…
);

470 
	}
}

482 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

484 
uöt32_t
 
ªsu…
;

486 
__ASM
 vﬁ©ûê("°ªxh %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

487 (
ªsu…
);

488 
	}
}

500 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

502 
uöt32_t
 
ªsu…
;

504 
__ASM
 vﬁ©ûê("°ªx %0, %2, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

505 (
ªsu…
);

506 
	}
}

514 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
	$__CLREX
()

516 
__ASM
 volatile ("clrex");

517 
	}
}

528 
	#__SSAT
(
ARG1
,
ARG2
) \

530 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

531 
	`__ASM
 ("sßà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

532 
__RES
; \

533 })

	)

544 
	#__USAT
(
ARG1
,
ARG2
) \

546 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

547 
	`__ASM
 ("ußà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

548 
__RES
; \

549 })

	)

559 
__©åibuã__
––
Æways_ölöe
 ) ) 
__INLINE
 
uöt8_t
 
	$__CLZ
(
uöt32_t
 
vÆue
)

561 
uöt8_t
 
ªsu…
;

563 
__ASM
 vﬁ©ûê("˛z %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

564 (
ªsu…
);

565 
	}
}

572 #ñi‡
deföed
 ( 
__TASKING__
 )

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\inc\stm32f4xx.h

47 #i‚de‡
__STM32F4xx_H


48 
	#__STM32F4xx_H


	)

50 #ifde‡
__˝lu•lus


62 #i‡!
deföed
 (
STM32F4XX
)

63 
	#STM32F4XX


	)

70 #i‡!
deföed
 (
STM32F4XX
)

74 #i‡!
deföed
 (
USE_STDPERIPH_DRIVER
)

91 #i‡!
deföed
 (
HSE_VALUE
)

92 
	#HSE_VALUE
 ((
uöt32_t
)25000000Ë

	)

99 #i‡!
deföed
 (
HSE_STARTUP_TIMEOUT
)

100 
	#HSE_STARTUP_TIMEOUT
 ((
uöt16_t
)0x0600Ë

	)

103 #i‡!
deföed
 (
HSI_VALUE
)

104 
	#HSI_VALUE
 ((
uöt32_t
)16000000Ë

	)

110 
	#__STM32F4XX_STDPERIPH_VERSION_MAIN
 (0x01Ë

	)

111 
	#__STM32F4XX_STDPERIPH_VERSION_SUB1
 (0x00Ë

	)

112 
	#__STM32F4XX_STDPERIPH_VERSION_SUB2
 (0x00Ë

	)

113 
	#__STM32F4XX_STDPERIPH_VERSION_RC
 (0x00Ë

	)

114 
	#__STM32F4XX_STDPERIPH_VERSION
 ((
__STM32F4XX_STDPERIPH_VERSION_MAIN
 << 24)\

115 |(
__STM32F4XX_STDPERIPH_VERSION_SUB1
 << 16)\

116 |(
__STM32F4XX_STDPERIPH_VERSION_SUB2
 << 8)\

117 |(
__STM32F4XX_STDPERIPH_VERSION_RC
))

	)

130 
	#__CM4_REV
 0x0001

	)

131 
	#__MPU_PRESENT
 1

	)

132 
	#__NVIC_PRIO_BITS
 4

	)

133 
	#__Víd‹_SysTickC⁄fig
 0

	)

134 
	#__FPU_PRESENT
 1

	)

140 
	eIRQn


143 
N⁄MaskabÀI¡_IRQn
 = -14,

144 
Mem‹yM™agemít_IRQn
 = -12,

145 
BusFau…_IRQn
 = -11,

146 
UßgeFau…_IRQn
 = -10,

147 
SVCÆl_IRQn
 = -5,

148 
DebugM⁄ô‹_IRQn
 = -4,

149 
PídSV_IRQn
 = -2,

150 
SysTick_IRQn
 = -1,

152 
WWDG_IRQn
 = 0,

153 
PVD_IRQn
 = 1,

154 
TAMP_STAMP_IRQn
 = 2,

155 
RTC_WKUP_IRQn
 = 3,

156 
FLASH_IRQn
 = 4,

157 
RCC_IRQn
 = 5,

158 
EXTI0_IRQn
 = 6,

159 
EXTI1_IRQn
 = 7,

160 
EXTI2_IRQn
 = 8,

161 
EXTI3_IRQn
 = 9,

162 
EXTI4_IRQn
 = 10,

163 
DMA1_Såóm0_IRQn
 = 11,

164 
DMA1_Såóm1_IRQn
 = 12,

165 
DMA1_Såóm2_IRQn
 = 13,

166 
DMA1_Såóm3_IRQn
 = 14,

167 
DMA1_Såóm4_IRQn
 = 15,

168 
DMA1_Såóm5_IRQn
 = 16,

169 
DMA1_Såóm6_IRQn
 = 17,

170 
ADC_IRQn
 = 18,

171 
CAN1_TX_IRQn
 = 19,

172 
CAN1_RX0_IRQn
 = 20,

173 
CAN1_RX1_IRQn
 = 21,

174 
CAN1_SCE_IRQn
 = 22,

175 
EXTI9_5_IRQn
 = 23,

176 
TIM1_BRK_TIM9_IRQn
 = 24,

177 
TIM1_UP_TIM10_IRQn
 = 25,

178 
TIM1_TRG_COM_TIM11_IRQn
 = 26,

179 
TIM1_CC_IRQn
 = 27,

180 
TIM2_IRQn
 = 28,

181 
TIM3_IRQn
 = 29,

182 
TIM4_IRQn
 = 30,

183 
I2C1_EV_IRQn
 = 31,

184 
I2C1_ER_IRQn
 = 32,

185 
I2C2_EV_IRQn
 = 33,

186 
I2C2_ER_IRQn
 = 34,

187 
SPI1_IRQn
 = 35,

188 
SPI2_IRQn
 = 36,

189 
USART1_IRQn
 = 37,

190 
USART2_IRQn
 = 38,

191 
USART3_IRQn
 = 39,

192 
EXTI15_10_IRQn
 = 40,

193 
RTC_Aœrm_IRQn
 = 41,

194 
OTG_FS_WKUP_IRQn
 = 42,

195 
TIM8_BRK_TIM12_IRQn
 = 43,

196 
TIM8_UP_TIM13_IRQn
 = 44,

197 
TIM8_TRG_COM_TIM14_IRQn
 = 45,

198 
TIM8_CC_IRQn
 = 46,

199 
DMA1_Såóm7_IRQn
 = 47,

200 
FSMC_IRQn
 = 48,

201 
SDIO_IRQn
 = 49,

202 
TIM5_IRQn
 = 50,

203 
SPI3_IRQn
 = 51,

204 
UART4_IRQn
 = 52,

205 
UART5_IRQn
 = 53,

206 
TIM6_DAC_IRQn
 = 54,

207 
TIM7_IRQn
 = 55,

208 
DMA2_Såóm0_IRQn
 = 56,

209 
DMA2_Såóm1_IRQn
 = 57,

210 
DMA2_Såóm2_IRQn
 = 58,

211 
DMA2_Såóm3_IRQn
 = 59,

212 
DMA2_Såóm4_IRQn
 = 60,

213 
ETH_IRQn
 = 61,

214 
ETH_WKUP_IRQn
 = 62,

215 
CAN2_TX_IRQn
 = 63,

216 
CAN2_RX0_IRQn
 = 64,

217 
CAN2_RX1_IRQn
 = 65,

218 
CAN2_SCE_IRQn
 = 66,

219 
OTG_FS_IRQn
 = 67,

220 
DMA2_Såóm5_IRQn
 = 68,

221 
DMA2_Såóm6_IRQn
 = 69,

222 
DMA2_Såóm7_IRQn
 = 70,

223 
USART6_IRQn
 = 71,

224 
I2C3_EV_IRQn
 = 72,

225 
I2C3_ER_IRQn
 = 73,

226 
OTG_HS_EP1_OUT_IRQn
 = 74,

227 
OTG_HS_EP1_IN_IRQn
 = 75,

228 
OTG_HS_WKUP_IRQn
 = 76,

229 
OTG_HS_IRQn
 = 77,

230 
DCMI_IRQn
 = 78,

231 
CRYP_IRQn
 = 79,

232 
HASH_RNG_IRQn
 = 80,

233 
FPU_IRQn
 = 81

234 } 
	tIRQn_Ty≥
;

240 
	~"c‹e_cm4.h
"

241 
	~"sy°em_°m32f4xx.h
"

242 
	~<°döt.h
>

248 
öt32_t
 
	ts32
;

249 
öt16_t
 
	ts16
;

250 
öt8_t
 
	ts8
;

252 c⁄° 
	töt32_t
 
	tsc32
;

253 c⁄° 
	töt16_t
 
	tsc16
;

254 c⁄° 
	töt8_t
 
	tsc8
;

256 
__IO
 
	töt32_t
 
	tvs32
;

257 
__IO
 
	töt16_t
 
	tvs16
;

258 
__IO
 
	töt8_t
 
	tvs8
;

260 
__I
 
	töt32_t
 
	tvsc32
;

261 
__I
 
	töt16_t
 
	tvsc16
;

262 
__I
 
	töt8_t
 
	tvsc8
;

264 
uöt32_t
 
	tu32
;

265 
uöt16_t
 
	tu16
;

266 
uöt8_t
 
	tu8
;

268 c⁄° 
	tuöt32_t
 
	tuc32
;

269 c⁄° 
	tuöt16_t
 
	tuc16
;

270 c⁄° 
	tuöt8_t
 
	tuc8
;

272 
__IO
 
	tuöt32_t
 
	tvu32
;

273 
__IO
 
	tuöt16_t
 
	tvu16
;

274 
__IO
 
	tuöt8_t
 
	tvu8
;

276 
__I
 
	tuöt32_t
 
	tvuc32
;

277 
__I
 
	tuöt16_t
 
	tvuc16
;

278 
__I
 
	tuöt8_t
 
	tvuc8
;

280 íum {
RESET
 = 0, 
SET
 = !RESET} 
	tFœgSètus
, 
	tITSètus
;

282 íum {
DISABLE
 = 0, 
ENABLE
 = !DISABLE} 
	tFun˘i⁄ÆSèã
;

283 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

285 íum {
ERROR
 = 0, 
SUCCESS
 = !ERROR} 
	tEº‹Sètus
;

301 
__IO
 
uöt32_t
 
SR
;

302 
__IO
 
uöt32_t
 
CR1
;

303 
__IO
 
uöt32_t
 
CR2
;

304 
__IO
 
uöt32_t
 
SMPR1
;

305 
__IO
 
uöt32_t
 
SMPR2
;

306 
__IO
 
uöt32_t
 
JOFR1
;

307 
__IO
 
uöt32_t
 
JOFR2
;

308 
__IO
 
uöt32_t
 
JOFR3
;

309 
__IO
 
uöt32_t
 
JOFR4
;

310 
__IO
 
uöt32_t
 
HTR
;

311 
__IO
 
uöt32_t
 
LTR
;

312 
__IO
 
uöt32_t
 
SQR1
;

313 
__IO
 
uöt32_t
 
SQR2
;

314 
__IO
 
uöt32_t
 
SQR3
;

315 
__IO
 
uöt32_t
 
JSQR
;

316 
__IO
 
uöt32_t
 
JDR1
;

317 
__IO
 
uöt32_t
 
JDR2
;

318 
__IO
 
uöt32_t
 
JDR3
;

319 
__IO
 
uöt32_t
 
JDR4
;

320 
__IO
 
uöt32_t
 
DR
;

321 } 
	tADC_Ty≥Def
;

325 
__IO
 
uöt32_t
 
CSR
;

326 
__IO
 
uöt32_t
 
CCR
;

327 
__IO
 
uöt32_t
 
CDR
;

329 } 
	tADC_Comm⁄_Ty≥Def
;

338 
__IO
 
uöt32_t
 
TIR
;

339 
__IO
 
uöt32_t
 
TDTR
;

340 
__IO
 
uöt32_t
 
TDLR
;

341 
__IO
 
uöt32_t
 
TDHR
;

342 } 
	tCAN_TxMaûBox_Ty≥Def
;

350 
__IO
 
uöt32_t
 
RIR
;

351 
__IO
 
uöt32_t
 
RDTR
;

352 
__IO
 
uöt32_t
 
RDLR
;

353 
__IO
 
uöt32_t
 
RDHR
;

354 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

362 
__IO
 
uöt32_t
 
FR1
;

363 
__IO
 
uöt32_t
 
FR2
;

364 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

372 
__IO
 
uöt32_t
 
MCR
;

373 
__IO
 
uöt32_t
 
MSR
;

374 
__IO
 
uöt32_t
 
TSR
;

375 
__IO
 
uöt32_t
 
RF0R
;

376 
__IO
 
uöt32_t
 
RF1R
;

377 
__IO
 
uöt32_t
 
IER
;

378 
__IO
 
uöt32_t
 
ESR
;

379 
__IO
 
uöt32_t
 
BTR
;

380 
uöt32_t
 
RESERVED0
[88];

381 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

382 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

383 
uöt32_t
 
RESERVED1
[12];

384 
__IO
 
uöt32_t
 
FMR
;

385 
__IO
 
uöt32_t
 
FM1R
;

386 
uöt32_t
 
RESERVED2
;

387 
__IO
 
uöt32_t
 
FS1R
;

388 
uöt32_t
 
RESERVED3
;

389 
__IO
 
uöt32_t
 
FFA1R
;

390 
uöt32_t
 
RESERVED4
;

391 
__IO
 
uöt32_t
 
FA1R
;

392 
uöt32_t
 
RESERVED5
[8];

393 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[28];

394 } 
	tCAN_Ty≥Def
;

402 
__IO
 
uöt32_t
 
DR
;

403 
__IO
 
uöt8_t
 
IDR
;

404 
uöt8_t
 
RESERVED0
;

405 
uöt16_t
 
RESERVED1
;

406 
__IO
 
uöt32_t
 
CR
;

407 } 
	tCRC_Ty≥Def
;

415 
__IO
 
uöt32_t
 
CR
;

416 
__IO
 
uöt32_t
 
SWTRIGR
;

417 
__IO
 
uöt32_t
 
DHR12R1
;

418 
__IO
 
uöt32_t
 
DHR12L1
;

419 
__IO
 
uöt32_t
 
DHR8R1
;

420 
__IO
 
uöt32_t
 
DHR12R2
;

421 
__IO
 
uöt32_t
 
DHR12L2
;

422 
__IO
 
uöt32_t
 
DHR8R2
;

423 
__IO
 
uöt32_t
 
DHR12RD
;

424 
__IO
 
uöt32_t
 
DHR12LD
;

425 
__IO
 
uöt32_t
 
DHR8RD
;

426 
__IO
 
uöt32_t
 
DOR1
;

427 
__IO
 
uöt32_t
 
DOR2
;

428 
__IO
 
uöt32_t
 
SR
;

429 } 
	tDAC_Ty≥Def
;

437 
__IO
 
uöt32_t
 
IDCODE
;

438 
__IO
 
uöt32_t
 
CR
;

439 
__IO
 
uöt32_t
 
APB1FZ
;

440 
__IO
 
uöt32_t
 
APB2FZ
;

441 }
	tDBGMCU_Ty≥Def
;

449 
__IO
 
uöt32_t
 
CR
;

450 
__IO
 
uöt32_t
 
SR
;

451 
__IO
 
uöt32_t
 
RISR
;

452 
__IO
 
uöt32_t
 
IER
;

453 
__IO
 
uöt32_t
 
MISR
;

454 
__IO
 
uöt32_t
 
ICR
;

455 
__IO
 
uöt32_t
 
ESCR
;

456 
__IO
 
uöt32_t
 
ESUR
;

457 
__IO
 
uöt32_t
 
CWSTRTR
;

458 
__IO
 
uöt32_t
 
CWSIZER
;

459 
__IO
 
uöt32_t
 
DR
;

460 } 
	tDCMI_Ty≥Def
;

468 
__IO
 
uöt32_t
 
CR
;

469 
__IO
 
uöt32_t
 
NDTR
;

470 
__IO
 
uöt32_t
 
PAR
;

471 
__IO
 
uöt32_t
 
M0AR
;

472 
__IO
 
uöt32_t
 
M1AR
;

473 
__IO
 
uöt32_t
 
FCR
;

474 } 
	tDMA_Såóm_Ty≥Def
;

478 
__IO
 
uöt32_t
 
LISR
;

479 
__IO
 
uöt32_t
 
HISR
;

480 
__IO
 
uöt32_t
 
LIFCR
;

481 
__IO
 
uöt32_t
 
HIFCR
;

482 } 
	tDMA_Ty≥Def
;

490 
__IO
 
uöt32_t
 
MACCR
;

491 
__IO
 
uöt32_t
 
MACFFR
;

492 
__IO
 
uöt32_t
 
MACHTHR
;

493 
__IO
 
uöt32_t
 
MACHTLR
;

494 
__IO
 
uöt32_t
 
MACMIIAR
;

495 
__IO
 
uöt32_t
 
MACMIIDR
;

496 
__IO
 
uöt32_t
 
MACFCR
;

497 
__IO
 
uöt32_t
 
MACVLANTR
;

498 
uöt32_t
 
RESERVED0
[2];

499 
__IO
 
uöt32_t
 
MACRWUFFR
;

500 
__IO
 
uöt32_t
 
MACPMTCSR
;

501 
uöt32_t
 
RESERVED1
[2];

502 
__IO
 
uöt32_t
 
MACSR
;

503 
__IO
 
uöt32_t
 
MACIMR
;

504 
__IO
 
uöt32_t
 
MACA0HR
;

505 
__IO
 
uöt32_t
 
MACA0LR
;

506 
__IO
 
uöt32_t
 
MACA1HR
;

507 
__IO
 
uöt32_t
 
MACA1LR
;

508 
__IO
 
uöt32_t
 
MACA2HR
;

509 
__IO
 
uöt32_t
 
MACA2LR
;

510 
__IO
 
uöt32_t
 
MACA3HR
;

511 
__IO
 
uöt32_t
 
MACA3LR
;

512 
uöt32_t
 
RESERVED2
[40];

513 
__IO
 
uöt32_t
 
MMCCR
;

514 
__IO
 
uöt32_t
 
MMCRIR
;

515 
__IO
 
uöt32_t
 
MMCTIR
;

516 
__IO
 
uöt32_t
 
MMCRIMR
;

517 
__IO
 
uöt32_t
 
MMCTIMR
;

518 
uöt32_t
 
RESERVED3
[14];

519 
__IO
 
uöt32_t
 
MMCTGFSCCR
;

520 
__IO
 
uöt32_t
 
MMCTGFMSCCR
;

521 
uöt32_t
 
RESERVED4
[5];

522 
__IO
 
uöt32_t
 
MMCTGFCR
;

523 
uöt32_t
 
RESERVED5
[10];

524 
__IO
 
uöt32_t
 
MMCRFCECR
;

525 
__IO
 
uöt32_t
 
MMCRFAECR
;

526 
uöt32_t
 
RESERVED6
[10];

527 
__IO
 
uöt32_t
 
MMCRGUFCR
;

528 
uöt32_t
 
RESERVED7
[334];

529 
__IO
 
uöt32_t
 
PTPTSCR
;

530 
__IO
 
uöt32_t
 
PTPSSIR
;

531 
__IO
 
uöt32_t
 
PTPTSHR
;

532 
__IO
 
uöt32_t
 
PTPTSLR
;

533 
__IO
 
uöt32_t
 
PTPTSHUR
;

534 
__IO
 
uöt32_t
 
PTPTSLUR
;

535 
__IO
 
uöt32_t
 
PTPTSAR
;

536 
__IO
 
uöt32_t
 
PTPTTHR
;

537 
__IO
 
uöt32_t
 
PTPTTLR
;

538 
__IO
 
uöt32_t
 
RESERVED8
;

539 
__IO
 
uöt32_t
 
PTPTSSR
;

540 
uöt32_t
 
RESERVED9
[565];

541 
__IO
 
uöt32_t
 
DMABMR
;

542 
__IO
 
uöt32_t
 
DMATPDR
;

543 
__IO
 
uöt32_t
 
DMARPDR
;

544 
__IO
 
uöt32_t
 
DMARDLAR
;

545 
__IO
 
uöt32_t
 
DMATDLAR
;

546 
__IO
 
uöt32_t
 
DMASR
;

547 
__IO
 
uöt32_t
 
DMAOMR
;

548 
__IO
 
uöt32_t
 
DMAIER
;

549 
__IO
 
uöt32_t
 
DMAMFBOCR
;

550 
__IO
 
uöt32_t
 
DMARSWTR
;

551 
uöt32_t
 
RESERVED10
[8];

552 
__IO
 
uöt32_t
 
DMACHTDR
;

553 
__IO
 
uöt32_t
 
DMACHRDR
;

554 
__IO
 
uöt32_t
 
DMACHTBAR
;

555 
__IO
 
uöt32_t
 
DMACHRBAR
;

556 } 
	tETH_Ty≥Def
;

564 
__IO
 
uöt32_t
 
IMR
;

565 
__IO
 
uöt32_t
 
EMR
;

566 
__IO
 
uöt32_t
 
RTSR
;

567 
__IO
 
uöt32_t
 
FTSR
;

568 
__IO
 
uöt32_t
 
SWIER
;

569 
__IO
 
uöt32_t
 
PR
;

570 } 
	tEXTI_Ty≥Def
;

578 
__IO
 
uöt32_t
 
ACR
;

579 
__IO
 
uöt32_t
 
KEYR
;

580 
__IO
 
uöt32_t
 
OPTKEYR
;

581 
__IO
 
uöt32_t
 
SR
;

582 
__IO
 
uöt32_t
 
CR
;

583 
__IO
 
uöt32_t
 
OPTCR
;

584 } 
	tFLASH_Ty≥Def
;

592 
__IO
 
uöt32_t
 
BTCR
[8];

593 } 
	tFSMC_B™k1_Ty≥Def
;

601 
__IO
 
uöt32_t
 
BWTR
[7];

602 } 
	tFSMC_B™k1E_Ty≥Def
;

610 
__IO
 
uöt32_t
 
PCR2
;

611 
__IO
 
uöt32_t
 
SR2
;

612 
__IO
 
uöt32_t
 
PMEM2
;

613 
__IO
 
uöt32_t
 
PATT2
;

614 
uöt32_t
 
RESERVED0
;

615 
__IO
 
uöt32_t
 
ECCR2
;

616 } 
	tFSMC_B™k2_Ty≥Def
;

624 
__IO
 
uöt32_t
 
PCR3
;

625 
__IO
 
uöt32_t
 
SR3
;

626 
__IO
 
uöt32_t
 
PMEM3
;

627 
__IO
 
uöt32_t
 
PATT3
;

628 
uöt32_t
 
RESERVED0
;

629 
__IO
 
uöt32_t
 
ECCR3
;

630 } 
	tFSMC_B™k3_Ty≥Def
;

638 
__IO
 
uöt32_t
 
PCR4
;

639 
__IO
 
uöt32_t
 
SR4
;

640 
__IO
 
uöt32_t
 
PMEM4
;

641 
__IO
 
uöt32_t
 
PATT4
;

642 
__IO
 
uöt32_t
 
PIO4
;

643 } 
	tFSMC_B™k4_Ty≥Def
;

651 
__IO
 
uöt32_t
 
MODER
;

652 
__IO
 
uöt32_t
 
OTYPER
;

653 
__IO
 
uöt32_t
 
OSPEEDR
;

654 
__IO
 
uöt32_t
 
PUPDR
;

655 
__IO
 
uöt32_t
 
IDR
;

656 
__IO
 
uöt32_t
 
ODR
;

657 
__IO
 
uöt16_t
 
BSRRL
;

658 
__IO
 
uöt16_t
 
BSRRH
;

659 
__IO
 
uöt32_t
 
LCKR
;

660 
__IO
 
uöt32_t
 
AFR
[2];

661 } 
	tGPIO_Ty≥Def
;

669 
__IO
 
uöt32_t
 
MEMRMP
;

670 
__IO
 
uöt32_t
 
PMC
;

671 
__IO
 
uöt32_t
 
EXTICR
[4];

672 
uöt32_t
 
RESERVED
[2];

673 
__IO
 
uöt32_t
 
CMPCR
;

674 } 
	tSYSCFG_Ty≥Def
;

682 
__IO
 
uöt16_t
 
CR1
;

683 
uöt16_t
 
RESERVED0
;

684 
__IO
 
uöt16_t
 
CR2
;

685 
uöt16_t
 
RESERVED1
;

686 
__IO
 
uöt16_t
 
OAR1
;

687 
uöt16_t
 
RESERVED2
;

688 
__IO
 
uöt16_t
 
OAR2
;

689 
uöt16_t
 
RESERVED3
;

690 
__IO
 
uöt16_t
 
DR
;

691 
uöt16_t
 
RESERVED4
;

692 
__IO
 
uöt16_t
 
SR1
;

693 
uöt16_t
 
RESERVED5
;

694 
__IO
 
uöt16_t
 
SR2
;

695 
uöt16_t
 
RESERVED6
;

696 
__IO
 
uöt16_t
 
CCR
;

697 
uöt16_t
 
RESERVED7
;

698 
__IO
 
uöt16_t
 
TRISE
;

699 
uöt16_t
 
RESERVED8
;

700 } 
	tI2C_Ty≥Def
;

708 
__IO
 
uöt32_t
 
KR
;

709 
__IO
 
uöt32_t
 
PR
;

710 
__IO
 
uöt32_t
 
RLR
;

711 
__IO
 
uöt32_t
 
SR
;

712 } 
	tIWDG_Ty≥Def
;

720 
__IO
 
uöt32_t
 
CR
;

721 
__IO
 
uöt32_t
 
CSR
;

722 } 
	tPWR_Ty≥Def
;

730 
__IO
 
uöt32_t
 
CR
;

731 
__IO
 
uöt32_t
 
PLLCFGR
;

732 
__IO
 
uöt32_t
 
CFGR
;

733 
__IO
 
uöt32_t
 
CIR
;

734 
__IO
 
uöt32_t
 
AHB1RSTR
;

735 
__IO
 
uöt32_t
 
AHB2RSTR
;

736 
__IO
 
uöt32_t
 
AHB3RSTR
;

737 
uöt32_t
 
RESERVED0
;

738 
__IO
 
uöt32_t
 
APB1RSTR
;

739 
__IO
 
uöt32_t
 
APB2RSTR
;

740 
uöt32_t
 
RESERVED1
[2];

741 
__IO
 
uöt32_t
 
AHB1ENR
;

742 
__IO
 
uöt32_t
 
AHB2ENR
;

743 
__IO
 
uöt32_t
 
AHB3ENR
;

744 
uöt32_t
 
RESERVED2
;

745 
__IO
 
uöt32_t
 
APB1ENR
;

746 
__IO
 
uöt32_t
 
APB2ENR
;

747 
uöt32_t
 
RESERVED3
[2];

748 
__IO
 
uöt32_t
 
AHB1LPENR
;

749 
__IO
 
uöt32_t
 
AHB2LPENR
;

750 
__IO
 
uöt32_t
 
AHB3LPENR
;

751 
uöt32_t
 
RESERVED4
;

752 
__IO
 
uöt32_t
 
APB1LPENR
;

753 
__IO
 
uöt32_t
 
APB2LPENR
;

754 
uöt32_t
 
RESERVED5
[2];

755 
__IO
 
uöt32_t
 
BDCR
;

756 
__IO
 
uöt32_t
 
CSR
;

757 
uöt32_t
 
RESERVED6
[2];

758 
__IO
 
uöt32_t
 
SSCGR
;

759 
__IO
 
uöt32_t
 
PLLI2SCFGR
;

760 } 
	tRCC_Ty≥Def
;

768 
__IO
 
uöt32_t
 
TR
;

769 
__IO
 
uöt32_t
 
DR
;

770 
__IO
 
uöt32_t
 
CR
;

771 
__IO
 
uöt32_t
 
ISR
;

772 
__IO
 
uöt32_t
 
PRER
;

773 
__IO
 
uöt32_t
 
WUTR
;

774 
__IO
 
uöt32_t
 
CALIBR
;

775 
__IO
 
uöt32_t
 
ALRMAR
;

776 
__IO
 
uöt32_t
 
ALRMBR
;

777 
__IO
 
uöt32_t
 
WPR
;

778 
__IO
 
uöt32_t
 
SSR
;

779 
__IO
 
uöt32_t
 
SHIFTR
;

780 
__IO
 
uöt32_t
 
TSTR
;

781 
__IO
 
uöt32_t
 
TSDR
;

782 
__IO
 
uöt32_t
 
TSSSR
;

783 
__IO
 
uöt32_t
 
CALR
;

784 
__IO
 
uöt32_t
 
TAFCR
;

785 
__IO
 
uöt32_t
 
ALRMASSR
;

786 
__IO
 
uöt32_t
 
ALRMBSSR
;

787 
uöt32_t
 
RESERVED7
;

788 
__IO
 
uöt32_t
 
BKP0R
;

789 
__IO
 
uöt32_t
 
BKP1R
;

790 
__IO
 
uöt32_t
 
BKP2R
;

791 
__IO
 
uöt32_t
 
BKP3R
;

792 
__IO
 
uöt32_t
 
BKP4R
;

793 
__IO
 
uöt32_t
 
BKP5R
;

794 
__IO
 
uöt32_t
 
BKP6R
;

795 
__IO
 
uöt32_t
 
BKP7R
;

796 
__IO
 
uöt32_t
 
BKP8R
;

797 
__IO
 
uöt32_t
 
BKP9R
;

798 
__IO
 
uöt32_t
 
BKP10R
;

799 
__IO
 
uöt32_t
 
BKP11R
;

800 
__IO
 
uöt32_t
 
BKP12R
;

801 
__IO
 
uöt32_t
 
BKP13R
;

802 
__IO
 
uöt32_t
 
BKP14R
;

803 
__IO
 
uöt32_t
 
BKP15R
;

804 
__IO
 
uöt32_t
 
BKP16R
;

805 
__IO
 
uöt32_t
 
BKP17R
;

806 
__IO
 
uöt32_t
 
BKP18R
;

807 
__IO
 
uöt32_t
 
BKP19R
;

808 } 
	tRTC_Ty≥Def
;

816 
__IO
 
uöt32_t
 
POWER
;

817 
__IO
 
uöt32_t
 
CLKCR
;

818 
__IO
 
uöt32_t
 
ARG
;

819 
__IO
 
uöt32_t
 
CMD
;

820 
__I
 
uöt32_t
 
RESPCMD
;

821 
__I
 
uöt32_t
 
RESP1
;

822 
__I
 
uöt32_t
 
RESP2
;

823 
__I
 
uöt32_t
 
RESP3
;

824 
__I
 
uöt32_t
 
RESP4
;

825 
__IO
 
uöt32_t
 
DTIMER
;

826 
__IO
 
uöt32_t
 
DLEN
;

827 
__IO
 
uöt32_t
 
DCTRL
;

828 
__I
 
uöt32_t
 
DCOUNT
;

829 
__I
 
uöt32_t
 
STA
;

830 
__IO
 
uöt32_t
 
ICR
;

831 
__IO
 
uöt32_t
 
MASK
;

832 
uöt32_t
 
RESERVED0
[2];

833 
__I
 
uöt32_t
 
FIFOCNT
;

834 
uöt32_t
 
RESERVED1
[13];

835 
__IO
 
uöt32_t
 
FIFO
;

836 } 
	tSDIO_Ty≥Def
;

844 
__IO
 
uöt16_t
 
CR1
;

845 
uöt16_t
 
RESERVED0
;

846 
__IO
 
uöt16_t
 
CR2
;

847 
uöt16_t
 
RESERVED1
;

848 
__IO
 
uöt16_t
 
SR
;

849 
uöt16_t
 
RESERVED2
;

850 
__IO
 
uöt16_t
 
DR
;

851 
uöt16_t
 
RESERVED3
;

852 
__IO
 
uöt16_t
 
CRCPR
;

853 
uöt16_t
 
RESERVED4
;

854 
__IO
 
uöt16_t
 
RXCRCR
;

855 
uöt16_t
 
RESERVED5
;

856 
__IO
 
uöt16_t
 
TXCRCR
;

857 
uöt16_t
 
RESERVED6
;

858 
__IO
 
uöt16_t
 
I2SCFGR
;

859 
uöt16_t
 
RESERVED7
;

860 
__IO
 
uöt16_t
 
I2SPR
;

861 
uöt16_t
 
RESERVED8
;

862 } 
	tSPI_Ty≥Def
;

870 
__IO
 
uöt16_t
 
CR1
;

871 
uöt16_t
 
RESERVED0
;

872 
__IO
 
uöt16_t
 
CR2
;

873 
uöt16_t
 
RESERVED1
;

874 
__IO
 
uöt16_t
 
SMCR
;

875 
uöt16_t
 
RESERVED2
;

876 
__IO
 
uöt16_t
 
DIER
;

877 
uöt16_t
 
RESERVED3
;

878 
__IO
 
uöt16_t
 
SR
;

879 
uöt16_t
 
RESERVED4
;

880 
__IO
 
uöt16_t
 
EGR
;

881 
uöt16_t
 
RESERVED5
;

882 
__IO
 
uöt16_t
 
CCMR1
;

883 
uöt16_t
 
RESERVED6
;

884 
__IO
 
uöt16_t
 
CCMR2
;

885 
uöt16_t
 
RESERVED7
;

886 
__IO
 
uöt16_t
 
CCER
;

887 
uöt16_t
 
RESERVED8
;

888 
__IO
 
uöt32_t
 
CNT
;

889 
__IO
 
uöt16_t
 
PSC
;

890 
uöt16_t
 
RESERVED9
;

891 
__IO
 
uöt32_t
 
ARR
;

892 
__IO
 
uöt16_t
 
RCR
;

893 
uöt16_t
 
RESERVED10
;

894 
__IO
 
uöt32_t
 
CCR1
;

895 
__IO
 
uöt32_t
 
CCR2
;

896 
__IO
 
uöt32_t
 
CCR3
;

897 
__IO
 
uöt32_t
 
CCR4
;

898 
__IO
 
uöt16_t
 
BDTR
;

899 
uöt16_t
 
RESERVED11
;

900 
__IO
 
uöt16_t
 
DCR
;

901 
uöt16_t
 
RESERVED12
;

902 
__IO
 
uöt16_t
 
DMAR
;

903 
uöt16_t
 
RESERVED13
;

904 
__IO
 
uöt16_t
 
OR
;

905 
uöt16_t
 
RESERVED14
;

906 } 
	tTIM_Ty≥Def
;

914 
__IO
 
uöt16_t
 
SR
;

915 
uöt16_t
 
RESERVED0
;

916 
__IO
 
uöt16_t
 
DR
;

917 
uöt16_t
 
RESERVED1
;

918 
__IO
 
uöt16_t
 
BRR
;

919 
uöt16_t
 
RESERVED2
;

920 
__IO
 
uöt16_t
 
CR1
;

921 
uöt16_t
 
RESERVED3
;

922 
__IO
 
uöt16_t
 
CR2
;

923 
uöt16_t
 
RESERVED4
;

924 
__IO
 
uöt16_t
 
CR3
;

925 
uöt16_t
 
RESERVED5
;

926 
__IO
 
uöt16_t
 
GTPR
;

927 
uöt16_t
 
RESERVED6
;

928 } 
	tUSART_Ty≥Def
;

936 
__IO
 
uöt32_t
 
CR
;

937 
__IO
 
uöt32_t
 
CFR
;

938 
__IO
 
uöt32_t
 
SR
;

939 } 
	tWWDG_Ty≥Def
;

947 
__IO
 
uöt32_t
 
CR
;

948 
__IO
 
uöt32_t
 
SR
;

949 
__IO
 
uöt32_t
 
DR
;

950 
__IO
 
uöt32_t
 
DOUT
;

951 
__IO
 
uöt32_t
 
DMACR
;

952 
__IO
 
uöt32_t
 
IMSCR
;

953 
__IO
 
uöt32_t
 
RISR
;

954 
__IO
 
uöt32_t
 
MISR
;

955 
__IO
 
uöt32_t
 
K0LR
;

956 
__IO
 
uöt32_t
 
K0RR
;

957 
__IO
 
uöt32_t
 
K1LR
;

958 
__IO
 
uöt32_t
 
K1RR
;

959 
__IO
 
uöt32_t
 
K2LR
;

960 
__IO
 
uöt32_t
 
K2RR
;

961 
__IO
 
uöt32_t
 
K3LR
;

962 
__IO
 
uöt32_t
 
K3RR
;

963 
__IO
 
uöt32_t
 
IV0LR
;

964 
__IO
 
uöt32_t
 
IV0RR
;

965 
__IO
 
uöt32_t
 
IV1LR
;

966 
__IO
 
uöt32_t
 
IV1RR
;

967 } 
	tCRYP_Ty≥Def
;

975 
__IO
 
uöt32_t
 
CR
;

976 
__IO
 
uöt32_t
 
DIN
;

977 
__IO
 
uöt32_t
 
STR
;

978 
__IO
 
uöt32_t
 
HR
[5];

979 
__IO
 
uöt32_t
 
IMR
;

980 
__IO
 
uöt32_t
 
SR
;

981 
uöt32_t
 
RESERVED
[52];

982 
__IO
 
uöt32_t
 
CSR
[51];

983 } 
	tHASH_Ty≥Def
;

991 
__IO
 
uöt32_t
 
CR
;

992 
__IO
 
uöt32_t
 
SR
;

993 
__IO
 
uöt32_t
 
DR
;

994 } 
	tRNG_Ty≥Def
;

1002 
__IO
 
uöt32_t
 
GOTGCTL
;

1003 
__IO
 
uöt32_t
 
GOTGINT
;

1004 
__IO
 
uöt32_t
 
GAHBCFG
;

1005 
__IO
 
uöt32_t
 
GUSBCFG
;

1006 
__IO
 
uöt32_t
 
GRSTCTL
;

1007 
__IO
 
uöt32_t
 
GINTSTS
;

1008 
__IO
 
uöt32_t
 
GINTMSK
;

1009 
__IO
 
uöt32_t
 
GRXSTSR
;

1010 
__IO
 
uöt32_t
 
GRXSTSP
;

1011 
__IO
 
uöt32_t
 
GRXFSIZ
;

1013 
__IO
 
uöt32_t
 
HNPTXFSIZ
;

1014 
__IO
 
uöt32_t
 
DIEPTXF0
;

1016 
__IO
 
uöt32_t
 
HNPTXSTS
;

1017 
__IO
 
uöt32_t
 
GI2CCTL
;

1018 
uöt32_t
 
RESERVED0
;

1019 
__IO
 
uöt32_t
 
GCCFG
;

1020 
__IO
 
uöt32_t
 
CID
;

1021 
uöt32_t
 
RESERVED1
[48];

1022 
__IO
 
uöt32_t
 
HPTXFSIZ
;

1023 
__IO
 
uöt32_t
 
DIEPTXF1
;

1024 
__IO
 
uöt32_t
 
DIEPTXF2
;

1025 
__IO
 
uöt32_t
 
DIEPTXF3
;

1026 
__IO
 
uöt32_t
 
DIEPTXF4
;

1027 
__IO
 
uöt32_t
 
DIEPTXF5
;

1028 
__IO
 
uöt32_t
 
DIEPTXF6
;

1029 
__IO
 
uöt32_t
 
DIEPTXF7
;

1030 
__IO
 
uöt32_t
 
DIEPTXF8
;

1031 
__IO
 
uöt32_t
 
DIEPTXF9
;

1032 
__IO
 
uöt32_t
 
DIEPTXF10
;

1033 
__IO
 
uöt32_t
 
DIEPTXF11
;

1034 
__IO
 
uöt32_t
 
DIEPTXF12
;

1035 
__IO
 
uöt32_t
 
DIEPTXF13
;

1036 
__IO
 
uöt32_t
 
DIEPTXF14
;

1037 
__IO
 
uöt32_t
 
DIEPTXF15
;

1038 
uöt32_t
 
RESERVED2
[176];

1039 
__IO
 
uöt32_t
 
HCFG
;

1040 
__IO
 
uöt32_t
 
HFIR
;

1041 
__IO
 
uöt32_t
 
HFNUM
;

1042 
uöt32_t
 
RESERVED3
;

1043 
__IO
 
uöt32_t
 
HPTXSTS
;

1044 
__IO
 
uöt32_t
 
HAINT
;

1045 
__IO
 
uöt32_t
 
HAINTMSK
;

1046 
uöt32_t
 
RESERVED4
[9];

1047 
__IO
 
uöt32_t
 
HPRT
;

1048 
uöt32_t
 
RESERVED5
[47];

1049 
__IO
 
uöt32_t
 
HCCHAR0
;

1050 
uöt32_t
 
RESERVED6
;

1051 
__IO
 
uöt32_t
 
HCINT0
;

1052 
__IO
 
uöt32_t
 
HCINTMSK0
;

1053 
__IO
 
uöt32_t
 
HCTSIZ0
;

1054 
uöt32_t
 
RESERVED7
[3];

1055 
__IO
 
uöt32_t
 
HCCHAR1
;

1056 
uöt32_t
 
RESERVED8
;

1057 
__IO
 
uöt32_t
 
HCINT1
;

1058 
__IO
 
uöt32_t
 
HCINTMSK1
;

1059 
__IO
 
uöt32_t
 
HCTSIZ1
;

1060 
uöt32_t
 
RESERVED9
[3];

1061 
__IO
 
uöt32_t
 
HCCHAR2
;

1062 
uöt32_t
 
RESERVED10
;

1063 
__IO
 
uöt32_t
 
HCINT2
;

1064 
__IO
 
uöt32_t
 
HCINTMSK2
;

1065 
__IO
 
uöt32_t
 
HCTSIZ2
;

1066 
uöt32_t
 
RESERVED11
[3];

1067 
__IO
 
uöt32_t
 
HCCHR3
;

1068 
uöt32_t
 
RESERVED12
;

1069 
__IO
 
uöt32_t
 
HCINT3
;

1070 
__IO
 
uöt32_t
 
HCINTMSK3
;

1071 
__IO
 
uöt32_t
 
HCTSIZ3
;

1072 
uöt32_t
 
RESERVED13
[3];

1073 
__IO
 
uöt32_t
 
HCCHR4
;

1074 
uöt32_t
 
RESERVED14
;

1075 
__IO
 
uöt32_t
 
HCINT4
;

1076 
__IO
 
uöt32_t
 
HCINTMSK4
;

1077 
__IO
 
uöt32_t
 
HCTSIZ4
;

1078 
uöt32_t
 
RESERVED15
[3];

1079 
__IO
 
uöt32_t
 
HCCHR5
;

1080 
uöt32_t
 
RESERVED16
;

1081 
__IO
 
uöt32_t
 
HCINT5
;

1082 
__IO
 
uöt32_t
 
HCINTMSK5
;

1083 
__IO
 
uöt32_t
 
HCTSIZ5
;

1084 
uöt32_t
 
RESERVED17
[3];

1085 
__IO
 
uöt32_t
 
HCCHR6
;

1086 
uöt32_t
 
RESERVED18
;

1087 
__IO
 
uöt32_t
 
HCINT6
;

1088 
__IO
 
uöt32_t
 
HCINTMSK6
;

1089 
__IO
 
uöt32_t
 
HCTSIZ6
;

1090 
uöt32_t
 
RESERVED19
[3];

1091 
__IO
 
uöt32_t
 
HCCHR7
;

1092 
uöt32_t
 
RESERVED20
;

1093 
__IO
 
uöt32_t
 
HCINT7
;

1094 
__IO
 
uöt32_t
 
HCINTMSK7
;

1095 
__IO
 
uöt32_t
 
HCTSIZ7
;

1096 
uöt32_t
 
RESERVED21
[3];

1097 
__IO
 
uöt32_t
 
HCCHR8
;

1098 
uöt32_t
 
RESERVED22
;

1099 
__IO
 
uöt32_t
 
HCINT8
;

1100 
__IO
 
uöt32_t
 
HCINTMSK8
;

1101 
__IO
 
uöt32_t
 
HCTSIZ8
;

1102 
uöt32_t
 
RESERVED23
[3];

1103 
__IO
 
uöt32_t
 
HCCHR9
;

1104 
uöt32_t
 
RESERVED24
;

1105 
__IO
 
uöt32_t
 
HCINT9
;

1106 
__IO
 
uöt32_t
 
HCINTMSK9
;

1107 
__IO
 
uöt32_t
 
HCTSIZ9
;

1108 
uöt32_t
 
RESERVED25
[3];

1109 
__IO
 
uöt32_t
 
HCCHR10
;

1110 
uöt32_t
 
RESERVED26
;

1111 
__IO
 
uöt32_t
 
HCINT10
;

1112 
__IO
 
uöt32_t
 
HCINTMSK10
;

1113 
__IO
 
uöt32_t
 
HCTSIZ10
;

1114 
uöt32_t
 
RESERVED27
[3];

1115 
__IO
 
uöt32_t
 
HCCHR11
;

1116 
uöt32_t
 
RESERVED28
;

1117 
__IO
 
uöt32_t
 
HCINT11
;

1118 
__IO
 
uöt32_t
 
HCINTMSK11
;

1119 
__IO
 
uöt32_t
 
HCTSIZ11
;

1120 
uöt32_t
 
RESERVED29
[3];

1121 
__IO
 
uöt32_t
 
HCCHR12
;

1122 
uöt32_t
 
RESERVED30
;

1123 
__IO
 
uöt32_t
 
HCINT12
;

1124 
__IO
 
uöt32_t
 
HCINTMSK12
;

1125 
__IO
 
uöt32_t
 
HCTSIZ12
;

1126 
uöt32_t
 
RESERVED31
[3];

1127 
__IO
 
uöt32_t
 
HCCHR13
;

1128 
uöt32_t
 
RESERVED32
;

1129 
__IO
 
uöt32_t
 
HCINT13
;

1130 
__IO
 
uöt32_t
 
HCINTMSK13
;

1131 
__IO
 
uöt32_t
 
HCTSIZ13
;

1132 
uöt32_t
 
RESERVED33
[3];

1133 
__IO
 
uöt32_t
 
HCCHR14
;

1134 
uöt32_t
 
RESERVED34
;

1135 
__IO
 
uöt32_t
 
HCINT14
;

1136 
__IO
 
uöt32_t
 
HCINTMSK14
;

1137 
__IO
 
uöt32_t
 
HCTSIZ14
;

1138 
uöt32_t
 
RESERVED35
[3];

1139 
__IO
 
uöt32_t
 
HCCHR15
;

1140 
uöt32_t
 
RESERVED36
;

1141 
__IO
 
uöt32_t
 
HCINT15
;

1142 
__IO
 
uöt32_t
 
HCINTMSK15
;

1143 
__IO
 
uöt32_t
 
HCTSIZ15
;

1144 
uöt32_t
 
RESERVED37
[3];

1145 
uöt32_t
 
RESERVED38
[64];

1146 
__IO
 
uöt32_t
 
DCFG
;

1147 
__IO
 
uöt32_t
 
DCTL
;

1148 
__IO
 
uöt32_t
 
DSTS
;

1149 
uöt32_t
 
RESERVED39
;

1150 
__IO
 
uöt32_t
 
DIEPMSK
;

1151 
__IO
 
uöt32_t
 
DOEPMSK
;

1152 
__IO
 
uöt32_t
 
DAINT
;

1153 
__IO
 
uöt32_t
 
DAINTMSK
;

1154 
uöt32_t
 
RESERVED40
[2];

1155 
__IO
 
uöt32_t
 
DVBUSDIS
;

1156 
__IO
 
uöt32_t
 
DVBUSPULSE
;

1157 
uöt32_t
 
RESERVED41
;

1158 
__IO
 
uöt32_t
 
DIEPEMPMSK
;

1159 
uöt32_t
 
RESERVED42
[50];

1160 
__IO
 
uöt32_t
 
DIEPCTL0
;

1161 
uöt32_t
 
RESERVED43
;

1162 
__IO
 
uöt32_t
 
DIEPINT0
;

1163 
uöt32_t
 
RESERVED44
;

1164 
__IO
 
uöt32_t
 
DIEPTSIZ0
;

1165 
uöt32_t
 
RESERVED45
;

1166 
__IO
 
uöt32_t
 
DTXFSTS0
;

1167 
uöt32_t
 
RESERVED46
;

1168 
__IO
 
uöt32_t
 
DIEPCTL1
;

1169 
uöt32_t
 
RESERVED47
;

1170 
__IO
 
uöt32_t
 
DIEPINT1
;

1171 
uöt32_t
 
RESERVED48
;

1172 
__IO
 
uöt32_t
 
DIEPTSIZ1
;

1173 
uöt32_t
 
RESERVED49
;

1174 
__IO
 
uöt32_t
 
DTXFSTS1
;

1175 
uöt32_t
 
RESERVED50
;

1176 
__IO
 
uöt32_t
 
DIEPCTL2
;

1177 
uöt32_t
 
RESERVED51
;

1178 
__IO
 
uöt32_t
 
DIEPINT2
;

1179 
uöt32_t
 
RESERVED52
;

1180 
__IO
 
uöt32_t
 
DIEPTSIZ2
;

1181 
uöt32_t
 
RESERVED53
;

1182 
__IO
 
uöt32_t
 
DTXFSTS2
;

1183 
uöt32_t
 
RESERVED54
;

1184 
__IO
 
uöt32_t
 
DIEPCTL3
;

1185 
uöt32_t
 
RESERVED55
;

1186 
__IO
 
uöt32_t
 
DIEPINT3
;

1187 
uöt32_t
 
RESERVED56
;

1188 
__IO
 
uöt32_t
 
DIEPTSIZ3
;

1189 
uöt32_t
 
RESERVED57
;

1190 
__IO
 
uöt32_t
 
DTXFSTS3
;

1191 
uöt32_t
 
RESERVED58
;

1192 
__IO
 
uöt32_t
 
DIEPCTL4
;

1193 
uöt32_t
 
RESERVED59
;

1194 
__IO
 
uöt32_t
 
DIEPINT4
;

1195 
uöt32_t
 
RESERVED60
;

1196 
__IO
 
uöt32_t
 
DIEPTSIZ4
;

1197 
uöt32_t
 
RESERVED61
;

1198 
__IO
 
uöt32_t
 
DTXFSTS4
;

1199 
uöt32_t
 
RESERVED62
;

1200 
__IO
 
uöt32_t
 
DIEPCTL5
;

1201 
uöt32_t
 
RESERVED63
;

1202 
__IO
 
uöt32_t
 
DIEPINT5
;

1203 
uöt32_t
 
RESERVED64
;

1204 
__IO
 
uöt32_t
 
DIEPTSIZ5
;

1205 
uöt32_t
 
RESERVED65
[3];

1206 
__IO
 
uöt32_t
 
DIEPCTL6
;

1207 
uöt32_t
 
RESERVED66
;

1208 
__IO
 
uöt32_t
 
DIEPINT6
;

1209 
uöt32_t
 
RESERVED67
;

1210 
__IO
 
uöt32_t
 
DIEPTSIZ6
;

1211 
uöt32_t
 
RESERVED68
[3];

1212 
__IO
 
uöt32_t
 
DIEPCTL7
;

1213 
uöt32_t
 
RESERVED69
;

1214 
__IO
 
uöt32_t
 
DIEPINT7
;

1215 
uöt32_t
 
RESERVED70
;

1216 
__IO
 
uöt32_t
 
DIEPTSIZ7
;

1217 
uöt32_t
 
RESERVED71
[3];

1218 
__IO
 
uöt32_t
 
DIEPCTL8
;

1219 
uöt32_t
 
RESERVED72
;

1220 
__IO
 
uöt32_t
 
DIEPINT8
;

1221 
uöt32_t
 
RESERVED73
;

1222 
__IO
 
uöt32_t
 
DIEPTSIZ8
;

1223 
uöt32_t
 
RESERVED74
[3];

1224 
__IO
 
uöt32_t
 
DIEPCTL9
;

1225 
uöt32_t
 
RESERVED75
;

1226 
__IO
 
uöt32_t
 
DIEPINT9
;

1227 
uöt32_t
 
RESERVED76
;

1228 
__IO
 
uöt32_t
 
DIEPTSIZ9
;

1229 
uöt32_t
 
RESERVED77
[3];

1230 
__IO
 
uöt32_t
 
DIEPCTL10
;

1231 
uöt32_t
 
RESERVED78
;

1232 
__IO
 
uöt32_t
 
DIEPINT10
;

1233 
uöt32_t
 
RESERVED79
;

1234 
__IO
 
uöt32_t
 
DIEPTSIZ10
;

1235 
uöt32_t
 
RESERVED80
[3];

1236 
__IO
 
uöt32_t
 
DIEPCTL11
;

1237 
uöt32_t
 
RESERVED81
;

1238 
__IO
 
uöt32_t
 
DIEPINT11
;

1239 
uöt32_t
 
RESERVED82
;

1240 
__IO
 
uöt32_t
 
DIEPTSIZ11
;

1241 
uöt32_t
 
RESERVED83
[3];

1242 
__IO
 
uöt32_t
 
DIEPCTL12
;

1243 
uöt32_t
 
RESERVED84
;

1244 
__IO
 
uöt32_t
 
DIEPINT12
;

1245 
uöt32_t
 
RESERVED85
;

1246 
__IO
 
uöt32_t
 
DIEPTSIZ86
;

1247 
uöt32_t
 
RESERVED86
[3];

1248 
__IO
 
uöt32_t
 
DIEPCTL13
;

1249 
uöt32_t
 
RESERVED87
;

1250 
__IO
 
uöt32_t
 
DIEPINT13
;

1251 
uöt32_t
 
RESERVED88
;

1252 
__IO
 
uöt32_t
 
DIEPTSIZ13
;

1253 
uöt32_t
 
RESERVED89
[3];

1254 
__IO
 
uöt32_t
 
DIEPCTL14
;

1255 
uöt32_t
 
RESERVED90
;

1256 
__IO
 
uöt32_t
 
DIEPINT14
;

1257 
uöt32_t
 
RESERVED91
;

1258 
__IO
 
uöt32_t
 
DIEPTSIZ14
;

1259 
uöt32_t
 
RESERVED92
[3];

1260 
__IO
 
uöt32_t
 
DIEPCTL15
;

1261 
uöt32_t
 
RESERVED93
;

1262 
__IO
 
uöt32_t
 
DIEPINT15
;

1263 
uöt32_t
 
RESERVED94
;

1264 
__IO
 
uöt32_t
 
DIEPTSIZ15
;

1265 
uöt32_t
 
RESERVED95
[3];

1266 
__IO
 
uöt32_t
 
DOEPCTL0
;

1267 
uöt32_t
 
RESERVED96
;

1268 
__IO
 
uöt32_t
 
DOEPINT0
;

1269 
uöt32_t
 
RESERVED97
;

1270 
__IO
 
uöt32_t
 
DOEPTSIZ0
;

1271 
uöt32_t
 
RESERVED98
[3];

1272 
__IO
 
uöt32_t
 
DOEPCTL1
;

1273 
uöt32_t
 
RESERVED99
;

1274 
__IO
 
uöt32_t
 
DOEPINT1
;

1275 
uöt32_t
 
RESERVED100
;

1276 
__IO
 
uöt32_t
 
DOEPTSIZ1
;

1277 
uöt32_t
 
RESERVED101
[3];

1278 
__IO
 
uöt32_t
 
DOEPCTL2
;

1279 
uöt32_t
 
RESERVED102
;

1280 
__IO
 
uöt32_t
 
DOEPINT2
;

1281 
uöt32_t
 
RESERVED103
;

1282 
__IO
 
uöt32_t
 
DOEPTSIZ2
;

1283 
uöt32_t
 
RESERVED104
[3];

1284 
__IO
 
uöt32_t
 
DOEPCTL3
;

1285 
uöt32_t
 
RESERVED105
;

1286 
__IO
 
uöt32_t
 
DOEPINT3
;

1287 
uöt32_t
 
RESERVED106
;

1288 
__IO
 
uöt32_t
 
DOEPTSIZ3
;

1289 
uöt32_t
 
RESERVED107
[3];

1290 
__IO
 
uöt32_t
 
DOEPCTL4
;

1291 
uöt32_t
 
RESERVED108
;

1292 
__IO
 
uöt32_t
 
DOEPINT4
;

1293 
uöt32_t
 
RESERVED109
;

1294 
__IO
 
uöt32_t
 
DOEPTSIZ4
;

1295 
uöt32_t
 
RESERVED110
[3];

1296 
__IO
 
uöt32_t
 
DOEPCTL5
;

1297 
uöt32_t
 
RESERVED111
;

1298 
__IO
 
uöt32_t
 
DOEPINT5
;

1299 
uöt32_t
 
RESERVED112
;

1300 
__IO
 
uöt32_t
 
DOEPTSIZ5
;

1301 
uöt32_t
 
RESERVED113
[3];

1302 
__IO
 
uöt32_t
 
DOEPCTL6
;

1303 
uöt32_t
 
RESERVED114
;

1304 
__IO
 
uöt32_t
 
DOEPINT6
;

1305 
uöt32_t
 
RESERVED115
;

1306 
__IO
 
uöt32_t
 
DOEPTSIZ6
;

1307 
uöt32_t
 
RESERVED116
[3];

1308 
__IO
 
uöt32_t
 
DOEPCTL7
;

1309 
uöt32_t
 
RESERVED117
;

1310 
__IO
 
uöt32_t
 
DOEPINT7
;

1311 
uöt32_t
 
RESERVED118
;

1312 
__IO
 
uöt32_t
 
DOEPTSIZ7
;

1313 
uöt32_t
 
RESERVED119
[3];

1314 
__IO
 
uöt32_t
 
DOEPCTL8
;

1315 
uöt32_t
 
RESERVED120
;

1316 
__IO
 
uöt32_t
 
DOEPINT8
;

1317 
uöt32_t
 
RESERVED121
;

1318 
__IO
 
uöt32_t
 
DOEPTSIZ8
;

1319 
uöt32_t
 
RESERVED122
[3];

1320 
__IO
 
uöt32_t
 
DOEPCTL9
;

1321 
uöt32_t
 
RESERVED123
;

1322 
__IO
 
uöt32_t
 
DOEPINT9
;

1323 
uöt32_t
 
RESERVED124
;

1324 
__IO
 
uöt32_t
 
DOEPTSIZ9
;

1325 
uöt32_t
 
RESERVED125
[3];

1326 
__IO
 
uöt32_t
 
DOEPCTL10
;

1327 
uöt32_t
 
RESERVED126
;

1328 
__IO
 
uöt32_t
 
DOEPINT10
;

1329 
uöt32_t
 
RESERVED127
;

1330 
__IO
 
uöt32_t
 
DOEPTSIZ10
;

1331 
uöt32_t
 
RESERVED128
[3];

1332 
__IO
 
uöt32_t
 
DOEPCTL11
;

1333 
uöt32_t
 
RESERVED129
;

1334 
__IO
 
uöt32_t
 
DOEPINT11
;

1335 
uöt32_t
 
RESERVED130
;

1336 
__IO
 
uöt32_t
 
DOEPTSIZ11
;

1337 
uöt32_t
 
RESERVED131
[3];

1338 
__IO
 
uöt32_t
 
DOEPCTL12
;

1339 
uöt32_t
 
RESERVED132
;

1340 
__IO
 
uöt32_t
 
DOEPINT12
;

1341 
uöt32_t
 
RESERVED133
;

1342 
__IO
 
uöt32_t
 
DOEPTSIZ12
;

1343 
uöt32_t
 
RESERVED134
[3];

1344 
__IO
 
uöt32_t
 
DOEPCTL13
;

1345 
uöt32_t
 
RESERVED135
;

1346 
__IO
 
uöt32_t
 
DOEPINT13
;

1347 
uöt32_t
 
RESERVED136
;

1348 
__IO
 
uöt32_t
 
DOEPTSIZ13
;

1349 
uöt32_t
 
RESERVED137
[3];

1350 
__IO
 
uöt32_t
 
DOEPCTL14
;

1351 
uöt32_t
 
RESERVED138
;

1352 
__IO
 
uöt32_t
 
DOEPINT14
;

1353 
uöt32_t
 
RESERVED139
;

1354 
__IO
 
uöt32_t
 
DOEPTSIZ14
;

1355 
uöt32_t
 
RESERVED140
[3];

1356 
__IO
 
uöt32_t
 
DOEPCTL15
;

1357 
uöt32_t
 
RESERVED141
;

1358 
__IO
 
uöt32_t
 
DOEPINT15
;

1359 
uöt32_t
 
RESERVED142
;

1360 
__IO
 
uöt32_t
 
DOEPTSIZ15
;

1361 
uöt32_t
 
RESERVED143
[3];

1362 
uöt32_t
 
RESERVED144
[64];

1363 
__IO
 
uöt32_t
 
PCGCCTL
;

1364 } 
	tOTG_FS_Ty≥Def
;

1372 
__IO
 
uöt32_t
 
GOTGCTL
;

1373 
__IO
 
uöt32_t
 
GOTGINT
;

1374 
__IO
 
uöt32_t
 
GAHBCFG
;

1375 
__IO
 
uöt32_t
 
GUSBCFG
;

1376 
__IO
 
uöt32_t
 
GRSTCTL
;

1377 
__IO
 
uöt32_t
 
GINTSTS
;

1378 
__IO
 
uöt32_t
 
GINTMSK
;

1379 
__IO
 
uöt32_t
 
GRXSTSR
;

1380 
__IO
 
uöt32_t
 
GRXSTSP
;

1381 
__IO
 
uöt32_t
 
GRXFSIZ
;

1383 
__IO
 
uöt32_t
 
GNPTXFSIZ
;

1384 
__IO
 
uöt32_t
 
TX0FSIZ
;

1386 
__IO
 
uöt32_t
 
GNPTXSTS
;

1387 
__IO
 
uöt32_t
 
GI2CCTL
;

1388 
uöt32_t
 
RESERVED0
;

1389 
__IO
 
uöt32_t
 
GCCFG
;

1390 
__IO
 
uöt32_t
 
CID
;

1391 
uöt32_t
 
RESERVED1
[48];

1392 
__IO
 
uöt32_t
 
HPTXFSIZ
;

1393 
__IO
 
uöt32_t
 
DIEPTXF1
;

1394 
__IO
 
uöt32_t
 
DIEPTXF2
;

1395 
__IO
 
uöt32_t
 
DIEPTXF3
;

1396 
__IO
 
uöt32_t
 
DIEPTXF4
;

1397 
__IO
 
uöt32_t
 
DIEPTXF5
;

1398 
__IO
 
uöt32_t
 
DIEPTXF6
;

1399 
__IO
 
uöt32_t
 
DIEPTXF7
;

1400 
__IO
 
uöt32_t
 
DIEPTXF8
;

1401 
__IO
 
uöt32_t
 
DIEPTXF9
;

1402 
__IO
 
uöt32_t
 
DIEPTXF10
;

1403 
__IO
 
uöt32_t
 
DIEPTXF11
;

1404 
__IO
 
uöt32_t
 
DIEPTXF12
;

1405 
__IO
 
uöt32_t
 
DIEPTXF13
;

1406 
__IO
 
uöt32_t
 
DIEPTXF14
;

1407 
__IO
 
uöt32_t
 
DIEPTXF15
;

1408 
uöt32_t
 
RESERVED2
[176];

1409 
__IO
 
uöt32_t
 
HCFG
;

1410 
__IO
 
uöt32_t
 
HFIR
;

1411 
__IO
 
uöt32_t
 
HFNUM
;

1412 
uöt32_t
 
RESERVED3
;

1413 
__IO
 
uöt32_t
 
HPTXSTS
;

1414 
__IO
 
uöt32_t
 
HAINT
;

1415 
__IO
 
uöt32_t
 
HAINTMSK
;

1416 
uöt32_t
 
RESERVED4
[9];

1417 
__IO
 
uöt32_t
 
HPRT
;

1418 
uöt32_t
 
RESERVED5
[47];

1419 
__IO
 
uöt32_t
 
HCCHAR0
;

1420 
__IO
 
uöt32_t
 
HCSPLT0
;

1421 
__IO
 
uöt32_t
 
HCINT0
;

1422 
__IO
 
uöt32_t
 
HCINTMSK0
;

1423 
__IO
 
uöt32_t
 
HCTSIZ0
;

1424 
__IO
 
uöt32_t
 
HCDMA0
;

1425 
uöt32_t
 
RESERVED6
[2];

1426 
__IO
 
uöt32_t
 
HCCHAR1
;

1427 
__IO
 
uöt32_t
 
HCSPLT1
;

1428 
__IO
 
uöt32_t
 
HCINT1
;

1429 
__IO
 
uöt32_t
 
HCINTMSK1
;

1430 
__IO
 
uöt32_t
 
HCTSIZ1
;

1431 
__IO
 
uöt32_t
 
HCDMA1
;

1432 
uöt32_t
 
RESERVED7
[2];

1433 
__IO
 
uöt32_t
 
HCCHAR2
;

1434 
__IO
 
uöt32_t
 
HCSPLT2
;

1435 
__IO
 
uöt32_t
 
HCINT2
;

1436 
__IO
 
uöt32_t
 
HCINTMSK2
;

1437 
__IO
 
uöt32_t
 
HCTSIZ2
;

1438 
__IO
 
uöt32_t
 
HCDMA2
;

1439 
uöt32_t
 
RESERVED8
[2];

1440 
__IO
 
uöt32_t
 
HCCHAR3
;

1441 
__IO
 
uöt32_t
 
HCSPLT3
;

1442 
__IO
 
uöt32_t
 
HCINT3
;

1443 
__IO
 
uöt32_t
 
HCINTMSK3
;

1444 
__IO
 
uöt32_t
 
HCTSIZ3
;

1445 
__IO
 
uöt32_t
 
HCDMA3
;

1446 
uöt32_t
 
RESERVED9
[2];

1447 
__IO
 
uöt32_t
 
HCCHAR4
;

1448 
__IO
 
uöt32_t
 
HCSPLT4
;

1449 
__IO
 
uöt32_t
 
HCINT4
;

1450 
__IO
 
uöt32_t
 
HCINTMSK4
;

1451 
__IO
 
uöt32_t
 
HCTSIZ4
;

1452 
__IO
 
uöt32_t
 
HCDMA4
;

1453 
uöt32_t
 
RESERVED10
[2];

1454 
__IO
 
uöt32_t
 
HCCHAR5
;

1455 
__IO
 
uöt32_t
 
HCSPLT5
;

1456 
__IO
 
uöt32_t
 
HCINT5
;

1457 
__IO
 
uöt32_t
 
HCINTMSK5
;

1458 
__IO
 
uöt32_t
 
HCTSIZ5
;

1459 
__IO
 
uöt32_t
 
HCDMA5
;

1460 
uöt32_t
 
RESERVED11
[2];

1461 
__IO
 
uöt32_t
 
HCCHAR6
;

1462 
__IO
 
uöt32_t
 
HCSPLT6
;

1463 
__IO
 
uöt32_t
 
HCINT6
;

1464 
__IO
 
uöt32_t
 
HCINTMSK6
;

1465 
__IO
 
uöt32_t
 
HCTSIZ6
;

1466 
__IO
 
uöt32_t
 
HCDMA6
;

1467 
uöt32_t
 
RESERVED12
[2];

1468 
__IO
 
uöt32_t
 
HCCHAR7
;

1469 
__IO
 
uöt32_t
 
HCSPLT7
;

1470 
__IO
 
uöt32_t
 
HCINT7
;

1471 
__IO
 
uöt32_t
 
HCINTMSK7
;

1472 
__IO
 
uöt32_t
 
HCTSIZ7
;

1473 
__IO
 
uöt32_t
 
HCDMA7
;

1474 
uöt32_t
 
RESERVED13
[2];

1475 
__IO
 
uöt32_t
 
HCCHAR8
;

1476 
__IO
 
uöt32_t
 
HCSPLT8
;

1477 
__IO
 
uöt32_t
 
HCINT8
;

1478 
__IO
 
uöt32_t
 
HCINTMSK8
;

1479 
__IO
 
uöt32_t
 
HCTSIZ8
;

1480 
__IO
 
uöt32_t
 
HCDMA8
;

1481 
uöt32_t
 
RESERVED14
[2];

1482 
__IO
 
uöt32_t
 
HCCHAR9
;

1483 
__IO
 
uöt32_t
 
HCSPLT9
;

1484 
__IO
 
uöt32_t
 
HCINT9
;

1485 
__IO
 
uöt32_t
 
HCINTMSK9
;

1486 
__IO
 
uöt32_t
 
HCTSIZ9
;

1487 
__IO
 
uöt32_t
 
HCDMA9
;

1488 
uöt32_t
 
RESERVED15
[2];

1489 
__IO
 
uöt32_t
 
HCCHAR10
;

1490 
__IO
 
uöt32_t
 
HCSPLT10
;

1491 
__IO
 
uöt32_t
 
HCINT10
;

1492 
__IO
 
uöt32_t
 
HCINTMSK10
;

1493 
__IO
 
uöt32_t
 
HCTSIZ10
;

1494 
__IO
 
uöt32_t
 
HCDMA10
;

1495 
uöt32_t
 
RESERVED16
[2];

1496 
__IO
 
uöt32_t
 
HCCHAR11
;

1497 
__IO
 
uöt32_t
 
HCSPLT11
;

1498 
__IO
 
uöt32_t
 
HCINT11
;

1499 
__IO
 
uöt32_t
 
HCINTMSK11
;

1500 
__IO
 
uöt32_t
 
HCTSIZ11
;

1501 
__IO
 
uöt32_t
 
HCDMA11
;

1502 
uöt32_t
 
RESERVED17
[2];

1503 
__IO
 
uöt32_t
 
HCCHAR12
;

1504 
__IO
 
uöt32_t
 
HCSPLT12
;

1505 
__IO
 
uöt32_t
 
HCINT12
;

1506 
__IO
 
uöt32_t
 
HCINTMSK12
;

1507 
__IO
 
uöt32_t
 
HCTSIZ12
;

1508 
__IO
 
uöt32_t
 
HCDMA12
;

1509 
uöt32_t
 
RESERVED18
[2];

1510 
__IO
 
uöt32_t
 
HCCHAR13
;

1511 
__IO
 
uöt32_t
 
HCSPLT13
;

1512 
__IO
 
uöt32_t
 
HCINT13
;

1513 
__IO
 
uöt32_t
 
HCINTMSK13
;

1514 
__IO
 
uöt32_t
 
HCTSIZ13
;

1515 
__IO
 
uöt32_t
 
HCDMA13
;

1516 
uöt32_t
 
RESERVED19
[2];

1517 
__IO
 
uöt32_t
 
HCCHAR14
;

1518 
__IO
 
uöt32_t
 
HCSPLT14
;

1519 
__IO
 
uöt32_t
 
HCINT14
;

1520 
__IO
 
uöt32_t
 
HCINTMSK14
;

1521 
__IO
 
uöt32_t
 
HCTSIZ14
;

1522 
__IO
 
uöt32_t
 
HCDMA14
;

1523 
uöt32_t
 
RESERVED20
[2];

1524 
__IO
 
uöt32_t
 
HCCHAR15
;

1525 
__IO
 
uöt32_t
 
HCSPLT15
;

1526 
__IO
 
uöt32_t
 
HCINT15
;

1527 
__IO
 
uöt32_t
 
HCINTMSK15
;

1528 
__IO
 
uöt32_t
 
HCTSIZ15
;

1529 
__IO
 
uöt32_t
 
HCDMA15
;

1530 
uöt32_t
 
RESERVED21
[2];

1531 
uöt32_t
 
RESERVED22
[64];

1532 
__IO
 
uöt32_t
 
DCFG
;

1533 
__IO
 
uöt32_t
 
DCTL
;

1534 
__IO
 
uöt32_t
 
DSTS
;

1535 
uöt32_t
 
RESERVED23
;

1536 
__IO
 
uöt32_t
 
DIEPMSK
;

1537 
__IO
 
uöt32_t
 
DOEPMSK
;

1538 
__IO
 
uöt32_t
 
DAINT
;

1539 
__IO
 
uöt32_t
 
DAINTMSK
;

1540 
uöt32_t
 
RESERVED24
[2];

1541 
__IO
 
uöt32_t
 
DVBUSDIS
;

1542 
__IO
 
uöt32_t
 
DVBUSPULSE
;

1543 
uöt32_t
 
RESERVED25
;

1544 
__IO
 
uöt32_t
 
DIEPEMPMSK
;

1545 
__IO
 
uöt32_t
 
EACHHINT
;

1546 
__IO
 
uöt32_t
 
EACHHINTMSK
;

1547 
__IO
 
uöt32_t
 
DIEPEACHMSK1
;

1548 
uöt32_t
 
RESERVED26
[15];

1549 
__IO
 
uöt32_t
 
DOEPEACHMSK1
;

1550 
uöt32_t
 
RESERVED27
[31];

1551 
__IO
 
uöt32_t
 
DIEPCTL0
;

1552 
uöt32_t
 
RESERVED28
;

1553 
__IO
 
uöt32_t
 
DIEPINT0
;

1554 
uöt32_t
 
RESERVED29
;

1555 
__IO
 
uöt32_t
 
DIEPTSIZ0
;

1556 
__IO
 
uöt32_t
 
DIEPDMA0
;

1557 
__IO
 
uöt32_t
 
DTXFSTS0
;

1558 
uöt32_t
 
RESERVED30
;

1559 
__IO
 
uöt32_t
 
DIEPCTL1
;

1560 
uöt32_t
 
RESERVED31
;

1561 
__IO
 
uöt32_t
 
DIEPINT1
;

1562 
uöt32_t
 
RESERVED32
;

1563 
__IO
 
uöt32_t
 
DIEPTSIZ1
;

1564 
__IO
 
uöt32_t
 
DIEPDMA1
;

1565 
__IO
 
uöt32_t
 
DTXFSTS1
;

1566 
uöt32_t
 
RESERVED33
;

1567 
__IO
 
uöt32_t
 
DIEPCTL2
;

1568 
uöt32_t
 
RESERVED34
;

1569 
__IO
 
uöt32_t
 
DIEPINT2
;

1570 
uöt32_t
 
RESERVED35
;

1571 
__IO
 
uöt32_t
 
DIEPTSIZ2
;

1572 
__IO
 
uöt32_t
 
DIEPDMA2
;

1573 
__IO
 
uöt32_t
 
DTXFSTS2
;

1574 
uöt32_t
 
RESERVED36
;

1575 
__IO
 
uöt32_t
 
DIEPCTL3
;

1576 
uöt32_t
 
RESERVED37
;

1577 
__IO
 
uöt32_t
 
DIEPINT3
;

1578 
uöt32_t
 
RESERVED38
;

1579 
__IO
 
uöt32_t
 
DIEPTSIZ3
;

1580 
__IO
 
uöt32_t
 
DIEPDMA3
;

1581 
__IO
 
uöt32_t
 
DTXFSTS3
;

1582 
uöt32_t
 
RESERVED39
;

1583 
__IO
 
uöt32_t
 
DIEPCTL4
;

1584 
uöt32_t
 
RESERVED40
;

1585 
__IO
 
uöt32_t
 
DIEPINT4
;

1586 
uöt32_t
 
RESERVED41
;

1587 
__IO
 
uöt32_t
 
DIEPTSIZ4
;

1588 
__IO
 
uöt32_t
 
DIEPDMA4
;

1589 
__IO
 
uöt32_t
 
DTXFSTS4
;

1590 
uöt32_t
 
RESERVED42
;

1591 
__IO
 
uöt32_t
 
DIEPCTL5
;

1592 
uöt32_t
 
RESERVED43
;

1593 
__IO
 
uöt32_t
 
DIEPINT5
;

1594 
uöt32_t
 
RESERVED44
;

1595 
__IO
 
uöt32_t
 
DIEPTSIZ5
;

1596 
__IO
 
uöt32_t
 
DIEPDMA5
;

1597 
__IO
 
uöt32_t
 
DTXFSTS5
;

1598 
uöt32_t
 
RESERVED45
;

1599 
__IO
 
uöt32_t
 
DIEPCTL6
;

1600 
uöt32_t
 
RESERVED46
;

1601 
__IO
 
uöt32_t
 
DIEPINT6
;

1602 
uöt32_t
 
RESERVED47
;

1603 
__IO
 
uöt32_t
 
DIEPTSIZ6
;

1604 
__IO
 
uöt32_t
 
DIEPDMA6
;

1605 
__IO
 
uöt32_t
 
DTXFSTS6
;

1606 
uöt32_t
 
RESERVED48
;

1607 
__IO
 
uöt32_t
 
DIEPCTL7
;

1608 
uöt32_t
 
RESERVED49
;

1609 
__IO
 
uöt32_t
 
DIEPINT7
;

1610 
uöt32_t
 
RESERVED50
;

1611 
__IO
 
uöt32_t
 
DIEPTSIZ7
;

1612 
__IO
 
uöt32_t
 
DIEPDMA7
;

1613 
__IO
 
uöt32_t
 
DTXFSTS7
;

1614 
uöt32_t
 
RESERVED51
;

1615 
__IO
 
uöt32_t
 
DIEPCTL8
;

1616 
uöt32_t
 
RESERVED52
;

1617 
__IO
 
uöt32_t
 
DIEPINT8
;

1618 
uöt32_t
 
RESERVED53
;

1619 
__IO
 
uöt32_t
 
DIEPTSIZ8
;

1620 
__IO
 
uöt32_t
 
DIEPDMA8
;

1621 
__IO
 
uöt32_t
 
DTXFSTS8
;

1622 
uöt32_t
 
RESERVED54
;

1623 
__IO
 
uöt32_t
 
DIEPCTL9
;

1624 
uöt32_t
 
RESERVED55
;

1625 
__IO
 
uöt32_t
 
DIEPINT9
;

1626 
uöt32_t
 
RESERVED56
;

1627 
__IO
 
uöt32_t
 
DIEPTSIZ9
;

1628 
__IO
 
uöt32_t
 
DIEPDMA9
;

1629 
__IO
 
uöt32_t
 
DTXFSTS9
;

1630 
uöt32_t
 
RESERVED57
;

1631 
__IO
 
uöt32_t
 
DIEPCTL10
;

1632 
uöt32_t
 
RESERVED58
;

1633 
__IO
 
uöt32_t
 
DIEPINT10
;

1634 
uöt32_t
 
RESERVED59
;

1635 
__IO
 
uöt32_t
 
DIEPTSIZ10
;

1636 
__IO
 
uöt32_t
 
DIEPDMA10
;

1637 
__IO
 
uöt32_t
 
DTXFSTS10
;

1638 
uöt32_t
 
RESERVED60
;

1639 
__IO
 
uöt32_t
 
DIEPCTL11
;

1640 
uöt32_t
 
RESERVED61
;

1641 
__IO
 
uöt32_t
 
DIEPINT11
;

1642 
uöt32_t
 
RESERVED62
;

1643 
__IO
 
uöt32_t
 
DIEPTSIZ11
;

1644 
__IO
 
uöt32_t
 
DIEPDMA11
;

1645 
__IO
 
uöt32_t
 
DTXFSTS11
;

1646 
uöt32_t
 
RESERVED63
;

1647 
__IO
 
uöt32_t
 
DIEPCTL12
;

1648 
uöt32_t
 
RESERVED64
;

1649 
__IO
 
uöt32_t
 
DIEPINT12
;

1650 
uöt32_t
 
RESERVED65
;

1651 
__IO
 
uöt32_t
 
DIEPTSIZ12
;

1652 
__IO
 
uöt32_t
 
DIEPDMA12
;

1653 
__IO
 
uöt32_t
 
DTXFSTS12
;

1654 
uöt32_t
 
RESERVED66
;

1655 
__IO
 
uöt32_t
 
DIEPCTL13
;

1656 
uöt32_t
 
RESERVED67
;

1657 
__IO
 
uöt32_t
 
DIEPINT13
;

1658 
uöt32_t
 
RESERVED68
;

1659 
__IO
 
uöt32_t
 
DIEPTSIZ13
;

1660 
__IO
 
uöt32_t
 
DIEPDMA13
;

1661 
__IO
 
uöt32_t
 
DTXFSTS13
;

1662 
uöt32_t
 
RESERVED69
;

1663 
__IO
 
uöt32_t
 
DIEPCTL14
;

1664 
uöt32_t
 
RESERVED70
;

1665 
__IO
 
uöt32_t
 
DIEPINT14
;

1666 
uöt32_t
 
RESERVED71
;

1667 
__IO
 
uöt32_t
 
DIEPTSIZ14
;

1668 
__IO
 
uöt32_t
 
DIEPDMA14
;

1669 
__IO
 
uöt32_t
 
DTXFSTS14
;

1670 
uöt32_t
 
RESERVED72
;

1671 
__IO
 
uöt32_t
 
DIEPCTL15
;

1672 
uöt32_t
 
RESERVED73
;

1673 
__IO
 
uöt32_t
 
DIEPINT15
;

1674 
uöt32_t
 
RESERVED74
;

1675 
__IO
 
uöt32_t
 
DIEPTSIZ15
;

1676 
__IO
 
uöt32_t
 
DIEPDMA15
;

1677 
__IO
 
uöt32_t
 
DTXFSTS15
;

1678 
uöt32_t
 
RESERVED75
;

1679 
__IO
 
uöt32_t
 
DOEPCTL0
;

1680 
uöt32_t
 
RESERVED76
;

1681 
__IO
 
uöt32_t
 
DOEPINT0
;

1682 
uöt32_t
 
RESERVED77
;

1683 
__IO
 
uöt32_t
 
DOEPTSIZ0
;

1684 
__IO
 
uöt32_t
 
DOEPDMAB0
;

1685 
uöt32_t
 
RESERVED78
[2];

1686 
__IO
 
uöt32_t
 
DOEPCTL1
;

1687 
uöt32_t
 
RESERVED79
;

1688 
__IO
 
uöt32_t
 
DOEPINT1
;

1689 
uöt32_t
 
RESERVED80
;

1690 
__IO
 
uöt32_t
 
DOEPTSIZ1
;

1691 
__IO
 
uöt32_t
 
DOEPDMAB1
;

1692 
uöt32_t
 
RESERVED81
[2];

1693 
__IO
 
uöt32_t
 
DOEPCTL2
;

1694 
uöt32_t
 
RESERVED82
;

1695 
__IO
 
uöt32_t
 
DOEPINT2
;

1696 
uöt32_t
 
RESERVED83
;

1697 
__IO
 
uöt32_t
 
DOEPTSIZ2
;

1698 
__IO
 
uöt32_t
 
DOEPDMAB2
;

1699 
uöt32_t
 
RESERVED84
[2];

1700 
__IO
 
uöt32_t
 
DOEPCTL3
;

1701 
uöt32_t
 
RESERVED85
;

1702 
__IO
 
uöt32_t
 
DOEPINT3
;

1703 
uöt32_t
 
RESERVED86
;

1704 
__IO
 
uöt32_t
 
DOEPTSIZ3
;

1705 
__IO
 
uöt32_t
 
DOEPDMAB3
;

1706 
uöt32_t
 
RESERVED87
[2];

1707 
__IO
 
uöt32_t
 
DOEPCTL4
;

1708 
uöt32_t
 
RESERVED88
;

1709 
__IO
 
uöt32_t
 
DOEPINT4
;

1710 
uöt32_t
 
RESERVED89
;

1711 
__IO
 
uöt32_t
 
DOEPTSIZ4
;

1712 
__IO
 
uöt32_t
 
DOEPDMAB4
;

1713 
uöt32_t
 
RESERVED90
[2];

1714 
__IO
 
uöt32_t
 
DOEPCTL5
;

1715 
uöt32_t
 
RESERVED91
;

1716 
__IO
 
uöt32_t
 
DOEPINT5
;

1717 
uöt32_t
 
RESERVED92
;

1718 
__IO
 
uöt32_t
 
DOEPTSIZ5
;

1719 
__IO
 
uöt32_t
 
DOEPDMAB5
;

1720 
uöt32_t
 
RESERVED93
[2];

1721 
__IO
 
uöt32_t
 
DOEPCTL6
;

1722 
uöt32_t
 
RESERVED94
;

1723 
__IO
 
uöt32_t
 
DOEPINT6
;

1724 
uöt32_t
 
RESERVED95
;

1725 
__IO
 
uöt32_t
 
DOEPTSIZ6
;

1726 
__IO
 
uöt32_t
 
DOEPDMAB6
;

1727 
uöt32_t
 
RESERVED96
[2];

1728 
__IO
 
uöt32_t
 
DOEPCTL7
;

1729 
uöt32_t
 
RESERVED97
;

1730 
__IO
 
uöt32_t
 
DOEPINT7
;

1731 
uöt32_t
 
RESERVED98
;

1732 
__IO
 
uöt32_t
 
DOEPTSIZ7
;

1733 
__IO
 
uöt32_t
 
DOEPDMAB7
;

1734 
uöt32_t
 
RESERVED99
[2];

1735 
__IO
 
uöt32_t
 
DOEPCTL8
;

1736 
uöt32_t
 
RESERVED100
;

1737 
__IO
 
uöt32_t
 
DOEPINT8
;

1738 
uöt32_t
 
RESERVED101
;

1739 
__IO
 
uöt32_t
 
DOEPTSIZ8
;

1740 
__IO
 
uöt32_t
 
DOEPDMAB8
;

1741 
uöt32_t
 
RESERVED102
[2];

1742 
__IO
 
uöt32_t
 
DOEPCTL9
;

1743 
uöt32_t
 
RESERVED103
;

1744 
__IO
 
uöt32_t
 
DOEPINT9
;

1745 
uöt32_t
 
RESERVED104
;

1746 
__IO
 
uöt32_t
 
DOEPTSIZ9
;

1747 
__IO
 
uöt32_t
 
DOEPDMAB9
;

1748 
uöt32_t
 
RESERVED105
[2];

1749 
__IO
 
uöt32_t
 
DOEPCTL10
;

1750 
uöt32_t
 
RESERVED106
;

1751 
__IO
 
uöt32_t
 
DOEPINT10
;

1752 
uöt32_t
 
RESERVED107
;

1753 
__IO
 
uöt32_t
 
DOEPTSIZ10
;

1754 
__IO
 
uöt32_t
 
DOEPDMAB10
;

1755 
uöt32_t
 
RESERVED108
[2];

1756 
__IO
 
uöt32_t
 
DOEPCTL11
;

1757 
uöt32_t
 
RESERVED109
;

1758 
__IO
 
uöt32_t
 
DOEPINT11
;

1759 
uöt32_t
 
RESERVED110
;

1760 
__IO
 
uöt32_t
 
DOEPTSIZ11
;

1761 
__IO
 
uöt32_t
 
DOEPDMAB11
;

1762 
uöt32_t
 
RESERVED111
[2];

1763 
__IO
 
uöt32_t
 
DOEPCTL12
;

1764 
uöt32_t
 
RESERVED112
;

1765 
__IO
 
uöt32_t
 
DOEPINT12
;

1766 
uöt32_t
 
RESERVED113
;

1767 
__IO
 
uöt32_t
 
DOEPTSIZ12
;

1768 
__IO
 
uöt32_t
 
DOEPDMAB12
;

1769 
uöt32_t
 
RESERVED114
[2];

1770 
__IO
 
uöt32_t
 
DOEPCTL13
;

1771 
uöt32_t
 
RESERVED115
;

1772 
__IO
 
uöt32_t
 
DOEPINT13
;

1773 
uöt32_t
 
RESERVED116
;

1774 
__IO
 
uöt32_t
 
DOEPTSIZ13
;

1775 
__IO
 
uöt32_t
 
DOEPDMAB13
;

1776 
uöt32_t
 
RESERVED117
[2];

1777 
__IO
 
uöt32_t
 
DOEPCTL14
;

1778 
uöt32_t
 
RESERVED118
;

1779 
__IO
 
uöt32_t
 
DOEPINT14
;

1780 
uöt32_t
 
RESERVED119
;

1781 
__IO
 
uöt32_t
 
DOEPTSIZ14
;

1782 
__IO
 
uöt32_t
 
DOEPDMAB14
;

1783 
uöt32_t
 
RESERVED120
[2];

1784 
__IO
 
uöt32_t
 
DOEPCTL15
;

1785 
uöt32_t
 
RESERVED121
;

1786 
__IO
 
uöt32_t
 
DOEPINT15
;

1787 
uöt32_t
 
RESERVED122
;

1788 
__IO
 
uöt32_t
 
DOEPTSIZ15
;

1789 
__IO
 
uöt32_t
 
DOEPDMAB15
;

1790 
uöt32_t
 
RESERVED123
[2];

1791 
uöt32_t
 
RESERVED143
[64];

1792 
__IO
 
uöt32_t
 
PCGCCTL
;

1793 } 
	tOTG_HS_Ty≥Def
;

1802 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

1803 
	#CCMDATARAM_BASE
 ((
uöt32_t
)0x10000000Ë

	)

1804 
	#SRAM1_BASE
 ((
uöt32_t
)0x20000000Ë

	)

1805 
	#SRAM2_BASE
 ((
uöt32_t
)0x2001C000Ë

	)

1806 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

1807 
	#BKPSRAM_BASE
 ((
uöt32_t
)0x40024000Ë

	)

1808 
	#FSMC_R_BASE
 ((
uöt32_t
)0xA0000000Ë

	)

1810 
	#CCMDATARAM_BB_BASE
 ((
uöt32_t
)0x12000000Ë

	)

1811 
	#SRAM1_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

1812 
	#SRAM2_BB_BASE
 ((
uöt32_t
)0x2201C000Ë

	)

1813 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

1814 
	#BKPSRAM_BB_BASE
 ((
uöt32_t
)0x42024000Ë

	)

1817 
	#SRAM_BASE
 
SRAM1_BASE


	)

1818 
	#SRAM_BB_BASE
 
SRAM1_BB_BASE


	)

1822 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

1823 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x00010000)

	)

1824 
	#AHB1PERIPH_BASE
 (
PERIPH_BASE
 + 0x00020000)

	)

1825 
	#AHB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000000)

	)

1828 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x0000)

	)

1829 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x0400)

	)

1830 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x0800)

	)

1831 
	#TIM5_BASE
 (
APB1PERIPH_BASE
 + 0x0C00)

	)

1832 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x1000)

	)

1833 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x1400)

	)

1834 
	#TIM12_BASE
 (
APB1PERIPH_BASE
 + 0x1800)

	)

1835 
	#TIM13_BASE
 (
APB1PERIPH_BASE
 + 0x1C00)

	)

1836 
	#TIM14_BASE
 (
APB1PERIPH_BASE
 + 0x2000)

	)

1837 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x2800)

	)

1838 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x2C00)

	)

1839 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x3000)

	)

1840 
	#I2S2ext_BASE
 (
APB1PERIPH_BASE
 + 0x3400)

	)

1841 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x3800)

	)

1842 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x3C00)

	)

1843 
	#I2S3ext_BASE
 (
APB1PERIPH_BASE
 + 0x4000)

	)

1844 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x4400)

	)

1845 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x4800)

	)

1846 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x4C00)

	)

1847 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x5000)

	)

1848 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x5400)

	)

1849 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x5800)

	)

1850 
	#I2C3_BASE
 (
APB1PERIPH_BASE
 + 0x5C00)

	)

1851 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x6400)

	)

1852 
	#CAN2_BASE
 (
APB1PERIPH_BASE
 + 0x6800)

	)

1853 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x7000)

	)

1854 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x7400)

	)

1857 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x0000)

	)

1858 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x0400)

	)

1859 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x1000)

	)

1860 
	#USART6_BASE
 (
APB2PERIPH_BASE
 + 0x1400)

	)

1861 
	#ADC1_BASE
 (
APB2PERIPH_BASE
 + 0x2000)

	)

1862 
	#ADC2_BASE
 (
APB2PERIPH_BASE
 + 0x2100)

	)

1863 
	#ADC3_BASE
 (
APB2PERIPH_BASE
 + 0x2200)

	)

1864 
	#ADC_BASE
 (
APB2PERIPH_BASE
 + 0x2300)

	)

1865 
	#SDIO_BASE
 (
APB2PERIPH_BASE
 + 0x2C00)

	)

1866 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x3000)

	)

1867 
	#SYSCFG_BASE
 (
APB2PERIPH_BASE
 + 0x3800)

	)

1868 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x3C00)

	)

1869 
	#TIM9_BASE
 (
APB2PERIPH_BASE
 + 0x4000)

	)

1870 
	#TIM10_BASE
 (
APB2PERIPH_BASE
 + 0x4400)

	)

1871 
	#TIM11_BASE
 (
APB2PERIPH_BASE
 + 0x4800)

	)

1874 
	#GPIOA_BASE
 (
AHB1PERIPH_BASE
 + 0x0000)

	)

1875 
	#GPIOB_BASE
 (
AHB1PERIPH_BASE
 + 0x0400)

	)

1876 
	#GPIOC_BASE
 (
AHB1PERIPH_BASE
 + 0x0800)

	)

1877 
	#GPIOD_BASE
 (
AHB1PERIPH_BASE
 + 0x0C00)

	)

1878 
	#GPIOE_BASE
 (
AHB1PERIPH_BASE
 + 0x1000)

	)

1879 
	#GPIOF_BASE
 (
AHB1PERIPH_BASE
 + 0x1400)

	)

1880 
	#GPIOG_BASE
 (
AHB1PERIPH_BASE
 + 0x1800)

	)

1881 
	#GPIOH_BASE
 (
AHB1PERIPH_BASE
 + 0x1C00)

	)

1882 
	#GPIOI_BASE
 (
AHB1PERIPH_BASE
 + 0x2000)

	)

1883 
	#CRC_BASE
 (
AHB1PERIPH_BASE
 + 0x3000)

	)

1884 
	#RCC_BASE
 (
AHB1PERIPH_BASE
 + 0x3800)

	)

1885 
	#FLASH_R_BASE
 (
AHB1PERIPH_BASE
 + 0x3C00)

	)

1886 
	#DMA1_BASE
 (
AHB1PERIPH_BASE
 + 0x6000)

	)

1887 
	#DMA1_Såóm0_BASE
 (
DMA1_BASE
 + 0x010)

	)

1888 
	#DMA1_Såóm1_BASE
 (
DMA1_BASE
 + 0x028)

	)

1889 
	#DMA1_Såóm2_BASE
 (
DMA1_BASE
 + 0x040)

	)

1890 
	#DMA1_Såóm3_BASE
 (
DMA1_BASE
 + 0x058)

	)

1891 
	#DMA1_Såóm4_BASE
 (
DMA1_BASE
 + 0x070)

	)

1892 
	#DMA1_Såóm5_BASE
 (
DMA1_BASE
 + 0x088)

	)

1893 
	#DMA1_Såóm6_BASE
 (
DMA1_BASE
 + 0x0A0)

	)

1894 
	#DMA1_Såóm7_BASE
 (
DMA1_BASE
 + 0x0B8)

	)

1895 
	#DMA2_BASE
 (
AHB1PERIPH_BASE
 + 0x6400)

	)

1896 
	#DMA2_Såóm0_BASE
 (
DMA2_BASE
 + 0x010)

	)

1897 
	#DMA2_Såóm1_BASE
 (
DMA2_BASE
 + 0x028)

	)

1898 
	#DMA2_Såóm2_BASE
 (
DMA2_BASE
 + 0x040)

	)

1899 
	#DMA2_Såóm3_BASE
 (
DMA2_BASE
 + 0x058)

	)

1900 
	#DMA2_Såóm4_BASE
 (
DMA2_BASE
 + 0x070)

	)

1901 
	#DMA2_Såóm5_BASE
 (
DMA2_BASE
 + 0x088)

	)

1902 
	#DMA2_Såóm6_BASE
 (
DMA2_BASE
 + 0x0A0)

	)

1903 
	#DMA2_Såóm7_BASE
 (
DMA2_BASE
 + 0x0B8)

	)

1904 
	#ETH_BASE
 (
AHB1PERIPH_BASE
 + 0x8000)

	)

1905 
	#ETH_MAC_BASE
 (
ETH_BASE
)

	)

1906 
	#ETH_MMC_BASE
 (
ETH_BASE
 + 0x0100)

	)

1907 
	#ETH_PTP_BASE
 (
ETH_BASE
 + 0x0700)

	)

1908 
	#ETH_DMA_BASE
 (
ETH_BASE
 + 0x1000)

	)

1909 
	#OTG_HS_BASE
 (
AHB1PERIPH_BASE
 + 0x20000)

	)

1910 
	#OTG_HS_DFIFO0_BASE
 (
OTG_HS_BASE
 + 0x01000)

	)

1911 
	#OTG_HS_DFIFO1_BASE
 (
OTG_HS_BASE
 + 0x02000)

	)

1912 
	#OTG_HS_DFIFO2_BASE
 (
OTG_HS_BASE
 + 0x03000)

	)

1913 
	#OTG_HS_DFIFO3_BASE
 (
OTG_HS_BASE
 + 0x04000)

	)

1914 
	#OTG_HS_DFIFO4_BASE
 (
OTG_HS_BASE
 + 0x05000)

	)

1915 
	#OTG_HS_DFIFO5_BASE
 (
OTG_HS_BASE
 + 0x06000)

	)

1916 
	#OTG_HS_DFIFO6_BASE
 (
OTG_HS_BASE
 + 0x07000)

	)

1917 
	#OTG_HS_DFIFO7_BASE
 (
OTG_HS_BASE
 + 0x08000)

	)

1918 
	#OTG_HS_DFIFO8_BASE
 (
OTG_HS_BASE
 + 0x09000)

	)

1919 
	#OTG_HS_DFIFO9_BASE
 (
OTG_HS_BASE
 + 0x0A000)

	)

1920 
	#OTG_HS_DFIFO10_BASE
 (
OTG_HS_BASE
 + 0x0B000)

	)

1921 
	#OTG_HS_DFIFO11_BASE
 (
OTG_HS_BASE
 + 0x0C000)

	)

1922 
	#OTG_HS_DFIFO12_BASE
 (
OTG_HS_BASE
 + 0x0D000)

	)

1923 
	#OTG_HS_DFIFO13_BASE
 (
OTG_HS_BASE
 + 0x0E000)

	)

1924 
	#OTG_HS_DFIFO14_BASE
 (
OTG_HS_BASE
 + 0x0F000)

	)

1925 
	#OTG_HS_DFIFO15_BASE
 (
OTG_HS_BASE
 + 0x10000)

	)

1928 
	#OTG_FS_BASE
 (
AHB2PERIPH_BASE
 + 0x00000)

	)

1929 
	#OTG_FS_DFIFO0_BASE
 (
OTG_FS_BASE
 + 0x01000)

	)

1930 
	#OTG_FS_DFIFO1_BASE
 (
OTG_FS_BASE
 + 0x02000)

	)

1931 
	#OTG_FS_DFIFO2_BASE
 (
OTG_FS_BASE
 + 0x03000)

	)

1932 
	#OTG_FS_DFIFO3_BASE
 (
OTG_FS_BASE
 + 0x04000)

	)

1933 
	#OTG_FS_DFIFO4_BASE
 (
OTG_FS_BASE
 + 0x05000)

	)

1934 
	#OTG_FS_DFIFO5_BASE
 (
OTG_FS_BASE
 + 0x06000)

	)

1935 
	#OTG_FS_DFIFO6_BASE
 (
OTG_FS_BASE
 + 0x07000)

	)

1936 
	#OTG_FS_DFIFO7_BASE
 (
OTG_FS_BASE
 + 0x08000)

	)

1937 
	#DCMI_BASE
 (
AHB2PERIPH_BASE
 + 0x50000)

	)

1938 
	#CRYP_BASE
 (
AHB2PERIPH_BASE
 + 0x60000)

	)

1939 
	#HASH_BASE
 (
AHB2PERIPH_BASE
 + 0x60400)

	)

1940 
	#RNG_BASE
 (
AHB2PERIPH_BASE
 + 0x60800)

	)

1943 
	#FSMC_B™k1_R_BASE
 (
FSMC_R_BASE
 + 0x0000)

	)

1944 
	#FSMC_B™k1E_R_BASE
 (
FSMC_R_BASE
 + 0x0104)

	)

1945 
	#FSMC_B™k2_R_BASE
 (
FSMC_R_BASE
 + 0x0060)

	)

1946 
	#FSMC_B™k3_R_BASE
 (
FSMC_R_BASE
 + 0x0080)

	)

1947 
	#FSMC_B™k4_R_BASE
 (
FSMC_R_BASE
 + 0x00A0)

	)

1950 
	#DBGMCU_BASE
 ((
uöt32_t
 )0xE0042000)

	)

1959 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

1960 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

1961 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

1962 
	#TIM5
 ((
TIM_Ty≥Def
 *Ë
TIM5_BASE
)

	)

1963 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

1964 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

1965 
	#TIM12
 ((
TIM_Ty≥Def
 *Ë
TIM12_BASE
)

	)

1966 
	#TIM13
 ((
TIM_Ty≥Def
 *Ë
TIM13_BASE
)

	)

1967 
	#TIM14
 ((
TIM_Ty≥Def
 *Ë
TIM14_BASE
)

	)

1968 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

1969 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

1970 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

1971 
	#I2S2ext
 ((
SPI_Ty≥Def
 *Ë
I2S2ext_BASE
)

	)

1972 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

1973 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

1974 
	#I2S3ext
 ((
SPI_Ty≥Def
 *Ë
I2S3ext_BASE
)

	)

1975 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

1976 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

1977 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

1978 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

1979 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

1980 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

1981 
	#I2C3
 ((
I2C_Ty≥Def
 *Ë
I2C3_BASE
)

	)

1982 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

1983 
	#CAN2
 ((
CAN_Ty≥Def
 *Ë
CAN2_BASE
)

	)

1984 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

1985 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

1986 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

1987 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

1988 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

1989 
	#USART6
 ((
USART_Ty≥Def
 *Ë
USART6_BASE
)

	)

1990 
	#ADC
 ((
ADC_Comm⁄_Ty≥Def
 *Ë
ADC_BASE
)

	)

1991 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

1992 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

1993 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1994 
	#SDIO
 ((
SDIO_Ty≥Def
 *Ë
SDIO_BASE
)

	)

1995 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

1996 
	#SYSCFG
 ((
SYSCFG_Ty≥Def
 *Ë
SYSCFG_BASE
)

	)

1997 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

1998 
	#TIM9
 ((
TIM_Ty≥Def
 *Ë
TIM9_BASE
)

	)

1999 
	#TIM10
 ((
TIM_Ty≥Def
 *Ë
TIM10_BASE
)

	)

2000 
	#TIM11
 ((
TIM_Ty≥Def
 *Ë
TIM11_BASE
)

	)

2001 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

2002 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

2003 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

2004 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

2005 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

2006 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

2007 
	#GPIOG
 ((
GPIO_Ty≥Def
 *Ë
GPIOG_BASE
)

	)

2008 
	#GPIOH
 ((
GPIO_Ty≥Def
 *Ë
GPIOH_BASE
)

	)

2009 
	#GPIOI
 ((
GPIO_Ty≥Def
 *Ë
GPIOI_BASE
)

	)

2010 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

2011 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

2012 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

2013 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

2014 
	#DMA1_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm0_BASE
)

	)

2015 
	#DMA1_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm1_BASE
)

	)

2016 
	#DMA1_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm2_BASE
)

	)

2017 
	#DMA1_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm3_BASE
)

	)

2018 
	#DMA1_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm4_BASE
)

	)

2019 
	#DMA1_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm5_BASE
)

	)

2020 
	#DMA1_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm6_BASE
)

	)

2021 
	#DMA1_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA1_Såóm7_BASE
)

	)

2022 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

2023 
	#DMA2_Såóm0
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm0_BASE
)

	)

2024 
	#DMA2_Såóm1
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm1_BASE
)

	)

2025 
	#DMA2_Såóm2
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm2_BASE
)

	)

2026 
	#DMA2_Såóm3
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm3_BASE
)

	)

2027 
	#DMA2_Såóm4
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm4_BASE
)

	)

2028 
	#DMA2_Såóm5
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm5_BASE
)

	)

2029 
	#DMA2_Såóm6
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm6_BASE
)

	)

2030 
	#DMA2_Såóm7
 ((
DMA_Såóm_Ty≥Def
 *Ë
DMA2_Såóm7_BASE
)

	)

2031 
	#ETH
 ((
ETH_Ty≥Def
 *Ë
ETH_BASE
)

	)

2032 
	#OTG_HS
 ((
OTG_HS_Ty≥Def
 *Ë
OTG_HS_BASE
)

	)

2033 
	#OTG_HS_DFIFO0
 (((
U32
 *Ë
OTG_HS_DFIFO0_BASE
Ë)

	)

2034 
	#OTG_HS_DFIFO1
 (((
U32
 *Ë
OTG_HS_DFIFO1_BASE
Ë)

	)

2035 
	#OTG_HS_DFIFO2
 (((
U32
 *Ë
OTG_HS_DFIFO2_BASE
Ë)

	)

2036 
	#OTG_HS_DFIFO3
 (((
U32
 *Ë
OTG_HS_DFIFO3_BASE
Ë)

	)

2037 
	#OTG_HS_DFIFO4
 (((
U32
 *Ë
OTG_HS_DFIFO4_BASE
Ë)

	)

2038 
	#OTG_HS_DFIFO5
 (((
U32
 *Ë
OTG_HS_DFIFO5_BASE
Ë)

	)

2039 
	#OTG_HS_DFIFO6
 (((
U32
 *Ë
OTG_HS_DFIFO6_BASE
Ë)

	)

2040 
	#OTG_HS_DFIFO7
 (((
U32
 *Ë
OTG_HS_DFIFO7_BASE
Ë)

	)

2041 
	#OTG_HS_DFIFO8
 (((
U32
 *Ë
OTG_HS_DFIFO8_BASE
Ë)

	)

2042 
	#OTG_HS_DFIFO9
 (((
U32
 *Ë
OTG_HS_DFIFO9_BASE
Ë)

	)

2043 
	#OTG_HS_DFIFO10
 (((
U32
 *Ë
OTG_HS_DFIFO10_BASE
Ë)

	)

2044 
	#OTG_HS_DFIFO11
 (((
U32
 *Ë
OTG_HS_DFIFO11_BASE
Ë)

	)

2045 
	#OTG_HS_DFIFO12
 (((
U32
 *Ë
OTG_HS_DFIFO12_BASE
Ë)

	)

2046 
	#OTG_HS_DFIFO13
 (((
U32
 *Ë
OTG_HS_DFIFO13_BASE
Ë)

	)

2047 
	#OTG_HS_DFIFO14
 (((
U32
 *Ë
OTG_HS_DFIFO14_BASE
Ë)

	)

2048 
	#OTG_HS_DFIFO15
 (((
U32
 *Ë
OTG_HS_DFIFO15_BASE
Ë)

	)

2049 
	#OTG_FS
 ((
OTG_FS_Ty≥Def
 *Ë
OTG_FS_BASE
)

	)

2050 
	#OTG_FS_DFIFO0
 (((
U32
 *Ë
OTG_FS_DFIFO0_BASE
Ë)

	)

2051 
	#OTG_FS_DFIFO1
 (((
U32
 *Ë
OTG_FS_DFIFO1_BASE
Ë)

	)

2052 
	#OTG_FS_DFIFO2
 (((
U32
 *Ë
OTG_FS_DFIFO2_BASE
Ë)

	)

2053 
	#OTG_FS_DFIFO3
 (((
U32
 *Ë
OTG_FS_DFIFO3_BASE
Ë)

	)

2054 
	#OTG_FS_DFIFO4
 (((
U32
 *Ë
OTG_FS_DFIFO4_BASE
Ë)

	)

2055 
	#OTG_FS_DFIFO5
 (((
U32
 *Ë
OTG_FS_DFIFO5_BASE
Ë)

	)

2056 
	#OTG_FS_DFIFO6
 (((
U32
 *Ë
OTG_FS_DFIFO6_BASE
Ë)

	)

2057 
	#OTG_FS_DFIFO7
 (((
U32
 *Ë
OTG_FS_DFIFO7_BASE
Ë)

	)

2058 
	#DCMI
 ((
DCMI_Ty≥Def
 *Ë
DCMI_BASE
)

	)

2059 
	#CRYP
 ((
CRYP_Ty≥Def
 *Ë
CRYP_BASE
)

	)

2060 
	#HASH
 ((
HASH_Ty≥Def
 *Ë
HASH_BASE
)

	)

2061 
	#RNG
 ((
RNG_Ty≥Def
 *Ë
RNG_BASE
)

	)

2062 
	#FSMC_B™k1
 ((
FSMC_B™k1_Ty≥Def
 *Ë
FSMC_B™k1_R_BASE
)

	)

2063 
	#FSMC_B™k1E
 ((
FSMC_B™k1E_Ty≥Def
 *Ë
FSMC_B™k1E_R_BASE
)

	)

2064 
	#FSMC_B™k2
 ((
FSMC_B™k2_Ty≥Def
 *Ë
FSMC_B™k2_R_BASE
)

	)

2065 
	#FSMC_B™k3
 ((
FSMC_B™k3_Ty≥Def
 *Ë
FSMC_B™k3_R_BASE
)

	)

2066 
	#FSMC_B™k4
 ((
FSMC_B™k4_Ty≥Def
 *Ë
FSMC_B™k4_R_BASE
)

	)

2067 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

2091 
	#ADC_SR_AWD
 ((
uöt8_t
)0x01Ë

	)

2092 
	#ADC_SR_EOC
 ((
uöt8_t
)0x02Ë

	)

2093 
	#ADC_SR_JEOC
 ((
uöt8_t
)0x04Ë

	)

2094 
	#ADC_SR_JSTRT
 ((
uöt8_t
)0x08Ë

	)

2095 
	#ADC_SR_STRT
 ((
uöt8_t
)0x10Ë

	)

2096 
	#ADC_SR_OVR
 ((
uöt8_t
)0x20Ë

	)

2099 
	#ADC_CR1_AWDCH
 ((
uöt32_t
)0x0000001FË

	)

2100 
	#ADC_CR1_AWDCH_0
 ((
uöt32_t
)0x00000001Ë

	)

2101 
	#ADC_CR1_AWDCH_1
 ((
uöt32_t
)0x00000002Ë

	)

2102 
	#ADC_CR1_AWDCH_2
 ((
uöt32_t
)0x00000004Ë

	)

2103 
	#ADC_CR1_AWDCH_3
 ((
uöt32_t
)0x00000008Ë

	)

2104 
	#ADC_CR1_AWDCH_4
 ((
uöt32_t
)0x00000010Ë

	)

2105 
	#ADC_CR1_EOCIE
 ((
uöt32_t
)0x00000020Ë

	)

2106 
	#ADC_CR1_AWDIE
 ((
uöt32_t
)0x00000040Ë

	)

2107 
	#ADC_CR1_JEOCIE
 ((
uöt32_t
)0x00000080Ë

	)

2108 
	#ADC_CR1_SCAN
 ((
uöt32_t
)0x00000100Ë

	)

2109 
	#ADC_CR1_AWDSGL
 ((
uöt32_t
)0x00000200Ë

	)

2110 
	#ADC_CR1_JAUTO
 ((
uöt32_t
)0x00000400Ë

	)

2111 
	#ADC_CR1_DISCEN
 ((
uöt32_t
)0x00000800Ë

	)

2112 
	#ADC_CR1_JDISCEN
 ((
uöt32_t
)0x00001000Ë

	)

2113 
	#ADC_CR1_DISCNUM
 ((
uöt32_t
)0x0000E000Ë

	)

2114 
	#ADC_CR1_DISCNUM_0
 ((
uöt32_t
)0x00002000Ë

	)

2115 
	#ADC_CR1_DISCNUM_1
 ((
uöt32_t
)0x00004000Ë

	)

2116 
	#ADC_CR1_DISCNUM_2
 ((
uöt32_t
)0x00008000Ë

	)

2117 
	#ADC_CR1_JAWDEN
 ((
uöt32_t
)0x00400000Ë

	)

2118 
	#ADC_CR1_AWDEN
 ((
uöt32_t
)0x00800000Ë

	)

2119 
	#ADC_CR1_RES
 ((
uöt32_t
)0x03000000Ë

	)

2120 
	#ADC_CR1_RES_0
 ((
uöt32_t
)0x01000000Ë

	)

2121 
	#ADC_CR1_RES_1
 ((
uöt32_t
)0x02000000Ë

	)

2122 
	#ADC_CR1_OVRIE
 ((
uöt32_t
)0x04000000Ë

	)

2125 
	#ADC_CR2_ADON
 ((
uöt32_t
)0x00000001Ë

	)

2126 
	#ADC_CR2_CONT
 ((
uöt32_t
)0x00000002Ë

	)

2127 
	#ADC_CR2_DMA
 ((
uöt32_t
)0x00000100Ë

	)

2128 
	#ADC_CR2_DDS
 ((
uöt32_t
)0x00000200Ë

	)

2129 
	#ADC_CR2_EOCS
 ((
uöt32_t
)0x00000400Ë

	)

2130 
	#ADC_CR2_ALIGN
 ((
uöt32_t
)0x00000800Ë

	)

2131 
	#ADC_CR2_JEXTSEL
 ((
uöt32_t
)0x000F0000Ë

	)

2132 
	#ADC_CR2_JEXTSEL_0
 ((
uöt32_t
)0x00010000Ë

	)

2133 
	#ADC_CR2_JEXTSEL_1
 ((
uöt32_t
)0x00020000Ë

	)

2134 
	#ADC_CR2_JEXTSEL_2
 ((
uöt32_t
)0x00040000Ë

	)

2135 
	#ADC_CR2_JEXTSEL_3
 ((
uöt32_t
)0x00080000Ë

	)

2136 
	#ADC_CR2_JEXTEN
 ((
uöt32_t
)0x00300000Ë

	)

2137 
	#ADC_CR2_JEXTEN_0
 ((
uöt32_t
)0x00100000Ë

	)

2138 
	#ADC_CR2_JEXTEN_1
 ((
uöt32_t
)0x00200000Ë

	)

2139 
	#ADC_CR2_JSWSTART
 ((
uöt32_t
)0x00400000Ë

	)

2140 
	#ADC_CR2_EXTSEL
 ((
uöt32_t
)0x0F000000Ë

	)

2141 
	#ADC_CR2_EXTSEL_0
 ((
uöt32_t
)0x01000000Ë

	)

2142 
	#ADC_CR2_EXTSEL_1
 ((
uöt32_t
)0x02000000Ë

	)

2143 
	#ADC_CR2_EXTSEL_2
 ((
uöt32_t
)0x04000000Ë

	)

2144 
	#ADC_CR2_EXTSEL_3
 ((
uöt32_t
)0x08000000Ë

	)

2145 
	#ADC_CR2_EXTEN
 ((
uöt32_t
)0x30000000Ë

	)

2146 
	#ADC_CR2_EXTEN_0
 ((
uöt32_t
)0x10000000Ë

	)

2147 
	#ADC_CR2_EXTEN_1
 ((
uöt32_t
)0x20000000Ë

	)

2148 
	#ADC_CR2_SWSTART
 ((
uöt32_t
)0x40000000Ë

	)

2151 
	#ADC_SMPR1_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

2152 
	#ADC_SMPR1_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

2153 
	#ADC_SMPR1_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

2154 
	#ADC_SMPR1_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

2155 
	#ADC_SMPR1_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

2156 
	#ADC_SMPR1_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

2157 
	#ADC_SMPR1_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

2158 
	#ADC_SMPR1_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

2159 
	#ADC_SMPR1_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

2160 
	#ADC_SMPR1_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

2161 
	#ADC_SMPR1_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

2162 
	#ADC_SMPR1_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

2163 
	#ADC_SMPR1_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

2164 
	#ADC_SMPR1_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

2165 
	#ADC_SMPR1_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

2166 
	#ADC_SMPR1_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

2167 
	#ADC_SMPR1_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

2168 
	#ADC_SMPR1_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

2169 
	#ADC_SMPR1_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

2170 
	#ADC_SMPR1_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

2171 
	#ADC_SMPR1_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

2172 
	#ADC_SMPR1_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

2173 
	#ADC_SMPR1_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

2174 
	#ADC_SMPR1_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

2175 
	#ADC_SMPR1_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

2176 
	#ADC_SMPR1_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

2177 
	#ADC_SMPR1_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

2178 
	#ADC_SMPR1_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

2179 
	#ADC_SMPR1_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

2180 
	#ADC_SMPR1_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

2181 
	#ADC_SMPR1_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

2182 
	#ADC_SMPR1_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

2183 
	#ADC_SMPR1_SMP18
 ((
uöt32_t
)0x07000000Ë

	)

2184 
	#ADC_SMPR1_SMP18_0
 ((
uöt32_t
)0x01000000Ë

	)

2185 
	#ADC_SMPR1_SMP18_1
 ((
uöt32_t
)0x02000000Ë

	)

2186 
	#ADC_SMPR1_SMP18_2
 ((
uöt32_t
)0x04000000Ë

	)

2189 
	#ADC_SMPR2_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

2190 
	#ADC_SMPR2_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

2191 
	#ADC_SMPR2_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

2192 
	#ADC_SMPR2_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

2193 
	#ADC_SMPR2_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

2194 
	#ADC_SMPR2_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

2195 
	#ADC_SMPR2_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

2196 
	#ADC_SMPR2_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

2197 
	#ADC_SMPR2_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

2198 
	#ADC_SMPR2_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

2199 
	#ADC_SMPR2_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

2200 
	#ADC_SMPR2_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

2201 
	#ADC_SMPR2_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

2202 
	#ADC_SMPR2_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

2203 
	#ADC_SMPR2_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

2204 
	#ADC_SMPR2_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

2205 
	#ADC_SMPR2_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

2206 
	#ADC_SMPR2_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

2207 
	#ADC_SMPR2_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

2208 
	#ADC_SMPR2_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

2209 
	#ADC_SMPR2_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

2210 
	#ADC_SMPR2_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

2211 
	#ADC_SMPR2_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

2212 
	#ADC_SMPR2_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

2213 
	#ADC_SMPR2_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

2214 
	#ADC_SMPR2_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

2215 
	#ADC_SMPR2_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

2216 
	#ADC_SMPR2_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

2217 
	#ADC_SMPR2_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

2218 
	#ADC_SMPR2_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

2219 
	#ADC_SMPR2_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

2220 
	#ADC_SMPR2_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

2221 
	#ADC_SMPR2_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

2222 
	#ADC_SMPR2_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

2223 
	#ADC_SMPR2_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

2224 
	#ADC_SMPR2_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

2225 
	#ADC_SMPR2_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

2226 
	#ADC_SMPR2_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

2227 
	#ADC_SMPR2_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

2228 
	#ADC_SMPR2_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

2231 
	#ADC_JOFR1_JOFFSET1
 ((
uöt16_t
)0x0FFFË

	)

2234 
	#ADC_JOFR2_JOFFSET2
 ((
uöt16_t
)0x0FFFË

	)

2237 
	#ADC_JOFR3_JOFFSET3
 ((
uöt16_t
)0x0FFFË

	)

2240 
	#ADC_JOFR4_JOFFSET4
 ((
uöt16_t
)0x0FFFË

	)

2243 
	#ADC_HTR_HT
 ((
uöt16_t
)0x0FFFË

	)

2246 
	#ADC_LTR_LT
 ((
uöt16_t
)0x0FFFË

	)

2249 
	#ADC_SQR1_SQ13
 ((
uöt32_t
)0x0000001FË

	)

2250 
	#ADC_SQR1_SQ13_0
 ((
uöt32_t
)0x00000001Ë

	)

2251 
	#ADC_SQR1_SQ13_1
 ((
uöt32_t
)0x00000002Ë

	)

2252 
	#ADC_SQR1_SQ13_2
 ((
uöt32_t
)0x00000004Ë

	)

2253 
	#ADC_SQR1_SQ13_3
 ((
uöt32_t
)0x00000008Ë

	)

2254 
	#ADC_SQR1_SQ13_4
 ((
uöt32_t
)0x00000010Ë

	)

2255 
	#ADC_SQR1_SQ14
 ((
uöt32_t
)0x000003E0Ë

	)

2256 
	#ADC_SQR1_SQ14_0
 ((
uöt32_t
)0x00000020Ë

	)

2257 
	#ADC_SQR1_SQ14_1
 ((
uöt32_t
)0x00000040Ë

	)

2258 
	#ADC_SQR1_SQ14_2
 ((
uöt32_t
)0x00000080Ë

	)

2259 
	#ADC_SQR1_SQ14_3
 ((
uöt32_t
)0x00000100Ë

	)

2260 
	#ADC_SQR1_SQ14_4
 ((
uöt32_t
)0x00000200Ë

	)

2261 
	#ADC_SQR1_SQ15
 ((
uöt32_t
)0x00007C00Ë

	)

2262 
	#ADC_SQR1_SQ15_0
 ((
uöt32_t
)0x00000400Ë

	)

2263 
	#ADC_SQR1_SQ15_1
 ((
uöt32_t
)0x00000800Ë

	)

2264 
	#ADC_SQR1_SQ15_2
 ((
uöt32_t
)0x00001000Ë

	)

2265 
	#ADC_SQR1_SQ15_3
 ((
uöt32_t
)0x00002000Ë

	)

2266 
	#ADC_SQR1_SQ15_4
 ((
uöt32_t
)0x00004000Ë

	)

2267 
	#ADC_SQR1_SQ16
 ((
uöt32_t
)0x000F8000Ë

	)

2268 
	#ADC_SQR1_SQ16_0
 ((
uöt32_t
)0x00008000Ë

	)

2269 
	#ADC_SQR1_SQ16_1
 ((
uöt32_t
)0x00010000Ë

	)

2270 
	#ADC_SQR1_SQ16_2
 ((
uöt32_t
)0x00020000Ë

	)

2271 
	#ADC_SQR1_SQ16_3
 ((
uöt32_t
)0x00040000Ë

	)

2272 
	#ADC_SQR1_SQ16_4
 ((
uöt32_t
)0x00080000Ë

	)

2273 
	#ADC_SQR1_L
 ((
uöt32_t
)0x00F00000Ë

	)

2274 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00100000Ë

	)

2275 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00200000Ë

	)

2276 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00400000Ë

	)

2277 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00800000Ë

	)

2280 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0000001FË

	)

2281 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00000001Ë

	)

2282 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00000002Ë

	)

2283 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00000004Ë

	)

2284 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00000008Ë

	)

2285 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00000010Ë

	)

2286 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x000003E0Ë

	)

2287 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00000020Ë

	)

2288 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00000040Ë

	)

2289 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00000080Ë

	)

2290 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00000100Ë

	)

2291 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00000200Ë

	)

2292 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x00007C00Ë

	)

2293 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x00000400Ë

	)

2294 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x00000800Ë

	)

2295 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x00001000Ë

	)

2296 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x00002000Ë

	)

2297 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x00004000Ë

	)

2298 
	#ADC_SQR2_SQ10
 ((
uöt32_t
)0x000F8000Ë

	)

2299 
	#ADC_SQR2_SQ10_0
 ((
uöt32_t
)0x00008000Ë

	)

2300 
	#ADC_SQR2_SQ10_1
 ((
uöt32_t
)0x00010000Ë

	)

2301 
	#ADC_SQR2_SQ10_2
 ((
uöt32_t
)0x00020000Ë

	)

2302 
	#ADC_SQR2_SQ10_3
 ((
uöt32_t
)0x00040000Ë

	)

2303 
	#ADC_SQR2_SQ10_4
 ((
uöt32_t
)0x00080000Ë

	)

2304 
	#ADC_SQR2_SQ11
 ((
uöt32_t
)0x01F00000Ë

	)

2305 
	#ADC_SQR2_SQ11_0
 ((
uöt32_t
)0x00100000Ë

	)

2306 
	#ADC_SQR2_SQ11_1
 ((
uöt32_t
)0x00200000Ë

	)

2307 
	#ADC_SQR2_SQ11_2
 ((
uöt32_t
)0x00400000Ë

	)

2308 
	#ADC_SQR2_SQ11_3
 ((
uöt32_t
)0x00800000Ë

	)

2309 
	#ADC_SQR2_SQ11_4
 ((
uöt32_t
)0x01000000Ë

	)

2310 
	#ADC_SQR2_SQ12
 ((
uöt32_t
)0x3E000000Ë

	)

2311 
	#ADC_SQR2_SQ12_0
 ((
uöt32_t
)0x02000000Ë

	)

2312 
	#ADC_SQR2_SQ12_1
 ((
uöt32_t
)0x04000000Ë

	)

2313 
	#ADC_SQR2_SQ12_2
 ((
uöt32_t
)0x08000000Ë

	)

2314 
	#ADC_SQR2_SQ12_3
 ((
uöt32_t
)0x10000000Ë

	)

2315 
	#ADC_SQR2_SQ12_4
 ((
uöt32_t
)0x20000000Ë

	)

2318 
	#ADC_SQR3_SQ1
 ((
uöt32_t
)0x0000001FË

	)

2319 
	#ADC_SQR3_SQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

2320 
	#ADC_SQR3_SQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

2321 
	#ADC_SQR3_SQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

2322 
	#ADC_SQR3_SQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

2323 
	#ADC_SQR3_SQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

2324 
	#ADC_SQR3_SQ2
 ((
uöt32_t
)0x000003E0Ë

	)

2325 
	#ADC_SQR3_SQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

2326 
	#ADC_SQR3_SQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

2327 
	#ADC_SQR3_SQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

2328 
	#ADC_SQR3_SQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

2329 
	#ADC_SQR3_SQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

2330 
	#ADC_SQR3_SQ3
 ((
uöt32_t
)0x00007C00Ë

	)

2331 
	#ADC_SQR3_SQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

2332 
	#ADC_SQR3_SQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

2333 
	#ADC_SQR3_SQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

2334 
	#ADC_SQR3_SQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

2335 
	#ADC_SQR3_SQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

2336 
	#ADC_SQR3_SQ4
 ((
uöt32_t
)0x000F8000Ë

	)

2337 
	#ADC_SQR3_SQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

2338 
	#ADC_SQR3_SQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

2339 
	#ADC_SQR3_SQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

2340 
	#ADC_SQR3_SQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

2341 
	#ADC_SQR3_SQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

2342 
	#ADC_SQR3_SQ5
 ((
uöt32_t
)0x01F00000Ë

	)

2343 
	#ADC_SQR3_SQ5_0
 ((
uöt32_t
)0x00100000Ë

	)

2344 
	#ADC_SQR3_SQ5_1
 ((
uöt32_t
)0x00200000Ë

	)

2345 
	#ADC_SQR3_SQ5_2
 ((
uöt32_t
)0x00400000Ë

	)

2346 
	#ADC_SQR3_SQ5_3
 ((
uöt32_t
)0x00800000Ë

	)

2347 
	#ADC_SQR3_SQ5_4
 ((
uöt32_t
)0x01000000Ë

	)

2348 
	#ADC_SQR3_SQ6
 ((
uöt32_t
)0x3E000000Ë

	)

2349 
	#ADC_SQR3_SQ6_0
 ((
uöt32_t
)0x02000000Ë

	)

2350 
	#ADC_SQR3_SQ6_1
 ((
uöt32_t
)0x04000000Ë

	)

2351 
	#ADC_SQR3_SQ6_2
 ((
uöt32_t
)0x08000000Ë

	)

2352 
	#ADC_SQR3_SQ6_3
 ((
uöt32_t
)0x10000000Ë

	)

2353 
	#ADC_SQR3_SQ6_4
 ((
uöt32_t
)0x20000000Ë

	)

2356 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x0000001FË

	)

2357 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000001Ë

	)

2358 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000002Ë

	)

2359 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000004Ë

	)

2360 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000008Ë

	)

2361 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00000010Ë

	)

2362 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x000003E0Ë

	)

2363 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00000020Ë

	)

2364 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00000040Ë

	)

2365 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00000080Ë

	)

2366 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00000100Ë

	)

2367 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00000200Ë

	)

2368 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x00007C00Ë

	)

2369 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00000400Ë

	)

2370 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00000800Ë

	)

2371 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00001000Ë

	)

2372 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00002000Ë

	)

2373 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x00004000Ë

	)

2374 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x000F8000Ë

	)

2375 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x00008000Ë

	)

2376 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x00010000Ë

	)

2377 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x00020000Ë

	)

2378 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x00040000Ë

	)

2379 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x00080000Ë

	)

2380 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00300000Ë

	)

2381 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00100000Ë

	)

2382 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00200000Ë

	)

2385 
	#ADC_JDR1_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2388 
	#ADC_JDR2_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2391 
	#ADC_JDR3_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2394 
	#ADC_JDR4_JDATA
 ((
uöt16_t
)0xFFFFË

	)

2397 
	#ADC_DR_DATA
 ((
uöt32_t
)0x0000FFFFË

	)

2398 
	#ADC_DR_ADC2DATA
 ((
uöt32_t
)0xFFFF0000Ë

	)

2401 
	#ADC_CSR_AWD1
 ((
uöt32_t
)0x00000001Ë

	)

2402 
	#ADC_CSR_EOC1
 ((
uöt32_t
)0x00000002Ë

	)

2403 
	#ADC_CSR_JEOC1
 ((
uöt32_t
)0x00000004Ë

	)

2404 
	#ADC_CSR_JSTRT1
 ((
uöt32_t
)0x00000008Ë

	)

2405 
	#ADC_CSR_STRT1
 ((
uöt32_t
)0x00000010Ë

	)

2406 
	#ADC_CSR_DOVR1
 ((
uöt32_t
)0x00000020Ë

	)

2407 
	#ADC_CSR_AWD2
 ((
uöt32_t
)0x00000100Ë

	)

2408 
	#ADC_CSR_EOC2
 ((
uöt32_t
)0x00000200Ë

	)

2409 
	#ADC_CSR_JEOC2
 ((
uöt32_t
)0x00000400Ë

	)

2410 
	#ADC_CSR_JSTRT2
 ((
uöt32_t
)0x00000800Ë

	)

2411 
	#ADC_CSR_STRT2
 ((
uöt32_t
)0x00001000Ë

	)

2412 
	#ADC_CSR_DOVR2
 ((
uöt32_t
)0x00002000Ë

	)

2413 
	#ADC_CSR_AWD3
 ((
uöt32_t
)0x00010000Ë

	)

2414 
	#ADC_CSR_EOC3
 ((
uöt32_t
)0x00020000Ë

	)

2415 
	#ADC_CSR_JEOC3
 ((
uöt32_t
)0x00040000Ë

	)

2416 
	#ADC_CSR_JSTRT3
 ((
uöt32_t
)0x00080000Ë

	)

2417 
	#ADC_CSR_STRT3
 ((
uöt32_t
)0x00100000Ë

	)

2418 
	#ADC_CSR_DOVR3
 ((
uöt32_t
)0x00200000Ë

	)

2421 
	#ADC_CCR_MULTI
 ((
uöt32_t
)0x0000001FË

	)

2422 
	#ADC_CCR_MULTI_0
 ((
uöt32_t
)0x00000001Ë

	)

2423 
	#ADC_CCR_MULTI_1
 ((
uöt32_t
)0x00000002Ë

	)

2424 
	#ADC_CCR_MULTI_2
 ((
uöt32_t
)0x00000004Ë

	)

2425 
	#ADC_CCR_MULTI_3
 ((
uöt32_t
)0x00000008Ë

	)

2426 
	#ADC_CCR_MULTI_4
 ((
uöt32_t
)0x00000010Ë

	)

2427 
	#ADC_CCR_DELAY
 ((
uöt32_t
)0x00000F00Ë

	)

2428 
	#ADC_CCR_DELAY_0
 ((
uöt32_t
)0x00000100Ë

	)

2429 
	#ADC_CCR_DELAY_1
 ((
uöt32_t
)0x00000200Ë

	)

2430 
	#ADC_CCR_DELAY_2
 ((
uöt32_t
)0x00000400Ë

	)

2431 
	#ADC_CCR_DELAY_3
 ((
uöt32_t
)0x00000800Ë

	)

2432 
	#ADC_CCR_DDS
 ((
uöt32_t
)0x00002000Ë

	)

2433 
	#ADC_CCR_DMA
 ((
uöt32_t
)0x0000C000Ë

	)

2434 
	#ADC_CCR_DMA_0
 ((
uöt32_t
)0x00004000Ë

	)

2435 
	#ADC_CCR_DMA_1
 ((
uöt32_t
)0x00008000Ë

	)

2436 
	#ADC_CCR_ADCPRE
 ((
uöt32_t
)0x00030000Ë

	)

2437 
	#ADC_CCR_ADCPRE_0
 ((
uöt32_t
)0x00010000Ë

	)

2438 
	#ADC_CCR_ADCPRE_1
 ((
uöt32_t
)0x00020000Ë

	)

2439 
	#ADC_CCR_VBATE
 ((
uöt32_t
)0x00400000Ë

	)

2440 
	#ADC_CCR_TSVREFE
 ((
uöt32_t
)0x00800000Ë

	)

2443 
	#ADC_CDR_DATA1
 ((
uöt32_t
)0x0000FFFFË

	)

2444 
	#ADC_CDR_DATA2
 ((
uöt32_t
)0xFFFF0000Ë

	)

2453 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

2454 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

2455 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

2456 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

2457 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

2458 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

2459 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

2460 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

2461 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

2464 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

2465 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

2466 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

2467 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

2468 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

2469 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

2470 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

2471 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

2472 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

2475 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

2476 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

2477 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

2478 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

2479 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

2480 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

2481 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

2482 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

2483 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

2484 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

2485 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

2486 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

2487 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

2488 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

2489 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

2490 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

2492 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

2493 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

2494 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

2495 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

2497 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

2498 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

2499 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

2500 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

2503 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

2504 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

2505 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

2506 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

2509 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

2510 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

2511 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

2512 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

2515 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

2516 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

2517 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

2518 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

2519 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

2520 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

2521 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

2522 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

2523 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

2524 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

2525 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

2526 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

2527 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

2528 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

2531 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

2532 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

2533 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

2535 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

2536 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

2537 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

2538 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

2540 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

2541 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

2544 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

2545 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

2546 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

2547 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

2548 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

2549 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

2553 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2554 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2555 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2556 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2557 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2560 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2561 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2562 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2565 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2566 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2567 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2568 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2571 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2572 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2573 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2574 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2577 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2578 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2579 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2580 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2581 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2584 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2585 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2586 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2589 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2590 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2591 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2592 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2595 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2596 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2597 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2598 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2601 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2602 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2603 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2604 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2605 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2608 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2609 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2610 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2613 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2614 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2615 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2616 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2619 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2620 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2621 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2622 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2625 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2626 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2627 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2628 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2631 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2632 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

2633 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2636 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2637 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2638 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2639 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2642 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2643 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2644 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2645 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2648 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2649 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2650 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2651 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2654 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2655 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

2656 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2659 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2660 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2661 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2662 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2665 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2666 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2667 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2668 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2672 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

2675 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

2676 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

2677 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

2678 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

2679 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

2680 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

2681 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

2682 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

2683 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

2684 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

2685 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

2686 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

2687 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

2688 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

2689 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

2692 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

2693 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

2694 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

2695 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

2696 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

2697 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

2698 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

2699 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

2700 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

2701 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

2702 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

2703 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

2704 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

2705 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

2706 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

2709 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

2710 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

2711 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

2712 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

2713 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

2714 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

2715 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

2716 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

2717 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

2718 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

2719 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

2720 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

2721 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

2722 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

2723 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

2726 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

2727 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

2728 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

2729 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

2730 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

2731 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

2732 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

2733 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

2734 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

2735 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

2736 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

2737 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

2738 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

2739 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

2740 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

2743 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2744 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2745 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2746 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2747 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2748 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2749 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2750 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2751 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2752 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2753 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2754 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2755 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2756 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2757 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2758 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2759 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2760 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2761 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2762 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2763 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2764 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2765 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2766 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2767 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2768 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2769 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2770 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2771 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2772 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2773 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2774 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2777 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2778 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2779 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2780 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2781 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2782 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2783 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2784 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2785 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2786 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2787 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2788 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2789 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2790 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2791 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2792 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2793 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2794 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2795 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2796 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2797 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2798 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2799 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2800 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2801 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2802 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2803 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2804 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2805 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2806 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2807 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2808 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2811 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2812 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2813 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2814 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2815 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2816 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2817 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2818 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2819 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2820 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2821 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2822 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2823 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2824 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2825 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2826 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2827 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2828 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2829 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2830 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2831 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2832 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2833 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2834 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2835 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2836 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2837 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2838 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2839 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2840 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2841 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2842 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2845 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2846 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2847 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2848 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2849 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2850 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2851 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2852 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2853 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2854 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2855 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2856 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2857 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2858 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2859 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2860 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2861 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2862 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2863 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2864 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2865 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2866 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2867 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2868 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2869 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2870 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2871 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2872 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2873 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2874 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2875 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2876 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2879 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2880 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2881 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2882 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2883 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2884 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2885 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2886 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2887 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2888 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2889 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2890 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2891 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2892 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2893 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2894 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2895 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2896 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2897 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2898 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2899 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2900 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2901 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2902 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2903 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2904 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2905 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2906 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2907 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2908 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2909 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2910 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2913 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2914 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2915 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2916 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2917 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2918 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2919 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2920 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2921 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2922 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2923 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2924 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2925 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2926 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2927 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2928 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2929 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2930 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2931 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2932 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2933 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2934 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2935 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2936 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2937 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2938 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2939 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2940 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2941 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2942 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2943 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2944 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2947 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2948 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2949 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2950 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2951 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2952 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2953 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2954 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2955 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2956 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2957 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2958 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2959 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2960 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2961 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2962 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2963 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2964 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2965 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2966 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2967 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2968 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2969 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2970 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2971 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2972 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2973 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2974 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2975 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2976 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2977 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2978 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2981 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2982 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2983 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2984 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2985 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2986 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2987 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2988 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2989 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2990 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2991 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2992 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2993 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2994 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2995 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2996 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2997 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2998 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2999 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3000 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3001 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3002 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3003 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3004 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3005 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3006 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3007 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3008 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3009 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3010 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3011 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3012 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3015 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3016 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3017 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3018 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3019 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3020 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3021 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3022 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3023 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3024 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3025 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3026 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3027 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3028 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3029 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3030 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3031 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3032 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3033 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3034 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3035 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3036 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3037 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3038 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3039 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3040 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3041 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3042 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3043 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3044 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3045 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3046 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3049 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3050 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3051 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3052 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3053 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3054 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3055 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3056 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3057 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3058 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3059 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3060 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3061 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3062 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3063 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3064 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3065 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3066 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3067 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3068 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3069 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3070 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3071 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3072 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3073 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3074 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3075 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3076 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3077 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3078 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3079 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3080 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3083 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3084 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3085 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3086 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3087 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3088 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3089 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3090 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3091 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3092 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3093 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3094 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3095 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3096 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3097 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3098 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3099 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3100 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3101 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3102 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3103 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3104 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3105 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3106 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3107 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3108 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3109 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3110 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3111 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3112 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3113 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3114 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3117 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3118 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3119 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3120 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3121 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3122 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3123 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3124 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3125 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3126 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3127 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3128 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3129 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3130 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3131 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3132 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3133 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3134 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3135 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3136 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3137 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3138 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3139 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3140 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3141 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3142 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3143 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3144 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3145 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3146 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3147 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3148 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3151 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3152 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3153 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3154 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3155 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3156 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3157 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3158 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3159 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3160 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3161 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3162 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3163 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3164 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3165 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3166 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3167 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3168 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3169 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3170 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3171 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3172 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3173 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3174 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3175 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3176 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3177 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3178 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3179 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3180 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3181 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3182 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3185 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3186 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3187 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3188 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3189 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3190 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3191 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3192 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3193 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3194 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3195 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3196 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3197 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3198 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3199 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3200 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3201 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3202 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3203 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3204 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3205 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3206 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3207 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3208 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3209 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3210 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3211 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3212 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3213 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3214 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3215 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3216 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3219 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3220 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3221 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3222 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3223 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3224 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3225 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3226 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3227 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3228 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3229 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3230 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3231 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3232 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3233 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3234 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3235 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3236 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3237 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3238 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3239 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3240 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3241 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3242 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3243 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3244 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3245 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3246 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3247 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3248 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3249 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3250 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3253 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3254 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3255 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3256 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3257 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3258 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3259 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3260 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3261 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3262 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3263 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3264 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3265 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3266 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3267 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3268 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3269 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3270 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3271 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3272 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3273 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3274 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3275 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3276 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3277 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3278 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3279 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3280 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3281 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3282 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3283 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3284 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3287 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3288 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3289 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3290 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3291 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3292 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3293 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3294 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3295 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3296 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3297 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3298 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3299 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3300 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3301 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3302 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3303 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3304 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3305 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3306 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3307 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3308 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3309 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3310 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3311 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3312 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3313 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3314 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3315 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3316 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3317 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3318 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3321 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3322 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3323 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3324 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3325 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3326 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3327 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3328 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3329 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3330 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3331 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3332 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3333 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3334 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3335 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3336 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3337 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3338 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3339 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3340 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3341 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3342 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3343 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3344 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3345 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3346 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3347 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3348 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3349 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3350 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3351 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3352 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3355 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3356 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3357 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3358 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3359 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3360 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3361 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3362 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3363 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3364 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3365 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3366 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3367 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3368 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3369 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3370 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3371 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3372 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3373 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3374 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3375 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3376 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3377 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3378 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3379 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3380 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3381 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3382 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3383 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3384 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3385 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3386 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3389 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3390 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3391 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3392 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3393 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3394 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3395 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3396 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3397 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3398 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3399 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3400 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3401 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3402 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3403 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3404 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3405 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3406 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3407 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3408 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3409 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3410 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3411 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3412 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3413 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3414 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3415 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3416 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3417 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3418 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3419 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3420 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3423 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3424 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3425 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3426 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3427 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3428 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3429 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3430 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3431 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3432 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3433 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3434 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3435 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3436 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3437 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3438 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3439 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3440 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3441 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3442 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3443 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3444 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3445 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3446 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3447 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3448 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3449 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3450 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3451 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3452 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3453 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3454 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3457 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3458 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3459 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3460 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3461 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3462 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3463 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3464 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3465 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3466 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3467 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3468 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3469 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3470 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3471 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3472 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3473 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3474 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3475 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3476 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3477 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3478 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3479 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3480 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3481 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3482 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3483 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3484 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3485 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3486 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3487 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3488 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3491 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3492 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3493 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3494 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3495 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3496 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3497 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3498 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3499 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3500 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3501 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3502 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3503 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3504 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3505 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3506 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3507 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3508 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3509 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3510 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3511 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3512 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3513 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3514 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3515 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3516 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3517 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3518 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3519 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3520 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3521 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3522 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3525 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3526 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3527 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3528 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3529 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3530 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3531 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3532 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3533 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3534 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3535 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3536 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3537 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3538 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3539 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3540 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3541 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3542 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3543 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3544 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3545 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3546 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3547 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3548 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3549 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3550 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3551 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3552 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3553 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3554 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3555 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3556 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3559 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3560 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3561 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3562 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3563 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3564 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3565 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3566 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3567 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3568 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3569 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3570 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3571 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3572 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3573 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3574 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3575 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3576 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3577 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3578 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3579 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3580 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3581 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3582 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3583 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3584 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3585 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3586 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3587 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3588 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3589 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3590 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3593 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3594 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3595 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3596 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3597 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3598 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3599 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3600 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3601 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3602 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3603 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3604 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3605 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3606 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3607 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3608 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3609 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3610 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3611 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3612 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3613 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3614 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3615 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3616 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3617 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3618 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3619 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3620 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3621 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3622 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3623 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3624 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3627 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3628 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3629 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3630 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3631 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3632 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3633 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3634 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3635 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3636 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3637 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3638 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3639 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3640 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3641 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3642 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3643 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3644 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3645 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3646 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3647 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3648 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3649 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3650 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3651 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3652 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3653 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3654 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3655 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3656 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3657 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3658 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3661 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3662 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3663 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3664 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3665 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3666 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3667 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3668 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3669 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3670 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3671 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3672 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3673 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3674 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3675 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3676 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3677 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3678 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3679 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3680 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3681 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3682 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3683 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3684 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3685 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3686 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3687 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3688 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3689 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3690 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3691 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3692 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3700 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

3704 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

3708 
	#CRC_CR_RESET
 ((
uöt8_t
)0x01Ë

	)

3716 
	#CRYP_CR_ALGODIR
 ((
uöt32_t
)0x00000004)

	)

3718 
	#CRYP_CR_ALGOMODE
 ((
uöt32_t
)0x00000038)

	)

3719 
	#CRYP_CR_ALGOMODE_0
 ((
uöt32_t
)0x00000008)

	)

3720 
	#CRYP_CR_ALGOMODE_1
 ((
uöt32_t
)0x00000010)

	)

3721 
	#CRYP_CR_ALGOMODE_2
 ((
uöt32_t
)0x00000020)

	)

3722 
	#CRYP_CR_ALGOMODE_TDES_ECB
 ((
uöt32_t
)0x00000000)

	)

3723 
	#CRYP_CR_ALGOMODE_TDES_CBC
 ((
uöt32_t
)0x00000008)

	)

3724 
	#CRYP_CR_ALGOMODE_DES_ECB
 ((
uöt32_t
)0x00000010)

	)

3725 
	#CRYP_CR_ALGOMODE_DES_CBC
 ((
uöt32_t
)0x00000018)

	)

3726 
	#CRYP_CR_ALGOMODE_AES_ECB
 ((
uöt32_t
)0x00000020)

	)

3727 
	#CRYP_CR_ALGOMODE_AES_CBC
 ((
uöt32_t
)0x00000028)

	)

3728 
	#CRYP_CR_ALGOMODE_AES_CTR
 ((
uöt32_t
)0x00000030)

	)

3729 
	#CRYP_CR_ALGOMODE_AES_KEY
 ((
uöt32_t
)0x00000038)

	)

3731 
	#CRYP_CR_DATATYPE
 ((
uöt32_t
)0x000000C0)

	)

3732 
	#CRYP_CR_DATATYPE_0
 ((
uöt32_t
)0x00000040)

	)

3733 
	#CRYP_CR_DATATYPE_1
 ((
uöt32_t
)0x00000080)

	)

3734 
	#CRYP_CR_KEYSIZE
 ((
uöt32_t
)0x00000300)

	)

3735 
	#CRYP_CR_KEYSIZE_0
 ((
uöt32_t
)0x00000100)

	)

3736 
	#CRYP_CR_KEYSIZE_1
 ((
uöt32_t
)0x00000200)

	)

3737 
	#CRYP_CR_FFLUSH
 ((
uöt32_t
)0x00004000)

	)

3738 
	#CRYP_CR_CRYPEN
 ((
uöt32_t
)0x00008000)

	)

3740 
	#CRYP_SR_IFEM
 ((
uöt32_t
)0x00000001)

	)

3741 
	#CRYP_SR_IFNF
 ((
uöt32_t
)0x00000002)

	)

3742 
	#CRYP_SR_OFNE
 ((
uöt32_t
)0x00000004)

	)

3743 
	#CRYP_SR_OFFU
 ((
uöt32_t
)0x00000008)

	)

3744 
	#CRYP_SR_BUSY
 ((
uöt32_t
)0x00000010)

	)

3746 
	#CRYP_DMACR_DIEN
 ((
uöt32_t
)0x00000001)

	)

3747 
	#CRYP_DMACR_DOEN
 ((
uöt32_t
)0x00000002)

	)

3749 
	#CRYP_IMSCR_INIM
 ((
uöt32_t
)0x00000001)

	)

3750 
	#CRYP_IMSCR_OUTIM
 ((
uöt32_t
)0x00000002)

	)

3752 
	#CRYP_RISR_OUTRIS
 ((
uöt32_t
)0x00000001)

	)

3753 
	#CRYP_RISR_INRIS
 ((
uöt32_t
)0x00000002)

	)

3755 
	#CRYP_MISR_INMIS
 ((
uöt32_t
)0x00000001)

	)

3756 
	#CRYP_MISR_OUTMIS
 ((
uöt32_t
)0x00000002)

	)

3764 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

3765 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

3766 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

3768 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

3769 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

3770 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

3771 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

3773 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

3774 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

3775 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

3777 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

3778 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

3779 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

3780 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

3781 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

3783 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

3784 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

3785 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

3786 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

3788 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

3789 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

3790 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

3791 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

3793 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

3794 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

3795 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

3797 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

3798 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

3799 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

3800 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

3801 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

3803 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

3806 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

3807 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

3810 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

3813 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3816 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

3819 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

3822 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3825 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

3828 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

3829 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

3832 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

3833 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

3836 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

3837 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

3840 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

3843 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

3846 
	#DAC_SR_DMAUDR1
 ((
uöt32_t
)0x00002000Ë

	)

3847 
	#DAC_SR_DMAUDR2
 ((
uöt32_t
)0x20000000Ë

	)

3861 
	#DCMI_CR_CAPTURE
 ((
uöt32_t
)0x00000001)

	)

3862 
	#DCMI_CR_CM
 ((
uöt32_t
)0x00000002)

	)

3863 
	#DCMI_CR_CROP
 ((
uöt32_t
)0x00000004)

	)

3864 
	#DCMI_CR_JPEG
 ((
uöt32_t
)0x00000008)

	)

3865 
	#DCMI_CR_ESS
 ((
uöt32_t
)0x00000010)

	)

3866 
	#DCMI_CR_PCKPOL
 ((
uöt32_t
)0x00000020)

	)

3867 
	#DCMI_CR_HSPOL
 ((
uöt32_t
)0x00000040)

	)

3868 
	#DCMI_CR_VSPOL
 ((
uöt32_t
)0x00000080)

	)

3869 
	#DCMI_CR_FCRC_0
 ((
uöt32_t
)0x00000100)

	)

3870 
	#DCMI_CR_FCRC_1
 ((
uöt32_t
)0x00000200)

	)

3871 
	#DCMI_CR_EDM_0
 ((
uöt32_t
)0x00000400)

	)

3872 
	#DCMI_CR_EDM_1
 ((
uöt32_t
)0x00000800)

	)

3873 
	#DCMI_CR_CRE
 ((
uöt32_t
)0x00001000)

	)

3874 
	#DCMI_CR_ENABLE
 ((
uöt32_t
)0x00004000)

	)

3877 
	#DCMI_SR_HSYNC
 ((
uöt32_t
)0x00000001)

	)

3878 
	#DCMI_SR_VSYNC
 ((
uöt32_t
)0x00000002)

	)

3879 
	#DCMI_SR_FNE
 ((
uöt32_t
)0x00000004)

	)

3882 
	#DCMI_RISR_FRAME_RIS
 ((
uöt32_t
)0x00000001)

	)

3883 
	#DCMI_RISR_OVF_RIS
 ((
uöt32_t
)0x00000002)

	)

3884 
	#DCMI_RISR_ERR_RIS
 ((
uöt32_t
)0x00000004)

	)

3885 
	#DCMI_RISR_VSYNC_RIS
 ((
uöt32_t
)0x00000008)

	)

3886 
	#DCMI_RISR_LINE_RIS
 ((
uöt32_t
)0x00000010)

	)

3889 
	#DCMI_IER_FRAME_IE
 ((
uöt32_t
)0x00000001)

	)

3890 
	#DCMI_IER_OVF_IE
 ((
uöt32_t
)0x00000002)

	)

3891 
	#DCMI_IER_ERR_IE
 ((
uöt32_t
)0x00000004)

	)

3892 
	#DCMI_IER_VSYNC_IE
 ((
uöt32_t
)0x00000008)

	)

3893 
	#DCMI_IER_LINE_IE
 ((
uöt32_t
)0x00000010)

	)

3896 
	#DCMI_MISR_FRAME_MIS
 ((
uöt32_t
)0x00000001)

	)

3897 
	#DCMI_MISR_OVF_MIS
 ((
uöt32_t
)0x00000002)

	)

3898 
	#DCMI_MISR_ERR_MIS
 ((
uöt32_t
)0x00000004)

	)

3899 
	#DCMI_MISR_VSYNC_MIS
 ((
uöt32_t
)0x00000008)

	)

3900 
	#DCMI_MISR_LINE_MIS
 ((
uöt32_t
)0x00000010)

	)

3903 
	#DCMI_ICR_FRAME_ISC
 ((
uöt32_t
)0x00000001)

	)

3904 
	#DCMI_ICR_OVF_ISC
 ((
uöt32_t
)0x00000002)

	)

3905 
	#DCMI_ICR_ERR_ISC
 ((
uöt32_t
)0x00000004)

	)

3906 
	#DCMI_ICR_VSYNC_ISC
 ((
uöt32_t
)0x00000008)

	)

3907 
	#DCMI_ICR_LINE_ISC
 ((
uöt32_t
)0x00000010)

	)

3915 
	#DMA_SxCR_CHSEL
 ((
uöt32_t
)0x0E000000)

	)

3916 
	#DMA_SxCR_CHSEL_0
 ((
uöt32_t
)0x02000000)

	)

3917 
	#DMA_SxCR_CHSEL_1
 ((
uöt32_t
)0x04000000)

	)

3918 
	#DMA_SxCR_CHSEL_2
 ((
uöt32_t
)0x08000000)

	)

3919 
	#DMA_SxCR_MBURST
 ((
uöt32_t
)0x01800000)

	)

3920 
	#DMA_SxCR_MBURST_0
 ((
uöt32_t
)0x00800000)

	)

3921 
	#DMA_SxCR_MBURST_1
 ((
uöt32_t
)0x01000000)

	)

3922 
	#DMA_SxCR_PBURST
 ((
uöt32_t
)0x00600000)

	)

3923 
	#DMA_SxCR_PBURST_0
 ((
uöt32_t
)0x00200000)

	)

3924 
	#DMA_SxCR_PBURST_1
 ((
uöt32_t
)0x00400000)

	)

3925 
	#DMA_SxCR_ACK
 ((
uöt32_t
)0x00100000)

	)

3926 
	#DMA_SxCR_CT
 ((
uöt32_t
)0x00080000)

	)

3927 
	#DMA_SxCR_DBM
 ((
uöt32_t
)0x00040000)

	)

3928 
	#DMA_SxCR_PL
 ((
uöt32_t
)0x00030000)

	)

3929 
	#DMA_SxCR_PL_0
 ((
uöt32_t
)0x00010000)

	)

3930 
	#DMA_SxCR_PL_1
 ((
uöt32_t
)0x00020000)

	)

3931 
	#DMA_SxCR_PINCOS
 ((
uöt32_t
)0x00008000)

	)

3932 
	#DMA_SxCR_MSIZE
 ((
uöt32_t
)0x00006000)

	)

3933 
	#DMA_SxCR_MSIZE_0
 ((
uöt32_t
)0x00002000)

	)

3934 
	#DMA_SxCR_MSIZE_1
 ((
uöt32_t
)0x00004000)

	)

3935 
	#DMA_SxCR_PSIZE
 ((
uöt32_t
)0x00001800)

	)

3936 
	#DMA_SxCR_PSIZE_0
 ((
uöt32_t
)0x00000800)

	)

3937 
	#DMA_SxCR_PSIZE_1
 ((
uöt32_t
)0x00001000)

	)

3938 
	#DMA_SxCR_MINC
 ((
uöt32_t
)0x00000400)

	)

3939 
	#DMA_SxCR_PINC
 ((
uöt32_t
)0x00000200)

	)

3940 
	#DMA_SxCR_CIRC
 ((
uöt32_t
)0x00000100)

	)

3941 
	#DMA_SxCR_DIR
 ((
uöt32_t
)0x000000C0)

	)

3942 
	#DMA_SxCR_DIR_0
 ((
uöt32_t
)0x00000040)

	)

3943 
	#DMA_SxCR_DIR_1
 ((
uöt32_t
)0x00000080)

	)

3944 
	#DMA_SxCR_PFCTRL
 ((
uöt32_t
)0x00000020)

	)

3945 
	#DMA_SxCR_TCIE
 ((
uöt32_t
)0x00000010)

	)

3946 
	#DMA_SxCR_HTIE
 ((
uöt32_t
)0x00000008)

	)

3947 
	#DMA_SxCR_TEIE
 ((
uöt32_t
)0x00000004)

	)

3948 
	#DMA_SxCR_DMEIE
 ((
uöt32_t
)0x00000002)

	)

3949 
	#DMA_SxCR_EN
 ((
uöt32_t
)0x00000001)

	)

3952 
	#DMA_SxNDT
 ((
uöt32_t
)0x0000FFFF)

	)

3953 
	#DMA_SxNDT_0
 ((
uöt32_t
)0x00000001)

	)

3954 
	#DMA_SxNDT_1
 ((
uöt32_t
)0x00000002)

	)

3955 
	#DMA_SxNDT_2
 ((
uöt32_t
)0x00000004)

	)

3956 
	#DMA_SxNDT_3
 ((
uöt32_t
)0x00000008)

	)

3957 
	#DMA_SxNDT_4
 ((
uöt32_t
)0x00000010)

	)

3958 
	#DMA_SxNDT_5
 ((
uöt32_t
)0x00000020)

	)

3959 
	#DMA_SxNDT_6
 ((
uöt32_t
)0x00000040)

	)

3960 
	#DMA_SxNDT_7
 ((
uöt32_t
)0x00000080)

	)

3961 
	#DMA_SxNDT_8
 ((
uöt32_t
)0x00000100)

	)

3962 
	#DMA_SxNDT_9
 ((
uöt32_t
)0x00000200)

	)

3963 
	#DMA_SxNDT_10
 ((
uöt32_t
)0x00000400)

	)

3964 
	#DMA_SxNDT_11
 ((
uöt32_t
)0x00000800)

	)

3965 
	#DMA_SxNDT_12
 ((
uöt32_t
)0x00001000)

	)

3966 
	#DMA_SxNDT_13
 ((
uöt32_t
)0x00002000)

	)

3967 
	#DMA_SxNDT_14
 ((
uöt32_t
)0x00004000)

	)

3968 
	#DMA_SxNDT_15
 ((
uöt32_t
)0x00008000)

	)

3971 
	#DMA_SxFCR_FEIE
 ((
uöt32_t
)0x00000080)

	)

3972 
	#DMA_SxFCR_FS
 ((
uöt32_t
)0x00000038)

	)

3973 
	#DMA_SxFCR_FS_0
 ((
uöt32_t
)0x00000008)

	)

3974 
	#DMA_SxFCR_FS_1
 ((
uöt32_t
)0x00000010)

	)

3975 
	#DMA_SxFCR_FS_2
 ((
uöt32_t
)0x00000020)

	)

3976 
	#DMA_SxFCR_DMDIS
 ((
uöt32_t
)0x00000004)

	)

3977 
	#DMA_SxFCR_FTH
 ((
uöt32_t
)0x00000003)

	)

3978 
	#DMA_SxFCR_FTH_0
 ((
uöt32_t
)0x00000001)

	)

3979 
	#DMA_SxFCR_FTH_1
 ((
uöt32_t
)0x00000002)

	)

3982 
	#DMA_LISR_TCIF3
 ((
uöt32_t
)0x08000000)

	)

3983 
	#DMA_LISR_HTIF3
 ((
uöt32_t
)0x04000000)

	)

3984 
	#DMA_LISR_TEIF3
 ((
uöt32_t
)0x02000000)

	)

3985 
	#DMA_LISR_DMEIF3
 ((
uöt32_t
)0x01000000)

	)

3986 
	#DMA_LISR_FEIF3
 ((
uöt32_t
)0x00400000)

	)

3987 
	#DMA_LISR_TCIF2
 ((
uöt32_t
)0x00200000)

	)

3988 
	#DMA_LISR_HTIF2
 ((
uöt32_t
)0x00100000)

	)

3989 
	#DMA_LISR_TEIF2
 ((
uöt32_t
)0x00080000)

	)

3990 
	#DMA_LISR_DMEIF2
 ((
uöt32_t
)0x00040000)

	)

3991 
	#DMA_LISR_FEIF2
 ((
uöt32_t
)0x00010000)

	)

3992 
	#DMA_LISR_TCIF1
 ((
uöt32_t
)0x00000800)

	)

3993 
	#DMA_LISR_HTIF1
 ((
uöt32_t
)0x00000400)

	)

3994 
	#DMA_LISR_TEIF1
 ((
uöt32_t
)0x00000200)

	)

3995 
	#DMA_LISR_DMEIF1
 ((
uöt32_t
)0x00000100)

	)

3996 
	#DMA_LISR_FEIF1
 ((
uöt32_t
)0x00000040)

	)

3997 
	#DMA_LISR_TCIF0
 ((
uöt32_t
)0x00000020)

	)

3998 
	#DMA_LISR_HTIF0
 ((
uöt32_t
)0x00000010)

	)

3999 
	#DMA_LISR_TEIF0
 ((
uöt32_t
)0x00000008)

	)

4000 
	#DMA_LISR_DMEIF0
 ((
uöt32_t
)0x00000004)

	)

4001 
	#DMA_LISR_FEIF0
 ((
uöt32_t
)0x00000001)

	)

4004 
	#DMA_HISR_TCIF7
 ((
uöt32_t
)0x08000000)

	)

4005 
	#DMA_HISR_HTIF7
 ((
uöt32_t
)0x04000000)

	)

4006 
	#DMA_HISR_TEIF7
 ((
uöt32_t
)0x02000000)

	)

4007 
	#DMA_HISR_DMEIF7
 ((
uöt32_t
)0x01000000)

	)

4008 
	#DMA_HISR_FEIF7
 ((
uöt32_t
)0x00400000)

	)

4009 
	#DMA_HISR_TCIF6
 ((
uöt32_t
)0x00200000)

	)

4010 
	#DMA_HISR_HTIF6
 ((
uöt32_t
)0x00100000)

	)

4011 
	#DMA_HISR_TEIF6
 ((
uöt32_t
)0x00080000)

	)

4012 
	#DMA_HISR_DMEIF6
 ((
uöt32_t
)0x00040000)

	)

4013 
	#DMA_HISR_FEIF6
 ((
uöt32_t
)0x00010000)

	)

4014 
	#DMA_HISR_TCIF5
 ((
uöt32_t
)0x00000800)

	)

4015 
	#DMA_HISR_HTIF5
 ((
uöt32_t
)0x00000400)

	)

4016 
	#DMA_HISR_TEIF5
 ((
uöt32_t
)0x00000200)

	)

4017 
	#DMA_HISR_DMEIF5
 ((
uöt32_t
)0x00000100)

	)

4018 
	#DMA_HISR_FEIF5
 ((
uöt32_t
)0x00000040)

	)

4019 
	#DMA_HISR_TCIF4
 ((
uöt32_t
)0x00000020)

	)

4020 
	#DMA_HISR_HTIF4
 ((
uöt32_t
)0x00000010)

	)

4021 
	#DMA_HISR_TEIF4
 ((
uöt32_t
)0x00000008)

	)

4022 
	#DMA_HISR_DMEIF4
 ((
uöt32_t
)0x00000004)

	)

4023 
	#DMA_HISR_FEIF4
 ((
uöt32_t
)0x00000001)

	)

4026 
	#DMA_LIFCR_CTCIF3
 ((
uöt32_t
)0x08000000)

	)

4027 
	#DMA_LIFCR_CHTIF3
 ((
uöt32_t
)0x04000000)

	)

4028 
	#DMA_LIFCR_CTEIF3
 ((
uöt32_t
)0x02000000)

	)

4029 
	#DMA_LIFCR_CDMEIF3
 ((
uöt32_t
)0x01000000)

	)

4030 
	#DMA_LIFCR_CFEIF3
 ((
uöt32_t
)0x00400000)

	)

4031 
	#DMA_LIFCR_CTCIF2
 ((
uöt32_t
)0x00200000)

	)

4032 
	#DMA_LIFCR_CHTIF2
 ((
uöt32_t
)0x00100000)

	)

4033 
	#DMA_LIFCR_CTEIF2
 ((
uöt32_t
)0x00080000)

	)

4034 
	#DMA_LIFCR_CDMEIF2
 ((
uöt32_t
)0x00040000)

	)

4035 
	#DMA_LIFCR_CFEIF2
 ((
uöt32_t
)0x00010000)

	)

4036 
	#DMA_LIFCR_CTCIF1
 ((
uöt32_t
)0x00000800)

	)

4037 
	#DMA_LIFCR_CHTIF1
 ((
uöt32_t
)0x00000400)

	)

4038 
	#DMA_LIFCR_CTEIF1
 ((
uöt32_t
)0x00000200)

	)

4039 
	#DMA_LIFCR_CDMEIF1
 ((
uöt32_t
)0x00000100)

	)

4040 
	#DMA_LIFCR_CFEIF1
 ((
uöt32_t
)0x00000040)

	)

4041 
	#DMA_LIFCR_CTCIF0
 ((
uöt32_t
)0x00000020)

	)

4042 
	#DMA_LIFCR_CHTIF0
 ((
uöt32_t
)0x00000010)

	)

4043 
	#DMA_LIFCR_CTEIF0
 ((
uöt32_t
)0x00000008)

	)

4044 
	#DMA_LIFCR_CDMEIF0
 ((
uöt32_t
)0x00000004)

	)

4045 
	#DMA_LIFCR_CFEIF0
 ((
uöt32_t
)0x00000001)

	)

4048 
	#DMA_HIFCR_CTCIF7
 ((
uöt32_t
)0x08000000)

	)

4049 
	#DMA_HIFCR_CHTIF7
 ((
uöt32_t
)0x04000000)

	)

4050 
	#DMA_HIFCR_CTEIF7
 ((
uöt32_t
)0x02000000)

	)

4051 
	#DMA_HIFCR_CDMEIF7
 ((
uöt32_t
)0x01000000)

	)

4052 
	#DMA_HIFCR_CFEIF7
 ((
uöt32_t
)0x00400000)

	)

4053 
	#DMA_HIFCR_CTCIF6
 ((
uöt32_t
)0x00200000)

	)

4054 
	#DMA_HIFCR_CHTIF6
 ((
uöt32_t
)0x00100000)

	)

4055 
	#DMA_HIFCR_CTEIF6
 ((
uöt32_t
)0x00080000)

	)

4056 
	#DMA_HIFCR_CDMEIF6
 ((
uöt32_t
)0x00040000)

	)

4057 
	#DMA_HIFCR_CFEIF6
 ((
uöt32_t
)0x00010000)

	)

4058 
	#DMA_HIFCR_CTCIF5
 ((
uöt32_t
)0x00000800)

	)

4059 
	#DMA_HIFCR_CHTIF5
 ((
uöt32_t
)0x00000400)

	)

4060 
	#DMA_HIFCR_CTEIF5
 ((
uöt32_t
)0x00000200)

	)

4061 
	#DMA_HIFCR_CDMEIF5
 ((
uöt32_t
)0x00000100)

	)

4062 
	#DMA_HIFCR_CFEIF5
 ((
uöt32_t
)0x00000040)

	)

4063 
	#DMA_HIFCR_CTCIF4
 ((
uöt32_t
)0x00000020)

	)

4064 
	#DMA_HIFCR_CHTIF4
 ((
uöt32_t
)0x00000010)

	)

4065 
	#DMA_HIFCR_CTEIF4
 ((
uöt32_t
)0x00000008)

	)

4066 
	#DMA_HIFCR_CDMEIF4
 ((
uöt32_t
)0x00000004)

	)

4067 
	#DMA_HIFCR_CFEIF4
 ((
uöt32_t
)0x00000001)

	)

4075 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

4076 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

4077 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

4078 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

4079 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

4080 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

4081 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

4082 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

4083 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

4084 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

4085 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

4086 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

4087 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

4088 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

4089 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

4090 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

4091 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

4092 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

4093 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

4094 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

4097 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

4098 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

4099 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

4100 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

4101 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

4102 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

4103 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

4104 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

4105 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

4106 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

4107 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

4108 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

4109 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

4110 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

4111 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

4112 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

4113 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

4114 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

4115 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

4116 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

4119 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

4120 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

4121 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

4122 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

4123 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

4124 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

4125 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

4126 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

4127 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

4128 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

4129 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

4130 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

4131 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

4132 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

4133 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

4134 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

4135 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

4136 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

4137 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

4138 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

4141 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

4142 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

4143 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

4144 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

4145 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

4146 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

4147 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

4148 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

4149 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

4150 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

4151 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

4152 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

4153 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

4154 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

4155 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

4156 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

4157 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

4158 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

4159 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

4160 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

4163 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

4164 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

4165 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

4166 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

4167 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

4168 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

4169 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

4170 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

4171 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

4172 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

4173 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

4174 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

4175 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

4176 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

4177 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

4178 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

4179 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

4180 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

4181 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

4182 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

4185 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

4186 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

4187 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

4188 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

4189 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

4190 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

4191 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

4192 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

4193 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

4194 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

4195 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

4196 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

4197 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

4198 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

4199 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

4200 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

4201 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

4202 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

4203 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

4204 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

4212 
	#FLASH_ACR_LATENCY
 ((
uöt32_t
)0x00000007)

	)

4213 
	#FLASH_ACR_LATENCY_0WS
 ((
uöt32_t
)0x00000000)

	)

4214 
	#FLASH_ACR_LATENCY_1WS
 ((
uöt32_t
)0x00000001)

	)

4215 
	#FLASH_ACR_LATENCY_2WS
 ((
uöt32_t
)0x00000002)

	)

4216 
	#FLASH_ACR_LATENCY_3WS
 ((
uöt32_t
)0x00000003)

	)

4217 
	#FLASH_ACR_LATENCY_4WS
 ((
uöt32_t
)0x00000004)

	)

4218 
	#FLASH_ACR_LATENCY_5WS
 ((
uöt32_t
)0x00000005)

	)

4219 
	#FLASH_ACR_LATENCY_6WS
 ((
uöt32_t
)0x00000006)

	)

4220 
	#FLASH_ACR_LATENCY_7WS
 ((
uöt32_t
)0x00000007)

	)

4222 
	#FLASH_ACR_PRFTEN
 ((
uöt32_t
)0x00000100)

	)

4223 
	#FLASH_ACR_ICEN
 ((
uöt32_t
)0x00000200)

	)

4224 
	#FLASH_ACR_DCEN
 ((
uöt32_t
)0x00000400)

	)

4225 
	#FLASH_ACR_ICRST
 ((
uöt32_t
)0x00000800)

	)

4226 
	#FLASH_ACR_DCRST
 ((
uöt32_t
)0x00001000)

	)

4227 
	#FLASH_ACR_BYTE0_ADDRESS
 ((
uöt32_t
)0x40023C00)

	)

4228 
	#FLASH_ACR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40023C03)

	)

4231 
	#FLASH_SR_EOP
 ((
uöt32_t
)0x00000001)

	)

4232 
	#FLASH_SR_SOP
 ((
uöt32_t
)0x00000002)

	)

4233 
	#FLASH_SR_WRPERR
 ((
uöt32_t
)0x00000010)

	)

4234 
	#FLASH_SR_PGAERR
 ((
uöt32_t
)0x00000020)

	)

4235 
	#FLASH_SR_PGPERR
 ((
uöt32_t
)0x00000040)

	)

4236 
	#FLASH_SR_PGSERR
 ((
uöt32_t
)0x00000080)

	)

4237 
	#FLASH_SR_BSY
 ((
uöt32_t
)0x00010000)

	)

4240 
	#FLASH_CR_PG
 ((
uöt32_t
)0x00000001)

	)

4241 
	#FLASH_CR_SER
 ((
uöt32_t
)0x00000002)

	)

4242 
	#FLASH_CR_MER
 ((
uöt32_t
)0x00000004)

	)

4243 
	#FLASH_CR_SNB_0
 ((
uöt32_t
)0x00000008)

	)

4244 
	#FLASH_CR_SNB_1
 ((
uöt32_t
)0x00000010)

	)

4245 
	#FLASH_CR_SNB_2
 ((
uöt32_t
)0x00000020)

	)

4246 
	#FLASH_CR_SNB_3
 ((
uöt32_t
)0x00000040)

	)

4247 
	#FLASH_CR_PSIZE_0
 ((
uöt32_t
)0x00000100)

	)

4248 
	#FLASH_CR_PSIZE_1
 ((
uöt32_t
)0x00000200)

	)

4249 
	#FLASH_CR_STRT
 ((
uöt32_t
)0x00010000)

	)

4250 
	#FLASH_CR_EOPIE
 ((
uöt32_t
)0x01000000)

	)

4251 
	#FLASH_CR_LOCK
 ((
uöt32_t
)0x80000000)

	)

4254 
	#FLASH_OPTCR_OPTLOCK
 ((
uöt32_t
)0x00000001)

	)

4255 
	#FLASH_OPTCR_OPTSTRT
 ((
uöt32_t
)0x00000002)

	)

4256 
	#FLASH_OPTCR_BOR_LEV_0
 ((
uöt32_t
)0x00000004)

	)

4257 
	#FLASH_OPTCR_BOR_LEV_1
 ((
uöt32_t
)0x00000008)

	)

4258 
	#FLASH_OPTCR_BOR_LEV
 ((
uöt32_t
)0x0000000C)

	)

4259 
	#FLASH_OPTCR_WDG_SW
 ((
uöt32_t
)0x00000020)

	)

4260 
	#FLASH_OPTCR_nRST_STOP
 ((
uöt32_t
)0x00000040)

	)

4261 
	#FLASH_OPTCR_nRST_STDBY
 ((
uöt32_t
)0x00000080)

	)

4262 
	#FLASH_OPTCR_RDP_0
 ((
uöt32_t
)0x00000100)

	)

4263 
	#FLASH_OPTCR_RDP_1
 ((
uöt32_t
)0x00000200)

	)

4264 
	#FLASH_OPTCR_RDP_2
 ((
uöt32_t
)0x00000400)

	)

4265 
	#FLASH_OPTCR_RDP_3
 ((
uöt32_t
)0x00000800)

	)

4266 
	#FLASH_OPTCR_RDP_4
 ((
uöt32_t
)0x00001000)

	)

4267 
	#FLASH_OPTCR_RDP_5
 ((
uöt32_t
)0x00002000)

	)

4268 
	#FLASH_OPTCR_RDP_6
 ((
uöt32_t
)0x00004000)

	)

4269 
	#FLASH_OPTCR_RDP_7
 ((
uöt32_t
)0x00008000)

	)

4270 
	#FLASH_OPTCR_nWRP_0
 ((
uöt32_t
)0x00010000)

	)

4271 
	#FLASH_OPTCR_nWRP_1
 ((
uöt32_t
)0x00020000)

	)

4272 
	#FLASH_OPTCR_nWRP_2
 ((
uöt32_t
)0x00040000)

	)

4273 
	#FLASH_OPTCR_nWRP_3
 ((
uöt32_t
)0x00080000)

	)

4274 
	#FLASH_OPTCR_nWRP_4
 ((
uöt32_t
)0x00100000)

	)

4275 
	#FLASH_OPTCR_nWRP_5
 ((
uöt32_t
)0x00200000)

	)

4276 
	#FLASH_OPTCR_nWRP_6
 ((
uöt32_t
)0x00400000)

	)

4277 
	#FLASH_OPTCR_nWRP_7
 ((
uöt32_t
)0x00800000)

	)

4278 
	#FLASH_OPTCR_nWRP_8
 ((
uöt32_t
)0x01000000)

	)

4279 
	#FLASH_OPTCR_nWRP_9
 ((
uöt32_t
)0x02000000)

	)

4280 
	#FLASH_OPTCR_nWRP_10
 ((
uöt32_t
)0x04000000)

	)

4281 
	#FLASH_OPTCR_nWRP_11
 ((
uöt32_t
)0x08000000)

	)

4289 
	#FSMC_BCR1_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4290 
	#FSMC_BCR1_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4292 
	#FSMC_BCR1_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4293 
	#FSMC_BCR1_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4294 
	#FSMC_BCR1_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4296 
	#FSMC_BCR1_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4297 
	#FSMC_BCR1_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4298 
	#FSMC_BCR1_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4300 
	#FSMC_BCR1_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4301 
	#FSMC_BCR1_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4302 
	#FSMC_BCR1_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4303 
	#FSMC_BCR1_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4304 
	#FSMC_BCR1_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4305 
	#FSMC_BCR1_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4306 
	#FSMC_BCR1_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4307 
	#FSMC_BCR1_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4308 
	#FSMC_BCR1_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4309 
	#FSMC_BCR1_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4312 
	#FSMC_BCR2_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4313 
	#FSMC_BCR2_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4315 
	#FSMC_BCR2_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4316 
	#FSMC_BCR2_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4317 
	#FSMC_BCR2_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4319 
	#FSMC_BCR2_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4320 
	#FSMC_BCR2_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4321 
	#FSMC_BCR2_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4323 
	#FSMC_BCR2_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4324 
	#FSMC_BCR2_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4325 
	#FSMC_BCR2_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4326 
	#FSMC_BCR2_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4327 
	#FSMC_BCR2_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4328 
	#FSMC_BCR2_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4329 
	#FSMC_BCR2_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4330 
	#FSMC_BCR2_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4331 
	#FSMC_BCR2_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4332 
	#FSMC_BCR2_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4335 
	#FSMC_BCR3_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4336 
	#FSMC_BCR3_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4338 
	#FSMC_BCR3_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4339 
	#FSMC_BCR3_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4340 
	#FSMC_BCR3_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4342 
	#FSMC_BCR3_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4343 
	#FSMC_BCR3_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4344 
	#FSMC_BCR3_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4346 
	#FSMC_BCR3_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4347 
	#FSMC_BCR3_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4348 
	#FSMC_BCR3_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4349 
	#FSMC_BCR3_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4350 
	#FSMC_BCR3_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4351 
	#FSMC_BCR3_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4352 
	#FSMC_BCR3_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4353 
	#FSMC_BCR3_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4354 
	#FSMC_BCR3_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4355 
	#FSMC_BCR3_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4358 
	#FSMC_BCR4_MBKEN
 ((
uöt32_t
)0x00000001Ë

	)

4359 
	#FSMC_BCR4_MUXEN
 ((
uöt32_t
)0x00000002Ë

	)

4361 
	#FSMC_BCR4_MTYP
 ((
uöt32_t
)0x0000000CË

	)

4362 
	#FSMC_BCR4_MTYP_0
 ((
uöt32_t
)0x00000004Ë

	)

4363 
	#FSMC_BCR4_MTYP_1
 ((
uöt32_t
)0x00000008Ë

	)

4365 
	#FSMC_BCR4_MWID
 ((
uöt32_t
)0x00000030Ë

	)

4366 
	#FSMC_BCR4_MWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4367 
	#FSMC_BCR4_MWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4369 
	#FSMC_BCR4_FACCEN
 ((
uöt32_t
)0x00000040Ë

	)

4370 
	#FSMC_BCR4_BURSTEN
 ((
uöt32_t
)0x00000100Ë

	)

4371 
	#FSMC_BCR4_WAITPOL
 ((
uöt32_t
)0x00000200Ë

	)

4372 
	#FSMC_BCR4_WRAPMOD
 ((
uöt32_t
)0x00000400Ë

	)

4373 
	#FSMC_BCR4_WAITCFG
 ((
uöt32_t
)0x00000800Ë

	)

4374 
	#FSMC_BCR4_WREN
 ((
uöt32_t
)0x00001000Ë

	)

4375 
	#FSMC_BCR4_WAITEN
 ((
uöt32_t
)0x00002000Ë

	)

4376 
	#FSMC_BCR4_EXTMOD
 ((
uöt32_t
)0x00004000Ë

	)

4377 
	#FSMC_BCR4_ASYNCWAIT
 ((
uöt32_t
)0x00008000Ë

	)

4378 
	#FSMC_BCR4_CBURSTRW
 ((
uöt32_t
)0x00080000Ë

	)

4381 
	#FSMC_BTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4382 
	#FSMC_BTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4383 
	#FSMC_BTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4384 
	#FSMC_BTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4385 
	#FSMC_BTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4387 
	#FSMC_BTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4388 
	#FSMC_BTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4389 
	#FSMC_BTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4390 
	#FSMC_BTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4391 
	#FSMC_BTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4393 
	#FSMC_BTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4394 
	#FSMC_BTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4395 
	#FSMC_BTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4396 
	#FSMC_BTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4397 
	#FSMC_BTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4399 
	#FSMC_BTR1_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4400 
	#FSMC_BTR1_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4401 
	#FSMC_BTR1_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4402 
	#FSMC_BTR1_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4403 
	#FSMC_BTR1_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4405 
	#FSMC_BTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4406 
	#FSMC_BTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4407 
	#FSMC_BTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4408 
	#FSMC_BTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4409 
	#FSMC_BTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4411 
	#FSMC_BTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4412 
	#FSMC_BTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4413 
	#FSMC_BTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4414 
	#FSMC_BTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4415 
	#FSMC_BTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4417 
	#FSMC_BTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4418 
	#FSMC_BTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4419 
	#FSMC_BTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4422 
	#FSMC_BTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4423 
	#FSMC_BTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4424 
	#FSMC_BTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4425 
	#FSMC_BTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4426 
	#FSMC_BTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4428 
	#FSMC_BTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4429 
	#FSMC_BTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4430 
	#FSMC_BTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4431 
	#FSMC_BTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4432 
	#FSMC_BTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4434 
	#FSMC_BTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4435 
	#FSMC_BTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4436 
	#FSMC_BTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4437 
	#FSMC_BTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4438 
	#FSMC_BTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4440 
	#FSMC_BTR2_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4441 
	#FSMC_BTR2_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4442 
	#FSMC_BTR2_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4443 
	#FSMC_BTR2_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4444 
	#FSMC_BTR2_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4446 
	#FSMC_BTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4447 
	#FSMC_BTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4448 
	#FSMC_BTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4449 
	#FSMC_BTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4450 
	#FSMC_BTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4452 
	#FSMC_BTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4453 
	#FSMC_BTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4454 
	#FSMC_BTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4455 
	#FSMC_BTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4456 
	#FSMC_BTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4458 
	#FSMC_BTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4459 
	#FSMC_BTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4460 
	#FSMC_BTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4463 
	#FSMC_BTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4464 
	#FSMC_BTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4465 
	#FSMC_BTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4466 
	#FSMC_BTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4467 
	#FSMC_BTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4469 
	#FSMC_BTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4470 
	#FSMC_BTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4471 
	#FSMC_BTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4472 
	#FSMC_BTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4473 
	#FSMC_BTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4475 
	#FSMC_BTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4476 
	#FSMC_BTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4477 
	#FSMC_BTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4478 
	#FSMC_BTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4479 
	#FSMC_BTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4481 
	#FSMC_BTR3_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4482 
	#FSMC_BTR3_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4483 
	#FSMC_BTR3_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4484 
	#FSMC_BTR3_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4485 
	#FSMC_BTR3_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4487 
	#FSMC_BTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4488 
	#FSMC_BTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4489 
	#FSMC_BTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4490 
	#FSMC_BTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4491 
	#FSMC_BTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4493 
	#FSMC_BTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4494 
	#FSMC_BTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4495 
	#FSMC_BTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4496 
	#FSMC_BTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4497 
	#FSMC_BTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4499 
	#FSMC_BTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4500 
	#FSMC_BTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4501 
	#FSMC_BTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4504 
	#FSMC_BTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4505 
	#FSMC_BTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4506 
	#FSMC_BTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4507 
	#FSMC_BTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4508 
	#FSMC_BTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4510 
	#FSMC_BTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4511 
	#FSMC_BTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4512 
	#FSMC_BTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4513 
	#FSMC_BTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4514 
	#FSMC_BTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4516 
	#FSMC_BTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4517 
	#FSMC_BTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4518 
	#FSMC_BTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4519 
	#FSMC_BTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4520 
	#FSMC_BTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4522 
	#FSMC_BTR4_BUSTURN
 ((
uöt32_t
)0x000F0000Ë

	)

4523 
	#FSMC_BTR4_BUSTURN_0
 ((
uöt32_t
)0x00010000Ë

	)

4524 
	#FSMC_BTR4_BUSTURN_1
 ((
uöt32_t
)0x00020000Ë

	)

4525 
	#FSMC_BTR4_BUSTURN_2
 ((
uöt32_t
)0x00040000Ë

	)

4526 
	#FSMC_BTR4_BUSTURN_3
 ((
uöt32_t
)0x00080000Ë

	)

4528 
	#FSMC_BTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4529 
	#FSMC_BTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4530 
	#FSMC_BTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4531 
	#FSMC_BTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4532 
	#FSMC_BTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4534 
	#FSMC_BTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4535 
	#FSMC_BTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4536 
	#FSMC_BTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4537 
	#FSMC_BTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4538 
	#FSMC_BTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4540 
	#FSMC_BTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4541 
	#FSMC_BTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4542 
	#FSMC_BTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4545 
	#FSMC_BWTR1_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4546 
	#FSMC_BWTR1_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4547 
	#FSMC_BWTR1_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4548 
	#FSMC_BWTR1_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4549 
	#FSMC_BWTR1_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4551 
	#FSMC_BWTR1_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4552 
	#FSMC_BWTR1_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4553 
	#FSMC_BWTR1_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4554 
	#FSMC_BWTR1_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4555 
	#FSMC_BWTR1_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4557 
	#FSMC_BWTR1_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4558 
	#FSMC_BWTR1_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4559 
	#FSMC_BWTR1_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4560 
	#FSMC_BWTR1_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4561 
	#FSMC_BWTR1_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4563 
	#FSMC_BWTR1_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4564 
	#FSMC_BWTR1_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4565 
	#FSMC_BWTR1_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4566 
	#FSMC_BWTR1_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4567 
	#FSMC_BWTR1_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4569 
	#FSMC_BWTR1_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4570 
	#FSMC_BWTR1_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4571 
	#FSMC_BWTR1_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4572 
	#FSMC_BWTR1_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4573 
	#FSMC_BWTR1_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4575 
	#FSMC_BWTR1_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4576 
	#FSMC_BWTR1_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4577 
	#FSMC_BWTR1_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4580 
	#FSMC_BWTR2_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4581 
	#FSMC_BWTR2_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4582 
	#FSMC_BWTR2_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4583 
	#FSMC_BWTR2_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4584 
	#FSMC_BWTR2_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4586 
	#FSMC_BWTR2_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4587 
	#FSMC_BWTR2_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4588 
	#FSMC_BWTR2_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4589 
	#FSMC_BWTR2_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4590 
	#FSMC_BWTR2_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4592 
	#FSMC_BWTR2_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4593 
	#FSMC_BWTR2_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4594 
	#FSMC_BWTR2_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4595 
	#FSMC_BWTR2_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4596 
	#FSMC_BWTR2_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4598 
	#FSMC_BWTR2_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4599 
	#FSMC_BWTR2_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4600 
	#FSMC_BWTR2_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4601 
	#FSMC_BWTR2_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4602 
	#FSMC_BWTR2_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4604 
	#FSMC_BWTR2_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4605 
	#FSMC_BWTR2_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4606 
	#FSMC_BWTR2_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4607 
	#FSMC_BWTR2_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4608 
	#FSMC_BWTR2_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4610 
	#FSMC_BWTR2_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4611 
	#FSMC_BWTR2_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4612 
	#FSMC_BWTR2_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4615 
	#FSMC_BWTR3_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4616 
	#FSMC_BWTR3_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4617 
	#FSMC_BWTR3_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4618 
	#FSMC_BWTR3_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4619 
	#FSMC_BWTR3_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4621 
	#FSMC_BWTR3_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4622 
	#FSMC_BWTR3_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4623 
	#FSMC_BWTR3_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4624 
	#FSMC_BWTR3_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4625 
	#FSMC_BWTR3_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4627 
	#FSMC_BWTR3_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4628 
	#FSMC_BWTR3_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4629 
	#FSMC_BWTR3_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4630 
	#FSMC_BWTR3_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4631 
	#FSMC_BWTR3_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4633 
	#FSMC_BWTR3_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4634 
	#FSMC_BWTR3_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4635 
	#FSMC_BWTR3_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4636 
	#FSMC_BWTR3_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4637 
	#FSMC_BWTR3_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4639 
	#FSMC_BWTR3_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4640 
	#FSMC_BWTR3_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4641 
	#FSMC_BWTR3_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4642 
	#FSMC_BWTR3_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4643 
	#FSMC_BWTR3_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4645 
	#FSMC_BWTR3_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4646 
	#FSMC_BWTR3_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4647 
	#FSMC_BWTR3_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4650 
	#FSMC_BWTR4_ADDSET
 ((
uöt32_t
)0x0000000FË

	)

4651 
	#FSMC_BWTR4_ADDSET_0
 ((
uöt32_t
)0x00000001Ë

	)

4652 
	#FSMC_BWTR4_ADDSET_1
 ((
uöt32_t
)0x00000002Ë

	)

4653 
	#FSMC_BWTR4_ADDSET_2
 ((
uöt32_t
)0x00000004Ë

	)

4654 
	#FSMC_BWTR4_ADDSET_3
 ((
uöt32_t
)0x00000008Ë

	)

4656 
	#FSMC_BWTR4_ADDHLD
 ((
uöt32_t
)0x000000F0Ë

	)

4657 
	#FSMC_BWTR4_ADDHLD_0
 ((
uöt32_t
)0x00000010Ë

	)

4658 
	#FSMC_BWTR4_ADDHLD_1
 ((
uöt32_t
)0x00000020Ë

	)

4659 
	#FSMC_BWTR4_ADDHLD_2
 ((
uöt32_t
)0x00000040Ë

	)

4660 
	#FSMC_BWTR4_ADDHLD_3
 ((
uöt32_t
)0x00000080Ë

	)

4662 
	#FSMC_BWTR4_DATAST
 ((
uöt32_t
)0x0000FF00Ë

	)

4663 
	#FSMC_BWTR4_DATAST_0
 ((
uöt32_t
)0x00000100Ë

	)

4664 
	#FSMC_BWTR4_DATAST_1
 ((
uöt32_t
)0x00000200Ë

	)

4665 
	#FSMC_BWTR4_DATAST_2
 ((
uöt32_t
)0x00000400Ë

	)

4666 
	#FSMC_BWTR4_DATAST_3
 ((
uöt32_t
)0x00000800Ë

	)

4668 
	#FSMC_BWTR4_CLKDIV
 ((
uöt32_t
)0x00F00000Ë

	)

4669 
	#FSMC_BWTR4_CLKDIV_0
 ((
uöt32_t
)0x00100000Ë

	)

4670 
	#FSMC_BWTR4_CLKDIV_1
 ((
uöt32_t
)0x00200000Ë

	)

4671 
	#FSMC_BWTR4_CLKDIV_2
 ((
uöt32_t
)0x00400000Ë

	)

4672 
	#FSMC_BWTR4_CLKDIV_3
 ((
uöt32_t
)0x00800000Ë

	)

4674 
	#FSMC_BWTR4_DATLAT
 ((
uöt32_t
)0x0F000000Ë

	)

4675 
	#FSMC_BWTR4_DATLAT_0
 ((
uöt32_t
)0x01000000Ë

	)

4676 
	#FSMC_BWTR4_DATLAT_1
 ((
uöt32_t
)0x02000000Ë

	)

4677 
	#FSMC_BWTR4_DATLAT_2
 ((
uöt32_t
)0x04000000Ë

	)

4678 
	#FSMC_BWTR4_DATLAT_3
 ((
uöt32_t
)0x08000000Ë

	)

4680 
	#FSMC_BWTR4_ACCMOD
 ((
uöt32_t
)0x30000000Ë

	)

4681 
	#FSMC_BWTR4_ACCMOD_0
 ((
uöt32_t
)0x10000000Ë

	)

4682 
	#FSMC_BWTR4_ACCMOD_1
 ((
uöt32_t
)0x20000000Ë

	)

4685 
	#FSMC_PCR2_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4686 
	#FSMC_PCR2_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4687 
	#FSMC_PCR2_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4689 
	#FSMC_PCR2_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4690 
	#FSMC_PCR2_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4691 
	#FSMC_PCR2_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4693 
	#FSMC_PCR2_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4695 
	#FSMC_PCR2_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4696 
	#FSMC_PCR2_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4697 
	#FSMC_PCR2_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4698 
	#FSMC_PCR2_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4699 
	#FSMC_PCR2_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4701 
	#FSMC_PCR2_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4702 
	#FSMC_PCR2_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4703 
	#FSMC_PCR2_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4704 
	#FSMC_PCR2_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4705 
	#FSMC_PCR2_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4707 
	#FSMC_PCR2_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4708 
	#FSMC_PCR2_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4709 
	#FSMC_PCR2_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4710 
	#FSMC_PCR2_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4713 
	#FSMC_PCR3_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4714 
	#FSMC_PCR3_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4715 
	#FSMC_PCR3_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4717 
	#FSMC_PCR3_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4718 
	#FSMC_PCR3_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4719 
	#FSMC_PCR3_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4721 
	#FSMC_PCR3_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4723 
	#FSMC_PCR3_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4724 
	#FSMC_PCR3_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4725 
	#FSMC_PCR3_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4726 
	#FSMC_PCR3_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4727 
	#FSMC_PCR3_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4729 
	#FSMC_PCR3_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4730 
	#FSMC_PCR3_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4731 
	#FSMC_PCR3_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4732 
	#FSMC_PCR3_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4733 
	#FSMC_PCR3_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4735 
	#FSMC_PCR3_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4736 
	#FSMC_PCR3_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4737 
	#FSMC_PCR3_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4738 
	#FSMC_PCR3_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4741 
	#FSMC_PCR4_PWAITEN
 ((
uöt32_t
)0x00000002Ë

	)

4742 
	#FSMC_PCR4_PBKEN
 ((
uöt32_t
)0x00000004Ë

	)

4743 
	#FSMC_PCR4_PTYP
 ((
uöt32_t
)0x00000008Ë

	)

4745 
	#FSMC_PCR4_PWID
 ((
uöt32_t
)0x00000030Ë

	)

4746 
	#FSMC_PCR4_PWID_0
 ((
uöt32_t
)0x00000010Ë

	)

4747 
	#FSMC_PCR4_PWID_1
 ((
uöt32_t
)0x00000020Ë

	)

4749 
	#FSMC_PCR4_ECCEN
 ((
uöt32_t
)0x00000040Ë

	)

4751 
	#FSMC_PCR4_TCLR
 ((
uöt32_t
)0x00001E00Ë

	)

4752 
	#FSMC_PCR4_TCLR_0
 ((
uöt32_t
)0x00000200Ë

	)

4753 
	#FSMC_PCR4_TCLR_1
 ((
uöt32_t
)0x00000400Ë

	)

4754 
	#FSMC_PCR4_TCLR_2
 ((
uöt32_t
)0x00000800Ë

	)

4755 
	#FSMC_PCR4_TCLR_3
 ((
uöt32_t
)0x00001000Ë

	)

4757 
	#FSMC_PCR4_TAR
 ((
uöt32_t
)0x0001E000Ë

	)

4758 
	#FSMC_PCR4_TAR_0
 ((
uöt32_t
)0x00002000Ë

	)

4759 
	#FSMC_PCR4_TAR_1
 ((
uöt32_t
)0x00004000Ë

	)

4760 
	#FSMC_PCR4_TAR_2
 ((
uöt32_t
)0x00008000Ë

	)

4761 
	#FSMC_PCR4_TAR_3
 ((
uöt32_t
)0x00010000Ë

	)

4763 
	#FSMC_PCR4_ECCPS
 ((
uöt32_t
)0x000E0000Ë

	)

4764 
	#FSMC_PCR4_ECCPS_0
 ((
uöt32_t
)0x00020000Ë

	)

4765 
	#FSMC_PCR4_ECCPS_1
 ((
uöt32_t
)0x00040000Ë

	)

4766 
	#FSMC_PCR4_ECCPS_2
 ((
uöt32_t
)0x00080000Ë

	)

4769 
	#FSMC_SR2_IRS
 ((
uöt8_t
)0x01Ë

	)

4770 
	#FSMC_SR2_ILS
 ((
uöt8_t
)0x02Ë

	)

4771 
	#FSMC_SR2_IFS
 ((
uöt8_t
)0x04Ë

	)

4772 
	#FSMC_SR2_IREN
 ((
uöt8_t
)0x08Ë

	)

4773 
	#FSMC_SR2_ILEN
 ((
uöt8_t
)0x10Ë

	)

4774 
	#FSMC_SR2_IFEN
 ((
uöt8_t
)0x20Ë

	)

4775 
	#FSMC_SR2_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4778 
	#FSMC_SR3_IRS
 ((
uöt8_t
)0x01Ë

	)

4779 
	#FSMC_SR3_ILS
 ((
uöt8_t
)0x02Ë

	)

4780 
	#FSMC_SR3_IFS
 ((
uöt8_t
)0x04Ë

	)

4781 
	#FSMC_SR3_IREN
 ((
uöt8_t
)0x08Ë

	)

4782 
	#FSMC_SR3_ILEN
 ((
uöt8_t
)0x10Ë

	)

4783 
	#FSMC_SR3_IFEN
 ((
uöt8_t
)0x20Ë

	)

4784 
	#FSMC_SR3_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4787 
	#FSMC_SR4_IRS
 ((
uöt8_t
)0x01Ë

	)

4788 
	#FSMC_SR4_ILS
 ((
uöt8_t
)0x02Ë

	)

4789 
	#FSMC_SR4_IFS
 ((
uöt8_t
)0x04Ë

	)

4790 
	#FSMC_SR4_IREN
 ((
uöt8_t
)0x08Ë

	)

4791 
	#FSMC_SR4_ILEN
 ((
uöt8_t
)0x10Ë

	)

4792 
	#FSMC_SR4_IFEN
 ((
uöt8_t
)0x20Ë

	)

4793 
	#FSMC_SR4_FEMPT
 ((
uöt8_t
)0x40Ë

	)

4796 
	#FSMC_PMEM2_MEMSET2
 ((
uöt32_t
)0x000000FFË

	)

4797 
	#FSMC_PMEM2_MEMSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4798 
	#FSMC_PMEM2_MEMSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4799 
	#FSMC_PMEM2_MEMSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4800 
	#FSMC_PMEM2_MEMSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4801 
	#FSMC_PMEM2_MEMSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4802 
	#FSMC_PMEM2_MEMSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4803 
	#FSMC_PMEM2_MEMSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4804 
	#FSMC_PMEM2_MEMSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4806 
	#FSMC_PMEM2_MEMWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4807 
	#FSMC_PMEM2_MEMWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4808 
	#FSMC_PMEM2_MEMWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4809 
	#FSMC_PMEM2_MEMWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4810 
	#FSMC_PMEM2_MEMWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4811 
	#FSMC_PMEM2_MEMWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4812 
	#FSMC_PMEM2_MEMWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4813 
	#FSMC_PMEM2_MEMWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4814 
	#FSMC_PMEM2_MEMWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4816 
	#FSMC_PMEM2_MEMHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4817 
	#FSMC_PMEM2_MEMHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4818 
	#FSMC_PMEM2_MEMHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4819 
	#FSMC_PMEM2_MEMHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4820 
	#FSMC_PMEM2_MEMHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4821 
	#FSMC_PMEM2_MEMHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4822 
	#FSMC_PMEM2_MEMHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4823 
	#FSMC_PMEM2_MEMHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4824 
	#FSMC_PMEM2_MEMHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4826 
	#FSMC_PMEM2_MEMHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4827 
	#FSMC_PMEM2_MEMHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4828 
	#FSMC_PMEM2_MEMHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4829 
	#FSMC_PMEM2_MEMHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4830 
	#FSMC_PMEM2_MEMHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4831 
	#FSMC_PMEM2_MEMHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4832 
	#FSMC_PMEM2_MEMHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4833 
	#FSMC_PMEM2_MEMHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4834 
	#FSMC_PMEM2_MEMHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4837 
	#FSMC_PMEM3_MEMSET3
 ((
uöt32_t
)0x000000FFË

	)

4838 
	#FSMC_PMEM3_MEMSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4839 
	#FSMC_PMEM3_MEMSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4840 
	#FSMC_PMEM3_MEMSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4841 
	#FSMC_PMEM3_MEMSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4842 
	#FSMC_PMEM3_MEMSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4843 
	#FSMC_PMEM3_MEMSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4844 
	#FSMC_PMEM3_MEMSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4845 
	#FSMC_PMEM3_MEMSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4847 
	#FSMC_PMEM3_MEMWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4848 
	#FSMC_PMEM3_MEMWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4849 
	#FSMC_PMEM3_MEMWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4850 
	#FSMC_PMEM3_MEMWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4851 
	#FSMC_PMEM3_MEMWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4852 
	#FSMC_PMEM3_MEMWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4853 
	#FSMC_PMEM3_MEMWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4854 
	#FSMC_PMEM3_MEMWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4855 
	#FSMC_PMEM3_MEMWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4857 
	#FSMC_PMEM3_MEMHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4858 
	#FSMC_PMEM3_MEMHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4859 
	#FSMC_PMEM3_MEMHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4860 
	#FSMC_PMEM3_MEMHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4861 
	#FSMC_PMEM3_MEMHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4862 
	#FSMC_PMEM3_MEMHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4863 
	#FSMC_PMEM3_MEMHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4864 
	#FSMC_PMEM3_MEMHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4865 
	#FSMC_PMEM3_MEMHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4867 
	#FSMC_PMEM3_MEMHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4868 
	#FSMC_PMEM3_MEMHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4869 
	#FSMC_PMEM3_MEMHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4870 
	#FSMC_PMEM3_MEMHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4871 
	#FSMC_PMEM3_MEMHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4872 
	#FSMC_PMEM3_MEMHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4873 
	#FSMC_PMEM3_MEMHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4874 
	#FSMC_PMEM3_MEMHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4875 
	#FSMC_PMEM3_MEMHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

4878 
	#FSMC_PMEM4_MEMSET4
 ((
uöt32_t
)0x000000FFË

	)

4879 
	#FSMC_PMEM4_MEMSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

4880 
	#FSMC_PMEM4_MEMSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

4881 
	#FSMC_PMEM4_MEMSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

4882 
	#FSMC_PMEM4_MEMSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

4883 
	#FSMC_PMEM4_MEMSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

4884 
	#FSMC_PMEM4_MEMSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

4885 
	#FSMC_PMEM4_MEMSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

4886 
	#FSMC_PMEM4_MEMSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

4888 
	#FSMC_PMEM4_MEMWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

4889 
	#FSMC_PMEM4_MEMWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

4890 
	#FSMC_PMEM4_MEMWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

4891 
	#FSMC_PMEM4_MEMWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

4892 
	#FSMC_PMEM4_MEMWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

4893 
	#FSMC_PMEM4_MEMWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

4894 
	#FSMC_PMEM4_MEMWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

4895 
	#FSMC_PMEM4_MEMWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

4896 
	#FSMC_PMEM4_MEMWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

4898 
	#FSMC_PMEM4_MEMHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

4899 
	#FSMC_PMEM4_MEMHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

4900 
	#FSMC_PMEM4_MEMHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

4901 
	#FSMC_PMEM4_MEMHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

4902 
	#FSMC_PMEM4_MEMHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

4903 
	#FSMC_PMEM4_MEMHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

4904 
	#FSMC_PMEM4_MEMHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

4905 
	#FSMC_PMEM4_MEMHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

4906 
	#FSMC_PMEM4_MEMHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

4908 
	#FSMC_PMEM4_MEMHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

4909 
	#FSMC_PMEM4_MEMHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

4910 
	#FSMC_PMEM4_MEMHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

4911 
	#FSMC_PMEM4_MEMHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

4912 
	#FSMC_PMEM4_MEMHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

4913 
	#FSMC_PMEM4_MEMHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

4914 
	#FSMC_PMEM4_MEMHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

4915 
	#FSMC_PMEM4_MEMHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

4916 
	#FSMC_PMEM4_MEMHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

4919 
	#FSMC_PATT2_ATTSET2
 ((
uöt32_t
)0x000000FFË

	)

4920 
	#FSMC_PATT2_ATTSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

4921 
	#FSMC_PATT2_ATTSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

4922 
	#FSMC_PATT2_ATTSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

4923 
	#FSMC_PATT2_ATTSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

4924 
	#FSMC_PATT2_ATTSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

4925 
	#FSMC_PATT2_ATTSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

4926 
	#FSMC_PATT2_ATTSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

4927 
	#FSMC_PATT2_ATTSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

4929 
	#FSMC_PATT2_ATTWAIT2
 ((
uöt32_t
)0x0000FF00Ë

	)

4930 
	#FSMC_PATT2_ATTWAIT2_0
 ((
uöt32_t
)0x00000100Ë

	)

4931 
	#FSMC_PATT2_ATTWAIT2_1
 ((
uöt32_t
)0x00000200Ë

	)

4932 
	#FSMC_PATT2_ATTWAIT2_2
 ((
uöt32_t
)0x00000400Ë

	)

4933 
	#FSMC_PATT2_ATTWAIT2_3
 ((
uöt32_t
)0x00000800Ë

	)

4934 
	#FSMC_PATT2_ATTWAIT2_4
 ((
uöt32_t
)0x00001000Ë

	)

4935 
	#FSMC_PATT2_ATTWAIT2_5
 ((
uöt32_t
)0x00002000Ë

	)

4936 
	#FSMC_PATT2_ATTWAIT2_6
 ((
uöt32_t
)0x00004000Ë

	)

4937 
	#FSMC_PATT2_ATTWAIT2_7
 ((
uöt32_t
)0x00008000Ë

	)

4939 
	#FSMC_PATT2_ATTHOLD2
 ((
uöt32_t
)0x00FF0000Ë

	)

4940 
	#FSMC_PATT2_ATTHOLD2_0
 ((
uöt32_t
)0x00010000Ë

	)

4941 
	#FSMC_PATT2_ATTHOLD2_1
 ((
uöt32_t
)0x00020000Ë

	)

4942 
	#FSMC_PATT2_ATTHOLD2_2
 ((
uöt32_t
)0x00040000Ë

	)

4943 
	#FSMC_PATT2_ATTHOLD2_3
 ((
uöt32_t
)0x00080000Ë

	)

4944 
	#FSMC_PATT2_ATTHOLD2_4
 ((
uöt32_t
)0x00100000Ë

	)

4945 
	#FSMC_PATT2_ATTHOLD2_5
 ((
uöt32_t
)0x00200000Ë

	)

4946 
	#FSMC_PATT2_ATTHOLD2_6
 ((
uöt32_t
)0x00400000Ë

	)

4947 
	#FSMC_PATT2_ATTHOLD2_7
 ((
uöt32_t
)0x00800000Ë

	)

4949 
	#FSMC_PATT2_ATTHIZ2
 ((
uöt32_t
)0xFF000000Ë

	)

4950 
	#FSMC_PATT2_ATTHIZ2_0
 ((
uöt32_t
)0x01000000Ë

	)

4951 
	#FSMC_PATT2_ATTHIZ2_1
 ((
uöt32_t
)0x02000000Ë

	)

4952 
	#FSMC_PATT2_ATTHIZ2_2
 ((
uöt32_t
)0x04000000Ë

	)

4953 
	#FSMC_PATT2_ATTHIZ2_3
 ((
uöt32_t
)0x08000000Ë

	)

4954 
	#FSMC_PATT2_ATTHIZ2_4
 ((
uöt32_t
)0x10000000Ë

	)

4955 
	#FSMC_PATT2_ATTHIZ2_5
 ((
uöt32_t
)0x20000000Ë

	)

4956 
	#FSMC_PATT2_ATTHIZ2_6
 ((
uöt32_t
)0x40000000Ë

	)

4957 
	#FSMC_PATT2_ATTHIZ2_7
 ((
uöt32_t
)0x80000000Ë

	)

4960 
	#FSMC_PATT3_ATTSET3
 ((
uöt32_t
)0x000000FFË

	)

4961 
	#FSMC_PATT3_ATTSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

4962 
	#FSMC_PATT3_ATTSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

4963 
	#FSMC_PATT3_ATTSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

4964 
	#FSMC_PATT3_ATTSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

4965 
	#FSMC_PATT3_ATTSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

4966 
	#FSMC_PATT3_ATTSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

4967 
	#FSMC_PATT3_ATTSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

4968 
	#FSMC_PATT3_ATTSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

4970 
	#FSMC_PATT3_ATTWAIT3
 ((
uöt32_t
)0x0000FF00Ë

	)

4971 
	#FSMC_PATT3_ATTWAIT3_0
 ((
uöt32_t
)0x00000100Ë

	)

4972 
	#FSMC_PATT3_ATTWAIT3_1
 ((
uöt32_t
)0x00000200Ë

	)

4973 
	#FSMC_PATT3_ATTWAIT3_2
 ((
uöt32_t
)0x00000400Ë

	)

4974 
	#FSMC_PATT3_ATTWAIT3_3
 ((
uöt32_t
)0x00000800Ë

	)

4975 
	#FSMC_PATT3_ATTWAIT3_4
 ((
uöt32_t
)0x00001000Ë

	)

4976 
	#FSMC_PATT3_ATTWAIT3_5
 ((
uöt32_t
)0x00002000Ë

	)

4977 
	#FSMC_PATT3_ATTWAIT3_6
 ((
uöt32_t
)0x00004000Ë

	)

4978 
	#FSMC_PATT3_ATTWAIT3_7
 ((
uöt32_t
)0x00008000Ë

	)

4980 
	#FSMC_PATT3_ATTHOLD3
 ((
uöt32_t
)0x00FF0000Ë

	)

4981 
	#FSMC_PATT3_ATTHOLD3_0
 ((
uöt32_t
)0x00010000Ë

	)

4982 
	#FSMC_PATT3_ATTHOLD3_1
 ((
uöt32_t
)0x00020000Ë

	)

4983 
	#FSMC_PATT3_ATTHOLD3_2
 ((
uöt32_t
)0x00040000Ë

	)

4984 
	#FSMC_PATT3_ATTHOLD3_3
 ((
uöt32_t
)0x00080000Ë

	)

4985 
	#FSMC_PATT3_ATTHOLD3_4
 ((
uöt32_t
)0x00100000Ë

	)

4986 
	#FSMC_PATT3_ATTHOLD3_5
 ((
uöt32_t
)0x00200000Ë

	)

4987 
	#FSMC_PATT3_ATTHOLD3_6
 ((
uöt32_t
)0x00400000Ë

	)

4988 
	#FSMC_PATT3_ATTHOLD3_7
 ((
uöt32_t
)0x00800000Ë

	)

4990 
	#FSMC_PATT3_ATTHIZ3
 ((
uöt32_t
)0xFF000000Ë

	)

4991 
	#FSMC_PATT3_ATTHIZ3_0
 ((
uöt32_t
)0x01000000Ë

	)

4992 
	#FSMC_PATT3_ATTHIZ3_1
 ((
uöt32_t
)0x02000000Ë

	)

4993 
	#FSMC_PATT3_ATTHIZ3_2
 ((
uöt32_t
)0x04000000Ë

	)

4994 
	#FSMC_PATT3_ATTHIZ3_3
 ((
uöt32_t
)0x08000000Ë

	)

4995 
	#FSMC_PATT3_ATTHIZ3_4
 ((
uöt32_t
)0x10000000Ë

	)

4996 
	#FSMC_PATT3_ATTHIZ3_5
 ((
uöt32_t
)0x20000000Ë

	)

4997 
	#FSMC_PATT3_ATTHIZ3_6
 ((
uöt32_t
)0x40000000Ë

	)

4998 
	#FSMC_PATT3_ATTHIZ3_7
 ((
uöt32_t
)0x80000000Ë

	)

5001 
	#FSMC_PATT4_ATTSET4
 ((
uöt32_t
)0x000000FFË

	)

5002 
	#FSMC_PATT4_ATTSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5003 
	#FSMC_PATT4_ATTSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5004 
	#FSMC_PATT4_ATTSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5005 
	#FSMC_PATT4_ATTSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5006 
	#FSMC_PATT4_ATTSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5007 
	#FSMC_PATT4_ATTSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5008 
	#FSMC_PATT4_ATTSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5009 
	#FSMC_PATT4_ATTSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5011 
	#FSMC_PATT4_ATTWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5012 
	#FSMC_PATT4_ATTWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5013 
	#FSMC_PATT4_ATTWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5014 
	#FSMC_PATT4_ATTWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5015 
	#FSMC_PATT4_ATTWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5016 
	#FSMC_PATT4_ATTWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5017 
	#FSMC_PATT4_ATTWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5018 
	#FSMC_PATT4_ATTWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5019 
	#FSMC_PATT4_ATTWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5021 
	#FSMC_PATT4_ATTHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5022 
	#FSMC_PATT4_ATTHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5023 
	#FSMC_PATT4_ATTHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5024 
	#FSMC_PATT4_ATTHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5025 
	#FSMC_PATT4_ATTHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5026 
	#FSMC_PATT4_ATTHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5027 
	#FSMC_PATT4_ATTHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5028 
	#FSMC_PATT4_ATTHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5029 
	#FSMC_PATT4_ATTHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5031 
	#FSMC_PATT4_ATTHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5032 
	#FSMC_PATT4_ATTHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5033 
	#FSMC_PATT4_ATTHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5034 
	#FSMC_PATT4_ATTHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5035 
	#FSMC_PATT4_ATTHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5036 
	#FSMC_PATT4_ATTHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5037 
	#FSMC_PATT4_ATTHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5038 
	#FSMC_PATT4_ATTHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5039 
	#FSMC_PATT4_ATTHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5042 
	#FSMC_PIO4_IOSET4
 ((
uöt32_t
)0x000000FFË

	)

5043 
	#FSMC_PIO4_IOSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

5044 
	#FSMC_PIO4_IOSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

5045 
	#FSMC_PIO4_IOSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

5046 
	#FSMC_PIO4_IOSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

5047 
	#FSMC_PIO4_IOSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

5048 
	#FSMC_PIO4_IOSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

5049 
	#FSMC_PIO4_IOSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

5050 
	#FSMC_PIO4_IOSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

5052 
	#FSMC_PIO4_IOWAIT4
 ((
uöt32_t
)0x0000FF00Ë

	)

5053 
	#FSMC_PIO4_IOWAIT4_0
 ((
uöt32_t
)0x00000100Ë

	)

5054 
	#FSMC_PIO4_IOWAIT4_1
 ((
uöt32_t
)0x00000200Ë

	)

5055 
	#FSMC_PIO4_IOWAIT4_2
 ((
uöt32_t
)0x00000400Ë

	)

5056 
	#FSMC_PIO4_IOWAIT4_3
 ((
uöt32_t
)0x00000800Ë

	)

5057 
	#FSMC_PIO4_IOWAIT4_4
 ((
uöt32_t
)0x00001000Ë

	)

5058 
	#FSMC_PIO4_IOWAIT4_5
 ((
uöt32_t
)0x00002000Ë

	)

5059 
	#FSMC_PIO4_IOWAIT4_6
 ((
uöt32_t
)0x00004000Ë

	)

5060 
	#FSMC_PIO4_IOWAIT4_7
 ((
uöt32_t
)0x00008000Ë

	)

5062 
	#FSMC_PIO4_IOHOLD4
 ((
uöt32_t
)0x00FF0000Ë

	)

5063 
	#FSMC_PIO4_IOHOLD4_0
 ((
uöt32_t
)0x00010000Ë

	)

5064 
	#FSMC_PIO4_IOHOLD4_1
 ((
uöt32_t
)0x00020000Ë

	)

5065 
	#FSMC_PIO4_IOHOLD4_2
 ((
uöt32_t
)0x00040000Ë

	)

5066 
	#FSMC_PIO4_IOHOLD4_3
 ((
uöt32_t
)0x00080000Ë

	)

5067 
	#FSMC_PIO4_IOHOLD4_4
 ((
uöt32_t
)0x00100000Ë

	)

5068 
	#FSMC_PIO4_IOHOLD4_5
 ((
uöt32_t
)0x00200000Ë

	)

5069 
	#FSMC_PIO4_IOHOLD4_6
 ((
uöt32_t
)0x00400000Ë

	)

5070 
	#FSMC_PIO4_IOHOLD4_7
 ((
uöt32_t
)0x00800000Ë

	)

5072 
	#FSMC_PIO4_IOHIZ4
 ((
uöt32_t
)0xFF000000Ë

	)

5073 
	#FSMC_PIO4_IOHIZ4_0
 ((
uöt32_t
)0x01000000Ë

	)

5074 
	#FSMC_PIO4_IOHIZ4_1
 ((
uöt32_t
)0x02000000Ë

	)

5075 
	#FSMC_PIO4_IOHIZ4_2
 ((
uöt32_t
)0x04000000Ë

	)

5076 
	#FSMC_PIO4_IOHIZ4_3
 ((
uöt32_t
)0x08000000Ë

	)

5077 
	#FSMC_PIO4_IOHIZ4_4
 ((
uöt32_t
)0x10000000Ë

	)

5078 
	#FSMC_PIO4_IOHIZ4_5
 ((
uöt32_t
)0x20000000Ë

	)

5079 
	#FSMC_PIO4_IOHIZ4_6
 ((
uöt32_t
)0x40000000Ë

	)

5080 
	#FSMC_PIO4_IOHIZ4_7
 ((
uöt32_t
)0x80000000Ë

	)

5083 
	#FSMC_ECCR2_ECC2
 ((
uöt32_t
)0xFFFFFFFFË

	)

5086 
	#FSMC_ECCR3_ECC3
 ((
uöt32_t
)0xFFFFFFFFË

	)

5094 
	#GPIO_MODER_MODER0
 ((
uöt32_t
)0x00000003)

	)

5095 
	#GPIO_MODER_MODER0_0
 ((
uöt32_t
)0x00000001)

	)

5096 
	#GPIO_MODER_MODER0_1
 ((
uöt32_t
)0x00000002)

	)

5098 
	#GPIO_MODER_MODER1
 ((
uöt32_t
)0x0000000C)

	)

5099 
	#GPIO_MODER_MODER1_0
 ((
uöt32_t
)0x00000004)

	)

5100 
	#GPIO_MODER_MODER1_1
 ((
uöt32_t
)0x00000008)

	)

5102 
	#GPIO_MODER_MODER2
 ((
uöt32_t
)0x00000030)

	)

5103 
	#GPIO_MODER_MODER2_0
 ((
uöt32_t
)0x00000010)

	)

5104 
	#GPIO_MODER_MODER2_1
 ((
uöt32_t
)0x00000020)

	)

5106 
	#GPIO_MODER_MODER3
 ((
uöt32_t
)0x000000C0)

	)

5107 
	#GPIO_MODER_MODER3_0
 ((
uöt32_t
)0x00000040)

	)

5108 
	#GPIO_MODER_MODER3_1
 ((
uöt32_t
)0x00000080)

	)

5110 
	#GPIO_MODER_MODER4
 ((
uöt32_t
)0x00000300)

	)

5111 
	#GPIO_MODER_MODER4_0
 ((
uöt32_t
)0x00000100)

	)

5112 
	#GPIO_MODER_MODER4_1
 ((
uöt32_t
)0x00000200)

	)

5114 
	#GPIO_MODER_MODER5
 ((
uöt32_t
)0x00000C00)

	)

5115 
	#GPIO_MODER_MODER5_0
 ((
uöt32_t
)0x00000400)

	)

5116 
	#GPIO_MODER_MODER5_1
 ((
uöt32_t
)0x00000800)

	)

5118 
	#GPIO_MODER_MODER6
 ((
uöt32_t
)0x00003000)

	)

5119 
	#GPIO_MODER_MODER6_0
 ((
uöt32_t
)0x00001000)

	)

5120 
	#GPIO_MODER_MODER6_1
 ((
uöt32_t
)0x00002000)

	)

5122 
	#GPIO_MODER_MODER7
 ((
uöt32_t
)0x0000C000)

	)

5123 
	#GPIO_MODER_MODER7_0
 ((
uöt32_t
)0x00004000)

	)

5124 
	#GPIO_MODER_MODER7_1
 ((
uöt32_t
)0x00008000)

	)

5126 
	#GPIO_MODER_MODER8
 ((
uöt32_t
)0x00030000)

	)

5127 
	#GPIO_MODER_MODER8_0
 ((
uöt32_t
)0x00010000)

	)

5128 
	#GPIO_MODER_MODER8_1
 ((
uöt32_t
)0x00020000)

	)

5130 
	#GPIO_MODER_MODER9
 ((
uöt32_t
)0x000C0000)

	)

5131 
	#GPIO_MODER_MODER9_0
 ((
uöt32_t
)0x00040000)

	)

5132 
	#GPIO_MODER_MODER9_1
 ((
uöt32_t
)0x00080000)

	)

5134 
	#GPIO_MODER_MODER10
 ((
uöt32_t
)0x00300000)

	)

5135 
	#GPIO_MODER_MODER10_0
 ((
uöt32_t
)0x00100000)

	)

5136 
	#GPIO_MODER_MODER10_1
 ((
uöt32_t
)0x00200000)

	)

5138 
	#GPIO_MODER_MODER11
 ((
uöt32_t
)0x00C00000)

	)

5139 
	#GPIO_MODER_MODER11_0
 ((
uöt32_t
)0x00400000)

	)

5140 
	#GPIO_MODER_MODER11_1
 ((
uöt32_t
)0x00800000)

	)

5142 
	#GPIO_MODER_MODER12
 ((
uöt32_t
)0x03000000)

	)

5143 
	#GPIO_MODER_MODER12_0
 ((
uöt32_t
)0x01000000)

	)

5144 
	#GPIO_MODER_MODER12_1
 ((
uöt32_t
)0x02000000)

	)

5146 
	#GPIO_MODER_MODER13
 ((
uöt32_t
)0x0C000000)

	)

5147 
	#GPIO_MODER_MODER13_0
 ((
uöt32_t
)0x04000000)

	)

5148 
	#GPIO_MODER_MODER13_1
 ((
uöt32_t
)0x08000000)

	)

5150 
	#GPIO_MODER_MODER14
 ((
uöt32_t
)0x30000000)

	)

5151 
	#GPIO_MODER_MODER14_0
 ((
uöt32_t
)0x10000000)

	)

5152 
	#GPIO_MODER_MODER14_1
 ((
uöt32_t
)0x20000000)

	)

5154 
	#GPIO_MODER_MODER15
 ((
uöt32_t
)0xC0000000)

	)

5155 
	#GPIO_MODER_MODER15_0
 ((
uöt32_t
)0x40000000)

	)

5156 
	#GPIO_MODER_MODER15_1
 ((
uöt32_t
)0x80000000)

	)

5159 
	#GPIO_OTYPER_OT_0
 ((
uöt32_t
)0x00000001)

	)

5160 
	#GPIO_OTYPER_OT_1
 ((
uöt32_t
)0x00000002)

	)

5161 
	#GPIO_OTYPER_OT_2
 ((
uöt32_t
)0x00000004)

	)

5162 
	#GPIO_OTYPER_OT_3
 ((
uöt32_t
)0x00000008)

	)

5163 
	#GPIO_OTYPER_OT_4
 ((
uöt32_t
)0x00000010)

	)

5164 
	#GPIO_OTYPER_OT_5
 ((
uöt32_t
)0x00000020)

	)

5165 
	#GPIO_OTYPER_OT_6
 ((
uöt32_t
)0x00000040)

	)

5166 
	#GPIO_OTYPER_OT_7
 ((
uöt32_t
)0x00000080)

	)

5167 
	#GPIO_OTYPER_OT_8
 ((
uöt32_t
)0x00000100)

	)

5168 
	#GPIO_OTYPER_OT_9
 ((
uöt32_t
)0x00000200)

	)

5169 
	#GPIO_OTYPER_OT_10
 ((
uöt32_t
)0x00000400)

	)

5170 
	#GPIO_OTYPER_OT_11
 ((
uöt32_t
)0x00000800)

	)

5171 
	#GPIO_OTYPER_OT_12
 ((
uöt32_t
)0x00001000)

	)

5172 
	#GPIO_OTYPER_OT_13
 ((
uöt32_t
)0x00002000)

	)

5173 
	#GPIO_OTYPER_OT_14
 ((
uöt32_t
)0x00004000)

	)

5174 
	#GPIO_OTYPER_OT_15
 ((
uöt32_t
)0x00008000)

	)

5177 
	#GPIO_OSPEEDER_OSPEEDR0
 ((
uöt32_t
)0x00000003)

	)

5178 
	#GPIO_OSPEEDER_OSPEEDR0_0
 ((
uöt32_t
)0x00000001)

	)

5179 
	#GPIO_OSPEEDER_OSPEEDR0_1
 ((
uöt32_t
)0x00000002)

	)

5181 
	#GPIO_OSPEEDER_OSPEEDR1
 ((
uöt32_t
)0x0000000C)

	)

5182 
	#GPIO_OSPEEDER_OSPEEDR1_0
 ((
uöt32_t
)0x00000004)

	)

5183 
	#GPIO_OSPEEDER_OSPEEDR1_1
 ((
uöt32_t
)0x00000008)

	)

5185 
	#GPIO_OSPEEDER_OSPEEDR2
 ((
uöt32_t
)0x00000030)

	)

5186 
	#GPIO_OSPEEDER_OSPEEDR2_0
 ((
uöt32_t
)0x00000010)

	)

5187 
	#GPIO_OSPEEDER_OSPEEDR2_1
 ((
uöt32_t
)0x00000020)

	)

5189 
	#GPIO_OSPEEDER_OSPEEDR3
 ((
uöt32_t
)0x000000C0)

	)

5190 
	#GPIO_OSPEEDER_OSPEEDR3_0
 ((
uöt32_t
)0x00000040)

	)

5191 
	#GPIO_OSPEEDER_OSPEEDR3_1
 ((
uöt32_t
)0x00000080)

	)

5193 
	#GPIO_OSPEEDER_OSPEEDR4
 ((
uöt32_t
)0x00000300)

	)

5194 
	#GPIO_OSPEEDER_OSPEEDR4_0
 ((
uöt32_t
)0x00000100)

	)

5195 
	#GPIO_OSPEEDER_OSPEEDR4_1
 ((
uöt32_t
)0x00000200)

	)

5197 
	#GPIO_OSPEEDER_OSPEEDR5
 ((
uöt32_t
)0x00000C00)

	)

5198 
	#GPIO_OSPEEDER_OSPEEDR5_0
 ((
uöt32_t
)0x00000400)

	)

5199 
	#GPIO_OSPEEDER_OSPEEDR5_1
 ((
uöt32_t
)0x00000800)

	)

5201 
	#GPIO_OSPEEDER_OSPEEDR6
 ((
uöt32_t
)0x00003000)

	)

5202 
	#GPIO_OSPEEDER_OSPEEDR6_0
 ((
uöt32_t
)0x00001000)

	)

5203 
	#GPIO_OSPEEDER_OSPEEDR6_1
 ((
uöt32_t
)0x00002000)

	)

5205 
	#GPIO_OSPEEDER_OSPEEDR7
 ((
uöt32_t
)0x0000C000)

	)

5206 
	#GPIO_OSPEEDER_OSPEEDR7_0
 ((
uöt32_t
)0x00004000)

	)

5207 
	#GPIO_OSPEEDER_OSPEEDR7_1
 ((
uöt32_t
)0x00008000)

	)

5209 
	#GPIO_OSPEEDER_OSPEEDR8
 ((
uöt32_t
)0x00030000)

	)

5210 
	#GPIO_OSPEEDER_OSPEEDR8_0
 ((
uöt32_t
)0x00010000)

	)

5211 
	#GPIO_OSPEEDER_OSPEEDR8_1
 ((
uöt32_t
)0x00020000)

	)

5213 
	#GPIO_OSPEEDER_OSPEEDR9
 ((
uöt32_t
)0x000C0000)

	)

5214 
	#GPIO_OSPEEDER_OSPEEDR9_0
 ((
uöt32_t
)0x00040000)

	)

5215 
	#GPIO_OSPEEDER_OSPEEDR9_1
 ((
uöt32_t
)0x00080000)

	)

5217 
	#GPIO_OSPEEDER_OSPEEDR10
 ((
uöt32_t
)0x00300000)

	)

5218 
	#GPIO_OSPEEDER_OSPEEDR10_0
 ((
uöt32_t
)0x00100000)

	)

5219 
	#GPIO_OSPEEDER_OSPEEDR10_1
 ((
uöt32_t
)0x00200000)

	)

5221 
	#GPIO_OSPEEDER_OSPEEDR11
 ((
uöt32_t
)0x00C00000)

	)

5222 
	#GPIO_OSPEEDER_OSPEEDR11_0
 ((
uöt32_t
)0x00400000)

	)

5223 
	#GPIO_OSPEEDER_OSPEEDR11_1
 ((
uöt32_t
)0x00800000)

	)

5225 
	#GPIO_OSPEEDER_OSPEEDR12
 ((
uöt32_t
)0x03000000)

	)

5226 
	#GPIO_OSPEEDER_OSPEEDR12_0
 ((
uöt32_t
)0x01000000)

	)

5227 
	#GPIO_OSPEEDER_OSPEEDR12_1
 ((
uöt32_t
)0x02000000)

	)

5229 
	#GPIO_OSPEEDER_OSPEEDR13
 ((
uöt32_t
)0x0C000000)

	)

5230 
	#GPIO_OSPEEDER_OSPEEDR13_0
 ((
uöt32_t
)0x04000000)

	)

5231 
	#GPIO_OSPEEDER_OSPEEDR13_1
 ((
uöt32_t
)0x08000000)

	)

5233 
	#GPIO_OSPEEDER_OSPEEDR14
 ((
uöt32_t
)0x30000000)

	)

5234 
	#GPIO_OSPEEDER_OSPEEDR14_0
 ((
uöt32_t
)0x10000000)

	)

5235 
	#GPIO_OSPEEDER_OSPEEDR14_1
 ((
uöt32_t
)0x20000000)

	)

5237 
	#GPIO_OSPEEDER_OSPEEDR15
 ((
uöt32_t
)0xC0000000)

	)

5238 
	#GPIO_OSPEEDER_OSPEEDR15_0
 ((
uöt32_t
)0x40000000)

	)

5239 
	#GPIO_OSPEEDER_OSPEEDR15_1
 ((
uöt32_t
)0x80000000)

	)

5242 
	#GPIO_PUPDR_PUPDR0
 ((
uöt32_t
)0x00000003)

	)

5243 
	#GPIO_PUPDR_PUPDR0_0
 ((
uöt32_t
)0x00000001)

	)

5244 
	#GPIO_PUPDR_PUPDR0_1
 ((
uöt32_t
)0x00000002)

	)

5246 
	#GPIO_PUPDR_PUPDR1
 ((
uöt32_t
)0x0000000C)

	)

5247 
	#GPIO_PUPDR_PUPDR1_0
 ((
uöt32_t
)0x00000004)

	)

5248 
	#GPIO_PUPDR_PUPDR1_1
 ((
uöt32_t
)0x00000008)

	)

5250 
	#GPIO_PUPDR_PUPDR2
 ((
uöt32_t
)0x00000030)

	)

5251 
	#GPIO_PUPDR_PUPDR2_0
 ((
uöt32_t
)0x00000010)

	)

5252 
	#GPIO_PUPDR_PUPDR2_1
 ((
uöt32_t
)0x00000020)

	)

5254 
	#GPIO_PUPDR_PUPDR3
 ((
uöt32_t
)0x000000C0)

	)

5255 
	#GPIO_PUPDR_PUPDR3_0
 ((
uöt32_t
)0x00000040)

	)

5256 
	#GPIO_PUPDR_PUPDR3_1
 ((
uöt32_t
)0x00000080)

	)

5258 
	#GPIO_PUPDR_PUPDR4
 ((
uöt32_t
)0x00000300)

	)

5259 
	#GPIO_PUPDR_PUPDR4_0
 ((
uöt32_t
)0x00000100)

	)

5260 
	#GPIO_PUPDR_PUPDR4_1
 ((
uöt32_t
)0x00000200)

	)

5262 
	#GPIO_PUPDR_PUPDR5
 ((
uöt32_t
)0x00000C00)

	)

5263 
	#GPIO_PUPDR_PUPDR5_0
 ((
uöt32_t
)0x00000400)

	)

5264 
	#GPIO_PUPDR_PUPDR5_1
 ((
uöt32_t
)0x00000800)

	)

5266 
	#GPIO_PUPDR_PUPDR6
 ((
uöt32_t
)0x00003000)

	)

5267 
	#GPIO_PUPDR_PUPDR6_0
 ((
uöt32_t
)0x00001000)

	)

5268 
	#GPIO_PUPDR_PUPDR6_1
 ((
uöt32_t
)0x00002000)

	)

5270 
	#GPIO_PUPDR_PUPDR7
 ((
uöt32_t
)0x0000C000)

	)

5271 
	#GPIO_PUPDR_PUPDR7_0
 ((
uöt32_t
)0x00004000)

	)

5272 
	#GPIO_PUPDR_PUPDR7_1
 ((
uöt32_t
)0x00008000)

	)

5274 
	#GPIO_PUPDR_PUPDR8
 ((
uöt32_t
)0x00030000)

	)

5275 
	#GPIO_PUPDR_PUPDR8_0
 ((
uöt32_t
)0x00010000)

	)

5276 
	#GPIO_PUPDR_PUPDR8_1
 ((
uöt32_t
)0x00020000)

	)

5278 
	#GPIO_PUPDR_PUPDR9
 ((
uöt32_t
)0x000C0000)

	)

5279 
	#GPIO_PUPDR_PUPDR9_0
 ((
uöt32_t
)0x00040000)

	)

5280 
	#GPIO_PUPDR_PUPDR9_1
 ((
uöt32_t
)0x00080000)

	)

5282 
	#GPIO_PUPDR_PUPDR10
 ((
uöt32_t
)0x00300000)

	)

5283 
	#GPIO_PUPDR_PUPDR10_0
 ((
uöt32_t
)0x00100000)

	)

5284 
	#GPIO_PUPDR_PUPDR10_1
 ((
uöt32_t
)0x00200000)

	)

5286 
	#GPIO_PUPDR_PUPDR11
 ((
uöt32_t
)0x00C00000)

	)

5287 
	#GPIO_PUPDR_PUPDR11_0
 ((
uöt32_t
)0x00400000)

	)

5288 
	#GPIO_PUPDR_PUPDR11_1
 ((
uöt32_t
)0x00800000)

	)

5290 
	#GPIO_PUPDR_PUPDR12
 ((
uöt32_t
)0x03000000)

	)

5291 
	#GPIO_PUPDR_PUPDR12_0
 ((
uöt32_t
)0x01000000)

	)

5292 
	#GPIO_PUPDR_PUPDR12_1
 ((
uöt32_t
)0x02000000)

	)

5294 
	#GPIO_PUPDR_PUPDR13
 ((
uöt32_t
)0x0C000000)

	)

5295 
	#GPIO_PUPDR_PUPDR13_0
 ((
uöt32_t
)0x04000000)

	)

5296 
	#GPIO_PUPDR_PUPDR13_1
 ((
uöt32_t
)0x08000000)

	)

5298 
	#GPIO_PUPDR_PUPDR14
 ((
uöt32_t
)0x30000000)

	)

5299 
	#GPIO_PUPDR_PUPDR14_0
 ((
uöt32_t
)0x10000000)

	)

5300 
	#GPIO_PUPDR_PUPDR14_1
 ((
uöt32_t
)0x20000000)

	)

5302 
	#GPIO_PUPDR_PUPDR15
 ((
uöt32_t
)0xC0000000)

	)

5303 
	#GPIO_PUPDR_PUPDR15_0
 ((
uöt32_t
)0x40000000)

	)

5304 
	#GPIO_PUPDR_PUPDR15_1
 ((
uöt32_t
)0x80000000)

	)

5307 
	#GPIO_IDR_IDR_0
 ((
uöt32_t
)0x00000001)

	)

5308 
	#GPIO_IDR_IDR_1
 ((
uöt32_t
)0x00000002)

	)

5309 
	#GPIO_IDR_IDR_2
 ((
uöt32_t
)0x00000004)

	)

5310 
	#GPIO_IDR_IDR_3
 ((
uöt32_t
)0x00000008)

	)

5311 
	#GPIO_IDR_IDR_4
 ((
uöt32_t
)0x00000010)

	)

5312 
	#GPIO_IDR_IDR_5
 ((
uöt32_t
)0x00000020)

	)

5313 
	#GPIO_IDR_IDR_6
 ((
uöt32_t
)0x00000040)

	)

5314 
	#GPIO_IDR_IDR_7
 ((
uöt32_t
)0x00000080)

	)

5315 
	#GPIO_IDR_IDR_8
 ((
uöt32_t
)0x00000100)

	)

5316 
	#GPIO_IDR_IDR_9
 ((
uöt32_t
)0x00000200)

	)

5317 
	#GPIO_IDR_IDR_10
 ((
uöt32_t
)0x00000400)

	)

5318 
	#GPIO_IDR_IDR_11
 ((
uöt32_t
)0x00000800)

	)

5319 
	#GPIO_IDR_IDR_12
 ((
uöt32_t
)0x00001000)

	)

5320 
	#GPIO_IDR_IDR_13
 ((
uöt32_t
)0x00002000)

	)

5321 
	#GPIO_IDR_IDR_14
 ((
uöt32_t
)0x00004000)

	)

5322 
	#GPIO_IDR_IDR_15
 ((
uöt32_t
)0x00008000)

	)

5324 
	#GPIO_OTYPER_IDR_0
 
GPIO_IDR_IDR_0


	)

5325 
	#GPIO_OTYPER_IDR_1
 
GPIO_IDR_IDR_1


	)

5326 
	#GPIO_OTYPER_IDR_2
 
GPIO_IDR_IDR_2


	)

5327 
	#GPIO_OTYPER_IDR_3
 
GPIO_IDR_IDR_3


	)

5328 
	#GPIO_OTYPER_IDR_4
 
GPIO_IDR_IDR_4


	)

5329 
	#GPIO_OTYPER_IDR_5
 
GPIO_IDR_IDR_5


	)

5330 
	#GPIO_OTYPER_IDR_6
 
GPIO_IDR_IDR_6


	)

5331 
	#GPIO_OTYPER_IDR_7
 
GPIO_IDR_IDR_7


	)

5332 
	#GPIO_OTYPER_IDR_8
 
GPIO_IDR_IDR_8


	)

5333 
	#GPIO_OTYPER_IDR_9
 
GPIO_IDR_IDR_9


	)

5334 
	#GPIO_OTYPER_IDR_10
 
GPIO_IDR_IDR_10


	)

5335 
	#GPIO_OTYPER_IDR_11
 
GPIO_IDR_IDR_11


	)

5336 
	#GPIO_OTYPER_IDR_12
 
GPIO_IDR_IDR_12


	)

5337 
	#GPIO_OTYPER_IDR_13
 
GPIO_IDR_IDR_13


	)

5338 
	#GPIO_OTYPER_IDR_14
 
GPIO_IDR_IDR_14


	)

5339 
	#GPIO_OTYPER_IDR_15
 
GPIO_IDR_IDR_15


	)

5342 
	#GPIO_ODR_ODR_0
 ((
uöt32_t
)0x00000001)

	)

5343 
	#GPIO_ODR_ODR_1
 ((
uöt32_t
)0x00000002)

	)

5344 
	#GPIO_ODR_ODR_2
 ((
uöt32_t
)0x00000004)

	)

5345 
	#GPIO_ODR_ODR_3
 ((
uöt32_t
)0x00000008)

	)

5346 
	#GPIO_ODR_ODR_4
 ((
uöt32_t
)0x00000010)

	)

5347 
	#GPIO_ODR_ODR_5
 ((
uöt32_t
)0x00000020)

	)

5348 
	#GPIO_ODR_ODR_6
 ((
uöt32_t
)0x00000040)

	)

5349 
	#GPIO_ODR_ODR_7
 ((
uöt32_t
)0x00000080)

	)

5350 
	#GPIO_ODR_ODR_8
 ((
uöt32_t
)0x00000100)

	)

5351 
	#GPIO_ODR_ODR_9
 ((
uöt32_t
)0x00000200)

	)

5352 
	#GPIO_ODR_ODR_10
 ((
uöt32_t
)0x00000400)

	)

5353 
	#GPIO_ODR_ODR_11
 ((
uöt32_t
)0x00000800)

	)

5354 
	#GPIO_ODR_ODR_12
 ((
uöt32_t
)0x00001000)

	)

5355 
	#GPIO_ODR_ODR_13
 ((
uöt32_t
)0x00002000)

	)

5356 
	#GPIO_ODR_ODR_14
 ((
uöt32_t
)0x00004000)

	)

5357 
	#GPIO_ODR_ODR_15
 ((
uöt32_t
)0x00008000)

	)

5359 
	#GPIO_OTYPER_ODR_0
 
GPIO_ODR_ODR_0


	)

5360 
	#GPIO_OTYPER_ODR_1
 
GPIO_ODR_ODR_1


	)

5361 
	#GPIO_OTYPER_ODR_2
 
GPIO_ODR_ODR_2


	)

5362 
	#GPIO_OTYPER_ODR_3
 
GPIO_ODR_ODR_3


	)

5363 
	#GPIO_OTYPER_ODR_4
 
GPIO_ODR_ODR_4


	)

5364 
	#GPIO_OTYPER_ODR_5
 
GPIO_ODR_ODR_5


	)

5365 
	#GPIO_OTYPER_ODR_6
 
GPIO_ODR_ODR_6


	)

5366 
	#GPIO_OTYPER_ODR_7
 
GPIO_ODR_ODR_7


	)

5367 
	#GPIO_OTYPER_ODR_8
 
GPIO_ODR_ODR_8


	)

5368 
	#GPIO_OTYPER_ODR_9
 
GPIO_ODR_ODR_9


	)

5369 
	#GPIO_OTYPER_ODR_10
 
GPIO_ODR_ODR_10


	)

5370 
	#GPIO_OTYPER_ODR_11
 
GPIO_ODR_ODR_11


	)

5371 
	#GPIO_OTYPER_ODR_12
 
GPIO_ODR_ODR_12


	)

5372 
	#GPIO_OTYPER_ODR_13
 
GPIO_ODR_ODR_13


	)

5373 
	#GPIO_OTYPER_ODR_14
 
GPIO_ODR_ODR_14


	)

5374 
	#GPIO_OTYPER_ODR_15
 
GPIO_ODR_ODR_15


	)

5377 
	#GPIO_BSRR_BS_0
 ((
uöt32_t
)0x00000001)

	)

5378 
	#GPIO_BSRR_BS_1
 ((
uöt32_t
)0x00000002)

	)

5379 
	#GPIO_BSRR_BS_2
 ((
uöt32_t
)0x00000004)

	)

5380 
	#GPIO_BSRR_BS_3
 ((
uöt32_t
)0x00000008)

	)

5381 
	#GPIO_BSRR_BS_4
 ((
uöt32_t
)0x00000010)

	)

5382 
	#GPIO_BSRR_BS_5
 ((
uöt32_t
)0x00000020)

	)

5383 
	#GPIO_BSRR_BS_6
 ((
uöt32_t
)0x00000040)

	)

5384 
	#GPIO_BSRR_BS_7
 ((
uöt32_t
)0x00000080)

	)

5385 
	#GPIO_BSRR_BS_8
 ((
uöt32_t
)0x00000100)

	)

5386 
	#GPIO_BSRR_BS_9
 ((
uöt32_t
)0x00000200)

	)

5387 
	#GPIO_BSRR_BS_10
 ((
uöt32_t
)0x00000400)

	)

5388 
	#GPIO_BSRR_BS_11
 ((
uöt32_t
)0x00000800)

	)

5389 
	#GPIO_BSRR_BS_12
 ((
uöt32_t
)0x00001000)

	)

5390 
	#GPIO_BSRR_BS_13
 ((
uöt32_t
)0x00002000)

	)

5391 
	#GPIO_BSRR_BS_14
 ((
uöt32_t
)0x00004000)

	)

5392 
	#GPIO_BSRR_BS_15
 ((
uöt32_t
)0x00008000)

	)

5393 
	#GPIO_BSRR_BR_0
 ((
uöt32_t
)0x00010000)

	)

5394 
	#GPIO_BSRR_BR_1
 ((
uöt32_t
)0x00020000)

	)

5395 
	#GPIO_BSRR_BR_2
 ((
uöt32_t
)0x00040000)

	)

5396 
	#GPIO_BSRR_BR_3
 ((
uöt32_t
)0x00080000)

	)

5397 
	#GPIO_BSRR_BR_4
 ((
uöt32_t
)0x00100000)

	)

5398 
	#GPIO_BSRR_BR_5
 ((
uöt32_t
)0x00200000)

	)

5399 
	#GPIO_BSRR_BR_6
 ((
uöt32_t
)0x00400000)

	)

5400 
	#GPIO_BSRR_BR_7
 ((
uöt32_t
)0x00800000)

	)

5401 
	#GPIO_BSRR_BR_8
 ((
uöt32_t
)0x01000000)

	)

5402 
	#GPIO_BSRR_BR_9
 ((
uöt32_t
)0x02000000)

	)

5403 
	#GPIO_BSRR_BR_10
 ((
uöt32_t
)0x04000000)

	)

5404 
	#GPIO_BSRR_BR_11
 ((
uöt32_t
)0x08000000)

	)

5405 
	#GPIO_BSRR_BR_12
 ((
uöt32_t
)0x10000000)

	)

5406 
	#GPIO_BSRR_BR_13
 ((
uöt32_t
)0x20000000)

	)

5407 
	#GPIO_BSRR_BR_14
 ((
uöt32_t
)0x40000000)

	)

5408 
	#GPIO_BSRR_BR_15
 ((
uöt32_t
)0x80000000)

	)

5416 
	#HASH_CR_INIT
 ((
uöt32_t
)0x00000004)

	)

5417 
	#HASH_CR_DMAE
 ((
uöt32_t
)0x00000008)

	)

5418 
	#HASH_CR_DATATYPE
 ((
uöt32_t
)0x00000030)

	)

5419 
	#HASH_CR_DATATYPE_0
 ((
uöt32_t
)0x00000010)

	)

5420 
	#HASH_CR_DATATYPE_1
 ((
uöt32_t
)0x00000020)

	)

5421 
	#HASH_CR_MODE
 ((
uöt32_t
)0x00000040)

	)

5422 
	#HASH_CR_ALGO
 ((
uöt32_t
)0x00000080)

	)

5423 
	#HASH_CR_NBW
 ((
uöt32_t
)0x00000F00)

	)

5424 
	#HASH_CR_NBW_0
 ((
uöt32_t
)0x00000100)

	)

5425 
	#HASH_CR_NBW_1
 ((
uöt32_t
)0x00000200)

	)

5426 
	#HASH_CR_NBW_2
 ((
uöt32_t
)0x00000400)

	)

5427 
	#HASH_CR_NBW_3
 ((
uöt32_t
)0x00000800)

	)

5428 
	#HASH_CR_DINNE
 ((
uöt32_t
)0x00001000)

	)

5429 
	#HASH_CR_LKEY
 ((
uöt32_t
)0x00010000)

	)

5432 
	#HASH_STR_NBW
 ((
uöt32_t
)0x0000001F)

	)

5433 
	#HASH_STR_NBW_0
 ((
uöt32_t
)0x00000001)

	)

5434 
	#HASH_STR_NBW_1
 ((
uöt32_t
)0x00000002)

	)

5435 
	#HASH_STR_NBW_2
 ((
uöt32_t
)0x00000004)

	)

5436 
	#HASH_STR_NBW_3
 ((
uöt32_t
)0x00000008)

	)

5437 
	#HASH_STR_NBW_4
 ((
uöt32_t
)0x00000010)

	)

5438 
	#HASH_STR_DCAL
 ((
uöt32_t
)0x00000100)

	)

5441 
	#HASH_IMR_DINIM
 ((
uöt32_t
)0x00000001)

	)

5442 
	#HASH_IMR_DCIM
 ((
uöt32_t
)0x00000002)

	)

5445 
	#HASH_SR_DINIS
 ((
uöt32_t
)0x00000001)

	)

5446 
	#HASH_SR_DCIS
 ((
uöt32_t
)0x00000002)

	)

5447 
	#HASH_SR_DMAS
 ((
uöt32_t
)0x00000004)

	)

5448 
	#HASH_SR_BUSY
 ((
uöt32_t
)0x00000008)

	)

5456 
	#I2C_CR1_PE
 ((
uöt16_t
)0x0001Ë

	)

5457 
	#I2C_CR1_SMBUS
 ((
uöt16_t
)0x0002Ë

	)

5458 
	#I2C_CR1_SMBTYPE
 ((
uöt16_t
)0x0008Ë

	)

5459 
	#I2C_CR1_ENARP
 ((
uöt16_t
)0x0010Ë

	)

5460 
	#I2C_CR1_ENPEC
 ((
uöt16_t
)0x0020Ë

	)

5461 
	#I2C_CR1_ENGC
 ((
uöt16_t
)0x0040Ë

	)

5462 
	#I2C_CR1_NOSTRETCH
 ((
uöt16_t
)0x0080Ë

	)

5463 
	#I2C_CR1_START
 ((
uöt16_t
)0x0100Ë

	)

5464 
	#I2C_CR1_STOP
 ((
uöt16_t
)0x0200Ë

	)

5465 
	#I2C_CR1_ACK
 ((
uöt16_t
)0x0400Ë

	)

5466 
	#I2C_CR1_POS
 ((
uöt16_t
)0x0800Ë

	)

5467 
	#I2C_CR1_PEC
 ((
uöt16_t
)0x1000Ë

	)

5468 
	#I2C_CR1_ALERT
 ((
uöt16_t
)0x2000Ë

	)

5469 
	#I2C_CR1_SWRST
 ((
uöt16_t
)0x8000Ë

	)

5472 
	#I2C_CR2_FREQ
 ((
uöt16_t
)0x003FË

	)

5473 
	#I2C_CR2_FREQ_0
 ((
uöt16_t
)0x0001Ë

	)

5474 
	#I2C_CR2_FREQ_1
 ((
uöt16_t
)0x0002Ë

	)

5475 
	#I2C_CR2_FREQ_2
 ((
uöt16_t
)0x0004Ë

	)

5476 
	#I2C_CR2_FREQ_3
 ((
uöt16_t
)0x0008Ë

	)

5477 
	#I2C_CR2_FREQ_4
 ((
uöt16_t
)0x0010Ë

	)

5478 
	#I2C_CR2_FREQ_5
 ((
uöt16_t
)0x0020Ë

	)

5480 
	#I2C_CR2_ITERREN
 ((
uöt16_t
)0x0100Ë

	)

5481 
	#I2C_CR2_ITEVTEN
 ((
uöt16_t
)0x0200Ë

	)

5482 
	#I2C_CR2_ITBUFEN
 ((
uöt16_t
)0x0400Ë

	)

5483 
	#I2C_CR2_DMAEN
 ((
uöt16_t
)0x0800Ë

	)

5484 
	#I2C_CR2_LAST
 ((
uöt16_t
)0x1000Ë

	)

5487 
	#I2C_OAR1_ADD1_7
 ((
uöt16_t
)0x00FEË

	)

5488 
	#I2C_OAR1_ADD8_9
 ((
uöt16_t
)0x0300Ë

	)

5490 
	#I2C_OAR1_ADD0
 ((
uöt16_t
)0x0001Ë

	)

5491 
	#I2C_OAR1_ADD1
 ((
uöt16_t
)0x0002Ë

	)

5492 
	#I2C_OAR1_ADD2
 ((
uöt16_t
)0x0004Ë

	)

5493 
	#I2C_OAR1_ADD3
 ((
uöt16_t
)0x0008Ë

	)

5494 
	#I2C_OAR1_ADD4
 ((
uöt16_t
)0x0010Ë

	)

5495 
	#I2C_OAR1_ADD5
 ((
uöt16_t
)0x0020Ë

	)

5496 
	#I2C_OAR1_ADD6
 ((
uöt16_t
)0x0040Ë

	)

5497 
	#I2C_OAR1_ADD7
 ((
uöt16_t
)0x0080Ë

	)

5498 
	#I2C_OAR1_ADD8
 ((
uöt16_t
)0x0100Ë

	)

5499 
	#I2C_OAR1_ADD9
 ((
uöt16_t
)0x0200Ë

	)

5501 
	#I2C_OAR1_ADDMODE
 ((
uöt16_t
)0x8000Ë

	)

5504 
	#I2C_OAR2_ENDUAL
 ((
uöt8_t
)0x01Ë

	)

5505 
	#I2C_OAR2_ADD2
 ((
uöt8_t
)0xFEË

	)

5508 
	#I2C_DR_DR
 ((
uöt8_t
)0xFFË

	)

5511 
	#I2C_SR1_SB
 ((
uöt16_t
)0x0001Ë

	)

5512 
	#I2C_SR1_ADDR
 ((
uöt16_t
)0x0002Ë

	)

5513 
	#I2C_SR1_BTF
 ((
uöt16_t
)0x0004Ë

	)

5514 
	#I2C_SR1_ADD10
 ((
uöt16_t
)0x0008Ë

	)

5515 
	#I2C_SR1_STOPF
 ((
uöt16_t
)0x0010Ë

	)

5516 
	#I2C_SR1_RXNE
 ((
uöt16_t
)0x0040Ë

	)

5517 
	#I2C_SR1_TXE
 ((
uöt16_t
)0x0080Ë

	)

5518 
	#I2C_SR1_BERR
 ((
uöt16_t
)0x0100Ë

	)

5519 
	#I2C_SR1_ARLO
 ((
uöt16_t
)0x0200Ë

	)

5520 
	#I2C_SR1_AF
 ((
uöt16_t
)0x0400Ë

	)

5521 
	#I2C_SR1_OVR
 ((
uöt16_t
)0x0800Ë

	)

5522 
	#I2C_SR1_PECERR
 ((
uöt16_t
)0x1000Ë

	)

5523 
	#I2C_SR1_TIMEOUT
 ((
uöt16_t
)0x4000Ë

	)

5524 
	#I2C_SR1_SMBALERT
 ((
uöt16_t
)0x8000Ë

	)

5527 
	#I2C_SR2_MSL
 ((
uöt16_t
)0x0001Ë

	)

5528 
	#I2C_SR2_BUSY
 ((
uöt16_t
)0x0002Ë

	)

5529 
	#I2C_SR2_TRA
 ((
uöt16_t
)0x0004Ë

	)

5530 
	#I2C_SR2_GENCALL
 ((
uöt16_t
)0x0010Ë

	)

5531 
	#I2C_SR2_SMBDEFAULT
 ((
uöt16_t
)0x0020Ë

	)

5532 
	#I2C_SR2_SMBHOST
 ((
uöt16_t
)0x0040Ë

	)

5533 
	#I2C_SR2_DUALF
 ((
uöt16_t
)0x0080Ë

	)

5534 
	#I2C_SR2_PEC
 ((
uöt16_t
)0xFF00Ë

	)

5537 
	#I2C_CCR_CCR
 ((
uöt16_t
)0x0FFFË

	)

5538 
	#I2C_CCR_DUTY
 ((
uöt16_t
)0x4000Ë

	)

5539 
	#I2C_CCR_FS
 ((
uöt16_t
)0x8000Ë

	)

5542 
	#I2C_TRISE_TRISE
 ((
uöt8_t
)0x3FË

	)

5550 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

5553 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

5554 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

5555 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

5556 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

5559 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

5562 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

5563 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

5571 
	#PWR_CR_LPDS
 ((
uöt16_t
)0x0001Ë

	)

5572 
	#PWR_CR_PDDS
 ((
uöt16_t
)0x0002Ë

	)

5573 
	#PWR_CR_CWUF
 ((
uöt16_t
)0x0004Ë

	)

5574 
	#PWR_CR_CSBF
 ((
uöt16_t
)0x0008Ë

	)

5575 
	#PWR_CR_PVDE
 ((
uöt16_t
)0x0010Ë

	)

5577 
	#PWR_CR_PLS
 ((
uöt16_t
)0x00E0Ë

	)

5578 
	#PWR_CR_PLS_0
 ((
uöt16_t
)0x0020Ë

	)

5579 
	#PWR_CR_PLS_1
 ((
uöt16_t
)0x0040Ë

	)

5580 
	#PWR_CR_PLS_2
 ((
uöt16_t
)0x0080Ë

	)

5584 
	#PWR_CR_PLS_LEV0
 ((
uöt16_t
)0x0000Ë

	)

5585 
	#PWR_CR_PLS_LEV1
 ((
uöt16_t
)0x0020Ë

	)

5586 
	#PWR_CR_PLS_LEV2
 ((
uöt16_t
)0x0040Ë

	)

5587 
	#PWR_CR_PLS_LEV3
 ((
uöt16_t
)0x0060Ë

	)

5588 
	#PWR_CR_PLS_LEV4
 ((
uöt16_t
)0x0080Ë

	)

5589 
	#PWR_CR_PLS_LEV5
 ((
uöt16_t
)0x00A0Ë

	)

5590 
	#PWR_CR_PLS_LEV6
 ((
uöt16_t
)0x00C0Ë

	)

5591 
	#PWR_CR_PLS_LEV7
 ((
uöt16_t
)0x00E0Ë

	)

5593 
	#PWR_CR_DBP
 ((
uöt16_t
)0x0100Ë

	)

5594 
	#PWR_CR_FPDS
 ((
uöt16_t
)0x0200Ë

	)

5595 
	#PWR_CR_VOS
 ((
uöt16_t
)0x4000Ë

	)

5597 
	#PWR_CR_PMODE
 
PWR_CR_VOS


	)

5600 
	#PWR_CSR_WUF
 ((
uöt16_t
)0x0001Ë

	)

5601 
	#PWR_CSR_SBF
 ((
uöt16_t
)0x0002Ë

	)

5602 
	#PWR_CSR_PVDO
 ((
uöt16_t
)0x0004Ë

	)

5603 
	#PWR_CSR_BRR
 ((
uöt16_t
)0x0008Ë

	)

5604 
	#PWR_CSR_EWUP
 ((
uöt16_t
)0x0100Ë

	)

5605 
	#PWR_CSR_BRE
 ((
uöt16_t
)0x0200Ë

	)

5606 
	#PWR_CSR_VOSRDY
 ((
uöt16_t
)0x4000Ë

	)

5608 
	#PWR_CSR_REGRDY
 
PWR_CSR_VOSRDY


	)

5616 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001)

	)

5617 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002)

	)

5619 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8)

	)

5620 
	#RCC_CR_HSITRIM_0
 ((
uöt32_t
)0x00000008)

	)

5621 
	#RCC_CR_HSITRIM_1
 ((
uöt32_t
)0x00000010)

	)

5622 
	#RCC_CR_HSITRIM_2
 ((
uöt32_t
)0x00000020)

	)

5623 
	#RCC_CR_HSITRIM_3
 ((
uöt32_t
)0x00000040)

	)

5624 
	#RCC_CR_HSITRIM_4
 ((
uöt32_t
)0x00000080)

	)

5626 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00)

	)

5627 
	#RCC_CR_HSICAL_0
 ((
uöt32_t
)0x00000100)

	)

5628 
	#RCC_CR_HSICAL_1
 ((
uöt32_t
)0x00000200)

	)

5629 
	#RCC_CR_HSICAL_2
 ((
uöt32_t
)0x00000400)

	)

5630 
	#RCC_CR_HSICAL_3
 ((
uöt32_t
)0x00000800)

	)

5631 
	#RCC_CR_HSICAL_4
 ((
uöt32_t
)0x00001000)

	)

5632 
	#RCC_CR_HSICAL_5
 ((
uöt32_t
)0x00002000)

	)

5633 
	#RCC_CR_HSICAL_6
 ((
uöt32_t
)0x00004000)

	)

5634 
	#RCC_CR_HSICAL_7
 ((
uöt32_t
)0x00008000)

	)

5636 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000)

	)

5637 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000)

	)

5638 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000)

	)

5639 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000)

	)

5640 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000)

	)

5641 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000)

	)

5642 
	#RCC_CR_PLLI2SON
 ((
uöt32_t
)0x04000000)

	)

5643 
	#RCC_CR_PLLI2SRDY
 ((
uöt32_t
)0x08000000)

	)

5646 
	#RCC_PLLCFGR_PLLM
 ((
uöt32_t
)0x0000003F)

	)

5647 
	#RCC_PLLCFGR_PLLM_0
 ((
uöt32_t
)0x00000001)

	)

5648 
	#RCC_PLLCFGR_PLLM_1
 ((
uöt32_t
)0x00000002)

	)

5649 
	#RCC_PLLCFGR_PLLM_2
 ((
uöt32_t
)0x00000004)

	)

5650 
	#RCC_PLLCFGR_PLLM_3
 ((
uöt32_t
)0x00000008)

	)

5651 
	#RCC_PLLCFGR_PLLM_4
 ((
uöt32_t
)0x00000010)

	)

5652 
	#RCC_PLLCFGR_PLLM_5
 ((
uöt32_t
)0x00000020)

	)

5654 
	#RCC_PLLCFGR_PLLN
 ((
uöt32_t
)0x00007FC0)

	)

5655 
	#RCC_PLLCFGR_PLLN_0
 ((
uöt32_t
)0x00000040)

	)

5656 
	#RCC_PLLCFGR_PLLN_1
 ((
uöt32_t
)0x00000080)

	)

5657 
	#RCC_PLLCFGR_PLLN_2
 ((
uöt32_t
)0x00000100)

	)

5658 
	#RCC_PLLCFGR_PLLN_3
 ((
uöt32_t
)0x00000200)

	)

5659 
	#RCC_PLLCFGR_PLLN_4
 ((
uöt32_t
)0x00000400)

	)

5660 
	#RCC_PLLCFGR_PLLN_5
 ((
uöt32_t
)0x00000800)

	)

5661 
	#RCC_PLLCFGR_PLLN_6
 ((
uöt32_t
)0x00001000)

	)

5662 
	#RCC_PLLCFGR_PLLN_7
 ((
uöt32_t
)0x00002000)

	)

5663 
	#RCC_PLLCFGR_PLLN_8
 ((
uöt32_t
)0x00004000)

	)

5665 
	#RCC_PLLCFGR_PLLP
 ((
uöt32_t
)0x00030000)

	)

5666 
	#RCC_PLLCFGR_PLLP_0
 ((
uöt32_t
)0x00010000)

	)

5667 
	#RCC_PLLCFGR_PLLP_1
 ((
uöt32_t
)0x00020000)

	)

5669 
	#RCC_PLLCFGR_PLLSRC
 ((
uöt32_t
)0x00400000)

	)

5670 
	#RCC_PLLCFGR_PLLSRC_HSE
 ((
uöt32_t
)0x00400000)

	)

5671 
	#RCC_PLLCFGR_PLLSRC_HSI
 ((
uöt32_t
)0x00000000)

	)

5673 
	#RCC_PLLCFGR_PLLQ
 ((
uöt32_t
)0x0F000000)

	)

5674 
	#RCC_PLLCFGR_PLLQ_0
 ((
uöt32_t
)0x01000000)

	)

5675 
	#RCC_PLLCFGR_PLLQ_1
 ((
uöt32_t
)0x02000000)

	)

5676 
	#RCC_PLLCFGR_PLLQ_2
 ((
uöt32_t
)0x04000000)

	)

5677 
	#RCC_PLLCFGR_PLLQ_3
 ((
uöt32_t
)0x08000000)

	)

5681 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

5682 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

5683 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

5685 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

5686 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

5687 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

5690 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

5691 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

5692 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

5694 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

5695 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

5696 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

5699 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

5700 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

5701 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

5702 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

5703 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

5705 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

5706 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

5707 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

5708 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

5709 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

5710 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

5711 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

5712 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

5713 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

5716 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00001C00Ë

	)

5717 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000400Ë

	)

5718 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000800Ë

	)

5719 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00001000Ë

	)

5721 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

5722 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00001000Ë

	)

5723 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00001400Ë

	)

5724 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00001800Ë

	)

5725 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00001C00Ë

	)

5728 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x0000E000Ë

	)

5729 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00002000Ë

	)

5730 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00004000Ë

	)

5731 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00008000Ë

	)

5733 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

5734 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00008000Ë

	)

5735 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x0000A000Ë

	)

5736 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x0000C000Ë

	)

5737 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x0000E000Ë

	)

5740 
	#RCC_CFGR_RTCPRE
 ((
uöt32_t
)0x001F0000)

	)

5741 
	#RCC_CFGR_RTCPRE_0
 ((
uöt32_t
)0x00010000)

	)

5742 
	#RCC_CFGR_RTCPRE_1
 ((
uöt32_t
)0x00020000)

	)

5743 
	#RCC_CFGR_RTCPRE_2
 ((
uöt32_t
)0x00040000)

	)

5744 
	#RCC_CFGR_RTCPRE_3
 ((
uöt32_t
)0x00080000)

	)

5745 
	#RCC_CFGR_RTCPRE_4
 ((
uöt32_t
)0x00100000)

	)

5748 
	#RCC_CFGR_MCO1
 ((
uöt32_t
)0x00600000)

	)

5749 
	#RCC_CFGR_MCO1_0
 ((
uöt32_t
)0x00200000)

	)

5750 
	#RCC_CFGR_MCO1_1
 ((
uöt32_t
)0x00400000)

	)

5752 
	#RCC_CFGR_I2SSRC
 ((
uöt32_t
)0x00800000)

	)

5754 
	#RCC_CFGR_MCO1PRE
 ((
uöt32_t
)0x07000000)

	)

5755 
	#RCC_CFGR_MCO1PRE_0
 ((
uöt32_t
)0x01000000)

	)

5756 
	#RCC_CFGR_MCO1PRE_1
 ((
uöt32_t
)0x02000000)

	)

5757 
	#RCC_CFGR_MCO1PRE_2
 ((
uöt32_t
)0x04000000)

	)

5759 
	#RCC_CFGR_MCO2PRE
 ((
uöt32_t
)0x38000000)

	)

5760 
	#RCC_CFGR_MCO2PRE_0
 ((
uöt32_t
)0x08000000)

	)

5761 
	#RCC_CFGR_MCO2PRE_1
 ((
uöt32_t
)0x10000000)

	)

5762 
	#RCC_CFGR_MCO2PRE_2
 ((
uöt32_t
)0x20000000)

	)

5764 
	#RCC_CFGR_MCO2
 ((
uöt32_t
)0xC0000000)

	)

5765 
	#RCC_CFGR_MCO2_0
 ((
uöt32_t
)0x40000000)

	)

5766 
	#RCC_CFGR_MCO2_1
 ((
uöt32_t
)0x80000000)

	)

5769 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001)

	)

5770 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002)

	)

5771 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004)

	)

5772 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008)

	)

5773 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010)

	)

5774 
	#RCC_CIR_PLLI2SRDYF
 ((
uöt32_t
)0x00000020)

	)

5775 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080)

	)

5776 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100)

	)

5777 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200)

	)

5778 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400)

	)

5779 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800)

	)

5780 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000)

	)

5781 
	#RCC_CIR_PLLI2SRDYIE
 ((
uöt32_t
)0x00002000)

	)

5782 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000)

	)

5783 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000)

	)

5784 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000)

	)

5785 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000)

	)

5786 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000)

	)

5787 
	#RCC_CIR_PLLI2SRDYC
 ((
uöt32_t
)0x00200000)

	)

5788 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000)

	)

5791 
	#RCC_AHB1RSTR_GPIOARST
 ((
uöt32_t
)0x00000001)

	)

5792 
	#RCC_AHB1RSTR_GPIOBRST
 ((
uöt32_t
)0x00000002)

	)

5793 
	#RCC_AHB1RSTR_GPIOCRST
 ((
uöt32_t
)0x00000004)

	)

5794 
	#RCC_AHB1RSTR_GPIODRST
 ((
uöt32_t
)0x00000008)

	)

5795 
	#RCC_AHB1RSTR_GPIOERST
 ((
uöt32_t
)0x00000010)

	)

5796 
	#RCC_AHB1RSTR_GPIOFRST
 ((
uöt32_t
)0x00000020)

	)

5797 
	#RCC_AHB1RSTR_GPIOGRST
 ((
uöt32_t
)0x00000040)

	)

5798 
	#RCC_AHB1RSTR_GPIOHRST
 ((
uöt32_t
)0x00000080)

	)

5799 
	#RCC_AHB1RSTR_GPIOIRST
 ((
uöt32_t
)0x00000100)

	)

5800 
	#RCC_AHB1RSTR_CRCRST
 ((
uöt32_t
)0x00001000)

	)

5801 
	#RCC_AHB1RSTR_DMA1RST
 ((
uöt32_t
)0x00200000)

	)

5802 
	#RCC_AHB1RSTR_DMA2RST
 ((
uöt32_t
)0x00400000)

	)

5803 
	#RCC_AHB1RSTR_ETHMACRST
 ((
uöt32_t
)0x02000000)

	)

5804 
	#RCC_AHB1RSTR_OTGHRST
 ((
uöt32_t
)0x10000000)

	)

5807 
	#RCC_AHB2RSTR_DCMIRST
 ((
uöt32_t
)0x00000001)

	)

5808 
	#RCC_AHB2RSTR_CRYPRST
 ((
uöt32_t
)0x00000010)

	)

5809 
	#RCC_AHB2RSTR_HSAHRST
 ((
uöt32_t
)0x00000020)

	)

5810 
	#RCC_AHB2RSTR_RNGRST
 ((
uöt32_t
)0x00000040)

	)

5811 
	#RCC_AHB2RSTR_OTGFSRST
 ((
uöt32_t
)0x00000080)

	)

5814 
	#RCC_AHB3RSTR_FSMCRST
 ((
uöt32_t
)0x00000001)

	)

5817 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001)

	)

5818 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002)

	)

5819 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004)

	)

5820 
	#RCC_APB1RSTR_TIM5RST
 ((
uöt32_t
)0x00000008)

	)

5821 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010)

	)

5822 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020)

	)

5823 
	#RCC_APB1RSTR_TIM12RST
 ((
uöt32_t
)0x00000040)

	)

5824 
	#RCC_APB1RSTR_TIM13RST
 ((
uöt32_t
)0x00000080)

	)

5825 
	#RCC_APB1RSTR_TIM14RST
 ((
uöt32_t
)0x00000100)

	)

5826 
	#RCC_APB1RSTR_WWDGEN
 ((
uöt32_t
)0x00000800)

	)

5827 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00008000)

	)

5828 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00010000)

	)

5829 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000)

	)

5830 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000)

	)

5831 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000)

	)

5832 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000)

	)

5833 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000)

	)

5834 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000)

	)

5835 
	#RCC_APB1RSTR_I2C3RST
 ((
uöt32_t
)0x00800000)

	)

5836 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000)

	)

5837 
	#RCC_APB1RSTR_CAN2RST
 ((
uöt32_t
)0x04000000)

	)

5838 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000)

	)

5839 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000)

	)

5842 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000001)

	)

5843 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt32_t
)0x00000002)

	)

5844 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00000010)

	)

5845 
	#RCC_APB2RSTR_USART6RST
 ((
uöt32_t
)0x00000020)

	)

5846 
	#RCC_APB2RSTR_ADCRST
 ((
uöt32_t
)0x00000100)

	)

5847 
	#RCC_APB2RSTR_SDIORST
 ((
uöt32_t
)0x00000800)

	)

5848 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000)

	)

5849 
	#RCC_APB2RSTR_SYSCFGRST
 ((
uöt32_t
)0x00004000)

	)

5850 
	#RCC_APB2RSTR_TIM9RST
 ((
uöt32_t
)0x00010000)

	)

5851 
	#RCC_APB2RSTR_TIM10RST
 ((
uöt32_t
)0x00020000)

	)

5852 
	#RCC_APB2RSTR_TIM11RST
 ((
uöt32_t
)0x00040000)

	)

5854 
	#RCC_APB2RSTR_SPI1
 
RCC_APB2RSTR_SPI1RST


	)

5857 
	#RCC_AHB1ENR_GPIOAEN
 ((
uöt32_t
)0x00000001)

	)

5858 
	#RCC_AHB1ENR_GPIOBEN
 ((
uöt32_t
)0x00000002)

	)

5859 
	#RCC_AHB1ENR_GPIOCEN
 ((
uöt32_t
)0x00000004)

	)

5860 
	#RCC_AHB1ENR_GPIODEN
 ((
uöt32_t
)0x00000008)

	)

5861 
	#RCC_AHB1ENR_GPIOEEN
 ((
uöt32_t
)0x00000010)

	)

5862 
	#RCC_AHB1ENR_GPIOFEN
 ((
uöt32_t
)0x00000020)

	)

5863 
	#RCC_AHB1ENR_GPIOGEN
 ((
uöt32_t
)0x00000040)

	)

5864 
	#RCC_AHB1ENR_GPIOHEN
 ((
uöt32_t
)0x00000080)

	)

5865 
	#RCC_AHB1ENR_GPIOIEN
 ((
uöt32_t
)0x00000100)

	)

5866 
	#RCC_AHB1ENR_CRCEN
 ((
uöt32_t
)0x00001000)

	)

5867 
	#RCC_AHB1ENR_BKPSRAMEN
 ((
uöt32_t
)0x00040000)

	)

5868 
	#RCC_AHB1ENR_CCMDATARAMEN
 ((
uöt32_t
)0x00100000)

	)

5869 
	#RCC_AHB1ENR_DMA1EN
 ((
uöt32_t
)0x00200000)

	)

5870 
	#RCC_AHB1ENR_DMA2EN
 ((
uöt32_t
)0x00400000)

	)

5871 
	#RCC_AHB1ENR_ETHMACEN
 ((
uöt32_t
)0x02000000)

	)

5872 
	#RCC_AHB1ENR_ETHMACTXEN
 ((
uöt32_t
)0x04000000)

	)

5873 
	#RCC_AHB1ENR_ETHMACRXEN
 ((
uöt32_t
)0x08000000)

	)

5874 
	#RCC_AHB1ENR_ETHMACPTPEN
 ((
uöt32_t
)0x10000000)

	)

5875 
	#RCC_AHB1ENR_OTGHSEN
 ((
uöt32_t
)0x20000000)

	)

5876 
	#RCC_AHB1ENR_OTGHSULPIEN
 ((
uöt32_t
)0x40000000)

	)

5879 
	#RCC_AHB2ENR_DCMIEN
 ((
uöt32_t
)0x00000001)

	)

5880 
	#RCC_AHB2ENR_CRYPEN
 ((
uöt32_t
)0x00000010)

	)

5881 
	#RCC_AHB2ENR_HASHEN
 ((
uöt32_t
)0x00000020)

	)

5882 
	#RCC_AHB2ENR_RNGEN
 ((
uöt32_t
)0x00000040)

	)

5883 
	#RCC_AHB2ENR_OTGFSEN
 ((
uöt32_t
)0x00000080)

	)

5886 
	#RCC_AHB3ENR_FSMCEN
 ((
uöt32_t
)0x00000001)

	)

5889 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001)

	)

5890 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002)

	)

5891 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004)

	)

5892 
	#RCC_APB1ENR_TIM5EN
 ((
uöt32_t
)0x00000008)

	)

5893 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010)

	)

5894 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020)

	)

5895 
	#RCC_APB1ENR_TIM12EN
 ((
uöt32_t
)0x00000040)

	)

5896 
	#RCC_APB1ENR_TIM13EN
 ((
uöt32_t
)0x00000080)

	)

5897 
	#RCC_APB1ENR_TIM14EN
 ((
uöt32_t
)0x00000100)

	)

5898 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800)

	)

5899 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000)

	)

5900 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000)

	)

5901 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000)

	)

5902 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000)

	)

5903 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00080000)

	)

5904 
	#RCC_APB1ENR_UART5EN
 ((
uöt32_t
)0x00100000)

	)

5905 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000)

	)

5906 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000)

	)

5907 
	#RCC_APB1ENR_I2C3EN
 ((
uöt32_t
)0x00800000)

	)

5908 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000)

	)

5909 
	#RCC_APB1ENR_CAN2EN
 ((
uöt32_t
)0x04000000)

	)

5910 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000)

	)

5911 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000)

	)

5914 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000001)

	)

5915 
	#RCC_APB2ENR_TIM8EN
 ((
uöt32_t
)0x00000002)

	)

5916 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00000010)

	)

5917 
	#RCC_APB2ENR_USART6EN
 ((
uöt32_t
)0x00000020)

	)

5918 
	#RCC_APB2ENR_ADC1EN
 ((
uöt32_t
)0x00000100)

	)

5919 
	#RCC_APB2ENR_ADC2EN
 ((
uöt32_t
)0x00000200)

	)

5920 
	#RCC_APB2ENR_ADC3EN
 ((
uöt32_t
)0x00000400)

	)

5921 
	#RCC_APB2ENR_SDIOEN
 ((
uöt32_t
)0x00000800)

	)

5922 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000)

	)

5923 
	#RCC_APB2ENR_SYSCFGEN
 ((
uöt32_t
)0x00004000)

	)

5924 
	#RCC_APB2ENR_TIM11EN
 ((
uöt32_t
)0x00040000)

	)

5925 
	#RCC_APB2ENR_TIM10EN
 ((
uöt32_t
)0x00020000)

	)

5926 
	#RCC_APB2ENR_TIM9EN
 ((
uöt32_t
)0x00010000)

	)

5929 
	#RCC_AHB1LPENR_GPIOALPEN
 ((
uöt32_t
)0x00000001)

	)

5930 
	#RCC_AHB1LPENR_GPIOBLPEN
 ((
uöt32_t
)0x00000002)

	)

5931 
	#RCC_AHB1LPENR_GPIOCLPEN
 ((
uöt32_t
)0x00000004)

	)

5932 
	#RCC_AHB1LPENR_GPIODLPEN
 ((
uöt32_t
)0x00000008)

	)

5933 
	#RCC_AHB1LPENR_GPIOELPEN
 ((
uöt32_t
)0x00000010)

	)

5934 
	#RCC_AHB1LPENR_GPIOFLPEN
 ((
uöt32_t
)0x00000020)

	)

5935 
	#RCC_AHB1LPENR_GPIOGLPEN
 ((
uöt32_t
)0x00000040)

	)

5936 
	#RCC_AHB1LPENR_GPIOHLPEN
 ((
uöt32_t
)0x00000080)

	)

5937 
	#RCC_AHB1LPENR_GPIOILPEN
 ((
uöt32_t
)0x00000100)

	)

5938 
	#RCC_AHB1LPENR_CRCLPEN
 ((
uöt32_t
)0x00001000)

	)

5939 
	#RCC_AHB1LPENR_FLITFLPEN
 ((
uöt32_t
)0x00008000)

	)

5940 
	#RCC_AHB1LPENR_SRAM1LPEN
 ((
uöt32_t
)0x00010000)

	)

5941 
	#RCC_AHB1LPENR_SRAM2LPEN
 ((
uöt32_t
)0x00020000)

	)

5942 
	#RCC_AHB1LPENR_BKPSRAMLPEN
 ((
uöt32_t
)0x00040000)

	)

5943 
	#RCC_AHB1LPENR_DMA1LPEN
 ((
uöt32_t
)0x00200000)

	)

5944 
	#RCC_AHB1LPENR_DMA2LPEN
 ((
uöt32_t
)0x00400000)

	)

5945 
	#RCC_AHB1LPENR_ETHMACLPEN
 ((
uöt32_t
)0x02000000)

	)

5946 
	#RCC_AHB1LPENR_ETHMACTXLPEN
 ((
uöt32_t
)0x04000000)

	)

5947 
	#RCC_AHB1LPENR_ETHMACRXLPEN
 ((
uöt32_t
)0x08000000)

	)

5948 
	#RCC_AHB1LPENR_ETHMACPTPLPEN
 ((
uöt32_t
)0x10000000)

	)

5949 
	#RCC_AHB1LPENR_OTGHSLPEN
 ((
uöt32_t
)0x20000000)

	)

5950 
	#RCC_AHB1LPENR_OTGHSULPILPEN
 ((
uöt32_t
)0x40000000)

	)

5953 
	#RCC_AHB2LPENR_DCMILPEN
 ((
uöt32_t
)0x00000001)

	)

5954 
	#RCC_AHB2LPENR_CRYPLPEN
 ((
uöt32_t
)0x00000010)

	)

5955 
	#RCC_AHB2LPENR_HASHLPEN
 ((
uöt32_t
)0x00000020)

	)

5956 
	#RCC_AHB2LPENR_RNGLPEN
 ((
uöt32_t
)0x00000040)

	)

5957 
	#RCC_AHB2LPENR_OTGFSLPEN
 ((
uöt32_t
)0x00000080)

	)

5960 
	#RCC_AHB3LPENR_FSMCLPEN
 ((
uöt32_t
)0x00000001)

	)

5963 
	#RCC_APB1LPENR_TIM2LPEN
 ((
uöt32_t
)0x00000001)

	)

5964 
	#RCC_APB1LPENR_TIM3LPEN
 ((
uöt32_t
)0x00000002)

	)

5965 
	#RCC_APB1LPENR_TIM4LPEN
 ((
uöt32_t
)0x00000004)

	)

5966 
	#RCC_APB1LPENR_TIM5LPEN
 ((
uöt32_t
)0x00000008)

	)

5967 
	#RCC_APB1LPENR_TIM6LPEN
 ((
uöt32_t
)0x00000010)

	)

5968 
	#RCC_APB1LPENR_TIM7LPEN
 ((
uöt32_t
)0x00000020)

	)

5969 
	#RCC_APB1LPENR_TIM12LPEN
 ((
uöt32_t
)0x00000040)

	)

5970 
	#RCC_APB1LPENR_TIM13LPEN
 ((
uöt32_t
)0x00000080)

	)

5971 
	#RCC_APB1LPENR_TIM14LPEN
 ((
uöt32_t
)0x00000100)

	)

5972 
	#RCC_APB1LPENR_WWDGLPEN
 ((
uöt32_t
)0x00000800)

	)

5973 
	#RCC_APB1LPENR_SPI2LPEN
 ((
uöt32_t
)0x00004000)

	)

5974 
	#RCC_APB1LPENR_SPI3LPEN
 ((
uöt32_t
)0x00008000)

	)

5975 
	#RCC_APB1LPENR_USART2LPEN
 ((
uöt32_t
)0x00020000)

	)

5976 
	#RCC_APB1LPENR_USART3LPEN
 ((
uöt32_t
)0x00040000)

	)

5977 
	#RCC_APB1LPENR_UART4LPEN
 ((
uöt32_t
)0x00080000)

	)

5978 
	#RCC_APB1LPENR_UART5LPEN
 ((
uöt32_t
)0x00100000)

	)

5979 
	#RCC_APB1LPENR_I2C1LPEN
 ((
uöt32_t
)0x00200000)

	)

5980 
	#RCC_APB1LPENR_I2C2LPEN
 ((
uöt32_t
)0x00400000)

	)

5981 
	#RCC_APB1LPENR_I2C3LPEN
 ((
uöt32_t
)0x00800000)

	)

5982 
	#RCC_APB1LPENR_CAN1LPEN
 ((
uöt32_t
)0x02000000)

	)

5983 
	#RCC_APB1LPENR_CAN2LPEN
 ((
uöt32_t
)0x04000000)

	)

5984 
	#RCC_APB1LPENR_PWRLPEN
 ((
uöt32_t
)0x10000000)

	)

5985 
	#RCC_APB1LPENR_DACLPEN
 ((
uöt32_t
)0x20000000)

	)

5988 
	#RCC_APB2LPENR_TIM1LPEN
 ((
uöt32_t
)0x00000001)

	)

5989 
	#RCC_APB2LPENR_TIM8LPEN
 ((
uöt32_t
)0x00000002)

	)

5990 
	#RCC_APB2LPENR_USART1LPEN
 ((
uöt32_t
)0x00000010)

	)

5991 
	#RCC_APB2LPENR_USART6LPEN
 ((
uöt32_t
)0x00000020)

	)

5992 
	#RCC_APB2LPENR_ADC1LPEN
 ((
uöt32_t
)0x00000100)

	)

5993 
	#RCC_APB2LPENR_ADC2PEN
 ((
uöt32_t
)0x00000200)

	)

5994 
	#RCC_APB2LPENR_ADC3LPEN
 ((
uöt32_t
)0x00000400)

	)

5995 
	#RCC_APB2LPENR_SDIOLPEN
 ((
uöt32_t
)0x00000800)

	)

5996 
	#RCC_APB2LPENR_SPI1LPEN
 ((
uöt32_t
)0x00001000)

	)

5997 
	#RCC_APB2LPENR_SYSCFGLPEN
 ((
uöt32_t
)0x00004000)

	)

5998 
	#RCC_APB2LPENR_TIM9LPEN
 ((
uöt32_t
)0x00010000)

	)

5999 
	#RCC_APB2LPENR_TIM10LPEN
 ((
uöt32_t
)0x00020000)

	)

6000 
	#RCC_APB2LPENR_TIM11LPEN
 ((
uöt32_t
)0x00040000)

	)

6003 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001)

	)

6004 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002)

	)

6005 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004)

	)

6007 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300)

	)

6008 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100)

	)

6009 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200)

	)

6011 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000)

	)

6012 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000)

	)

6015 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001)

	)

6016 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002)

	)

6017 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000)

	)

6018 
	#RCC_CSR_BORRSTF
 ((
uöt32_t
)0x02000000)

	)

6019 
	#RCC_CSR_PADRSTF
 ((
uöt32_t
)0x04000000)

	)

6020 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000)

	)

6021 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000)

	)

6022 
	#RCC_CSR_WDGRSTF
 ((
uöt32_t
)0x20000000)

	)

6023 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000)

	)

6024 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000)

	)

6027 
	#RCC_SSCGR_MODPER
 ((
uöt32_t
)0x00001FFF)

	)

6028 
	#RCC_SSCGR_INCSTEP
 ((
uöt32_t
)0x0FFFE000)

	)

6029 
	#RCC_SSCGR_SPREADSEL
 ((
uöt32_t
)0x40000000)

	)

6030 
	#RCC_SSCGR_SSCGEN
 ((
uöt32_t
)0x80000000)

	)

6033 
	#RCC_PLLI2SCFGR_PLLI2SN
 ((
uöt32_t
)0x00007FC0)

	)

6034 
	#RCC_PLLI2SCFGR_PLLI2SR
 ((
uöt32_t
)0x70000000)

	)

6042 
	#RNG_CR_RNGEN
 ((
uöt32_t
)0x00000004)

	)

6043 
	#RNG_CR_IE
 ((
uöt32_t
)0x00000008)

	)

6046 
	#RNG_SR_DRDY
 ((
uöt32_t
)0x00000001)

	)

6047 
	#RNG_SR_CECS
 ((
uöt32_t
)0x00000002)

	)

6048 
	#RNG_SR_SECS
 ((
uöt32_t
)0x00000004)

	)

6049 
	#RNG_SR_CEIS
 ((
uöt32_t
)0x00000020)

	)

6050 
	#RNG_SR_SEIS
 ((
uöt32_t
)0x00000040)

	)

6058 
	#RTC_TR_PM
 ((
uöt32_t
)0x00400000)

	)

6059 
	#RTC_TR_HT
 ((
uöt32_t
)0x00300000)

	)

6060 
	#RTC_TR_HT_0
 ((
uöt32_t
)0x00100000)

	)

6061 
	#RTC_TR_HT_1
 ((
uöt32_t
)0x00200000)

	)

6062 
	#RTC_TR_HU
 ((
uöt32_t
)0x000F0000)

	)

6063 
	#RTC_TR_HU_0
 ((
uöt32_t
)0x00010000)

	)

6064 
	#RTC_TR_HU_1
 ((
uöt32_t
)0x00020000)

	)

6065 
	#RTC_TR_HU_2
 ((
uöt32_t
)0x00040000)

	)

6066 
	#RTC_TR_HU_3
 ((
uöt32_t
)0x00080000)

	)

6067 
	#RTC_TR_MNT
 ((
uöt32_t
)0x00007000)

	)

6068 
	#RTC_TR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

6069 
	#RTC_TR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

6070 
	#RTC_TR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

6071 
	#RTC_TR_MNU
 ((
uöt32_t
)0x00000F00)

	)

6072 
	#RTC_TR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

6073 
	#RTC_TR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

6074 
	#RTC_TR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

6075 
	#RTC_TR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

6076 
	#RTC_TR_ST
 ((
uöt32_t
)0x00000070)

	)

6077 
	#RTC_TR_ST_0
 ((
uöt32_t
)0x00000010)

	)

6078 
	#RTC_TR_ST_1
 ((
uöt32_t
)0x00000020)

	)

6079 
	#RTC_TR_ST_2
 ((
uöt32_t
)0x00000040)

	)

6080 
	#RTC_TR_SU
 ((
uöt32_t
)0x0000000F)

	)

6081 
	#RTC_TR_SU_0
 ((
uöt32_t
)0x00000001)

	)

6082 
	#RTC_TR_SU_1
 ((
uöt32_t
)0x00000002)

	)

6083 
	#RTC_TR_SU_2
 ((
uöt32_t
)0x00000004)

	)

6084 
	#RTC_TR_SU_3
 ((
uöt32_t
)0x00000008)

	)

6087 
	#RTC_DR_YT
 ((
uöt32_t
)0x00F00000)

	)

6088 
	#RTC_DR_YT_0
 ((
uöt32_t
)0x00100000)

	)

6089 
	#RTC_DR_YT_1
 ((
uöt32_t
)0x00200000)

	)

6090 
	#RTC_DR_YT_2
 ((
uöt32_t
)0x00400000)

	)

6091 
	#RTC_DR_YT_3
 ((
uöt32_t
)0x00800000)

	)

6092 
	#RTC_DR_YU
 ((
uöt32_t
)0x000F0000)

	)

6093 
	#RTC_DR_YU_0
 ((
uöt32_t
)0x00010000)

	)

6094 
	#RTC_DR_YU_1
 ((
uöt32_t
)0x00020000)

	)

6095 
	#RTC_DR_YU_2
 ((
uöt32_t
)0x00040000)

	)

6096 
	#RTC_DR_YU_3
 ((
uöt32_t
)0x00080000)

	)

6097 
	#RTC_DR_WDU
 ((
uöt32_t
)0x0000E000)

	)

6098 
	#RTC_DR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

6099 
	#RTC_DR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

6100 
	#RTC_DR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

6101 
	#RTC_DR_MT
 ((
uöt32_t
)0x00001000)

	)

6102 
	#RTC_DR_MU
 ((
uöt32_t
)0x00000F00)

	)

6103 
	#RTC_DR_MU_0
 ((
uöt32_t
)0x00000100)

	)

6104 
	#RTC_DR_MU_1
 ((
uöt32_t
)0x00000200)

	)

6105 
	#RTC_DR_MU_2
 ((
uöt32_t
)0x00000400)

	)

6106 
	#RTC_DR_MU_3
 ((
uöt32_t
)0x00000800)

	)

6107 
	#RTC_DR_DT
 ((
uöt32_t
)0x00000030)

	)

6108 
	#RTC_DR_DT_0
 ((
uöt32_t
)0x00000010)

	)

6109 
	#RTC_DR_DT_1
 ((
uöt32_t
)0x00000020)

	)

6110 
	#RTC_DR_DU
 ((
uöt32_t
)0x0000000F)

	)

6111 
	#RTC_DR_DU_0
 ((
uöt32_t
)0x00000001)

	)

6112 
	#RTC_DR_DU_1
 ((
uöt32_t
)0x00000002)

	)

6113 
	#RTC_DR_DU_2
 ((
uöt32_t
)0x00000004)

	)

6114 
	#RTC_DR_DU_3
 ((
uöt32_t
)0x00000008)

	)

6117 
	#RTC_CR_COE
 ((
uöt32_t
)0x00800000)

	)

6118 
	#RTC_CR_OSEL
 ((
uöt32_t
)0x00600000)

	)

6119 
	#RTC_CR_OSEL_0
 ((
uöt32_t
)0x00200000)

	)

6120 
	#RTC_CR_OSEL_1
 ((
uöt32_t
)0x00400000)

	)

6121 
	#RTC_CR_POL
 ((
uöt32_t
)0x00100000)

	)

6122 
	#RTC_CR_COSEL
 ((
uöt32_t
)0x00080000)

	)

6123 
	#RTC_CR_BCK
 ((
uöt32_t
)0x00040000)

	)

6124 
	#RTC_CR_SUB1H
 ((
uöt32_t
)0x00020000)

	)

6125 
	#RTC_CR_ADD1H
 ((
uöt32_t
)0x00010000)

	)

6126 
	#RTC_CR_TSIE
 ((
uöt32_t
)0x00008000)

	)

6127 
	#RTC_CR_WUTIE
 ((
uöt32_t
)0x00004000)

	)

6128 
	#RTC_CR_ALRBIE
 ((
uöt32_t
)0x00002000)

	)

6129 
	#RTC_CR_ALRAIE
 ((
uöt32_t
)0x00001000)

	)

6130 
	#RTC_CR_TSE
 ((
uöt32_t
)0x00000800)

	)

6131 
	#RTC_CR_WUTE
 ((
uöt32_t
)0x00000400)

	)

6132 
	#RTC_CR_ALRBE
 ((
uöt32_t
)0x00000200)

	)

6133 
	#RTC_CR_ALRAE
 ((
uöt32_t
)0x00000100)

	)

6134 
	#RTC_CR_DCE
 ((
uöt32_t
)0x00000080)

	)

6135 
	#RTC_CR_FMT
 ((
uöt32_t
)0x00000040)

	)

6136 
	#RTC_CR_BYPSHAD
 ((
uöt32_t
)0x00000020)

	)

6137 
	#RTC_CR_REFCKON
 ((
uöt32_t
)0x00000010)

	)

6138 
	#RTC_CR_TSEDGE
 ((
uöt32_t
)0x00000008)

	)

6139 
	#RTC_CR_WUCKSEL
 ((
uöt32_t
)0x00000007)

	)

6140 
	#RTC_CR_WUCKSEL_0
 ((
uöt32_t
)0x00000001)

	)

6141 
	#RTC_CR_WUCKSEL_1
 ((
uöt32_t
)0x00000002)

	)

6142 
	#RTC_CR_WUCKSEL_2
 ((
uöt32_t
)0x00000004)

	)

6145 
	#RTC_ISR_RECALPF
 ((
uöt32_t
)0x00010000)

	)

6146 
	#RTC_ISR_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

6147 
	#RTC_ISR_TSOVF
 ((
uöt32_t
)0x00001000)

	)

6148 
	#RTC_ISR_TSF
 ((
uöt32_t
)0x00000800)

	)

6149 
	#RTC_ISR_WUTF
 ((
uöt32_t
)0x00000400)

	)

6150 
	#RTC_ISR_ALRBF
 ((
uöt32_t
)0x00000200)

	)

6151 
	#RTC_ISR_ALRAF
 ((
uöt32_t
)0x00000100)

	)

6152 
	#RTC_ISR_INIT
 ((
uöt32_t
)0x00000080)

	)

6153 
	#RTC_ISR_INITF
 ((
uöt32_t
)0x00000040)

	)

6154 
	#RTC_ISR_RSF
 ((
uöt32_t
)0x00000020)

	)

6155 
	#RTC_ISR_INITS
 ((
uöt32_t
)0x00000010)

	)

6156 
	#RTC_ISR_SHPF
 ((
uöt32_t
)0x00000008)

	)

6157 
	#RTC_ISR_WUTWF
 ((
uöt32_t
)0x00000004)

	)

6158 
	#RTC_ISR_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

6159 
	#RTC_ISR_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

6162 
	#RTC_PRER_PREDIV_A
 ((
uöt32_t
)0x007F0000)

	)

6163 
	#RTC_PRER_PREDIV_S
 ((
uöt32_t
)0x00001FFF)

	)

6166 
	#RTC_WUTR_WUT
 ((
uöt32_t
)0x0000FFFF)

	)

6169 
	#RTC_CALIBR_DCS
 ((
uöt32_t
)0x00000080)

	)

6170 
	#RTC_CALIBR_DC
 ((
uöt32_t
)0x0000001F)

	)

6173 
	#RTC_ALRMAR_MSK4
 ((
uöt32_t
)0x80000000)

	)

6174 
	#RTC_ALRMAR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

6175 
	#RTC_ALRMAR_DT
 ((
uöt32_t
)0x30000000)

	)

6176 
	#RTC_ALRMAR_DT_0
 ((
uöt32_t
)0x10000000)

	)

6177 
	#RTC_ALRMAR_DT_1
 ((
uöt32_t
)0x20000000)

	)

6178 
	#RTC_ALRMAR_DU
 ((
uöt32_t
)0x0F000000)

	)

6179 
	#RTC_ALRMAR_DU_0
 ((
uöt32_t
)0x01000000)

	)

6180 
	#RTC_ALRMAR_DU_1
 ((
uöt32_t
)0x02000000)

	)

6181 
	#RTC_ALRMAR_DU_2
 ((
uöt32_t
)0x04000000)

	)

6182 
	#RTC_ALRMAR_DU_3
 ((
uöt32_t
)0x08000000)

	)

6183 
	#RTC_ALRMAR_MSK3
 ((
uöt32_t
)0x00800000)

	)

6184 
	#RTC_ALRMAR_PM
 ((
uöt32_t
)0x00400000)

	)

6185 
	#RTC_ALRMAR_HT
 ((
uöt32_t
)0x00300000)

	)

6186 
	#RTC_ALRMAR_HT_0
 ((
uöt32_t
)0x00100000)

	)

6187 
	#RTC_ALRMAR_HT_1
 ((
uöt32_t
)0x00200000)

	)

6188 
	#RTC_ALRMAR_HU
 ((
uöt32_t
)0x000F0000)

	)

6189 
	#RTC_ALRMAR_HU_0
 ((
uöt32_t
)0x00010000)

	)

6190 
	#RTC_ALRMAR_HU_1
 ((
uöt32_t
)0x00020000)

	)

6191 
	#RTC_ALRMAR_HU_2
 ((
uöt32_t
)0x00040000)

	)

6192 
	#RTC_ALRMAR_HU_3
 ((
uöt32_t
)0x00080000)

	)

6193 
	#RTC_ALRMAR_MSK2
 ((
uöt32_t
)0x00008000)

	)

6194 
	#RTC_ALRMAR_MNT
 ((
uöt32_t
)0x00007000)

	)

6195 
	#RTC_ALRMAR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

6196 
	#RTC_ALRMAR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

6197 
	#RTC_ALRMAR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

6198 
	#RTC_ALRMAR_MNU
 ((
uöt32_t
)0x00000F00)

	)

6199 
	#RTC_ALRMAR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

6200 
	#RTC_ALRMAR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

6201 
	#RTC_ALRMAR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

6202 
	#RTC_ALRMAR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

6203 
	#RTC_ALRMAR_MSK1
 ((
uöt32_t
)0x00000080)

	)

6204 
	#RTC_ALRMAR_ST
 ((
uöt32_t
)0x00000070)

	)

6205 
	#RTC_ALRMAR_ST_0
 ((
uöt32_t
)0x00000010)

	)

6206 
	#RTC_ALRMAR_ST_1
 ((
uöt32_t
)0x00000020)

	)

6207 
	#RTC_ALRMAR_ST_2
 ((
uöt32_t
)0x00000040)

	)

6208 
	#RTC_ALRMAR_SU
 ((
uöt32_t
)0x0000000F)

	)

6209 
	#RTC_ALRMAR_SU_0
 ((
uöt32_t
)0x00000001)

	)

6210 
	#RTC_ALRMAR_SU_1
 ((
uöt32_t
)0x00000002)

	)

6211 
	#RTC_ALRMAR_SU_2
 ((
uöt32_t
)0x00000004)

	)

6212 
	#RTC_ALRMAR_SU_3
 ((
uöt32_t
)0x00000008)

	)

6215 
	#RTC_ALRMBR_MSK4
 ((
uöt32_t
)0x80000000)

	)

6216 
	#RTC_ALRMBR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

6217 
	#RTC_ALRMBR_DT
 ((
uöt32_t
)0x30000000)

	)

6218 
	#RTC_ALRMBR_DT_0
 ((
uöt32_t
)0x10000000)

	)

6219 
	#RTC_ALRMBR_DT_1
 ((
uöt32_t
)0x20000000)

	)

6220 
	#RTC_ALRMBR_DU
 ((
uöt32_t
)0x0F000000)

	)

6221 
	#RTC_ALRMBR_DU_0
 ((
uöt32_t
)0x01000000)

	)

6222 
	#RTC_ALRMBR_DU_1
 ((
uöt32_t
)0x02000000)

	)

6223 
	#RTC_ALRMBR_DU_2
 ((
uöt32_t
)0x04000000)

	)

6224 
	#RTC_ALRMBR_DU_3
 ((
uöt32_t
)0x08000000)

	)

6225 
	#RTC_ALRMBR_MSK3
 ((
uöt32_t
)0x00800000)

	)

6226 
	#RTC_ALRMBR_PM
 ((
uöt32_t
)0x00400000)

	)

6227 
	#RTC_ALRMBR_HT
 ((
uöt32_t
)0x00300000)

	)

6228 
	#RTC_ALRMBR_HT_0
 ((
uöt32_t
)0x00100000)

	)

6229 
	#RTC_ALRMBR_HT_1
 ((
uöt32_t
)0x00200000)

	)

6230 
	#RTC_ALRMBR_HU
 ((
uöt32_t
)0x000F0000)

	)

6231 
	#RTC_ALRMBR_HU_0
 ((
uöt32_t
)0x00010000)

	)

6232 
	#RTC_ALRMBR_HU_1
 ((
uöt32_t
)0x00020000)

	)

6233 
	#RTC_ALRMBR_HU_2
 ((
uöt32_t
)0x00040000)

	)

6234 
	#RTC_ALRMBR_HU_3
 ((
uöt32_t
)0x00080000)

	)

6235 
	#RTC_ALRMBR_MSK2
 ((
uöt32_t
)0x00008000)

	)

6236 
	#RTC_ALRMBR_MNT
 ((
uöt32_t
)0x00007000)

	)

6237 
	#RTC_ALRMBR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

6238 
	#RTC_ALRMBR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

6239 
	#RTC_ALRMBR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

6240 
	#RTC_ALRMBR_MNU
 ((
uöt32_t
)0x00000F00)

	)

6241 
	#RTC_ALRMBR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

6242 
	#RTC_ALRMBR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

6243 
	#RTC_ALRMBR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

6244 
	#RTC_ALRMBR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

6245 
	#RTC_ALRMBR_MSK1
 ((
uöt32_t
)0x00000080)

	)

6246 
	#RTC_ALRMBR_ST
 ((
uöt32_t
)0x00000070)

	)

6247 
	#RTC_ALRMBR_ST_0
 ((
uöt32_t
)0x00000010)

	)

6248 
	#RTC_ALRMBR_ST_1
 ((
uöt32_t
)0x00000020)

	)

6249 
	#RTC_ALRMBR_ST_2
 ((
uöt32_t
)0x00000040)

	)

6250 
	#RTC_ALRMBR_SU
 ((
uöt32_t
)0x0000000F)

	)

6251 
	#RTC_ALRMBR_SU_0
 ((
uöt32_t
)0x00000001)

	)

6252 
	#RTC_ALRMBR_SU_1
 ((
uöt32_t
)0x00000002)

	)

6253 
	#RTC_ALRMBR_SU_2
 ((
uöt32_t
)0x00000004)

	)

6254 
	#RTC_ALRMBR_SU_3
 ((
uöt32_t
)0x00000008)

	)

6257 
	#RTC_WPR_KEY
 ((
uöt32_t
)0x000000FF)

	)

6260 
	#RTC_SSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

6263 
	#RTC_SHIFTR_SUBFS
 ((
uöt32_t
)0x00007FFF)

	)

6264 
	#RTC_SHIFTR_ADD1S
 ((
uöt32_t
)0x80000000)

	)

6267 
	#RTC_TSTR_PM
 ((
uöt32_t
)0x00400000)

	)

6268 
	#RTC_TSTR_HT
 ((
uöt32_t
)0x00300000)

	)

6269 
	#RTC_TSTR_HT_0
 ((
uöt32_t
)0x00100000)

	)

6270 
	#RTC_TSTR_HT_1
 ((
uöt32_t
)0x00200000)

	)

6271 
	#RTC_TSTR_HU
 ((
uöt32_t
)0x000F0000)

	)

6272 
	#RTC_TSTR_HU_0
 ((
uöt32_t
)0x00010000)

	)

6273 
	#RTC_TSTR_HU_1
 ((
uöt32_t
)0x00020000)

	)

6274 
	#RTC_TSTR_HU_2
 ((
uöt32_t
)0x00040000)

	)

6275 
	#RTC_TSTR_HU_3
 ((
uöt32_t
)0x00080000)

	)

6276 
	#RTC_TSTR_MNT
 ((
uöt32_t
)0x00007000)

	)

6277 
	#RTC_TSTR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

6278 
	#RTC_TSTR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

6279 
	#RTC_TSTR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

6280 
	#RTC_TSTR_MNU
 ((
uöt32_t
)0x00000F00)

	)

6281 
	#RTC_TSTR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

6282 
	#RTC_TSTR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

6283 
	#RTC_TSTR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

6284 
	#RTC_TSTR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

6285 
	#RTC_TSTR_ST
 ((
uöt32_t
)0x00000070)

	)

6286 
	#RTC_TSTR_ST_0
 ((
uöt32_t
)0x00000010)

	)

6287 
	#RTC_TSTR_ST_1
 ((
uöt32_t
)0x00000020)

	)

6288 
	#RTC_TSTR_ST_2
 ((
uöt32_t
)0x00000040)

	)

6289 
	#RTC_TSTR_SU
 ((
uöt32_t
)0x0000000F)

	)

6290 
	#RTC_TSTR_SU_0
 ((
uöt32_t
)0x00000001)

	)

6291 
	#RTC_TSTR_SU_1
 ((
uöt32_t
)0x00000002)

	)

6292 
	#RTC_TSTR_SU_2
 ((
uöt32_t
)0x00000004)

	)

6293 
	#RTC_TSTR_SU_3
 ((
uöt32_t
)0x00000008)

	)

6296 
	#RTC_TSDR_WDU
 ((
uöt32_t
)0x0000E000)

	)

6297 
	#RTC_TSDR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

6298 
	#RTC_TSDR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

6299 
	#RTC_TSDR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

6300 
	#RTC_TSDR_MT
 ((
uöt32_t
)0x00001000)

	)

6301 
	#RTC_TSDR_MU
 ((
uöt32_t
)0x00000F00)

	)

6302 
	#RTC_TSDR_MU_0
 ((
uöt32_t
)0x00000100)

	)

6303 
	#RTC_TSDR_MU_1
 ((
uöt32_t
)0x00000200)

	)

6304 
	#RTC_TSDR_MU_2
 ((
uöt32_t
)0x00000400)

	)

6305 
	#RTC_TSDR_MU_3
 ((
uöt32_t
)0x00000800)

	)

6306 
	#RTC_TSDR_DT
 ((
uöt32_t
)0x00000030)

	)

6307 
	#RTC_TSDR_DT_0
 ((
uöt32_t
)0x00000010)

	)

6308 
	#RTC_TSDR_DT_1
 ((
uöt32_t
)0x00000020)

	)

6309 
	#RTC_TSDR_DU
 ((
uöt32_t
)0x0000000F)

	)

6310 
	#RTC_TSDR_DU_0
 ((
uöt32_t
)0x00000001)

	)

6311 
	#RTC_TSDR_DU_1
 ((
uöt32_t
)0x00000002)

	)

6312 
	#RTC_TSDR_DU_2
 ((
uöt32_t
)0x00000004)

	)

6313 
	#RTC_TSDR_DU_3
 ((
uöt32_t
)0x00000008)

	)

6316 
	#RTC_TSSSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

6319 
	#RTC_CALR_CALP
 ((
uöt32_t
)0x00008000)

	)

6320 
	#RTC_CALR_CALW8
 ((
uöt32_t
)0x00004000)

	)

6321 
	#RTC_CALR_CALW16
 ((
uöt32_t
)0x00002000)

	)

6322 
	#RTC_CALR_CALM
 ((
uöt32_t
)0x000001FF)

	)

6323 
	#RTC_CALR_CALM_0
 ((
uöt32_t
)0x00000001)

	)

6324 
	#RTC_CALR_CALM_1
 ((
uöt32_t
)0x00000002)

	)

6325 
	#RTC_CALR_CALM_2
 ((
uöt32_t
)0x00000004)

	)

6326 
	#RTC_CALR_CALM_3
 ((
uöt32_t
)0x00000008)

	)

6327 
	#RTC_CALR_CALM_4
 ((
uöt32_t
)0x00000010)

	)

6328 
	#RTC_CALR_CALM_5
 ((
uöt32_t
)0x00000020)

	)

6329 
	#RTC_CALR_CALM_6
 ((
uöt32_t
)0x00000040)

	)

6330 
	#RTC_CALR_CALM_7
 ((
uöt32_t
)0x00000080)

	)

6331 
	#RTC_CALR_CALM_8
 ((
uöt32_t
)0x00000100)

	)

6334 
	#RTC_TAFCR_ALARMOUTTYPE
 ((
uöt32_t
)0x00040000)

	)

6335 
	#RTC_TAFCR_TSINSEL
 ((
uöt32_t
)0x00020000)

	)

6336 
	#RTC_TAFCR_TAMPINSEL
 ((
uöt32_t
)0x00010000)

	)

6337 
	#RTC_TAFCR_TAMPPUDIS
 ((
uöt32_t
)0x00008000)

	)

6338 
	#RTC_TAFCR_TAMPPRCH
 ((
uöt32_t
)0x00006000)

	)

6339 
	#RTC_TAFCR_TAMPPRCH_0
 ((
uöt32_t
)0x00002000)

	)

6340 
	#RTC_TAFCR_TAMPPRCH_1
 ((
uöt32_t
)0x00004000)

	)

6341 
	#RTC_TAFCR_TAMPFLT
 ((
uöt32_t
)0x00001800)

	)

6342 
	#RTC_TAFCR_TAMPFLT_0
 ((
uöt32_t
)0x00000800)

	)

6343 
	#RTC_TAFCR_TAMPFLT_1
 ((
uöt32_t
)0x00001000)

	)

6344 
	#RTC_TAFCR_TAMPFREQ
 ((
uöt32_t
)0x00000700)

	)

6345 
	#RTC_TAFCR_TAMPFREQ_0
 ((
uöt32_t
)0x00000100)

	)

6346 
	#RTC_TAFCR_TAMPFREQ_1
 ((
uöt32_t
)0x00000200)

	)

6347 
	#RTC_TAFCR_TAMPFREQ_2
 ((
uöt32_t
)0x00000400)

	)

6348 
	#RTC_TAFCR_TAMPTS
 ((
uöt32_t
)0x00000080)

	)

6349 
	#RTC_TAFCR_TAMPIE
 ((
uöt32_t
)0x00000004)

	)

6350 
	#RTC_TAFCR_TAMP1TRG
 ((
uöt32_t
)0x00000002)

	)

6351 
	#RTC_TAFCR_TAMP1E
 ((
uöt32_t
)0x00000001)

	)

6354 
	#RTC_ALRMASSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

6355 
	#RTC_ALRMASSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

6356 
	#RTC_ALRMASSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

6357 
	#RTC_ALRMASSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

6358 
	#RTC_ALRMASSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

6359 
	#RTC_ALRMASSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

6362 
	#RTC_ALRMBSSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

6363 
	#RTC_ALRMBSSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

6364 
	#RTC_ALRMBSSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

6365 
	#RTC_ALRMBSSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

6366 
	#RTC_ALRMBSSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

6367 
	#RTC_ALRMBSSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

6370 
	#RTC_BKP0R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6373 
	#RTC_BKP1R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6376 
	#RTC_BKP2R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6379 
	#RTC_BKP3R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6382 
	#RTC_BKP4R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6385 
	#RTC_BKP5R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6388 
	#RTC_BKP6R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6391 
	#RTC_BKP7R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6394 
	#RTC_BKP8R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6397 
	#RTC_BKP9R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6400 
	#RTC_BKP10R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6403 
	#RTC_BKP11R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6406 
	#RTC_BKP12R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6409 
	#RTC_BKP13R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6412 
	#RTC_BKP14R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6415 
	#RTC_BKP15R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6418 
	#RTC_BKP16R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6421 
	#RTC_BKP17R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6424 
	#RTC_BKP18R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6427 
	#RTC_BKP19R
 ((
uöt32_t
)0xFFFFFFFF)

	)

6435 
	#SDIO_POWER_PWRCTRL
 ((
uöt8_t
)0x03Ë

	)

6436 
	#SDIO_POWER_PWRCTRL_0
 ((
uöt8_t
)0x01Ë

	)

6437 
	#SDIO_POWER_PWRCTRL_1
 ((
uöt8_t
)0x02Ë

	)

6440 
	#SDIO_CLKCR_CLKDIV
 ((
uöt16_t
)0x00FFË

	)

6441 
	#SDIO_CLKCR_CLKEN
 ((
uöt16_t
)0x0100Ë

	)

6442 
	#SDIO_CLKCR_PWRSAV
 ((
uöt16_t
)0x0200Ë

	)

6443 
	#SDIO_CLKCR_BYPASS
 ((
uöt16_t
)0x0400Ë

	)

6445 
	#SDIO_CLKCR_WIDBUS
 ((
uöt16_t
)0x1800Ë

	)

6446 
	#SDIO_CLKCR_WIDBUS_0
 ((
uöt16_t
)0x0800Ë

	)

6447 
	#SDIO_CLKCR_WIDBUS_1
 ((
uöt16_t
)0x1000Ë

	)

6449 
	#SDIO_CLKCR_NEGEDGE
 ((
uöt16_t
)0x2000Ë

	)

6450 
	#SDIO_CLKCR_HWFC_EN
 ((
uöt16_t
)0x4000Ë

	)

6453 
	#SDIO_ARG_CMDARG
 ((
uöt32_t
)0xFFFFFFFFË

	)

6456 
	#SDIO_CMD_CMDINDEX
 ((
uöt16_t
)0x003FË

	)

6458 
	#SDIO_CMD_WAITRESP
 ((
uöt16_t
)0x00C0Ë

	)

6459 
	#SDIO_CMD_WAITRESP_0
 ((
uöt16_t
)0x0040Ë

	)

6460 
	#SDIO_CMD_WAITRESP_1
 ((
uöt16_t
)0x0080Ë

	)

6462 
	#SDIO_CMD_WAITINT
 ((
uöt16_t
)0x0100Ë

	)

6463 
	#SDIO_CMD_WAITPEND
 ((
uöt16_t
)0x0200Ë

	)

6464 
	#SDIO_CMD_CPSMEN
 ((
uöt16_t
)0x0400Ë

	)

6465 
	#SDIO_CMD_SDIOSUSPEND
 ((
uöt16_t
)0x0800Ë

	)

6466 
	#SDIO_CMD_ENCMDCOMPL
 ((
uöt16_t
)0x1000Ë

	)

6467 
	#SDIO_CMD_NIEN
 ((
uöt16_t
)0x2000Ë

	)

6468 
	#SDIO_CMD_CEATACMD
 ((
uöt16_t
)0x4000Ë

	)

6471 
	#SDIO_RESPCMD_RESPCMD
 ((
uöt8_t
)0x3FË

	)

6474 
	#SDIO_RESP0_CARDSTATUS0
 ((
uöt32_t
)0xFFFFFFFFË

	)

6477 
	#SDIO_RESP1_CARDSTATUS1
 ((
uöt32_t
)0xFFFFFFFFË

	)

6480 
	#SDIO_RESP2_CARDSTATUS2
 ((
uöt32_t
)0xFFFFFFFFË

	)

6483 
	#SDIO_RESP3_CARDSTATUS3
 ((
uöt32_t
)0xFFFFFFFFË

	)

6486 
	#SDIO_RESP4_CARDSTATUS4
 ((
uöt32_t
)0xFFFFFFFFË

	)

6489 
	#SDIO_DTIMER_DATATIME
 ((
uöt32_t
)0xFFFFFFFFË

	)

6492 
	#SDIO_DLEN_DATALENGTH
 ((
uöt32_t
)0x01FFFFFFË

	)

6495 
	#SDIO_DCTRL_DTEN
 ((
uöt16_t
)0x0001Ë

	)

6496 
	#SDIO_DCTRL_DTDIR
 ((
uöt16_t
)0x0002Ë

	)

6497 
	#SDIO_DCTRL_DTMODE
 ((
uöt16_t
)0x0004Ë

	)

6498 
	#SDIO_DCTRL_DMAEN
 ((
uöt16_t
)0x0008Ë

	)

6500 
	#SDIO_DCTRL_DBLOCKSIZE
 ((
uöt16_t
)0x00F0Ë

	)

6501 
	#SDIO_DCTRL_DBLOCKSIZE_0
 ((
uöt16_t
)0x0010Ë

	)

6502 
	#SDIO_DCTRL_DBLOCKSIZE_1
 ((
uöt16_t
)0x0020Ë

	)

6503 
	#SDIO_DCTRL_DBLOCKSIZE_2
 ((
uöt16_t
)0x0040Ë

	)

6504 
	#SDIO_DCTRL_DBLOCKSIZE_3
 ((
uöt16_t
)0x0080Ë

	)

6506 
	#SDIO_DCTRL_RWSTART
 ((
uöt16_t
)0x0100Ë

	)

6507 
	#SDIO_DCTRL_RWSTOP
 ((
uöt16_t
)0x0200Ë

	)

6508 
	#SDIO_DCTRL_RWMOD
 ((
uöt16_t
)0x0400Ë

	)

6509 
	#SDIO_DCTRL_SDIOEN
 ((
uöt16_t
)0x0800Ë

	)

6512 
	#SDIO_DCOUNT_DATACOUNT
 ((
uöt32_t
)0x01FFFFFFË

	)

6515 
	#SDIO_STA_CCRCFAIL
 ((
uöt32_t
)0x00000001Ë

	)

6516 
	#SDIO_STA_DCRCFAIL
 ((
uöt32_t
)0x00000002Ë

	)

6517 
	#SDIO_STA_CTIMEOUT
 ((
uöt32_t
)0x00000004Ë

	)

6518 
	#SDIO_STA_DTIMEOUT
 ((
uöt32_t
)0x00000008Ë

	)

6519 
	#SDIO_STA_TXUNDERR
 ((
uöt32_t
)0x00000010Ë

	)

6520 
	#SDIO_STA_RXOVERR
 ((
uöt32_t
)0x00000020Ë

	)

6521 
	#SDIO_STA_CMDREND
 ((
uöt32_t
)0x00000040Ë

	)

6522 
	#SDIO_STA_CMDSENT
 ((
uöt32_t
)0x00000080Ë

	)

6523 
	#SDIO_STA_DATAEND
 ((
uöt32_t
)0x00000100Ë

	)

6524 
	#SDIO_STA_STBITERR
 ((
uöt32_t
)0x00000200Ë

	)

6525 
	#SDIO_STA_DBCKEND
 ((
uöt32_t
)0x00000400Ë

	)

6526 
	#SDIO_STA_CMDACT
 ((
uöt32_t
)0x00000800Ë

	)

6527 
	#SDIO_STA_TXACT
 ((
uöt32_t
)0x00001000Ë

	)

6528 
	#SDIO_STA_RXACT
 ((
uöt32_t
)0x00002000Ë

	)

6529 
	#SDIO_STA_TXFIFOHE
 ((
uöt32_t
)0x00004000Ë

	)

6530 
	#SDIO_STA_RXFIFOHF
 ((
uöt32_t
)0x00008000Ë

	)

6531 
	#SDIO_STA_TXFIFOF
 ((
uöt32_t
)0x00010000Ë

	)

6532 
	#SDIO_STA_RXFIFOF
 ((
uöt32_t
)0x00020000Ë

	)

6533 
	#SDIO_STA_TXFIFOE
 ((
uöt32_t
)0x00040000Ë

	)

6534 
	#SDIO_STA_RXFIFOE
 ((
uöt32_t
)0x00080000Ë

	)

6535 
	#SDIO_STA_TXDAVL
 ((
uöt32_t
)0x00100000Ë

	)

6536 
	#SDIO_STA_RXDAVL
 ((
uöt32_t
)0x00200000Ë

	)

6537 
	#SDIO_STA_SDIOIT
 ((
uöt32_t
)0x00400000Ë

	)

6538 
	#SDIO_STA_CEATAEND
 ((
uöt32_t
)0x00800000Ë

	)

6541 
	#SDIO_ICR_CCRCFAILC
 ((
uöt32_t
)0x00000001Ë

	)

6542 
	#SDIO_ICR_DCRCFAILC
 ((
uöt32_t
)0x00000002Ë

	)

6543 
	#SDIO_ICR_CTIMEOUTC
 ((
uöt32_t
)0x00000004Ë

	)

6544 
	#SDIO_ICR_DTIMEOUTC
 ((
uöt32_t
)0x00000008Ë

	)

6545 
	#SDIO_ICR_TXUNDERRC
 ((
uöt32_t
)0x00000010Ë

	)

6546 
	#SDIO_ICR_RXOVERRC
 ((
uöt32_t
)0x00000020Ë

	)

6547 
	#SDIO_ICR_CMDRENDC
 ((
uöt32_t
)0x00000040Ë

	)

6548 
	#SDIO_ICR_CMDSENTC
 ((
uöt32_t
)0x00000080Ë

	)

6549 
	#SDIO_ICR_DATAENDC
 ((
uöt32_t
)0x00000100Ë

	)

6550 
	#SDIO_ICR_STBITERRC
 ((
uöt32_t
)0x00000200Ë

	)

6551 
	#SDIO_ICR_DBCKENDC
 ((
uöt32_t
)0x00000400Ë

	)

6552 
	#SDIO_ICR_SDIOITC
 ((
uöt32_t
)0x00400000Ë

	)

6553 
	#SDIO_ICR_CEATAENDC
 ((
uöt32_t
)0x00800000Ë

	)

6556 
	#SDIO_MASK_CCRCFAILIE
 ((
uöt32_t
)0x00000001Ë

	)

6557 
	#SDIO_MASK_DCRCFAILIE
 ((
uöt32_t
)0x00000002Ë

	)

6558 
	#SDIO_MASK_CTIMEOUTIE
 ((
uöt32_t
)0x00000004Ë

	)

6559 
	#SDIO_MASK_DTIMEOUTIE
 ((
uöt32_t
)0x00000008Ë

	)

6560 
	#SDIO_MASK_TXUNDERRIE
 ((
uöt32_t
)0x00000010Ë

	)

6561 
	#SDIO_MASK_RXOVERRIE
 ((
uöt32_t
)0x00000020Ë

	)

6562 
	#SDIO_MASK_CMDRENDIE
 ((
uöt32_t
)0x00000040Ë

	)

6563 
	#SDIO_MASK_CMDSENTIE
 ((
uöt32_t
)0x00000080Ë

	)

6564 
	#SDIO_MASK_DATAENDIE
 ((
uöt32_t
)0x00000100Ë

	)

6565 
	#SDIO_MASK_STBITERRIE
 ((
uöt32_t
)0x00000200Ë

	)

6566 
	#SDIO_MASK_DBCKENDIE
 ((
uöt32_t
)0x00000400Ë

	)

6567 
	#SDIO_MASK_CMDACTIE
 ((
uöt32_t
)0x00000800Ë

	)

6568 
	#SDIO_MASK_TXACTIE
 ((
uöt32_t
)0x00001000Ë

	)

6569 
	#SDIO_MASK_RXACTIE
 ((
uöt32_t
)0x00002000Ë

	)

6570 
	#SDIO_MASK_TXFIFOHEIE
 ((
uöt32_t
)0x00004000Ë

	)

6571 
	#SDIO_MASK_RXFIFOHFIE
 ((
uöt32_t
)0x00008000Ë

	)

6572 
	#SDIO_MASK_TXFIFOFIE
 ((
uöt32_t
)0x00010000Ë

	)

6573 
	#SDIO_MASK_RXFIFOFIE
 ((
uöt32_t
)0x00020000Ë

	)

6574 
	#SDIO_MASK_TXFIFOEIE
 ((
uöt32_t
)0x00040000Ë

	)

6575 
	#SDIO_MASK_RXFIFOEIE
 ((
uöt32_t
)0x00080000Ë

	)

6576 
	#SDIO_MASK_TXDAVLIE
 ((
uöt32_t
)0x00100000Ë

	)

6577 
	#SDIO_MASK_RXDAVLIE
 ((
uöt32_t
)0x00200000Ë

	)

6578 
	#SDIO_MASK_SDIOITIE
 ((
uöt32_t
)0x00400000Ë

	)

6579 
	#SDIO_MASK_CEATAENDIE
 ((
uöt32_t
)0x00800000Ë

	)

6582 
	#SDIO_FIFOCNT_FIFOCOUNT
 ((
uöt32_t
)0x00FFFFFFË

	)

6585 
	#SDIO_FIFO_FIFODATA
 ((
uöt32_t
)0xFFFFFFFFË

	)

6593 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

6594 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

6595 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

6597 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

6598 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

6599 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

6600 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

6602 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

6603 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

6604 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

6605 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

6606 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

6607 
	#SPI_CR1_DFF
 ((
uöt16_t
)0x0800Ë

	)

6608 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

6609 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

6610 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

6611 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

6614 
	#SPI_CR2_RXDMAEN
 ((
uöt8_t
)0x01Ë

	)

6615 
	#SPI_CR2_TXDMAEN
 ((
uöt8_t
)0x02Ë

	)

6616 
	#SPI_CR2_SSOE
 ((
uöt8_t
)0x04Ë

	)

6617 
	#SPI_CR2_ERRIE
 ((
uöt8_t
)0x20Ë

	)

6618 
	#SPI_CR2_RXNEIE
 ((
uöt8_t
)0x40Ë

	)

6619 
	#SPI_CR2_TXEIE
 ((
uöt8_t
)0x80Ë

	)

6622 
	#SPI_SR_RXNE
 ((
uöt8_t
)0x01Ë

	)

6623 
	#SPI_SR_TXE
 ((
uöt8_t
)0x02Ë

	)

6624 
	#SPI_SR_CHSIDE
 ((
uöt8_t
)0x04Ë

	)

6625 
	#SPI_SR_UDR
 ((
uöt8_t
)0x08Ë

	)

6626 
	#SPI_SR_CRCERR
 ((
uöt8_t
)0x10Ë

	)

6627 
	#SPI_SR_MODF
 ((
uöt8_t
)0x20Ë

	)

6628 
	#SPI_SR_OVR
 ((
uöt8_t
)0x40Ë

	)

6629 
	#SPI_SR_BSY
 ((
uöt8_t
)0x80Ë

	)

6632 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

6635 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

6638 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

6641 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

6644 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

6646 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

6647 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

6648 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

6650 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

6652 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

6653 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

6654 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

6656 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

6658 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

6659 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

6660 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

6662 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

6663 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

6666 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

6667 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

6668 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

6676 
	#SYSCFG_MEMRMP_MEM_MODE
 ((
uöt32_t
)0x00000003Ë

	)

6677 
	#SYSCFG_MEMRMP_MEM_MODE_0
 ((
uöt32_t
)0x00000001)

	)

6678 
	#SYSCFG_MEMRMP_MEM_MODE_1
 ((
uöt32_t
)0x00000002)

	)

6681 
	#SYSCFG_PMC_MII_RMII_SEL
 ((
uöt32_t
)0x00800000Ë

	)

6683 
	#SYSCFG_PMC_MII_RMII
 
SYSCFG_PMC_MII_RMII_SEL


	)

6686 
	#SYSCFG_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

6687 
	#SYSCFG_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

6688 
	#SYSCFG_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

6689 
	#SYSCFG_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

6693 
	#SYSCFG_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

6694 
	#SYSCFG_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

6695 
	#SYSCFG_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

6696 
	#SYSCFG_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

6697 
	#SYSCFG_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

6698 
	#SYSCFG_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

6699 
	#SYSCFG_EXTICR1_EXTI0_PG
 ((
uöt16_t
)0x0006Ë

	)

6700 
	#SYSCFG_EXTICR1_EXTI0_PH
 ((
uöt16_t
)0x0007Ë

	)

6701 
	#SYSCFG_EXTICR1_EXTI0_PI
 ((
uöt16_t
)0x0008Ë

	)

6705 
	#SYSCFG_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

6706 
	#SYSCFG_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

6707 
	#SYSCFG_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

6708 
	#SYSCFG_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

6709 
	#SYSCFG_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

6710 
	#SYSCFG_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

6711 
	#SYSCFG_EXTICR1_EXTI1_PG
 ((
uöt16_t
)0x0060Ë

	)

6712 
	#SYSCFG_EXTICR1_EXTI1_PH
 ((
uöt16_t
)0x0070Ë

	)

6713 
	#SYSCFG_EXTICR1_EXTI1_PI
 ((
uöt16_t
)0x0080Ë

	)

6717 
	#SYSCFG_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

6718 
	#SYSCFG_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

6719 
	#SYSCFG_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

6720 
	#SYSCFG_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

6721 
	#SYSCFG_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

6722 
	#SYSCFG_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

6723 
	#SYSCFG_EXTICR1_EXTI2_PG
 ((
uöt16_t
)0x0600Ë

	)

6724 
	#SYSCFG_EXTICR1_EXTI2_PH
 ((
uöt16_t
)0x0700Ë

	)

6725 
	#SYSCFG_EXTICR1_EXTI2_PI
 ((
uöt16_t
)0x0800Ë

	)

6729 
	#SYSCFG_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

6730 
	#SYSCFG_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

6731 
	#SYSCFG_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

6732 
	#SYSCFG_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

6733 
	#SYSCFG_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

6734 
	#SYSCFG_EXTICR1_EXTI3_PF
 ((
uöt16_t
)0x5000Ë

	)

6735 
	#SYSCFG_EXTICR1_EXTI3_PG
 ((
uöt16_t
)0x6000Ë

	)

6736 
	#SYSCFG_EXTICR1_EXTI3_PH
 ((
uöt16_t
)0x7000Ë

	)

6737 
	#SYSCFG_EXTICR1_EXTI3_PI
 ((
uöt16_t
)0x8000Ë

	)

6740 
	#SYSCFG_EXTICR2_EXTI4
 ((
uöt16_t
)0x000FË

	)

6741 
	#SYSCFG_EXTICR2_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

6742 
	#SYSCFG_EXTICR2_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

6743 
	#SYSCFG_EXTICR2_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

6747 
	#SYSCFG_EXTICR2_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

6748 
	#SYSCFG_EXTICR2_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

6749 
	#SYSCFG_EXTICR2_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

6750 
	#SYSCFG_EXTICR2_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

6751 
	#SYSCFG_EXTICR2_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

6752 
	#SYSCFG_EXTICR2_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

6753 
	#SYSCFG_EXTICR2_EXTI4_PG
 ((
uöt16_t
)0x0006Ë

	)

6754 
	#SYSCFG_EXTICR2_EXTI4_PH
 ((
uöt16_t
)0x0007Ë

	)

6755 
	#SYSCFG_EXTICR2_EXTI4_PI
 ((
uöt16_t
)0x0008Ë

	)

6759 
	#SYSCFG_EXTICR2_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

6760 
	#SYSCFG_EXTICR2_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

6761 
	#SYSCFG_EXTICR2_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

6762 
	#SYSCFG_EXTICR2_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

6763 
	#SYSCFG_EXTICR2_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

6764 
	#SYSCFG_EXTICR2_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

6765 
	#SYSCFG_EXTICR2_EXTI5_PG
 ((
uöt16_t
)0x0060Ë

	)

6766 
	#SYSCFG_EXTICR2_EXTI5_PH
 ((
uöt16_t
)0x0070Ë

	)

6767 
	#SYSCFG_EXTICR2_EXTI5_PI
 ((
uöt16_t
)0x0080Ë

	)

6771 
	#SYSCFG_EXTICR2_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

6772 
	#SYSCFG_EXTICR2_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

6773 
	#SYSCFG_EXTICR2_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

6774 
	#SYSCFG_EXTICR2_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

6775 
	#SYSCFG_EXTICR2_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

6776 
	#SYSCFG_EXTICR2_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

6777 
	#SYSCFG_EXTICR2_EXTI6_PG
 ((
uöt16_t
)0x0600Ë

	)

6778 
	#SYSCFG_EXTICR2_EXTI6_PH
 ((
uöt16_t
)0x0700Ë

	)

6779 
	#SYSCFG_EXTICR2_EXTI6_PI
 ((
uöt16_t
)0x0800Ë

	)

6783 
	#SYSCFG_EXTICR2_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

6784 
	#SYSCFG_EXTICR2_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

6785 
	#SYSCFG_EXTICR2_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

6786 
	#SYSCFG_EXTICR2_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

6787 
	#SYSCFG_EXTICR2_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

6788 
	#SYSCFG_EXTICR2_EXTI7_PF
 ((
uöt16_t
)0x5000Ë

	)

6789 
	#SYSCFG_EXTICR2_EXTI7_PG
 ((
uöt16_t
)0x6000Ë

	)

6790 
	#SYSCFG_EXTICR2_EXTI7_PH
 ((
uöt16_t
)0x7000Ë

	)

6791 
	#SYSCFG_EXTICR2_EXTI7_PI
 ((
uöt16_t
)0x8000Ë

	)

6794 
	#SYSCFG_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

6795 
	#SYSCFG_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

6796 
	#SYSCFG_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

6797 
	#SYSCFG_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

6802 
	#SYSCFG_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

6803 
	#SYSCFG_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

6804 
	#SYSCFG_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

6805 
	#SYSCFG_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

6806 
	#SYSCFG_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

6807 
	#SYSCFG_EXTICR3_EXTI8_PF
 ((
uöt16_t
)0x0005Ë

	)

6808 
	#SYSCFG_EXTICR3_EXTI8_PG
 ((
uöt16_t
)0x0006Ë

	)

6809 
	#SYSCFG_EXTICR3_EXTI8_PH
 ((
uöt16_t
)0x0007Ë

	)

6810 
	#SYSCFG_EXTICR3_EXTI8_PI
 ((
uöt16_t
)0x0008Ë

	)

6814 
	#SYSCFG_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

6815 
	#SYSCFG_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

6816 
	#SYSCFG_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

6817 
	#SYSCFG_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

6818 
	#SYSCFG_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

6819 
	#SYSCFG_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

6820 
	#SYSCFG_EXTICR3_EXTI9_PG
 ((
uöt16_t
)0x0060Ë

	)

6821 
	#SYSCFG_EXTICR3_EXTI9_PH
 ((
uöt16_t
)0x0070Ë

	)

6822 
	#SYSCFG_EXTICR3_EXTI9_PI
 ((
uöt16_t
)0x0080Ë

	)

6826 
	#SYSCFG_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

6827 
	#SYSCFG_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

6828 
	#SYSCFG_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

6829 
	#SYSCFG_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

6830 
	#SYSCFG_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

6831 
	#SYSCFG_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

6832 
	#SYSCFG_EXTICR3_EXTI10_PG
 ((
uöt16_t
)0x0600Ë

	)

6833 
	#SYSCFG_EXTICR3_EXTI10_PH
 ((
uöt16_t
)0x0700Ë

	)

6834 
	#SYSCFG_EXTICR3_EXTI10_PI
 ((
uöt16_t
)0x0800Ë

	)

6838 
	#SYSCFG_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

6839 
	#SYSCFG_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

6840 
	#SYSCFG_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

6841 
	#SYSCFG_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

6842 
	#SYSCFG_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

6843 
	#SYSCFG_EXTICR3_EXTI11_PF
 ((
uöt16_t
)0x5000Ë

	)

6844 
	#SYSCFG_EXTICR3_EXTI11_PG
 ((
uöt16_t
)0x6000Ë

	)

6845 
	#SYSCFG_EXTICR3_EXTI11_PH
 ((
uöt16_t
)0x7000Ë

	)

6846 
	#SYSCFG_EXTICR3_EXTI11_PI
 ((
uöt16_t
)0x8000Ë

	)

6849 
	#SYSCFG_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

6850 
	#SYSCFG_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

6851 
	#SYSCFG_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

6852 
	#SYSCFG_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

6856 
	#SYSCFG_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

6857 
	#SYSCFG_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

6858 
	#SYSCFG_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

6859 
	#SYSCFG_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

6860 
	#SYSCFG_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

6861 
	#SYSCFG_EXTICR4_EXTI12_PF
 ((
uöt16_t
)0x0005Ë

	)

6862 
	#SYSCFG_EXTICR4_EXTI12_PG
 ((
uöt16_t
)0x0006Ë

	)

6863 
	#SYSCFG_EXTICR3_EXTI12_PH
 ((
uöt16_t
)0x0007Ë

	)

6867 
	#SYSCFG_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

6868 
	#SYSCFG_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

6869 
	#SYSCFG_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

6870 
	#SYSCFG_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

6871 
	#SYSCFG_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

6872 
	#SYSCFG_EXTICR4_EXTI13_PF
 ((
uöt16_t
)0x0050Ë

	)

6873 
	#SYSCFG_EXTICR4_EXTI13_PG
 ((
uöt16_t
)0x0060Ë

	)

6874 
	#SYSCFG_EXTICR3_EXTI13_PH
 ((
uöt16_t
)0x0070Ë

	)

6878 
	#SYSCFG_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

6879 
	#SYSCFG_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

6880 
	#SYSCFG_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

6881 
	#SYSCFG_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

6882 
	#SYSCFG_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

6883 
	#SYSCFG_EXTICR4_EXTI14_PF
 ((
uöt16_t
)0x0500Ë

	)

6884 
	#SYSCFG_EXTICR4_EXTI14_PG
 ((
uöt16_t
)0x0600Ë

	)

6885 
	#SYSCFG_EXTICR3_EXTI14_PH
 ((
uöt16_t
)0x0700Ë

	)

6889 
	#SYSCFG_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

6890 
	#SYSCFG_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

6891 
	#SYSCFG_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

6892 
	#SYSCFG_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

6893 
	#SYSCFG_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

6894 
	#SYSCFG_EXTICR4_EXTI15_PF
 ((
uöt16_t
)0x5000Ë

	)

6895 
	#SYSCFG_EXTICR4_EXTI15_PG
 ((
uöt16_t
)0x6000Ë

	)

6896 
	#SYSCFG_EXTICR3_EXTI15_PH
 ((
uöt16_t
)0x7000Ë

	)

6899 
	#SYSCFG_CMPCR_CMP_PD
 ((
uöt32_t
)0x00000001Ë

	)

6900 
	#SYSCFG_CMPCR_READY
 ((
uöt32_t
)0x00000100Ë

	)

6908 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

6909 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

6910 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

6911 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

6912 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

6914 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

6915 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

6916 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

6918 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

6920 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

6921 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

6922 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

6925 
	#TIM_CR2_CCPC
 ((
uöt16_t
)0x0001Ë

	)

6926 
	#TIM_CR2_CCUS
 ((
uöt16_t
)0x0004Ë

	)

6927 
	#TIM_CR2_CCDS
 ((
uöt16_t
)0x0008Ë

	)

6929 
	#TIM_CR2_MMS
 ((
uöt16_t
)0x0070Ë

	)

6930 
	#TIM_CR2_MMS_0
 ((
uöt16_t
)0x0010Ë

	)

6931 
	#TIM_CR2_MMS_1
 ((
uöt16_t
)0x0020Ë

	)

6932 
	#TIM_CR2_MMS_2
 ((
uöt16_t
)0x0040Ë

	)

6934 
	#TIM_CR2_TI1S
 ((
uöt16_t
)0x0080Ë

	)

6935 
	#TIM_CR2_OIS1
 ((
uöt16_t
)0x0100Ë

	)

6936 
	#TIM_CR2_OIS1N
 ((
uöt16_t
)0x0200Ë

	)

6937 
	#TIM_CR2_OIS2
 ((
uöt16_t
)0x0400Ë

	)

6938 
	#TIM_CR2_OIS2N
 ((
uöt16_t
)0x0800Ë

	)

6939 
	#TIM_CR2_OIS3
 ((
uöt16_t
)0x1000Ë

	)

6940 
	#TIM_CR2_OIS3N
 ((
uöt16_t
)0x2000Ë

	)

6941 
	#TIM_CR2_OIS4
 ((
uöt16_t
)0x4000Ë

	)

6944 
	#TIM_SMCR_SMS
 ((
uöt16_t
)0x0007Ë

	)

6945 
	#TIM_SMCR_SMS_0
 ((
uöt16_t
)0x0001Ë

	)

6946 
	#TIM_SMCR_SMS_1
 ((
uöt16_t
)0x0002Ë

	)

6947 
	#TIM_SMCR_SMS_2
 ((
uöt16_t
)0x0004Ë

	)

6949 
	#TIM_SMCR_TS
 ((
uöt16_t
)0x0070Ë

	)

6950 
	#TIM_SMCR_TS_0
 ((
uöt16_t
)0x0010Ë

	)

6951 
	#TIM_SMCR_TS_1
 ((
uöt16_t
)0x0020Ë

	)

6952 
	#TIM_SMCR_TS_2
 ((
uöt16_t
)0x0040Ë

	)

6954 
	#TIM_SMCR_MSM
 ((
uöt16_t
)0x0080Ë

	)

6956 
	#TIM_SMCR_ETF
 ((
uöt16_t
)0x0F00Ë

	)

6957 
	#TIM_SMCR_ETF_0
 ((
uöt16_t
)0x0100Ë

	)

6958 
	#TIM_SMCR_ETF_1
 ((
uöt16_t
)0x0200Ë

	)

6959 
	#TIM_SMCR_ETF_2
 ((
uöt16_t
)0x0400Ë

	)

6960 
	#TIM_SMCR_ETF_3
 ((
uöt16_t
)0x0800Ë

	)

6962 
	#TIM_SMCR_ETPS
 ((
uöt16_t
)0x3000Ë

	)

6963 
	#TIM_SMCR_ETPS_0
 ((
uöt16_t
)0x1000Ë

	)

6964 
	#TIM_SMCR_ETPS_1
 ((
uöt16_t
)0x2000Ë

	)

6966 
	#TIM_SMCR_ECE
 ((
uöt16_t
)0x4000Ë

	)

6967 
	#TIM_SMCR_ETP
 ((
uöt16_t
)0x8000Ë

	)

6970 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

6971 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

6972 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

6973 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

6974 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

6975 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

6976 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

6977 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

6978 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

6979 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

6980 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

6981 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

6982 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

6983 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

6984 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

6987 
	#TIM_SR_UIF
 ((
uöt16_t
)0x0001Ë

	)

6988 
	#TIM_SR_CC1IF
 ((
uöt16_t
)0x0002Ë

	)

6989 
	#TIM_SR_CC2IF
 ((
uöt16_t
)0x0004Ë

	)

6990 
	#TIM_SR_CC3IF
 ((
uöt16_t
)0x0008Ë

	)

6991 
	#TIM_SR_CC4IF
 ((
uöt16_t
)0x0010Ë

	)

6992 
	#TIM_SR_COMIF
 ((
uöt16_t
)0x0020Ë

	)

6993 
	#TIM_SR_TIF
 ((
uöt16_t
)0x0040Ë

	)

6994 
	#TIM_SR_BIF
 ((
uöt16_t
)0x0080Ë

	)

6995 
	#TIM_SR_CC1OF
 ((
uöt16_t
)0x0200Ë

	)

6996 
	#TIM_SR_CC2OF
 ((
uöt16_t
)0x0400Ë

	)

6997 
	#TIM_SR_CC3OF
 ((
uöt16_t
)0x0800Ë

	)

6998 
	#TIM_SR_CC4OF
 ((
uöt16_t
)0x1000Ë

	)

7001 
	#TIM_EGR_UG
 ((
uöt8_t
)0x01Ë

	)

7002 
	#TIM_EGR_CC1G
 ((
uöt8_t
)0x02Ë

	)

7003 
	#TIM_EGR_CC2G
 ((
uöt8_t
)0x04Ë

	)

7004 
	#TIM_EGR_CC3G
 ((
uöt8_t
)0x08Ë

	)

7005 
	#TIM_EGR_CC4G
 ((
uöt8_t
)0x10Ë

	)

7006 
	#TIM_EGR_COMG
 ((
uöt8_t
)0x20Ë

	)

7007 
	#TIM_EGR_TG
 ((
uöt8_t
)0x40Ë

	)

7008 
	#TIM_EGR_BG
 ((
uöt8_t
)0x80Ë

	)

7011 
	#TIM_CCMR1_CC1S
 ((
uöt16_t
)0x0003Ë

	)

7012 
	#TIM_CCMR1_CC1S_0
 ((
uöt16_t
)0x0001Ë

	)

7013 
	#TIM_CCMR1_CC1S_1
 ((
uöt16_t
)0x0002Ë

	)

7015 
	#TIM_CCMR1_OC1FE
 ((
uöt16_t
)0x0004Ë

	)

7016 
	#TIM_CCMR1_OC1PE
 ((
uöt16_t
)0x0008Ë

	)

7018 
	#TIM_CCMR1_OC1M
 ((
uöt16_t
)0x0070Ë

	)

7019 
	#TIM_CCMR1_OC1M_0
 ((
uöt16_t
)0x0010Ë

	)

7020 
	#TIM_CCMR1_OC1M_1
 ((
uöt16_t
)0x0020Ë

	)

7021 
	#TIM_CCMR1_OC1M_2
 ((
uöt16_t
)0x0040Ë

	)

7023 
	#TIM_CCMR1_OC1CE
 ((
uöt16_t
)0x0080Ë

	)

7025 
	#TIM_CCMR1_CC2S
 ((
uöt16_t
)0x0300Ë

	)

7026 
	#TIM_CCMR1_CC2S_0
 ((
uöt16_t
)0x0100Ë

	)

7027 
	#TIM_CCMR1_CC2S_1
 ((
uöt16_t
)0x0200Ë

	)

7029 
	#TIM_CCMR1_OC2FE
 ((
uöt16_t
)0x0400Ë

	)

7030 
	#TIM_CCMR1_OC2PE
 ((
uöt16_t
)0x0800Ë

	)

7032 
	#TIM_CCMR1_OC2M
 ((
uöt16_t
)0x7000Ë

	)

7033 
	#TIM_CCMR1_OC2M_0
 ((
uöt16_t
)0x1000Ë

	)

7034 
	#TIM_CCMR1_OC2M_1
 ((
uöt16_t
)0x2000Ë

	)

7035 
	#TIM_CCMR1_OC2M_2
 ((
uöt16_t
)0x4000Ë

	)

7037 
	#TIM_CCMR1_OC2CE
 ((
uöt16_t
)0x8000Ë

	)

7041 
	#TIM_CCMR1_IC1PSC
 ((
uöt16_t
)0x000CË

	)

7042 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt16_t
)0x0004Ë

	)

7043 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt16_t
)0x0008Ë

	)

7045 
	#TIM_CCMR1_IC1F
 ((
uöt16_t
)0x00F0Ë

	)

7046 
	#TIM_CCMR1_IC1F_0
 ((
uöt16_t
)0x0010Ë

	)

7047 
	#TIM_CCMR1_IC1F_1
 ((
uöt16_t
)0x0020Ë

	)

7048 
	#TIM_CCMR1_IC1F_2
 ((
uöt16_t
)0x0040Ë

	)

7049 
	#TIM_CCMR1_IC1F_3
 ((
uöt16_t
)0x0080Ë

	)

7051 
	#TIM_CCMR1_IC2PSC
 ((
uöt16_t
)0x0C00Ë

	)

7052 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt16_t
)0x0400Ë

	)

7053 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt16_t
)0x0800Ë

	)

7055 
	#TIM_CCMR1_IC2F
 ((
uöt16_t
)0xF000Ë

	)

7056 
	#TIM_CCMR1_IC2F_0
 ((
uöt16_t
)0x1000Ë

	)

7057 
	#TIM_CCMR1_IC2F_1
 ((
uöt16_t
)0x2000Ë

	)

7058 
	#TIM_CCMR1_IC2F_2
 ((
uöt16_t
)0x4000Ë

	)

7059 
	#TIM_CCMR1_IC2F_3
 ((
uöt16_t
)0x8000Ë

	)

7062 
	#TIM_CCMR2_CC3S
 ((
uöt16_t
)0x0003Ë

	)

7063 
	#TIM_CCMR2_CC3S_0
 ((
uöt16_t
)0x0001Ë

	)

7064 
	#TIM_CCMR2_CC3S_1
 ((
uöt16_t
)0x0002Ë

	)

7066 
	#TIM_CCMR2_OC3FE
 ((
uöt16_t
)0x0004Ë

	)

7067 
	#TIM_CCMR2_OC3PE
 ((
uöt16_t
)0x0008Ë

	)

7069 
	#TIM_CCMR2_OC3M
 ((
uöt16_t
)0x0070Ë

	)

7070 
	#TIM_CCMR2_OC3M_0
 ((
uöt16_t
)0x0010Ë

	)

7071 
	#TIM_CCMR2_OC3M_1
 ((
uöt16_t
)0x0020Ë

	)

7072 
	#TIM_CCMR2_OC3M_2
 ((
uöt16_t
)0x0040Ë

	)

7074 
	#TIM_CCMR2_OC3CE
 ((
uöt16_t
)0x0080Ë

	)

7076 
	#TIM_CCMR2_CC4S
 ((
uöt16_t
)0x0300Ë

	)

7077 
	#TIM_CCMR2_CC4S_0
 ((
uöt16_t
)0x0100Ë

	)

7078 
	#TIM_CCMR2_CC4S_1
 ((
uöt16_t
)0x0200Ë

	)

7080 
	#TIM_CCMR2_OC4FE
 ((
uöt16_t
)0x0400Ë

	)

7081 
	#TIM_CCMR2_OC4PE
 ((
uöt16_t
)0x0800Ë

	)

7083 
	#TIM_CCMR2_OC4M
 ((
uöt16_t
)0x7000Ë

	)

7084 
	#TIM_CCMR2_OC4M_0
 ((
uöt16_t
)0x1000Ë

	)

7085 
	#TIM_CCMR2_OC4M_1
 ((
uöt16_t
)0x2000Ë

	)

7086 
	#TIM_CCMR2_OC4M_2
 ((
uöt16_t
)0x4000Ë

	)

7088 
	#TIM_CCMR2_OC4CE
 ((
uöt16_t
)0x8000Ë

	)

7092 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x000CË

	)

7093 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x0004Ë

	)

7094 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x0008Ë

	)

7096 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x00F0Ë

	)

7097 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x0010Ë

	)

7098 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x0020Ë

	)

7099 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x0040Ë

	)

7100 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x0080Ë

	)

7102 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x0C00Ë

	)

7103 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x0400Ë

	)

7104 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x0800Ë

	)

7106 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0xF000Ë

	)

7107 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x1000Ë

	)

7108 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x2000Ë

	)

7109 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x4000Ë

	)

7110 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x8000Ë

	)

7113 
	#TIM_CCER_CC1E
 ((
uöt16_t
)0x0001Ë

	)

7114 
	#TIM_CCER_CC1P
 ((
uöt16_t
)0x0002Ë

	)

7115 
	#TIM_CCER_CC1NE
 ((
uöt16_t
)0x0004Ë

	)

7116 
	#TIM_CCER_CC1NP
 ((
uöt16_t
)0x0008Ë

	)

7117 
	#TIM_CCER_CC2E
 ((
uöt16_t
)0x0010Ë

	)

7118 
	#TIM_CCER_CC2P
 ((
uöt16_t
)0x0020Ë

	)

7119 
	#TIM_CCER_CC2NE
 ((
uöt16_t
)0x0040Ë

	)

7120 
	#TIM_CCER_CC2NP
 ((
uöt16_t
)0x0080Ë

	)

7121 
	#TIM_CCER_CC3E
 ((
uöt16_t
)0x0100Ë

	)

7122 
	#TIM_CCER_CC3P
 ((
uöt16_t
)0x0200Ë

	)

7123 
	#TIM_CCER_CC3NE
 ((
uöt16_t
)0x0400Ë

	)

7124 
	#TIM_CCER_CC3NP
 ((
uöt16_t
)0x0800Ë

	)

7125 
	#TIM_CCER_CC4E
 ((
uöt16_t
)0x1000Ë

	)

7126 
	#TIM_CCER_CC4P
 ((
uöt16_t
)0x2000Ë

	)

7127 
	#TIM_CCER_CC4NP
 ((
uöt16_t
)0x8000Ë

	)

7130 
	#TIM_CNT_CNT
 ((
uöt16_t
)0xFFFFË

	)

7133 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

7136 
	#TIM_ARR_ARR
 ((
uöt16_t
)0xFFFFË

	)

7139 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

7142 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

7145 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

7148 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

7151 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

7154 
	#TIM_BDTR_DTG
 ((
uöt16_t
)0x00FFË

	)

7155 
	#TIM_BDTR_DTG_0
 ((
uöt16_t
)0x0001Ë

	)

7156 
	#TIM_BDTR_DTG_1
 ((
uöt16_t
)0x0002Ë

	)

7157 
	#TIM_BDTR_DTG_2
 ((
uöt16_t
)0x0004Ë

	)

7158 
	#TIM_BDTR_DTG_3
 ((
uöt16_t
)0x0008Ë

	)

7159 
	#TIM_BDTR_DTG_4
 ((
uöt16_t
)0x0010Ë

	)

7160 
	#TIM_BDTR_DTG_5
 ((
uöt16_t
)0x0020Ë

	)

7161 
	#TIM_BDTR_DTG_6
 ((
uöt16_t
)0x0040Ë

	)

7162 
	#TIM_BDTR_DTG_7
 ((
uöt16_t
)0x0080Ë

	)

7164 
	#TIM_BDTR_LOCK
 ((
uöt16_t
)0x0300Ë

	)

7165 
	#TIM_BDTR_LOCK_0
 ((
uöt16_t
)0x0100Ë

	)

7166 
	#TIM_BDTR_LOCK_1
 ((
uöt16_t
)0x0200Ë

	)

7168 
	#TIM_BDTR_OSSI
 ((
uöt16_t
)0x0400Ë

	)

7169 
	#TIM_BDTR_OSSR
 ((
uöt16_t
)0x0800Ë

	)

7170 
	#TIM_BDTR_BKE
 ((
uöt16_t
)0x1000Ë

	)

7171 
	#TIM_BDTR_BKP
 ((
uöt16_t
)0x2000Ë

	)

7172 
	#TIM_BDTR_AOE
 ((
uöt16_t
)0x4000Ë

	)

7173 
	#TIM_BDTR_MOE
 ((
uöt16_t
)0x8000Ë

	)

7176 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

7177 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

7178 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

7179 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

7180 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

7181 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

7183 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

7184 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

7185 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

7186 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

7187 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

7188 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

7191 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

7194 
	#TIM_OR_TI4_RMP
 ((
uöt16_t
)0x00C0Ë

	)

7195 
	#TIM_OR_TI4_RMP_0
 ((
uöt16_t
)0x0040Ë

	)

7196 
	#TIM_OR_TI4_RMP_1
 ((
uöt16_t
)0x0080Ë

	)

7197 
	#TIM_OR_ITR1_RMP
 ((
uöt16_t
)0x0C00Ë

	)

7198 
	#TIM_OR_ITR1_RMP_0
 ((
uöt16_t
)0x0400Ë

	)

7199 
	#TIM_OR_ITR1_RMP_1
 ((
uöt16_t
)0x0800Ë

	)

7208 
	#USART_SR_PE
 ((
uöt16_t
)0x0001Ë

	)

7209 
	#USART_SR_FE
 ((
uöt16_t
)0x0002Ë

	)

7210 
	#USART_SR_NE
 ((
uöt16_t
)0x0004Ë

	)

7211 
	#USART_SR_ORE
 ((
uöt16_t
)0x0008Ë

	)

7212 
	#USART_SR_IDLE
 ((
uöt16_t
)0x0010Ë

	)

7213 
	#USART_SR_RXNE
 ((
uöt16_t
)0x0020Ë

	)

7214 
	#USART_SR_TC
 ((
uöt16_t
)0x0040Ë

	)

7215 
	#USART_SR_TXE
 ((
uöt16_t
)0x0080Ë

	)

7216 
	#USART_SR_LBD
 ((
uöt16_t
)0x0100Ë

	)

7217 
	#USART_SR_CTS
 ((
uöt16_t
)0x0200Ë

	)

7220 
	#USART_DR_DR
 ((
uöt16_t
)0x01FFË

	)

7223 
	#USART_BRR_DIV_Fø˘i⁄
 ((
uöt16_t
)0x000FË

	)

7224 
	#USART_BRR_DIV_M™tisß
 ((
uöt16_t
)0xFFF0Ë

	)

7227 
	#USART_CR1_SBK
 ((
uöt16_t
)0x0001Ë

	)

7228 
	#USART_CR1_RWU
 ((
uöt16_t
)0x0002Ë

	)

7229 
	#USART_CR1_RE
 ((
uöt16_t
)0x0004Ë

	)

7230 
	#USART_CR1_TE
 ((
uöt16_t
)0x0008Ë

	)

7231 
	#USART_CR1_IDLEIE
 ((
uöt16_t
)0x0010Ë

	)

7232 
	#USART_CR1_RXNEIE
 ((
uöt16_t
)0x0020Ë

	)

7233 
	#USART_CR1_TCIE
 ((
uöt16_t
)0x0040Ë

	)

7234 
	#USART_CR1_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

7235 
	#USART_CR1_PEIE
 ((
uöt16_t
)0x0100Ë

	)

7236 
	#USART_CR1_PS
 ((
uöt16_t
)0x0200Ë

	)

7237 
	#USART_CR1_PCE
 ((
uöt16_t
)0x0400Ë

	)

7238 
	#USART_CR1_WAKE
 ((
uöt16_t
)0x0800Ë

	)

7239 
	#USART_CR1_M
 ((
uöt16_t
)0x1000Ë

	)

7240 
	#USART_CR1_UE
 ((
uöt16_t
)0x2000Ë

	)

7241 
	#USART_CR1_OVER8
 ((
uöt16_t
)0x8000Ë

	)

7244 
	#USART_CR2_ADD
 ((
uöt16_t
)0x000FË

	)

7245 
	#USART_CR2_LBDL
 ((
uöt16_t
)0x0020Ë

	)

7246 
	#USART_CR2_LBDIE
 ((
uöt16_t
)0x0040Ë

	)

7247 
	#USART_CR2_LBCL
 ((
uöt16_t
)0x0100Ë

	)

7248 
	#USART_CR2_CPHA
 ((
uöt16_t
)0x0200Ë

	)

7249 
	#USART_CR2_CPOL
 ((
uöt16_t
)0x0400Ë

	)

7250 
	#USART_CR2_CLKEN
 ((
uöt16_t
)0x0800Ë

	)

7252 
	#USART_CR2_STOP
 ((
uöt16_t
)0x3000Ë

	)

7253 
	#USART_CR2_STOP_0
 ((
uöt16_t
)0x1000Ë

	)

7254 
	#USART_CR2_STOP_1
 ((
uöt16_t
)0x2000Ë

	)

7256 
	#USART_CR2_LINEN
 ((
uöt16_t
)0x4000Ë

	)

7259 
	#USART_CR3_EIE
 ((
uöt16_t
)0x0001Ë

	)

7260 
	#USART_CR3_IREN
 ((
uöt16_t
)0x0002Ë

	)

7261 
	#USART_CR3_IRLP
 ((
uöt16_t
)0x0004Ë

	)

7262 
	#USART_CR3_HDSEL
 ((
uöt16_t
)0x0008Ë

	)

7263 
	#USART_CR3_NACK
 ((
uöt16_t
)0x0010Ë

	)

7264 
	#USART_CR3_SCEN
 ((
uöt16_t
)0x0020Ë

	)

7265 
	#USART_CR3_DMAR
 ((
uöt16_t
)0x0040Ë

	)

7266 
	#USART_CR3_DMAT
 ((
uöt16_t
)0x0080Ë

	)

7267 
	#USART_CR3_RTSE
 ((
uöt16_t
)0x0100Ë

	)

7268 
	#USART_CR3_CTSE
 ((
uöt16_t
)0x0200Ë

	)

7269 
	#USART_CR3_CTSIE
 ((
uöt16_t
)0x0400Ë

	)

7270 
	#USART_CR3_ONEBIT
 ((
uöt16_t
)0x0800Ë

	)

7273 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

7274 
	#USART_GTPR_PSC_0
 ((
uöt16_t
)0x0001Ë

	)

7275 
	#USART_GTPR_PSC_1
 ((
uöt16_t
)0x0002Ë

	)

7276 
	#USART_GTPR_PSC_2
 ((
uöt16_t
)0x0004Ë

	)

7277 
	#USART_GTPR_PSC_3
 ((
uöt16_t
)0x0008Ë

	)

7278 
	#USART_GTPR_PSC_4
 ((
uöt16_t
)0x0010Ë

	)

7279 
	#USART_GTPR_PSC_5
 ((
uöt16_t
)0x0020Ë

	)

7280 
	#USART_GTPR_PSC_6
 ((
uöt16_t
)0x0040Ë

	)

7281 
	#USART_GTPR_PSC_7
 ((
uöt16_t
)0x0080Ë

	)

7283 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

7291 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

7292 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

7293 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

7294 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

7295 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

7296 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

7297 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

7298 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

7300 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

7303 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

7304 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

7305 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

7306 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

7307 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

7308 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

7309 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

7310 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

7312 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

7313 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

7314 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

7316 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

7319 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

7328 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFF)

	)

7329 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000)

	)

7332 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001)

	)

7333 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002)

	)

7334 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004)

	)

7335 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020)

	)

7337 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0)

	)

7338 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040)

	)

7339 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080)

	)

7342 
	#DBGMCU_APB1_FZ_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

7343 
	#DBGMCU_APB1_FZ_DBG_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

7344 
	#DBGMCU_APB1_FZ_DBG_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

7345 
	#DBGMCU_APB1_FZ_DBG_TIM5_STOP
 ((
uöt32_t
)0x00000008)

	)

7346 
	#DBGMCU_APB1_FZ_DBG_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

7347 
	#DBGMCU_APB1_FZ_DBG_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

7348 
	#DBGMCU_APB1_FZ_DBG_TIM12_STOP
 ((
uöt32_t
)0x00000040)

	)

7349 
	#DBGMCU_APB1_FZ_DBG_TIM13_STOP
 ((
uöt32_t
)0x00000080)

	)

7350 
	#DBGMCU_APB1_FZ_DBG_TIM14_STOP
 ((
uöt32_t
)0x00000100)

	)

7351 
	#DBGMCU_APB1_FZ_DBG_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

7352 
	#DBGMCU_APB1_FZ_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

7353 
	#DBGMCU_APB1_FZ_DBG_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

7354 
	#DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

7355 
	#DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

7356 
	#DBGMCU_APB1_FZ_DBG_I2C3_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00800000)

	)

7357 
	#DBGMCU_APB1_FZ_DBG_CAN1_STOP
 ((
uöt32_t
)0x02000000)

	)

7358 
	#DBGMCU_APB1_FZ_DBG_CAN2_STOP
 ((
uöt32_t
)0x04000000)

	)

7360 
	#DBGMCU_APB1_FZ_DBG_IWDEG_STOP
 
DBGMCU_APB1_FZ_DBG_IWDG_STOP


	)

7363 
	#DBGMCU_APB1_FZ_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000001)

	)

7364 
	#DBGMCU_APB1_FZ_DBG_TIM8_STOP
 ((
uöt32_t
)0x00000002)

	)

7365 
	#DBGMCU_APB1_FZ_DBG_TIM9_STOP
 ((
uöt32_t
)0x00010000)

	)

7366 
	#DBGMCU_APB1_FZ_DBG_TIM10_STOP
 ((
uöt32_t
)0x00020000)

	)

7367 
	#DBGMCU_APB1_FZ_DBG_TIM11_STOP
 ((
uöt32_t
)0x00040000)

	)

7375 
	#ETH_MACCR_WD
 ((
uöt32_t
)0x00800000Ë

	)

7376 
	#ETH_MACCR_JD
 ((
uöt32_t
)0x00400000Ë

	)

7377 
	#ETH_MACCR_IFG
 ((
uöt32_t
)0x000E0000Ë

	)

7378 
	#ETH_MACCR_IFG_96Bô
 ((
uöt32_t
)0x00000000Ë

	)

7379 
	#ETH_MACCR_IFG_88Bô
 ((
uöt32_t
)0x00020000Ë

	)

7380 
	#ETH_MACCR_IFG_80Bô
 ((
uöt32_t
)0x00040000Ë

	)

7381 
	#ETH_MACCR_IFG_72Bô
 ((
uöt32_t
)0x00060000Ë

	)

7382 
	#ETH_MACCR_IFG_64Bô
 ((
uöt32_t
)0x00080000Ë

	)

7383 
	#ETH_MACCR_IFG_56Bô
 ((
uöt32_t
)0x000A0000Ë

	)

7384 
	#ETH_MACCR_IFG_48Bô
 ((
uöt32_t
)0x000C0000Ë

	)

7385 
	#ETH_MACCR_IFG_40Bô
 ((
uöt32_t
)0x000E0000Ë

	)

7386 
	#ETH_MACCR_CSD
 ((
uöt32_t
)0x00010000Ë

	)

7387 
	#ETH_MACCR_FES
 ((
uöt32_t
)0x00004000Ë

	)

7388 
	#ETH_MACCR_ROD
 ((
uöt32_t
)0x00002000Ë

	)

7389 
	#ETH_MACCR_LM
 ((
uöt32_t
)0x00001000Ë

	)

7390 
	#ETH_MACCR_DM
 ((
uöt32_t
)0x00000800Ë

	)

7391 
	#ETH_MACCR_IPCO
 ((
uöt32_t
)0x00000400Ë

	)

7392 
	#ETH_MACCR_RD
 ((
uöt32_t
)0x00000200Ë

	)

7393 
	#ETH_MACCR_APCS
 ((
uöt32_t
)0x00000080Ë

	)

7394 
	#ETH_MACCR_BL
 ((
uöt32_t
)0x00000060Ë

	)

7396 
	#ETH_MACCR_BL_10
 ((
uöt32_t
)0x00000000Ë

	)

7397 
	#ETH_MACCR_BL_8
 ((
uöt32_t
)0x00000020Ë

	)

7398 
	#ETH_MACCR_BL_4
 ((
uöt32_t
)0x00000040Ë

	)

7399 
	#ETH_MACCR_BL_1
 ((
uöt32_t
)0x00000060Ë

	)

7400 
	#ETH_MACCR_DC
 ((
uöt32_t
)0x00000010Ë

	)

7401 
	#ETH_MACCR_TE
 ((
uöt32_t
)0x00000008Ë

	)

7402 
	#ETH_MACCR_RE
 ((
uöt32_t
)0x00000004Ë

	)

7405 
	#ETH_MACFFR_RA
 ((
uöt32_t
)0x80000000Ë

	)

7406 
	#ETH_MACFFR_HPF
 ((
uöt32_t
)0x00000400Ë

	)

7407 
	#ETH_MACFFR_SAF
 ((
uöt32_t
)0x00000200Ë

	)

7408 
	#ETH_MACFFR_SAIF
 ((
uöt32_t
)0x00000100Ë

	)

7409 
	#ETH_MACFFR_PCF
 ((
uöt32_t
)0x000000C0Ë

	)

7410 
	#ETH_MACFFR_PCF_BlockAŒ
 ((
uöt32_t
)0x00000040Ë

	)

7411 
	#ETH_MACFFR_PCF_F‹w¨dAŒ
 ((
uöt32_t
)0x00000080Ë

	)

7412 
	#ETH_MACFFR_PCF_F‹w¨dPas£dAddrFûãr
 ((
uöt32_t
)0x000000C0Ë

	)

7413 
	#ETH_MACFFR_BFD
 ((
uöt32_t
)0x00000020Ë

	)

7414 
	#ETH_MACFFR_PAM
 ((
uöt32_t
)0x00000010Ë

	)

7415 
	#ETH_MACFFR_DAIF
 ((
uöt32_t
)0x00000008Ë

	)

7416 
	#ETH_MACFFR_HM
 ((
uöt32_t
)0x00000004Ë

	)

7417 
	#ETH_MACFFR_HU
 ((
uöt32_t
)0x00000002Ë

	)

7418 
	#ETH_MACFFR_PM
 ((
uöt32_t
)0x00000001Ë

	)

7421 
	#ETH_MACHTHR_HTH
 ((
uöt32_t
)0xFFFFFFFFË

	)

7424 
	#ETH_MACHTLR_HTL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7427 
	#ETH_MACMIIAR_PA
 ((
uöt32_t
)0x0000F800Ë

	)

7428 
	#ETH_MACMIIAR_MR
 ((
uöt32_t
)0x000007C0Ë

	)

7429 
	#ETH_MACMIIAR_CR
 ((
uöt32_t
)0x0000001CË

	)

7430 
	#ETH_MACMIIAR_CR_Div42
 ((
uöt32_t
)0x00000000Ë

	)

7431 
	#ETH_MACMIIAR_CR_Div62
 ((
uöt32_t
)0x00000004Ë

	)

7432 
	#ETH_MACMIIAR_CR_Div16
 ((
uöt32_t
)0x00000008Ë

	)

7433 
	#ETH_MACMIIAR_CR_Div26
 ((
uöt32_t
)0x0000000CË

	)

7434 
	#ETH_MACMIIAR_CR_Div102
 ((
uöt32_t
)0x00000010Ë

	)

7435 
	#ETH_MACMIIAR_MW
 ((
uöt32_t
)0x00000002Ë

	)

7436 
	#ETH_MACMIIAR_MB
 ((
uöt32_t
)0x00000001Ë

	)

7439 
	#ETH_MACMIIDR_MD
 ((
uöt32_t
)0x0000FFFFË

	)

7442 
	#ETH_MACFCR_PT
 ((
uöt32_t
)0xFFFF0000Ë

	)

7443 
	#ETH_MACFCR_ZQPD
 ((
uöt32_t
)0x00000080Ë

	)

7444 
	#ETH_MACFCR_PLT
 ((
uöt32_t
)0x00000030Ë

	)

7445 
	#ETH_MACFCR_PLT_Möus4
 ((
uöt32_t
)0x00000000Ë

	)

7446 
	#ETH_MACFCR_PLT_Möus28
 ((
uöt32_t
)0x00000010Ë

	)

7447 
	#ETH_MACFCR_PLT_Möus144
 ((
uöt32_t
)0x00000020Ë

	)

7448 
	#ETH_MACFCR_PLT_Möus256
 ((
uöt32_t
)0x00000030Ë

	)

7449 
	#ETH_MACFCR_UPFD
 ((
uöt32_t
)0x00000008Ë

	)

7450 
	#ETH_MACFCR_RFCE
 ((
uöt32_t
)0x00000004Ë

	)

7451 
	#ETH_MACFCR_TFCE
 ((
uöt32_t
)0x00000002Ë

	)

7452 
	#ETH_MACFCR_FCBBPA
 ((
uöt32_t
)0x00000001Ë

	)

7455 
	#ETH_MACVLANTR_VLANTC
 ((
uöt32_t
)0x00010000Ë

	)

7456 
	#ETH_MACVLANTR_VLANTI
 ((
uöt32_t
)0x0000FFFFË

	)

7459 
	#ETH_MACRWUFFR_D
 ((
uöt32_t
)0xFFFFFFFFË

	)

7473 
	#ETH_MACPMTCSR_WFFRPR
 ((
uöt32_t
)0x80000000Ë

	)

7474 
	#ETH_MACPMTCSR_GU
 ((
uöt32_t
)0x00000200Ë

	)

7475 
	#ETH_MACPMTCSR_WFR
 ((
uöt32_t
)0x00000040Ë

	)

7476 
	#ETH_MACPMTCSR_MPR
 ((
uöt32_t
)0x00000020Ë

	)

7477 
	#ETH_MACPMTCSR_WFE
 ((
uöt32_t
)0x00000004Ë

	)

7478 
	#ETH_MACPMTCSR_MPE
 ((
uöt32_t
)0x00000002Ë

	)

7479 
	#ETH_MACPMTCSR_PD
 ((
uöt32_t
)0x00000001Ë

	)

7482 
	#ETH_MACSR_TSTS
 ((
uöt32_t
)0x00000200Ë

	)

7483 
	#ETH_MACSR_MMCTS
 ((
uöt32_t
)0x00000040Ë

	)

7484 
	#ETH_MACSR_MMMCRS
 ((
uöt32_t
)0x00000020Ë

	)

7485 
	#ETH_MACSR_MMCS
 ((
uöt32_t
)0x00000010Ë

	)

7486 
	#ETH_MACSR_PMTS
 ((
uöt32_t
)0x00000008Ë

	)

7489 
	#ETH_MACIMR_TSTIM
 ((
uöt32_t
)0x00000200Ë

	)

7490 
	#ETH_MACIMR_PMTIM
 ((
uöt32_t
)0x00000008Ë

	)

7493 
	#ETH_MACA0HR_MACA0H
 ((
uöt32_t
)0x0000FFFFË

	)

7496 
	#ETH_MACA0LR_MACA0L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7499 
	#ETH_MACA1HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7500 
	#ETH_MACA1HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7501 
	#ETH_MACA1HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7502 
	#ETH_MACA1HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7503 
	#ETH_MACA1HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7504 
	#ETH_MACA1HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7505 
	#ETH_MACA1HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7506 
	#ETH_MACA1HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7507 
	#ETH_MACA1HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7508 
	#ETH_MACA1HR_MACA1H
 ((
uöt32_t
)0x0000FFFFË

	)

7511 
	#ETH_MACA1LR_MACA1L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7514 
	#ETH_MACA2HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7515 
	#ETH_MACA2HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7516 
	#ETH_MACA2HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7517 
	#ETH_MACA2HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7518 
	#ETH_MACA2HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7519 
	#ETH_MACA2HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7520 
	#ETH_MACA2HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7521 
	#ETH_MACA2HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7522 
	#ETH_MACA2HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7523 
	#ETH_MACA2HR_MACA2H
 ((
uöt32_t
)0x0000FFFFË

	)

7526 
	#ETH_MACA2LR_MACA2L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7529 
	#ETH_MACA3HR_AE
 ((
uöt32_t
)0x80000000Ë

	)

7530 
	#ETH_MACA3HR_SA
 ((
uöt32_t
)0x40000000Ë

	)

7531 
	#ETH_MACA3HR_MBC
 ((
uöt32_t
)0x3F000000Ë

	)

7532 
	#ETH_MACA3HR_MBC_HBôs15_8
 ((
uöt32_t
)0x20000000Ë

	)

7533 
	#ETH_MACA3HR_MBC_HBôs7_0
 ((
uöt32_t
)0x10000000Ë

	)

7534 
	#ETH_MACA3HR_MBC_LBôs31_24
 ((
uöt32_t
)0x08000000Ë

	)

7535 
	#ETH_MACA3HR_MBC_LBôs23_16
 ((
uöt32_t
)0x04000000Ë

	)

7536 
	#ETH_MACA3HR_MBC_LBôs15_8
 ((
uöt32_t
)0x02000000Ë

	)

7537 
	#ETH_MACA3HR_MBC_LBôs7_0
 ((
uöt32_t
)0x01000000Ë

	)

7538 
	#ETH_MACA3HR_MACA3H
 ((
uöt32_t
)0x0000FFFFË

	)

7541 
	#ETH_MACA3LR_MACA3L
 ((
uöt32_t
)0xFFFFFFFFË

	)

7548 
	#ETH_MMCCR_MCFHP
 ((
uöt32_t
)0x00000020Ë

	)

7549 
	#ETH_MMCCR_MCP
 ((
uöt32_t
)0x00000010Ë

	)

7550 
	#ETH_MMCCR_MCF
 ((
uöt32_t
)0x00000008Ë

	)

7551 
	#ETH_MMCCR_ROR
 ((
uöt32_t
)0x00000004Ë

	)

7552 
	#ETH_MMCCR_CSR
 ((
uöt32_t
)0x00000002Ë

	)

7553 
	#ETH_MMCCR_CR
 ((
uöt32_t
)0x00000001Ë

	)

7556 
	#ETH_MMCRIR_RGUFS
 ((
uöt32_t
)0x00020000Ë

	)

7557 
	#ETH_MMCRIR_RFAES
 ((
uöt32_t
)0x00000040Ë

	)

7558 
	#ETH_MMCRIR_RFCES
 ((
uöt32_t
)0x00000020Ë

	)

7561 
	#ETH_MMCTIR_TGFS
 ((
uöt32_t
)0x00200000Ë

	)

7562 
	#ETH_MMCTIR_TGFMSCS
 ((
uöt32_t
)0x00008000Ë

	)

7563 
	#ETH_MMCTIR_TGFSCS
 ((
uöt32_t
)0x00004000Ë

	)

7566 
	#ETH_MMCRIMR_RGUFM
 ((
uöt32_t
)0x00020000Ë

	)

7567 
	#ETH_MMCRIMR_RFAEM
 ((
uöt32_t
)0x00000040Ë

	)

7568 
	#ETH_MMCRIMR_RFCEM
 ((
uöt32_t
)0x00000020Ë

	)

7571 
	#ETH_MMCTIMR_TGFM
 ((
uöt32_t
)0x00200000Ë

	)

7572 
	#ETH_MMCTIMR_TGFMSCM
 ((
uöt32_t
)0x00008000Ë

	)

7573 
	#ETH_MMCTIMR_TGFSCM
 ((
uöt32_t
)0x00004000Ë

	)

7576 
	#ETH_MMCTGFSCCR_TGFSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7579 
	#ETH_MMCTGFMSCCR_TGFMSCC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7582 
	#ETH_MMCTGFCR_TGFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7585 
	#ETH_MMCRFCECR_RFCEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7588 
	#ETH_MMCRFAECR_RFAEC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7591 
	#ETH_MMCRGUFCR_RGUFC
 ((
uöt32_t
)0xFFFFFFFFË

	)

7598 
	#ETH_PTPTSCR_TSCNT
 ((
uöt32_t
)0x00030000Ë

	)

7599 
	#ETH_PTPTSSR_TSSMRME
 ((
uöt32_t
)0x00008000Ë

	)

7600 
	#ETH_PTPTSSR_TSSEME
 ((
uöt32_t
)0x00004000Ë

	)

7601 
	#ETH_PTPTSSR_TSSIPV4FE
 ((
uöt32_t
)0x00002000Ë

	)

7602 
	#ETH_PTPTSSR_TSSIPV6FE
 ((
uöt32_t
)0x00001000Ë

	)

7603 
	#ETH_PTPTSSR_TSSPTPOEFE
 ((
uöt32_t
)0x00000800Ë

	)

7604 
	#ETH_PTPTSSR_TSPTPPSV2E
 ((
uöt32_t
)0x00000400Ë

	)

7605 
	#ETH_PTPTSSR_TSSSR
 ((
uöt32_t
)0x00000200Ë

	)

7606 
	#ETH_PTPTSSR_TSSARFE
 ((
uöt32_t
)0x00000100Ë

	)

7608 
	#ETH_PTPTSCR_TSARU
 ((
uöt32_t
)0x00000020Ë

	)

7609 
	#ETH_PTPTSCR_TSITE
 ((
uöt32_t
)0x00000010Ë

	)

7610 
	#ETH_PTPTSCR_TSSTU
 ((
uöt32_t
)0x00000008Ë

	)

7611 
	#ETH_PTPTSCR_TSSTI
 ((
uöt32_t
)0x00000004Ë

	)

7612 
	#ETH_PTPTSCR_TSFCU
 ((
uöt32_t
)0x00000002Ë

	)

7613 
	#ETH_PTPTSCR_TSE
 ((
uöt32_t
)0x00000001Ë

	)

7616 
	#ETH_PTPSSIR_STSSI
 ((
uöt32_t
)0x000000FFË

	)

7619 
	#ETH_PTPTSHR_STS
 ((
uöt32_t
)0xFFFFFFFFË

	)

7622 
	#ETH_PTPTSLR_STPNS
 ((
uöt32_t
)0x80000000Ë

	)

7623 
	#ETH_PTPTSLR_STSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

7626 
	#ETH_PTPTSHUR_TSUS
 ((
uöt32_t
)0xFFFFFFFFË

	)

7629 
	#ETH_PTPTSLUR_TSUPNS
 ((
uöt32_t
)0x80000000Ë

	)

7630 
	#ETH_PTPTSLUR_TSUSS
 ((
uöt32_t
)0x7FFFFFFFË

	)

7633 
	#ETH_PTPTSAR_TSA
 ((
uöt32_t
)0xFFFFFFFFË

	)

7636 
	#ETH_PTPTTHR_TTSH
 ((
uöt32_t
)0xFFFFFFFFË

	)

7639 
	#ETH_PTPTTLR_TTSL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7642 
	#ETH_PTPTSSR_TSTTR
 ((
uöt32_t
)0x00000020Ë

	)

7643 
	#ETH_PTPTSSR_TSSO
 ((
uöt32_t
)0x00000010Ë

	)

7650 
	#ETH_DMABMR_AAB
 ((
uöt32_t
)0x02000000Ë

	)

7651 
	#ETH_DMABMR_FPM
 ((
uöt32_t
)0x01000000Ë

	)

7652 
	#ETH_DMABMR_USP
 ((
uöt32_t
)0x00800000Ë

	)

7653 
	#ETH_DMABMR_RDP
 ((
uöt32_t
)0x007E0000Ë

	)

7654 
	#ETH_DMABMR_RDP_1Bót
 ((
uöt32_t
)0x00020000Ë

	)

7655 
	#ETH_DMABMR_RDP_2Bót
 ((
uöt32_t
)0x00040000Ë

	)

7656 
	#ETH_DMABMR_RDP_4Bót
 ((
uöt32_t
)0x00080000Ë

	)

7657 
	#ETH_DMABMR_RDP_8Bót
 ((
uöt32_t
)0x00100000Ë

	)

7658 
	#ETH_DMABMR_RDP_16Bót
 ((
uöt32_t
)0x00200000Ë

	)

7659 
	#ETH_DMABMR_RDP_32Bót
 ((
uöt32_t
)0x00400000Ë

	)

7660 
	#ETH_DMABMR_RDP_4xPBL_4Bót
 ((
uöt32_t
)0x01020000Ë

	)

7661 
	#ETH_DMABMR_RDP_4xPBL_8Bót
 ((
uöt32_t
)0x01040000Ë

	)

7662 
	#ETH_DMABMR_RDP_4xPBL_16Bót
 ((
uöt32_t
)0x01080000Ë

	)

7663 
	#ETH_DMABMR_RDP_4xPBL_32Bót
 ((
uöt32_t
)0x01100000Ë

	)

7664 
	#ETH_DMABMR_RDP_4xPBL_64Bót
 ((
uöt32_t
)0x01200000Ë

	)

7665 
	#ETH_DMABMR_RDP_4xPBL_128Bót
 ((
uöt32_t
)0x01400000Ë

	)

7666 
	#ETH_DMABMR_FB
 ((
uöt32_t
)0x00010000Ë

	)

7667 
	#ETH_DMABMR_RTPR
 ((
uöt32_t
)0x0000C000Ë

	)

7668 
	#ETH_DMABMR_RTPR_1_1
 ((
uöt32_t
)0x00000000Ë

	)

7669 
	#ETH_DMABMR_RTPR_2_1
 ((
uöt32_t
)0x00004000Ë

	)

7670 
	#ETH_DMABMR_RTPR_3_1
 ((
uöt32_t
)0x00008000Ë

	)

7671 
	#ETH_DMABMR_RTPR_4_1
 ((
uöt32_t
)0x0000C000Ë

	)

7672 
	#ETH_DMABMR_PBL
 ((
uöt32_t
)0x00003F00Ë

	)

7673 
	#ETH_DMABMR_PBL_1Bót
 ((
uöt32_t
)0x00000100Ë

	)

7674 
	#ETH_DMABMR_PBL_2Bót
 ((
uöt32_t
)0x00000200Ë

	)

7675 
	#ETH_DMABMR_PBL_4Bót
 ((
uöt32_t
)0x00000400Ë

	)

7676 
	#ETH_DMABMR_PBL_8Bót
 ((
uöt32_t
)0x00000800Ë

	)

7677 
	#ETH_DMABMR_PBL_16Bót
 ((
uöt32_t
)0x00001000Ë

	)

7678 
	#ETH_DMABMR_PBL_32Bót
 ((
uöt32_t
)0x00002000Ë

	)

7679 
	#ETH_DMABMR_PBL_4xPBL_4Bót
 ((
uöt32_t
)0x01000100Ë

	)

7680 
	#ETH_DMABMR_PBL_4xPBL_8Bót
 ((
uöt32_t
)0x01000200Ë

	)

7681 
	#ETH_DMABMR_PBL_4xPBL_16Bót
 ((
uöt32_t
)0x01000400Ë

	)

7682 
	#ETH_DMABMR_PBL_4xPBL_32Bót
 ((
uöt32_t
)0x01000800Ë

	)

7683 
	#ETH_DMABMR_PBL_4xPBL_64Bót
 ((
uöt32_t
)0x01001000Ë

	)

7684 
	#ETH_DMABMR_PBL_4xPBL_128Bót
 ((
uöt32_t
)0x01002000Ë

	)

7685 
	#ETH_DMABMR_EDE
 ((
uöt32_t
)0x00000080Ë

	)

7686 
	#ETH_DMABMR_DSL
 ((
uöt32_t
)0x0000007CË

	)

7687 
	#ETH_DMABMR_DA
 ((
uöt32_t
)0x00000002Ë

	)

7688 
	#ETH_DMABMR_SR
 ((
uöt32_t
)0x00000001Ë

	)

7691 
	#ETH_DMATPDR_TPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

7694 
	#ETH_DMARPDR_RPD
 ((
uöt32_t
)0xFFFFFFFFË

	)

7697 
	#ETH_DMARDLAR_SRL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7700 
	#ETH_DMATDLAR_STL
 ((
uöt32_t
)0xFFFFFFFFË

	)

7703 
	#ETH_DMASR_TSTS
 ((
uöt32_t
)0x20000000Ë

	)

7704 
	#ETH_DMASR_PMTS
 ((
uöt32_t
)0x10000000Ë

	)

7705 
	#ETH_DMASR_MMCS
 ((
uöt32_t
)0x08000000Ë

	)

7706 
	#ETH_DMASR_EBS
 ((
uöt32_t
)0x03800000Ë

	)

7708 
	#ETH_DMASR_EBS_DescAc˚ss
 ((
uöt32_t
)0x02000000Ë

	)

7709 
	#ETH_DMASR_EBS_RódTønsf
 ((
uöt32_t
)0x01000000Ë

	)

7710 
	#ETH_DMASR_EBS_D©aTønsfTx
 ((
uöt32_t
)0x00800000Ë

	)

7711 
	#ETH_DMASR_TPS
 ((
uöt32_t
)0x00700000Ë

	)

7712 
	#ETH_DMASR_TPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

7713 
	#ETH_DMASR_TPS_Fëchög
 ((
uöt32_t
)0x00100000Ë

	)

7714 
	#ETH_DMASR_TPS_Waôög
 ((
uöt32_t
)0x00200000Ë

	)

7715 
	#ETH_DMASR_TPS_Ródög
 ((
uöt32_t
)0x00300000Ë

	)

7716 
	#ETH_DMASR_TPS_Su•íded
 ((
uöt32_t
)0x00600000Ë

	)

7717 
	#ETH_DMASR_TPS_Closög
 ((
uöt32_t
)0x00700000Ë

	)

7718 
	#ETH_DMASR_RPS
 ((
uöt32_t
)0x000E0000Ë

	)

7719 
	#ETH_DMASR_RPS_St›≥d
 ((
uöt32_t
)0x00000000Ë

	)

7720 
	#ETH_DMASR_RPS_Fëchög
 ((
uöt32_t
)0x00020000Ë

	)

7721 
	#ETH_DMASR_RPS_Waôög
 ((
uöt32_t
)0x00060000Ë

	)

7722 
	#ETH_DMASR_RPS_Su•íded
 ((
uöt32_t
)0x00080000Ë

	)

7723 
	#ETH_DMASR_RPS_Closög
 ((
uöt32_t
)0x000A0000Ë

	)

7724 
	#ETH_DMASR_RPS_Queuög
 ((
uöt32_t
)0x000E0000Ë

	)

7725 
	#ETH_DMASR_NIS
 ((
uöt32_t
)0x00010000Ë

	)

7726 
	#ETH_DMASR_AIS
 ((
uöt32_t
)0x00008000Ë

	)

7727 
	#ETH_DMASR_ERS
 ((
uöt32_t
)0x00004000Ë

	)

7728 
	#ETH_DMASR_FBES
 ((
uöt32_t
)0x00002000Ë

	)

7729 
	#ETH_DMASR_ETS
 ((
uöt32_t
)0x00000400Ë

	)

7730 
	#ETH_DMASR_RWTS
 ((
uöt32_t
)0x00000200Ë

	)

7731 
	#ETH_DMASR_RPSS
 ((
uöt32_t
)0x00000100Ë

	)

7732 
	#ETH_DMASR_RBUS
 ((
uöt32_t
)0x00000080Ë

	)

7733 
	#ETH_DMASR_RS
 ((
uöt32_t
)0x00000040Ë

	)

7734 
	#ETH_DMASR_TUS
 ((
uöt32_t
)0x00000020Ë

	)

7735 
	#ETH_DMASR_ROS
 ((
uöt32_t
)0x00000010Ë

	)

7736 
	#ETH_DMASR_TJTS
 ((
uöt32_t
)0x00000008Ë

	)

7737 
	#ETH_DMASR_TBUS
 ((
uöt32_t
)0x00000004Ë

	)

7738 
	#ETH_DMASR_TPSS
 ((
uöt32_t
)0x00000002Ë

	)

7739 
	#ETH_DMASR_TS
 ((
uöt32_t
)0x00000001Ë

	)

7742 
	#ETH_DMAOMR_DTCEFD
 ((
uöt32_t
)0x04000000Ë

	)

7743 
	#ETH_DMAOMR_RSF
 ((
uöt32_t
)0x02000000Ë

	)

7744 
	#ETH_DMAOMR_DFRF
 ((
uöt32_t
)0x01000000Ë

	)

7745 
	#ETH_DMAOMR_TSF
 ((
uöt32_t
)0x00200000Ë

	)

7746 
	#ETH_DMAOMR_FTF
 ((
uöt32_t
)0x00100000Ë

	)

7747 
	#ETH_DMAOMR_TTC
 ((
uöt32_t
)0x0001C000Ë

	)

7748 
	#ETH_DMAOMR_TTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

7749 
	#ETH_DMAOMR_TTC_128Byãs
 ((
uöt32_t
)0x00004000Ë

	)

7750 
	#ETH_DMAOMR_TTC_192Byãs
 ((
uöt32_t
)0x00008000Ë

	)

7751 
	#ETH_DMAOMR_TTC_256Byãs
 ((
uöt32_t
)0x0000C000Ë

	)

7752 
	#ETH_DMAOMR_TTC_40Byãs
 ((
uöt32_t
)0x00010000Ë

	)

7753 
	#ETH_DMAOMR_TTC_32Byãs
 ((
uöt32_t
)0x00014000Ë

	)

7754 
	#ETH_DMAOMR_TTC_24Byãs
 ((
uöt32_t
)0x00018000Ë

	)

7755 
	#ETH_DMAOMR_TTC_16Byãs
 ((
uöt32_t
)0x0001C000Ë

	)

7756 
	#ETH_DMAOMR_ST
 ((
uöt32_t
)0x00002000Ë

	)

7757 
	#ETH_DMAOMR_FEF
 ((
uöt32_t
)0x00000080Ë

	)

7758 
	#ETH_DMAOMR_FUGF
 ((
uöt32_t
)0x00000040Ë

	)

7759 
	#ETH_DMAOMR_RTC
 ((
uöt32_t
)0x00000018Ë

	)

7760 
	#ETH_DMAOMR_RTC_64Byãs
 ((
uöt32_t
)0x00000000Ë

	)

7761 
	#ETH_DMAOMR_RTC_32Byãs
 ((
uöt32_t
)0x00000008Ë

	)

7762 
	#ETH_DMAOMR_RTC_96Byãs
 ((
uöt32_t
)0x00000010Ë

	)

7763 
	#ETH_DMAOMR_RTC_128Byãs
 ((
uöt32_t
)0x00000018Ë

	)

7764 
	#ETH_DMAOMR_OSF
 ((
uöt32_t
)0x00000004Ë

	)

7765 
	#ETH_DMAOMR_SR
 ((
uöt32_t
)0x00000002Ë

	)

7768 
	#ETH_DMAIER_NISE
 ((
uöt32_t
)0x00010000Ë

	)

7769 
	#ETH_DMAIER_AISE
 ((
uöt32_t
)0x00008000Ë

	)

7770 
	#ETH_DMAIER_ERIE
 ((
uöt32_t
)0x00004000Ë

	)

7771 
	#ETH_DMAIER_FBEIE
 ((
uöt32_t
)0x00002000Ë

	)

7772 
	#ETH_DMAIER_ETIE
 ((
uöt32_t
)0x00000400Ë

	)

7773 
	#ETH_DMAIER_RWTIE
 ((
uöt32_t
)0x00000200Ë

	)

7774 
	#ETH_DMAIER_RPSIE
 ((
uöt32_t
)0x00000100Ë

	)

7775 
	#ETH_DMAIER_RBUIE
 ((
uöt32_t
)0x00000080Ë

	)

7776 
	#ETH_DMAIER_RIE
 ((
uöt32_t
)0x00000040Ë

	)

7777 
	#ETH_DMAIER_TUIE
 ((
uöt32_t
)0x00000020Ë

	)

7778 
	#ETH_DMAIER_ROIE
 ((
uöt32_t
)0x00000010Ë

	)

7779 
	#ETH_DMAIER_TJTIE
 ((
uöt32_t
)0x00000008Ë

	)

7780 
	#ETH_DMAIER_TBUIE
 ((
uöt32_t
)0x00000004Ë

	)

7781 
	#ETH_DMAIER_TPSIE
 ((
uöt32_t
)0x00000002Ë

	)

7782 
	#ETH_DMAIER_TIE
 ((
uöt32_t
)0x00000001Ë

	)

7785 
	#ETH_DMAMFBOCR_OFOC
 ((
uöt32_t
)0x10000000Ë

	)

7786 
	#ETH_DMAMFBOCR_MFA
 ((
uöt32_t
)0x0FFE0000Ë

	)

7787 
	#ETH_DMAMFBOCR_OMFC
 ((
uöt32_t
)0x00010000Ë

	)

7788 
	#ETH_DMAMFBOCR_MFC
 ((
uöt32_t
)0x0000FFFFË

	)

7791 
	#ETH_DMACHTDR_HTDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7794 
	#ETH_DMACHRDR_HRDAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7797 
	#ETH_DMACHTBAR_HTBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7800 
	#ETH_DMACHRBAR_HRBAP
 ((
uöt32_t
)0xFFFFFFFFË

	)

7810 #ifde‡
USE_STDPERIPH_DRIVER


7811 
	~"°m32f4xx_c⁄f.h
"

7818 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

7820 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

7822 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

7824 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

7826 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

7828 
	#READ_REG
(
REG
Ë((REG))

	)

7830 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

7836 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\inc\stm32f4xx_conf.h

27 #i‚de‡
__STM32F4xx_CONF_H


28 
	#__STM32F4xx_CONF_H


	)

32 
	~"°m32f4xx_adc.h
"

33 
	~"°m32f4xx_ˇn.h
"

34 
	~"°m32f4xx_¸c.h
"

35 
	~"°m32f4xx_¸yp.h
"

36 
	~"°m32f4xx_dac.h
"

37 
	~"°m32f4xx_dbgmcu.h
"

38 
	~"°m32f4xx_dcmi.h
"

39 
	~"°m32f4xx_dma.h
"

40 
	~"°m32f4xx_exti.h
"

41 
	~"°m32f4xx_Êash.h
"

42 
	~"°m32f4xx_fsmc.h
"

43 
	~"°m32f4xx_hash.h
"

44 
	~"°m32f4xx_gpio.h
"

45 
	~"°m32f4xx_i2c.h
"

46 
	~"°m32f4xx_iwdg.h
"

47 
	~"°m32f4xx_pwr.h
"

48 
	~"°m32f4xx_rcc.h
"

49 
	~"°m32f4xx_∫g.h
"

50 
	~"°m32f4xx_πc.h
"

51 
	~"°m32f4xx_sdio.h
"

52 
	~"°m32f4xx_•i.h
"

53 
	~"°m32f4xx_syscfg.h
"

54 
	~"°m32f4xx_tim.h
"

55 
	~"°m32f4xx_ußπ.h
"

56 
	~"°m32f4xx_wwdg.h
"

57 
	~"misc.h
"

73 #ifde‡ 
USE_FULL_ASSERT


83 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

85 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

87 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\inc\system_stm32f4xx.h

33 #i‚de‡
__SYSTEM_STM32F4XX_H


34 
	#__SYSTEM_STM32F4XX_H


	)

36 #ifde‡
__˝lu•lus


53 
uöt32_t
 
Sy°emC‹eClock
;

80 
Sy°emInô
();

81 
Sy°emC‹eClockUpd©e
();

86 #ifde‡
__˝lu•lus


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\readme.txt

1 
You
 
have
 
to
 
£t
 
the
 
c‹ª˘
 
mem‹y
 
œyout
 
your
 
devi˚
 
ö
Åhê
lökî
 
	gs¸ùt
.

2 
PÀa£
 
check
 
the
 
FLASH
 
™d
 
SRAM
 
	gÀngth
.

4 
	ge
.
	gg
.

7 
	gMEMORY


9 
FLASH
 (
rx
Ë: 
ORIGIN
 = 0x08000000, 
	gLENGTH
 = 0x08000

10 
RAM
 (
rwx
Ë: 
ORIGIN
 = 0x20000000, 
	gLENGTH
 = 0x01000

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\src\main.c

14 
	~"°m32f4xx_c⁄f.h
"

15 
	~<°m32f4xx_GPIO.h
>

17 
	$IO_Inô
()

19 
	`RCC_AHB1PîùhClockCmd
(
RCC_AHB1Pîùh_GPIOG
, 
ENABLE
);

21 
GPIO_InôTy≥Def
 
PORTG
;

22 
PORTG
.
GPIO_Pö
 = 
GPIO_Pö_13
;

23 
PORTG
.
GPIO_Mode
 = 
GPIO_Mode_OUT
;

24 
PORTG
.
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

25 
PORTG
.
GPIO_S≥ed
 = 
GPIO_S≥ed_100MHz
;

26 
PORTG
.
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

27 
	`GPIO_Inô
(
GPIOG
, &
PORTG
);

28 
	}
}

30 
	$maö
()

32 
	`IO_Inô
();

33 
i
 = 1000000;

37 
	`GPIO_ToggÀBôs
(
GPIOG
, 
GPIO_Pö_13
);

38 
i
 = 1000000; i>0; i--);

40 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\src\startup_stm32f4xx.S

32 .
sy¡ax
 
	gunifõd


33 .
¨ch
 
	g¨mv7
-
	gm


35 .
	g£˘i⁄
 .
	g°ack


36 .
	gÆign
 3

37 #ifde‡
__STACK_SIZE


38 .
equ
 
	gSèck_Size
, 
	g__STACK_SIZE


40 .
equ
 
	gSèck_Size
, 0x400

42 .
globl
 
	g__SèckT›


43 .
globl
 
__SèckLimô


44 
	g__SèckLimô
:

45 .
•a˚
 
Sèck_Size


46 .
size
 
__SèckLimô
, . - __StackLimit

47 
	g__SèckT›
:

48 .
size
 
__SèckT›
, . - 
	g__SèckT›


50 .
	g£˘i⁄
 .
	ghóp


51 .
	gÆign
 3

52 #ifde‡
__HEAP_SIZE


53 .
equ
 
	gHóp_Size
, 
	g__HEAP_SIZE


55 .
equ
 
	gHóp_Size
, 0xC00

57 .
globl
 
	g__HópBa£


58 .
globl
 
__HópLimô


59 
	g__HópBa£
:

60 .
Hóp_Size


61 .
•a˚
 
Hóp_Size


62 .
ídif


63 .
size
 
__HópBa£
, . - __HeapBase

64 
	g__HópLimô
:

65 .
size
 
__HópLimô
, . - 
	g__HópLimô


67 .
	g£˘i⁄
 .
	gi§_ve˘‹


68 .
	gÆign
 2

69 .
globl
 
__i§_ve˘‹


70 
	g__i§_ve˘‹
:

71 .
__SèckT›


72 .
Re£t_H™dÀr


73 .
NMI_H™dÀr


74 .
H¨dFau…_H™dÀr


75 .
MemM™age_H™dÀr


76 .
BusFau…_H™dÀr


77 .
UßgeFau…_H™dÀr


82 .
SVC_H™dÀr


83 .
DebugM⁄_H™dÀr


85 .
PídSV_H™dÀr


86 .
SysTick_H™dÀr


89 .
WWDG_IRQH™dÀr


90 .
PVD_IRQH™dÀr


91 .
TAMP_STAMP_IRQH™dÀr


92 .
RTC_WKUP_IRQH™dÀr


93 .
FLASH_IRQH™dÀr


94 .
RCC_IRQH™dÀr


95 .
EXTI0_IRQH™dÀr


96 .
EXTI1_IRQH™dÀr


97 .
EXTI2_IRQH™dÀr


98 .
EXTI3_IRQH™dÀr


99 .
EXTI4_IRQH™dÀr


100 .
DMA1_Såóm0_IRQH™dÀr


101 .
DMA1_Såóm1_IRQH™dÀr


102 .
DMA1_Såóm2_IRQH™dÀr


103 .
DMA1_Såóm3_IRQH™dÀr


104 .
DMA1_Såóm4_IRQH™dÀr


105 .
DMA1_Såóm5_IRQH™dÀr


106 .
DMA1_Såóm6_IRQH™dÀr


107 .
ADC_IRQH™dÀr


108 .
CAN1_TX_IRQH™dÀr


109 .
CAN1_RX0_IRQH™dÀr


110 .
CAN1_RX1_IRQH™dÀr


111 .
CAN1_SCE_IRQH™dÀr


112 .
EXTI9_5_IRQH™dÀr


113 .
TIM1_BRK_TIM9_IRQH™dÀr


114 .
TIM1_UP_TIM10_IRQH™dÀr


115 .
TIM1_TRG_COM_TIM11_IRQH™dÀr


116 .
TIM1_CC_IRQH™dÀr


117 .
TIM2_IRQH™dÀr


118 .
TIM3_IRQH™dÀr


119 .
TIM4_IRQH™dÀr


120 .
I2C1_EV_IRQH™dÀr


121 .
I2C1_ER_IRQH™dÀr


122 .
I2C2_EV_IRQH™dÀr


123 .
I2C2_ER_IRQH™dÀr


124 .
SPI1_IRQH™dÀr


125 .
SPI2_IRQH™dÀr


126 .
USART1_IRQH™dÀr


127 .
USART2_IRQH™dÀr


128 .
USART3_IRQH™dÀr


129 .
EXTI15_10_IRQH™dÀr


130 .
RTC_Aœrm_IRQH™dÀr


131 .
OTG_FS_WKUP_IRQH™dÀr


132 .
TIM8_BRK_TIM12_IRQH™dÀr


133 .
TIM8_UP_TIM13_IRQH™dÀr


134 .
TIM8_TRG_COM_TIM14_IRQH™dÀr


135 .
TIM8_CC_IRQH™dÀr


136 .
DMA1_Såóm7_IRQH™dÀr


137 .
FSMC_IRQH™dÀr


138 .
SDIO_IRQH™dÀr


139 .
TIM5_IRQH™dÀr


140 .
SPI3_IRQH™dÀr


141 .
UART4_IRQH™dÀr


142 .
UART5_IRQH™dÀr


143 .
TIM6_DAC_IRQH™dÀr


144 .
TIM7_IRQH™dÀr


145 .
DMA2_Såóm0_IRQH™dÀr


146 .
DMA2_Såóm1_IRQH™dÀr


147 .
DMA2_Såóm2_IRQH™dÀr


148 .
DMA2_Såóm3_IRQH™dÀr


149 .
DMA2_Såóm4_IRQH™dÀr


150 .
ETH_IRQH™dÀr


151 .
ETH_WKUP_IRQH™dÀr


152 .
CAN2_TX_IRQH™dÀr


153 .
CAN2_RX0_IRQH™dÀr


154 .
CAN2_RX1_IRQH™dÀr


155 .
CAN2_SCE_IRQH™dÀr


156 .
OTG_FS_IRQH™dÀr


157 .
DMA2_Såóm5_IRQH™dÀr


158 .
DMA2_Såóm6_IRQH™dÀr


159 .
DMA2_Såóm7_IRQH™dÀr


160 .
USART6_IRQH™dÀr


161 .
I2C3_EV_IRQH™dÀr


162 .
I2C3_ER_IRQH™dÀr


163 .
OTG_HS_EP1_OUT_IRQH™dÀr


164 .
OTG_HS_EP1_IN_IRQH™dÀr


165 .
OTG_HS_WKUP_IRQH™dÀr


166 .
OTG_HS_IRQH™dÀr


167 .
DCMI_IRQH™dÀr


168 .
CRYP_IRQH™dÀr


169 .
HASH_RNG_IRQH™dÀr


170 .
FPU_IRQH™dÀr


172 .
size
 
__i§_ve˘‹
, . - 
	g__i§_ve˘‹


174 .
	gãxt


175 .
	gthumb


176 .
	gthumb_func


177 .
	gÆign
 2

178 .
globl
 
	gRe£t_H™dÀr


179 .
ty≥
 
	gRe£t_H™dÀr
, %
fun˘i⁄


180 
	gRe£t_H™dÀr
:

188 
ldr
 
r1
, =
__ëext


189 
ldr
 
r2
, =
__d©a_°¨t__


190 
ldr
 
r3
, =
__d©a_íd__


196 .
Êash_to_øm_lo›
:

197 
cmp
 
r2
, 
r3


198 
ôâ
 
…


199 
ldæt
 
	gr0
, [
r1
], #4

200 
°æt
 
	gr0
, [
r2
], #4

201 
	gb…
 .
	gÊash_to_øm_lo›


203 
subs
 
	gr3
, 
r2


204 
	gbÀ
 .
	gÊash_to_øm_lo›_íd


205 .
	gÊash_to_øm_lo›
:

206 
subs
 
r3
, #4

207 
ldr
 
	gr0
, [
r1
, 
r3
]

208 
°r
 
	gr0
, [
r2
, 
r3
]

209 
	gbgt
 .
	gÊash_to_øm_lo›


210 .
	gÊash_to_øm_lo›_íd
:

213 #i‚de‡
__NO_SYSTEM_INIT


214 
ldr
 
r0
, =
Sy°emInô


215 
blx
 
r0


218 
ldr
 
r0
, =
_°¨t


219 
bx
 
r0


220 .
poﬁ


221 .
size
 
Re£t_H™dÀr
, . - 
	gRe£t_H™dÀr


226 .
	gÆign
 1

227 .
	gthumb_func


228 .
wók
 
	g_°¨t


229 .
ty≥
 
	g_°¨t
, %
fun˘i⁄


230 
	g_°¨t
:

233 
ldr
 
r1
, = 
__bss_°¨t__


234 
ldr
 
r2
, = 
__bss_íd__


235 
movs
 
r3
, #0

236 
	gb
 .
	gfûl_zîo_bss


237 .
	glo›_zîo_bss
:

238 
°r
 
r3
, [
r1
], #4

240 .
	gfûl_zîo_bss
:

241 
cmp
 
r1
, 
r2


242 
	gbcc
 .
lo›_zîo_bss


245 
bl
 
maö


246 
	gb
 .

247 .
size
 
	g_°¨t
, . - _start

252 .
ma¸o
 
def_úq_h™dÀr
 
	gh™dÀr_«me


253 .
	gÆign
 1

254 .
	gthumb_func


255 .
	gwók
 \
	gh™dÀr_«me


256 .
	gty≥
 \
	gh™dÀr_«me
, %
	gfun˘i⁄


257 \
	gh™dÀr_«me
 :

258 
b
 .

259 .
size
 \
h™dÀr_«me
, . - \
	gh™dÀr_«me


260 .
ídm


262 
def_úq_h™dÀr
 
NMI_H™dÀr


263 
def_úq_h™dÀr
 
H¨dFau…_H™dÀr


264 
def_úq_h™dÀr
 
MemM™age_H™dÀr


265 
def_úq_h™dÀr
 
BusFau…_H™dÀr


266 
def_úq_h™dÀr
 
UßgeFau…_H™dÀr


267 
def_úq_h™dÀr
 
SVC_H™dÀr


268 
def_úq_h™dÀr
 
DebugM⁄_H™dÀr


269 
def_úq_h™dÀr
 
PídSV_H™dÀr


270 
def_úq_h™dÀr
 
SysTick_H™dÀr


271 
def_úq_h™dÀr
 
DeÁu…_H™dÀr


274 
def_úq_h™dÀr
 
WWDG_IRQH™dÀr


275 
def_úq_h™dÀr
 
PVD_IRQH™dÀr


276 
def_úq_h™dÀr
 
TAMP_STAMP_IRQH™dÀr


277 
def_úq_h™dÀr
 
RTC_WKUP_IRQH™dÀr


278 
def_úq_h™dÀr
 
FLASH_IRQH™dÀr


279 
def_úq_h™dÀr
 
RCC_IRQH™dÀr


280 
def_úq_h™dÀr
 
EXTI0_IRQH™dÀr


281 
def_úq_h™dÀr
 
EXTI1_IRQH™dÀr


282 
def_úq_h™dÀr
 
EXTI2_IRQH™dÀr


283 
def_úq_h™dÀr
 
EXTI3_IRQH™dÀr


284 
def_úq_h™dÀr
 
EXTI4_IRQH™dÀr


285 
def_úq_h™dÀr
 
DMA1_Såóm0_IRQH™dÀr


286 
def_úq_h™dÀr
 
DMA1_Såóm1_IRQH™dÀr


287 
def_úq_h™dÀr
 
DMA1_Såóm2_IRQH™dÀr


288 
def_úq_h™dÀr
 
DMA1_Såóm3_IRQH™dÀr


289 
def_úq_h™dÀr
 
DMA1_Såóm4_IRQH™dÀr


290 
def_úq_h™dÀr
 
DMA1_Såóm5_IRQH™dÀr


291 
def_úq_h™dÀr
 
DMA1_Såóm6_IRQH™dÀr


292 
def_úq_h™dÀr
 
ADC_IRQH™dÀr


293 
def_úq_h™dÀr
 
CAN1_TX_IRQH™dÀr


294 
def_úq_h™dÀr
 
CAN1_RX0_IRQH™dÀr


295 
def_úq_h™dÀr
 
CAN1_RX1_IRQH™dÀr


296 
def_úq_h™dÀr
 
CAN1_SCE_IRQH™dÀr


297 
def_úq_h™dÀr
 
EXTI9_5_IRQH™dÀr


298 
def_úq_h™dÀr
 
TIM1_BRK_TIM9_IRQH™dÀr


299 
def_úq_h™dÀr
 
TIM1_UP_TIM10_IRQH™dÀr


300 
def_úq_h™dÀr
 
TIM1_TRG_COM_TIM11_IRQH™dÀr


301 
def_úq_h™dÀr
 
TIM1_CC_IRQH™dÀr


302 
def_úq_h™dÀr
 
TIM2_IRQH™dÀr


303 
def_úq_h™dÀr
 
TIM3_IRQH™dÀr


304 
def_úq_h™dÀr
 
TIM4_IRQH™dÀr


305 
def_úq_h™dÀr
 
I2C1_EV_IRQH™dÀr


306 
def_úq_h™dÀr
 
I2C1_ER_IRQH™dÀr


307 
def_úq_h™dÀr
 
I2C2_EV_IRQH™dÀr


308 
def_úq_h™dÀr
 
I2C2_ER_IRQH™dÀr


309 
def_úq_h™dÀr
 
SPI1_IRQH™dÀr


310 
def_úq_h™dÀr
 
SPI2_IRQH™dÀr


311 
def_úq_h™dÀr
 
USART1_IRQH™dÀr


312 
def_úq_h™dÀr
 
USART2_IRQH™dÀr


313 
def_úq_h™dÀr
 
USART3_IRQH™dÀr


314 
def_úq_h™dÀr
 
EXTI15_10_IRQH™dÀr


315 
def_úq_h™dÀr
 
RTC_Aœrm_IRQH™dÀr


316 
def_úq_h™dÀr
 
OTG_FS_WKUP_IRQH™dÀr


317 
def_úq_h™dÀr
 
TIM8_BRK_TIM12_IRQH™dÀr


318 
def_úq_h™dÀr
 
TIM8_UP_TIM13_IRQH™dÀr


319 
def_úq_h™dÀr
 
TIM8_TRG_COM_TIM14_IRQH™dÀr


320 
def_úq_h™dÀr
 
TIM8_CC_IRQH™dÀr


321 
def_úq_h™dÀr
 
DMA1_Såóm7_IRQH™dÀr


322 
def_úq_h™dÀr
 
FSMC_IRQH™dÀr


323 
def_úq_h™dÀr
 
SDIO_IRQH™dÀr


324 
def_úq_h™dÀr
 
TIM5_IRQH™dÀr


325 
def_úq_h™dÀr
 
SPI3_IRQH™dÀr


326 
def_úq_h™dÀr
 
UART4_IRQH™dÀr


327 
def_úq_h™dÀr
 
UART5_IRQH™dÀr


328 
def_úq_h™dÀr
 
TIM6_DAC_IRQH™dÀr


329 
def_úq_h™dÀr
 
TIM7_IRQH™dÀr


330 
def_úq_h™dÀr
 
DMA2_Såóm0_IRQH™dÀr


331 
def_úq_h™dÀr
 
DMA2_Såóm1_IRQH™dÀr


332 
def_úq_h™dÀr
 
DMA2_Såóm2_IRQH™dÀr


333 
def_úq_h™dÀr
 
DMA2_Såóm3_IRQH™dÀr


334 
def_úq_h™dÀr
 
DMA2_Såóm4_IRQH™dÀr


335 
def_úq_h™dÀr
 
ETH_IRQH™dÀr


336 
def_úq_h™dÀr
 
ETH_WKUP_IRQH™dÀr


337 
def_úq_h™dÀr
 
CAN2_TX_IRQH™dÀr


338 
def_úq_h™dÀr
 
CAN2_RX0_IRQH™dÀr


339 
def_úq_h™dÀr
 
CAN2_RX1_IRQH™dÀr


340 
def_úq_h™dÀr
 
CAN2_SCE_IRQH™dÀr


341 
def_úq_h™dÀr
 
OTG_FS_IRQH™dÀr


342 
def_úq_h™dÀr
 
DMA2_Såóm5_IRQH™dÀr


343 
def_úq_h™dÀr
 
DMA2_Såóm6_IRQH™dÀr


344 
def_úq_h™dÀr
 
DMA2_Såóm7_IRQH™dÀr


345 
def_úq_h™dÀr
 
USART6_IRQH™dÀr


346 
def_úq_h™dÀr
 
I2C3_EV_IRQH™dÀr


347 
def_úq_h™dÀr
 
I2C3_ER_IRQH™dÀr


348 
def_úq_h™dÀr
 
OTG_HS_EP1_OUT_IRQH™dÀr


349 
def_úq_h™dÀr
 
OTG_HS_EP1_IN_IRQH™dÀr


350 
def_úq_h™dÀr
 
OTG_HS_WKUP_IRQH™dÀr


351 
def_úq_h™dÀr
 
OTG_HS_IRQH™dÀr


352 
def_úq_h™dÀr
 
DCMI_IRQH™dÀr


353 
def_úq_h™dÀr
 
CRYP_IRQH™dÀr


354 
def_úq_h™dÀr
 
HASH_RNG_IRQH™dÀr


355 
def_úq_h™dÀr
 
	gFPU_IRQH™dÀr


357 .
	gíd


	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\src\system_stm32f4xx.c

123 
	~"°m32f4xx.h
"

150 
	#VECT_TAB_OFFSET
 0x00

	)

156 
	#PLL_M
 25

	)

157 
	#PLL_N
 336

	)

160 
	#PLL_P
 2

	)

163 
	#PLL_Q
 7

	)

183 
uöt32_t
 
	gSy°emC‹eClock
 = 168000000;

185 
__I
 
uöt8_t
 
	gAHBPªscTabÀ
[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

195 
SëSysClock
();

196 #i‡
deföed
 (
DATA_IN_ExtSRAM
Ë|| deföed (
DATA_IN_ExtSDRAM
)

197 
Sy°emInô_ExtMemCé
();

215 
	$Sy°emInô
()

218 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

219 
SCB
->
CPACR
 |= ((3UL << 10*2)|(3UL << 11*2));

223 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

226 
RCC
->
CFGR
 = 0x00000000;

229 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

232 
RCC
->
PLLCFGR
 = 0x24003010;

235 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

238 
RCC
->
CIR
 = 0x00000000;

240 #i‡
	`deföed
 (
DATA_IN_ExtSRAM
Ë|| deföed (
DATA_IN_ExtSDRAM
)

241 
	`Sy°emInô_ExtMemCé
();

246 
	`SëSysClock
();

249 #ifde‡
VECT_TAB_SRAM


250 
SCB
->
VTOR
 = 
SRAM_BASE
 | 
VECT_TAB_OFFSET
;

252 
SCB
->
VTOR
 = 
FLASH_BASE
 | 
VECT_TAB_OFFSET
;

254 
	}
}

292 
	$Sy°emC‹eClockUpd©e
()

294 
uöt32_t
 
tmp
 = 0, 
∂lvco
 = 0, 
∂Õ
 = 2, 
∂lsour˚
 = 0, 
∂lm
 = 2;

297 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

299 
tmp
)

302 
Sy°emC‹eClock
 = 
HSI_VALUE
;

305 
Sy°emC‹eClock
 = 
HSE_VALUE
;

312 
∂lsour˚
 = (
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLSRC
) >> 22;

313 
∂lm
 = 
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLM
;

315 i‡(
∂lsour˚
 != 0)

318 
∂lvco
 = (
HSE_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

323 
∂lvco
 = (
HSI_VALUE
 / 
∂lm
Ë* ((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLN
) >> 6);

326 
∂Õ
 = (((
RCC
->
PLLCFGR
 & 
RCC_PLLCFGR_PLLP
) >>16) + 1 ) *2;

327 
Sy°emC‹eClock
 = 
∂lvco
/
∂Õ
;

330 
Sy°emC‹eClock
 = 
HSI_VALUE
;

335 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4)];

337 
Sy°emC‹eClock
 >>
tmp
;

338 
	}
}

348 
	$SëSysClock
()

353 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

356 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

361 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

362 
SèπUpCou¡î
++;

363 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

365 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

367 
HSESètus
 = (
uöt32_t
)0x01;

371 
HSESètus
 = (
uöt32_t
)0x00;

374 i‡(
HSESètus
 =(
uöt32_t
)0x01)

377 
RCC
->
APB1ENR
 |
RCC_APB1ENR_PWREN
;

378 
PWR
->
CR
 |
PWR_CR_VOS
;

381 
RCC
->
CFGR
 |
RCC_CFGR_HPRE_DIV1
;

384 
RCC
->
CFGR
 |
RCC_CFGR_PPRE2_DIV2
;

387 
RCC
->
CFGR
 |
RCC_CFGR_PPRE1_DIV4
;

390 
RCC
->
PLLCFGR
 = 
PLL_M
 | (
PLL_N
 << 6Ë| (((
PLL_P
 >> 1) -1) << 16) |

391 (
RCC_PLLCFGR_PLLSRC_HSE
Ë| (
PLL_Q
 << 24);

394 
RCC
->
CR
 |
RCC_CR_PLLON
;

397 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

402 
FLASH
->
ACR
 = 
FLASH_ACR_PRFTEN
 | 
FLASH_ACR_ICEN
 |
FLASH_ACR_DCEN
 |
FLASH_ACR_LATENCY_5WS
;

405 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

406 
RCC
->
CFGR
 |
RCC_CFGR_SW_PLL
;

409 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
 ) !
RCC_CFGR_SWS_PLL
);

418 
	}
}

426 #ifde‡
DATA_IN_ExtSRAM


435 
	$Sy°emInô_ExtMemCé
()

458 
RCC
->
AHB1ENR
 |= 0x00000078;

461 
GPIOD
->
AFR
[0] = 0x00cc00cc;

462 
GPIOD
->
AFR
[1] = 0xcccccccc;

464 
GPIOD
->
MODER
 = 0xaaaa0a0a;

466 
GPIOD
->
OSPEEDR
 = 0xffff0f0f;

468 
GPIOD
->
OTYPER
 = 0x00000000;

470 
GPIOD
->
PUPDR
 = 0x00000000;

473 
GPIOE
->
AFR
[0] = 0xcccccccc;

474 
GPIOE
->
AFR
[1] = 0xcccccccc;

476 
GPIOE
->
MODER
 = 0xaaaaaaaa;

478 
GPIOE
->
OSPEEDR
 = 0xffffffff;

480 
GPIOE
->
OTYPER
 = 0x00000000;

482 
GPIOE
->
PUPDR
 = 0x00000000;

485 
GPIOF
->
AFR
[0] = 0x00cccccc;

486 
GPIOF
->
AFR
[1] = 0xcccc0000;

488 
GPIOF
->
MODER
 = 0xaa000aaa;

490 
GPIOF
->
OSPEEDR
 = 0xff000fff;

492 
GPIOF
->
OTYPER
 = 0x00000000;

494 
GPIOF
->
PUPDR
 = 0x00000000;

497 
GPIOG
->
AFR
[0] = 0x00cccccc;

498 
GPIOG
->
AFR
[1] = 0x000000c0;

500 
GPIOG
->
MODER
 = 0x00080aaa;

502 
GPIOG
->
OSPEEDR
 = 0x000c0fff;

504 
GPIOG
->
OTYPER
 = 0x00000000;

506 
GPIOG
->
PUPDR
 = 0x00000000;

510 
RCC
->
AHB3ENR
 |= 0x00000001;

513 
FMC_B™k1
->
BTCR
[2] = 0x00001011;

514 
FMC_B™k1
->
BTCR
[3] = 0x00000201;

515 
FMC_B™k1E
->
BWTR
[2] = 0x0fffffff;

545 
	}
}

548 #ifde‡
DATA_IN_ExtSDRAM


557 
	$Sy°emInô_ExtMemCé
()

559 
uöt32_t
 
tm¥eg
 = 0, 
timeout
 = 0xFFFF;

560 
uöt32_t
 
ödex
;

564 
RCC
->
AHB1ENR
 |= 0x000001FC;

567 
GPIOC
->
AFR
[0] = 0x0000000c;

568 
GPIOC
->
AFR
[1] = 0x00007700;

570 
GPIOC
->
MODER
 = 0x00a00002;

572 
GPIOC
->
OSPEEDR
 = 0x00a00002;

574 
GPIOC
->
OTYPER
 = 0x00000000;

576 
GPIOC
->
PUPDR
 = 0x00500000;

579 
GPIOD
->
AFR
[0] = 0x000000CC;

580 
GPIOD
->
AFR
[1] = 0xCC000CCC;

582 
GPIOD
->
MODER
 = 0xA02A000A;

584 
GPIOD
->
OSPEEDR
 = 0xA02A000A;

586 
GPIOD
->
OTYPER
 = 0x00000000;

588 
GPIOD
->
PUPDR
 = 0x00000000;

591 
GPIOE
->
AFR
[0] = 0xC00000CC;

592 
GPIOE
->
AFR
[1] = 0xCCCCCCCC;

594 
GPIOE
->
MODER
 = 0xAAAA800A;

596 
GPIOE
->
OSPEEDR
 = 0xAAAA800A;

598 
GPIOE
->
OTYPER
 = 0x00000000;

600 
GPIOE
->
PUPDR
 = 0x00000000;

603 
GPIOF
->
AFR
[0] = 0xcccccccc;

604 
GPIOF
->
AFR
[1] = 0xcccccccc;

606 
GPIOF
->
MODER
 = 0xAA800AAA;

608 
GPIOF
->
OSPEEDR
 = 0xAA800AAA;

610 
GPIOF
->
OTYPER
 = 0x00000000;

612 
GPIOF
->
PUPDR
 = 0x00000000;

615 
GPIOG
->
AFR
[0] = 0xcccccccc;

616 
GPIOG
->
AFR
[1] = 0xcccccccc;

618 
GPIOG
->
MODER
 = 0xaaaaaaaa;

620 
GPIOG
->
OSPEEDR
 = 0xaaaaaaaa;

622 
GPIOG
->
OTYPER
 = 0x00000000;

624 
GPIOG
->
PUPDR
 = 0x00000000;

627 
GPIOH
->
AFR
[0] = 0x00C0CC00;

628 
GPIOH
->
AFR
[1] = 0xCCCCCCCC;

630 
GPIOH
->
MODER
 = 0xAAAA08A0;

632 
GPIOH
->
OSPEEDR
 = 0xAAAA08A0;

634 
GPIOH
->
OTYPER
 = 0x00000000;

636 
GPIOH
->
PUPDR
 = 0x00000000;

639 
GPIOI
->
AFR
[0] = 0xCCCCCCCC;

640 
GPIOI
->
AFR
[1] = 0x00000CC0;

642 
GPIOI
->
MODER
 = 0x0028AAAA;

644 
GPIOI
->
OSPEEDR
 = 0x0028AAAA;

646 
GPIOI
->
OTYPER
 = 0x00000000;

648 
GPIOI
->
PUPDR
 = 0x00000000;

652 
RCC
->
AHB3ENR
 |= 0x00000001;

655 
FMC_B™k5_6
->
SDCR
[0] = 0x000029D0;

656 
FMC_B™k5_6
->
SDTR
[0] = 0x01115351;

660 
FMC_B™k5_6
->
SDCMR
 = 0x00000011;

661 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

662 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

664 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

668 
ödex
 = 0; index<1000; index++);

671 
FMC_B™k5_6
->
SDCMR
 = 0x00000012;

672 
timeout
 = 0xFFFF;

673 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

675 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

679 
FMC_B™k5_6
->
SDCMR
 = 0x00000073;

680 
timeout
 = 0xFFFF;

681 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

683 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

687 
FMC_B™k5_6
->
SDCMR
 = 0x00046014;

688 
timeout
 = 0xFFFF;

689 (
tm¥eg
 !0Ë& (
timeout
-- > 0))

691 
tm¥eg
 = 
FMC_B™k5_6
->
SDSR
 & 0x00000020;

695 
tm¥eg
 = 
FMC_B™k5_6
->
SDRTR
;

696 
FMC_B™k5_6
->
SDRTR
 = (
tm¥eg
 | (0x0000027C<<1));

699 
tm¥eg
 = 
FMC_B™k5_6
->
SDCR
[0];

700 
FMC_B™k5_6
->
SDCR
[0] = (
tm¥eg
 & 0xFFFFFDFF);

726 
	}
}

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\stm32f407vg_flash.ld

33 
OUTPUT_FORMAT
("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")

34 
	$OUTPUT_ARCH
(
¨m
)

35 
	$SEARCH_DIR
(.)

38 
MEMORY


40 
	`ROM
 (
rx
Ë: 
ORIGIN
 = 0x08000000, 
LENGTH
 = 1024
K


41 
	`RAM
 (
rwx
Ë: 
ORIGIN
 = 0x20000000, 
LENGTH
 = 128
K


42 
	`CCRAM
 (
rwx
Ë: 
ORIGIN
 = 0x10000000, 
LENGTH
 = 64
K


43 
	}
}

73 
	gSECTIONS


75 .
	gãxt
 :

77 
KEEP
(*(.
i§_ve˘‹
))

78 *(.
ãxt
*)

80 
KEEP
(*(.
öô
))

81 
KEEP
(*(.
föi
))

84 *
¸tbegö
.
o
(.
˘‹s
)

85 *
¸tbegö
?.
o
(.
˘‹s
)

86 *(
EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
˘‹s
)

87 *(
SORT
(.
˘‹s
.*))

88 *(.
˘‹s
)

91 *
¸tbegö
.
o
(.
dt‹s
)

92 *
¸tbegö
?.
o
(.
dt‹s
)

93 *(
EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
dt‹s
)

94 *(
SORT
(.
dt‹s
.*))

95 *(.
dt‹s
)

97 *(.
rod©a
*)

99 
KEEP
(*(.
eh_‰ame
*))

100 } > 
ROM


102 .
ARM
.
exèb
 :

104 *(.
ARM
.
exèb
* .
gnu
.
lök⁄˚
.
¨mexèb
.*)

105 } > 
ROM


107 
__exidx_°¨t
 = .;

108 .
	gARM
.
	gexidx
 :

110 *(.
ARM
.
exidx
* .
gnu
.
lök⁄˚
.
¨mexidx
.*)

111 } > 
ROM


112 
__exidx_íd
 = .;

114 
	g__ëext
 = .;

116 .
	gd©a
 : 
AT
 (
__ëext
)

118 
__d©a_°¨t__
 = .;

119 *(
	gvèbÀ
)

120 *(.
	gd©a
*)

122 . = 
ALIGN
(4);

124 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_°¨t
 = .);

125 
KEEP
(*(.
¥eöô_¨øy
))

126 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_íd
 = .);

128 . = 
ALIGN
(4);

130 
PROVIDE_HIDDEN
 (
__öô_¨øy_°¨t
 = .);

131 
KEEP
(*(
SORT
(.
öô_¨øy
.*)))

132 
KEEP
(*(.
öô_¨øy
))

133 
PROVIDE_HIDDEN
 (
__öô_¨øy_íd
 = .);

136 . = 
ALIGN
(4);

138 
PROVIDE_HIDDEN
 (
__föi_¨øy_°¨t
 = .);

139 
KEEP
(*(
SORT
(.
föi_¨øy
.*)))

140 
KEEP
(*(.
föi_¨øy
))

141 
PROVIDE_HIDDEN
 (
__föi_¨øy_íd
 = .);

143 . = 
ALIGN
(4);

145 
	g__d©a_íd__
 = .;

147 } > 
	gRAM


149 .
bss
 (
NOLOAD
):

151 
__bss_°¨t__
 = .;

152 *(.
	gbss
*)

153 *(
	gCOMMON
)

154 
	g__bss_íd__
 = .;

155 } > 
	gRAM


157 .
hóp
 (
NOLOAD
):

159 
__íd__
 = .;

160 
	gíd
 = 
__íd__
;

161 *(.
	ghóp
*)

162 
	g__HópLimô
 = .;

163 } > 
	gRAM


168 .
°ack_dummy
 (
NOLOAD
):

170 *(.
°ack
)

171 } > 
RAM


175 
__SèckT›
 = 
ORIGIN
(
RAM
Ë+ 
LENGTH
(RAM);

176 
	g__SèckLimô
 = 
__SèckT›
 - 
SIZEOF
(.
°ack_dummy
);

177 
PROVIDE
(
__°ack
 = 
__SèckT›
);

180 
ASSERT
(
__SèckLimô
 >
__HópLimô
, "region RAM overflowed with stack")

	@C:\Users\Bo\Documents\EmBitz\Projects\GPIO\stm32f407vg_sram.ld

33 
OUTPUT_FORMAT
("elf32-littlearm", "elf32-littlearm", "elf32-littlearm")

34 
	$OUTPUT_ARCH
(
¨m
)

35 
	$SEARCH_DIR
(.)

38 
MEMORY


40 
	`ROM
 (
rx
Ë: 
ORIGIN
 = 0x08000000, 
LENGTH
 = 1024
K


41 
	`RAM
 (
rwx
Ë: 
ORIGIN
 = 0x20000000, 
LENGTH
 = 128
K


42 
	`CCRAM
 (
rwx
Ë: 
ORIGIN
 = 0x10000000, 
LENGTH
 = 64
K


43 
	}
}

73 
	gSECTIONS


75 .
	gãxt
 :

77 
KEEP
(*(.
i§_ve˘‹
))

78 *(.
ãxt
*)

80 
KEEP
(*(.
öô
))

81 
KEEP
(*(.
föi
))

84 *
¸tbegö
.
o
(.
˘‹s
)

85 *
¸tbegö
?.
o
(.
˘‹s
)

86 *(
EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
˘‹s
)

87 *(
SORT
(.
˘‹s
.*))

88 *(.
˘‹s
)

91 *
¸tbegö
.
o
(.
dt‹s
)

92 *
¸tbegö
?.
o
(.
dt‹s
)

93 *(
EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
dt‹s
)

94 *(
SORT
(.
dt‹s
.*))

95 *(.
dt‹s
)

97 *(.
rod©a
*)

99 
KEEP
(*(.
eh_‰ame
*))

100 } > 
RAM


102 .
ARM
.
exèb
 :

104 *(.
ARM
.
exèb
* .
gnu
.
lök⁄˚
.
¨mexèb
.*)

105 } > 
RAM


107 
__exidx_°¨t
 = .;

108 .
	gARM
.
	gexidx
 :

110 *(.
ARM
.
exidx
* .
gnu
.
lök⁄˚
.
¨mexidx
.*)

111 } > 
RAM


112 
__exidx_íd
 = .;

114 
	g__ëext
 = .;

116 .
	gd©a
 : 
AT
 (
__ëext
)

118 
__d©a_°¨t__
 = .;

119 *(
	gvèbÀ
)

120 *(.
	gd©a
*)

122 . = 
ALIGN
(4);

124 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_°¨t
 = .);

125 
KEEP
(*(.
¥eöô_¨øy
))

126 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_íd
 = .);

128 . = 
ALIGN
(4);

130 
PROVIDE_HIDDEN
 (
__öô_¨øy_°¨t
 = .);

131 
KEEP
(*(
SORT
(.
öô_¨øy
.*)))

132 
KEEP
(*(.
öô_¨øy
))

133 
PROVIDE_HIDDEN
 (
__öô_¨øy_íd
 = .);

136 . = 
ALIGN
(4);

138 
PROVIDE_HIDDEN
 (
__föi_¨øy_°¨t
 = .);

139 
KEEP
(*(
SORT
(.
föi_¨øy
.*)))

140 
KEEP
(*(.
föi_¨øy
))

141 
PROVIDE_HIDDEN
 (
__föi_¨øy_íd
 = .);

143 . = 
ALIGN
(4);

145 
	g__d©a_íd__
 = .;

147 } > 
	gRAM


149 .
bss
 (
NOLOAD
):

151 
__bss_°¨t__
 = .;

152 *(.
	gbss
*)

153 *(
	gCOMMON
)

154 
	g__bss_íd__
 = .;

155 } > 
	gRAM


157 .
hóp
 (
NOLOAD
):

159 
__íd__
 = .;

160 
	gíd
 = 
__íd__
;

161 *(.
	ghóp
*)

162 
	g__HópLimô
 = .;

163 } > 
	gRAM


168 .
°ack_dummy
 (
NOLOAD
):

170 . = 
ALIGN
(8);

171 *(.
	g°ack
)

172 } > 
RAM


176 
	g__SèckT›
 = 
ORIGIN
(
RAM
Ë+ 
LENGTH
(RAM);

177 
	g__SèckLimô
 = 
__SèckT›
 - 
SIZEOF
(.
°ack_dummy
);

178 
PROVIDE
(
__°ack
 = 
__SèckT›
);

181 
ASSERT
(
__SèckLimô
 >
__HópLimô
, "region RAM overflowed with stack")

	@
1
.
0
72
4804
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\misc.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_adc.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_can.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_crc.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_cryp.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_dac.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_dbgmcu.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_dcmi.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_dma.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_exti.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_flash.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_fsmc.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_gpio.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_hash.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_i2c.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_iwdg.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_pwr.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_rcc.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_rng.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_rtc.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_sdio.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_spi.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_syscfg.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_tim.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_usart.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\inc\stm32f4xx_wwdg.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\misc.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_adc.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_can.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_crc.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_cryp.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_cryp_aes.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_cryp_des.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_cryp_tdes.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_dac.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_dbgmcu.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_dcmi.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_dma.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_exti.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_flash.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_fsmc.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_gpio.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_hash.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_hash_md5.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_hash_sha1.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_i2c.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_iwdg.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_pwr.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_rcc.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_rng.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_rtc.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_sdio.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_spi.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_syscfg.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_tim.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_usart.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\SPL\src\stm32f4xx_wwdg.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\cmsis\arm_common_tables.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\cmsis\arm_math.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\cmsis\core_cm4.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\cmsis\core_cm4_simd.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\cmsis\core_cmFunc.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\cmsis\core_cmInstr.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\inc\stm32f4xx.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\inc\stm32f4xx_conf.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\inc\system_stm32f4xx.h
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\readme.txt
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\src\main.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\src\startup_stm32f4xx.S
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\src\system_stm32f4xx.c
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\stm32f407vg_flash.ld
C:\Users\Bo\Documents\EmBitz\Projects\GPIO\stm32f407vg_sram.ld
