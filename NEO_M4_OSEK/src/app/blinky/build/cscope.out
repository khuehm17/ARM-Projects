cscope 15 D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\app\blinky\build"               0002819460
	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\doc\README.txt

1 
	gREADME
 !

3 
This
 
¥oje˘
 
is
 
u£d
 
öôül
 
devñ›emít
 
fúmw¨e
 
M4
 
c‹e
 
ba£d
 
⁄
 
	gi
.
MX6SX
 
UDOO
 
NEO


4 
devñ›mít
 
	gkô
. 
PÀa£
 
Êash
 
Löux
 
image
 
öto
 
SD
 
	gˇrd
, 
boŸ
 
up
 Löux 
bef‹e
 
°¨tög
 
debuggî
 
u∆ess


5 
we
 
	gˇn
't connect JTAG with M4.

7 
This
 
sour˚
 
code
 
is
 
ba£d
 
⁄
 
	gFªeRTOS_BSP_1
.0.0
_iMX6SX
 
‰om
 
	gNXP
, 
⁄ly
 
∂©f‹m
 
•ecific
 codêi†
	gkït
,

8 
FªeRTOS
 
sour˚
 
code
 
is
 
ªmoved
 
out
 
of
 
the
 sour˚ 
	gåì
.

10 
Sëtög
 
up
 
	gívú⁄mít
, 
the
 
fﬁlowög
 
so·w¨e
 
∑ckages
 
¨e
 
	gªquúed
 :

12 
Jlök
 
so·w¨e
 
∑ckage
 
vîsi⁄
 : 
JLök
 
V5
.12d 
‹
 
œãr
.

13 
UDOO
 
Löux
 
Image
 : 
udoobu¡u
-
udoo
-
√o
-
möimÆ_2
.0
rc2
.
zù


14 
PHP
 
CLI
 
Wödows
 : 
php
-5.6.20-
¡s
-
Wö32
-
VC11
-
x64
.
zù


15 
EmBôz
 
IDE
 : EmBitz 0.42

17 
U¨t
 
Debug
 
C⁄√˘i⁄
:

19 
J4_0
 (
UART5_RX
Ë<--> 
RS232
 
TX


20 
J4_1
 (
UART5_TX
Ë<--> 
RS232
 
RX


22 
N‹mÆy
 
OSEK
 
oû
 
gíî©‹
 
is
 
dißbÀd
 
to
 
íabÀ
 :

24 
From
 
Míu
 -> 
Proje˘
 -> 
Buûd
 
›ti⁄s
 -> 
Pª
/
po°
 
buûd
 
°ïs
 -> 
ch™ge
 
dr›down
 
box
 
to
 
íabÀ
.

25 (
This
 
ãp
 
is
 
√ed
 
⁄ly
 
⁄ëime
 
right
 
a·î
 
ch™gög
 
c⁄fig
.
oû
 
fûe
)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\app\blinky\etc\config.oil

1 
OSEK
 
	gOSEK
 {

3 
OS
 
	gExam∂eOS
 {

4 
	gSTATUS
 = 
EXTENDED
;

5 
	gERRORHOOK
 = 
TRUE
;

6 
	gPRETASKHOOK
 = 
FALSE
;

7 
	gPOSTTASKHOOK
 = 
FALSE
;

8 
	gSTARTUPHOOK
 = 
FALSE
;

9 
	gSHUTDOWNHOOK
 = 
FALSE
;

10 
	gUSERESSCHEDULER
 = 
FALSE
;

11 
	gMEMMAP
 = 
FALSE
;

14 
	gAPPMODE
 = 
AµMode1
;

16 
	gEVENT
 = 
evBlök
;

18 
TASK
 
	gTaskInô
 {

19 
	gPRIORITY
 = 1;

20 
	gACTIVATION
 = 1;

21 
	gAUTOSTART
 = 
TRUE
 {

22 
APPMODE
 = 
AµMode1
;

24 
	gSTACK
 = 512;

25 
	gTYPE
 = 
BASIC
;

26 
	gSCHEDULE
 = 
NON
;

29 
TASK
 
	gTaskBlök
 {

30 
	gPRIORITY
 = 5;

31 
	gACTIVATION
 = 1;

32 
	gSTACK
 = 512;

33 
	gTYPE
 = 
EXTENDED
;

34 
	gSCHEDULE
 = 
FULL
;

35 
	gEVENT
 = 
evBlök
;

38 
TASK
 
	gTaskPîiodic
 {

39 
	gPRIORITY
 = 10;

40 
	gACTIVATION
 = 1;

41 
	gSTACK
 = 512;

42 
	gTYPE
 = 
BASIC
;

43 
	gSCHEDULE
 = 
FULL
;

46 
TASK
 
	gTaskBackground
 {

47 
	gPRIORITY
 = 1;

48 
	gACTIVATION
 = 1;

49 
	gSTACK
 = 512;

50 
	gTYPE
 = 
BASIC
;

51 
	gSCHEDULE
 = 
FULL
;

54 
ALARM
 
	gA˘iv©eTaskPîiodic
 {

55 
	gCOUNTER
 = 
H¨dw¨eCou¡î
;

56 
	gACTION
 = 
ACTIVATETASK
 {

57 
TASK
 = 
TaskPîiodic
;

61 
ALARM
 
	gAµCÆlbackAœrm
 {

62 
	gCOUNTER
 = 
H¨dw¨eCou¡î
;

63 
	gACTION
 = 
ALARMCALLBACK
 {

64 
ALARMCALLBACKNAME
 = "AppCallback";

68 
COUNTER
 
	gH¨dw¨eCou¡î
 {

69 
	gMAXALLOWEDVALUE
 = 60000000;

70 
	gTICKSPERBASE
 = 1;

71 
	gMINCYCLE
 = 1;

72 
	gTYPE
 = 
HARDWARE
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\app\blinky\hardware_init.c

31 
	~"bﬂrd.h
"

32 
	~"pö_mux.h
"

34 
	$h¨dw¨e_öô
()

37 
	`BOARD_RdcInô
();

40 
	`BOARD_ClockInô
();

43 
	`dbg_u¨t_öô
();

44 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\app\blinky\ld\MCIMX6X_M4_tcm.ld

48 
	$ENTRY
(
Re£t_H™dÀr
)

50 
HEAP_SIZE
 = 
	`DEFINED
(
__hóp_size__
) ? __heap_size__ : 0x1000;

51 
STACK_SIZE
 = 
	`DEFINED
(
__°ack_size__
) ? __stack_size__ : 0x2000;

60 
MEMORY


62 
	`m_öãºu±s
 (
RX
Ë: 
ORIGIN
 = 0x1FFF8000, 
LENGTH
 = 0x00000300

63 
	`m_ãxt
 (
RX
Ë: 
ORIGIN
 = 0x1FFF8300, 
LENGTH
 = 0x00006000

64 
	`m_hóp
 (
RW
Ë: 
ORIGIN
 = 0x1FFFE300, 
LENGTH
 = 0x00001D00

65 
	`m_d©a
 (
RW
Ë: 
ORIGIN
 = 0x20000000, 
LENGTH
 = 0x00008000

66 
	}
}

69 
	gSECTIONS


72 .
	göãºu±s
 :

74 
__VECTOR_TABLE
 = .;

75 . = 
ALIGN
(4);

76 
KEEP
(*(.
i§_ve˘‹
))

77 . = 
ALIGN
(4);

78 } > 
	gm_öãºu±s


81 .
	gãxt
 :

83 . = 
ALIGN
(4);

84 *(.
	gãxt
)

85 *(.
	gãxt
*)

86 *(.
	grod©a
)

87 *(.
	grod©a
*)

88 *(.
	gglue_7
)

89 *(.
	gglue_7t
)

90 *(.
	geh_‰ame
)

91 
KEEP
 (*(.
öô
))

92 
KEEP
 (*(.
föi
))

93 . = 
ALIGN
(4);

94 } > 
	gm_ãxt


96 .
	gARM
.
	gexèb
 :

98 *(.
ARM
.
exèb
* .
gnu
.
lök⁄˚
.
¨mexèb
.*)

99 } > 
m_ãxt


101 .
ARM
 :

103 
__exidx_°¨t
 = .;

104 *(.
	gARM
.
	gexidx
*)

105 
	g__exidx_íd
 = .;

106 } > 
	gm_ãxt


108 .
	g˘‹s
 :

110 
__CTOR_LIST__
 = .;

120 
KEEP
 (*
¸tbegö
.
o
(.
˘‹s
))

121 
KEEP
 (*
¸tbegö
?.
o
(.
˘‹s
))

126 
KEEP
 (*(
EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
˘‹s
))

127 
KEEP
 (*(
SORT
(.
˘‹s
.*)))

128 
KEEP
 (*(.
˘‹s
))

129 
	g__CTOR_END__
 = .;

130 } > 
	gm_ãxt


132 .
	gdt‹s
 :

134 
__DTOR_LIST__
 = .;

135 
KEEP
 (*
¸tbegö
.
o
(.
dt‹s
))

136 
KEEP
 (*
¸tbegö
?.
o
(.
dt‹s
))

137 
KEEP
 (*(
EXCLUDE_FILE
(*
¸ãnd
?.
o
 *¸ãnd.oË.
dt‹s
))

138 
KEEP
 (*(
SORT
(.
dt‹s
.*)))

139 
KEEP
 (*(.
dt‹s
))

140 
	g__DTOR_END__
 = .;

141 } > 
	gm_ãxt


143 .
	g¥eöô_¨øy
 :

145 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_°¨t
 = .);

146 
KEEP
 (*(.
¥eöô_¨øy
*))

147 
PROVIDE_HIDDEN
 (
__¥eöô_¨øy_íd
 = .);

148 } > 
	gm_ãxt


150 .
	göô_¨øy
 :

152 
PROVIDE_HIDDEN
 (
__öô_¨øy_°¨t
 = .);

153 
KEEP
 (*(
SORT
(.
öô_¨øy
.*)))

154 
KEEP
 (*(.
öô_¨øy
*))

155 
PROVIDE_HIDDEN
 (
__öô_¨øy_íd
 = .);

156 } > 
	gm_ãxt


158 .
	gföi_¨øy
 :

160 
PROVIDE_HIDDEN
 (
__föi_¨øy_°¨t
 = .);

161 
KEEP
 (*(
SORT
(.
föi_¨øy
.*)))

162 
KEEP
 (*(.
föi_¨øy
*))

163 
PROVIDE_HIDDEN
 (
__föi_¨øy_íd
 = .);

164 } > 
m_ãxt


166 
	g__ëext
 = .;

167 
	g__DATA_ROM
 = .;

169 .
	gd©a
 : 
AT
(
__DATA_ROM
)

171 . = 
ALIGN
(4);

172 
	g__DATA_RAM
 = .;

173 
	g__d©a_°¨t__
 = .;

174 *(.
	gd©a
)

175 *(.
	gd©a
*)

176 
KEEP
(*(.
j¸
*))

177 . = 
ALIGN
(4);

178 
	g__d©a_íd__
 = .;

179 } > 
m_d©a


181 
	g__DATA_END
 = 
__DATA_ROM
 + (
__d©a_íd__
 - 
__d©a_°¨t__
);

182 
	gãxt_íd
 = 
ORIGIN
(
m_ãxt
Ë+ 
LENGTH
(m_text);

183 
ASSERT
(
__DATA_END
 <
ãxt_íd
, "region m_text overflowed withÅextánd data")

186 .
	gbss
 :

189 . = 
ALIGN
(4);

190 
	g__START_BSS
 = .;

191 
	g__bss_°¨t__
 = .;

192 *(.
	gbss
)

193 *(.
	gbss
*)

194 *(
	gCOMMON
)

195 . = 
ALIGN
(4);

196 
	g__bss_íd__
 = .;

197 
	g__END_BSS
 = .;

198 } > 
	gm_d©a


200 .
	ghóp
 :

202 . = 
ALIGN
(8);

203 
	g__íd__
 = .;

204 
PROVIDE
(
íd
 = .);

205 
	g__HópBa£
 = .;

206 . +
HEAP_SIZE
;

207 
	g__HópLimô
 = .;

208 } > 
	gm_hóp


210 .
	g°ack
 :

212 . = 
ALIGN
(8);

213 . +
STACK_SIZE
;

214 } > 
m_d©a


217 
	g__SèckT›
 = 
ORIGIN
(
m_d©a
Ë+ 
LENGTH
(m_data);

218 
	g__SèckLimô
 = 
__SèckT›
 - 
STACK_SIZE
;

219 
PROVIDE
(
__°ack
 = 
__SèckT›
);

221 .
	gARM
.
	g©åibuãs
 0 : { *(.
ARM
.
©åibuãs
) }

223 
ASSERT
(
__SèckLimô
 >
__HópLimô
, "region m_data overflowed with stackánd heap")

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\app\blinky\main.c

34 
	~<°dio.h
>

35 
	~"bﬂrd.h
"

36 
	~"gpio_pös.h
"

37 
	~"gpio_imx.h
"

38 
	~"debug_c⁄sﬁe_imx.h
"

39 
	~"os.h
"

45 
	#TRUE
 1

	)

46 
	#FALSE
 0

	)

57 
	$Inô_GPIO_LED
()

59 
gpio_öô_c⁄fig_t
 
Àd_d10
 = {

60 .
pö
 = 
gpioLed
.pin,

61 .
dúe˘i⁄
 = 
gpioDigôÆOuçut
,

62 .
öãºu±Mode
 = 
gpioNoI¡mode


65 
	`GPIO_Inô
(
gpioLed
.
ba£
, &
Àd_d10
);

67 
	}
}

69 
	$maö
()

72 
	`h¨dw¨e_öô
();

75 
	`c⁄figuª_gpio_pö
(&
gpioLed
);

78 
	`Inô_GPIO_LED
();

81 
	`GPIO_WrôePöOuçut
(
gpioLed
.
ba£
, gpioLed.
pö
, 
gpioPöCÀ¨
);

84 
	`debug_¥ötf
("Starting OSEK-OS in AppMode1\r\n");

86 
	`SèπOS
(
AµMode1
);

89 
TRUE
);

90 
	}
}

92 
	$Eº‹Hook
()

95 
	`debug_¥ötf
("kernelÖanic\r\n");

96 
	`ShutdownOS
(0);

97 
	}
}

99 
	$TASK
(
TaskInô
)

102 
	`debug_¥ötf
("InitTask: SetRelAlarm for TaskPeriodic.\r\n");

103 
	`SëRñAœrm
(
A˘iv©eTaskPîiodic
, 0, 500);

106 
	`debug_¥ötf
("InitTask: SetRelAlarm for AppCallback.\r\n");

107 
	`SëRñAœrm
(
AµCÆlbackAœrm
, 100, 1000);

110 
	`debug_¥ötf
("InitTask: Activate TaskBlink.\r\n");

111 
	`A˘iv©eTask
(
TaskBlök
);

114 
	`A˘iv©eTask
(
TaskBackground
);

117 
	`debug_¥ötf
("InitTask: TerminateTask().\r\n");

118 
	`Tîmö©eTask
();

119 
	}
}

125 
	$TASK
(
TaskBlök
)

127 
boﬁ
 
Êag
 = 
FALSE
;

129 
	`debug_¥ötf
("TaskBlink: Init.\r\n");

132 
	`debug_¥ötf
("TaskBlink: Waiting forÉvent...\r\n");

133 
	`WaôEvít
(
evBlök
);

134 
	`CÀ¨Evít
(
evBlök
);

135 
	`debug_¥ötf
("TaskBlink: LED Toggle.\r\n");

138 if(
TRUE
 =
Êag
)

140 
	`GPIO_WrôePöOuçut
(
gpioLed
.
ba£
, gpioLed.
pö
, 
gpioPöCÀ¨
);

141 
Êag
 = 
FALSE
;

145 
	`GPIO_WrôePöOuçut
(
gpioLed
.
ba£
, gpioLed.
pö
, 
gpioPöSë
);

146 
Êag
 = 
TRUE
;

150 
	`Tîmö©eTask
();

151 
	}
}

156 
	$TASK
(
TaskPîiodic
)

158 
	`debug_¥ötf
("TaskPeriodic: Event set.\r\n");

159 
	`SëEvít
(
TaskBlök
, 
evBlök
);

162 
	`Tîmö©eTask
();

163 
	}
}

169 
	$TASK
(
TaskBackground
)

171 vﬁ©ûê
i
 = 0;

172 
	`debug_¥ötf
("TaskBackground: Running!\r\n");

175 
i
++;

176 if(
i
 == 0xFFFFF)

178 
	`debug_¥ötf
("TaskBackground stillÑunning...\r\n");

179 
i
 = 0;

182 
	}
}

187 
	$ALARMCALLBACK
(
AµCÆlback
)

189 
	`debug_¥ötf
("AppCallback.\r\n");

190 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\board\udoo_neo\inc\board.h

31 #i‡!
deföed
(
__BOARD_H__
)

32 
	#__BOARD_H__


	)

34 
	~"pö_mux.h
"

35 
	~"rdc.h
"

36 
	~"rdc_defs_imx6sx.h
"

37 
	~"ccm_imx6sx.h
"

38 
	~"˛ock_‰eq.h
"

41 
	#BOARD_NAME
 "IMX6SX_AI_M4"

	)

42 
	#BOARD_DOMAIN_ID
 (1)

	)

45 
	#BOARD_ADC_RDC_PDAP
 
rdcPd≠Adc1


	)

46 
	#BOARD_ADC_BASEADDR
 
ADC1


	)

47 
	#BOARD_ADC_IRQ_NUM
 
ADC1_IRQn


	)

48 
	#BOARD_ADC_HANDLER
 
ADC1_H™dÀr


	)

49 
	#BOARD_ADC_INPUT_CHANNEL
 (3)

	)

52 
	#BOARD_WDOG_RDC_PDAP
 
rdcPd≠Wdog3


	)

53 
	#BOARD_WDOG_BASEADDR
 
WDOG3


	)

54 
	#BOARD_WDOG_IRQ_NUM
 
WDOG3_IRQn


	)

55 
	#BOARD_WDOG_HANDLER
 
WDOG3_H™dÀr


	)

58 
	#BOARD_SEMA4_RDC_PDAP
 
rdcPd≠Sema4


	)

59 
	#BOARD_SEMA4_BASEADDR
 
SEMA4


	)

60 
	#BOARD_SEMA4_IRQ_NUM
 
SEMA4_CP1_IRQn


	)

61 
	#BOARD_SEMA4_HANDLER
 
SEMA4_CP1_H™dÀr


	)

64 
	#BOARD_SENSOR_MMA8451Q_INT
 (0x1)

	)

65 
	#BOARD_AI_SENSOR_MAG3110
 (1)

	)

68 
	#BOARD_GPIO_LED_RDC_PDAP
 
rdcPd≠Gpio1


	)

69 
	#BOARD_GPIO_LED_CONFIG
 (&
gpioLed
)

	)

71 
	#BOARD_GPIO_SENSOR_ACC_RDC_PDAP
 
rdcPd≠Gpio3


	)

72 
	#BOARD_GPIO_SENSOR_ACC_CONFIG
 (&
gpioSís‹AccI¡
)

	)

73 
	#BOARD_GPIO_SENSOR_ACC_IRQ_NUM
 
GPIO3_INT31_16_IRQn


	)

74 
	#BOARD_GPIO_SENSOR_ACC_HANDLER
 
GPIO3_Comböed_16_31_H™dÀr


	)

76 
	#BOARD_GPIO_SENSOR_MAG_ALS_RDC_PDAP
 
rdcPd≠Gpio6


	)

77 
	#BOARD_GPIO_SENSOR_MAG_ALS_CONFIG
 (&
gpioSís‹MagAlsI¡
)

	)

78 
	#BOARD_GPIO_SENSOR_MAG_ALS_IRQ_NUM
 
GPIO6_INT15_0_IRQn


	)

79 
	#BOARD_GPIO_SENSOR_MAG_ALS_HANDLER
 
GPIO6_Comböed_0_15_H™dÀr


	)

82 
	#BOARD_DEBUG_UART_RDC_PDAP
 
rdcPd≠U¨t5


	)

83 
	#BOARD_DEBUG_UART_CCM_ROOT
 
ccmRoŸU¨tClkSñ


	)

84 
	#BOARD_DEBUG_UART_CCM_DIV
 
ccmRoŸU¨tClkPodf


	)

85 
	#BOARD_DEBUG_UART_CCM_CCGR
 
ccmCcgrG©eU¨tClk


	)

86 
	#BOARD_DEBUG_UART_CCM_CCGR_SERIAL
 
ccmCcgrG©eU¨tSîülClk


	)

87 
	#BOARD_DEBUG_UART_BASEADDR
 
UART5


	)

88 
	#BOARD_DEBUG_UART_IRQ_NUM
 
UART5_IRQn


	)

89 
	#BOARD_DEBUG_UART_HANDLER
 
UART5_H™dÀr


	)

92 
	#BOARD_MU_HANDLER
 
MU_M4_H™dÀr


	)

93 
	#BOARD_MU_IRQ_NUM
 
MU_M4_IRQn


	)

94 
	#BOARD_MU_BASE_ADDR
 
MUB


	)

95 
	#BOARD_MU_RDC_PDAP
 
rdcPd≠MuB


	)

98 
	#BOARD_ECSPI_MASTER_RDC_PDAP
 
rdcPd≠Ec•i4


	)

99 
	#BOARD_ECSPI_MASTER_CCM_ROOT
 
ccmRoŸEc•iClkSñ


	)

100 
	#BOARD_ECSPI_MASTER_CCM_DIV
 
ccmRoŸEc•iClkPodf


	)

101 
	#BOARD_ECSPI_MASTER_CCM_CCGR
 
ccmCcgrG©eEc•i4Clk


	)

102 
	#BOARD_ECSPI_MASTER_BASEADDR
 
ECSPI4


	)

103 
	#BOARD_ECSPI_MASTER_CHANNEL
 
ec•iSñe˘Ch™√l3


	)

104 
	#BOARD_ECSPI_MASTER_IRQ_NUM
 
eCSPI4_IRQn


	)

105 
	#BOARD_ECSPI_MASTER_HANDLER
 
eCSPI4_H™dÀr


	)

107 
	#BOARD_ECSPI_SLAVE_RDC_PDAP
 
rdcPd≠Ec•i4


	)

108 
	#BOARD_ECSPI_SLAVE_CCM_ROOT
 
ccmRoŸEc•iClkSñ


	)

109 
	#BOARD_ECSPI_SLAVE_CCM_DIV
 
ccmRoŸEc•iClkPodf


	)

110 
	#BOARD_ECSPI_SLAVE_CCM_CCGR
 
ccmCcgrG©eEc•i4Clk


	)

111 
	#BOARD_ECSPI_SLAVE_BASEADDR
 
ECSPI4


	)

112 
	#BOARD_ECSPI_SLAVE_CHANNEL
 
ec•iSñe˘Ch™√l3


	)

113 
	#BOARD_ECSPI_SLAVE_IRQ_NUM
 
eCSPI4_IRQn


	)

114 
	#BOARD_ECSPI_SLAVE_HANDLER
 
eCSPI4_H™dÀr


	)

117 
	#BOARD_I2C_RDC_PDAP
 
rdcPd≠I2c3


	)

118 
	#BOARD_I2C_CCM_ROOT
 
ccmRoŸPî˛kClkSñ


	)

119 
	#BOARD_I2C_CCM_DIV
 
ccmRoŸPî˛kPodf


	)

120 
	#BOARD_I2C_CCM_CCGR
 
ccmCcgrG©eI2c3Sîül˛k


	)

121 
	#BOARD_I2C_BASEADDR
 
I2C3


	)

122 
	#BOARD_I2C_IRQ_NUM
 
I2C3_IRQn


	)

123 
	#BOARD_I2C_HANDLER
 
I2C3_H™dÀr


	)

124 
	#BOARD_I2C_MMA8451Q_ADDR
 (0x1C)

	)

125 
	#BOARD_I2C_MAG3110_ADDR
 (0x0E)

	)

126 
	#BOARD_I2C_MAX7310_ADDR
 (0x32)

	)

129 
	#BOARD_EPIT_CCM_ROOT
 
ccmRoŸPî˛kClkSñ


	)

130 
	#BOARD_EPIT_CCM_DIV
 
ccmRoŸPî˛kPodf


	)

132 
	#BOARD_EPITA_RDC_PDAP
 
rdcPd≠Epô1


	)

133 
	#BOARD_EPITA_CCM_CCGR
 
ccmCcgrG©eEpô1Clk


	)

134 
	#BOARD_EPITA_BASEADDR
 
EPIT1


	)

135 
	#BOARD_EPITA_IRQ_NUM
 
EPIT1_IRQn


	)

136 
	#BOARD_EPITA_HANDLER
 
EPIT1_H™dÀr


	)

138 
	#BOARD_EPITB_RDC_PDAP
 
rdcPd≠Epô2


	)

139 
	#BOARD_EPITB_CCM_CCGR
 
ccmCcgrG©eEpô2Clk


	)

140 
	#BOARD_EPITB_BASEADDR
 
EPIT2


	)

141 
	#BOARD_EPITB_IRQ_NUM
 
EPIT2_IRQn


	)

142 
	#BOARD_EPITB_HANDLER
 
EPIT2_H™dÀr


	)

145 
	#BOARD_FLEXCAN_CCM_ROOT
 
ccmRoŸC™ClkSñ


	)

146 
	#BOARD_FLEXCAN_CCM_CCGR
 
ccmCcgrG©eC™1Clk


	)

147 
	#BOARD_FLEXCAN_CCM_CCGR_SERIAL
 
ccmCcgrG©eC™1SîülClk


	)

148 
	#BOARD_FLEXCAN_CCM_DIV
 
ccmRoŸC™ClkPodf


	)

149 
	#BOARD_FLEXCAN_RDC_PDAP
 
rdcPd≠C™1


	)

150 
	#BOARD_FLEXCAN_BASEADDR
 
CAN1


	)

151 
	#BOARD_FLEXCAN_IRQ_NUM
 
FLEXCAN1_IRQn


	)

152 
	#BOARD_FLEXCAN_HANDLER
 
FLEXCAN1_H™dÀr


	)

154 #i‡
deföed
(
__˝lu•lus
)

158 
h¨dw¨e_öô
();

159 
dbg_u¨t_öô
();

161 
BOARD_ClockInô
();

162 
BOARD_RdcInô
();

164 #i‡
deföed
(
__˝lu•lus
)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\board\udoo_neo\inc\clock_freq.h

31 #i‚de‡
__CLOCK_FREQ_H__


32 
	#__CLOCK_FREQ_H__


	)

34 
	~"devi˚_imx.h
"

45 #i‡
deföed
(
__˝lu•lus
)

55 
uöt32_t
 
gë_ïô_˛ock_‰eq
(
EPIT_Ty≥
* 
ba£
);

63 
uöt32_t
 
gë_i2c_˛ock_‰eq
(
I2C_Ty≥
* 
ba£
);

71 
uöt32_t
 
gë_ec•i_˛ock_‰eq
(
ECSPI_Ty≥
* 
ba£
);

79 
uöt32_t
 
gë_u¨t_˛ock_‰eq
(
UART_Ty≥
* 
ba£
);

81 #i‡
deföed
(
__˝lu•lus
)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\board\udoo_neo\inc\gpio_pins.h

31 #i‚de‡
__GPIO_PINS_H__


32 
	#__GPIO_PINS_H__


	)

34 
	~"devi˚_imx.h
"

37 
	s_gpio_c⁄fig


39 c⁄° *
	m«me
;

40 
__IO
 
uöt32_t
 *
	mmuxReg
;

41 
uöt32_t
 
	mmuxC⁄fig
;

42 
__IO
 
uöt32_t
 *
	m∑dReg
;

43 
uöt32_t
 
	m∑dC⁄fig
;

44 
GPIO_Ty≥
 *
	mba£
;

45 
uöt32_t
 
	mpö
;

46 } 
	tgpio_c⁄fig_t
;

48 #i‡
deföed
(
__˝lu•lus
)

53 
gpio_c⁄fig_t
 
gpioLed
;

54 
gpio_c⁄fig_t
 
gpioSís‹AccI¡
;

55 
gpio_c⁄fig_t
 
gpioSís‹MagAlsI¡
;

57 
c⁄figuª_gpio_pö
(
gpio_c⁄fig_t
 *
c⁄fig
);

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\board\udoo_neo\inc\pin_mux.h

36 #i‚de‡
pö_mux_H_


37 
	#pö_mux_H_


	)

41 
	~"devi˚_imx.h
"

57 
c⁄figuª_u¨t_pös
(
UART_Ty≥
* 
ba£
);

72 
c⁄figuª_ec•i_pös
(
ECSPI_Ty≥
* 
ba£
);

87 
c⁄figuª_ec•i_¶ave_pös
(
ECSPI_Ty≥
* 
ba£
);

103 
c⁄figuª_i2c_pös
(
I2C_Ty≥
* 
ba£
);

119 
c⁄figuª_Êexˇn_pös
(
CAN_Ty≥
* 
ba£
);

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\board\udoo_neo\inc\shared_clock_node.h

31 #i‚de‡
__SHARED_CLOCK_NODE_H__


32 
	#__SHARED_CLOCK_NODE_H__


	)

35 
	e_sh¨ed_˛k_ödex


37 
	mSHARED_CLK_PLL2
 = 0,

38 
	mSHARED_CLK_PLL2_PFD0
,

39 
	mSHARED_CLK_PLL2_PFD2
,

40 
	mSHARED_CLK_PLL3
,

41 
	mSHARED_CLK_PLL3_PFD1
,

42 
	mSHARED_CLK_PLL3_PFD2
,

43 
	mSHARED_CLK_PLL3_PFD3
,

44 
	mSHARED_CLK_PLL4
,

45 
	mSHARED_CLK_PLL5
,

46 
	mSHARED_CLK_OCRAM
,

47 
	mSHARED_CLK_FLEXCAN1
,

48 
	mSHARED_CLK_FLEXCAN1_IPG
,

49 
	mSHARED_CLK_FLEXCAN2
,

50 
	mSHARED_CLK_FLEXCAN2_IPG
,

51 
	mSHARED_CLK_CANFD
,

52 
	mSHARED_CLK_ECSPI1
,

53 
	mSHARED_CLK_ECSPI2
,

54 
	mSHARED_CLK_ECSPI3
,

55 
	mSHARED_CLK_ECSPI4
,

56 
	mSHARED_CLK_ECSPI5
,

57 
	mSHARED_CLK_QSPI1
,

58 
	mSHARED_CLK_QSPI2
,

59 
	mSHARED_CLK_SSI1
,

60 
	mSHARED_CLK_SSI2
,

61 
	mSHARED_CLK_SSI3
,

62 
	mSHARED_CLK_UART
,

63 
	mSHARED_CLK_UART_IPG
,

64 
	mSHARED_CLK_PERIPH2
,

65 
	mSHARED_CLK_ALT_OCRAM
,

66 
	mSHARED_CLK_I2C1
,

67 
	mSHARED_CLK_I2C2
,

68 
	mSHARED_CLK_I2C3
,

69 
	mSHARED_CLK_I2C4
,

70 
	mSHARED_CLK_EPIT1
,

71 
	mSHARED_CLK_EPIT2
,

72 
	mSHARED_CLK_COUNT


73 } 
	tsh¨ed_˛k_ödex_t
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\board\udoo_neo\src\board.c

31 
	~<°dio.h
>

32 
	~"bﬂrd.h
"

33 
	~"debug_c⁄sﬁe_imx.h
"

34 
	~"ccm_imx6sx.h
"

35 
	~"rdc.h
"

36 
	~"wdog_imx.h
"

37 
	~"pö_mux.h
"

46 
	$BOARD_ClockInô
()

51 
	`WDOG_DißbÀPowîdown
(
BOARD_WDOG_BASEADDR
);

54 
	`CCM_C⁄åﬁG©e
(
CCM
, 
ccmCcgrG©eIomuxI±ClkIo
, 
ccmClockNìdedAŒ
);

55 
	`CCM_C⁄åﬁG©e
(
CCM
, 
ccmCcgrG©eIpmux1Clk
, 
ccmClockNìdedAŒ
);

56 
	`CCM_C⁄åﬁG©e
(
CCM
, 
ccmCcgrG©eIpmux2Clk
, 
ccmClockNìdedAŒ
);

57 
	`CCM_C⁄åﬁG©e
(
CCM
, 
ccmCcgrG©eIpmux3Clk
, 
ccmClockNìdedAŒ
);

58 
	}
}

67 
	$dbg_u¨t_öô
()

70 
	`RDC_SëPd≠Ac˚ss
(
RDC
, 
BOARD_DEBUG_UART_RDC_PDAP
, 3 << (
BOARD_DOMAIN_ID
 * 2), 
Ál£
, false);

73 
	`CCM_SëRoŸMux
(
CCM
, 
ccmRoŸU¨tClkSñ
, 
ccmRoŸmuxU¨tClkOsc24m
);

75 
	`CCM_SëRoŸDividî
(
CCM
, 
ccmRoŸU¨tClkPodf
, 0);

77 
	`CCM_C⁄åﬁG©e
(
CCM
, 
ccmCcgrG©eU¨tClk
, 
ccmClockNìdedAŒ
);

78 
	`CCM_C⁄åﬁG©e
(
CCM
, 
ccmCcgrG©eU¨tSîülClk
, 
ccmClockNìdedAŒ
);

81 
	`c⁄figuª_u¨t_pös
(
BOARD_DEBUG_UART_BASEADDR
);

83 
	`DbgC⁄sﬁe_Inô
(
BOARD_DEBUG_UART_BASEADDR
, 24000000, 115200);

84 
	}
}

93 
	$BOARD_RdcInô
()

96 
	`RDC_SëDomaöID
(
RDC
, 
rdcMdaM4
, 
BOARD_DOMAIN_ID
, 
Ál£
);

97 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\board\udoo_neo\src\clock_freq.c

31 
	~"˛ock_‰eq.h
"

32 
	~"ccm_imx6sx.h
"

33 
	~"ccm_™Æog_imx6sx.h
"

41 
uöt32_t
 
	$gë_ïô_˛ock_‰eq
(
EPIT_Ty≥
* 
ba£
)

43 
uöt32_t
 
roŸ
;

44 
uöt32_t
 
hz
;

45 
uöt32_t
 
divPî˛kPodf
, 
divIpgPodf
, 
divAhbPodf
, 
divPîùhClk2Podf
;

49 if(
	`CCM_GëRoŸMux
(
CCM
, 
ccmRoŸPî˛kClkSñ
Ë=
ccmRoŸmuxPî˛kClkOsc24m
)

51 
roŸ
 = 
ccmRoŸmuxPî˛kClkOsc24m
;

52 
hz
 = 24000000;

53 
divPî˛kPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸPî˛kPodf
);

54 
divIpgPodf
 = 0;

55 
divAhbPodf
 = 0;

56 
divPîùhClk2Podf
 = 0;

58 if(
	`CCM_GëRoŸMux
(
CCM
, 
ccmRoŸPîùhClkSñ
Ë=
ccmRoŸmuxPîùhClkPªPîùhClkSñ
)

60 
roŸ
 = 
	`CCM_GëRoŸMux
(
CCM
, 
ccmRoŸPªPîùhClkSñ
);

64 
roŸ
)

66 
ccmRoŸmuxPªPîùhClkPŒ2
:

67 
hz
 = 
	`CCM_ANALOG_GëPŒFªq
(
CCM_ANALOG
, 
ccmA«logPŒSysC⁄åﬁ
);

68 
divPî˛kPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸPî˛kPodf
);

69 
divIpgPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸIpgPodf
);

70 
divAhbPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸAhbPodf
);

71 
divPîùhClk2Podf
 = 0;

77 if(
	`CCM_GëRoŸMux
(
CCM
, 
ccmRoŸPîùhClk2Sñ
Ë=
ccmRoŸmuxPîùhClk2OSC24m
)

79 
roŸ
 = 
ccmRoŸmuxPîùhClk2OSC24m
;

80 
hz
 = 24000000;

81 
divPî˛kPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸPî˛kPodf
);

82 
divIpgPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸIpgPodf
);

83 
divAhbPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸAhbPodf
);

84 
divPîùhClk2Podf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸPîùhClk2Podf
);

88 
roŸ
 = 
	`CCM_GëRoŸMux
(
CCM
, 
ccmRoŸPŒ3SwClkSñ
);

92 
roŸ
)

94 
ccmRoŸmuxPŒ3SwClkPŒ3
:

95 
hz
 = 
	`CCM_ANALOG_GëPŒFªq
(
CCM_ANALOG
, 
ccmA«logPŒUsb1C⁄åﬁ
);

96 
divPî˛kPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸPî˛kPodf
);

97 
divIpgPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸIpgPodf
);

98 
divAhbPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸAhbPodf
);

99 
divPîùhClk2Podf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸPîùhClk2Podf
);

106  
hz
 / (
divPî˛kPodf
 + 1Ë/ (
divIpgPodf
 + 1Ë/ (
divAhbPodf
 + 1Ë/ (
divPîùhClk2Podf
 + 1);

107 
	}
}

115 
uöt32_t
 
	$gë_i2c_˛ock_‰eq
(
I2C_Ty≥
* 
ba£
)

117 
uöt32_t
 
roŸ
;

118 
uöt32_t
 
hz
;

119 
uöt32_t
 
divPî˛kPodf
, 
divIpgPodf
, 
divAhbPodf
, 
divPîùhClk2Podf
;

123 if(
	`CCM_GëRoŸMux
(
CCM
, 
ccmRoŸPî˛kClkSñ
Ë=
ccmRoŸmuxPî˛kClkOsc24m
)

125 
roŸ
 = 
ccmRoŸmuxPî˛kClkOsc24m
;

126 
hz
 = 24000000;

127 
divPî˛kPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸPî˛kPodf
);

128 
divIpgPodf
 = 0;

129 
divAhbPodf
 = 0;

130 
divPîùhClk2Podf
 = 0;

132 if(
	`CCM_GëRoŸMux
(
CCM
, 
ccmRoŸPîùhClkSñ
Ë=
ccmRoŸmuxPîùhClkPªPîùhClkSñ
)

134 
roŸ
 = 
	`CCM_GëRoŸMux
(
CCM
, 
ccmRoŸPªPîùhClkSñ
);

138 
roŸ
)

140 
ccmRoŸmuxPªPîùhClkPŒ2
:

141 
hz
 = 
	`CCM_ANALOG_GëPŒFªq
(
CCM_ANALOG
, 
ccmA«logPŒSysC⁄åﬁ
);

142 
divPî˛kPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸPî˛kPodf
);

143 
divIpgPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸIpgPodf
);

144 
divAhbPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸAhbPodf
);

145 
divPîùhClk2Podf
 = 0;

151 if(
	`CCM_GëRoŸMux
(
CCM
, 
ccmRoŸPîùhClk2Sñ
Ë=
ccmRoŸmuxPîùhClk2OSC24m
)

153 
roŸ
 = 
ccmRoŸmuxPîùhClk2OSC24m
;

154 
hz
 = 24000000;

155 
divPî˛kPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸPî˛kPodf
);

156 
divIpgPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸIpgPodf
);

157 
divAhbPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸAhbPodf
);

158 
divPîùhClk2Podf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸPîùhClk2Podf
);

162 
roŸ
 = 
	`CCM_GëRoŸMux
(
CCM
, 
ccmRoŸPŒ3SwClkSñ
);

166 
roŸ
)

168 
ccmRoŸmuxPŒ3SwClkPŒ3
:

169 
hz
 = 
	`CCM_ANALOG_GëPŒFªq
(
CCM_ANALOG
, 
ccmA«logPŒUsb1C⁄åﬁ
);

170 
divPî˛kPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸPî˛kPodf
);

171 
divIpgPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸIpgPodf
);

172 
divAhbPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸAhbPodf
);

173 
divPîùhClk2Podf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸPîùhClk2Podf
);

180  
hz
 / (
divPî˛kPodf
 + 1Ë/ (
divIpgPodf
 + 1Ë/ (
divAhbPodf
 + 1Ë/ (
divPîùhClk2Podf
 + 1);

181 
	}
}

189 
uöt32_t
 
	$gë_ec•i_˛ock_‰eq
(
ECSPI_Ty≥
* 
ba£
)

191 
uöt32_t
 
roŸ
;

192 
uöt32_t
 
hz
;

193 
uöt32_t
 
divEc•iClkPodf
, 
divSètic
;

195 if(
	`CCM_GëRoŸMux
(
CCM
, 
ccmRoŸEc•iClkSñ
Ë=
ccmRoŸmuxEc•iClkOsc24m
)

197 
roŸ
 = 
ccmRoŸmuxEc•iClkOsc24m
;

198 
hz
 = 24000000;

199 
divEc•iClkPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸEc•iClkPodf
);

200 
divSètic
 = 0;

204 
roŸ
 = 
	`CCM_GëRoŸMux
(
CCM
, 
ccmRoŸPŒ3SwClkSñ
);

208 
roŸ
)

210 
ccmRoŸmuxPŒ3SwClkPŒ3
:

211 
hz
 = 
	`CCM_ANALOG_GëPŒFªq
(
CCM_ANALOG
, 
ccmA«logPŒUsb1C⁄åﬁ
);

212 
divEc•iClkPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸEc•iClkPodf
);

213 
divSètic
 = 7;

220  
hz
 / (
divEc•iClkPodf
 + 1Ë/ (
divSètic
 + 1);

221 
	}
}

229 
uöt32_t
 
	$gë_u¨t_˛ock_‰eq
(
UART_Ty≥
* 
ba£
)

231 
uöt32_t
 
roŸ
;

232 
uöt32_t
 
hz
;

233 
uöt32_t
 
divU¨tClkPodf
, 
divSètic
;

235 if(
	`CCM_GëRoŸMux
(
CCM
, 
ccmRoŸU¨tClkSñ
Ë=
ccmRoŸmuxU¨tClkOsc24m
)

237 
roŸ
 = 
ccmRoŸmuxU¨tClkOsc24m
;

238 
hz
 = 24000000;

239 
divU¨tClkPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸU¨tClkPodf
);

240 
divSètic
 = 0;

244 
roŸ
 = 
	`CCM_GëRoŸMux
(
CCM
, 
ccmRoŸPŒ3SwClkSñ
);

248 
roŸ
)

250 
ccmRoŸmuxPŒ3SwClkPŒ3
:

251 
hz
 = 
	`CCM_ANALOG_GëPŒFªq
(
CCM_ANALOG
, 
ccmA«logPŒUsb1C⁄åﬁ
);

252 
divU¨tClkPodf
 = 
	`CCM_GëRoŸDividî
(
CCM
, 
ccmRoŸU¨tClkPodf
);

253 
divSètic
 = 5;

260  
hz
 / (
divU¨tClkPodf
 + 1Ë/ (
divSètic
 + 1);

261 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\board\udoo_neo\src\gpio_pins.c

31 
	~<as£π.h
>

32 
	~"gpio_pös.h
"

34 
gpio_c⁄fig_t
 
	ggpioLed
 = {

36 &
IOMUXC_SW_MUX_CTL_PAD_NAND_DATA02
,

38 &
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02
,

39 
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_DSE
(6)|

40 
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_SPEED
(2)|

41 
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_PKE_MASK
,

42 
GPIO4
,

46 
gpio_c⁄fig_t
 
	ggpioSís‹AccI¡
 = {

48 &
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA23
,

50 &
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23
,

51 
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_PUS
(2) |

52 
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_PUE_MASK
 |

53 
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_PKE_MASK
 |

54 
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_SPEED
(2) |

55 
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_DSE
(6),

56 
GPIO3
,

60 
gpio_c⁄fig_t
 
	ggpioSís‹MagAlsI¡
 = {

62 &
IOMUXC_SW_MUX_CTL_PAD_SD2_CLK
,

64 &
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK
,

65 
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUS
(2) |

66 
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUE_MASK
 |

67 
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PKE_MASK
 |

68 
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SPEED
(2) |

69 
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_DSE
(6),

70 
GPIO6
,

74 
	$c⁄figuª_gpio_pö
(
gpio_c⁄fig_t
 *
c⁄fig
)

76 
	`as£π
(
c⁄fig
);

78 *(
c⁄fig
->
muxReg
Ëc⁄fig->
muxC⁄fig
;

79 *(
c⁄fig
->
∑dReg
Ëc⁄fig->
∑dC⁄fig
;

80 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\board\udoo_neo\src\pin_mux.c

44 
	~"pö_mux.h
"

46 
	$c⁄figuª_u¨t_pös
(
UART_Ty≥
* 
ba£
)

48 (
uöt32_t
)
ba£
)

50 
UART5_BASE
:

53 
IOMUXC_SW_MUX_CTL_PAD_SD4_DATA4
 = 
	`IOMUXC_SW_MUX_CTL_PAD_SD4_DATA4_MUX_MODE
(2);

54 
IOMUXC_SW_MUX_CTL_PAD_SD4_DATA5
 = 
	`IOMUXC_SW_MUX_CTL_PAD_SD4_DATA5_MUX_MODE
(2);

55 
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4
 = 
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_PKE_MASK
 |

56 
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_PUE_MASK
 |

57 
	`IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_PUS
(2) |

58 
	`IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_SPEED
(2) |

59 
	`IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_DSE
(6) |

60 
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_SRE_MASK
 |

61 
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_HYS_MASK
;

62 
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5
 = 
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_PKE_MASK
 |

63 
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_PUE_MASK
 |

64 
	`IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_PUS
(2) |

65 
	`IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_SPEED
(2) |

66 
	`IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_DSE
(6) |

67 
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_SRE_MASK
 |

68 
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_HYS_MASK
;

69 
IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT
 = 
	`IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY
(0);

71 
UART2_BASE
:

73 
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO06
 = 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO06_MUX_MODE
(0);

74 
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO07
 = 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO07_MUX_MODE
(0);

75 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06
 = 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_PKE_MASK
 |

76 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_PUE_MASK
 |

77 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_PUS
(2) |

78 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_SPEED
(2) |

79 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_DSE
(6) |

80 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_SRE_MASK
 |

81 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_HYS_MASK
;

82 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07
 = 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_PKE_MASK
 |

83 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_PUE_MASK
 |

84 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_PUS
(2) |

85 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_SPEED
(2) |

86 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_DSE
(6) |

87 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_SRE_MASK
 |

88 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_HYS_MASK
;

89 
IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT
 = 
	`IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY
(1);

94 
	}
}

96 
	$c⁄figuª_ec•i_pös
(
ECSPI_Ty≥
* 
ba£
)

98 (
uöt32_t
)
ba£
)

100 
ECSPI4_BASE
:

102 
IOMUXC_ECSPI4_IPP_CSPI_CLK_IN_SELECT_INPUT
 = 
IOMUXC_ECSPI4_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY_MASK
;

103 
IOMUXC_ECSPI4_IPP_IND_MISO_SELECT_INPUT
 = 
IOMUXC_ECSPI4_IPP_IND_MISO_SELECT_INPUT_DAISY_MASK
;

104 
IOMUXC_ECSPI4_IPP_IND_MOSI_SELECT_INPUT
 = 
IOMUXC_ECSPI4_IPP_IND_MOSI_SELECT_INPUT_DAISY_MASK
;

107 
IOMUXC_SW_MUX_CTL_PAD_SD2_CLK
 = 
	`IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_MUX_MODE
(3);

108 
IOMUXC_SW_MUX_CTL_PAD_SD2_CMD
 = 
	`IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_MUX_MODE
(3);

109 
IOMUXC_SW_MUX_CTL_PAD_SD2_DATA0
 = 
	`IOMUXC_SW_MUX_CTL_PAD_SD2_DATA0_MUX_MODE
(6);

110 
IOMUXC_SW_MUX_CTL_PAD_SD2_DATA3
 = 
	`IOMUXC_SW_MUX_CTL_PAD_SD2_DATA3_MUX_MODE
(3);

113 
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK
 = 
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PKE_MASK
 |

114 
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUE_MASK
 |

115 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUS
(0) |

116 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SPEED
(2) |

117 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_DSE
(6) |

118 
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SRE_MASK
 |

119 
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_HYS_MASK
;

120 
IOMUXC_SW_PAD_CTL_PAD_SD2_CMD
 = 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SPEED
(2) |

121 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_DSE
(6) |

122 
IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SRE_MASK
 |

123 
IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_HYS_MASK
;

124 
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0
 = 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_SPEED
(2) |

125 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_DSE
(6) |

126 
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_SRE_MASK
 |

127 
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_HYS_MASK
;

128 
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3
 = 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_SPEED
(2) |

129 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_DSE
(6) |

130 
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_SRE_MASK
 |

131 
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_HYS_MASK
;

136 
	}
}

138 
	$c⁄figuª_ec•i_¶ave_pös
(
ECSPI_Ty≥
* 
ba£
)

140 (
uöt32_t
)
ba£
)

142 
ECSPI4_BASE
:

144 
IOMUXC_ECSPI4_IPP_CSPI_CLK_IN_SELECT_INPUT
 = 
IOMUXC_ECSPI4_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY_MASK
;

145 
IOMUXC_ECSPI4_IPP_IND_MISO_SELECT_INPUT
 = 
IOMUXC_ECSPI4_IPP_IND_MISO_SELECT_INPUT_DAISY_MASK
;

146 
IOMUXC_ECSPI4_IPP_IND_MOSI_SELECT_INPUT
 = 
IOMUXC_ECSPI4_IPP_IND_MOSI_SELECT_INPUT_DAISY_MASK
;

149 
IOMUXC_SW_MUX_CTL_PAD_SD2_CLK
 = 
	`IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_MUX_MODE
(3);

150 
IOMUXC_SW_MUX_CTL_PAD_SD2_CMD
 = 
	`IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_MUX_MODE
(3);

151 
IOMUXC_SW_MUX_CTL_PAD_SD2_DATA0
 = 
	`IOMUXC_SW_MUX_CTL_PAD_SD2_DATA0_MUX_MODE
(6);

152 
IOMUXC_SW_MUX_CTL_PAD_SD2_DATA3
 = 
	`IOMUXC_SW_MUX_CTL_PAD_SD2_DATA3_MUX_MODE
(3);

155 
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK
 = 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SPEED
(2) |

156 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_DSE
(6) |

157 
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SRE_MASK
 |

158 
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_HYS_MASK
;

159 
IOMUXC_SW_PAD_CTL_PAD_SD2_CMD
 = 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SPEED
(2) |

160 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_DSE
(6) |

161 
IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SRE_MASK
 |

162 
IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_HYS_MASK
;

163 
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0
 = 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_SPEED
(2) |

164 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_DSE
(6) |

165 
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_SRE_MASK
 |

166 
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_HYS_MASK
;

167 
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3
 = 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_SPEED
(2) |

168 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_DSE
(6) |

169 
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_SRE_MASK
 |

170 
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_HYS_MASK
;

175 
	}
}

177 
	$c⁄figuª_i2c_pös
(
I2C_Ty≥
* 
ba£
)

179 (
uöt32_t
)
ba£
)

181 
I2C1_BASE
:

183 
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO00
 = 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO00_MUX_MODE
(0) |

184 
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO00_SION_MASK
;

185 
IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT
 = 
	`IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY
(1);

186 
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO01
 = 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO01_MUX_MODE
(0) |

187 
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO01_SION_MASK
;

188 
IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT
 = 
IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_DAISY_MASK
;

190 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00
 = 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_PKE_MASK
 |

191 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_PUE_MASK
 |

192 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_PUS
(2) |

193 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_SPEED
(2) |

194 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_DSE
(6) |

195 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_ODE_SHIFT
 |

196 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_SRE_MASK
 |

197 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_HYS_MASK
;

199 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01
 = 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_PKE_MASK
 |

200 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_PUE_MASK
 |

201 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_PUS
(2) |

202 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_SPEED
(2) |

203 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_DSE
(6) |

204 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_ODE_SHIFT
 |

205 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_SRE_MASK
 |

206 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_HYS_MASK
;

208 
I2C2_BASE
:

210 
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO02
 = 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO02_MUX_MODE
(0) |

211 
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO02_SION_MASK
;

212 
IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT
 = 
	`IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_DAISY
(1);

213 
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03
 = 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03_MUX_MODE
(0) |

214 
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03_SION_MASK
;

215 
IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT
 = 
	`IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_DAISY
(1);

217 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02
 = 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_PKE_MASK
 |

218 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_PUE_MASK
 |

219 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_PUS
(2) |

220 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_SPEED
(2) |

221 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_DSE
(6) |

222 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_ODE_SHIFT
 |

223 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_SRE_MASK
 |

224 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_HYS_MASK
;

226 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03
 = 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_PKE_MASK
 |

227 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_PUE_MASK
 |

228 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_PUS
(2) |

229 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_SPEED
(2) |

230 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_DSE
(6) |

231 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_ODE_SHIFT
 |

232 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_SRE_MASK
 |

233 
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_HYS_MASK
;

235 
I2C3_BASE
:

237 
IOMUXC_SW_MUX_CTL_PAD_KEY_COL4
 = 
	`IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_MUX_MODE
(2) |

238 
IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_SION_MASK
;

239 
IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT
 = 
	`IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_DAISY
(2);

240 
IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4
 = 
	`IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_MUX_MODE
(2) |

241 
IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_SION_MASK
;

242 
IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT
 = 
	`IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_DAISY
(2);

244 
IOMUXC_SW_PAD_CTL_PAD_KEY_COL4
 = 
IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PKE_MASK
 |

245 
IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUE_MASK
 |

246 
	`IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUS
(2) |

247 
	`IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SPEED
(2) |

248 
	`IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_DSE
(6) |

249 
IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_ODE_SHIFT
 |

250 
IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SRE_MASK
 |

251 
IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_HYS_MASK
;

253 
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4
 = 
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PKE_MASK
 |

254 
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUE_MASK
 |

255 
	`IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUS
(2) |

256 
	`IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SPEED
(2) |

257 
	`IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_DSE
(6) |

258 
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_ODE_SHIFT
 |

259 
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SRE_MASK
 |

260 
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_HYS_MASK
;

262 
I2C4_BASE
:

264 
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA06
 = 
	`IOMUXC_SW_MUX_CTL_PAD_CSI_DATA06_MUX_MODE
(2) |

265 
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA06_SION_MASK
;

266 
IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT
 = 
	`IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_DAISY
(2);

267 
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA07
 = 
	`IOMUXC_SW_MUX_CTL_PAD_CSI_DATA07_MUX_MODE
(2) |

268 
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA07_SION_MASK
;

269 
IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT
 = 
	`IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_DAISY
(2);

271 
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06
 = 
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_PKE_MASK
 |

272 
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_PUE_MASK
 |

273 
	`IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_PUS
(2) |

274 
	`IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_SPEED
(2) |

275 
	`IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_DSE
(6) |

276 
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_ODE_SHIFT
 |

277 
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_SRE_MASK
 |

278 
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_HYS_MASK
;

280 
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07
 = 
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_PKE_MASK
 |

281 
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_PUE_MASK
 |

282 
	`IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_PUS
(2) |

283 
	`IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_SPEED
(2) |

284 
	`IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_DSE
(6) |

285 
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_ODE_SHIFT
 |

286 
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_SRE_MASK
 |

287 
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_HYS_MASK
;

292 
	}
}

294 
	$c⁄figuª_Êexˇn_pös
(
CAN_Ty≥
* 
ba£
)

296 vﬁ©ûê
GPIO_MemM≠På
 
gpio2_pdú
;

297 *
addr
;

299 (
uöt32_t
)
ba£
)

301 
CAN1_BASE
:

303 
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA3
 = 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA3_MUX_MODE
(5);

304 
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3
 = 
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_HYS_MASK
|

305 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_DSE
(6) |

306 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_SPEED
(2)|

307 
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_PKE_MASK
|

308 
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_PUE_MASK
|

309 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_PUS
(2);

310 
IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4
 = 
	`IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_MUX_MODE
(5);

311 
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4
 = 
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_HYS_MASK
|

312 
	`IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_DSE
(6) |

313 
	`IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SPEED
(2)|

314 
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PKE_MASK
|

315 
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUE_MASK
|

316 
	`IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUS
(2);

317 
addr
 = (*Ë
GPIO2_BASE_PTR
;

318 
gpio2_pdú
 = 
addr
;

319 
gpio2_pdú
->
GDIR
 |= 0x08000000;

320 
gpio2_pdú
->
DR
 &= ~0x08000000;

323 
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DQS
 = 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DQS_MUX_MODE
(1);

324 
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS
 = 
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_HYS_MASK
 |

325 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_DSE
(6) |

326 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_SPEED
(2) |

327 
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_PKE_MASK
 |

328 
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_PUE_MASK
 |

329 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_PUS
(2);

332 
IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS1_B
 = 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS1_B_MUX_MODE
(1);

333 
IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT
 = 
	`IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_DAISY
(2);

334 
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B
 = 
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_HYS_MASK
|

335 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_DSE
(6) |

336 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_SPEED
(2)|

337 
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_PKE_MASK
|

338 
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_PUE_MASK
|

339 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_PUS
(2);

342 
CAN2_BASE
:

344 
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA3
 = 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA3_MUX_MODE
(5);

345 
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3
 = 
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_HYS_MASK
|

346 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_DSE
(6) |

347 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_SPEED
(2)|

348 
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_PKE_MASK
|

349 
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_PUE_MASK
|

350 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_PUS
(2);

351 
addr
 = (*Ë
GPIO2_BASE_PTR
;

352 
gpio2_pdú
 = 
addr
;

353 
gpio2_pdú
->
GDIR
 |= 0x08000000;

354 
gpio2_pdú
->
DR
 &= ~0x08000000;

357 
IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DQS
 = 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DQS_MUX_MODE
(1);

358 
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS
 = 
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_HYS_MASK
|

359 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_DSE
(6) |

360 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_SPEED
(2)|

361 
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_PKE_MASK
|

362 
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_PUE_MASK
|

363 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_PUS
(2);

366 
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS1_B
 = 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS1_B_MUX_MODE
(1);

367 
IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT
 = 
	`IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_DAISY
(2);

368 
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B
 = 
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_HYS_MASK
|

369 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_DSE
(6) |

370 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_SPEED
(2)|

371 
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_PKE_MASK
|

372 
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_PUE_MASK
|

373 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_PUS
(2);

376 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\config\inc\Os_Cfg.h

41 #i‚de‡
_OS_CFG_H_


42 
	#_OS_CFG_H_


	)

77 
	#De˛¨eTask
(
«me
Ë
OSEK_TASK_
 ## 
	`«me
 ()

	)

79 
	#OSEK_OS_INTERRUPT_MASK
 ((
I¡îru±FœgsTy≥
)0xFFFFFFFFU)

	)

82 
	#TaskU¨tRe˚ive
 0

	)

84 
	#TaskLed
 1

	)

86 
	#TaskIdÀ
 2

	)

89 
	#AµMode1
 0

	)

101 
	#OSEº‹GëSîvi˚Id
(Ë(
O£k_Eº‹Api
)

	)

103 
	#OSEº‹GëP¨am1
(Ë(
O£k_Eº‹P¨am1
)

	)

105 
	#OSEº‹GëP¨am2
(Ë(
O£k_Eº‹P¨am2
)

	)

107 
	#OSEº‹GëP¨am3
(Ë(
O£k_Eº‹P¨am3
)

	)

109 
	#OSEº‹GëRë
(Ë(
O£k_Eº‹Rë
)

	)

113 
	#OSEK_MEMMAP
 
OSEK_DISABLE


	)

122 
O£k_Eº‹Api
;

129 
O£k_Eº‹P¨am1
;

136 
O£k_Eº‹P¨am2
;

143 
O£k_Eº‹P¨am3
;

150 
O£k_Eº‹Rë
;

155 
Eº‹Hook
();

158 
De˛¨eTask
(
TaskU¨tRe˚ive
);

160 
De˛¨eTask
(
TaskLed
);

162 
De˛¨eTask
(
TaskIdÀ
);

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\config\inc\Os_Internal_Cfg.h

40 #i‚de‡
_OS_INTERNAL_CFG_H_


41 
	#_OS_INTERNAL_CFG_H_


	)

79 
	#ERROR_CHECKING_STANDARD
 1

	)

82 
	#ERROR_CHECKING_EXTENDED
 2

	)

85 
	#TASKS_COUNT
 3U

	)

88 
	#RESOURCES_COUNT
 0

	)

91 
	#ERROR_CHECKING_TYPE
 
ERROR_CHECKING_EXTENDED


	)

93 
	#HOOK_PRETASKHOOK
 
OSEK_DISABLE


	)

95 
	#HOOK_POSTTASKHOOK
 
OSEK_DISABLE


	)

97 
	#HOOK_ERRORHOOK
 
OSEK_ENABLE


	)

99 
	#HOOK_STARTUPHOOK
 
OSEK_DISABLE


	)

101 
	#HOOK_SHUTDOWNHOOK
 
OSEK_DISABLE


	)

103 
	#READYLISTS_COUNT
 3

	)

104 
	#SëEº‹_Api
(
≠i
Ë–
O£k_Eº‹Api
 = (≠iË)

	)

105 
	#SëEº‹_P¨am1
(
∑øm1
Ë–
O£k_Eº‹P¨am1
 = (∑øm1Ë)

	)

106 
	#SëEº‹_P¨am2
(
∑øm2
Ë–
O£k_Eº‹P¨am2
 = (∑øm2Ë)

	)

107 
	#SëEº‹_P¨am3
(
∑øm3
Ë–
O£k_Eº‹P¨am3
 = (∑øm3Ë)

	)

108 
	#SëEº‹_Rë
(
ªt
Ë–
O£k_Eº‹Rë
 = (
uöt32
)‘ëË)

	)

109 
	#SëEº‹_Msg
(
msg
)

	)

111 
	#SëEº‹_Eº‹Hook
() \

113 
Eº‹HookRu¬ög
 = (
uöt8
)1U; \

114 
	`Eº‹Hook
(); \

115 
Eº‹HookRu¬ög
 = (
uöt8
)0U; \

116 }

	)

118 
	#ALARM_AUTOSTART_COUNT
 0

	)

121 
	#ALARMS_COUNT
 0

	)

124 
	#NON_PREEMPTIVE
 
OSEK_DISABLE


	)

127 
	#NO_EVENTS
 
OSEK_ENABLE


	)

130 
	#NO_RES_SCHEDULER
 
OSEK_ENABLE


	)

134 
	tTaskPri‹ôyTy≥
;

137 
	mExãnded
 : 1;

138 
	mPªemtive
 : 1;

139 
	mSèã
 : 2;

140 } 
	tTaskFœgsTy≥
;

142 
uöt8
 
	tTaskA˘iv©i⁄sTy≥
;

144 
uöt32
 
	tTaskEvítsTy≥
;

146 
uöt32
 
	tTaskResour˚sTy≥
;

148 
uöt8
* 
	tSèckPåTy≥
;

150 
uöt16
 
	tSèckSizeTy≥
;

152 (* 
	tE¡ryPoötTy≥
)();

154 (* 
	tCÆlbackTy≥
)();

156 
uöt8
 
	tTaskTŸÆTy≥
;

168 
E¡ryPoötTy≥
 
E¡ryPoöt
;

169 
TaskC⁄ãxtRefTy≥
 
TaskC⁄ãxt
;

170 
SèckPåTy≥
 
SèckPå
;

171 
SèckSizeTy≥
 
SèckSize
;

172 
TaskPri‹ôyTy≥
 
SèticPri‹ôy
;

173 
TaskA˘iv©i⁄sTy≥
 
MaxA˘iv©i⁄s
;

174 
TaskFœgsTy≥
 
C⁄°Fœgs
;

175 
TaskEvítsTy≥
 
EvítsMask
;

176 
TaskResour˚sTy≥
 
Resour˚sMask
;

177 } 
	tTaskC⁄°Ty≥
;

190 
TaskPri‹ôyTy≥
 
A˘uÆPri‹ôy
;

191 
TaskA˘iv©i⁄sTy≥
 
A˘iv©i⁄s
;

192 
TaskFœgsTy≥
 
Fœgs
;

193 
TaskEvítsTy≥
 
Evíts
;

194 
TaskEvítsTy≥
 
EvítsWaô
;

195 
TaskResour˚sTy≥
 
Resour˚s
;

196 } 
	tTaskV¨übÀTy≥
;

204 
TaskTŸÆTy≥
 
TŸÆTasks
;

205 
TaskRefTy≥
 
TasksRef
;

206 } 
	tAutoSèπTy≥
;

214 
TaskTŸÆTy≥
 
Li°Lígth
;

215 
TaskRefTy≥
 
TaskRef
;

216 } 
	tRódyC⁄°Ty≥
;

224 
TaskTŸÆTy≥
 
Li°Sèπ
;

225 
TaskTŸÆTy≥
 
Li°Cou¡
;

226 } 
	tRódyV¨Ty≥
;

234 
uöt8
 
	tAœrmSèãTy≥
;

237 
uöt32
 
	tAœrmTimeTy≥
;

240 
uöt32
 
	tAœrmCy˛eTimeTy≥
;

243 
uöt8
 
	tCou¡îTy≥
;

246 
uöt32f
 
	tCou¡îIn¸emítTy≥
;

249 
uöt32f
 
	tAœrmIn¸emítTy≥
;

253 
ALARMCALLBACK
 = 0,

254 
SETEVENT
 = 1,

255 
ACTIVATETASK
 = 2,

256 
INCREMENT
 = 3

257 } 
	tAœrmA˘i⁄Ty≥
;

264 
CÆlbackTy≥
 
CÆlbackFun˘i⁄
;

265 
TaskTy≥
 
TaskID
;

266 
EvítMaskTy≥
 
Evít
;

267 
Cou¡îTy≥
 
Cou¡î
;

268 } 
	tAœrmA˘i⁄InfoTy≥
;

272 
AœrmSèãTy≥
 
AœrmSèã
;

273 
AœrmTimeTy≥
 
AœrmTime
;

274 
AœrmCy˛eTimeTy≥
 
AœrmCy˛eTime
;

275 } 
	tAœrmV¨Ty≥
;

279 
Cou¡îTy≥
 
Cou¡î
;

280 
AœrmA˘i⁄Ty≥
 
AœrmA˘i⁄
;

281 
AœrmA˘i⁄InfoTy≥
 
AœrmA˘i⁄Info
;

282 } 
	tAœrmC⁄°Ty≥
;

286 
AµModeTy≥
 
Mode
;

287 
AœrmTy≥
 
Aœrm
;

288 
AœrmTimeTy≥
 
AœrmTime
;

289 
AœrmCy˛eTimeTy≥
 
AœrmCy˛eTime
;

290 } 
	tAutoSèπAœrmTy≥
;

293 
uöt8
 
AœrmsCou¡
;

294 
AœrmTy≥
* 
AœrmRef
;

295 
TickTy≥
 
MaxAŒowedVÆue
;

296 
TickTy≥
 
MöCy˛e
;

297 
TickTy≥
 
TicksPîBa£
;

298 } 
	tCou¡îC⁄°Ty≥
;

301 
TickTy≥
 
Time
;

302 } 
	tCou¡îV¨Ty≥
;

311 
uöt8
 
Eº‹HookRu¬ög
;

318 c⁄° 
TaskC⁄°Ty≥
 
TasksC⁄°
[
TASKS_COUNT
];

324 
TaskV¨übÀTy≥
 
TasksV¨
[
TASKS_COUNT
];

330 
uöt8
 
Aµliˇti⁄Mode
;

333 c⁄° 
TaskTy≥
 
TasksAµModeAµMode1
[2];

335 c⁄° 
AutoSèπTy≥
 
AutoSèπ
[1];

338 c⁄° 
TaskPri‹ôyTy≥
 
Resour˚sPri‹ôy
[0];

341 c⁄° 
RódyC⁄°Ty≥
 
RódyC⁄°
[3];

344 
RódyV¨Ty≥
 
RódyV¨
[3];

347 c⁄° 
TaskPri‹ôyTy≥
 
Resour˚sPri‹ôy
[0];

350 
AœrmV¨Ty≥
 
AœrmsV¨
[0];

353 c⁄° 
AœrmC⁄°Ty≥
 
AœrmsC⁄°
[0];

356 c⁄° 
AutoSèπAœrmTy≥
 
AutoSèπAœrm
[
ALARM_AUTOSTART_COUNT
];

359 
Cou¡îV¨Ty≥
 
Cou¡îsV¨
[0];

362 c⁄° 
Cou¡îC⁄°Ty≥
 
Cou¡îsC⁄°
[0];

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\config\inc\cortexM4\Os_Internal_Arch_Cfg.h

38 #i‚de‡
_OS_INTERNAL_ARCH_CFG_H_


39 
	#_OS_INTERNAL_ARCH_CFG_H_


	)

101 
uöt32
 * 
	tTaskC⁄ãxtTy≥
;

104 
TaskC⁄ãxtTy≥
* 
	tTaskC⁄ãxtRefTy≥
;

116 
E«bÀ_U£r_ISRs
();

117 
E«bÀ_ISR2_Arch
();

118 
DißbÀ_ISR2_Arch
();

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\config\src\Os_Cfg.c

66 
	~"Os_I¡î«l.h
"

75 
	gO£k_Eº‹Api
;

77 
	gO£k_Eº‹P¨am1
;

79 
	gO£k_Eº‹P¨am2
;

81 
	gO£k_Eº‹P¨am3
;

83 
	gO£k_Eº‹Rë
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\config\src\Os_Internal_Cfg.c

70 
	~"Os_I¡î«l.h
"

80 
uöt8
 
	gSèckTaskTaskU¨tRe˚ive
[512];

82 
uöt8
 
	gSèckTaskTaskLed
[512];

84 
uöt8
 
	gSèckTaskTaskIdÀ
[512];

87 
TaskC⁄ãxtTy≥
 
	gC⁄ãxtTaskTaskU¨tRe˚ive
;

89 
TaskC⁄ãxtTy≥
 
	gC⁄ãxtTaskTaskLed
;

91 
TaskC⁄ãxtTy≥
 
	gC⁄ãxtTaskTaskIdÀ
;

94 
TaskTy≥
 
	gRódyLi°2
[1];

97 
TaskTy≥
 
	gRódyLi°1
[1];

100 
TaskTy≥
 
	gRódyLi°0
[1];

115 c⁄° 
TaskC⁄°Ty≥
 
	gTasksC⁄°
[
TASKS_COUNT
] = {

118 
OSEK_TASK_TaskU¨tRe˚ive
,

119 &
C⁄ãxtTaskTaskU¨tRe˚ive
,

120 
SèckTaskTaskU¨tRe˚ive
,

134 
OSEK_TASK_TaskLed
,

135 &
C⁄ãxtTaskTaskLed
,

136 
SèckTaskTaskLed
,

150 
OSEK_TASK_TaskIdÀ
,

151 &
C⁄ãxtTaskTaskIdÀ
,

152 
SèckTaskTaskIdÀ
,

167 
TaskV¨übÀTy≥
 
	gTasksV¨
[
TASKS_COUNT
];

170 c⁄° 
TaskTy≥
 
	gTasksAµModeAµMode1
[2] = {

171 
TaskU¨tRe˚ive
,

172 
TaskIdÀ


175 c⁄° 
AutoSèπTy≥
 
	gAutoSèπ
[1] = {

179 (
TaskRefTy≥
)
TasksAµModeAµMode1


183 c⁄° 
RódyC⁄°Ty≥
 
	gRódyC⁄°
[3] = {

186 
RódyLi°2


190 
RódyLi°1


194 
RódyLi°0


200 
RódyV¨Ty≥
 
	gRódyV¨
[3];

203 c⁄° 
TaskPri‹ôyTy≥
 
	gResour˚sPri‹ôy
[0] = {

208 
AœrmV¨Ty≥
 
	gAœrmsV¨
[0];

210 c⁄° 
AœrmC⁄°Ty≥
 
	gAœrmsC⁄°
[0] = {

214 c⁄° 
AutoSèπAœrmTy≥
 
	gAutoSèπAœrm
[
ALARM_AUTOSTART_COUNT
] = {

218 
Cou¡îV¨Ty≥
 
	gCou¡îsV¨
[0];

220 c⁄° 
Cou¡îC⁄°Ty≥
 
	gCou¡îsC⁄°
[0] = {

227 
uöt8
 
	gAµliˇti⁄Mode
;

231 
uöt8
 
	gEº‹HookRu¬ög
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\config\src\cortexM4\Os_Internal_Arch_Cfg.c

69 
	~"Os_I¡î«l.h
"

70 
	~"devi˚_imx.h
"

83 
Re£t_H™dÀr
();

86 
__SèckT›
();

89 
SysTick_H™dÀr
();

90 
PídSV_H™dÀr
();

95 
__©åibuã__
 ((
£˘i⁄
(".text")))

96 
	$NMI_H™dÀr
() {

99 
	}
}

100 
__©åibuã__
 ((
£˘i⁄
(".text")))

101 
	$H¨dFau…_H™dÀr
() {

104 
	}
}

105 
__©åibuã__
 ((
£˘i⁄
(".text")))

106 
	$MemM™age_H™dÀr
() {

109 
	}
}

110 
__©åibuã__
 ((
£˘i⁄
(".text")))

111 
	$BusFau…_H™dÀr
() {

114 
	}
}

115 
__©åibuã__
 ((
£˘i⁄
(".text")))

116 
	$UßgeFau…_H™dÀr
() {

119 
	}
}

120 
__©åibuã__
 ((
£˘i⁄
(".text")))

121 
	$SVC_H™dÀr
() {

124 
	}
}

125 
__©åibuã__
 ((
£˘i⁄
(".text")))

126 
	$DebugM⁄_H™dÀr
() {

129 
	}
}

134 
__©åibuã__
 ((
£˘i⁄
(".isr_vector")))

135 (* c⁄° 
g_p‚Ve˘‹s
[])() = {

137 &
__SèckT›
,

138 
Re£t_H™dÀr
,

139 
NMI_H™dÀr
,

140 
H¨dFau…_H™dÀr
,

141 
MemM™age_H™dÀr
,

142 
BusFau…_H™dÀr
,

143 
UßgeFau…_H™dÀr
,

148 
SVC_H™dÀr
,

149 
DebugM⁄_H™dÀr
,

151 
PídSV_H™dÀr
,

152 
SysTick_H™dÀr
,

155 
OSEK_ISR_NoH™dÀr
,

156 
OSEK_ISR_NoH™dÀr
,

157 
OSEK_ISR_NoH™dÀr
,

158 
OSEK_ISR_NoH™dÀr
,

159 
OSEK_ISR_NoH™dÀr
,

160 
OSEK_ISR_NoH™dÀr
,

161 
OSEK_ISR_NoH™dÀr
,

162 
OSEK_ISR_NoH™dÀr
,

163 
OSEK_ISR_NoH™dÀr
,

164 
OSEK_ISR_NoH™dÀr
,

165 
OSEK_ISR_NoH™dÀr
,

166 
OSEK_ISR_NoH™dÀr
,

167 
OSEK_ISR_NoH™dÀr
,

168 
OSEK_ISR_NoH™dÀr
,

169 
OSEK_ISR_NoH™dÀr
,

170 
OSEK_ISR_NoH™dÀr
,

171 
OSEK_ISR_NoH™dÀr
,

172 
OSEK_ISR_NoH™dÀr
,

173 
OSEK_ISR_NoH™dÀr
,

174 
OSEK_ISR_NoH™dÀr
,

175 
OSEK_ISR_NoH™dÀr
,

176 
OSEK_ISR_NoH™dÀr
,

177 
OSEK_ISR_NoH™dÀr
,

178 
OSEK_ISR_NoH™dÀr
,

179 
OSEK_ISR_NoH™dÀr
,

180 
OSEK_ISR_NoH™dÀr
,

181 
OSEK_ISR_NoH™dÀr
,

182 
OSEK_ISR_NoH™dÀr
,

183 
OSEK_ISR_NoH™dÀr
,

184 
OSEK_ISR_NoH™dÀr
,

185 
OSEK_ISR_NoH™dÀr
,

186 
OSEK_ISR_NoH™dÀr
,

187 
OSEK_ISR_NoH™dÀr
,

188 
OSEK_ISR_NoH™dÀr
,

189 
OSEK_ISR_NoH™dÀr
,

190 
OSEK_ISR_NoH™dÀr
,

191 
OSEK_ISR_NoH™dÀr
,

192 
OSEK_ISR_NoH™dÀr
,

193 
OSEK_ISR_NoH™dÀr
,

194 
OSEK_ISR_NoH™dÀr
,

195 
OSEK_ISR_NoH™dÀr
,

196 
OSEK_ISR_NoH™dÀr
,

197 
OSEK_ISR_NoH™dÀr
,

198 
OSEK_ISR_NoH™dÀr
,

199 
OSEK_ISR_NoH™dÀr
,

200 
OSEK_ISR_NoH™dÀr
,

201 
OSEK_ISR_NoH™dÀr
,

202 
OSEK_ISR_NoH™dÀr
,

203 
OSEK_ISR_NoH™dÀr
,

204 
OSEK_ISR_NoH™dÀr
,

205 
OSEK_ISR_NoH™dÀr
,

206 
OSEK_ISR_NoH™dÀr
,

207 
OSEK_ISR_NoH™dÀr
,

208 
OSEK_ISR_NoH™dÀr
,

209 
OSEK_ISR_NoH™dÀr
,

210 
OSEK_ISR_NoH™dÀr
,

211 
OSEK_ISR_NoH™dÀr
,

212 
OSEK_ISR_NoH™dÀr
,

213 
OSEK_ISR_NoH™dÀr
,

214 
OSEK_ISR_NoH™dÀr
,

215 
OSEK_ISR_NoH™dÀr
,

216 
OSEK_ISR_NoH™dÀr
,

217 
OSEK_ISR_NoH™dÀr
,

218 
OSEK_ISR_NoH™dÀr
,

219 
OSEK_ISR_NoH™dÀr
,

220 
OSEK_ISR_NoH™dÀr
,

221 
OSEK_ISR_NoH™dÀr
,

222 
OSEK_ISR_NoH™dÀr
,

223 
OSEK_ISR_NoH™dÀr
,

224 
OSEK_ISR_NoH™dÀr
,

225 
OSEK_ISR_NoH™dÀr
,

226 
OSEK_ISR_NoH™dÀr
,

227 
OSEK_ISR_NoH™dÀr
,

228 
OSEK_ISR_NoH™dÀr
,

229 
OSEK_ISR_NoH™dÀr
,

230 
OSEK_ISR_NoH™dÀr
,

231 
OSEK_ISR_NoH™dÀr
,

232 
OSEK_ISR_NoH™dÀr
,

233 
OSEK_ISR_NoH™dÀr
,

234 
OSEK_ISR_NoH™dÀr
,

235 
OSEK_ISR_NoH™dÀr
,

236 
OSEK_ISR_NoH™dÀr
,

237 
OSEK_ISR_NoH™dÀr
,

238 
OSEK_ISR_NoH™dÀr
,

239 
OSEK_ISR_NoH™dÀr
,

240 
OSEK_ISR_NoH™dÀr
,

241 
OSEK_ISR_NoH™dÀr
,

242 
OSEK_ISR_NoH™dÀr
,

243 
OSEK_ISR_NoH™dÀr
,

244 
OSEK_ISR_NoH™dÀr
,

245 
OSEK_ISR_NoH™dÀr
,

246 
OSEK_ISR_NoH™dÀr
,

247 
OSEK_ISR_NoH™dÀr
,

248 
OSEK_ISR_NoH™dÀr
,

249 
OSEK_ISR_NoH™dÀr
,

250 
OSEK_ISR_NoH™dÀr
,

251 
OSEK_ISR_NoH™dÀr
,

252 
OSEK_ISR_NoH™dÀr
,

253 
OSEK_ISR_NoH™dÀr
,

254 
OSEK_ISR_NoH™dÀr
,

255 
OSEK_ISR_NoH™dÀr
,

256 
OSEK_ISR_NoH™dÀr
,

257 
OSEK_ISR_NoH™dÀr
,

258 
OSEK_ISR_NoH™dÀr
,

259 
OSEK_ISR_NoH™dÀr
,

260 
OSEK_ISR_NoH™dÀr
,

261 
OSEK_ISR_NoH™dÀr
,

262 
OSEK_ISR_NoH™dÀr
,

263 
OSEK_ISR_NoH™dÀr
,

264 
OSEK_ISR_NoH™dÀr
,

265 
OSEK_ISR_NoH™dÀr
,

266 
OSEK_ISR_NoH™dÀr
,

267 
OSEK_ISR_NoH™dÀr
,

268 
OSEK_ISR_NoH™dÀr
,

269 
OSEK_ISR_NoH™dÀr
,

270 
OSEK_ISR_NoH™dÀr
,

271 
OSEK_ISR_NoH™dÀr
,

272 
OSEK_ISR_NoH™dÀr
,

273 
OSEK_ISR_NoH™dÀr
,

274 
OSEK_ISR_NoH™dÀr
,

275 
OSEK_ISR_NoH™dÀr
,

276 
OSEK_ISR_NoH™dÀr
,

277 
OSEK_ISR_NoH™dÀr
,

278 
OSEK_ISR_NoH™dÀr
,

279 
OSEK_ISR_NoH™dÀr
,

280 
OSEK_ISR_NoH™dÀr
,

281 
OSEK_ISR_NoH™dÀr
,

282 
OSEK_ISR_NoH™dÀr
,

283 
	}
};

286 
	$E«bÀ_U£r_ISRs
()

288 
	}
}

291 
	$E«bÀ_ISR2_Arch
()

293 
	}
}

296 
	$DißbÀ_ISR2_Arch
()

298 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\Compiler.h

36 #i‚de‡
_COMPILER_H_


37 
	#_COMPILER_H_


	)

70 #i‡––
deföed
 
__STDC_VERSION__
 ) && \

71 –
	g__STDC_VERSION__
 >= 199901L ) )

72 
	#C99_COMPILER


	)

74 #unde‡
C99_COMPILER


78 #i‡
deföed
(
__˝lu•lus
)

79 
	#CPP_COMPILER


	)

81 #unde‡
CPP_COMPILER


	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\Os_Internal.h

36 #i‚de‡
_OS_INTERNAL_H_


37 
	#_OS_INTERNAL_H_


	)

71 
	~"os.h
"

72 
	~"Os_I¡î«l_Arch.h
"

73 #ifde‡
OSEK_INLCUDE_INTERNAL_ARCH_CPU


77 
	~"Os_I¡î«l_Arch_Cpu.h
"

79 
	~"Os_I¡î«l_Arch_Cfg.h
"

80 
	~"Os_I¡î«l_Cfg.h
"

84 
	#INVALID_TASK
 ((
TaskTy≥
)~0)

	)

87 
	#TASK_ST_SUSPENDED
 
SUSPENDED


	)

90 
	#TASK_ST_READY
 
READY


	)

93 
	#TASK_ST_RUNNING
 
RUNNING


	)

96 
	#TASK_ST_WAITING
 
WAITING


	)

99 
	#TASK_ST_INVALID
 ((
TaskSèãTy≥
)~0)

	)

102 
	#TASK_MAX_PRIORITY
 ((
TaskPri‹ôyTy≥
)~0)

	)

105 
	#ERROR_CHECKING_STANDARD
 1

	)

108 
	#ERROR_CHECKING_EXTENDED
 2

	)

114 
	#Rñó£I¡î«lResour˚s
() \

116 }

	)

119 
	#CONTEXT_INVALID
 ((
C⁄ãxtTy≥
)0U)

	)

121 
	#CONTEXT_TASK
 ((
C⁄ãxtTy≥
)1U)

	)

123 
	#CONTEXT_ISR1
 ((
C⁄ãxtTy≥
)2U)

	)

125 
	#CONTEXT_ISR2
 ((
C⁄ãxtTy≥
)3U)

	)

127 
	#CONTEXT_SYS
 ((
C⁄ãxtTy≥
)4U)

	)

129 
	#CONTEXT_DBG
 ((
C⁄ãxtTy≥
)5U)

	)

137 
	#GëCÆlögC⁄ãxt
(Ë(
A˘uÆC⁄ãxt
)

	)

149 
	#SëA˘uÆC⁄ãxt
(
√wc⁄ãxt
) \

151 
A˘uÆC⁄ãxt
 = (
√wc⁄ãxt
); \

152 } 0)

	)

160 
	#GëRu¬ögTask
(Ë(
Ru¬ögTask
)

	)

169 
	#SëRu¬ögTask
(
√wèsk
Ë(
Ru¬ögTask
 = (√wèskË)

	)

178 
	#GëCou¡î
(
Cou¡îID
Ë
	`GëCou¡î_Arch
(Cou¡îID)

	)

185 
uöt8
 
	tC⁄ãxtTy≥
;

192 
C⁄ãxtTy≥
 
A˘uÆC⁄ãxt
;

195 
TaskTy≥
 
Ru¬ögTask
;

202 
SèπOs_Arch
();

211 
TaskTy≥
 
GëNextTask
();

221 
RemoveTask
(
TaskTy≥
 
TaskID
);

230 
AddRódy
(
TaskTy≥
 
TaskID
);

236 
OSEK_ISR_NoH™dÀr
();

249 
Cou¡îIn¸emítTy≥
 
In¸emítCou¡î
(
Cou¡îTy≥
 
Cou¡îID
, Cou¡îIn¸emítTy≥ 
In¸emít
);

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\Types.h

36 #i‚de‡
_TYPES_H_


37 
	#_TYPES_H_


	)

66 
	~"Compûî.h
"

69 #i‚de‡
OSEK_ENABLE


71 
	#OSEK_ENABLE
 1

	)

72 #ñi‡
OSEK_ENABLE
 != 1

73 #îr‹ 
OSEK_ENABLE
 
deföed
 
somewhîe
 
wôh
 
a
 
dif„ª¡
 
vÆue


76 #i‚de‡
OSEK_DISABLE


78 
	#OSEK_DISABLE
 2

	)

79 #ñi‡
OSEK_DISABLE
 != 2

80 #îr‹ 
OSEK_DISABLE
 
deföed
 
somewhîe
 
wôh
 
a
 
dif„ª¡
 
vÆue


84 #unde‡
C99_COMPILER


85 #i‡
deföed
(
__STDC_VERSION__
)

86 #i‡
__STDC_VERSION__
>=199901L

87 
	#C99_COMPILER


	)

92 #unde‡
CPP_COMPILER


93 #i‡
deföed
(
__˝lu•lus
)

94 
	#CPP_COMPILER


	)

98 #unde‡
FREESTANDING_ENV


99 #i‡!
deföed
(
__STDC_HOSTED__
)

100 
	#FREESTANDING_ENV


	)

104 #i‡!
deföed
(
FALSE
)

105 #i‡
deföed
(
C99_COMPILER
Ë|| deföed(
CPP_COMPILER
)

106 #i‚de‡
FALSE


107 
	#FALSE
 
Ál£


	)

109 
	#FALSE
 ((
boﬁón
)0)

	)

115 #i‡!
deföed
(
TRUE
)

116 #i‡
deföed
(
C99_COMPILER
Ë|| deföed(
CPP_COMPILER
)

117 #i‚de‡
TRUE


118 
	#TRUE
 
åue


	)

120 
	#TRUE
 ((
boﬁón
)1)

	)

126 #i‡
deföed
(
C99_COMPILER
)

127 
	~<°döt.h
>

128 
	~<°dboﬁ.h
>

129 #ñi‡
deföed
(
CPP_COMPILER
)

130 
	~<c°döt
>

131 
	~<c°dboﬁ
>

133 
	~"Ty≥s_Arch.h
"

136 #i‚de‡
NULL


138 
	#NULL
 ((*)0)

	)

141 #i‡
deföed
(
C99_COMPILER
Ë|| deföed(
CPP_COMPILER
)

143 
_Boﬁ
 
	tboﬁón
;

146 
öt8_t
 
	tsöt8
;

148 
uöt8_t
 
	tuöt8
;

150 
öt16_t
 
	tsöt16
;

152 
uöt16_t
 
	tuöt16
;

154 
öt32_t
 
	tsöt32
;

156 
uöt32_t
 
	tuöt32
;

159 
öt_Àa°8_t
 
	tsöt8_Àa°
;

161 
uöt_Àa°8_t
 
	tuöt8_Àa°
;

163 
öt_Àa°16_t
 
	tsöt16_Àa°
;

165 
uöt_Àa°16_t
 
	tuöt16_Àa°
;

167 
öt_Àa°32_t
 
	tsöt32_Àa°
;

169 
uöt_Àa°32_t
 
	tuöt32_Àa°
;

172 
öt_Á°8_t
 
	tsöt8f
;

174 
uöt_Á°8_t
 
	tuöt8f
;

176 
öt_Á°16_t
 
	tsöt16f
;

178 
uöt_Á°16_t
 
	tuöt16f
;

180 
öt_Á°32_t
 
	tsöt32f
;

182 
uöt_Á°32_t
 
	tuöt32f
;

186 #i‚de‡
TYPES_BOOLEAN


188 
	tboﬁón
;

191 #i‚de‡
TYPES_UINT8


192 
	#TYPES_UINT8


	)

194 
	tuöt8
;

197 #i‚de‡
TYPES_SINT8


198 
	#TYPES_SINT8


	)

200 sig√d 
	tsöt8
;

203 #i‚de‡
TYPES_UINT8F


204 
	#TYPES_UINT8F


	)

206 
	tuöt8f
;

209 #i‚de‡
TYPES_SINT8F


210 
	#TYPES_SINT8F


	)

212 sig√d 
	tsöt8f
;

215 #i‚de‡
TYPES_UINT16


216 
	#TYPES_UINT16


	)

218 
	tuöt16
;

221 #i‚de‡
TYPES_SINT16


222 
	#TYPES_SINT16


	)

224 sig√d 
	tsöt16
;

227 #i‚de‡
TYPES_UINT16F


228 
	#TYPES_UINT16F


	)

230 
	tuöt16f
;

233 #i‚de‡
TYPES_SINT16F


234 
	#TYPES_SINT16F


	)

236 sig√d 
	tsöt16f
;

239 #i‚de‡
TYPES_UINT32


240 
	#TYPES_UINT32


	)

242 
	tuöt32
;

245 #i‚de‡
TYPES_SINT32


246 
	#TYPES_SINT32


	)

248 sig√d 
	tsöt32
;

251 #i‚de‡
TYPES_UINT32F


252 
	#TYPES_UINT32F


	)

254 
	tuöt32f
;

257 #i‚de‡
TYPES_SINT32F


258 
	#TYPES_SINT32F


	)

260 sig√d 
	tsöt32f
;

265 #i‚de‡
TYPES_STD_RETURNTYPE


266 
	#TYPES_STD_RETURNTYPE


	)

268 
uöt8f
 
	tStd_Rëu∫Ty≥
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\Types_Arch.h

36 #i‚de‡
_TYPES_ARCH_H_


37 
	#_TYPES_ARCH_H_


	)

70 #i‚de‡
TYPES_BOOLEAN


71 
	#TYPES_BOOLEAN


	)

73 
	tboﬁón
;

75 #îr‹ 
boﬁón
 
deföed
 
bef‹e


78 #i‚de‡
TYPES_UINT8


79 
	#TYPES_UINT8


	)

81 
	tuöt8
;

83 #îr‹ 
uöt8
 
deföed
 
bef‹e


86 #i‚de‡
TYPES_SINT8


87 
	#TYPES_SINT8


	)

89 sig√d 
	tsöt8
;

91 #îr‹ 
söt8
 
deföed
 
bef‹e


94 #i‚de‡
TYPES_UINT8F


95 
	#TYPES_UINT8F


	)

97 
	tuöt8f
;

99 #îr‹ 
uöt8f
 
deföed
 
bef‹e


102 #i‚de‡
TYPES_SINT8F


103 
	#TYPES_SINT8F


	)

105 sig√d 
	tsöt8f
;

107 #îr‹ 
söt8f
 
deföed
 
bef‹e


110 #i‚de‡
TYPES_UINT16


111 
	#TYPES_UINT16


	)

113 
	tuöt16
;

115 #îr‹ 
uöt16
 
deföed
 
bef‹e


118 #i‚de‡
TYPES_SINT16


119 
	#TYPES_SINT16


	)

121 sig√d 
	tsöt16
;

123 #îr‹ 
söt16
 
deföed
 
bef‹e


126 #i‚de‡
TYPES_UINT16F


127 
	#TYPES_UINT16F


	)

129 
	tuöt16f
;

131 #îr‹ 
uöt16f
 
deföed
 
bef‹e


134 #i‚de‡
TYPES_SINT16F


135 
	#TYPES_SINT16F


	)

137 sig√d 
	tsöt16f
;

139 #îr‹ 
uöt16f
 
deföed
 
bef‹e


142 #i‚de‡
TYPES_UINT32


143 
	#TYPES_UINT32


	)

145 
	tuöt32
;

147 #îr‹ 
uöt32
 
deföed
 
bef‹e


150 #i‚de‡
TYPES_SINT32


151 
	#TYPES_SINT32


	)

153 sig√d 
	tsöt32
;

155 #îr‹ 
söt32
 
deföed
 
bef‹e


158 #i‚de‡
TYPES_UINT32F


159 
	#TYPES_UINT32F


	)

161 
	tuöt32f
;

163 #îr‹ 
uöt32f
 
deföed
 
bef‹e


166 #i‚de‡
TYPES_SINT32F


167 
	#TYPES_SINT32F


	)

169 sig√d 
	tsöt32f
;

171 #îr‹ 
söt32
 
deföed
 
bef‹e


174 #i‚de‡
TYPES_UINT64


175 
	#TYPES_UINT64


	)

177 
	tuöt64
;

179 #îr‹ 
uöt64
 
deföed
 
bef‹e


182 #i‚de‡
TYPES_SINT64


183 
	#TYPES_SINT64


	)

185 sig√d 
	tsöt64
;

187 #îr‹ 
söt64
 
deföed
 
bef‹e


	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\chip.h

1 #i‚de‡
__CHIP_H__


2 
	#__CHIP_H__


	)

4 #i‚de‡
size_t


5 
	#size_t
 

	)

8 #i‚de‡
FALSE


9 
	#FALSE
 0

	)

12 #i‚de‡
TRUE


13 
	#TRUE
 1

	)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\cortexM4\Os_Arch.h

33 #i‚de‡
_OS_ARCH_H_


34 
	#_OS_ARCH_H_


	)

81 
	~"Os_I¡î«l_Arch_Cfg.h
"

93 
	#E«bÀAŒI¡îru±s_Arch
(Ë
	`ResumeAŒI¡îru±s_Arch
()

	)

96 
	#DißbÀAŒI¡îru±s_Arch
(Ë
	`Su•ídAŒI¡îru±s_Arch
()

	)

102 
	#ResumeAŒI¡îru±s_Arch
(Ë
__asm
 vﬁ©ûe("˝sõ i")

	)

108 
	#Su•ídAŒI¡îru±s_Arch
(Ë
__asm
 vﬁ©ûe("˝sid i")

	)

115 
	#ResumeOSI¡îru±s_Arch
(Ë
	`E«bÀ_ISR2_Arch
()

	)

122 
	#Su•ídOSI¡îru±s_Arch
(Ë
	`DißbÀ_ISR2_Arch
()

	)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\cortexM4\Os_Internal_Arch.h

34 #i‚de‡
_OS_INTERNAL_ARCH_H_


35 
	#_OS_INTERNAL_ARCH_H_


	)

88 
	#OSEK_INLCUDE_INTERNAL_ARCH_CPU


	)

90 * 
O£k_OldTaskPå_Arch
;

91 * 
O£k_NewTaskPå_Arch
;

92 
TaskTy≥
 
Tîmö©ögTask
;

99 
	#I¡Secuª_Sèπ
(Ë
	`Su•ídAŒI¡îru±s
()

	)

105 
	#I¡Secuª_End
(Ë
	`ResumeAŒI¡îru±s
()

	)

120 
	#o£k∑u£
(Ë
__asm
 vﬁ©ûe("wfi")

	)

126 
	#CÆlTask
(
a˘uÆèsk
, 
√xâask
) \

128 
O£k_OldTaskPå_Arch
 = (*)
TasksC⁄°
[(
a˘uÆèsk
)].
TaskC⁄ãxt
; \

129 
O£k_NewTaskPå_Arch
 = (*)
TasksC⁄°
[(
√xâask
)].
TaskC⁄ãxt
; \

130 
__asm__
 
	`__vﬁ©ûe__
 ( \

140 }

	)

146 
	#JmpTask
(
èsk
) \

148 
TaskTy≥
 
WaôögTask
; \

149 if(
WaôögTask
 !
INVALID_TASK
) \

151 
O£k_OldTaskPå_Arch
 = (*)
TasksC⁄°
[
WaôögTask
].
TaskC⁄ãxt
; \

152 
WaôögTask
 = 
INVALID_TASK
; \

156 
O£k_OldTaskPå_Arch
 = (*)0; \

158 
O£k_NewTaskPå_Arch
 = (*)
TasksC⁄°
[(
èsk
)].
TaskC⁄ãxt
; \

159 
__asm__
 
	`__vﬁ©ûe__
 ( \

169 }

	)

172 
	#SaveC⁄ãxt
(
èsk
) \

174 
TaskTy≥
 
WaôögTask
; \

175 if(
TasksV¨
[
	`GëRu¬ögTask
()].
Fœgs
.
Sèã
 =
TASK_ST_WAITING
) \

177 
WaôögTask
 = 
	`GëRu¬ögTask
(); \

179 
Êag
 = 0; \

181 
	`RemoveTask
(
	`GëRu¬ögTask
()); \

183 
	`SëA˘uÆC⁄ãxt
(
CONTEXT_SYS
); \

185 
	`SëRu¬ögTask
(
INVALID_TASK
); \

187 
	`I¡Secuª_End
(); \

189 
	`ScheduÀ
(); \

191 
	`I¡Secuª_Sèπ
(); \

192 }

	)

195 
	#Re£tSèck
(
èsk
) \

197 
Tîmö©ögTask
 = (
èsk
); \

198 }

	)

201 
	#SëE¡ryPoöt
(
èsk
) \

203 
Tîmö©ögTask
 = (
èsk
); \

204 }

	)

211 
	#E«bÀOSI¡îru±s
(Ë
__asm
 vﬁ©ûe("˝sõ i")

	)

221 
	#E«bÀI¡îru±s
(Ë
	`E«bÀOSI¡îru±s
()

	)

228 
	#DißbÀOSI¡îru±s
(Ë
__asm
 vﬁ©ûe("˝sid i")

	)

238 
	#DißbÀI¡îru±s
(Ë
	`DißbÀOSI¡îru±s
()

	)

247 
	#GëCou¡î_Arch
(
Cou¡îID
Ë(
Cou¡îsV¨
[Cou¡îID].
Time
)

	)

253 
	#PªI§2_Arch
(
i§
)

	)

259 
	#Po°I§2_Arch
(
i§
Ë
	`ScheduÀ
()

	)

266 
	#ShutdownOs_Arch
()

	)

286 
InôSèck_Arch
(
uöt8
 
TaskID
);

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\cortexM4\StartOs_Arch_SysTick.h

2 
SèπOs_Arch_SysTick
();

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\cortexM4\stm32f4\Os_Internal_Arch_Cpu.h

35 #i‚de‡
_OS_INTERNAL_ARCH_CPU_H_


36 
	#_OS_INTERNAL_ARCH_CPU_H_


	)

95 
	~"chù.h
"

122 
SèπOs_Arch_Cpu
();

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\os.h

36 #i‚de‡
_OS_H_


37 
	#_OS_H_


	)

76 
	~"Ty≥s.h
"

77 
	~"Os_Cfg.h
"

78 
	~"Os_Arch.h
"

87 
	#TASK
(
«me
Ë
OSEK_TASK_
 ## 
	`«me
 ()

	)

95 
	#ISR
(
«me
Ë
OSEK_ISR_
 ## 
	`«me
 ()

	)

99 
	#ALARMCALLBACK
(
«me
Ë
OSEK_CALLBACK_
 ## 
	`«me
 ()

	)

102 
	#SUSPENDED
 0U

	)

104 
	#READY
 1U

	)

106 
	#RUNNING
 2U

	)

108 
	#WAITING
 3U

	)

110 
	#INVALID_STATE
 4U

	)

114 
	#E_OK
 ((
SètusTy≥
)0U)

	)

117 
	#E_OS_ACCESS
 ((
SètusTy≥
)1U)

	)

120 
	#E_OS_CALLEVEL
 ((
SètusTy≥
)2U)

	)

123 
	#E_OS_ID
 ((
SètusTy≥
)3U)

	)

126 
	#E_OS_LIMIT
 ((
SètusTy≥
)4U)

	)

129 
	#E_OS_NOFUNC
 ((
SètusTy≥
)5U)

	)

132 
	#E_OS_RESOURCE
 ((
SètusTy≥
)6U)

	)

135 
	#E_OS_STATE
 ((
SètusTy≥
)7U)

	)

138 
	#E_OS_VALUE
 ((
SètusTy≥
)8U)

	)

156 
	#E«bÀAŒI¡îru±s
() \

158 
DißbÀAŒI¡îru±s_Cou¡î
--; \

159 if(
DißbÀAŒI¡îru±s_Cou¡î
 <= \

160 ((
I¡îru±Cou¡îTy≥
)0U)) \

162 
DißbÀAŒI¡îru±s_Cou¡î
 = \

163 ((
I¡îru±Cou¡îTy≥
)0U); \

164 
	`E«bÀAŒI¡îru±s_Arch
(); \

166 }

	)

184 
	#DißbÀAŒI¡îru±s
() \

186 
DißbÀAŒI¡îru±s_Cou¡î
++; \

187 
	`DißbÀAŒI¡îru±s_Arch
(); \

188 }

	)

205 
	#ResumeAŒI¡îru±s
() \

207 
Su•ídAŒI¡îru±s_Cou¡î
--; \

208 if(
Su•ídAŒI¡îru±s_Cou¡î
 <= \

209 ((
I¡îru±Cou¡îTy≥
)0U)) \

211 
Su•ídAŒI¡îru±s_Cou¡î
 = \

212 ((
I¡îru±Cou¡îTy≥
)0U); \

213 
	`ResumeAŒI¡îru±s_Arch
(); \

215 }

	)

229 
	#Su•ídAŒI¡îru±s
() \

231 
Su•ídAŒI¡îru±s_Cou¡î
++; \

232 
	`Su•ídAŒI¡îru±s_Arch
(); \

233 }

	)

250 
	#ResumeOSI¡îru±s
() \

252 
Su•ídOSI¡îru±s_Cou¡î
--; \

253 if(
Su•ídOSI¡îru±s_Cou¡î
 <= \

254 ((
I¡îru±Cou¡îTy≥
)0U)) \

256 
Su•ídOSI¡îru±s_Cou¡î
 = \

257 ((
I¡îru±Cou¡îTy≥
)0U); \

258 
	`ResumeOSI¡îru±s_Arch
(); \

260 }

	)

275 
	#Su•ídOSI¡îru±s
() \

277 
Su•ídOSI¡îru±s_Cou¡î
++; \

278 
	`Su•ídOSI¡îru±s_Arch
(); \

279 }

	)

281 
	#OSSîvi˚Id_A˘iv©eTask
 1

	)

282 
	#OSSîvi˚Id_Tîmö©eTask
 2

	)

283 
	#OSSîvi˚Id_ChaöTask
 3

	)

284 
	#OSSîvi˚Id_ScheduÀ
 4

	)

285 
	#OSSîvi˚Id_GëTaskID
 5

	)

286 
	#OSSîvi˚Id_GëTaskSèã
 6

	)

287 
	#OSSîvi˚Id_DißbÀAŒI¡îru±s
 7

	)

288 
	#OSSîvi˚Id_E«bÀAŒI¡îru±s
 8

	)

289 
	#OSSîvi˚Id_Su•ídAŒI¡îru±s
 9

	)

290 
	#OSSîvi˚Id_ResumeAŒI¡îru±s
 10

	)

291 
	#OSSîvi˚Id_Su•ídOSI¡îru±s
 11

	)

292 
	#OSSîvi˚Id_ResumeOSI¡îru±s
 12

	)

293 
	#OSSîvi˚Id_GëResour˚
 13

	)

294 
	#OSSîvi˚Id_Rñó£Resour˚
 14

	)

295 
	#OSSîvi˚Id_SëEvít
 15

	)

296 
	#OSSîvi˚Id_CÀ¨Evít
 16

	)

297 
	#OSSîvi˚Id_GëEvít
 17

	)

298 
	#OSSîvi˚Id_WaôEvít
 18

	)

299 
	#OSSîvi˚Id_GëAœrmBa£
 19

	)

300 
	#OSSîvi˚Id_GëAœrm
 20

	)

301 
	#OSSîvi˚Id_SëRñAœrm
 21

	)

302 
	#OSSîvi˚Id_SëAbsAœrm
 22

	)

303 
	#OSSîvi˚Id_C™˚lAœrm
 23

	)

304 
	#OSSîvi˚Id_GëA˘iveAµliˇti⁄Mode
 24

	)

305 
	#OSSîvi˚Id_SèπOS
 25

	)

306 
	#OSSîvi˚Id_ShutdownOS
 26

	)

309 
	#RES_SCHEDULER
 255

	)

317 
	tSètusTy≥
;

323 
	tTaskTy≥
;

329 
TaskTy≥
* 
	tTaskRefTy≥
;

335 
	tTaskSèãTy≥
;

341 
TaskSèãTy≥
* 
	tTaskSèãRefTy≥
;

347 
	tAµModeTy≥
;

353 
	tResour˚Ty≥
;

359 
	tEvítMaskTy≥
;

365 
EvítMaskTy≥
* 
	tEvítMaskRefTy≥
;

371 
	tAœrmTy≥
;

377 
	tTickTy≥
;

383 
TickTy≥
* 
	tTickRefTy≥
;

391 
TickTy≥
 
	mmaxÆlowedvÆue
;

392 
TickTy≥
 
	mtick•îba£
;

393 
TickTy≥
 
	mmöcy˛e
;

394 } 
	tAœrmBa£Ty≥
;

400 
AœrmBa£Ty≥
* 
	tAœrmBa£RefTy≥
;

403 sig√d 
	tI¡îru±Cou¡îTy≥
;

407 
I¡îru±Cou¡îTy≥
 
Su•ídOSI¡îru±s_Cou¡î
;

410 
I¡îru±Cou¡îTy≥
 
DißbÀAŒI¡îru±s_Cou¡î
;

413 
I¡îru±Cou¡îTy≥
 
Su•ídAŒI¡îru±s_Cou¡î
;

446 
SètusTy≥
 
A˘iv©eTask
(
TaskTy≥
 
TaskID
);

457 
SètusTy≥
 
Tîmö©eTask
();

491 
SètusTy≥
 
ChaöTask
(
TaskTy≥
 
TaskID
);

502 
SètusTy≥
 
ScheduÀ
();

511 
SètusTy≥
 
GëTaskID
(
TaskRefTy≥
 
TaskID
);

522 
SètusTy≥
 
GëTaskSèã
(
TaskTy≥
 
TaskID
, 
TaskSèãRefTy≥
 
Sèã
);

536 
SètusTy≥
 
GëResour˚
(
Resour˚Ty≥
 
ResID
);

552 
SètusTy≥
 
Rñó£Resour˚
(
Resour˚Ty≥
 
ResID
);

565 
SèπOS
(
AµModeTy≥
 
Mode
);

575 
SètusTy≥
 
SëEvít
(
TaskTy≥
 
TaskID
, 
EvítMaskTy≥
 
Mask
);

598 
SètusTy≥
 
CÀ¨Evít
(
EvítMaskTy≥
 
Mask
);

607 
SètusTy≥
 
GëEvít
(
TaskTy≥
 
TaskID
, 
EvítMaskRefTy≥
 
Evít
);

616 
SètusTy≥
 
WaôEvít
(
EvítMaskTy≥
 
Mask
);

624 
ShutdownOS
(
SètusTy≥
 
Eº‹
);

630 
AµModeTy≥
 
GëA˘iveAµliˇti⁄Mode
();

641 
SètusTy≥
 
GëAœrmBa£
(
AœrmTy≥
 
AœrmID
, 
AœrmBa£RefTy≥
 
Info
);

651 
SètusTy≥
 
GëAœrm
(
AœrmTy≥
 
AœrmID
, 
TickRefTy≥
 
Tick
);

664 
SètusTy≥
 
SëRñAœrm
(
AœrmTy≥
 
AœrmID
, 
TickTy≥
 
In¸emít
, TickTy≥ 
Cy˛e
);

677 
SètusTy≥
 
SëAbsAœrm
(
AœrmTy≥
 
AœrmID
, 
TickTy≥
 
Sèπ
, TickTy≥ 
Cy˛e
);

701 
SètusTy≥
 
C™˚lAœrm
(
AœrmTy≥
 
AœrmID
);

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\ActivateTask.c

69 
	~"Os_I¡î«l.h
"

84 
SètusTy≥
 
	gA˘iv©eTask


86 
TaskTy≥
 
	gTaskID


97 
SètusTy≥
 
	gªt
 = 
E_OK
;

99 #i‡(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
)

101 i‡–
	gTaskID
 >
TASKS_COUNT
 )

108 
ªt
 = 
E_OS_ID
;

113 
I¡Secuª_Sèπ
();

118 i‡–
	gTasksV¨
[
TaskID
].
	gFœgs
.
	gSèã
 =
TASK_ST_SUSPENDED
 )

121 
TasksV¨
[
TaskID
].
A˘iv©i⁄s
++;

125 
	gTasksV¨
[
TaskID
].
	gFœgs
.
	gSèã
 = 
TASK_ST_READY
;

129 
	gTasksV¨
[
TaskID
].
	gEvíts
 = 0;

131 
AddRódy
(
TaskID
);

138 i‡–
	gTasksC⁄°
[
TaskID
].
	gC⁄°Fœgs
.
	gExãnded
 )

145 
	gªt
 = 
E_OS_LIMIT
;

150 i‡–
	gTasksV¨
[
TaskID
].
	gA˘iv©i⁄s
 < 
	gTasksC⁄°
[TaskID].
	gMaxA˘iv©i⁄s
 )

153 
	gTasksV¨
[
TaskID
].
	gA˘iv©i⁄s
++;

155 
AddRódy
(
TaskID
);

164 
	gªt
 = 
E_OS_LIMIT
;

169 
I¡Secuª_End
();

171 #i‡(
NON_PREEMPTIVE
 =
OSEK_DISABLE
)

173 i‡–
GëCÆlögC⁄ãxt
(Ë=
CONTEXT_TASK
 )

175 i‡––
TasksC⁄°
[
GëRu¬ögTask
()].
C⁄°Fœgs
.
Pªemtive
 ) &&

176 –
ªt
 =
E_OK
 ) )

181 
SëA˘uÆC⁄ãxt
(
CONTEXT_SYS
);

185 ()
ScheduÀ
();

188 
SëA˘uÆC⁄ãxt
(
CONTEXT_TASK
);

195 #i‡(
HOOK_ERRORHOOK
 =
OSEK_ENABLE
)

200 i‡––
	gªt
 !
E_OK
 ) && (
Eº‹HookRu¬ög
 != 1U))

202 
SëEº‹_Api
(
OSSîvi˚Id_A˘iv©eTask
);

203 
SëEº‹_P¨am1
(
TaskID
);

204 
SëEº‹_Rë
(
ªt
);

205 
SëEº‹_Msg
("ActivateTaskÑeturns !=Åhan E_OK");

206 
SëEº‹_Eº‹Hook
();

210  
	gªt
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\CancelAlarm.c

67 
	~"Os_I¡î«l.h
"

82 
SètusTy≥
 
	gC™˚lAœrm


84 
AœrmTy≥
 
	gAœrmID


92 
SètusTy≥
 
	gªt
 = 
E_OK
;

94 #i‡(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
)

96 if(
	gAœrmID
 >
ALARMS_COUNT
)

100 
ªt
 = 
E_OS_ID
;

104 if(
	gAœrmsV¨
[
AœrmID
].
	gAœrmSèã
 == 0)

108 
ªt
 = 
E_OS_NOFUNC
;

113 
	gAœrmsV¨
[
AœrmID
].
	gAœrmSèã
 = 0;

116 #i‡(
HOOK_ERRORHOOK
 =
OSEK_ENABLE
)

121 i‡––
	gªt
 !
E_OK
 ) && (
Eº‹HookRu¬ög
 != 1))

123 
SëEº‹_Api
(
OSSîvi˚Id_C™˚lAœrm
);

124 
SëEº‹_P¨am1
(
AœrmID
);

125 
SëEº‹_Rë
(
ªt
);

126 
SëEº‹_Msg
("CancelAlarmÑeturns !=Åhan E_OK");

127 
SëEº‹_Eº‹Hook
();

131  
	gªt
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\ChainTask.c

70 
	~"Os_I¡î«l.h
"

85 
SètusTy≥
 
	gChaöTask


87 
TaskTy≥
 
	gèskid


94 
SètusTy≥
 
	gªt
 = 
E_OK
;

96 #i‡(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
)

97 i‡–
	gèskid
 >
TASKS_COUNT
 )

101 
ªt
 = 
E_OS_ID
;

103 i‡–
GëCÆlögC⁄ãxt
(Ë!
CONTEXT_TASK
 )

107 
ªt
 = 
E_OS_CALLEVEL
;

109 #i‡–(
RESOURCES_COUNT
 !0Ë|| (
NO_RES_SCHEDULER
 =
OSEK_DISABLE
) )

112 #i‡(
RESOURCES_COUNT
 != 0)

113 –
	gTasksV¨
[
GëRu¬ögTask
()].
	gResour˚s
 != 0 )

115 #i‡–(
RESOURCES_COUNT
 !0Ë&& (
NO_RES_SCHEDULER
 =
OSEK_DISABLE
) )

118 #i‡(
NO_RES_SCHEDULER
 =
OSEK_DISABLE
)

119 –
TasksV¨
[
GëRu¬ögTask
()].
A˘uÆPri‹ôy
 =
TASK_MAX_PRIORITY
 )

125 
ªt
 = 
E_OS_RESOURCE
;

130 i‡––(
	gTasksV¨
[
èskid
].
	gA˘iv©i⁄s
 + 1Ë> 
	gTasksC⁄°
[èskid].
	gMaxA˘iv©i⁄s
) &&

131 –
	gèskid
 !
GëRu¬ögTask
()) )

136 
ªt
 = 
E_OS_LIMIT
;

141 #i‡(
HOOK_POSTTASKHOOK
 =
OSEK_ENABLE
)

142 
Po°TaskHook
();

145 
I¡Secuª_Sèπ
();

151 
Rñó£I¡î«lResour˚s
();

154 
	gTasksV¨
[
GëRu¬ögTask
()].
	gA˘iv©i⁄s
--;

156 i‡(
	gTasksV¨
[
GëRu¬ögTask
()].
	gA˘iv©i⁄s
 == 0)

160 
TasksV¨
[
GëRu¬ögTask
()].
Fœgs
.
Sèã
 = 
TASK_ST_SUSPENDED
;

166 
	gTasksV¨
[
GëRu¬ögTask
()].
	gFœgs
.
	gSèã
 = 
TASK_ST_READY
;

172 
SëE¡ryPoöt
(
GëRu¬ögTask
());

174 
RemoveTask
(
GëRu¬ögTask
());

176 
SëRu¬ögTask
(
INVALID_TASK
);

178 
SëA˘uÆC⁄ãxt
(
CONTEXT_SYS
);

180 
	gTasksV¨
[
èskid
].
	gA˘iv©i⁄s
++;

188 
AddRódy
(
èskid
);

190 if(
	gTasksV¨
[
èskid
].
	gFœgs
.
	gSèã
 =
TASK_ST_SUSPENDED
)

194 
TasksV¨
[
èskid
].
Evíts
 = 0;

197 
I¡Secuª_End
();

206 ()
ScheduÀ
();

210 #i‡(
HOOK_ERRORHOOK
 =
OSEK_ENABLE
)

215 i‡––
	gªt
 !
E_OK
 ) && (
Eº‹HookRu¬ög
 != 1))

217 
SëEº‹_Api
(
OSSîvi˚Id_ChaöTask
);

218 
SëEº‹_P¨am1
(
èskid
);

219 
SëEº‹_Rë
(
ªt
);

220 
SëEº‹_Msg
("ChainTaskÑeturns !=Åhan E_OK");

221 
SëEº‹_Eº‹Hook
();

225  
	gªt
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\ClearEvent.c

70 
	~"Os_I¡î«l.h
"

85 #i‡(
NO_EVENTS
 =
OSEK_DISABLE
)

86 
SètusTy≥
 
	gCÀ¨Evít


88 
EvítMaskTy≥
 
	gMask


95 
SètusTy≥
 
	gªt
 = 
E_OK
;

97 #i‡(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
)

98 i‡–
GëCÆlögC⁄ãxt
(Ë!
CONTEXT_TASK
 )

102 
ªt
 = 
E_OS_CALLEVEL
;

104 i‡–!
	gTasksC⁄°
[
GëRu¬ögTask
()].
	gC⁄°Fœgs
.
	gExãnded
 )

108 
	gªt
 = 
E_OS_ACCESS
;

114 
I¡Secuª_Sèπ
();

118 
	gTasksV¨
[
GëRu¬ögTask
()].
	gEvíts
 &=

119 (
EvítMaskTy≥
)~–
Mask
 & 
TasksC⁄°
[
GëRu¬ögTask
()].
EvítsMask
 );

122 
I¡Secuª_End
();

126 #i‡–(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
) && \

127 (
	gHOOK_ERRORHOOK
 =
OSEK_ENABLE
) )

132 i‡––
ªt
 !
E_OK
 ) && (
Eº‹HookRu¬ög
 != 1))

134 
SëEº‹_Api
(
OSSîvi˚Id_CÀ¨Evít
);

135 
SëEº‹_P¨am1
(
Mask
);

136 
SëEº‹_Rë
(
ªt
);

137 
SëEº‹_Msg
("ClearEventÑeturns !=Åhan E_OK");

138 
SëEº‹_Eº‹Hook
();

142  
	gªt
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\GetActiveApplicationMode.c

67 
	~"Os_I¡î«l.h
"

82 
AµModeTy≥
 
	gGëA˘iveAµliˇti⁄Mode


96  
	gAµliˇti⁄Mode
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\GetAlarm.c

69 
	~"Os_I¡î«l.h
"

84 
SètusTy≥
 
	gGëAœrm


86 
AœrmTy≥
 
	gAœrmID
,

87 
TickRefTy≥
 
	gTick


94 
SètusTy≥
 
	gªt
 = 
E_OK
;

96 #i‡(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
)

98 i‡(
	gAœrmID
 >
ALARMS_COUNT
)

102 
ªt
 = 
E_OS_ID
;

107 if(
	gAœrmsV¨
[
AœrmID
].
	gAœrmSèã
 == 0)

111 
ªt
 = 
E_OS_NOFUNC
;

118 *
	gTick
 = 
AœrmsV¨
[
AœrmID
].
AœrmTime
;

121 #i‡(
HOOK_ERRORHOOK
 =
OSEK_ENABLE
)

126 i‡––
	gªt
 !
E_OK
 ) && (
Eº‹HookRu¬ög
 != 1))

128 
SëEº‹_Api
(
OSSîvi˚Id_GëAœrm
);

129 
SëEº‹_P¨am1
(
AœrmID
);

130 
SëEº‹_P¨am2
((
size_t
)
Tick
);

131 
SëEº‹_Rë
(
ªt
);

132 
SëEº‹_Msg
("GetAlarmÑeturns !=Åhan E_OK");

133 
SëEº‹_Eº‹Hook
();

137  
	gªt
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\GetAlarmBase.c

69 
	~"Os_I¡î«l.h
"

84 
SètusTy≥
 
	gGëAœrmBa£


86 
AœrmTy≥
 
	gAœrmID
,

87 
AœrmBa£RefTy≥
 
	gInfo


95 
SètusTy≥
 
	gªt
 = 
E_OK
;

97 
Cou¡îTy≥
 
	gcou¡î
;

99 #i‡(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
)

101 if(
	gAœrmID
 >
ALARMS_COUNT
)

105 
ªt
 = 
E_OS_ID
;

111 
	gcou¡î
 = 
AœrmsC⁄°
[
AœrmID
].
Cou¡î
;

116 
	gInfo
->
	gmaxÆlowedvÆue
 = 
Cou¡îsC⁄°
[
cou¡î
].
MaxAŒowedVÆue
;

117 
	gInfo
->
	gtick•îba£
 = 
Cou¡îsC⁄°
[
cou¡î
].
TicksPîBa£
;

118 
	gInfo
->
	gmöcy˛e
 = 
Cou¡îsC⁄°
[
cou¡î
].
MöCy˛e
;

121 #i‡–(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
) && \

122 (
	gHOOK_ERRORHOOK
 =
OSEK_ENABLE
) )

127 i‡––
ªt
 !
E_OK
 ) && (
Eº‹HookRu¬ög
 != 1))

129 
SëEº‹_Api
(
OSSîvi˚Id_GëAœrmBa£
);

130 
SëEº‹_P¨am1
(
AœrmID
);

131 
SëEº‹_P¨am2
((
size_t
)
Info
);

132 
SëEº‹_Rë
(
ªt
);

133 
SëEº‹_Msg
("GetAlarmBaseÑeturns !=Åhan E_OK");

134 
SëEº‹_Eº‹Hook
();

138  
	gªt
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\GetEvent.c

68 
	~"Os_I¡î«l.h
"

83 #i‡(
NO_EVENTS
 =
OSEK_DISABLE
)

84 
SètusTy≥
 
	gGëEvít


86 
TaskTy≥
 
	gTaskID
,

87 
EvítMaskRefTy≥
 
	gEvít


94 
SètusTy≥
 
	gªt
 = 
E_OK
;

96 #i‡(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
)

97 i‡–
	gTaskID
 >
TASKS_COUNT
 )

101 
ªt
 = 
E_OS_ID
;

103 i‡–!
	gTasksC⁄°
[
TaskID
].
	gC⁄°Fœgs
.
	gExãnded
 )

107 
	gªt
 = 
E_OS_ACCESS
;

109 i‡–
	gTasksV¨
[
TaskID
].
	gFœgs
.
	gSèã
 =
TASK_ST_SUSPENDED
 )

113 
ªt
 = 
E_OS_STATE
;

123 *
	gEvít
 = 
TasksV¨
[
TaskID
].
Evíts
;

126 #i‡–(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
) && \

127 (
	gHOOK_ERRORHOOK
 =
OSEK_ENABLE
) )

132 i‡––
ªt
 !
E_OK
 ) && (
Eº‹HookRu¬ög
 != 1))

134 
SëEº‹_Api
(
OSSîvi˚Id_SëEvít
);

135 
SëEº‹_P¨am1
(
TaskID
);

136 
SëEº‹_P¨am2
((
size_t
)
Evít
);

137 
SëEº‹_Rë
(
ªt
);

138 
SëEº‹_Msg
("ActivateTaskÑeturns !=Åhan E_OK");

139 
SëEº‹_Eº‹Hook
();

143  
	gªt
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\GetResource.c

72 
	~"Os_I¡î«l.h
"

89 #i‡–(
NO_RES_SCHEDULER
 =
OSEK_DISABLE
Ë|| (
RESOURCES_COUNT
 != 0) )

90 
SètusTy≥
 
	gGëResour˚


92 
Resour˚Ty≥
 
	gResID


99 
SètusTy≥
 
	gªt
 = 
E_OK
;

101 #i‡(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
)

104 #i‡(
RESOURCES_COUNT
 != 0)

105 –
	gResID
 > 
	gRESOURCES_COUNT
 )

107 #i‡–(
RESOURCES_COUNT
 !0Ë&& (
NO_RES_SCHEDULER
 =
OSEK_DISABLE
) )

111 #i‡(
NO_RES_SCHEDULER
 =
OSEK_DISABLE
)

112 –
	gResID
 !
RES_SCHEDULER
 )

118 
ªt
 = 
E_OS_ID
;

121 #i‡(
NO_RES_SCHEDULER
 =
OSEK_DISABLE
)

122 i‡–
	gResID
 !
RES_SCHEDULER
 )

125 i‡––
TasksV¨
[
GëRu¬ögTask
()].
Resour˚s
 & ( 1 << 
ResID
 ) ) ||

126 ––
TasksC⁄°
[
GëRu¬ögTask
()].
Resour˚sMask
 & ( 1 << 
ResID
 ) ) == 0 ) )

130 
ªt
 = 
E_OS_ACCESS
;

133 #i‡(
NO_RES_SCHEDULER
 =
OSEK_DISABLE
)

140 i‡–
	gªt
 =
E_OK
 )

143 
I¡Secuª_Sèπ
();

146 #i‡(
NO_RES_SCHEDULER
 =
OSEK_DISABLE
)

147 i‡–
	gResID
 =
RES_SCHEDULER
 )

149 
TasksV¨
[
GëRu¬ögTask
()].
A˘uÆPri‹ôy
 = 
TASK_MAX_PRIORITY
;

152 #i‡–(
RESOURCES_COUNT
 !0Ë&& (
NO_RES_SCHEDULER
 =
OSEK_DISABLE
) )

157 #i‡(
RESOURCES_COUNT
 != 0)

161 i‡–
	gTasksV¨
[
GëRu¬ögTask
()].
	gA˘uÆPri‹ôy
 < 
	gResour˚sPri‹ôy
[
ResID
])

163 
	gTasksV¨
[
GëRu¬ögTask
()].
	gA˘uÆPri‹ôy
 = 
Resour˚sPri‹ôy
[
ResID
];

167 
	gTasksV¨
[
GëRu¬ögTask
()].
	gResour˚s
 |–1 << 
ResID
 );

171 
I¡Secuª_End
();

174 #i‡–(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
) && \

175 (
	gHOOK_ERRORHOOK
 =
OSEK_ENABLE
) )

180 i‡––
Eº‹HookRu¬ög
 != 1 ) )

182 
SëEº‹_Api
(
OSSîvi˚Id_GëResour˚
);

183 
SëEº‹_P¨am1
(
ResID
);

184 
SëEº‹_Rë
(
ªt
);

185 
SëEº‹_Msg
("GetResourceÑeturns != E_OK");

186 
SëEº‹_Eº‹Hook
();

194  
	gªt
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\GetTaskID.c

68 
	~"Os_I¡î«l.h
"

83 
SètusTy≥
 
	gGëTaskID


85 
TaskRefTy≥
 
	gTaskID


95 *
	gTaskID
 = 
GëRu¬ögTask
();

98  
	gE_OK
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\GetTaskState.c

67 
	~"Os_I¡î«l.h
"

82 
SètusTy≥
 
	gGëTaskSèã


84 
TaskTy≥
 
	gTaskID
,

85 
TaskSèãRefTy≥
 
	gSèã


93 
SètusTy≥
 
	gªt
 = 
E_OK
;

95 #i‡(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
)

97 i‡–
	gTaskID
 >
TASKS_COUNT
 )

103 
ªt
 = 
E_OS_ID
;

106 *
	gSèã
 = 
TASK_ST_INVALID
;

118 *
	gSèã
 = (
TaskSèãTy≥
Ë
TasksV¨
[
TaskID
].
Fœgs
.
Sèã
;

121 #i‡–(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
) && \

122 (
	gHOOK_ERRORHOOK
 =
OSEK_ENABLE
) )

127 i‡––
ªt
 !
E_OK
 ) && (
Eº‹HookRu¬ög
 != 1))

129 
SëEº‹_Api
(
OSSîvi˚Id_GëTaskSèã
);

130 
SëEº‹_P¨am1
(
TaskID
);

131 
SëEº‹_P¨am2
((
size_t
)
Sèã
);

132 
SëEº‹_Rë
(
ªt
);

133 
SëEº‹_Msg
("GetTaskStateÑeturns !=Åhan E_OK");

134 
SëEº‹_Eº‹Hook
();

138  
	gªt
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\Os.c

66 
	~"Os_I¡î«l.h
"

77 
I¡îru±Cou¡îTy≥
 
	gSu•ídOSI¡îru±s_Cou¡î
;

79 
I¡îru±Cou¡îTy≥
 
	gDißbÀAŒI¡îru±s_Cou¡î
;

81 
I¡îru±Cou¡îTy≥
 
	gSu•ídAŒI¡îru±s_Cou¡î
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\Os_Internal.c

66 
	~"Os_I¡î«l.h
"

77 
TaskTy≥
 
	gRu¬ögTask
;

79 
C⁄ãxtTy≥
 
	gA˘uÆC⁄ãxt
;

84 
	$AddRódy
(
TaskTy≥
 
TaskID
)

86 
TaskPri‹ôyTy≥
 
¥i‹ôy
;

87 
TaskRefTy≥
 
ªadyli°
;

88 
TaskTŸÆTy≥
 
maxèsks
;

89 
TaskTŸÆTy≥
 
posôi⁄
;

92 
¥i‹ôy
 = 
TasksC⁄°
[
TaskID
].
SèticPri‹ôy
;

95 
TasksV¨
[
TaskID
].
A˘uÆPri‹ôy
 = 
¥i‹ôy
;

102 
¥i‹ôy
 = (
READYLISTS_COUNT
-1)-priority;

105 
ªadyli°
 = 
RódyC⁄°
[
¥i‹ôy
].
TaskRef
;

107 
maxèsks
 = 
RódyC⁄°
[
¥i‹ôy
].
Li°Lígth
;

110 
posôi⁄
 = 
RódyV¨
[
¥i‹ôy
].
Li°Sèπ
 + RódyV¨[¥i‹ôy].
Li°Cou¡
;

114 i‡(
posôi⁄
 >
maxèsks
)

116 
posôi⁄
 -
maxèsks
;

120 
ªadyli°
[
posôi⁄
] = 
TaskID
;

122 
RódyV¨
[
¥i‹ôy
].
Li°Cou¡
++;

123 
	}
}

125 
	gRemoveTask


127 
TaskTy≥
 
	gTaskID


130 
TaskPri‹ôyTy≥
 
	g¥i‹ôy
;

131 
TaskTŸÆTy≥
 
	gmaxèsks
;

134 
	g¥i‹ôy
 = 
TasksC⁄°
[
TaskID
].
SèticPri‹ôy
;

140 
	g¥i‹ôy
 = (
READYLISTS_COUNT
-1)-
¥i‹ôy
;

143 
	gmaxèsks
 = 
RódyC⁄°
[
¥i‹ôy
].
Li°Lígth
;

146 
	gRódyV¨
[
¥i‹ôy
].
	gLi°Sèπ
 = 
RódyV¨
[¥i‹ôy].
Li°Sèπ
 + 1;

150 i‡(
	gRódyV¨
[
¥i‹ôy
].
	gLi°Sèπ
 >
maxèsks
)

152 
RódyV¨
[
¥i‹ôy
].
Li°Sèπ
 -
maxèsks
;

156 
	gRódyV¨
[
¥i‹ôy
].
	gLi°Cou¡
--;

159 
TaskTy≥
 
	gGëNextTask


165 #i‡(
RESOURCES_COUNT
 != 0)

166 
TaskTy≥
 
	gªsTask
 = 
INVALID_TASK
;

167 
uöt8
 
	g¥io
 = 0;

170 
uöt8f
 
	glo›i
;

171 
boﬁón
 
	gfound
 = 
FALSE
;

172 
TaskTy≥
 
	gªt
 = 
INVALID_TASK
;

175 
	glo›i
 = 0; (Üo›ò< 
	gREADYLISTS_COUNT
 ) && (!
	gfound
) ;Üoopi++)

178 i‡(
	gRódyV¨
[
lo›i
].
	gLi°Cou¡
 > 0)

181 
	gªt
 = 
RódyC⁄°
[
lo›i
].
TaskRef
[
RódyV¨
[lo›i].
Li°Sèπ
];

184 
	gfound
 = 
TRUE
;

189 #i‡(
RESOURCES_COUNT
 != 0)

190 
	glo›i
 = 0;Üo›ò< 
	gTASKS_COUNT
;Üoopi++)

193 i‡––0 !
TasksV¨
[
lo›i
].
Resour˚s
 ) &&

195 –
TasksV¨
[
lo›i
].
A˘uÆPri‹ôy
 > 
¥io
 ) )

198 
ªsTask
 = 
lo›i
;

199 
	g¥io
 = 
TasksV¨
[
lo›i
].
A˘uÆPri‹ôy
;

204 i‡–(
	gINVALID_TASK
 !
ªsTask
) &&

207 (
¥io
 >
TasksV¨
[
ªt
].
A˘uÆPri‹ôy
) )

210 
ªt
 = 
ªsTask
;

214  
	gªt
;

217 
	$OSEK_ISR_NoH™dÀr
()

220 
	}
}

222 #i‡(
ALARMS_COUNT
 != 0)

223 
AœrmIn¸emítTy≥
 
	$In¸emítAœrm
(
AœrmTy≥
 
AœrmID
, 
AœrmIn¸emítTy≥
 
In¸emít
)

225 
AœrmIn¸emítTy≥
 
Re°In¸emíts
;

226 
AœrmIn¸emítTy≥
 
AœrmCou¡
;

227 
Cou¡îIn¸emítTy≥
 
Cou¡îIn¸emít
;

230 
AœrmCou¡
 = 0;

233 i‡–
AœrmsV¨
[
AœrmID
].
AœrmTime
 > 
In¸emít
 )

236 
AœrmsV¨
[
AœrmID
].
AœrmTime
 -
In¸emít
;

239 
Re°In¸emíts
 = 
AœrmsV¨
[
AœrmID
].
AœrmTime
;

247 if(
AœrmsV¨
[
AœrmID
].
AœrmCy˛eTime
 == 0)

252 
AœrmCou¡
 = 1;

255 
AœrmsV¨
[
AœrmID
].
AœrmTime
 = 0;

258 
AœrmsV¨
[
AœrmID
].
AœrmSèã
 = 0;

261 
Re°In¸emíts
 = 0;

268  
AœrmsV¨
[
AœrmID
].
AœrmTime
 <
In¸emít
 )

271 
AœrmsV¨
[
AœrmID
].
AœrmTime
 +AœrmsV¨[AœrmID].
AœrmCy˛eTime
;

274 
AœrmCou¡
++;

278 
AœrmsV¨
[
AœrmID
].
AœrmTime
 -
In¸emít
;

281 
Re°In¸emíts
 = 
AœrmsV¨
[
AœrmID
].
AœrmTime
;

284 i‡(
AœrmsC⁄°
[
AœrmID
].
AœrmA˘i⁄
 =
INCREMENT
)

287 
Cou¡îIn¸emít
 = 
	`In¸emítCou¡î
(
AœrmsC⁄°
[
AœrmID
].
AœrmA˘i⁄Info
.
Cou¡î
, 
AœrmCou¡
);

290 
Re°In¸emíts
 +
AœrmsV¨
[
AœrmID
].
AœrmCy˛eTime
 * ( 
Cou¡îIn¸emít
-1 );

295  ;
AœrmCou¡
 > 0; AlarmCount--)

298 
AœrmsC⁄°
[
AœrmID
].
AœrmA˘i⁄
)

300 
ACTIVATETASK
:

302 
	`A˘iv©eTask
(
AœrmsC⁄°
[
AœrmID
].
AœrmA˘i⁄Info
.
TaskID
);

304 
ALARMCALLBACK
:

306 if(
AœrmsC⁄°
[
AœrmID
].
AœrmA˘i⁄Info
.
CÆlbackFun˘i⁄
 !
NULL
)

308 
AœrmsC⁄°
[
AœrmID
].
AœrmA˘i⁄Info
.
	`CÆlbackFun˘i⁄
();

311 #i‡(
NO_EVENTS
 =
OSEK_DISABLE
)

312 
SETEVENT
:

314 
	`SëEvít
(
AœrmsC⁄°
[
AœrmID
].
AœrmA˘i⁄Info
.
TaskID
, AœrmsC⁄°[AœrmID].AœrmA˘i⁄Info.
Evít
);

326  
Re°In¸emíts
;

327 
	}
}

330 #i‡(
ALARMS_COUNT
 != 0)

331 
Cou¡îIn¸emítTy≥
 
	$In¸emítCou¡î
(
Cou¡îTy≥
 
Cou¡îID
, 
Cou¡îIn¸emítTy≥
 
In¸emít
)

333 
uöt8f
 
lo›i
;

334 
AœrmTy≥
 
AœrmID
;

335 
AœrmIn¸emítTy≥
 
MöimÆCou¡
 = -1;

336 
AœrmIn¸emítTy≥
 
TmpCou¡
;

339 
Cou¡îsV¨
[
Cou¡îID
].
Time
+=
In¸emít
;

342  
Cou¡îsV¨
[
Cou¡îID
].
Time
 >
Cou¡îsC⁄°
[Cou¡îID].
MaxAŒowedVÆue
 )

345 
Cou¡îsV¨
[
Cou¡îID
].
Time
 -
Cou¡îsC⁄°
[Cou¡îID].
MaxAŒowedVÆue
;

349 
lo›i
 = 0;Üo›ò< 
Cou¡îsC⁄°
[
Cou¡îID
].
AœrmsCou¡
;Üoopi++)

352 
AœrmID
 = 
Cou¡îsC⁄°
[
Cou¡îID
].
AœrmRef
[
lo›i
];

355 i‡(
AœrmsV¨
[
AœrmID
].
AœrmSèã
 == 1)

358 
TmpCou¡
 = 
	`In¸emítAœrm
(
AœrmID
, 
In¸emít
);

361 i‡(
MöimÆCou¡
 > 
TmpCou¡
)

364 
MöimÆCou¡
 = 
TmpCou¡
;

370  (
Cou¡îIn¸emítTy≥
)
MöimÆCou¡
;

371 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\ReleaseResource.c

75 
	~"Os_I¡î«l.h
"

92 #i‡–(
NO_RES_SCHEDULER
 =
OSEK_DISABLE
Ë|| (
RESOURCES_COUNT
 != 0) )

93 
SètusTy≥
 
	gRñó£Resour˚


95 
Resour˚Ty≥
 
	gResID


103 
SètusTy≥
 
	gªt
 = 
E_OK
;

105 #i‡(
RESOURCES_COUNT
 != 0)

106 
uöt8
 
	glo›i
;

110 
TaskPri‹ôyTy≥
 
	g¥i‹ôy
 = 
TasksC⁄°
[
GëRu¬ögTask
()].
SèticPri‹ôy
;

112 #i‡(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
)

115 #i‡(
RESOURCES_COUNT
 != 0)

116 –
	gResID
 > 
	gRESOURCES_COUNT
 )

118 #i‡–(
RESOURCES_COUNT
 !0Ë&& (
NO_RES_SCHEDULER
 =
OSEK_DISABLE
) )

122 #i‡(
NO_RES_SCHEDULER
 =
OSEK_DISABLE
)

123 –
	gResID
 !
RES_SCHEDULER
 )

129 
ªt
 = 
E_OS_ID
;

132 #i‡(
NO_RES_SCHEDULER
 =
OSEK_DISABLE
)

133 i‡–
	gResID
 !
RES_SCHEDULER
 )

136 i‡––
TasksV¨
[
GëRu¬ögTask
()].
Resour˚s
 & ( 1 << 
ResID
 ) ) == 0 )

140 
ªt
 = 
E_OS_NOFUNC
;

143 #i‡(
NO_RES_SCHEDULER
 =
OSEK_DISABLE
)

150 i‡–
	gªt
 =
E_OK
 )

153 
I¡Secuª_Sèπ
();

155 #i‡(
RESOURCES_COUNT
 != 0)

156 #i‡(
NO_RES_SCHEDULER
 =
OSEK_DISABLE
)

157 i‡–
	gResID
 !
RES_SCHEDULER
 )

161 
TasksV¨
[
GëRu¬ögTask
()].
Resour˚s
 &~–1 << 
ResID
 );

164 
	glo›i
 = 0;Üo›ò< 
	gRESOURCES_COUNT
;Üoopi++)

166 i‡–
	gTasksV¨
[
GëRu¬ögTask
()].
	gResour˚s
 & ( 1 << 
	glo›i
 ) )

168 i‡–
	g¥i‹ôy
 < 
	gResour˚sPri‹ôy
[
lo›i
] )

170 
	g¥i‹ôy
 = 
Resour˚sPri‹ôy
[
lo›i
];

179 
	gTasksV¨
[
GëRu¬ögTask
()].
	gA˘uÆPri‹ôy
 = 
¥i‹ôy
;

181 
I¡Secuª_End
();

183 #i‡(
NON_PREEMPTIVE
 =
OSEK_DISABLE
)

185 i‡–
GëCÆlögC⁄ãxt
(Ë=
CONTEXT_TASK
 )

187 i‡––
TasksC⁄°
[
GëRu¬ögTask
()].
C⁄°Fœgs
.
Pªemtive
 ) &&

188 –
ªt
 =
E_OK
 ) )

192 ()
ScheduÀ
();

199 #i‡–(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
) && \

200 (
	gHOOK_ERRORHOOK
 =
OSEK_ENABLE
) )

205 i‡––
ªt
 !
E_OK
 ) && (
Eº‹HookRu¬ög
 != 1))

207 
SëEº‹_Api
(
OSSîvi˚Id_Rñó£Resour˚
);

208 
SëEº‹_P¨am1
(
ResID
);

209 
SëEº‹_Rë
(
ªt
);

210 
SëEº‹_Msg
("ReleaseResourceÑeturns != E_OK");

211 
SëEº‹_Eº‹Hook
();

215  
	gªt
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\Schedule.c

71 
	~"Os_I¡î«l.h
"

86 
SètusTy≥
 
	gScheduÀ


95 
SètusTy≥
 
	gªt
 = 
E_OK
;

96 
TaskTy≥
 
	g√xtTask
;

97 
TaskTy≥
 
	ga˘uÆTask
;

98 #i‡(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
)

99 
C⁄ãxtTy≥
 
	ga˘uÆC⁄ãxt
;

102 
I¡Secuª_Sèπ
();

105 
	ga˘uÆTask
 = 
GëRu¬ögTask
();

109 #i‡(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
)

112 
	ga˘uÆC⁄ãxt
 = 
GëCÆlögC⁄ãxt
();

115 i‡––
	gCONTEXT_TASK
 !
a˘uÆC⁄ãxt
 ) &&

116 –
CONTEXT_SYS
 !
a˘uÆC⁄ãxt
 ) )

120 
ªt
 = 
E_OS_CALLEVEL
;

122 i‡––
	gINVALID_TASK
 !
a˘uÆTask
 ) &&

123 –
CONTEXT_TASK
 =
a˘uÆC⁄ãxt
 ) )

125 i‡–
TasksV¨
[
a˘uÆTask
].
Resour˚s
 != 0 )

129 
ªt
 = 
E_OS_RESOURCE
;

137 i‡(
	gªt
 =
E_OK
)

141 
√xtTask
 = 
GëNextTask
();

144  ( 
	ga˘uÆTask
 =
INVALID_TASK
 ) &&

145 –
√xtTask
 =
INVALID_TASK
) )

147 
I¡Secuª_End
();

150 
o£k∑u£
();

152 
I¡Secuª_Sèπ
();

155 
	g√xtTask
 = 
GëNextTask
();

159 i‡–
	ga˘uÆTask
 =
INVALID_TASK
 )

162 
TasksV¨
[
√xtTask
].
Fœgs
.
Sèã
 = 
TASK_ST_RUNNING
;

165 
SëRu¬ögTask
(
√xtTask
);

168 
SëA˘uÆC⁄ãxt
(
CONTEXT_TASK
);

170 
I¡Secuª_End
();

172 #i‡(
HOOK_PRETASKHOOK
 =
OSEK_ENABLE
)

173 
PªTaskHook
();

177 
JmpTask
(
√xtTask
);

185 i‡–
	gTasksC⁄°
[
√xtTask
].
	gSèticPri‹ôy
 > 
	gTasksV¨
[
a˘uÆTask
].
	gA˘uÆPri‹ôy
 )

188 #i‡(
HOOK_POSTTASKHOOK
 =
OSEK_ENABLE
)

189 
Po°TaskHook
();

194 
Rñó£I¡î«lResour˚s
();

197 
	gTasksV¨
[
a˘uÆTask
].
	gFœgs
.
	gSèã
 = 
TASK_ST_READY
;

200 
	gTasksV¨
[
√xtTask
].
	gFœgs
.
	gSèã
 = 
TASK_ST_RUNNING
;

203 
SëRu¬ögTask
(
√xtTask
);

206 
SëA˘uÆC⁄ãxt
(
CONTEXT_TASK
);

208 
I¡Secuª_End
();

210 #i‡(
HOOK_PRETASKHOOK
 =
OSEK_ENABLE
)

211 
PªTaskHook
();

216 
CÆlTask
(
a˘uÆTask
, 
√xtTask
);

220 
I¡Secuª_End
();

226 #i‡(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
)

229 
I¡Secuª_End
();

233 #i‡(
HOOK_ERRORHOOK
 =
OSEK_ENABLE
)

238 i‡––
	gªt
 !
E_OK
 ) && (
Eº‹HookRu¬ög
 != 1))

240 
SëEº‹_Api
(
OSSîvi˚Id_ScheduÀ
);

241 
SëEº‹_Rë
(
ªt
);

242 
SëEº‹_Msg
("Schedule TaskÑeturns !=Åhan E_OK");

243 
SëEº‹_Eº‹Hook
();

247  
	gªt
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\SetAbsAlarm.c

69 
	~"Os_I¡î«l.h
"

84 
SètusTy≥
 
	gSëAbsAœrm


86 
AœrmTy≥
 
	gAœrmID
,

87 
TickTy≥
 
	gSèπ
,

88 
TickTy≥
 
	gCy˛e


97 
SètusTy≥
 
	gªt
 = 
E_OK
;

99 #i‡(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
)

101 if(
	gAœrmID
 >
ALARMS_COUNT
)

105 
ªt
 = 
E_OS_ID
;

108 if–(
	gSèπ
 > 
	gCou¡îsC⁄°
[
AœrmsC⁄°
[
AœrmID
].
	gCou¡î
].
	gMaxAŒowedVÆue
) ||

109 ––
	gCy˛e
 != 0 ) &&

110 –(
Cy˛e
 > 
Cou¡îsC⁄°
[
AœrmsC⁄°
[
AœrmID
].
Cou¡î
].
MaxAŒowedVÆue
) ||

111 (
Cy˛e
 < 
Cou¡îsC⁄°
[
AœrmsC⁄°
[
AœrmID
].
Cou¡î
].
MöCy˛e
) ) ) )

115 
ªt
 = 
E_OS_VALUE
;

120 if(
	gAœrmsV¨
[
AœrmID
].
	gAœrmSèã
 != 0)

124 
ªt
 = 
E_OS_STATE
;

129 
I¡Secuª_Sèπ
();

132 
	gAœrmsV¨
[
AœrmID
].
	gAœrmSèã
 = 1;

135 
	gAœrmsV¨
[
AœrmID
].
	gAœrmTime
 = 
GëCou¡î
(
AœrmsC⁄°
[AœrmID].
Cou¡î
Ë+ 
Sèπ
;

136 
	gAœrmsV¨
[
AœrmID
].
	gAœrmCy˛eTime
 = 
Cy˛e
;

138 
I¡Secuª_End
();

141 #i‡(
HOOK_ERRORHOOK
 =
OSEK_ENABLE
)

146 i‡––
	gªt
 !
E_OK
 ) && (
Eº‹HookRu¬ög
 != 1))

148 
SëEº‹_Api
(
OSSîvi˚Id_SëAbsAœrm
);

149 
SëEº‹_P¨am1
(
AœrmID
);

150 
SëEº‹_P¨am2
(
Sèπ
);

151 
SëEº‹_P¨am3
(
Cy˛e
);

152 
SëEº‹_Rë
(
ªt
);

153 
SëEº‹_Msg
("SetAbsAlarmÑeturns !=Åhan E_OK");

154 
SëEº‹_Eº‹Hook
();

158  
	gªt
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\SetEvent.c

72 
	~"Os_I¡î«l.h
"

87 #i‡(
NO_EVENTS
 =
OSEK_DISABLE
)

88 
SètusTy≥
 
	gSëEvít


90 
TaskTy≥
 
	gTaskID
,

91 
EvítMaskTy≥
 
	gMask


98 
SètusTy≥
 
	gªt
 = 
E_OK
;

100 #i‡(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
)

101 i‡–
	gTaskID
 >
TASKS_COUNT
 )

105 
ªt
 = 
E_OS_ID
;

107 i‡–!
	gTasksC⁄°
[
TaskID
].
	gC⁄°Fœgs
.
	gExãnded
 )

111 
	gªt
 = 
E_OS_ACCESS
;

113 i‡–
	gTasksV¨
[
TaskID
].
	gFœgs
.
	gSèã
 =
TASK_ST_SUSPENDED
 )

117 
ªt
 = 
E_OS_STATE
;

123 
I¡Secuª_Sèπ
();

126 i‡––
	gTasksV¨
[
TaskID
].
	gFœgs
.
	gSèã
 =
TASK_ST_RUNNING
 ) ||

127 –
TasksV¨
[
TaskID
].
Fœgs
.
Sèã
 =
TASK_ST_READY
 ) ||

128 –
TasksV¨
[
TaskID
].
Fœgs
.
Sèã
 =
TASK_ST_WAITING
) )

135 
TasksV¨
[
TaskID
].
Evíts
 |–
Mask
 & 
TasksC⁄°
[TaskID].
EvítsMask
 );

138 i‡––
	gTasksV¨
[
TaskID
].
	gFœgs
.
	gSèã
 =
TASK_ST_WAITING
 ) &&

139 –
TasksV¨
[
TaskID
].
EvítsWaô
 & TasksV¨[TaskID].
Evíts
 ) )

145 
AddRódy
(
TaskID
);

151 
	gTasksV¨
[
TaskID
].
	gFœgs
.
	gSèã
 = 
TASK_ST_READY
;

153 
I¡Secuª_End
();

155 #i‡(
NON_PREEMPTIVE
 =
OSEK_DISABLE
)

157 i‡–
GëCÆlögC⁄ãxt
(Ë=
CONTEXT_TASK
 )

159 i‡––
TasksC⁄°
[
GëRu¬ögTask
()].
C⁄°Fœgs
.
Pªemtive
 ) &&

160 –
ªt
 =
E_OK
 ) )

164 ()
ScheduÀ
();

172 
I¡Secuª_End
();

177 
I¡Secuª_End
();

182 #i‡–(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
) && \

183 (
	gHOOK_ERRORHOOK
 =
OSEK_ENABLE
) )

188 i‡––
ªt
 !
E_OK
 ) && (
Eº‹HookRu¬ög
 != 1))

190 
SëEº‹_Api
(
OSSîvi˚Id_SëEvít
);

191 
SëEº‹_P¨am1
(
TaskID
);

192 
SëEº‹_P¨am2
(
Mask
);

193 
SëEº‹_Rë
(
ªt
);

194 
SëEº‹_Msg
("ActivateTaskÑeturns !=Åhan E_OK");

195 
SëEº‹_Eº‹Hook
();

199  
	gªt
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\SetRelAlarm.c

67 
	~"Os_I¡î«l.h
"

82 
SètusTy≥
 
	gSëRñAœrm


84 
AœrmTy≥
 
	gAœrmID
,

85 
TickTy≥
 
	gIn¸emít
,

86 
TickTy≥
 
	gCy˛e


95 
SètusTy≥
 
	gªt
 = 
E_OK
;

97 #i‡(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
)

99 if(
	gAœrmID
 >
ALARMS_COUNT
)

103 
ªt
 = 
E_OS_ID
;

106 if–(
	gIn¸emít
 > 
	gCou¡îsC⁄°
[
AœrmsC⁄°
[
AœrmID
].
	gCou¡î
].
	gMaxAŒowedVÆue
) ||

107 ––
	gCy˛e
 != 0 ) &&

108 –(
Cy˛e
 > 
Cou¡îsC⁄°
[
AœrmsC⁄°
[
AœrmID
].
Cou¡î
].
MaxAŒowedVÆue
) ||

109 (
Cy˛e
 < 
Cou¡îsC⁄°
[
AœrmsC⁄°
[
AœrmID
].
Cou¡î
].
MöCy˛e
) ) ) )

113 
ªt
 = 
E_OS_VALUE
;

118 if(
	gAœrmsV¨
[
AœrmID
].
	gAœrmSèã
 != 0)

122 
ªt
 = 
E_OS_STATE
;

126 
I¡Secuª_Sèπ
();

129 
	gAœrmsV¨
[
AœrmID
].
	gAœrmSèã
 = 1;

132 
	gAœrmsV¨
[
AœrmID
].
	gAœrmTime
 = 
In¸emít
;

133 
	gAœrmsV¨
[
AœrmID
].
	gAœrmCy˛eTime
 = 
Cy˛e
;

135 
I¡Secuª_End
();

138 #i‡(
HOOK_ERRORHOOK
 =
OSEK_ENABLE
)

143 i‡––
	gªt
 !
E_OK
 ) && (
Eº‹HookRu¬ög
 != 1))

145 
SëEº‹_Api
(
OSSîvi˚Id_SëRñAœrm
);

146 
SëEº‹_P¨am1
(
AœrmID
);

147 
SëEº‹_P¨am2
(
In¸emít
);

148 
SëEº‹_P¨am3
(
Cy˛e
);

149 
SëEº‹_Rë
(
ªt
);

150 
SëEº‹_Msg
("SetRelAlarmÑeturns !=Åhan E_OK");

151 
SëEº‹_Eº‹Hook
();

155  
	gªt
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\ShutdownOS.c

70 
	~"Os_I¡î«l.h
"

85 
	gShutdownOS


87 
SètusTy≥
 
	gEº‹


94 
ShutdownOs_Arch
();

96 #i‡(
HOOK_SHUTDOWNHOOK
 =
OSEK_ENABLE
)

100 
ShutdownHook
();

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\StartOS.c

69 
	~"Os_I¡î«l.h
"

84 
	gSèπOS


86 
AµModeTy≥
 
	gMode


94 
uöt8f
 
	glo›i
;

96 
I¡Secuª_Sèπ
();

99 
	gAµliˇti⁄Mode
 = 
Mode
;

102 
SèπOs_Arch
();

106  
	glo›i
 = 0;Üo›ò< 
	gTASKS_COUNT
;Üoopi++)

110 
SëE¡ryPoöt
(
lo›i
);

114 
SëA˘uÆC⁄ãxt
(
CONTEXT_SYS
);

117 
SëRu¬ögTask
(
INVALID_TASK
);

121 
	glo›i
 = 0;Üo›ò< 
	gAutoSèπ
[
Mode
].
	gTŸÆTasks
;Üoopi++)

124 
A˘iv©eTask
(
AutoSèπ
[
Mode
].
TasksRef
[
lo›i
]);

127 
	glo›i
 = 0;Üo›ò< 
	gALARM_AUTOSTART_COUNT
;Üoopi++)

129 i‡(
	gAutoSèπAœrm
[
lo›i
].
	gMode
 =
Mode
)

131 ()
SëRñAœrm
(
AutoSèπAœrm
[
lo›i
].
Aœrm
, AutoSèπAœrm[lo›i].
AœrmTime
, AutoSèπAœrm[lo›i].
AœrmCy˛eTime
);

135 #i‡(
HOOK_STARTUPHOOK
 =
OSEK_ENABLE
)

136 
SèπupHook
();

139 
I¡Secuª_End
();

142 
E«bÀOSI¡îru±s
();

145 
E«bÀI¡îru±s
();

148 ()
ScheduÀ
();

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\TerminateTask.c

71 
	~"Os_I¡î«l.h
"

86 
SètusTy≥
 
	gTîmö©eTask


94 
SètusTy≥
 
	gªt
 = 
E_OK
;

99 #i‡(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
)

100 i‡–
GëCÆlögC⁄ãxt
(Ë!
CONTEXT_TASK
 )

104 
ªt
 = 
E_OS_CALLEVEL
;

107 #i‡–(
RESOURCES_COUNT
 !0Ë|| (
NO_RES_SCHEDULER
 =
OSEK_DISABLE
) )

110 #i‡(
RESOURCES_COUNT
 != 0)

111 –
	gTasksV¨
[
GëRu¬ögTask
()].
	gResour˚s
 != 0 )

113 #i‡–(
RESOURCES_COUNT
 !0Ë&& (
NO_RES_SCHEDULER
 =
OSEK_DISABLE
) )

116 #i‡(
NO_RES_SCHEDULER
 =
OSEK_DISABLE
)

117 –
TasksV¨
[
GëRu¬ögTask
()].
A˘uÆPri‹ôy
 =
TASK_MAX_PRIORITY
 )

123 
ªt
 = 
E_OS_RESOURCE
;

130 #i‡(
HOOK_POSTTASKHOOK
 =
OSEK_ENABLE
)

131 
Po°TaskHook
();

134 
I¡Secuª_Sèπ
();

139 
Rñó£I¡î«lResour˚s
();

142 
	gTasksV¨
[
GëRu¬ögTask
()].
	gA˘iv©i⁄s
--;

144 i‡(
	gTasksV¨
[
GëRu¬ögTask
()].
	gA˘iv©i⁄s
 == 0)

149 
TasksV¨
[
GëRu¬ögTask
()].
Fœgs
.
Sèã
 = 
TASK_ST_SUSPENDED
;

154 
	gTasksV¨
[
GëRu¬ögTask
()].
	gFœgs
.
	gSèã
 = 
TASK_ST_READY
;

160 
SëE¡ryPoöt
(
GëRu¬ögTask
());

162 
RemoveTask
(
GëRu¬ögTask
());

164 
SëRu¬ögTask
(
INVALID_TASK
);

166 
SëA˘uÆC⁄ãxt
(
CONTEXT_SYS
);

168 
I¡Secuª_End
();

177 ()
ScheduÀ
();

180 #i‡(
HOOK_ERRORHOOK
 =
OSEK_ENABLE
)

185 i‡––
	gªt
 !
E_OK
 ) && (
Eº‹HookRu¬ög
 != 1))

187 
SëEº‹_Api
(
OSSîvi˚Id_Tîmö©eTask
);

188 
SëEº‹_Rë
(
ªt
);

189 
SëEº‹_Msg
("Terminate TaskÑeturns !=Åhan E_OK");

190 
SëEº‹_Eº‹Hook
();

194  
	gªt
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\WaitEvent.c

70 
	~"Os_I¡î«l.h
"

85 #i‡(
NO_EVENTS
 =
OSEK_DISABLE
)

86 
SètusTy≥
 
	gWaôEvít


88 
EvítMaskTy≥
 
	gMask


94 vﬁ©ûê
uöt8
 
	gÊag
 = 1;

97 
SètusTy≥
 
	gªt
 = 
E_OK
;

99 #i‡(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
)

100 i‡–
GëCÆlögC⁄ãxt
(Ë!
CONTEXT_TASK
 )

104 
ªt
 = 
E_OS_CALLEVEL
;

106 i‡–!
	gTasksC⁄°
[
GëRu¬ögTask
()].
	gC⁄°Fœgs
.
	gExãnded
 )

110 
	gªt
 = 
E_OS_ACCESS
;

112 i‡–
	gTasksV¨
[
GëRu¬ögTask
()].
	gResour˚s
 != 0 )

116 
ªt
 = 
E_OS_RESOURCE
;

122 
I¡Secuª_Sèπ
();

124 i‡–
	gMask
 & 
	gTasksV¨
[
GëRu¬ögTask
()].
	gEvíts
 )

127 
I¡Secuª_End
();

134 
	gTasksV¨
[
GëRu¬ögTask
()].
	gFœgs
.
	gSèã
 = 
TASK_ST_WAITING
;

137 
	gTasksV¨
[
GëRu¬ögTask
()].
	gEvítsWaô
 = 
Mask
;

140 
SaveC⁄ãxt
(
GëRu¬ögTask
());

142 i‡(
	gÊag
)

146 
	gÊag
 = 0;

149 
RemoveTask
(
GëRu¬ögTask
());

152 
SëA˘uÆC⁄ãxt
(
CONTEXT_SYS
);

155 
SëRu¬ögTask
(
INVALID_TASK
);

158 
I¡Secuª_End
();

164 ()
ScheduÀ
();

169 
I¡Secuª_End
();

174 #i‡–(
ERROR_CHECKING_TYPE
 =
ERROR_CHECKING_EXTENDED
) && \

175 (
	gHOOK_ERRORHOOK
 =
OSEK_ENABLE
) )

180 i‡––
ªt
 !
E_OK
 ) && (
Eº‹HookRu¬ög
 != 1))

182 
SëEº‹_Api
(
OSSîvi˚Id_WaôEvít
);

183 
SëEº‹_P¨am1
(
Mask
);

184 
SëEº‹_Rë
(
ªt
);

185 
SëEº‹_Msg
("ActivateTaskÑeturns !=Åhan E_OK");

186 
SëEº‹_Eº‹Hook
();

190  
	gªt
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\cortexM4\Os_Arch.c

59 
	~"Os_I¡î«l.h
"

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\cortexM4\Os_Internal_Arch.c

59 
	~"Os_I¡î«l.h
"

66 * 
	gO£k_NewTaskPå_Arch
;

68 * 
	gO£k_OldTaskPå_Arch
;

72 
TaskTy≥
 
	gTîmö©ögTask
 = 
INVALID_TASK
;

73 
TaskTy≥
 
	gWaôögTask
 = 
INVALID_TASK
;

81 
	$Rëu∫Hook_Arch
()

84 1Ë
	`o£k∑u£
();

86 
	}
}

88 
	$CheckTîmö©ögTask_Arch
()

90 if(
Tîmö©ögTask
 !
INVALID_TASK
)

95 
	`InôSèck_Arch
(
Tîmö©ögTask
);

97 
Tîmö©ögTask
 = 
INVALID_TASK
;

98 
	}
}

101 
	$InôSèck_Arch
(
uöt8
 
TaskID
)

104 
uöt32
 * 
èskSèck
 = (uöt32 *)
TasksC⁄°
[
TaskID
].
SèckPå
;

105 
èskSèckSizeW‹ds
 = 
TasksC⁄°
[
TaskID
].
SèckSize
/4;

107 
èskSèck
[
èskSèckSizeW‹ds
-1] = 1<<24;

108 
èskSèck
[
èskSèckSizeW‹ds
-2] = (
uöt32
Ë
TasksC⁄°
[
TaskID
].
E¡ryPoöt
;

109 
èskSèck
[
èskSèckSizeW‹ds
-3] = (
uöt32
Ë
Rëu∫Hook_Arch
;

110 
èskSèck
[
èskSèckSizeW‹ds
-9] = 0xFFFFFFFD;

112 *(
TasksC⁄°
[
TaskID
].
TaskC⁄ãxt
Ë&(
èskSèck
[
èskSèckSizeW‹ds
 - 17]);

114 
	}
}

117 
	$SysTick_H™dÀr
()

120 
C⁄ãxtTy≥
 
a˘uÆC⁄ãxt
 = 
	`GëCÆlögC⁄ãxt
();

122 
	`SëA˘uÆC⁄ãxt
(
CONTEXT_ISR2
);

124 #i‡(
ALARMS_COUNT
 != 0)

126 
Cou¡îIn¸emítTy≥
 
Cou¡îIn¸emít
 = 1;

127 ()
Cou¡îIn¸emít
;

130 
	`I¡Secuª_Sèπ
();

133 
Cou¡îIn¸emít
 = 
	`In¸emítCou¡î
(0, 1 );

136 
	`I¡Secuª_End
();

141 
	`SëA˘uÆC⁄ãxt
(
a˘uÆC⁄ãxt
);

143 #i‡(
NON_PREEMPTIVE
 =
OSEK_DISABLE
)

145 i‡––
CONTEXT_TASK
 =
a˘uÆC⁄ãxt
 ) &&

146 –
TasksC⁄°
[
	`GëRu¬ögTask
()].
C⁄°Fœgs
.
Pªemtive
 ) )

149 
	`Po°I§2_Arch
(
i§
);

152 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\cortexM4\PendSV.S

57 .
	gthumb_func


58 .
sy¡ax
 
	gunifõd


62 .
globÆ
 
	gPídSV_H™dÀr


63 .
O£k_OldTaskPå_Arch
,
O£k_NewTaskPå_Arch
,
CheckTîmö©ögTask_Arch


66 
PídSV_H™dÀr
:

68 
˝sid
 
f


71 
push
 {
Ã
}

72 
bl
 
CheckTîmö©ögTask_Arch


73 
p›
 {
Ã
}

76 
t°
 
Ã
,4

77 
ôe
 
eq


78 
mr£q
 
r0
,
m•


79 
mr¢e
 
r0
,
p•


81 #i‡
__TARGET_FPU_VFP


83 
t°
 
Ã
,0x10

84 
ô
 
eq


85 
v°mdbeq
 
r0
!,{
s16
-
s31
}

89 
°mdb
 
r0
!,{
r4
-
r11
,
Ã
}

92 
t°
 
Ã
,4

93 
ô
 
eq


94 
m§eq
 
m•
,
r0


97 
ldr
 
r1
,=
O£k_OldTaskPå_Arch


98 
ldr
 
r1
,[r1]

99 
cmp
 
r1
,0

100 
ô
 
√


101 
°∫e
 
r0
,[
r1
]

104 
ldr
 
r1
,=
O£k_NewTaskPå_Arch


105 
ldr
 
r1
,[r1]

106 
ldr
 
r0
,[
r1
]

109 
ldmü
 
r0
!,{
r4
-
r11
,
Ã
}

111 #ifde‡
__TARGET_FPU_VFP


113 
t°
 
Ã
,0x10

114 
ô
 
eq


115 
vldmüeq
 
r0
!,{
s16
-
s31
}

120 
mrs
 
r1
,
c⁄åﬁ


121 
t°
 
Ã
,4

122 
ôãe
 
eq


124 
bi˚q
 
r1
,3

125 
m§eq
 
m•
,
r0


127 
‹∫e
 
r1
,2

128 
m§√
 
p•
,
r0


130 
m§
 
c⁄åﬁ
,
r1


133 
˝sõ
 
f


135 
bx
 
Ã


	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\cortexM4\StartOs_Arch.c

61 
	~"Os_I¡î«l.h
"

62 
	~"SèπOs_Arch_SysTick.h
"

77 
	$SèπOs_Arch_Cpu
()

79 
	`SèπOs_Arch_SysTick
();

80 
	`E«bÀ_U£r_ISRs
();

81 
	}
}

83 
	$SèπOs_Arch
()

85 
uöt8f
 
lo›i
;

88  
lo›i
 = 0;Üo›ò< 
TASKS_COUNT
;Üoopi++)

90 
	`InôSèck_Arch
(
lo›i
);

94 
	`SèπOs_Arch_Cpu
();

96 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\cortexM4\StartOs_Arch_SysTick.c

59 
	~"Os_I¡î«l_Arch_Cpu.h
"

60 
	~"devi˚_imx.h
"

75 
	$SèπOs_Arch_SysTick
()

78 
SCB
->
SHCSR
 |
SCB_SHCSR_MEMFAULTENA_Msk
 | 
SCB_SHCSR_USGFAULTENA_Msk
 | 
SCB_SHCSR_BUSFAULTENA_Msk
;

81 
	`NVIC_SëPri‹ôy
(
PídSV_IRQn
, (1 << 
__NVIC_PRIO_BITS
) - 1);

85 
	`SysTick_C⁄fig
(
Sy°emC‹eClock
/1000);

88 
	`NVIC_SëPri‹ôy
(
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

89 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\CMSIS\Include\arm_common_tables.h

41 #i‚de‡
_ARM_COMMON_TABLES_H


42 
	#_ARM_COMMON_TABLES_H


	)

44 
	~"¨m_m©h.h
"

46 c⁄° 
uöt16_t
 
¨mBôRevTabÀ
[1024];

47 c⁄° 
q15_t
 
¨mRecùTabÀQ15
[64];

48 c⁄° 
q31_t
 
¨mRecùTabÀQ31
[64];

51 c⁄° 
Êﬂt32_t
 
twiddÀC€f_16
[32];

52 c⁄° 
Êﬂt32_t
 
twiddÀC€f_32
[64];

53 c⁄° 
Êﬂt32_t
 
twiddÀC€f_64
[128];

54 c⁄° 
Êﬂt32_t
 
twiddÀC€f_128
[256];

55 c⁄° 
Êﬂt32_t
 
twiddÀC€f_256
[512];

56 c⁄° 
Êﬂt32_t
 
twiddÀC€f_512
[1024];

57 c⁄° 
Êﬂt32_t
 
twiddÀC€f_1024
[2048];

58 c⁄° 
Êﬂt32_t
 
twiddÀC€f_2048
[4096];

59 c⁄° 
Êﬂt32_t
 
twiddÀC€f_4096
[8192];

60 
	#twiddÀC€f
 
twiddÀC€f_4096


	)

61 c⁄° 
q31_t
 
twiddÀC€f_16_q31
[24];

62 c⁄° 
q31_t
 
twiddÀC€f_32_q31
[48];

63 c⁄° 
q31_t
 
twiddÀC€f_64_q31
[96];

64 c⁄° 
q31_t
 
twiddÀC€f_128_q31
[192];

65 c⁄° 
q31_t
 
twiddÀC€f_256_q31
[384];

66 c⁄° 
q31_t
 
twiddÀC€f_512_q31
[768];

67 c⁄° 
q31_t
 
twiddÀC€f_1024_q31
[1536];

68 c⁄° 
q31_t
 
twiddÀC€f_2048_q31
[3072];

69 c⁄° 
q31_t
 
twiddÀC€f_4096_q31
[6144];

70 c⁄° 
q15_t
 
twiddÀC€f_16_q15
[24];

71 c⁄° 
q15_t
 
twiddÀC€f_32_q15
[48];

72 c⁄° 
q15_t
 
twiddÀC€f_64_q15
[96];

73 c⁄° 
q15_t
 
twiddÀC€f_128_q15
[192];

74 c⁄° 
q15_t
 
twiddÀC€f_256_q15
[384];

75 c⁄° 
q15_t
 
twiddÀC€f_512_q15
[768];

76 c⁄° 
q15_t
 
twiddÀC€f_1024_q15
[1536];

77 c⁄° 
q15_t
 
twiddÀC€f_2048_q15
[3072];

78 c⁄° 
q15_t
 
twiddÀC€f_4096_q15
[6144];

79 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_32
[32];

80 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_64
[64];

81 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_128
[128];

82 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_256
[256];

83 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_512
[512];

84 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_1024
[1024];

85 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_2048
[2048];

86 c⁄° 
Êﬂt32_t
 
twiddÀC€f_rf·_4096
[4096];

90 
	#ARMBITREVINDEXTABLE__16_TABLE_LENGTH
 ((
uöt16_t
)20 )

	)

91 
	#ARMBITREVINDEXTABLE__32_TABLE_LENGTH
 ((
uöt16_t
)48 )

	)

92 
	#ARMBITREVINDEXTABLE__64_TABLE_LENGTH
 ((
uöt16_t
)56 )

	)

93 
	#ARMBITREVINDEXTABLE_128_TABLE_LENGTH
 ((
uöt16_t
)208 )

	)

94 
	#ARMBITREVINDEXTABLE_256_TABLE_LENGTH
 ((
uöt16_t
)440 )

	)

95 
	#ARMBITREVINDEXTABLE_512_TABLE_LENGTH
 ((
uöt16_t
)448 )

	)

96 
	#ARMBITREVINDEXTABLE1024_TABLE_LENGTH
 ((
uöt16_t
)1800)

	)

97 
	#ARMBITREVINDEXTABLE2048_TABLE_LENGTH
 ((
uöt16_t
)3808)

	)

98 
	#ARMBITREVINDEXTABLE4096_TABLE_LENGTH
 ((
uöt16_t
)4032)

	)

100 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ16
[
ARMBITREVINDEXTABLE__16_TABLE_LENGTH
];

101 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ32
[
ARMBITREVINDEXTABLE__32_TABLE_LENGTH
];

102 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ64
[
ARMBITREVINDEXTABLE__64_TABLE_LENGTH
];

103 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ128
[
ARMBITREVINDEXTABLE_128_TABLE_LENGTH
];

104 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ256
[
ARMBITREVINDEXTABLE_256_TABLE_LENGTH
];

105 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ512
[
ARMBITREVINDEXTABLE_512_TABLE_LENGTH
];

106 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ1024
[
ARMBITREVINDEXTABLE1024_TABLE_LENGTH
];

107 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ2048
[
ARMBITREVINDEXTABLE2048_TABLE_LENGTH
];

108 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ4096
[
ARMBITREVINDEXTABLE4096_TABLE_LENGTH
];

111 
	#ARMBITREVINDEXTABLE_FIXED___16_TABLE_LENGTH
 ((
uöt16_t
)12 )

	)

112 
	#ARMBITREVINDEXTABLE_FIXED___32_TABLE_LENGTH
 ((
uöt16_t
)24 )

	)

113 
	#ARMBITREVINDEXTABLE_FIXED___64_TABLE_LENGTH
 ((
uöt16_t
)56 )

	)

114 
	#ARMBITREVINDEXTABLE_FIXED__128_TABLE_LENGTH
 ((
uöt16_t
)112 )

	)

115 
	#ARMBITREVINDEXTABLE_FIXED__256_TABLE_LENGTH
 ((
uöt16_t
)240 )

	)

116 
	#ARMBITREVINDEXTABLE_FIXED__512_TABLE_LENGTH
 ((
uöt16_t
)480 )

	)

117 
	#ARMBITREVINDEXTABLE_FIXED_1024_TABLE_LENGTH
 ((
uöt16_t
)992 )

	)

118 
	#ARMBITREVINDEXTABLE_FIXED_2048_TABLE_LENGTH
 ((
uöt16_t
)1984)

	)

119 
	#ARMBITREVINDEXTABLE_FIXED_4096_TABLE_LENGTH
 ((
uöt16_t
)4032)

	)

121 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_16
[
ARMBITREVINDEXTABLE_FIXED___16_TABLE_LENGTH
];

122 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_32
[
ARMBITREVINDEXTABLE_FIXED___32_TABLE_LENGTH
];

123 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_64
[
ARMBITREVINDEXTABLE_FIXED___64_TABLE_LENGTH
];

124 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_128
[
ARMBITREVINDEXTABLE_FIXED__128_TABLE_LENGTH
];

125 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_256
[
ARMBITREVINDEXTABLE_FIXED__256_TABLE_LENGTH
];

126 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_512
[
ARMBITREVINDEXTABLE_FIXED__512_TABLE_LENGTH
];

127 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_1024
[
ARMBITREVINDEXTABLE_FIXED_1024_TABLE_LENGTH
];

128 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_2048
[
ARMBITREVINDEXTABLE_FIXED_2048_TABLE_LENGTH
];

129 c⁄° 
uöt16_t
 
¨mBôRevIndexTabÀ_fixed_4096
[
ARMBITREVINDEXTABLE_FIXED_4096_TABLE_LENGTH
];

132 c⁄° 
Êﬂt32_t
 
söTabÀ_f32
[
FAST_MATH_TABLE_SIZE
 + 1];

133 c⁄° 
q31_t
 
söTabÀ_q31
[
FAST_MATH_TABLE_SIZE
 + 1];

134 c⁄° 
q15_t
 
söTabÀ_q15
[
FAST_MATH_TABLE_SIZE
 + 1];

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\CMSIS\Include\arm_const_structs.h

43 #i‚de‡
_ARM_CONST_STRUCTS_H


44 
	#_ARM_CONST_STRUCTS_H


	)

46 
	~"¨m_m©h.h
"

47 
	~"¨m_comm⁄_èbÀs.h
"

49 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn16
;

50 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn32
;

51 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn64
;

52 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn128
;

53 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn256
;

54 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn512
;

55 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn1024
;

56 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn2048
;

57 c⁄° 
¨m_cf·_ö°™˚_f32
 
¨m_cf·_sR_f32_Àn4096
;

59 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn16
;

60 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn32
;

61 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn64
;

62 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn128
;

63 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn256
;

64 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn512
;

65 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn1024
;

66 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn2048
;

67 c⁄° 
¨m_cf·_ö°™˚_q31
 
¨m_cf·_sR_q31_Àn4096
;

69 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn16
;

70 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn32
;

71 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn64
;

72 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn128
;

73 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn256
;

74 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn512
;

75 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn1024
;

76 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn2048
;

77 c⁄° 
¨m_cf·_ö°™˚_q15
 
¨m_cf·_sR_q15_Àn4096
;

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\CMSIS\Include\arm_math.h

281 #i‚de‡
_ARM_MATH_H


282 
	#_ARM_MATH_H


	)

284 
	#__CMSIS_GENERIC


	)

286 #i‡
deföed
(
ARM_MATH_CM7
)

287 
	~"c‹e_cm7.h
"

288 #ñi‡
deföed
 (
ARM_MATH_CM4
)

289 
	~"c‹e_cm4.h
"

290 #ñi‡
deföed
 (
ARM_MATH_CM3
)

291 
	~"c‹e_cm3.h
"

292 #ñi‡
deföed
 (
ARM_MATH_CM0
)

293 
	~"c‹e_cm0.h
"

294 
	#ARM_MATH_CM0_FAMILY


	)

295 #ñi‡
deföed
 (
ARM_MATH_CM0PLUS
)

296 
	~"c‹e_cm0∂us.h
"

297 
	#ARM_MATH_CM0_FAMILY


	)

302 #unde‡
__CMSIS_GENERIC


303 
	~"°rög.h
"

304 
	~"m©h.h
"

305 #ifdef 
__˝lu•lus


315 
	#DELTA_Q31
 (0x100)

	)

316 
	#DELTA_Q15
 0x5

	)

317 
	#INDEX_MASK
 0x0000003F

	)

318 #i‚de‡
PI


319 
	#PI
 3.14159265358979f

	)

326 
	#FAST_MATH_TABLE_SIZE
 512

	)

327 
	#FAST_MATH_Q31_SHIFT
 (32 - 10)

	)

328 
	#FAST_MATH_Q15_SHIFT
 (16 - 10)

	)

329 
	#CONTROLLER_Q31_SHIFT
 (32 - 9)

	)

330 
	#TABLE_SIZE
 256

	)

331 
	#TABLE_SPACING_Q31
 0x400000

	)

332 
	#TABLE_SPACING_Q15
 0x80

	)

339 
	#INPUT_SPACING
 0xB60B61

	)

344 #i‚de‡
UNALIGNED_SUPPORT_DISABLE


345 
	#ALIGN4


	)

347 #i‡
deföed
 (
__GNUC__
)

348 
	#ALIGN4
 
	`__©åibuã__
((
	`Æig√d
(4)))

	)

350 
	#ALIGN4
 
	`__Æign
(4)

	)

360 
ARM_MATH_SUCCESS
 = 0,

361 
ARM_MATH_ARGUMENT_ERROR
 = -1,

362 
ARM_MATH_LENGTH_ERROR
 = -2,

363 
ARM_MATH_SIZE_MISMATCH
 = -3,

364 
ARM_MATH_NANINF
 = -4,

365 
ARM_MATH_SINGULAR
 = -5,

366 
ARM_MATH_TEST_FAILURE
 = -6

367 } 
	t¨m_°©us
;

372 
öt8_t
 
	tq7_t
;

377 
öt16_t
 
	tq15_t
;

382 
öt32_t
 
	tq31_t
;

387 
öt64_t
 
	tq63_t
;

392 
	tÊﬂt32_t
;

397 
	tÊﬂt64_t
;

402 #i‡
deföed
 
__CC_ARM


403 
	#__SIMD32_TYPE
 
öt32_t
 
__∑cked


	)

404 
	#CMSIS_UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

405 #ñi‡
deföed
 
__ICCARM__


406 
	#CMSIS_UNUSED


	)

407 
	#__SIMD32_TYPE
 
öt32_t
 
__∑cked


	)

408 #ñi‡
deföed
 
__GNUC__


409 
	#__SIMD32_TYPE
 
öt32_t


	)

410 
	#CMSIS_UNUSED
 
	`__©åibuã__
((
unu£d
))

	)

411 #ñi‡
deföed
 
__CSMC__


412 
	#CMSIS_UNUSED


	)

413 
	#__SIMD32_TYPE
 
öt32_t


	)

415 #îr‹ 
Unknown
 
compûî


418 
	#__SIMD32
(
addr
Ë(*(
__SIMD32_TYPE
 **Ë& (addr))

	)

419 
	#__SIMD32_CONST
(
addr
Ë((
__SIMD32_TYPE
 *)◊ddr))

	)

421 
	#_SIMD32_OFFSET
(
addr
Ë(*(
__SIMD32_TYPE
 *Ë◊ddr))

	)

423 
	#__SIMD64
(
addr
Ë(*(
öt64_t
 **Ë& (addr))

	)

425 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0_FAMILY
)

429 
	#__PKHBT
(
ARG1
, 
ARG2
, 
ARG3
Ë–(((
öt32_t
)(ARG1) << 0) & (int32_t)0x0000FFFF) | \

430 (((
öt32_t
)(
ARG2
Ë<< 
ARG3
Ë& (öt32_t)0xFFFF0000Ë)

	)

431 
	#__PKHTB
(
ARG1
, 
ARG2
, 
ARG3
Ë–(((
öt32_t
)(ARG1) << 0) & (int32_t)0xFFFF0000) | \

432 (((
öt32_t
)(
ARG2
Ë>> 
ARG3
Ë& (öt32_t)0x0000FFFFË)

	)

440 #i‚de‡
ARM_MATH_BIG_ENDIAN


442 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v0) << 0) & (int32_t)0x000000FF) | \

443 (((
öt32_t
)(
v1
) << 8) & (int32_t)0x0000FF00) | \

444 (((
öt32_t
)(
v2
) << 16) & (int32_t)0x00FF0000) | \

445 (((
öt32_t
)(
v3
Ë<< 24Ë& (öt32_t)0xFF000000Ë)

	)

448 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v3) << 0) & (int32_t)0x000000FF) | \

449 (((
öt32_t
)(
v2
) << 8) & (int32_t)0x0000FF00) | \

450 (((
öt32_t
)(
v1
) << 16) & (int32_t)0x00FF0000) | \

451 (((
öt32_t
)(
v0
Ë<< 24Ë& (öt32_t)0xFF000000Ë)

	)

459 
__INLINE
 
q31_t
 
˛ù_q63_to_q31
(

460 
q63_t
 
x
)

462  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

463 ((0x7FFFFFFF ^ ((
q31_t
Ë(
x
 >> 63)))) : (q31_t) x;

469 
__INLINE
 
q15_t
 
˛ù_q63_to_q15
(

470 
q63_t
 
x
)

472  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

473 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 63)))) : (q15_t) (x >> 15);

479 
__INLINE
 
q7_t
 
˛ù_q31_to_q7
(

480 
q31_t
 
x
)

482  ((
q31_t
Ë(
x
 >> 24) != ((q31_t) x >> 23)) ?

483 ((0x7F ^ ((
q7_t
Ë(
x
 >> 31)))) : (q7_t) x;

489 
__INLINE
 
q15_t
 
˛ù_q31_to_q15
(

490 
q31_t
 
x
)

492  ((
q31_t
Ë(
x
 >> 16) != ((q31_t) x >> 15)) ?

493 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 31)))) : (q15_t) x;

500 
__INLINE
 
q63_t
 
mu…32x64
(

501 
q63_t
 
x
,

502 
q31_t
 
y
)

504  ((((
q63_t
Ë(
x
 & 0x00000000FFFFFFFFË* 
y
) >> 32) +

505 (((
q63_t
Ë(
x
 >> 32Ë* 
y
)));

509 #i‡
deföed
 (
ARM_MATH_CM0_FAMILY
Ë&& deföed ( 
__CC_ARM
 )

510 
	#__CLZ
 
__˛z


	)

513 #i‡
deföed
 (
ARM_MATH_CM0_FAMILY
Ë&& ((deföed (
__ICCARM__
)Ë||(deföed (
__GNUC__
)Ë|| deföed (
__TASKING__
) )

515 
__INLINE
 
uöt32_t
 
__CLZ
(

516 
q31_t
 
d©a
);

519 
__INLINE
 
uöt32_t
 
__CLZ
(

520 
q31_t
 
d©a
)

522 
uöt32_t
 
cou¡
 = 0;

523 
uöt32_t
 
mask
 = 0x80000000;

525 (
d©a
 & 
mask
) == 0)

527 
cou¡
 += 1u;

528 
mask
 = mask >> 1u;

531  (
cou¡
);

541 
__INLINE
 
uöt32_t
 
¨m_ªcù_q31
(

542 
q31_t
 
ö
,

543 
q31_t
 * 
d°
,

544 
q31_t
 * 
pRecùTabÀ
)

547 
uöt32_t
 
out
, 
ãmpVÆ
;

548 
uöt32_t
 
ödex
, 
i
;

549 
uöt32_t
 
signBôs
;

551 if(
ö
 > 0)

553 
signBôs
 = 
__CLZ
(
ö
) - 1;

557 
signBôs
 = 
__CLZ
(-
ö
) - 1;

561 
ö
 = i¿<< 
signBôs
;

564 
ödex
 = (
uöt32_t
Ë(
ö
 >> 24u);

565 
ödex
 = (ödex & 
INDEX_MASK
);

568 
out
 = 
pRecùTabÀ
[
ödex
];

572 
i
 = 0u; i < 2u; i++)

574 
ãmpVÆ
 = (
q31_t
Ë(((
q63_t
Ë
ö
 * 
out
) >> 31u);

575 
ãmpVÆ
 = 0x7FFFFFFF -ÅempVal;

578 
out
 = (
q31_t
Ë
˛ù_q63_to_q31
(((
q63_t
Ëouà* 
ãmpVÆ
) >> 30u);

582 *
d°
 = 
out
;

585  (
signBôs
 + 1u);

592 
__INLINE
 
uöt32_t
 
¨m_ªcù_q15
(

593 
q15_t
 
ö
,

594 
q15_t
 * 
d°
,

595 
q15_t
 * 
pRecùTabÀ
)

598 
uöt32_t
 
out
 = 0, 
ãmpVÆ
 = 0;

599 
uöt32_t
 
ödex
 = 0, 
i
 = 0;

600 
uöt32_t
 
signBôs
 = 0;

602 if(
ö
 > 0)

604 
signBôs
 = 
__CLZ
(
ö
) - 17;

608 
signBôs
 = 
__CLZ
(-
ö
) - 17;

612 
ö
 = i¿<< 
signBôs
;

615 
ödex
 = 
ö
 >> 8;

616 
ödex
 = (ödex & 
INDEX_MASK
);

619 
out
 = 
pRecùTabÀ
[
ödex
];

623 
i
 = 0; i < 2; i++)

625 
ãmpVÆ
 = (
q15_t
Ë(((
q31_t
Ë
ö
 * 
out
) >> 15);

626 
ãmpVÆ
 = 0x7FFF -ÅempVal;

628 
out
 = (
q15_t
Ë(((
q31_t
Ëouà* 
ãmpVÆ
) >> 14);

632 *
d°
 = 
out
;

635  (
signBôs
 + 1);

643 #i‡
deföed
(
ARM_MATH_CM0_FAMILY
)

645 
__INLINE
 
q31_t
 
__SSAT
(

646 
q31_t
 
x
,

647 
uöt32_t
 
y
)

649 
öt32_t
 
posMax
, 
√gMö
;

650 
uöt32_t
 
i
;

652 
posMax
 = 1;

653 
i
 = 0; i < (
y
 - 1); i++)

655 
posMax
 =ÖosMax * 2;

658 if(
x
 > 0)

660 
posMax
 = (posMax - 1);

662 if(
x
 > 
posMax
)

664 
x
 = 
posMax
;

669 
√gMö
 = -
posMax
;

671 if(
x
 < 
√gMö
)

673 
x
 = 
√gMö
;

676  (
x
);

688 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0_FAMILY
)

693 
__INLINE
 
q31_t
 
__QADD8
(

694 
q31_t
 
x
,

695 
q31_t
 
y
)

698 
q31_t
 
sum
;

699 
q7_t
 
r
, 
s
, 
t
, 
u
;

701 
r
 = (
q7_t
Ë
x
;

702 
s
 = (
q7_t
Ë
y
;

704 
r
 = 
__SSAT
((
q31_t
Ë‘ + 
s
), 8);

705 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë+ ((
y
 << 16) >> 24))), 8);

706 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë+ ((
y
 << 8) >> 24))), 8);

707 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë+ (
y
 >> 24))), 8);

709 
sum
 =

710 (((
q31_t
Ë
u
 << 24Ë& 0xFF000000Ë| (((q31_tË
t
 << 16) & 0x00FF0000) |

711 (((
q31_t
Ë
s
 << 8Ë& 0x0000FF00Ë| (
r
 & 0x000000FF);

713  
sum
;

720 
__INLINE
 
q31_t
 
__QSUB8
(

721 
q31_t
 
x
,

722 
q31_t
 
y
)

725 
q31_t
 
sum
;

726 
q31_t
 
r
, 
s
, 
t
, 
u
;

728 
r
 = (
q7_t
Ë
x
;

729 
s
 = (
q7_t
Ë
y
;

731 
r
 = 
__SSAT
(‘ - 
s
), 8);

732 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë- ((
y
 << 16) >> 24))), 8) << 8;

733 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë- ((
y
 << 8) >> 24))), 8) << 16;

734 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë- (
y
 >> 24))), 8) << 24;

736 
sum
 =

737 (
u
 & 0xFF000000Ë| (
t
 & 0x00FF0000Ë| (
s
 & 0x0000FF00Ë| (
r
 &

740  
sum
;

750 
__INLINE
 
q31_t
 
__QADD16
(

751 
q31_t
 
x
,

752 
q31_t
 
y
)

755 
q31_t
 
sum
;

756 
q31_t
 
r
, 
s
;

758 
r
 = (
q15_t
Ë
x
;

759 
s
 = (
q15_t
Ë
y
;

761 
r
 = 
__SSAT
‘ + 
s
, 16);

762 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë+ (
y
 >> 16))), 16) << 16;

764 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

766  
sum
;

773 
__INLINE
 
q31_t
 
__SHADD16
(

774 
q31_t
 
x
,

775 
q31_t
 
y
)

778 
q31_t
 
sum
;

779 
q31_t
 
r
, 
s
;

781 
r
 = (
q15_t
Ë
x
;

782 
s
 = (
q15_t
Ë
y
;

784 
r
 = (‘ >> 1Ë+ (
s
 >> 1));

785 
s
 = ((
q31_t
Ë((
x
 >> 17Ë+ (
y
 >> 17))) << 16;

787 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

789  
sum
;

796 
__INLINE
 
q31_t
 
__QSUB16
(

797 
q31_t
 
x
,

798 
q31_t
 
y
)

801 
q31_t
 
sum
;

802 
q31_t
 
r
, 
s
;

804 
r
 = (
q15_t
Ë
x
;

805 
s
 = (
q15_t
Ë
y
;

807 
r
 = 
__SSAT
‘ - 
s
, 16);

808 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë- (
y
 >> 16))), 16) << 16;

810 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

812  
sum
;

818 
__INLINE
 
q31_t
 
__SHSUB16
(

819 
q31_t
 
x
,

820 
q31_t
 
y
)

823 
q31_t
 
diff
;

824 
q31_t
 
r
, 
s
;

826 
r
 = (
q15_t
Ë
x
;

827 
s
 = (
q15_t
Ë
y
;

829 
r
 = (‘ >> 1Ë- (
s
 >> 1));

830 
s
 = (((
x
 >> 17Ë- (
y
 >> 17)) << 16);

832 
diff
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

834  
diff
;

840 
__INLINE
 
q31_t
 
__QASX
(

841 
q31_t
 
x
,

842 
q31_t
 
y
)

845 
q31_t
 
sum
 = 0;

847 
sum
 =

848 ((
sum
 +

849 
˛ù_q31_to_q15
((
q31_t
Ë((
q15_t
Ë(
x
 >> 16Ë+ (q15_tË
y
))) << 16) +

850 
˛ù_q31_to_q15
((
q31_t
Ë((
q15_t
Ë
x
 - (q15_tË(
y
 >> 16)));

852  
sum
;

858 
__INLINE
 
q31_t
 
__SHASX
(

859 
q31_t
 
x
,

860 
q31_t
 
y
)

863 
q31_t
 
sum
;

864 
q31_t
 
r
, 
s
;

866 
r
 = (
q15_t
Ë
x
;

867 
s
 = (
q15_t
Ë
y
;

869 
r
 = (‘ >> 1Ë- (
y
 >> 17));

870 
s
 = (((
x
 >> 17) + (s >> 1)) << 16);

872 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

874  
sum
;

881 
__INLINE
 
q31_t
 
__QSAX
(

882 
q31_t
 
x
,

883 
q31_t
 
y
)

886 
q31_t
 
sum
 = 0;

888 
sum
 =

889 ((
sum
 +

890 
˛ù_q31_to_q15
((
q31_t
Ë((
q15_t
Ë(
x
 >> 16Ë- (q15_tË
y
))) << 16) +

891 
˛ù_q31_to_q15
((
q31_t
Ë((
q15_t
Ë
x
 + (q15_tË(
y
 >> 16)));

893  
sum
;

899 
__INLINE
 
q31_t
 
__SHSAX
(

900 
q31_t
 
x
,

901 
q31_t
 
y
)

904 
q31_t
 
sum
;

905 
q31_t
 
r
, 
s
;

907 
r
 = (
q15_t
Ë
x
;

908 
s
 = (
q15_t
Ë
y
;

910 
r
 = (‘ >> 1Ë+ (
y
 >> 17));

911 
s
 = (((
x
 >> 17) - (s >> 1)) << 16);

913 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

915  
sum
;

921 
__INLINE
 
q31_t
 
__SMUSDX
(

922 
q31_t
 
x
,

923 
q31_t
 
y
)

926  ((
q31_t
Ë(((
q15_t
Ë
x
 * (q15_tË(
y
 >> 16)) -

927 ((
q15_t
Ë(
x
 >> 16Ë* (q15_tË
y
)));

933 
__INLINE
 
q31_t
 
__SMUADX
(

934 
q31_t
 
x
,

935 
q31_t
 
y
)

938  ((
q31_t
Ë(((
q15_t
Ë
x
 * (q15_tË(
y
 >> 16)) +

939 ((
q15_t
Ë(
x
 >> 16Ë* (q15_tË
y
)));

945 
__INLINE
 
q31_t
 
__QADD
(

946 
q31_t
 
x
,

947 
q31_t
 
y
)

949  
˛ù_q63_to_q31
((
q63_t
Ë
x
 + 
y
);

955 
__INLINE
 
q31_t
 
__QSUB
(

956 
q31_t
 
x
,

957 
q31_t
 
y
)

959  
˛ù_q63_to_q31
((
q63_t
Ë
x
 - 
y
);

965 
__INLINE
 
q31_t
 
__SMLAD
(

966 
q31_t
 
x
,

967 
q31_t
 
y
,

968 
q31_t
 
sum
)

971  (
sum
 + ((
q15_t
Ë(
x
 >> 16Ë* (q15_tË(
y
 >> 16)) +

972 ((
q15_t
Ë
x
 * (q15_tË
y
));

978 
__INLINE
 
q31_t
 
__SMLADX
(

979 
q31_t
 
x
,

980 
q31_t
 
y
,

981 
q31_t
 
sum
)

984  (
sum
 + ((
q15_t
Ë(
x
 >> 16Ë* (q15_tË(
y
)) +

985 ((
q15_t
Ë
x
 * (q15_tË(
y
 >> 16)));

991 
__INLINE
 
q31_t
 
__SMLSDX
(

992 
q31_t
 
x
,

993 
q31_t
 
y
,

994 
q31_t
 
sum
)

997  (
sum
 - ((
q15_t
Ë(
x
 >> 16Ë* (q15_tË(
y
)) +

998 ((
q15_t
Ë
x
 * (q15_tË(
y
 >> 16)));

1004 
__INLINE
 
q63_t
 
__SMLALD
(

1005 
q31_t
 
x
,

1006 
q31_t
 
y
,

1007 
q63_t
 
sum
)

1010  (
sum
 + ((
q15_t
Ë(
x
 >> 16Ë* (q15_tË(
y
 >> 16)) +

1011 ((
q15_t
Ë
x
 * (q15_tË
y
));

1017 
__INLINE
 
q63_t
 
__SMLALDX
(

1018 
q31_t
 
x
,

1019 
q31_t
 
y
,

1020 
q63_t
 
sum
)

1023  (
sum
 + ((
q15_t
Ë(
x
 >> 16Ë* (q15_tË
y
)) +

1024 ((
q15_t
Ë
x
 * (q15_tË(
y
 >> 16));

1030 
__INLINE
 
q31_t
 
__SMUAD
(

1031 
q31_t
 
x
,

1032 
q31_t
 
y
)

1035  (((
x
 >> 16Ë* (
y
 >> 16)) +

1036 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

1042 
__INLINE
 
q31_t
 
__SMUSD
(

1043 
q31_t
 
x
,

1044 
q31_t
 
y
)

1047  (-((
x
 >> 16Ë* (
y
 >> 16)) +

1048 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

1055 
__INLINE
 
q31_t
 
__SXTB16
(

1056 
q31_t
 
x
)

1059  ((((
x
 << 24) >> 24) & 0x0000FFFF) |

1060 (((
x
 << 8) >> 8) & 0xFFFF0000));

1072 
uöt16_t
 
numT≠s
;

1073 
q7_t
 *
pSèã
;

1074 
q7_t
 *
pC€ffs
;

1075 } 
	t¨m_fú_ö°™˚_q7
;

1082 
uöt16_t
 
numT≠s
;

1083 
q15_t
 *
pSèã
;

1084 
q15_t
 *
pC€ffs
;

1085 } 
	t¨m_fú_ö°™˚_q15
;

1092 
uöt16_t
 
numT≠s
;

1093 
q31_t
 *
pSèã
;

1094 
q31_t
 *
pC€ffs
;

1095 } 
	t¨m_fú_ö°™˚_q31
;

1102 
uöt16_t
 
numT≠s
;

1103 
Êﬂt32_t
 *
pSèã
;

1104 
Êﬂt32_t
 *
pC€ffs
;

1105 } 
	t¨m_fú_ö°™˚_f32
;

1116 
¨m_fú_q7
(

1117 c⁄° 
¨m_fú_ö°™˚_q7
 * 
S
,

1118 
q7_t
 * 
pSrc
,

1119 
q7_t
 * 
pD°
,

1120 
uöt32_t
 
blockSize
);

1132 
¨m_fú_öô_q7
(

1133 
¨m_fú_ö°™˚_q7
 * 
S
,

1134 
uöt16_t
 
numT≠s
,

1135 
q7_t
 * 
pC€ffs
,

1136 
q7_t
 * 
pSèã
,

1137 
uöt32_t
 
blockSize
);

1148 
¨m_fú_q15
(

1149 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1150 
q15_t
 * 
pSrc
,

1151 
q15_t
 * 
pD°
,

1152 
uöt32_t
 
blockSize
);

1162 
¨m_fú_Á°_q15
(

1163 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1164 
q15_t
 * 
pSrc
,

1165 
q15_t
 * 
pD°
,

1166 
uöt32_t
 
blockSize
);

1179 
¨m_°©us
 
¨m_fú_öô_q15
(

1180 
¨m_fú_ö°™˚_q15
 * 
S
,

1181 
uöt16_t
 
numT≠s
,

1182 
q15_t
 * 
pC€ffs
,

1183 
q15_t
 * 
pSèã
,

1184 
uöt32_t
 
blockSize
);

1194 
¨m_fú_q31
(

1195 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1196 
q31_t
 * 
pSrc
,

1197 
q31_t
 * 
pD°
,

1198 
uöt32_t
 
blockSize
);

1208 
¨m_fú_Á°_q31
(

1209 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1210 
q31_t
 * 
pSrc
,

1211 
q31_t
 * 
pD°
,

1212 
uöt32_t
 
blockSize
);

1223 
¨m_fú_öô_q31
(

1224 
¨m_fú_ö°™˚_q31
 * 
S
,

1225 
uöt16_t
 
numT≠s
,

1226 
q31_t
 * 
pC€ffs
,

1227 
q31_t
 * 
pSèã
,

1228 
uöt32_t
 
blockSize
);

1238 
¨m_fú_f32
(

1239 c⁄° 
¨m_fú_ö°™˚_f32
 * 
S
,

1240 
Êﬂt32_t
 * 
pSrc
,

1241 
Êﬂt32_t
 * 
pD°
,

1242 
uöt32_t
 
blockSize
);

1253 
¨m_fú_öô_f32
(

1254 
¨m_fú_ö°™˚_f32
 * 
S
,

1255 
uöt16_t
 
numT≠s
,

1256 
Êﬂt32_t
 * 
pC€ffs
,

1257 
Êﬂt32_t
 * 
pSèã
,

1258 
uöt32_t
 
blockSize
);

1266 
öt8_t
 
numSèges
;

1267 
q15_t
 *
pSèã
;

1268 
q15_t
 *
pC€ffs
;

1269 
öt8_t
 
po°Shi·
;

1271 } 
	t¨m_biquad_ˇsd_df1_ö°_q15
;

1279 
uöt32_t
 
numSèges
;

1280 
q31_t
 *
pSèã
;

1281 
q31_t
 *
pC€ffs
;

1282 
uöt8_t
 
po°Shi·
;

1284 } 
	t¨m_biquad_ˇsd_df1_ö°_q31
;

1291 
uöt32_t
 
numSèges
;

1292 
Êﬂt32_t
 *
pSèã
;

1293 
Êﬂt32_t
 *
pC€ffs
;

1296 } 
	t¨m_biquad_ˇsd_df1_ö°_f32
;

1309 
¨m_biquad_ˇsˇde_df1_q15
(

1310 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1311 
q15_t
 * 
pSrc
,

1312 
q15_t
 * 
pD°
,

1313 
uöt32_t
 
blockSize
);

1325 
¨m_biquad_ˇsˇde_df1_öô_q15
(

1326 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1327 
uöt8_t
 
numSèges
,

1328 
q15_t
 * 
pC€ffs
,

1329 
q15_t
 * 
pSèã
,

1330 
öt8_t
 
po°Shi·
);

1342 
¨m_biquad_ˇsˇde_df1_Á°_q15
(

1343 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1344 
q15_t
 * 
pSrc
,

1345 
q15_t
 * 
pD°
,

1346 
uöt32_t
 
blockSize
);

1358 
¨m_biquad_ˇsˇde_df1_q31
(

1359 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1360 
q31_t
 * 
pSrc
,

1361 
q31_t
 * 
pD°
,

1362 
uöt32_t
 
blockSize
);

1373 
¨m_biquad_ˇsˇde_df1_Á°_q31
(

1374 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1375 
q31_t
 * 
pSrc
,

1376 
q31_t
 * 
pD°
,

1377 
uöt32_t
 
blockSize
);

1389 
¨m_biquad_ˇsˇde_df1_öô_q31
(

1390 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1391 
uöt8_t
 
numSèges
,

1392 
q31_t
 * 
pC€ffs
,

1393 
q31_t
 * 
pSèã
,

1394 
öt8_t
 
po°Shi·
);

1405 
¨m_biquad_ˇsˇde_df1_f32
(

1406 c⁄° 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1407 
Êﬂt32_t
 * 
pSrc
,

1408 
Êﬂt32_t
 * 
pD°
,

1409 
uöt32_t
 
blockSize
);

1420 
¨m_biquad_ˇsˇde_df1_öô_f32
(

1421 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1422 
uöt8_t
 
numSèges
,

1423 
Êﬂt32_t
 * 
pC€ffs
,

1424 
Êﬂt32_t
 * 
pSèã
);

1433 
uöt16_t
 
numRows
;

1434 
uöt16_t
 
numCﬁs
;

1435 
Êﬂt32_t
 *
pD©a
;

1436 } 
	t¨m_m©rix_ö°™˚_f32
;

1445 
uöt16_t
 
numRows
;

1446 
uöt16_t
 
numCﬁs
;

1447 
Êﬂt64_t
 *
pD©a
;

1448 } 
	t¨m_m©rix_ö°™˚_f64
;

1456 
uöt16_t
 
numRows
;

1457 
uöt16_t
 
numCﬁs
;

1458 
q15_t
 *
pD©a
;

1460 } 
	t¨m_m©rix_ö°™˚_q15
;

1468 
uöt16_t
 
numRows
;

1469 
uöt16_t
 
numCﬁs
;

1470 
q31_t
 *
pD©a
;

1472 } 
	t¨m_m©rix_ö°™˚_q31
;

1485 
¨m_°©us
 
¨m_m©_add_f32
(

1486 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1487 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1488 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1499 
¨m_°©us
 
¨m_m©_add_q15
(

1500 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1501 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1502 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1513 
¨m_°©us
 
¨m_m©_add_q31
(

1514 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1515 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1516 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1527 
¨m_°©us
 
¨m_m©_cm∂x_mu…_f32
(

1528 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1529 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1530 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1541 
¨m_°©us
 
¨m_m©_cm∂x_mu…_q15
(

1542 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1543 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1544 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1545 
q15_t
 * 
pS¸©ch
);

1556 
¨m_°©us
 
¨m_m©_cm∂x_mu…_q31
(

1557 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1558 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1559 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1570 
¨m_°©us
 
¨m_m©_å™s_f32
(

1571 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1572 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1583 
¨m_°©us
 
¨m_m©_å™s_q15
(

1584 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1585 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1595 
¨m_°©us
 
¨m_m©_å™s_q31
(

1596 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1597 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1609 
¨m_°©us
 
¨m_m©_mu…_f32
(

1610 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1611 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1612 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1624 
¨m_°©us
 
¨m_m©_mu…_q15
(

1625 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1626 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1627 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1628 
q15_t
 * 
pSèã
);

1640 
¨m_°©us
 
¨m_m©_mu…_Á°_q15
(

1641 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1642 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1643 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1644 
q15_t
 * 
pSèã
);

1655 
¨m_°©us
 
¨m_m©_mu…_q31
(

1656 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1657 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1658 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1669 
¨m_°©us
 
¨m_m©_mu…_Á°_q31
(

1670 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1671 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1672 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1684 
¨m_°©us
 
¨m_m©_sub_f32
(

1685 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1686 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1687 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1698 
¨m_°©us
 
¨m_m©_sub_q15
(

1699 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1700 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1701 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1712 
¨m_°©us
 
¨m_m©_sub_q31
(

1713 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1714 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1715 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1726 
¨m_°©us
 
¨m_m©_sˇÀ_f32
(

1727 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1728 
Êﬂt32_t
 
sˇÀ
,

1729 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1741 
¨m_°©us
 
¨m_m©_sˇÀ_q15
(

1742 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1743 
q15_t
 
sˇÀFø˘
,

1744 
öt32_t
 
shi·
,

1745 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1757 
¨m_°©us
 
¨m_m©_sˇÀ_q31
(

1758 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1759 
q31_t
 
sˇÀFø˘
,

1760 
öt32_t
 
shi·
,

1761 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1773 
¨m_m©_öô_q31
(

1774 
¨m_m©rix_ö°™˚_q31
 * 
S
,

1775 
uöt16_t
 
nRows
,

1776 
uöt16_t
 
nCﬁumns
,

1777 
q31_t
 * 
pD©a
);

1788 
¨m_m©_öô_q15
(

1789 
¨m_m©rix_ö°™˚_q15
 * 
S
,

1790 
uöt16_t
 
nRows
,

1791 
uöt16_t
 
nCﬁumns
,

1792 
q15_t
 * 
pD©a
);

1803 
¨m_m©_öô_f32
(

1804 
¨m_m©rix_ö°™˚_f32
 * 
S
,

1805 
uöt16_t
 
nRows
,

1806 
uöt16_t
 
nCﬁumns
,

1807 
Êﬂt32_t
 * 
pD©a
);

1816 
q15_t
 
A0
;

1817 #ifde‡
ARM_MATH_CM0_FAMILY


1818 
q15_t
 
A1
;

1819 
q15_t
 
A2
;

1821 
q31_t
 
A1
;

1823 
q15_t
 
°©e
[3];

1824 
q15_t
 
Kp
;

1825 
q15_t
 
Ki
;

1826 
q15_t
 
Kd
;

1827 } 
	t¨m_pid_ö°™˚_q15
;

1834 
q31_t
 
A0
;

1835 
q31_t
 
A1
;

1836 
q31_t
 
A2
;

1837 
q31_t
 
°©e
[3];

1838 
q31_t
 
Kp
;

1839 
q31_t
 
Ki
;

1840 
q31_t
 
Kd
;

1842 } 
	t¨m_pid_ö°™˚_q31
;

1849 
Êﬂt32_t
 
A0
;

1850 
Êﬂt32_t
 
A1
;

1851 
Êﬂt32_t
 
A2
;

1852 
Êﬂt32_t
 
°©e
[3];

1853 
Êﬂt32_t
 
Kp
;

1854 
Êﬂt32_t
 
Ki
;

1855 
Êﬂt32_t
 
Kd
;

1856 } 
	t¨m_pid_ö°™˚_f32
;

1866 
¨m_pid_öô_f32
(

1867 
¨m_pid_ö°™˚_f32
 * 
S
,

1868 
öt32_t
 
ª£tSèãFœg
);

1875 
¨m_pid_ª£t_f32
(

1876 
¨m_pid_ö°™˚_f32
 * 
S
);

1885 
¨m_pid_öô_q31
(

1886 
¨m_pid_ö°™˚_q31
 * 
S
,

1887 
öt32_t
 
ª£tSèãFœg
);

1896 
¨m_pid_ª£t_q31
(

1897 
¨m_pid_ö°™˚_q31
 * 
S
);

1905 
¨m_pid_öô_q15
(

1906 
¨m_pid_ö°™˚_q15
 * 
S
,

1907 
öt32_t
 
ª£tSèãFœg
);

1914 
¨m_pid_ª£t_q15
(

1915 
¨m_pid_ö°™˚_q15
 * 
S
);

1923 
uöt32_t
 
nVÆues
;

1924 
Êﬂt32_t
 
x1
;

1925 
Êﬂt32_t
 
xS∑cög
;

1926 
Êﬂt32_t
 *
pYD©a
;

1927 } 
	t¨m_löór_öãΩ_ö°™˚_f32
;

1935 
uöt16_t
 
numRows
;

1936 
uöt16_t
 
numCﬁs
;

1937 
Êﬂt32_t
 *
pD©a
;

1938 } 
	t¨m_bûöór_öãΩ_ö°™˚_f32
;

1946 
uöt16_t
 
numRows
;

1947 
uöt16_t
 
numCﬁs
;

1948 
q31_t
 *
pD©a
;

1949 } 
	t¨m_bûöór_öãΩ_ö°™˚_q31
;

1957 
uöt16_t
 
numRows
;

1958 
uöt16_t
 
numCﬁs
;

1959 
q15_t
 *
pD©a
;

1960 } 
	t¨m_bûöór_öãΩ_ö°™˚_q15
;

1968 
uöt16_t
 
numRows
;

1969 
uöt16_t
 
numCﬁs
;

1970 
q7_t
 *
pD©a
;

1971 } 
	t¨m_bûöór_öãΩ_ö°™˚_q7
;

1983 
¨m_mu…_q7
(

1984 
q7_t
 * 
pSrcA
,

1985 
q7_t
 * 
pSrcB
,

1986 
q7_t
 * 
pD°
,

1987 
uöt32_t
 
blockSize
);

1998 
¨m_mu…_q15
(

1999 
q15_t
 * 
pSrcA
,

2000 
q15_t
 * 
pSrcB
,

2001 
q15_t
 * 
pD°
,

2002 
uöt32_t
 
blockSize
);

2013 
¨m_mu…_q31
(

2014 
q31_t
 * 
pSrcA
,

2015 
q31_t
 * 
pSrcB
,

2016 
q31_t
 * 
pD°
,

2017 
uöt32_t
 
blockSize
);

2028 
¨m_mu…_f32
(

2029 
Êﬂt32_t
 * 
pSrcA
,

2030 
Êﬂt32_t
 * 
pSrcB
,

2031 
Êﬂt32_t
 * 
pD°
,

2032 
uöt32_t
 
blockSize
);

2045 
uöt16_t
 
f·Lí
;

2046 
uöt8_t
 
if·Fœg
;

2047 
uöt8_t
 
bôRevî£Fœg
;

2048 
q15_t
 *
pTwiddÀ
;

2049 
uöt16_t
 *
pBôRevTabÀ
;

2050 
uöt16_t
 
twidC€fModifõr
;

2051 
uöt16_t
 
bôRevFa˘‹
;

2052 } 
	t¨m_cf·_ødix2_ö°™˚_q15
;

2055 
¨m_°©us
 
¨m_cf·_ødix2_öô_q15
(

2056 
¨m_cf·_ødix2_ö°™˚_q15
 * 
S
,

2057 
uöt16_t
 
f·Lí
,

2058 
uöt8_t
 
if·Fœg
,

2059 
uöt8_t
 
bôRevî£Fœg
);

2062 
¨m_cf·_ødix2_q15
(

2063 c⁄° 
¨m_cf·_ødix2_ö°™˚_q15
 * 
S
,

2064 
q15_t
 * 
pSrc
);

2074 
uöt16_t
 
f·Lí
;

2075 
uöt8_t
 
if·Fœg
;

2076 
uöt8_t
 
bôRevî£Fœg
;

2077 
q15_t
 *
pTwiddÀ
;

2078 
uöt16_t
 *
pBôRevTabÀ
;

2079 
uöt16_t
 
twidC€fModifõr
;

2080 
uöt16_t
 
bôRevFa˘‹
;

2081 } 
	t¨m_cf·_ødix4_ö°™˚_q15
;

2084 
¨m_°©us
 
¨m_cf·_ødix4_öô_q15
(

2085 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

2086 
uöt16_t
 
f·Lí
,

2087 
uöt8_t
 
if·Fœg
,

2088 
uöt8_t
 
bôRevî£Fœg
);

2091 
¨m_cf·_ødix4_q15
(

2092 c⁄° 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

2093 
q15_t
 * 
pSrc
);

2101 
uöt16_t
 
f·Lí
;

2102 
uöt8_t
 
if·Fœg
;

2103 
uöt8_t
 
bôRevî£Fœg
;

2104 
q31_t
 *
pTwiddÀ
;

2105 
uöt16_t
 *
pBôRevTabÀ
;

2106 
uöt16_t
 
twidC€fModifõr
;

2107 
uöt16_t
 
bôRevFa˘‹
;

2108 } 
	t¨m_cf·_ødix2_ö°™˚_q31
;

2111 
¨m_°©us
 
¨m_cf·_ødix2_öô_q31
(

2112 
¨m_cf·_ødix2_ö°™˚_q31
 * 
S
,

2113 
uöt16_t
 
f·Lí
,

2114 
uöt8_t
 
if·Fœg
,

2115 
uöt8_t
 
bôRevî£Fœg
);

2118 
¨m_cf·_ødix2_q31
(

2119 c⁄° 
¨m_cf·_ødix2_ö°™˚_q31
 * 
S
,

2120 
q31_t
 * 
pSrc
);

2128 
uöt16_t
 
f·Lí
;

2129 
uöt8_t
 
if·Fœg
;

2130 
uöt8_t
 
bôRevî£Fœg
;

2131 
q31_t
 *
pTwiddÀ
;

2132 
uöt16_t
 *
pBôRevTabÀ
;

2133 
uöt16_t
 
twidC€fModifõr
;

2134 
uöt16_t
 
bôRevFa˘‹
;

2135 } 
	t¨m_cf·_ødix4_ö°™˚_q31
;

2138 
¨m_cf·_ødix4_q31
(

2139 c⁄° 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

2140 
q31_t
 * 
pSrc
);

2143 
¨m_°©us
 
¨m_cf·_ødix4_öô_q31
(

2144 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

2145 
uöt16_t
 
f·Lí
,

2146 
uöt8_t
 
if·Fœg
,

2147 
uöt8_t
 
bôRevî£Fœg
);

2155 
uöt16_t
 
f·Lí
;

2156 
uöt8_t
 
if·Fœg
;

2157 
uöt8_t
 
bôRevî£Fœg
;

2158 
Êﬂt32_t
 *
pTwiddÀ
;

2159 
uöt16_t
 *
pBôRevTabÀ
;

2160 
uöt16_t
 
twidC€fModifõr
;

2161 
uöt16_t
 
bôRevFa˘‹
;

2162 
Êﬂt32_t
 
⁄ebyf·Lí
;

2163 } 
	t¨m_cf·_ødix2_ö°™˚_f32
;

2166 
¨m_°©us
 
¨m_cf·_ødix2_öô_f32
(

2167 
¨m_cf·_ødix2_ö°™˚_f32
 * 
S
,

2168 
uöt16_t
 
f·Lí
,

2169 
uöt8_t
 
if·Fœg
,

2170 
uöt8_t
 
bôRevî£Fœg
);

2173 
¨m_cf·_ødix2_f32
(

2174 c⁄° 
¨m_cf·_ødix2_ö°™˚_f32
 * 
S
,

2175 
Êﬂt32_t
 * 
pSrc
);

2183 
uöt16_t
 
f·Lí
;

2184 
uöt8_t
 
if·Fœg
;

2185 
uöt8_t
 
bôRevî£Fœg
;

2186 
Êﬂt32_t
 *
pTwiddÀ
;

2187 
uöt16_t
 *
pBôRevTabÀ
;

2188 
uöt16_t
 
twidC€fModifõr
;

2189 
uöt16_t
 
bôRevFa˘‹
;

2190 
Êﬂt32_t
 
⁄ebyf·Lí
;

2191 } 
	t¨m_cf·_ødix4_ö°™˚_f32
;

2194 
¨m_°©us
 
¨m_cf·_ødix4_öô_f32
(

2195 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

2196 
uöt16_t
 
f·Lí
,

2197 
uöt8_t
 
if·Fœg
,

2198 
uöt8_t
 
bôRevî£Fœg
);

2201 
¨m_cf·_ødix4_f32
(

2202 c⁄° 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

2203 
Êﬂt32_t
 * 
pSrc
);

2211 
uöt16_t
 
f·Lí
;

2212 c⁄° 
q15_t
 *
pTwiddÀ
;

2213 c⁄° 
uöt16_t
 *
pBôRevTabÀ
;

2214 
uöt16_t
 
bôRevLígth
;

2215 } 
	t¨m_cf·_ö°™˚_q15
;

2217 
¨m_cf·_q15
(

2218 c⁄° 
¨m_cf·_ö°™˚_q15
 * 
S
,

2219 
q15_t
 * 
p1
,

2220 
uöt8_t
 
if·Fœg
,

2221 
uöt8_t
 
bôRevî£Fœg
);

2229 
uöt16_t
 
f·Lí
;

2230 c⁄° 
q31_t
 *
pTwiddÀ
;

2231 c⁄° 
uöt16_t
 *
pBôRevTabÀ
;

2232 
uöt16_t
 
bôRevLígth
;

2233 } 
	t¨m_cf·_ö°™˚_q31
;

2235 
¨m_cf·_q31
(

2236 c⁄° 
¨m_cf·_ö°™˚_q31
 * 
S
,

2237 
q31_t
 * 
p1
,

2238 
uöt8_t
 
if·Fœg
,

2239 
uöt8_t
 
bôRevî£Fœg
);

2247 
uöt16_t
 
f·Lí
;

2248 c⁄° 
Êﬂt32_t
 *
pTwiddÀ
;

2249 c⁄° 
uöt16_t
 *
pBôRevTabÀ
;

2250 
uöt16_t
 
bôRevLígth
;

2251 } 
	t¨m_cf·_ö°™˚_f32
;

2253 
¨m_cf·_f32
(

2254 c⁄° 
¨m_cf·_ö°™˚_f32
 * 
S
,

2255 
Êﬂt32_t
 * 
p1
,

2256 
uöt8_t
 
if·Fœg
,

2257 
uöt8_t
 
bôRevî£Fœg
);

2265 
uöt32_t
 
f·LíRól
;

2266 
uöt8_t
 
if·FœgR
;

2267 
uöt8_t
 
bôRevî£FœgR
;

2268 
uöt32_t
 
twidC€fRModifõr
;

2269 
q15_t
 *
pTwiddÀARól
;

2270 
q15_t
 *
pTwiddÀBRól
;

2271 c⁄° 
¨m_cf·_ö°™˚_q15
 *
pCf·
;

2272 } 
	t¨m_rf·_ö°™˚_q15
;

2274 
¨m_°©us
 
¨m_rf·_öô_q15
(

2275 
¨m_rf·_ö°™˚_q15
 * 
S
,

2276 
uöt32_t
 
f·LíRól
,

2277 
uöt32_t
 
if·FœgR
,

2278 
uöt32_t
 
bôRevî£Fœg
);

2280 
¨m_rf·_q15
(

2281 c⁄° 
¨m_rf·_ö°™˚_q15
 * 
S
,

2282 
q15_t
 * 
pSrc
,

2283 
q15_t
 * 
pD°
);

2291 
uöt32_t
 
f·LíRól
;

2292 
uöt8_t
 
if·FœgR
;

2293 
uöt8_t
 
bôRevî£FœgR
;

2294 
uöt32_t
 
twidC€fRModifõr
;

2295 
q31_t
 *
pTwiddÀARól
;

2296 
q31_t
 *
pTwiddÀBRól
;

2297 c⁄° 
¨m_cf·_ö°™˚_q31
 *
pCf·
;

2298 } 
	t¨m_rf·_ö°™˚_q31
;

2300 
¨m_°©us
 
¨m_rf·_öô_q31
(

2301 
¨m_rf·_ö°™˚_q31
 * 
S
,

2302 
uöt32_t
 
f·LíRól
,

2303 
uöt32_t
 
if·FœgR
,

2304 
uöt32_t
 
bôRevî£Fœg
);

2306 
¨m_rf·_q31
(

2307 c⁄° 
¨m_rf·_ö°™˚_q31
 * 
S
,

2308 
q31_t
 * 
pSrc
,

2309 
q31_t
 * 
pD°
);

2317 
uöt32_t
 
f·LíRól
;

2318 
uöt16_t
 
f·LíBy2
;

2319 
uöt8_t
 
if·FœgR
;

2320 
uöt8_t
 
bôRevî£FœgR
;

2321 
uöt32_t
 
twidC€fRModifõr
;

2322 
Êﬂt32_t
 *
pTwiddÀARól
;

2323 
Êﬂt32_t
 *
pTwiddÀBRól
;

2324 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2325 } 
	t¨m_rf·_ö°™˚_f32
;

2327 
¨m_°©us
 
¨m_rf·_öô_f32
(

2328 
¨m_rf·_ö°™˚_f32
 * 
S
,

2329 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2330 
uöt32_t
 
f·LíRól
,

2331 
uöt32_t
 
if·FœgR
,

2332 
uöt32_t
 
bôRevî£Fœg
);

2334 
¨m_rf·_f32
(

2335 c⁄° 
¨m_rf·_ö°™˚_f32
 * 
S
,

2336 
Êﬂt32_t
 * 
pSrc
,

2337 
Êﬂt32_t
 * 
pD°
);

2345 
¨m_cf·_ö°™˚_f32
 
Söt
;

2346 
uöt16_t
 
f·LíRFFT
;

2347 
Êﬂt32_t
 * 
pTwiddÀRFFT
;

2348 } 
	t¨m_rf·_Á°_ö°™˚_f32
 ;

2350 
¨m_°©us
 
¨m_rf·_Á°_öô_f32
 (

2351 
¨m_rf·_Á°_ö°™˚_f32
 * 
S
,

2352 
uöt16_t
 
f·Lí
);

2354 
¨m_rf·_Á°_f32
(

2355 
¨m_rf·_Á°_ö°™˚_f32
 * 
S
,

2356 
Êﬂt32_t
 * 
p
, flﬂt32_à* 
pOut
,

2357 
uöt8_t
 
if·Fœg
);

2365 
uöt16_t
 
N
;

2366 
uöt16_t
 
Nby2
;

2367 
Êﬂt32_t
 
n‹mÆize
;

2368 
Êﬂt32_t
 *
pTwiddÀ
;

2369 
Êﬂt32_t
 *
pCosFa˘‹
;

2370 
¨m_rf·_ö°™˚_f32
 *
pRf·
;

2371 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2372 } 
	t¨m_d˘4_ö°™˚_f32
;

2385 
¨m_°©us
 
¨m_d˘4_öô_f32
(

2386 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2387 
¨m_rf·_ö°™˚_f32
 * 
S_RFFT
,

2388 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2389 
uöt16_t
 
N
,

2390 
uöt16_t
 
Nby2
,

2391 
Êﬂt32_t
 
n‹mÆize
);

2401 
¨m_d˘4_f32
(

2402 c⁄° 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2403 
Êﬂt32_t
 * 
pSèã
,

2404 
Êﬂt32_t
 * 
pI∆öeBuf„r
);

2412 
uöt16_t
 
N
;

2413 
uöt16_t
 
Nby2
;

2414 
q31_t
 
n‹mÆize
;

2415 
q31_t
 *
pTwiddÀ
;

2416 
q31_t
 *
pCosFa˘‹
;

2417 
¨m_rf·_ö°™˚_q31
 *
pRf·
;

2418 
¨m_cf·_ødix4_ö°™˚_q31
 *
pCf·
;

2419 } 
	t¨m_d˘4_ö°™˚_q31
;

2432 
¨m_°©us
 
¨m_d˘4_öô_q31
(

2433 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2434 
¨m_rf·_ö°™˚_q31
 * 
S_RFFT
,

2435 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

2436 
uöt16_t
 
N
,

2437 
uöt16_t
 
Nby2
,

2438 
q31_t
 
n‹mÆize
);

2448 
¨m_d˘4_q31
(

2449 c⁄° 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2450 
q31_t
 * 
pSèã
,

2451 
q31_t
 * 
pI∆öeBuf„r
);

2459 
uöt16_t
 
N
;

2460 
uöt16_t
 
Nby2
;

2461 
q15_t
 
n‹mÆize
;

2462 
q15_t
 *
pTwiddÀ
;

2463 
q15_t
 *
pCosFa˘‹
;

2464 
¨m_rf·_ö°™˚_q15
 *
pRf·
;

2465 
¨m_cf·_ødix4_ö°™˚_q15
 *
pCf·
;

2466 } 
	t¨m_d˘4_ö°™˚_q15
;

2479 
¨m_°©us
 
¨m_d˘4_öô_q15
(

2480 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2481 
¨m_rf·_ö°™˚_q15
 * 
S_RFFT
,

2482 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

2483 
uöt16_t
 
N
,

2484 
uöt16_t
 
Nby2
,

2485 
q15_t
 
n‹mÆize
);

2495 
¨m_d˘4_q15
(

2496 c⁄° 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2497 
q15_t
 * 
pSèã
,

2498 
q15_t
 * 
pI∆öeBuf„r
);

2509 
¨m_add_f32
(

2510 
Êﬂt32_t
 * 
pSrcA
,

2511 
Êﬂt32_t
 * 
pSrcB
,

2512 
Êﬂt32_t
 * 
pD°
,

2513 
uöt32_t
 
blockSize
);

2524 
¨m_add_q7
(

2525 
q7_t
 * 
pSrcA
,

2526 
q7_t
 * 
pSrcB
,

2527 
q7_t
 * 
pD°
,

2528 
uöt32_t
 
blockSize
);

2539 
¨m_add_q15
(

2540 
q15_t
 * 
pSrcA
,

2541 
q15_t
 * 
pSrcB
,

2542 
q15_t
 * 
pD°
,

2543 
uöt32_t
 
blockSize
);

2554 
¨m_add_q31
(

2555 
q31_t
 * 
pSrcA
,

2556 
q31_t
 * 
pSrcB
,

2557 
q31_t
 * 
pD°
,

2558 
uöt32_t
 
blockSize
);

2569 
¨m_sub_f32
(

2570 
Êﬂt32_t
 * 
pSrcA
,

2571 
Êﬂt32_t
 * 
pSrcB
,

2572 
Êﬂt32_t
 * 
pD°
,

2573 
uöt32_t
 
blockSize
);

2584 
¨m_sub_q7
(

2585 
q7_t
 * 
pSrcA
,

2586 
q7_t
 * 
pSrcB
,

2587 
q7_t
 * 
pD°
,

2588 
uöt32_t
 
blockSize
);

2599 
¨m_sub_q15
(

2600 
q15_t
 * 
pSrcA
,

2601 
q15_t
 * 
pSrcB
,

2602 
q15_t
 * 
pD°
,

2603 
uöt32_t
 
blockSize
);

2614 
¨m_sub_q31
(

2615 
q31_t
 * 
pSrcA
,

2616 
q31_t
 * 
pSrcB
,

2617 
q31_t
 * 
pD°
,

2618 
uöt32_t
 
blockSize
);

2629 
¨m_sˇÀ_f32
(

2630 
Êﬂt32_t
 * 
pSrc
,

2631 
Êﬂt32_t
 
sˇÀ
,

2632 
Êﬂt32_t
 * 
pD°
,

2633 
uöt32_t
 
blockSize
);

2645 
¨m_sˇÀ_q7
(

2646 
q7_t
 * 
pSrc
,

2647 
q7_t
 
sˇÀFø˘
,

2648 
öt8_t
 
shi·
,

2649 
q7_t
 * 
pD°
,

2650 
uöt32_t
 
blockSize
);

2662 
¨m_sˇÀ_q15
(

2663 
q15_t
 * 
pSrc
,

2664 
q15_t
 
sˇÀFø˘
,

2665 
öt8_t
 
shi·
,

2666 
q15_t
 * 
pD°
,

2667 
uöt32_t
 
blockSize
);

2679 
¨m_sˇÀ_q31
(

2680 
q31_t
 * 
pSrc
,

2681 
q31_t
 
sˇÀFø˘
,

2682 
öt8_t
 
shi·
,

2683 
q31_t
 * 
pD°
,

2684 
uöt32_t
 
blockSize
);

2694 
¨m_abs_q7
(

2695 
q7_t
 * 
pSrc
,

2696 
q7_t
 * 
pD°
,

2697 
uöt32_t
 
blockSize
);

2707 
¨m_abs_f32
(

2708 
Êﬂt32_t
 * 
pSrc
,

2709 
Êﬂt32_t
 * 
pD°
,

2710 
uöt32_t
 
blockSize
);

2720 
¨m_abs_q15
(

2721 
q15_t
 * 
pSrc
,

2722 
q15_t
 * 
pD°
,

2723 
uöt32_t
 
blockSize
);

2733 
¨m_abs_q31
(

2734 
q31_t
 * 
pSrc
,

2735 
q31_t
 * 
pD°
,

2736 
uöt32_t
 
blockSize
);

2747 
¨m_dŸ_¥od_f32
(

2748 
Êﬂt32_t
 * 
pSrcA
,

2749 
Êﬂt32_t
 * 
pSrcB
,

2750 
uöt32_t
 
blockSize
,

2751 
Êﬂt32_t
 * 
ªsu…
);

2762 
¨m_dŸ_¥od_q7
(

2763 
q7_t
 * 
pSrcA
,

2764 
q7_t
 * 
pSrcB
,

2765 
uöt32_t
 
blockSize
,

2766 
q31_t
 * 
ªsu…
);

2777 
¨m_dŸ_¥od_q15
(

2778 
q15_t
 * 
pSrcA
,

2779 
q15_t
 * 
pSrcB
,

2780 
uöt32_t
 
blockSize
,

2781 
q63_t
 * 
ªsu…
);

2792 
¨m_dŸ_¥od_q31
(

2793 
q31_t
 * 
pSrcA
,

2794 
q31_t
 * 
pSrcB
,

2795 
uöt32_t
 
blockSize
,

2796 
q63_t
 * 
ªsu…
);

2807 
¨m_shi·_q7
(

2808 
q7_t
 * 
pSrc
,

2809 
öt8_t
 
shi·Bôs
,

2810 
q7_t
 * 
pD°
,

2811 
uöt32_t
 
blockSize
);

2822 
¨m_shi·_q15
(

2823 
q15_t
 * 
pSrc
,

2824 
öt8_t
 
shi·Bôs
,

2825 
q15_t
 * 
pD°
,

2826 
uöt32_t
 
blockSize
);

2837 
¨m_shi·_q31
(

2838 
q31_t
 * 
pSrc
,

2839 
öt8_t
 
shi·Bôs
,

2840 
q31_t
 * 
pD°
,

2841 
uöt32_t
 
blockSize
);

2852 
¨m_off£t_f32
(

2853 
Êﬂt32_t
 * 
pSrc
,

2854 
Êﬂt32_t
 
off£t
,

2855 
Êﬂt32_t
 * 
pD°
,

2856 
uöt32_t
 
blockSize
);

2867 
¨m_off£t_q7
(

2868 
q7_t
 * 
pSrc
,

2869 
q7_t
 
off£t
,

2870 
q7_t
 * 
pD°
,

2871 
uöt32_t
 
blockSize
);

2882 
¨m_off£t_q15
(

2883 
q15_t
 * 
pSrc
,

2884 
q15_t
 
off£t
,

2885 
q15_t
 * 
pD°
,

2886 
uöt32_t
 
blockSize
);

2897 
¨m_off£t_q31
(

2898 
q31_t
 * 
pSrc
,

2899 
q31_t
 
off£t
,

2900 
q31_t
 * 
pD°
,

2901 
uöt32_t
 
blockSize
);

2911 
¨m_√g©e_f32
(

2912 
Êﬂt32_t
 * 
pSrc
,

2913 
Êﬂt32_t
 * 
pD°
,

2914 
uöt32_t
 
blockSize
);

2924 
¨m_√g©e_q7
(

2925 
q7_t
 * 
pSrc
,

2926 
q7_t
 * 
pD°
,

2927 
uöt32_t
 
blockSize
);

2937 
¨m_√g©e_q15
(

2938 
q15_t
 * 
pSrc
,

2939 
q15_t
 * 
pD°
,

2940 
uöt32_t
 
blockSize
);

2950 
¨m_√g©e_q31
(

2951 
q31_t
 * 
pSrc
,

2952 
q31_t
 * 
pD°
,

2953 
uöt32_t
 
blockSize
);

2961 
¨m_c›y_f32
(

2962 
Êﬂt32_t
 * 
pSrc
,

2963 
Êﬂt32_t
 * 
pD°
,

2964 
uöt32_t
 
blockSize
);

2973 
¨m_c›y_q7
(

2974 
q7_t
 * 
pSrc
,

2975 
q7_t
 * 
pD°
,

2976 
uöt32_t
 
blockSize
);

2985 
¨m_c›y_q15
(

2986 
q15_t
 * 
pSrc
,

2987 
q15_t
 * 
pD°
,

2988 
uöt32_t
 
blockSize
);

2997 
¨m_c›y_q31
(

2998 
q31_t
 * 
pSrc
,

2999 
q31_t
 * 
pD°
,

3000 
uöt32_t
 
blockSize
);

3008 
¨m_fûl_f32
(

3009 
Êﬂt32_t
 
vÆue
,

3010 
Êﬂt32_t
 * 
pD°
,

3011 
uöt32_t
 
blockSize
);

3020 
¨m_fûl_q7
(

3021 
q7_t
 
vÆue
,

3022 
q7_t
 * 
pD°
,

3023 
uöt32_t
 
blockSize
);

3032 
¨m_fûl_q15
(

3033 
q15_t
 
vÆue
,

3034 
q15_t
 * 
pD°
,

3035 
uöt32_t
 
blockSize
);

3044 
¨m_fûl_q31
(

3045 
q31_t
 
vÆue
,

3046 
q31_t
 * 
pD°
,

3047 
uöt32_t
 
blockSize
);

3059 
¨m_c⁄v_f32
(

3060 
Êﬂt32_t
 * 
pSrcA
,

3061 
uöt32_t
 
§cALí
,

3062 
Êﬂt32_t
 * 
pSrcB
,

3063 
uöt32_t
 
§cBLí
,

3064 
Êﬂt32_t
 * 
pD°
);

3080 
¨m_c⁄v_›t_q15
(

3081 
q15_t
 * 
pSrcA
,

3082 
uöt32_t
 
§cALí
,

3083 
q15_t
 * 
pSrcB
,

3084 
uöt32_t
 
§cBLí
,

3085 
q15_t
 * 
pD°
,

3086 
q15_t
 * 
pS¸©ch1
,

3087 
q15_t
 * 
pS¸©ch2
);

3100 
¨m_c⁄v_q15
(

3101 
q15_t
 * 
pSrcA
,

3102 
uöt32_t
 
§cALí
,

3103 
q15_t
 * 
pSrcB
,

3104 
uöt32_t
 
§cBLí
,

3105 
q15_t
 * 
pD°
);

3117 
¨m_c⁄v_Á°_q15
(

3118 
q15_t
 * 
pSrcA
,

3119 
uöt32_t
 
§cALí
,

3120 
q15_t
 * 
pSrcB
,

3121 
uöt32_t
 
§cBLí
,

3122 
q15_t
 * 
pD°
);

3136 
¨m_c⁄v_Á°_›t_q15
(

3137 
q15_t
 * 
pSrcA
,

3138 
uöt32_t
 
§cALí
,

3139 
q15_t
 * 
pSrcB
,

3140 
uöt32_t
 
§cBLí
,

3141 
q15_t
 * 
pD°
,

3142 
q15_t
 * 
pS¸©ch1
,

3143 
q15_t
 * 
pS¸©ch2
);

3157 
¨m_c⁄v_q31
(

3158 
q31_t
 * 
pSrcA
,

3159 
uöt32_t
 
§cALí
,

3160 
q31_t
 * 
pSrcB
,

3161 
uöt32_t
 
§cBLí
,

3162 
q31_t
 * 
pD°
);

3174 
¨m_c⁄v_Á°_q31
(

3175 
q31_t
 * 
pSrcA
,

3176 
uöt32_t
 
§cALí
,

3177 
q31_t
 * 
pSrcB
,

3178 
uöt32_t
 
§cBLí
,

3179 
q31_t
 * 
pD°
);

3194 
¨m_c⁄v_›t_q7
(

3195 
q7_t
 * 
pSrcA
,

3196 
uöt32_t
 
§cALí
,

3197 
q7_t
 * 
pSrcB
,

3198 
uöt32_t
 
§cBLí
,

3199 
q7_t
 * 
pD°
,

3200 
q15_t
 * 
pS¸©ch1
,

3201 
q15_t
 * 
pS¸©ch2
);

3215 
¨m_c⁄v_q7
(

3216 
q7_t
 * 
pSrcA
,

3217 
uöt32_t
 
§cALí
,

3218 
q7_t
 * 
pSrcB
,

3219 
uöt32_t
 
§cBLí
,

3220 
q7_t
 * 
pD°
);

3235 
¨m_°©us
 
¨m_c⁄v_∑πül_f32
(

3236 
Êﬂt32_t
 * 
pSrcA
,

3237 
uöt32_t
 
§cALí
,

3238 
Êﬂt32_t
 * 
pSrcB
,

3239 
uöt32_t
 
§cBLí
,

3240 
Êﬂt32_t
 * 
pD°
,

3241 
uöt32_t
 
fú°Index
,

3242 
uöt32_t
 
numPoöts
);

3258 
¨m_°©us
 
¨m_c⁄v_∑πül_›t_q15
(

3259 
q15_t
 * 
pSrcA
,

3260 
uöt32_t
 
§cALí
,

3261 
q15_t
 * 
pSrcB
,

3262 
uöt32_t
 
§cBLí
,

3263 
q15_t
 * 
pD°
,

3264 
uöt32_t
 
fú°Index
,

3265 
uöt32_t
 
numPoöts
,

3266 
q15_t
 * 
pS¸©ch1
,

3267 
q15_t
 * 
pS¸©ch2
);

3282 
¨m_°©us
 
¨m_c⁄v_∑πül_q15
(

3283 
q15_t
 * 
pSrcA
,

3284 
uöt32_t
 
§cALí
,

3285 
q15_t
 * 
pSrcB
,

3286 
uöt32_t
 
§cBLí
,

3287 
q15_t
 * 
pD°
,

3288 
uöt32_t
 
fú°Index
,

3289 
uöt32_t
 
numPoöts
);

3303 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q15
(

3304 
q15_t
 * 
pSrcA
,

3305 
uöt32_t
 
§cALí
,

3306 
q15_t
 * 
pSrcB
,

3307 
uöt32_t
 
§cBLí
,

3308 
q15_t
 * 
pD°
,

3309 
uöt32_t
 
fú°Index
,

3310 
uöt32_t
 
numPoöts
);

3327 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_›t_q15
(

3328 
q15_t
 * 
pSrcA
,

3329 
uöt32_t
 
§cALí
,

3330 
q15_t
 * 
pSrcB
,

3331 
uöt32_t
 
§cBLí
,

3332 
q15_t
 * 
pD°
,

3333 
uöt32_t
 
fú°Index
,

3334 
uöt32_t
 
numPoöts
,

3335 
q15_t
 * 
pS¸©ch1
,

3336 
q15_t
 * 
pS¸©ch2
);

3351 
¨m_°©us
 
¨m_c⁄v_∑πül_q31
(

3352 
q31_t
 * 
pSrcA
,

3353 
uöt32_t
 
§cALí
,

3354 
q31_t
 * 
pSrcB
,

3355 
uöt32_t
 
§cBLí
,

3356 
q31_t
 * 
pD°
,

3357 
uöt32_t
 
fú°Index
,

3358 
uöt32_t
 
numPoöts
);

3373 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q31
(

3374 
q31_t
 * 
pSrcA
,

3375 
uöt32_t
 
§cALí
,

3376 
q31_t
 * 
pSrcB
,

3377 
uöt32_t
 
§cBLí
,

3378 
q31_t
 * 
pD°
,

3379 
uöt32_t
 
fú°Index
,

3380 
uöt32_t
 
numPoöts
);

3397 
¨m_°©us
 
¨m_c⁄v_∑πül_›t_q7
(

3398 
q7_t
 * 
pSrcA
,

3399 
uöt32_t
 
§cALí
,

3400 
q7_t
 * 
pSrcB
,

3401 
uöt32_t
 
§cBLí
,

3402 
q7_t
 * 
pD°
,

3403 
uöt32_t
 
fú°Index
,

3404 
uöt32_t
 
numPoöts
,

3405 
q15_t
 * 
pS¸©ch1
,

3406 
q15_t
 * 
pS¸©ch2
);

3421 
¨m_°©us
 
¨m_c⁄v_∑πül_q7
(

3422 
q7_t
 * 
pSrcA
,

3423 
uöt32_t
 
§cALí
,

3424 
q7_t
 * 
pSrcB
,

3425 
uöt32_t
 
§cBLí
,

3426 
q7_t
 * 
pD°
,

3427 
uöt32_t
 
fú°Index
,

3428 
uöt32_t
 
numPoöts
);

3438 
uöt8_t
 
M
;

3439 
uöt16_t
 
numT≠s
;

3440 
q15_t
 *
pC€ffs
;

3441 
q15_t
 *
pSèã
;

3442 } 
	t¨m_fú_decim©e_ö°™˚_q15
;

3450 
uöt8_t
 
M
;

3451 
uöt16_t
 
numT≠s
;

3452 
q31_t
 *
pC€ffs
;

3453 
q31_t
 *
pSèã
;

3455 } 
	t¨m_fú_decim©e_ö°™˚_q31
;

3463 
uöt8_t
 
M
;

3464 
uöt16_t
 
numT≠s
;

3465 
Êﬂt32_t
 *
pC€ffs
;

3466 
Êﬂt32_t
 *
pSèã
;

3468 } 
	t¨m_fú_decim©e_ö°™˚_f32
;

3481 
¨m_fú_decim©e_f32
(

3482 c⁄° 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3483 
Êﬂt32_t
 * 
pSrc
,

3484 
Êﬂt32_t
 * 
pD°
,

3485 
uöt32_t
 
blockSize
);

3500 
¨m_°©us
 
¨m_fú_decim©e_öô_f32
(

3501 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3502 
uöt16_t
 
numT≠s
,

3503 
uöt8_t
 
M
,

3504 
Êﬂt32_t
 * 
pC€ffs
,

3505 
Êﬂt32_t
 * 
pSèã
,

3506 
uöt32_t
 
blockSize
);

3517 
¨m_fú_decim©e_q15
(

3518 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3519 
q15_t
 * 
pSrc
,

3520 
q15_t
 * 
pD°
,

3521 
uöt32_t
 
blockSize
);

3532 
¨m_fú_decim©e_Á°_q15
(

3533 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3534 
q15_t
 * 
pSrc
,

3535 
q15_t
 * 
pD°
,

3536 
uöt32_t
 
blockSize
);

3552 
¨m_°©us
 
¨m_fú_decim©e_öô_q15
(

3553 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3554 
uöt16_t
 
numT≠s
,

3555 
uöt8_t
 
M
,

3556 
q15_t
 * 
pC€ffs
,

3557 
q15_t
 * 
pSèã
,

3558 
uöt32_t
 
blockSize
);

3569 
¨m_fú_decim©e_q31
(

3570 c⁄° 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3571 
q31_t
 * 
pSrc
,

3572 
q31_t
 * 
pD°
,

3573 
uöt32_t
 
blockSize
);

3584 
¨m_fú_decim©e_Á°_q31
(

3585 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3586 
q31_t
 * 
pSrc
,

3587 
q31_t
 * 
pD°
,

3588 
uöt32_t
 
blockSize
);

3603 
¨m_°©us
 
¨m_fú_decim©e_öô_q31
(

3604 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3605 
uöt16_t
 
numT≠s
,

3606 
uöt8_t
 
M
,

3607 
q31_t
 * 
pC€ffs
,

3608 
q31_t
 * 
pSèã
,

3609 
uöt32_t
 
blockSize
);

3619 
uöt8_t
 
L
;

3620 
uöt16_t
 
pha£Lígth
;

3621 
q15_t
 *
pC€ffs
;

3622 
q15_t
 *
pSèã
;

3623 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q15
;

3631 
uöt8_t
 
L
;

3632 
uöt16_t
 
pha£Lígth
;

3633 
q31_t
 *
pC€ffs
;

3634 
q31_t
 *
pSèã
;

3635 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q31
;

3643 
uöt8_t
 
L
;

3644 
uöt16_t
 
pha£Lígth
;

3645 
Êﬂt32_t
 *
pC€ffs
;

3646 
Êﬂt32_t
 *
pSèã
;

3647 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_f32
;

3659 
¨m_fú_öãΩﬁ©e_q15
(

3660 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3661 
q15_t
 * 
pSrc
,

3662 
q15_t
 * 
pD°
,

3663 
uöt32_t
 
blockSize
);

3678 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q15
(

3679 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3680 
uöt8_t
 
L
,

3681 
uöt16_t
 
numT≠s
,

3682 
q15_t
 * 
pC€ffs
,

3683 
q15_t
 * 
pSèã
,

3684 
uöt32_t
 
blockSize
);

3695 
¨m_fú_öãΩﬁ©e_q31
(

3696 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3697 
q31_t
 * 
pSrc
,

3698 
q31_t
 * 
pD°
,

3699 
uöt32_t
 
blockSize
);

3713 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q31
(

3714 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3715 
uöt8_t
 
L
,

3716 
uöt16_t
 
numT≠s
,

3717 
q31_t
 * 
pC€ffs
,

3718 
q31_t
 * 
pSèã
,

3719 
uöt32_t
 
blockSize
);

3731 
¨m_fú_öãΩﬁ©e_f32
(

3732 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3733 
Êﬂt32_t
 * 
pSrc
,

3734 
Êﬂt32_t
 * 
pD°
,

3735 
uöt32_t
 
blockSize
);

3749 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_f32
(

3750 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3751 
uöt8_t
 
L
,

3752 
uöt16_t
 
numT≠s
,

3753 
Êﬂt32_t
 * 
pC€ffs
,

3754 
Êﬂt32_t
 * 
pSèã
,

3755 
uöt32_t
 
blockSize
);

3763 
uöt8_t
 
numSèges
;

3764 
q63_t
 *
pSèã
;

3765 
q31_t
 *
pC€ffs
;

3766 
uöt8_t
 
po°Shi·
;

3768 } 
	t¨m_biquad_ˇs_df1_32x64_ös_q31
;

3779 
¨m_biquad_ˇs_df1_32x64_q31
(

3780 c⁄° 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3781 
q31_t
 * 
pSrc
,

3782 
q31_t
 * 
pD°
,

3783 
uöt32_t
 
blockSize
);

3795 
¨m_biquad_ˇs_df1_32x64_öô_q31
(

3796 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3797 
uöt8_t
 
numSèges
,

3798 
q31_t
 * 
pC€ffs
,

3799 
q63_t
 * 
pSèã
,

3800 
uöt8_t
 
po°Shi·
);

3810 
uöt8_t
 
numSèges
;

3811 
Êﬂt32_t
 *
pSèã
;

3812 
Êﬂt32_t
 *
pC€ffs
;

3813 } 
	t¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
;

3823 
uöt8_t
 
numSèges
;

3824 
Êﬂt32_t
 *
pSèã
;

3825 
Êﬂt32_t
 *
pC€ffs
;

3826 } 
	t¨m_biquad_ˇsˇde_°îeo_df2T_ö°™˚_f32
;

3836 
uöt8_t
 
numSèges
;

3837 
Êﬂt64_t
 *
pSèã
;

3838 
Êﬂt64_t
 *
pC€ffs
;

3839 } 
	t¨m_biquad_ˇsˇde_df2T_ö°™˚_f64
;

3851 
¨m_biquad_ˇsˇde_df2T_f32
(

3852 c⁄° 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3853 
Êﬂt32_t
 * 
pSrc
,

3854 
Êﬂt32_t
 * 
pD°
,

3855 
uöt32_t
 
blockSize
);

3867 
¨m_biquad_ˇsˇde_°îeo_df2T_f32
(

3868 c⁄° 
¨m_biquad_ˇsˇde_°îeo_df2T_ö°™˚_f32
 * 
S
,

3869 
Êﬂt32_t
 * 
pSrc
,

3870 
Êﬂt32_t
 * 
pD°
,

3871 
uöt32_t
 
blockSize
);

3882 
¨m_biquad_ˇsˇde_df2T_f64
(

3883 c⁄° 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f64
 * 
S
,

3884 
Êﬂt64_t
 * 
pSrc
,

3885 
Êﬂt64_t
 * 
pD°
,

3886 
uöt32_t
 
blockSize
);

3898 
¨m_biquad_ˇsˇde_df2T_öô_f32
(

3899 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3900 
uöt8_t
 
numSèges
,

3901 
Êﬂt32_t
 * 
pC€ffs
,

3902 
Êﬂt32_t
 * 
pSèã
);

3914 
¨m_biquad_ˇsˇde_°îeo_df2T_öô_f32
(

3915 
¨m_biquad_ˇsˇde_°îeo_df2T_ö°™˚_f32
 * 
S
,

3916 
uöt8_t
 
numSèges
,

3917 
Êﬂt32_t
 * 
pC€ffs
,

3918 
Êﬂt32_t
 * 
pSèã
);

3930 
¨m_biquad_ˇsˇde_df2T_öô_f64
(

3931 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f64
 * 
S
,

3932 
uöt8_t
 
numSèges
,

3933 
Êﬂt64_t
 * 
pC€ffs
,

3934 
Êﬂt64_t
 * 
pSèã
);

3944 
uöt16_t
 
numSèges
;

3945 
q15_t
 *
pSèã
;

3946 
q15_t
 *
pC€ffs
;

3947 } 
	t¨m_fú_œâi˚_ö°™˚_q15
;

3955 
uöt16_t
 
numSèges
;

3956 
q31_t
 *
pSèã
;

3957 
q31_t
 *
pC€ffs
;

3958 } 
	t¨m_fú_œâi˚_ö°™˚_q31
;

3966 
uöt16_t
 
numSèges
;

3967 
Êﬂt32_t
 *
pSèã
;

3968 
Êﬂt32_t
 *
pC€ffs
;

3969 } 
	t¨m_fú_œâi˚_ö°™˚_f32
;

3980 
¨m_fú_œâi˚_öô_q15
(

3981 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3982 
uöt16_t
 
numSèges
,

3983 
q15_t
 * 
pC€ffs
,

3984 
q15_t
 * 
pSèã
);

3995 
¨m_fú_œâi˚_q15
(

3996 c⁄° 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3997 
q15_t
 * 
pSrc
,

3998 
q15_t
 * 
pD°
,

3999 
uöt32_t
 
blockSize
);

4010 
¨m_fú_œâi˚_öô_q31
(

4011 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

4012 
uöt16_t
 
numSèges
,

4013 
q31_t
 * 
pC€ffs
,

4014 
q31_t
 * 
pSèã
);

4026 
¨m_fú_œâi˚_q31
(

4027 c⁄° 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

4028 
q31_t
 * 
pSrc
,

4029 
q31_t
 * 
pD°
,

4030 
uöt32_t
 
blockSize
);

4041 
¨m_fú_œâi˚_öô_f32
(

4042 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

4043 
uöt16_t
 
numSèges
,

4044 
Êﬂt32_t
 * 
pC€ffs
,

4045 
Êﬂt32_t
 * 
pSèã
);

4056 
¨m_fú_œâi˚_f32
(

4057 c⁄° 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

4058 
Êﬂt32_t
 * 
pSrc
,

4059 
Êﬂt32_t
 * 
pD°
,

4060 
uöt32_t
 
blockSize
);

4067 
uöt16_t
 
numSèges
;

4068 
q15_t
 *
pSèã
;

4069 
q15_t
 *
pkC€ffs
;

4070 
q15_t
 *
pvC€ffs
;

4071 } 
	t¨m_iú_œâi˚_ö°™˚_q15
;

4078 
uöt16_t
 
numSèges
;

4079 
q31_t
 *
pSèã
;

4080 
q31_t
 *
pkC€ffs
;

4081 
q31_t
 *
pvC€ffs
;

4082 } 
	t¨m_iú_œâi˚_ö°™˚_q31
;

4089 
uöt16_t
 
numSèges
;

4090 
Êﬂt32_t
 *
pSèã
;

4091 
Êﬂt32_t
 *
pkC€ffs
;

4092 
Êﬂt32_t
 *
pvC€ffs
;

4093 } 
	t¨m_iú_œâi˚_ö°™˚_f32
;

4104 
¨m_iú_œâi˚_f32
(

4105 c⁄° 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

4106 
Êﬂt32_t
 * 
pSrc
,

4107 
Êﬂt32_t
 * 
pD°
,

4108 
uöt32_t
 
blockSize
);

4121 
¨m_iú_œâi˚_öô_f32
(

4122 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

4123 
uöt16_t
 
numSèges
,

4124 
Êﬂt32_t
 * 
pkC€ffs
,

4125 
Êﬂt32_t
 * 
pvC€ffs
,

4126 
Êﬂt32_t
 * 
pSèã
,

4127 
uöt32_t
 
blockSize
);

4139 
¨m_iú_œâi˚_q31
(

4140 c⁄° 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

4141 
q31_t
 * 
pSrc
,

4142 
q31_t
 * 
pD°
,

4143 
uöt32_t
 
blockSize
);

4157 
¨m_iú_œâi˚_öô_q31
(

4158 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

4159 
uöt16_t
 
numSèges
,

4160 
q31_t
 * 
pkC€ffs
,

4161 
q31_t
 * 
pvC€ffs
,

4162 
q31_t
 * 
pSèã
,

4163 
uöt32_t
 
blockSize
);

4175 
¨m_iú_œâi˚_q15
(

4176 c⁄° 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

4177 
q15_t
 * 
pSrc
,

4178 
q15_t
 * 
pD°
,

4179 
uöt32_t
 
blockSize
);

4193 
¨m_iú_œâi˚_öô_q15
(

4194 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

4195 
uöt16_t
 
numSèges
,

4196 
q15_t
 * 
pkC€ffs
,

4197 
q15_t
 * 
pvC€ffs
,

4198 
q15_t
 * 
pSèã
,

4199 
uöt32_t
 
blockSize
);

4207 
uöt16_t
 
numT≠s
;

4208 
Êﬂt32_t
 *
pSèã
;

4209 
Êﬂt32_t
 *
pC€ffs
;

4210 
Êﬂt32_t
 
mu
;

4211 } 
	t¨m_lms_ö°™˚_f32
;

4224 
¨m_lms_f32
(

4225 c⁄° 
¨m_lms_ö°™˚_f32
 * 
S
,

4226 
Êﬂt32_t
 * 
pSrc
,

4227 
Êﬂt32_t
 * 
pRef
,

4228 
Êﬂt32_t
 * 
pOut
,

4229 
Êﬂt32_t
 * 
pEº
,

4230 
uöt32_t
 
blockSize
);

4243 
¨m_lms_öô_f32
(

4244 
¨m_lms_ö°™˚_f32
 * 
S
,

4245 
uöt16_t
 
numT≠s
,

4246 
Êﬂt32_t
 * 
pC€ffs
,

4247 
Êﬂt32_t
 * 
pSèã
,

4248 
Êﬂt32_t
 
mu
,

4249 
uöt32_t
 
blockSize
);

4257 
uöt16_t
 
numT≠s
;

4258 
q15_t
 *
pSèã
;

4259 
q15_t
 *
pC€ffs
;

4260 
q15_t
 
mu
;

4261 
uöt32_t
 
po°Shi·
;

4262 } 
	t¨m_lms_ö°™˚_q15
;

4277 
¨m_lms_öô_q15
(

4278 
¨m_lms_ö°™˚_q15
 * 
S
,

4279 
uöt16_t
 
numT≠s
,

4280 
q15_t
 * 
pC€ffs
,

4281 
q15_t
 * 
pSèã
,

4282 
q15_t
 
mu
,

4283 
uöt32_t
 
blockSize
,

4284 
uöt32_t
 
po°Shi·
);

4297 
¨m_lms_q15
(

4298 c⁄° 
¨m_lms_ö°™˚_q15
 * 
S
,

4299 
q15_t
 * 
pSrc
,

4300 
q15_t
 * 
pRef
,

4301 
q15_t
 * 
pOut
,

4302 
q15_t
 * 
pEº
,

4303 
uöt32_t
 
blockSize
);

4312 
uöt16_t
 
numT≠s
;

4313 
q31_t
 *
pSèã
;

4314 
q31_t
 *
pC€ffs
;

4315 
q31_t
 
mu
;

4316 
uöt32_t
 
po°Shi·
;

4318 } 
	t¨m_lms_ö°™˚_q31
;

4331 
¨m_lms_q31
(

4332 c⁄° 
¨m_lms_ö°™˚_q31
 * 
S
,

4333 
q31_t
 * 
pSrc
,

4334 
q31_t
 * 
pRef
,

4335 
q31_t
 * 
pOut
,

4336 
q31_t
 * 
pEº
,

4337 
uöt32_t
 
blockSize
);

4351 
¨m_lms_öô_q31
(

4352 
¨m_lms_ö°™˚_q31
 * 
S
,

4353 
uöt16_t
 
numT≠s
,

4354 
q31_t
 * 
pC€ffs
,

4355 
q31_t
 * 
pSèã
,

4356 
q31_t
 
mu
,

4357 
uöt32_t
 
blockSize
,

4358 
uöt32_t
 
po°Shi·
);

4366 
uöt16_t
 
numT≠s
;

4367 
Êﬂt32_t
 *
pSèã
;

4368 
Êﬂt32_t
 *
pC€ffs
;

4369 
Êﬂt32_t
 
mu
;

4370 
Êﬂt32_t
 
íîgy
;

4371 
Êﬂt32_t
 
x0
;

4372 } 
	t¨m_lms_n‹m_ö°™˚_f32
;

4385 
¨m_lms_n‹m_f32
(

4386 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4387 
Êﬂt32_t
 * 
pSrc
,

4388 
Êﬂt32_t
 * 
pRef
,

4389 
Êﬂt32_t
 * 
pOut
,

4390 
Êﬂt32_t
 * 
pEº
,

4391 
uöt32_t
 
blockSize
);

4404 
¨m_lms_n‹m_öô_f32
(

4405 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4406 
uöt16_t
 
numT≠s
,

4407 
Êﬂt32_t
 * 
pC€ffs
,

4408 
Êﬂt32_t
 * 
pSèã
,

4409 
Êﬂt32_t
 
mu
,

4410 
uöt32_t
 
blockSize
);

4418 
uöt16_t
 
numT≠s
;

4419 
q31_t
 *
pSèã
;

4420 
q31_t
 *
pC€ffs
;

4421 
q31_t
 
mu
;

4422 
uöt8_t
 
po°Shi·
;

4423 
q31_t
 *
ªcùTabÀ
;

4424 
q31_t
 
íîgy
;

4425 
q31_t
 
x0
;

4426 } 
	t¨m_lms_n‹m_ö°™˚_q31
;

4439 
¨m_lms_n‹m_q31
(

4440 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4441 
q31_t
 * 
pSrc
,

4442 
q31_t
 * 
pRef
,

4443 
q31_t
 * 
pOut
,

4444 
q31_t
 * 
pEº
,

4445 
uöt32_t
 
blockSize
);

4459 
¨m_lms_n‹m_öô_q31
(

4460 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4461 
uöt16_t
 
numT≠s
,

4462 
q31_t
 * 
pC€ffs
,

4463 
q31_t
 * 
pSèã
,

4464 
q31_t
 
mu
,

4465 
uöt32_t
 
blockSize
,

4466 
uöt8_t
 
po°Shi·
);

4474 
uöt16_t
 
numT≠s
;

4475 
q15_t
 *
pSèã
;

4476 
q15_t
 *
pC€ffs
;

4477 
q15_t
 
mu
;

4478 
uöt8_t
 
po°Shi·
;

4479 
q15_t
 *
ªcùTabÀ
;

4480 
q15_t
 
íîgy
;

4481 
q15_t
 
x0
;

4482 } 
	t¨m_lms_n‹m_ö°™˚_q15
;

4495 
¨m_lms_n‹m_q15
(

4496 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4497 
q15_t
 * 
pSrc
,

4498 
q15_t
 * 
pRef
,

4499 
q15_t
 * 
pOut
,

4500 
q15_t
 * 
pEº
,

4501 
uöt32_t
 
blockSize
);

4516 
¨m_lms_n‹m_öô_q15
(

4517 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4518 
uöt16_t
 
numT≠s
,

4519 
q15_t
 * 
pC€ffs
,

4520 
q15_t
 * 
pSèã
,

4521 
q15_t
 
mu
,

4522 
uöt32_t
 
blockSize
,

4523 
uöt8_t
 
po°Shi·
);

4535 
¨m_c‹ªœã_f32
(

4536 
Êﬂt32_t
 * 
pSrcA
,

4537 
uöt32_t
 
§cALí
,

4538 
Êﬂt32_t
 * 
pSrcB
,

4539 
uöt32_t
 
§cBLí
,

4540 
Êﬂt32_t
 * 
pD°
);

4553 
¨m_c‹ªœã_›t_q15
(

4554 
q15_t
 * 
pSrcA
,

4555 
uöt32_t
 
§cALí
,

4556 
q15_t
 * 
pSrcB
,

4557 
uöt32_t
 
§cBLí
,

4558 
q15_t
 * 
pD°
,

4559 
q15_t
 * 
pS¸©ch
);

4572 
¨m_c‹ªœã_q15
(

4573 
q15_t
 * 
pSrcA
,

4574 
uöt32_t
 
§cALí
,

4575 
q15_t
 * 
pSrcB
,

4576 
uöt32_t
 
§cBLí
,

4577 
q15_t
 * 
pD°
);

4589 
¨m_c‹ªœã_Á°_q15
(

4590 
q15_t
 * 
pSrcA
,

4591 
uöt32_t
 
§cALí
,

4592 
q15_t
 * 
pSrcB
,

4593 
uöt32_t
 
§cBLí
,

4594 
q15_t
 * 
pD°
);

4609 
¨m_c‹ªœã_Á°_›t_q15
(

4610 
q15_t
 * 
pSrcA
,

4611 
uöt32_t
 
§cALí
,

4612 
q15_t
 * 
pSrcB
,

4613 
uöt32_t
 
§cBLí
,

4614 
q15_t
 * 
pD°
,

4615 
q15_t
 * 
pS¸©ch
);

4627 
¨m_c‹ªœã_q31
(

4628 
q31_t
 * 
pSrcA
,

4629 
uöt32_t
 
§cALí
,

4630 
q31_t
 * 
pSrcB
,

4631 
uöt32_t
 
§cBLí
,

4632 
q31_t
 * 
pD°
);

4644 
¨m_c‹ªœã_Á°_q31
(

4645 
q31_t
 * 
pSrcA
,

4646 
uöt32_t
 
§cALí
,

4647 
q31_t
 * 
pSrcB
,

4648 
uöt32_t
 
§cBLí
,

4649 
q31_t
 * 
pD°
);

4665 
¨m_c‹ªœã_›t_q7
(

4666 
q7_t
 * 
pSrcA
,

4667 
uöt32_t
 
§cALí
,

4668 
q7_t
 * 
pSrcB
,

4669 
uöt32_t
 
§cBLí
,

4670 
q7_t
 * 
pD°
,

4671 
q15_t
 * 
pS¸©ch1
,

4672 
q15_t
 * 
pS¸©ch2
);

4685 
¨m_c‹ªœã_q7
(

4686 
q7_t
 * 
pSrcA
,

4687 
uöt32_t
 
§cALí
,

4688 
q7_t
 * 
pSrcB
,

4689 
uöt32_t
 
§cBLí
,

4690 
q7_t
 * 
pD°
);

4698 
uöt16_t
 
numT≠s
;

4699 
uöt16_t
 
°©eIndex
;

4700 
Êﬂt32_t
 *
pSèã
;

4701 
Êﬂt32_t
 *
pC€ffs
;

4702 
uöt16_t
 
maxDñay
;

4703 
öt32_t
 *
pT≠Dñay
;

4704 } 
	t¨m_fú_•¨£_ö°™˚_f32
;

4712 
uöt16_t
 
numT≠s
;

4713 
uöt16_t
 
°©eIndex
;

4714 
q31_t
 *
pSèã
;

4715 
q31_t
 *
pC€ffs
;

4716 
uöt16_t
 
maxDñay
;

4717 
öt32_t
 *
pT≠Dñay
;

4718 } 
	t¨m_fú_•¨£_ö°™˚_q31
;

4726 
uöt16_t
 
numT≠s
;

4727 
uöt16_t
 
°©eIndex
;

4728 
q15_t
 *
pSèã
;

4729 
q15_t
 *
pC€ffs
;

4730 
uöt16_t
 
maxDñay
;

4731 
öt32_t
 *
pT≠Dñay
;

4732 } 
	t¨m_fú_•¨£_ö°™˚_q15
;

4740 
uöt16_t
 
numT≠s
;

4741 
uöt16_t
 
°©eIndex
;

4742 
q7_t
 *
pSèã
;

4743 
q7_t
 *
pC€ffs
;

4744 
uöt16_t
 
maxDñay
;

4745 
öt32_t
 *
pT≠Dñay
;

4746 } 
	t¨m_fú_•¨£_ö°™˚_q7
;

4758 
¨m_fú_•¨£_f32
(

4759 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4760 
Êﬂt32_t
 * 
pSrc
,

4761 
Êﬂt32_t
 * 
pD°
,

4762 
Êﬂt32_t
 * 
pS¸©chIn
,

4763 
uöt32_t
 
blockSize
);

4777 
¨m_fú_•¨£_öô_f32
(

4778 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4779 
uöt16_t
 
numT≠s
,

4780 
Êﬂt32_t
 * 
pC€ffs
,

4781 
Êﬂt32_t
 * 
pSèã
,

4782 
öt32_t
 * 
pT≠Dñay
,

4783 
uöt16_t
 
maxDñay
,

4784 
uöt32_t
 
blockSize
);

4796 
¨m_fú_•¨£_q31
(

4797 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4798 
q31_t
 * 
pSrc
,

4799 
q31_t
 * 
pD°
,

4800 
q31_t
 * 
pS¸©chIn
,

4801 
uöt32_t
 
blockSize
);

4815 
¨m_fú_•¨£_öô_q31
(

4816 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4817 
uöt16_t
 
numT≠s
,

4818 
q31_t
 * 
pC€ffs
,

4819 
q31_t
 * 
pSèã
,

4820 
öt32_t
 * 
pT≠Dñay
,

4821 
uöt16_t
 
maxDñay
,

4822 
uöt32_t
 
blockSize
);

4835 
¨m_fú_•¨£_q15
(

4836 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4837 
q15_t
 * 
pSrc
,

4838 
q15_t
 * 
pD°
,

4839 
q15_t
 * 
pS¸©chIn
,

4840 
q31_t
 * 
pS¸©chOut
,

4841 
uöt32_t
 
blockSize
);

4856 
¨m_fú_•¨£_öô_q15
(

4857 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4858 
uöt16_t
 
numT≠s
,

4859 
q15_t
 * 
pC€ffs
,

4860 
q15_t
 * 
pSèã
,

4861 
öt32_t
 * 
pT≠Dñay
,

4862 
uöt16_t
 
maxDñay
,

4863 
uöt32_t
 
blockSize
);

4876 
¨m_fú_•¨£_q7
(

4877 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4878 
q7_t
 * 
pSrc
,

4879 
q7_t
 * 
pD°
,

4880 
q7_t
 * 
pS¸©chIn
,

4881 
q31_t
 * 
pS¸©chOut
,

4882 
uöt32_t
 
blockSize
);

4896 
¨m_fú_•¨£_öô_q7
(

4897 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4898 
uöt16_t
 
numT≠s
,

4899 
q7_t
 * 
pC€ffs
,

4900 
q7_t
 * 
pSèã
,

4901 
öt32_t
 * 
pT≠Dñay
,

4902 
uöt16_t
 
maxDñay
,

4903 
uöt32_t
 
blockSize
);

4914 
¨m_sö_cos_f32
(

4915 
Êﬂt32_t
 
thëa
,

4916 
Êﬂt32_t
 * 
pSöVÆ
,

4917 
Êﬂt32_t
 * 
pCcosVÆ
);

4927 
¨m_sö_cos_q31
(

4928 
q31_t
 
thëa
,

4929 
q31_t
 * 
pSöVÆ
,

4930 
q31_t
 * 
pCosVÆ
);

4941 
¨m_cm∂x_c⁄j_f32
(

4942 
Êﬂt32_t
 * 
pSrc
,

4943 
Êﬂt32_t
 * 
pD°
,

4944 
uöt32_t
 
numSam∂es
);

4954 
¨m_cm∂x_c⁄j_q31
(

4955 
q31_t
 * 
pSrc
,

4956 
q31_t
 * 
pD°
,

4957 
uöt32_t
 
numSam∂es
);

4967 
¨m_cm∂x_c⁄j_q15
(

4968 
q15_t
 * 
pSrc
,

4969 
q15_t
 * 
pD°
,

4970 
uöt32_t
 
numSam∂es
);

4982 
¨m_cm∂x_mag_squ¨ed_f32
(

4983 
Êﬂt32_t
 * 
pSrc
,

4984 
Êﬂt32_t
 * 
pD°
,

4985 
uöt32_t
 
numSam∂es
);

4995 
¨m_cm∂x_mag_squ¨ed_q31
(

4996 
q31_t
 * 
pSrc
,

4997 
q31_t
 * 
pD°
,

4998 
uöt32_t
 
numSam∂es
);

5008 
¨m_cm∂x_mag_squ¨ed_q15
(

5009 
q15_t
 * 
pSrc
,

5010 
q15_t
 * 
pD°
,

5011 
uöt32_t
 
numSam∂es
);

5088 
__INLINE
 
Êﬂt32_t
 
¨m_pid_f32
(

5089 
¨m_pid_ö°™˚_f32
 * 
S
,

5090 
Êﬂt32_t
 
ö
)

5092 
Êﬂt32_t
 
out
;

5095 
out
 = (
S
->
A0
 * 
ö
) +

5096 (
S
->
A1
 * S->
°©e
[0]Ë+ (S->
A2
 * S->state[1]) + (S->state[2]);

5099 
S
->
°©e
[1] = S->state[0];

5100 
S
->
°©e
[0] = 
ö
;

5101 
S
->
°©e
[2] = 
out
;

5104  (
out
);

5123 
__INLINE
 
q31_t
 
¨m_pid_q31
(

5124 
¨m_pid_ö°™˚_q31
 * 
S
,

5125 
q31_t
 
ö
)

5127 
q63_t
 
acc
;

5128 
q31_t
 
out
;

5131 
acc
 = (
q63_t
Ë
S
->
A0
 * 
ö
;

5134 
acc
 +(
q63_t
Ë
S
->
A1
 * S->
°©e
[0];

5137 
acc
 +(
q63_t
Ë
S
->
A2
 * S->
°©e
[1];

5140 
out
 = (
q31_t
Ë(
acc
 >> 31u);

5143 
out
 +
S
->
°©e
[2];

5146 
S
->
°©e
[1] = S->state[0];

5147 
S
->
°©e
[0] = 
ö
;

5148 
S
->
°©e
[2] = 
out
;

5151  (
out
);

5171 
__INLINE
 
q15_t
 
¨m_pid_q15
(

5172 
¨m_pid_ö°™˚_q15
 * 
S
,

5173 
q15_t
 
ö
)

5175 
q63_t
 
acc
;

5176 
q15_t
 
out
;

5178 #i‚de‡
ARM_MATH_CM0_FAMILY


5179 
__SIMD32_TYPE
 *
v°©e
;

5184 
acc
 = (
q31_t
Ë
__SMUAD
(
S
->
A0
, 
ö
);

5187 
v°©e
 = 
__SIMD32_CONST
(
S
->
°©e
);

5188 
acc
 = 
__SMLALD
(
S
->
A1
, (
q31_t
Ë*
v°©e
,ácc);

5192 
acc
 = ((
q31_t
Ë
S
->
A0
Ë* 
ö
;

5195 
acc
 +(
q31_t
Ë
S
->
A1
 * S->
°©e
[0];

5196 
acc
 +(
q31_t
Ë
S
->
A2
 * S->
°©e
[1];

5201 
acc
 +(
q31_t
Ë
S
->
°©e
[2] << 15;

5204 
out
 = (
q15_t
Ë(
__SSAT
((
acc
 >> 15), 16));

5207 
S
->
°©e
[1] = S->state[0];

5208 
S
->
°©e
[0] = 
ö
;

5209 
S
->
°©e
[2] = 
out
;

5212  (
out
);

5229 
¨m_°©us
 
¨m_m©_övî£_f32
(

5230 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
§c
,

5231 
¨m_m©rix_ö°™˚_f32
 * 
d°
);

5242 
¨m_°©us
 
¨m_m©_övî£_f64
(

5243 c⁄° 
¨m_m©rix_ö°™˚_f64
 * 
§c
,

5244 
¨m_m©rix_ö°™˚_f64
 * 
d°
);

5290 
__INLINE
 
¨m_˛¨ke_f32
(

5291 
Êﬂt32_t
 
Ia
,

5292 
Êﬂt32_t
 
Ib
,

5293 
Êﬂt32_t
 * 
pIÆpha
,

5294 
Êﬂt32_t
 * 
pIbëa
)

5297 *
pIÆpha
 = 
Ia
;

5300 *
pIbëa
 =

5301 ((
Êﬂt32_t
Ë0.57735026919 * 
Ia
 + (Êﬂt32_tË1.15470053838 * 
Ib
);

5320 
__INLINE
 
¨m_˛¨ke_q31
(

5321 
q31_t
 
Ia
,

5322 
q31_t
 
Ib
,

5323 
q31_t
 * 
pIÆpha
,

5324 
q31_t
 * 
pIbëa
)

5326 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5329 *
pIÆpha
 = 
Ia
;

5332 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë
Ia
 * 0x24F34E8B) >> 30);

5335 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë
Ib
 * 0x49E69D16) >> 30);

5338 *
pIbëa
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

5352 
¨m_q7_to_q31
(

5353 
q7_t
 * 
pSrc
,

5354 
q31_t
 * 
pD°
,

5355 
uöt32_t
 
blockSize
);

5395 
__INLINE
 
¨m_öv_˛¨ke_f32
(

5396 
Êﬂt32_t
 
IÆpha
,

5397 
Êﬂt32_t
 
Ibëa
,

5398 
Êﬂt32_t
 * 
pIa
,

5399 
Êﬂt32_t
 * 
pIb
)

5402 *
pIa
 = 
IÆpha
;

5405 *
pIb
 = -0.5 * 
IÆpha
 + (
Êﬂt32_t
Ë0.8660254039 *
Ibëa
;

5424 
__INLINE
 
¨m_öv_˛¨ke_q31
(

5425 
q31_t
 
IÆpha
,

5426 
q31_t
 
Ibëa
,

5427 
q31_t
 * 
pIa
,

5428 
q31_t
 * 
pIb
)

5430 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5433 *
pIa
 = 
IÆpha
;

5436 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
) * (0x40000000)) >> 31);

5439 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
) * (0x6ED9EBA1)) >> 31);

5442 *
pIb
 = 
__QSUB
(
¥odu˘2
, 
¥odu˘1
);

5457 
¨m_q7_to_q15
(

5458 
q7_t
 * 
pSrc
,

5459 
q15_t
 * 
pD°
,

5460 
uöt32_t
 
blockSize
);

5511 
__INLINE
 
¨m_∑rk_f32
(

5512 
Êﬂt32_t
 
IÆpha
,

5513 
Êﬂt32_t
 
Ibëa
,

5514 
Êﬂt32_t
 * 
pId
,

5515 
Êﬂt32_t
 * 
pIq
,

5516 
Êﬂt32_t
 
söVÆ
,

5517 
Êﬂt32_t
 
cosVÆ
)

5520 *
pId
 = 
IÆpha
 * 
cosVÆ
 + 
Ibëa
 * 
söVÆ
;

5523 *
pIq
 = -
IÆpha
 * 
söVÆ
 + 
Ibëa
 * 
cosVÆ
;

5545 
__INLINE
 
¨m_∑rk_q31
(

5546 
q31_t
 
IÆpha
,

5547 
q31_t
 
Ibëa
,

5548 
q31_t
 * 
pId
,

5549 
q31_t
 * 
pIq
,

5550 
q31_t
 
söVÆ
,

5551 
q31_t
 
cosVÆ
)

5553 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5554 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5557 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
cosVÆ
)) >> 31);

5560 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
söVÆ
)) >> 31);

5564 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
söVÆ
)) >> 31);

5567 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
cosVÆ
)) >> 31);

5570 *
pId
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

5573 *
pIq
 = 
__QSUB
(
¥odu˘4
, 
¥odu˘3
);

5587 
¨m_q7_to_Êﬂt
(

5588 
q7_t
 * 
pSrc
,

5589 
Êﬂt32_t
 * 
pD°
,

5590 
uöt32_t
 
blockSize
);

5630 
__INLINE
 
¨m_öv_∑rk_f32
(

5631 
Êﬂt32_t
 
Id
,

5632 
Êﬂt32_t
 
Iq
,

5633 
Êﬂt32_t
 * 
pIÆpha
,

5634 
Êﬂt32_t
 * 
pIbëa
,

5635 
Êﬂt32_t
 
söVÆ
,

5636 
Êﬂt32_t
 
cosVÆ
)

5639 *
pIÆpha
 = 
Id
 * 
cosVÆ
 - 
Iq
 * 
söVÆ
;

5642 *
pIbëa
 = 
Id
 * 
söVÆ
 + 
Iq
 * 
cosVÆ
;

5665 
__INLINE
 
¨m_öv_∑rk_q31
(

5666 
q31_t
 
Id
,

5667 
q31_t
 
Iq
,

5668 
q31_t
 * 
pIÆpha
,

5669 
q31_t
 * 
pIbëa
,

5670 
q31_t
 
söVÆ
,

5671 
q31_t
 
cosVÆ
)

5673 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5674 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5677 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
cosVÆ
)) >> 31);

5680 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
söVÆ
)) >> 31);

5684 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
söVÆ
)) >> 31);

5687 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
cosVÆ
)) >> 31);

5690 *
pIÆpha
 = 
__QSUB
(
¥odu˘1
, 
¥odu˘2
);

5693 *
pIbëa
 = 
__QADD
(
¥odu˘4
, 
¥odu˘3
);

5709 
¨m_q31_to_Êﬂt
(

5710 
q31_t
 * 
pSrc
,

5711 
Êﬂt32_t
 * 
pD°
,

5712 
uöt32_t
 
blockSize
);

5763 
__INLINE
 
Êﬂt32_t
 
¨m_löór_öãΩ_f32
(

5764 
¨m_löór_öãΩ_ö°™˚_f32
 * 
S
,

5765 
Êﬂt32_t
 
x
)

5768 
Êﬂt32_t
 
y
;

5769 
Êﬂt32_t
 
x0
, 
x1
;

5770 
Êﬂt32_t
 
y0
, 
y1
;

5771 
Êﬂt32_t
 
xS∑cög
 = 
S
->xSpacing;

5772 
öt32_t
 
i
;

5773 
Êﬂt32_t
 *
pYD©a
 = 
S
->pYData;

5776 
i
 = (
öt32_t
Ë((
x
 - 
S
->
x1
Ë/ 
xS∑cög
);

5778 if(
i
 < 0)

5781 
y
 = 
pYD©a
[0];

5783 if((
uöt32_t
)
i
 >
S
->
nVÆues
)

5786 
y
 = 
pYD©a
[
S
->
nVÆues
 - 1];

5791 
x0
 = 
S
->
x1
 + 
i
 * 
xS∑cög
;

5792 
x1
 = 
S
->x1 + (
i
 + 1Ë* 
xS∑cög
;

5795 
y0
 = 
pYD©a
[
i
];

5796 
y1
 = 
pYD©a
[
i
 + 1];

5799 
y
 = 
y0
 + (
x
 - 
x0
Ë* ((
y1
 - y0Ë/ (
x1
 - x0));

5804  (
y
);

5822 
__INLINE
 
q31_t
 
¨m_löór_öãΩ_q31
(

5823 
q31_t
 * 
pYD©a
,

5824 
q31_t
 
x
,

5825 
uöt32_t
 
nVÆues
)

5827 
q31_t
 
y
;

5828 
q31_t
 
y0
, 
y1
;

5829 
q31_t
 
‰a˘
;

5830 
öt32_t
 
ödex
;

5835 
ödex
 = ((
x
 & 0xFFF00000) >> 20);

5837 if(
ödex
 >(
öt32_t
)(
nVÆues
 - 1))

5839  (
pYD©a
[
nVÆues
 - 1]);

5841 if(
ödex
 < 0)

5843  (
pYD©a
[0]);

5850 
‰a˘
 = (
x
 & 0x000FFFFF) << 11;

5853 
y0
 = 
pYD©a
[
ödex
];

5854 
y1
 = 
pYD©a
[
ödex
 + 1u];

5857 
y
 = ((
q31_t
Ë((
q63_t
Ë
y0
 * (0x7FFFFFFF - 
‰a˘
) >> 32));

5860 
y
 +((
q31_t
Ë(((
q63_t
Ë
y1
 * 
‰a˘
) >> 32));

5863  (
y
 << 1u);

5884 
__INLINE
 
q15_t
 
¨m_löór_öãΩ_q15
(

5885 
q15_t
 * 
pYD©a
,

5886 
q31_t
 
x
,

5887 
uöt32_t
 
nVÆues
)

5889 
q63_t
 
y
;

5890 
q15_t
 
y0
, 
y1
;

5891 
q31_t
 
‰a˘
;

5892 
öt32_t
 
ödex
;

5897 
ödex
 = ((
x
 & 0xFFF00000) >> 20u);

5899 if(
ödex
 >(
öt32_t
)(
nVÆues
 - 1))

5901  (
pYD©a
[
nVÆues
 - 1]);

5903 if(
ödex
 < 0)

5905  (
pYD©a
[0]);

5911 
‰a˘
 = (
x
 & 0x000FFFFF);

5914 
y0
 = 
pYD©a
[
ödex
];

5915 
y1
 = 
pYD©a
[
ödex
 + 1u];

5918 
y
 = ((
q63_t
Ë
y0
 * (0xFFFFF - 
‰a˘
));

5921 
y
 +((
q63_t
Ë
y1
 * (
‰a˘
));

5924  (
y
 >> 20);

5944 
__INLINE
 
q7_t
 
¨m_löór_öãΩ_q7
(

5945 
q7_t
 * 
pYD©a
,

5946 
q31_t
 
x
,

5947 
uöt32_t
 
nVÆues
)

5949 
q31_t
 
y
;

5950 
q7_t
 
y0
, 
y1
;

5951 
q31_t
 
‰a˘
;

5952 
uöt32_t
 
ödex
;

5957 i‡(
x
 < 0)

5959  (
pYD©a
[0]);

5961 
ödex
 = (
x
 >> 20) & 0xfff;

5964 if(
ödex
 >(
nVÆues
 - 1))

5966  (
pYD©a
[
nVÆues
 - 1]);

5973 
‰a˘
 = (
x
 & 0x000FFFFF);

5976 
y0
 = 
pYD©a
[
ödex
];

5977 
y1
 = 
pYD©a
[
ödex
 + 1u];

5980 
y
 = ((
y0
 * (0xFFFFF - 
‰a˘
)));

5983 
y
 +(
y1
 * 
‰a˘
);

5986  (
y
 >> 20u);

6001 
Êﬂt32_t
 
¨m_sö_f32
(

6002 
Êﬂt32_t
 
x
);

6010 
q31_t
 
¨m_sö_q31
(

6011 
q31_t
 
x
);

6019 
q15_t
 
¨m_sö_q15
(

6020 
q15_t
 
x
);

6028 
Êﬂt32_t
 
¨m_cos_f32
(

6029 
Êﬂt32_t
 
x
);

6037 
q31_t
 
¨m_cos_q31
(

6038 
q31_t
 
x
);

6046 
q15_t
 
¨m_cos_q15
(

6047 
q15_t
 
x
);

6089 
__INLINE
 
¨m_°©us
 
¨m_sqπ_f32
(

6090 
Êﬂt32_t
 
ö
,

6091 
Êﬂt32_t
 * 
pOut
)

6093 if(
ö
 > 0)

6097 #i‡(
__FPU_USED
 =1Ë&& 
deföed
 ( 
__CC_ARM
 )

6098 *
pOut
 = 
__sqπf
(
ö
);

6100 *
pOut
 = 
sqπf
(
ö
);

6103  (
ARM_MATH_SUCCESS
);

6107 *
pOut
 = 0.0f;

6108  (
ARM_MATH_ARGUMENT_ERROR
);

6121 
¨m_°©us
 
¨m_sqπ_q31
(

6122 
q31_t
 
ö
,

6123 
q31_t
 * 
pOut
);

6132 
¨m_°©us
 
¨m_sqπ_q15
(

6133 
q15_t
 
ö
,

6134 
q15_t
 * 
pOut
);

6149 
__INLINE
 
¨m_cúcuœrWrôe_f32
(

6150 
öt32_t
 * 
cúcBuf„r
,

6151 
öt32_t
 
L
,

6152 
uöt16_t
 * 
wrôeOff£t
,

6153 
öt32_t
 
buf„rInc
,

6154 c⁄° 
öt32_t
 * 
§c
,

6155 
öt32_t
 
§cInc
,

6156 
uöt32_t
 
blockSize
)

6158 
uöt32_t
 
i
 = 0u;

6159 
öt32_t
 
wOff£t
;

6163 
wOff£t
 = *
wrôeOff£t
;

6166 
i
 = 
blockSize
;

6168 
i
 > 0u)

6171 
cúcBuf„r
[
wOff£t
] = *
§c
;

6174 
§c
 +
§cInc
;

6177 
wOff£t
 +
buf„rInc
;

6178 if(
wOff£t
 >
L
)

6179 
wOff£t
 -
L
;

6182 
i
--;

6186 *
wrôeOff£t
 = 
wOff£t
;

6194 
__INLINE
 
¨m_cúcuœrRód_f32
(

6195 
öt32_t
 * 
cúcBuf„r
,

6196 
öt32_t
 
L
,

6197 
öt32_t
 * 
ªadOff£t
,

6198 
öt32_t
 
buf„rInc
,

6199 
öt32_t
 * 
d°
,

6200 
öt32_t
 * 
d°_ba£
,

6201 
öt32_t
 
d°_Àngth
,

6202 
öt32_t
 
d°Inc
,

6203 
uöt32_t
 
blockSize
)

6205 
uöt32_t
 
i
 = 0u;

6206 
öt32_t
 
rOff£t
, 
d°_íd
;

6210 
rOff£t
 = *
ªadOff£t
;

6211 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

6214 
i
 = 
blockSize
;

6216 
i
 > 0u)

6219 *
d°
 = 
cúcBuf„r
[
rOff£t
];

6222 
d°
 +
d°Inc
;

6224 if(
d°
 =(
öt32_t
 *Ë
d°_íd
)

6226 
d°
 = 
d°_ba£
;

6230 
rOff£t
 +
buf„rInc
;

6232 if(
rOff£t
 >
L
)

6234 
rOff£t
 -
L
;

6238 
i
--;

6242 *
ªadOff£t
 = 
rOff£t
;

6249 
__INLINE
 
¨m_cúcuœrWrôe_q15
(

6250 
q15_t
 * 
cúcBuf„r
,

6251 
öt32_t
 
L
,

6252 
uöt16_t
 * 
wrôeOff£t
,

6253 
öt32_t
 
buf„rInc
,

6254 c⁄° 
q15_t
 * 
§c
,

6255 
öt32_t
 
§cInc
,

6256 
uöt32_t
 
blockSize
)

6258 
uöt32_t
 
i
 = 0u;

6259 
öt32_t
 
wOff£t
;

6263 
wOff£t
 = *
wrôeOff£t
;

6266 
i
 = 
blockSize
;

6268 
i
 > 0u)

6271 
cúcBuf„r
[
wOff£t
] = *
§c
;

6274 
§c
 +
§cInc
;

6277 
wOff£t
 +
buf„rInc
;

6278 if(
wOff£t
 >
L
)

6279 
wOff£t
 -
L
;

6282 
i
--;

6286 *
wrôeOff£t
 = 
wOff£t
;

6294 
__INLINE
 
¨m_cúcuœrRód_q15
(

6295 
q15_t
 * 
cúcBuf„r
,

6296 
öt32_t
 
L
,

6297 
öt32_t
 * 
ªadOff£t
,

6298 
öt32_t
 
buf„rInc
,

6299 
q15_t
 * 
d°
,

6300 
q15_t
 * 
d°_ba£
,

6301 
öt32_t
 
d°_Àngth
,

6302 
öt32_t
 
d°Inc
,

6303 
uöt32_t
 
blockSize
)

6305 
uöt32_t
 
i
 = 0;

6306 
öt32_t
 
rOff£t
, 
d°_íd
;

6310 
rOff£t
 = *
ªadOff£t
;

6312 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

6315 
i
 = 
blockSize
;

6317 
i
 > 0u)

6320 *
d°
 = 
cúcBuf„r
[
rOff£t
];

6323 
d°
 +
d°Inc
;

6325 if(
d°
 =(
q15_t
 *Ë
d°_íd
)

6327 
d°
 = 
d°_ba£
;

6331 
rOff£t
 +
buf„rInc
;

6333 if(
rOff£t
 >
L
)

6335 
rOff£t
 -
L
;

6339 
i
--;

6343 *
ªadOff£t
 = 
rOff£t
;

6351 
__INLINE
 
¨m_cúcuœrWrôe_q7
(

6352 
q7_t
 * 
cúcBuf„r
,

6353 
öt32_t
 
L
,

6354 
uöt16_t
 * 
wrôeOff£t
,

6355 
öt32_t
 
buf„rInc
,

6356 c⁄° 
q7_t
 * 
§c
,

6357 
öt32_t
 
§cInc
,

6358 
uöt32_t
 
blockSize
)

6360 
uöt32_t
 
i
 = 0u;

6361 
öt32_t
 
wOff£t
;

6365 
wOff£t
 = *
wrôeOff£t
;

6368 
i
 = 
blockSize
;

6370 
i
 > 0u)

6373 
cúcBuf„r
[
wOff£t
] = *
§c
;

6376 
§c
 +
§cInc
;

6379 
wOff£t
 +
buf„rInc
;

6380 if(
wOff£t
 >
L
)

6381 
wOff£t
 -
L
;

6384 
i
--;

6388 *
wrôeOff£t
 = 
wOff£t
;

6396 
__INLINE
 
¨m_cúcuœrRód_q7
(

6397 
q7_t
 * 
cúcBuf„r
,

6398 
öt32_t
 
L
,

6399 
öt32_t
 * 
ªadOff£t
,

6400 
öt32_t
 
buf„rInc
,

6401 
q7_t
 * 
d°
,

6402 
q7_t
 * 
d°_ba£
,

6403 
öt32_t
 
d°_Àngth
,

6404 
öt32_t
 
d°Inc
,

6405 
uöt32_t
 
blockSize
)

6407 
uöt32_t
 
i
 = 0;

6408 
öt32_t
 
rOff£t
, 
d°_íd
;

6412 
rOff£t
 = *
ªadOff£t
;

6414 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

6417 
i
 = 
blockSize
;

6419 
i
 > 0u)

6422 *
d°
 = 
cúcBuf„r
[
rOff£t
];

6425 
d°
 +
d°Inc
;

6427 if(
d°
 =(
q7_t
 *Ë
d°_íd
)

6429 
d°
 = 
d°_ba£
;

6433 
rOff£t
 +
buf„rInc
;

6435 if(
rOff£t
 >
L
)

6437 
rOff£t
 -
L
;

6441 
i
--;

6445 *
ªadOff£t
 = 
rOff£t
;

6457 
¨m_powî_q31
(

6458 
q31_t
 * 
pSrc
,

6459 
uöt32_t
 
blockSize
,

6460 
q63_t
 * 
pResu…
);

6470 
¨m_powî_f32
(

6471 
Êﬂt32_t
 * 
pSrc
,

6472 
uöt32_t
 
blockSize
,

6473 
Êﬂt32_t
 * 
pResu…
);

6483 
¨m_powî_q15
(

6484 
q15_t
 * 
pSrc
,

6485 
uöt32_t
 
blockSize
,

6486 
q63_t
 * 
pResu…
);

6496 
¨m_powî_q7
(

6497 
q7_t
 * 
pSrc
,

6498 
uöt32_t
 
blockSize
,

6499 
q31_t
 * 
pResu…
);

6509 
¨m_món_q7
(

6510 
q7_t
 * 
pSrc
,

6511 
uöt32_t
 
blockSize
,

6512 
q7_t
 * 
pResu…
);

6521 
¨m_món_q15
(

6522 
q15_t
 * 
pSrc
,

6523 
uöt32_t
 
blockSize
,

6524 
q15_t
 * 
pResu…
);

6533 
¨m_món_q31
(

6534 
q31_t
 * 
pSrc
,

6535 
uöt32_t
 
blockSize
,

6536 
q31_t
 * 
pResu…
);

6545 
¨m_món_f32
(

6546 
Êﬂt32_t
 * 
pSrc
,

6547 
uöt32_t
 
blockSize
,

6548 
Êﬂt32_t
 * 
pResu…
);

6558 
¨m_v¨_f32
(

6559 
Êﬂt32_t
 * 
pSrc
,

6560 
uöt32_t
 
blockSize
,

6561 
Êﬂt32_t
 * 
pResu…
);

6571 
¨m_v¨_q31
(

6572 
q31_t
 * 
pSrc
,

6573 
uöt32_t
 
blockSize
,

6574 
q31_t
 * 
pResu…
);

6584 
¨m_v¨_q15
(

6585 
q15_t
 * 
pSrc
,

6586 
uöt32_t
 
blockSize
,

6587 
q15_t
 * 
pResu…
);

6597 
¨m_rms_f32
(

6598 
Êﬂt32_t
 * 
pSrc
,

6599 
uöt32_t
 
blockSize
,

6600 
Êﬂt32_t
 * 
pResu…
);

6610 
¨m_rms_q31
(

6611 
q31_t
 * 
pSrc
,

6612 
uöt32_t
 
blockSize
,

6613 
q31_t
 * 
pResu…
);

6623 
¨m_rms_q15
(

6624 
q15_t
 * 
pSrc
,

6625 
uöt32_t
 
blockSize
,

6626 
q15_t
 * 
pResu…
);

6636 
¨m_°d_f32
(

6637 
Êﬂt32_t
 * 
pSrc
,

6638 
uöt32_t
 
blockSize
,

6639 
Êﬂt32_t
 * 
pResu…
);

6649 
¨m_°d_q31
(

6650 
q31_t
 * 
pSrc
,

6651 
uöt32_t
 
blockSize
,

6652 
q31_t
 * 
pResu…
);

6662 
¨m_°d_q15
(

6663 
q15_t
 * 
pSrc
,

6664 
uöt32_t
 
blockSize
,

6665 
q15_t
 * 
pResu…
);

6675 
¨m_cm∂x_mag_f32
(

6676 
Êﬂt32_t
 * 
pSrc
,

6677 
Êﬂt32_t
 * 
pD°
,

6678 
uöt32_t
 
numSam∂es
);

6688 
¨m_cm∂x_mag_q31
(

6689 
q31_t
 * 
pSrc
,

6690 
q31_t
 * 
pD°
,

6691 
uöt32_t
 
numSam∂es
);

6701 
¨m_cm∂x_mag_q15
(

6702 
q15_t
 * 
pSrc
,

6703 
q15_t
 * 
pD°
,

6704 
uöt32_t
 
numSam∂es
);

6716 
¨m_cm∂x_dŸ_¥od_q15
(

6717 
q15_t
 * 
pSrcA
,

6718 
q15_t
 * 
pSrcB
,

6719 
uöt32_t
 
numSam∂es
,

6720 
q31_t
 * 
ªÆResu…
,

6721 
q31_t
 * 
imagResu…
);

6733 
¨m_cm∂x_dŸ_¥od_q31
(

6734 
q31_t
 * 
pSrcA
,

6735 
q31_t
 * 
pSrcB
,

6736 
uöt32_t
 
numSam∂es
,

6737 
q63_t
 * 
ªÆResu…
,

6738 
q63_t
 * 
imagResu…
);

6750 
¨m_cm∂x_dŸ_¥od_f32
(

6751 
Êﬂt32_t
 * 
pSrcA
,

6752 
Êﬂt32_t
 * 
pSrcB
,

6753 
uöt32_t
 
numSam∂es
,

6754 
Êﬂt32_t
 * 
ªÆResu…
,

6755 
Êﬂt32_t
 * 
imagResu…
);

6766 
¨m_cm∂x_mu…_ªÆ_q15
(

6767 
q15_t
 * 
pSrcCm∂x
,

6768 
q15_t
 * 
pSrcRól
,

6769 
q15_t
 * 
pCm∂xD°
,

6770 
uöt32_t
 
numSam∂es
);

6781 
¨m_cm∂x_mu…_ªÆ_q31
(

6782 
q31_t
 * 
pSrcCm∂x
,

6783 
q31_t
 * 
pSrcRól
,

6784 
q31_t
 * 
pCm∂xD°
,

6785 
uöt32_t
 
numSam∂es
);

6796 
¨m_cm∂x_mu…_ªÆ_f32
(

6797 
Êﬂt32_t
 * 
pSrcCm∂x
,

6798 
Êﬂt32_t
 * 
pSrcRól
,

6799 
Êﬂt32_t
 * 
pCm∂xD°
,

6800 
uöt32_t
 
numSam∂es
);

6811 
¨m_mö_q7
(

6812 
q7_t
 * 
pSrc
,

6813 
uöt32_t
 
blockSize
,

6814 
q7_t
 * 
ªsu…
,

6815 
uöt32_t
 * 
ödex
);

6826 
¨m_mö_q15
(

6827 
q15_t
 * 
pSrc
,

6828 
uöt32_t
 
blockSize
,

6829 
q15_t
 * 
pResu…
,

6830 
uöt32_t
 * 
pIndex
);

6840 
¨m_mö_q31
(

6841 
q31_t
 * 
pSrc
,

6842 
uöt32_t
 
blockSize
,

6843 
q31_t
 * 
pResu…
,

6844 
uöt32_t
 * 
pIndex
);

6855 
¨m_mö_f32
(

6856 
Êﬂt32_t
 * 
pSrc
,

6857 
uöt32_t
 
blockSize
,

6858 
Êﬂt32_t
 * 
pResu…
,

6859 
uöt32_t
 * 
pIndex
);

6870 
¨m_max_q7
(

6871 
q7_t
 * 
pSrc
,

6872 
uöt32_t
 
blockSize
,

6873 
q7_t
 * 
pResu…
,

6874 
uöt32_t
 * 
pIndex
);

6885 
¨m_max_q15
(

6886 
q15_t
 * 
pSrc
,

6887 
uöt32_t
 
blockSize
,

6888 
q15_t
 * 
pResu…
,

6889 
uöt32_t
 * 
pIndex
);

6900 
¨m_max_q31
(

6901 
q31_t
 * 
pSrc
,

6902 
uöt32_t
 
blockSize
,

6903 
q31_t
 * 
pResu…
,

6904 
uöt32_t
 * 
pIndex
);

6915 
¨m_max_f32
(

6916 
Êﬂt32_t
 * 
pSrc
,

6917 
uöt32_t
 
blockSize
,

6918 
Êﬂt32_t
 * 
pResu…
,

6919 
uöt32_t
 * 
pIndex
);

6930 
¨m_cm∂x_mu…_cm∂x_q15
(

6931 
q15_t
 * 
pSrcA
,

6932 
q15_t
 * 
pSrcB
,

6933 
q15_t
 * 
pD°
,

6934 
uöt32_t
 
numSam∂es
);

6945 
¨m_cm∂x_mu…_cm∂x_q31
(

6946 
q31_t
 * 
pSrcA
,

6947 
q31_t
 * 
pSrcB
,

6948 
q31_t
 * 
pD°
,

6949 
uöt32_t
 
numSam∂es
);

6960 
¨m_cm∂x_mu…_cm∂x_f32
(

6961 
Êﬂt32_t
 * 
pSrcA
,

6962 
Êﬂt32_t
 * 
pSrcB
,

6963 
Êﬂt32_t
 * 
pD°
,

6964 
uöt32_t
 
numSam∂es
);

6973 
¨m_Êﬂt_to_q31
(

6974 
Êﬂt32_t
 * 
pSrc
,

6975 
q31_t
 * 
pD°
,

6976 
uöt32_t
 
blockSize
);

6985 
¨m_Êﬂt_to_q15
(

6986 
Êﬂt32_t
 * 
pSrc
,

6987 
q15_t
 * 
pD°
,

6988 
uöt32_t
 
blockSize
);

6997 
¨m_Êﬂt_to_q7
(

6998 
Êﬂt32_t
 * 
pSrc
,

6999 
q7_t
 * 
pD°
,

7000 
uöt32_t
 
blockSize
);

7010 
¨m_q31_to_q15
(

7011 
q31_t
 * 
pSrc
,

7012 
q15_t
 * 
pD°
,

7013 
uöt32_t
 
blockSize
);

7022 
¨m_q31_to_q7
(

7023 
q31_t
 * 
pSrc
,

7024 
q7_t
 * 
pD°
,

7025 
uöt32_t
 
blockSize
);

7034 
¨m_q15_to_Êﬂt
(

7035 
q15_t
 * 
pSrc
,

7036 
Êﬂt32_t
 * 
pD°
,

7037 
uöt32_t
 
blockSize
);

7047 
¨m_q15_to_q31
(

7048 
q15_t
 * 
pSrc
,

7049 
q31_t
 * 
pD°
,

7050 
uöt32_t
 
blockSize
);

7060 
¨m_q15_to_q7
(

7061 
q15_t
 * 
pSrc
,

7062 
q7_t
 * 
pD°
,

7063 
uöt32_t
 
blockSize
);

7137 
__INLINE
 
Êﬂt32_t
 
¨m_bûöór_öãΩ_f32
(

7138 c⁄° 
¨m_bûöór_öãΩ_ö°™˚_f32
 * 
S
,

7139 
Êﬂt32_t
 
X
,

7140 
Êﬂt32_t
 
Y
)

7142 
Êﬂt32_t
 
out
;

7143 
Êﬂt32_t
 
f00
, 
f01
, 
f10
, 
f11
;

7144 
Êﬂt32_t
 *
pD©a
 = 
S
->pData;

7145 
öt32_t
 
xIndex
, 
yIndex
, 
ödex
;

7146 
Êﬂt32_t
 
xdiff
, 
ydiff
;

7147 
Êﬂt32_t
 
b1
, 
b2
, 
b3
, 
b4
;

7149 
xIndex
 = (
öt32_t
Ë
X
;

7150 
yIndex
 = (
öt32_t
Ë
Y
;

7154 if(
xIndex
 < 0 || xIndex > (
S
->
numRows
 - 1Ë|| 
yIndex
 < 0

7155 || 
yIndex
 > (
S
->
numCﬁs
 - 1))

7161 
ödex
 = (
xIndex
 - 1Ë+ (
yIndex
 - 1Ë* 
S
->
numCﬁs
;

7165 
f00
 = 
pD©a
[
ödex
];

7166 
f01
 = 
pD©a
[
ödex
 + 1];

7169 
ödex
 = (
xIndex
 - 1Ë+ (
yIndex
Ë* 
S
->
numCﬁs
;

7173 
f10
 = 
pD©a
[
ödex
];

7174 
f11
 = 
pD©a
[
ödex
 + 1];

7177 
b1
 = 
f00
;

7178 
b2
 = 
f01
 - 
f00
;

7179 
b3
 = 
f10
 - 
f00
;

7180 
b4
 = 
f00
 - 
f01
 - 
f10
 + 
f11
;

7183 
xdiff
 = 
X
 - 
xIndex
;

7186 
ydiff
 = 
Y
 - 
yIndex
;

7189 
out
 = 
b1
 + 
b2
 * 
xdiff
 + 
b3
 * 
ydiff
 + 
b4
 * xdiff * ydiff;

7192  (
out
);

7205 
__INLINE
 
q31_t
 
¨m_bûöór_öãΩ_q31
(

7206 
¨m_bûöór_öãΩ_ö°™˚_q31
 * 
S
,

7207 
q31_t
 
X
,

7208 
q31_t
 
Y
)

7210 
q31_t
 
out
;

7211 
q31_t
 
acc
 = 0;

7212 
q31_t
 
x‰a˘
, 
y‰a˘
;

7213 
q31_t
 
x1
, 
x2
, 
y1
, 
y2
;

7214 
öt32_t
 
rI
, 
cI
;

7215 
q31_t
 *
pYD©a
 = 
S
->
pD©a
;

7216 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

7222 
rI
 = ((
X
 & 0xFFF00000) >> 20u);

7227 
cI
 = ((
Y
 & 0xFFF00000) >> 20u);

7231 if(
rI
 < 0 ||ÑI > (
S
->
numRows
 - 1Ë|| 
cI
 < 0 || cI > (S->
numCﬁs
 - 1))

7238 
x‰a˘
 = (
X
 & 0x000FFFFF) << 11u;

7241 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

7242 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

7246 
y‰a˘
 = (
Y
 & 0x000FFFFF) << 11u;

7249 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

7250 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

7253 
out
 = ((
q31_t
Ë(((
q63_t
Ë
x1
 * (0x7FFFFFFF - 
x‰a˘
)) >> 32));

7254 
acc
 = ((
q31_t
Ë(((
q63_t
Ë
out
 * (0x7FFFFFFF - 
y‰a˘
)) >> 32));

7257 
out
 = ((
q31_t
Ë((
q63_t
Ë
x2
 * (0x7FFFFFFF - 
y‰a˘
) >> 32));

7258 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
x‰a˘
) >> 32));

7261 
out
 = ((
q31_t
Ë((
q63_t
Ë
y1
 * (0x7FFFFFFF - 
x‰a˘
) >> 32));

7262 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

7265 
out
 = ((
q31_t
Ë((
q63_t
Ë
y2
 * (
x‰a˘
) >> 32));

7266 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

7269  (
acc
 << 2u);

7281 
__INLINE
 
q15_t
 
¨m_bûöór_öãΩ_q15
(

7282 
¨m_bûöór_öãΩ_ö°™˚_q15
 * 
S
,

7283 
q31_t
 
X
,

7284 
q31_t
 
Y
)

7286 
q63_t
 
acc
 = 0;

7287 
q31_t
 
out
;

7288 
q15_t
 
x1
, 
x2
, 
y1
, 
y2
;

7289 
q31_t
 
x‰a˘
, 
y‰a˘
;

7290 
öt32_t
 
rI
, 
cI
;

7291 
q15_t
 *
pYD©a
 = 
S
->
pD©a
;

7292 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

7297 
rI
 = ((
X
 & 0xFFF00000) >> 20);

7302 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

7306 if(
rI
 < 0 ||ÑI > (
S
->
numRows
 - 1Ë|| 
cI
 < 0 || cI > (S->
numCﬁs
 - 1))

7313 
x‰a˘
 = (
X
 & 0x000FFFFF);

7316 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

7317 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

7322 
y‰a˘
 = (
Y
 & 0x000FFFFF);

7325 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

7326 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

7332 
out
 = (
q31_t
Ë(((
q63_t
Ë
x1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

7333 
acc
 = ((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
));

7336 
out
 = (
q31_t
Ë(((
q63_t
Ë
x2
 * (0xFFFFF - 
y‰a˘
)) >> 4u);

7337 
acc
 +((
q63_t
Ë
out
 * (
x‰a˘
));

7340 
out
 = (
q31_t
Ë(((
q63_t
Ë
y1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

7341 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

7344 
out
 = (
q31_t
Ë(((
q63_t
Ë
y2
 * (
x‰a˘
)) >> 4u);

7345 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

7349  (
acc
 >> 36);

7361 
__INLINE
 
q7_t
 
¨m_bûöór_öãΩ_q7
(

7362 
¨m_bûöór_öãΩ_ö°™˚_q7
 * 
S
,

7363 
q31_t
 
X
,

7364 
q31_t
 
Y
)

7366 
q63_t
 
acc
 = 0;

7367 
q31_t
 
out
;

7368 
q31_t
 
x‰a˘
, 
y‰a˘
;

7369 
q7_t
 
x1
, 
x2
, 
y1
, 
y2
;

7370 
öt32_t
 
rI
, 
cI
;

7371 
q7_t
 *
pYD©a
 = 
S
->
pD©a
;

7372 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

7377 
rI
 = ((
X
 & 0xFFF00000) >> 20);

7382 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

7386 if(
rI
 < 0 ||ÑI > (
S
->
numRows
 - 1Ë|| 
cI
 < 0 || cI > (S->
numCﬁs
 - 1))

7393 
x‰a˘
 = (
X
 & 0x000FFFFF);

7396 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

7397 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

7402 
y‰a˘
 = (
Y
 & 0x000FFFFF);

7405 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

7406 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

7409 
out
 = ((
x1
 * (0xFFFFF - 
x‰a˘
)));

7410 
acc
 = (((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
)));

7413 
out
 = ((
x2
 * (0xFFFFF - 
y‰a˘
)));

7414 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7417 
out
 = ((
y1
 * (0xFFFFF - 
x‰a˘
)));

7418 
acc
 +(((
q63_t
Ë
out
 * (
y‰a˘
)));

7421 
out
 = ((
y2
 * (
y‰a˘
)));

7422 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7425  (
acc
 >> 40);

7435 
	#mu…Acc_32x32_kìp32_R
(
a
, 
x
, 
y
) \

7436 
a
 = (
q31_t
Ë(((((
q63_t
ËaË<< 32Ë+ ((q63_tË
x
 * 
y
Ë+ 0x80000000LL ) >> 32)

	)

7439 
	#mu…Sub_32x32_kìp32_R
(
a
, 
x
, 
y
) \

7440 
a
 = (
q31_t
Ë(((((
q63_t
ËaË<< 32Ë- ((q63_tË
x
 * 
y
Ë+ 0x80000000LL ) >> 32)

	)

7443 
	#mu…_32x32_kìp32_R
(
a
, 
x
, 
y
) \

7444 
a
 = (
q31_t
Ë(((
q63_t
Ë
x
 * 
y
 + 0x80000000LL ) >> 32)

	)

7447 
	#mu…Acc_32x32_kìp32
(
a
, 
x
, 
y
) \

7448 
a
 +(
q31_t
Ë(((
q63_t
Ë
x
 * 
y
Ë>> 32)

	)

7451 
	#mu…Sub_32x32_kìp32
(
a
, 
x
, 
y
) \

7452 
a
 -(
q31_t
Ë(((
q63_t
Ë
x
 * 
y
Ë>> 32)

	)

7455 
	#mu…_32x32_kìp32
(
a
, 
x
, 
y
) \

7456 
a
 = (
q31_t
Ë(((
q63_t
Ë
x
 * 
y
 ) >> 32)

	)

7459 #i‡
deföed
 ( 
__CC_ARM
 )

7462 #ifde‡
ARM_MATH_CM4


7463 
	#LOW_OPTIMIZATION_ENTER
 \

7464 
	`_Pøgma
 ("push") \

7465 
	`_Pøgma
 ("O1")

	)

7467 
	#LOW_OPTIMIZATION_ENTER


	)

7471 #ifde‡
ARM_MATH_CM4


7472 
	#LOW_OPTIMIZATION_EXIT
 \

7473 
	`_Pøgma
 ("p›")

	)

7475 
	#LOW_OPTIMIZATION_EXIT


	)

7479 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER


	)

7482 
	#IAR_ONLY_LOW_OPTIMIZATION_EXIT


	)

7484 #ñi‡
deföed
(
__ICCARM__
)

7487 #ifde‡
ARM_MATH_CM4


7488 
	#LOW_OPTIMIZATION_ENTER
 \

7489 
	`_Pøgma
 ("›timizeˆow")

	)

7491 
	#LOW_OPTIMIZATION_ENTER


	)

7495 
	#LOW_OPTIMIZATION_EXIT


	)

7498 #ifde‡
ARM_MATH_CM4


7499 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER
 \

7500 
	`_Pøgma
 ("›timizeˆow")

	)

7502 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER


	)

7506 
	#IAR_ONLY_LOW_OPTIMIZATION_EXIT


	)

7508 #ñi‡
deföed
(
__GNUC__
)

7510 
	#LOW_OPTIMIZATION_ENTER
 
	`__©åibuã__
(–
	`›timize
("-O1"Ë))

	)

7512 
	#LOW_OPTIMIZATION_EXIT


	)

7514 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER


	)

7516 
	#IAR_ONLY_LOW_OPTIMIZATION_EXIT


	)

7518 #ñi‡
deföed
(
__CSMC__
)

7520 
	#LOW_OPTIMIZATION_ENTER


	)

7521 
	#LOW_OPTIMIZATION_EXIT


	)

7522 
	#IAR_ONLY_LOW_OPTIMIZATION_ENTER


	)

7523 
	#IAR_ONLY_LOW_OPTIMIZATION_EXIT


	)

7528 #ifdef 
__˝lu•lus


	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\CMSIS\Include\core_cm0plus.h

38 #i‡
deföed
 ( 
__ICCARM__
 )

39 #¥agm®
sy°em_ö˛ude


42 #i‚de‡
__CORE_CM0PLUS_H_GENERIC


43 
	#__CORE_CM0PLUS_H_GENERIC


	)

45 #ifde‡
__˝lu•lus


71 
	#__CM0PLUS_CMSIS_VERSION_MAIN
 (0x04Ë

	)

72 
	#__CM0PLUS_CMSIS_VERSION_SUB
 (0x00Ë

	)

73 
	#__CM0PLUS_CMSIS_VERSION
 ((
__CM0PLUS_CMSIS_VERSION_MAIN
 << 16) | \

74 
__CM0PLUS_CMSIS_VERSION_SUB
Ë

	)

76 
	#__CORTEX_M
 (0x00Ë

	)

79 #i‡ 
deföed
 ( 
__CC_ARM
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
__ölöe


	)

82 
	#__STATIC_INLINE
 
__ölöe


	)

84 #ñi‡
deföed
 ( 
__GNUC__
 )

85 
	#__ASM
 
__asm


	)

86 
	#__INLINE
 
ölöe


	)

87 
	#__STATIC_INLINE
 
ölöe


	)

89 #ñi‡
deföed
 ( 
__ICCARM__
 )

90 
	#__ASM
 
__asm


	)

91 
	#__INLINE
 
ölöe


	)

92 
	#__STATIC_INLINE
 
ölöe


	)

94 #ñi‡
deföed
 ( 
__TMS470__
 )

95 
	#__ASM
 
__asm


	)

96 
	#__STATIC_INLINE
 
ölöe


	)

98 #ñi‡
deföed
 ( 
__TASKING__
 )

99 
	#__ASM
 
__asm


	)

100 
	#__INLINE
 
ölöe


	)

101 
	#__STATIC_INLINE
 
ölöe


	)

103 #ñi‡
deföed
 ( 
__CSMC__
 )

104 
	#__∑cked


	)

105 
	#__ASM
 
_asm


	)

106 
	#__INLINE
 
ölöe


	)

107 
	#__STATIC_INLINE
 
ölöe


	)

114 
	#__FPU_USED
 0

	)

116 #i‡
deföed
 ( 
__CC_ARM
 )

117 #i‡
deföed
 
__TARGET_FPU_VFP


121 #ñi‡
deföed
 ( 
__GNUC__
 )

122 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

126 #ñi‡
deföed
 ( 
__ICCARM__
 )

127 #i‡
deföed
 
__ARMVFP__


131 #ñi‡
deföed
 ( 
__TMS470__
 )

132 #i‡
deföed
 
__TI__VFP_SUPPORT____


136 #ñi‡
deföed
 ( 
__TASKING__
 )

137 #i‡
deföed
 
__FPU_VFP__


141 #ñi‡
deföed
 ( 
__CSMC__
 )

142 #i‡–
__CSMC__
 & 0x400)

147 
	~<°döt.h
>

148 
	~<c‹e_cmIn°r.h
>

149 
	~<c‹e_cmFunc.h
>

151 #ifde‡
__˝lu•lus


157 #i‚de‡
__CMSIS_GENERIC


159 #i‚de‡
__CORE_CM0PLUS_H_DEPENDANT


160 
	#__CORE_CM0PLUS_H_DEPENDANT


	)

162 #ifde‡
__˝lu•lus


167 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


168 #i‚de‡
__CM0PLUS_REV


169 
	#__CM0PLUS_REV
 0x0000

	)

173 #i‚de‡
__MPU_PRESENT


174 
	#__MPU_PRESENT
 0

	)

178 #i‚de‡
__VTOR_PRESENT


179 
	#__VTOR_PRESENT
 0

	)

183 #i‚de‡
__NVIC_PRIO_BITS


184 
	#__NVIC_PRIO_BITS
 2

	)

188 #i‚de‡
__Víd‹_SysTickC⁄fig


189 
	#__Víd‹_SysTickC⁄fig
 0

	)

202 #ifde‡
__˝lu•lus


203 
	#__I
 vﬁ©ûê

	)

205 
	#__I
 vﬁ©ûêc⁄°

	)

207 
	#__O
 vﬁ©ûê

	)

208 
	#__IO
 vﬁ©ûê

	)

239 #i‡(
__CORTEX_M
 != 0x04)

240 
uöt32_t
 
_ª£rved0
:27;

242 
uöt32_t
 
_ª£rved0
:16;

243 
uöt32_t
 
GE
:4;

244 
uöt32_t
 
_ª£rved1
:7;

246 
uöt32_t
 
Q
:1;

247 
uöt32_t
 
V
:1;

248 
uöt32_t
 
C
:1;

249 
uöt32_t
 
Z
:1;

250 
uöt32_t
 
N
:1;

251 } 
b
;

252 
uöt32_t
 
w
;

253 } 
	tAPSR_Ty≥
;

262 
uöt32_t
 
ISR
:9;

263 
uöt32_t
 
_ª£rved0
:23;

264 } 
b
;

265 
uöt32_t
 
w
;

266 } 
	tIPSR_Ty≥
;

275 
uöt32_t
 
ISR
:9;

276 #i‡(
__CORTEX_M
 != 0x04)

277 
uöt32_t
 
_ª£rved0
:15;

279 
uöt32_t
 
_ª£rved0
:7;

280 
uöt32_t
 
GE
:4;

281 
uöt32_t
 
_ª£rved1
:4;

283 
uöt32_t
 
T
:1;

284 
uöt32_t
 
IT
:2;

285 
uöt32_t
 
Q
:1;

286 
uöt32_t
 
V
:1;

287 
uöt32_t
 
C
:1;

288 
uöt32_t
 
Z
:1;

289 
uöt32_t
 
N
:1;

290 } 
b
;

291 
uöt32_t
 
w
;

292 } 
	txPSR_Ty≥
;

301 
uöt32_t
 
nPRIV
:1;

302 
uöt32_t
 
SPSEL
:1;

303 
uöt32_t
 
FPCA
:1;

304 
uöt32_t
 
_ª£rved0
:29;

305 } 
b
;

306 
uöt32_t
 
w
;

307 } 
	tCONTROL_Ty≥
;

322 
__IO
 
uöt32_t
 
ISER
[1];

323 
uöt32_t
 
RESERVED0
[31];

324 
__IO
 
uöt32_t
 
ICER
[1];

325 
uöt32_t
 
RSERVED1
[31];

326 
__IO
 
uöt32_t
 
ISPR
[1];

327 
uöt32_t
 
RESERVED2
[31];

328 
__IO
 
uöt32_t
 
ICPR
[1];

329 
uöt32_t
 
RESERVED3
[31];

330 
uöt32_t
 
RESERVED4
[64];

331 
__IO
 
uöt32_t
 
IP
[8];

332 } 
	tNVIC_Ty≥
;

347 
__I
 
uöt32_t
 
CPUID
;

348 
__IO
 
uöt32_t
 
ICSR
;

349 #i‡(
__VTOR_PRESENT
 == 1)

350 
__IO
 
uöt32_t
 
VTOR
;

352 
uöt32_t
 
RESERVED0
;

354 
__IO
 
uöt32_t
 
AIRCR
;

355 
__IO
 
uöt32_t
 
SCR
;

356 
__IO
 
uöt32_t
 
CCR
;

357 
uöt32_t
 
RESERVED1
;

358 
__IO
 
uöt32_t
 
SHP
[2];

359 
__IO
 
uöt32_t
 
SHCSR
;

360 } 
	tSCB_Ty≥
;

363 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

364 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

366 
	#SCB_CPUID_VARIANT_Pos
 20

	)

367 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

369 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

370 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

372 
	#SCB_CPUID_PARTNO_Pos
 4

	)

373 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

375 
	#SCB_CPUID_REVISION_Pos
 0

	)

376 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

379 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

380 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

382 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

383 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

385 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

386 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

388 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

389 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

391 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

392 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

394 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

395 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

397 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

398 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

400 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

401 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

403 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

404 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

406 #i‡(
__VTOR_PRESENT
 == 1)

408 
	#SCB_VTOR_TBLOFF_Pos
 8

	)

409 
	#SCB_VTOR_TBLOFF_Msk
 (0xFFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

413 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

414 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

416 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

417 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

419 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

420 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

422 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

423 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

425 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

426 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

429 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

430 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

432 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

433 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

435 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

436 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

439 
	#SCB_CCR_STKALIGN_Pos
 9

	)

440 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

442 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

443 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

446 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

447 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

462 
__IO
 
uöt32_t
 
CTRL
;

463 
__IO
 
uöt32_t
 
LOAD
;

464 
__IO
 
uöt32_t
 
VAL
;

465 
__I
 
uöt32_t
 
CALIB
;

466 } 
	tSysTick_Ty≥
;

469 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

470 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

472 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

473 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

475 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

476 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

478 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

479 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

482 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

483 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

486 
	#SysTick_VAL_CURRENT_Pos
 0

	)

487 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

490 
	#SysTick_CALIB_NOREF_Pos
 31

	)

491 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

493 
	#SysTick_CALIB_SKEW_Pos
 30

	)

494 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

496 
	#SysTick_CALIB_TENMS_Pos
 0

	)

497 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_CALIB_TENMS_Pos
Ë

	)

501 #i‡(
__MPU_PRESENT
 == 1)

512 
__I
 
uöt32_t
 
TYPE
;

513 
__IO
 
uöt32_t
 
CTRL
;

514 
__IO
 
uöt32_t
 
RNR
;

515 
__IO
 
uöt32_t
 
RBAR
;

516 
__IO
 
uöt32_t
 
RASR
;

517 } 
	tMPU_Ty≥
;

520 
	#MPU_TYPE_IREGION_Pos
 16

	)

521 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

523 
	#MPU_TYPE_DREGION_Pos
 8

	)

524 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

526 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

527 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

530 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

531 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

533 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

534 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

536 
	#MPU_CTRL_ENABLE_Pos
 0

	)

537 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

540 
	#MPU_RNR_REGION_Pos
 0

	)

541 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

544 
	#MPU_RBAR_ADDR_Pos
 8

	)

545 
	#MPU_RBAR_ADDR_Msk
 (0xFFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

547 
	#MPU_RBAR_VALID_Pos
 4

	)

548 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

550 
	#MPU_RBAR_REGION_Pos
 0

	)

551 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

554 
	#MPU_RASR_ATTRS_Pos
 16

	)

555 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

557 
	#MPU_RASR_XN_Pos
 28

	)

558 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

560 
	#MPU_RASR_AP_Pos
 24

	)

561 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

563 
	#MPU_RASR_TEX_Pos
 19

	)

564 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

566 
	#MPU_RASR_S_Pos
 18

	)

567 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

569 
	#MPU_RASR_C_Pos
 17

	)

570 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

572 
	#MPU_RASR_B_Pos
 16

	)

573 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

575 
	#MPU_RASR_SRD_Pos
 8

	)

576 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

578 
	#MPU_RASR_SIZE_Pos
 1

	)

579 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

581 
	#MPU_RASR_ENABLE_Pos
 0

	)

582 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

605 
	#SCS_BASE
 (0xE000E000ULË

	)

606 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

607 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

608 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

610 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

611 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

612 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

614 #i‡(
__MPU_PRESENT
 == 1)

615 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

616 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

644 
	#_BIT_SHIFT
(
IRQn
Ë–(((
uöt32_t
)(IRQnËË& 0x03Ë* 8 )

	)

645 
	#_SHP_IDX
(
IRQn
Ë–((((
uöt32_t
)(IRQnË& 0x0F)-8Ë>> 2Ë)

	)

646 
	#_IP_IDX
(
IRQn
Ë–((
uöt32_t
)(IRQnË>> 2Ë)

	)

655 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

657 
NVIC
->
ISER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

667 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

669 
NVIC
->
ICER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

683 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

685 ((
uöt32_t
Ë((
NVIC
->
ISPR
[0] & (1 << ((uöt32_t)(
IRQn
) & 0x1F)))?1:0));

695 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

697 
NVIC
->
ISPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

707 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

709 
NVIC
->
ICPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

722 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

724 if(
IRQn
 < 0) {

725 
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << 
_BIT_SHIFT
(IRQn))) |

726 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
_BIT_SHIFT
(
IRQn
)); }

728 
NVIC
->
IP
[
_IP_IDX
(
IRQn
)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << 
_BIT_SHIFT
(IRQn))) |

729 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
_BIT_SHIFT
(
IRQn
)); }

744 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

747 if(
IRQn
 < 0) {

748 ((
uöt32_t
)(((
SCB
->
SHP
[
_SHP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& 0xFFË>> (8 - 
__NVIC_PRIO_BITS
))); }

750 ((
uöt32_t
)(((
NVIC
->
IP
[ 
_IP_IDX
(
IRQn
)] >> 
_BIT_SHIFT
(IRQnËË& 0xFFË>> (8 - 
__NVIC_PRIO_BITS
))); }

758 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

760 
__DSB
();

762 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

763 
SCB_AIRCR_SYSRESETREQ_Msk
);

764 
__DSB
();

779 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

796 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

798 i‡((
ticks
 - 1Ë> 
SysTick_LOAD_RELOAD_Msk
)  (1);

800 
SysTick
->
LOAD
 = 
ticks
 - 1;

801 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

802 
SysTick
->
VAL
 = 0;

803 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

804 
SysTick_CTRL_TICKINT_Msk
 |

805 
SysTick_CTRL_ENABLE_Msk
;

816 #ifde‡
__˝lu•lus


	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\CMSIS\Include\core_cm4.h

38 #i‡
deföed
 ( 
__ICCARM__
 )

39 #¥agm®
sy°em_ö˛ude


42 #i‚de‡
__CORE_CM4_H_GENERIC


43 
	#__CORE_CM4_H_GENERIC


	)

45 #ifde‡
__˝lu•lus


71 
	#__CM4_CMSIS_VERSION_MAIN
 (0x04Ë

	)

72 
	#__CM4_CMSIS_VERSION_SUB
 (0x00Ë

	)

73 
	#__CM4_CMSIS_VERSION
 ((
__CM4_CMSIS_VERSION_MAIN
 << 16) | \

74 
__CM4_CMSIS_VERSION_SUB
 )

	)

76 
	#__CORTEX_M
 (0x04Ë

	)

79 #i‡ 
deföed
 ( 
__CC_ARM
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
__ölöe


	)

82 
	#__STATIC_INLINE
 
__ölöe


	)

84 #ñi‡
deföed
 ( 
__GNUC__
 )

85 
	#__ASM
 
__asm


	)

86 
	#__INLINE
 
ölöe


	)

87 
	#__STATIC_INLINE
 
ölöe


	)

89 #ñi‡
deföed
 ( 
__ICCARM__
 )

90 
	#__ASM
 
__asm


	)

91 
	#__INLINE
 
ölöe


	)

92 
	#__STATIC_INLINE
 
ölöe


	)

94 #ñi‡
deföed
 ( 
__TMS470__
 )

95 
	#__ASM
 
__asm


	)

96 
	#__STATIC_INLINE
 
ölöe


	)

98 #ñi‡
deföed
 ( 
__TASKING__
 )

99 
	#__ASM
 
__asm


	)

100 
	#__INLINE
 
ölöe


	)

101 
	#__STATIC_INLINE
 
ölöe


	)

103 #ñi‡
deföed
 ( 
__CSMC__
 )

104 
	#__∑cked


	)

105 
	#__ASM
 
_asm


	)

106 
	#__INLINE
 
ölöe


	)

107 
	#__STATIC_INLINE
 
ölöe


	)

114 #i‡
deföed
 ( 
__CC_ARM
 )

115 #i‡
deföed
 
__TARGET_FPU_VFP


116 #i‡(
__FPU_PRESENT
 == 1)

117 
	#__FPU_USED
 1

	)

120 
	#__FPU_USED
 0

	)

123 
	#__FPU_USED
 0

	)

126 #ñi‡
deföed
 ( 
__GNUC__
 )

127 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

128 #i‡(
__FPU_PRESENT
 == 1)

129 
	#__FPU_USED
 1

	)

132 
	#__FPU_USED
 0

	)

135 
	#__FPU_USED
 0

	)

138 #ñi‡
deföed
 ( 
__ICCARM__
 )

139 #i‡
deföed
 
__ARMVFP__


140 #i‡(
__FPU_PRESENT
 == 1)

141 
	#__FPU_USED
 1

	)

144 
	#__FPU_USED
 0

	)

147 
	#__FPU_USED
 0

	)

150 #ñi‡
deföed
 ( 
__TMS470__
 )

151 #i‡
deföed
 
__TI_VFP_SUPPORT__


152 #i‡(
__FPU_PRESENT
 == 1)

153 
	#__FPU_USED
 1

	)

156 
	#__FPU_USED
 0

	)

159 
	#__FPU_USED
 0

	)

162 #ñi‡
deföed
 ( 
__TASKING__
 )

163 #i‡
deföed
 
__FPU_VFP__


164 #i‡(
__FPU_PRESENT
 == 1)

165 
	#__FPU_USED
 1

	)

168 
	#__FPU_USED
 0

	)

171 
	#__FPU_USED
 0

	)

174 #ñi‡
deföed
 ( 
__CSMC__
 )

175 #i‡–
__CSMC__
 & 0x400)

176 #i‡(
__FPU_PRESENT
 == 1)

177 
	#__FPU_USED
 1

	)

180 
	#__FPU_USED
 0

	)

183 
	#__FPU_USED
 0

	)

187 
	~<°döt.h
>

188 
	~<c‹e_cmIn°r.h
>

189 
	~<c‹e_cmFunc.h
>

190 
	~<c‹e_cmSimd.h
>

192 #ifde‡
__˝lu•lus


198 #i‚de‡
__CMSIS_GENERIC


200 #i‚de‡
__CORE_CM4_H_DEPENDANT


201 
	#__CORE_CM4_H_DEPENDANT


	)

203 #ifde‡
__˝lu•lus


208 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


209 #i‚de‡
__CM4_REV


210 
	#__CM4_REV
 0x0000

	)

214 #i‚de‡
__FPU_PRESENT


215 
	#__FPU_PRESENT
 0

	)

219 #i‚de‡
__MPU_PRESENT


220 
	#__MPU_PRESENT
 0

	)

224 #i‚de‡
__NVIC_PRIO_BITS


225 
	#__NVIC_PRIO_BITS
 4

	)

229 #i‚de‡
__Víd‹_SysTickC⁄fig


230 
	#__Víd‹_SysTickC⁄fig
 0

	)

243 #ifde‡
__˝lu•lus


244 
	#__I
 vﬁ©ûê

	)

246 
	#__I
 vﬁ©ûêc⁄°

	)

248 
	#__O
 vﬁ©ûê

	)

249 
	#__IO
 vﬁ©ûê

	)

282 #i‡(
__CORTEX_M
 != 0x04)

283 
uöt32_t
 
_ª£rved0
:27;

285 
uöt32_t
 
_ª£rved0
:16;

286 
uöt32_t
 
GE
:4;

287 
uöt32_t
 
_ª£rved1
:7;

289 
uöt32_t
 
Q
:1;

290 
uöt32_t
 
V
:1;

291 
uöt32_t
 
C
:1;

292 
uöt32_t
 
Z
:1;

293 
uöt32_t
 
N
:1;

294 } 
b
;

295 
uöt32_t
 
w
;

296 } 
	tAPSR_Ty≥
;

305 
uöt32_t
 
ISR
:9;

306 
uöt32_t
 
_ª£rved0
:23;

307 } 
b
;

308 
uöt32_t
 
w
;

309 } 
	tIPSR_Ty≥
;

318 
uöt32_t
 
ISR
:9;

319 #i‡(
__CORTEX_M
 != 0x04)

320 
uöt32_t
 
_ª£rved0
:15;

322 
uöt32_t
 
_ª£rved0
:7;

323 
uöt32_t
 
GE
:4;

324 
uöt32_t
 
_ª£rved1
:4;

326 
uöt32_t
 
T
:1;

327 
uöt32_t
 
IT
:2;

328 
uöt32_t
 
Q
:1;

329 
uöt32_t
 
V
:1;

330 
uöt32_t
 
C
:1;

331 
uöt32_t
 
Z
:1;

332 
uöt32_t
 
N
:1;

333 } 
b
;

334 
uöt32_t
 
w
;

335 } 
	txPSR_Ty≥
;

344 
uöt32_t
 
nPRIV
:1;

345 
uöt32_t
 
SPSEL
:1;

346 
uöt32_t
 
FPCA
:1;

347 
uöt32_t
 
_ª£rved0
:29;

348 } 
b
;

349 
uöt32_t
 
w
;

350 } 
	tCONTROL_Ty≥
;

365 
__IO
 
uöt32_t
 
ISER
[8];

366 
uöt32_t
 
RESERVED0
[24];

367 
__IO
 
uöt32_t
 
ICER
[8];

368 
uöt32_t
 
RSERVED1
[24];

369 
__IO
 
uöt32_t
 
ISPR
[8];

370 
uöt32_t
 
RESERVED2
[24];

371 
__IO
 
uöt32_t
 
ICPR
[8];

372 
uöt32_t
 
RESERVED3
[24];

373 
__IO
 
uöt32_t
 
IABR
[8];

374 
uöt32_t
 
RESERVED4
[56];

375 
__IO
 
uöt8_t
 
IP
[240];

376 
uöt32_t
 
RESERVED5
[644];

377 
__O
 
uöt32_t
 
STIR
;

378 } 
	tNVIC_Ty≥
;

381 
	#NVIC_STIR_INTID_Pos
 0

	)

382 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

397 
__I
 
uöt32_t
 
CPUID
;

398 
__IO
 
uöt32_t
 
ICSR
;

399 
__IO
 
uöt32_t
 
VTOR
;

400 
__IO
 
uöt32_t
 
AIRCR
;

401 
__IO
 
uöt32_t
 
SCR
;

402 
__IO
 
uöt32_t
 
CCR
;

403 
__IO
 
uöt8_t
 
SHP
[12];

404 
__IO
 
uöt32_t
 
SHCSR
;

405 
__IO
 
uöt32_t
 
CFSR
;

406 
__IO
 
uöt32_t
 
HFSR
;

407 
__IO
 
uöt32_t
 
DFSR
;

408 
__IO
 
uöt32_t
 
MMFAR
;

409 
__IO
 
uöt32_t
 
BFAR
;

410 
__IO
 
uöt32_t
 
AFSR
;

411 
__I
 
uöt32_t
 
PFR
[2];

412 
__I
 
uöt32_t
 
DFR
;

413 
__I
 
uöt32_t
 
ADR
;

414 
__I
 
uöt32_t
 
MMFR
[4];

415 
__I
 
uöt32_t
 
ISAR
[5];

416 
uöt32_t
 
RESERVED0
[5];

417 
__IO
 
uöt32_t
 
CPACR
;

418 } 
	tSCB_Ty≥
;

421 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

422 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

424 
	#SCB_CPUID_VARIANT_Pos
 20

	)

425 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

427 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

428 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

430 
	#SCB_CPUID_PARTNO_Pos
 4

	)

431 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

433 
	#SCB_CPUID_REVISION_Pos
 0

	)

434 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

437 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

438 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

440 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

441 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

443 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

444 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

446 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

447 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

449 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

450 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

452 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

453 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

455 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

456 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

458 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

459 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

461 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

462 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

464 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

465 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

468 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

469 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

472 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

473 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

475 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

476 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

478 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

479 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

481 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

482 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

484 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

485 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

487 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

488 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

490 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

491 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

494 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

495 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

497 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

498 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

500 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

501 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

504 
	#SCB_CCR_STKALIGN_Pos
 9

	)

505 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

507 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

508 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

510 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

511 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

513 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

514 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

516 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

517 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

519 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

520 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

523 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

524 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

526 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

527 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

529 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

530 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

532 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

533 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

535 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

536 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

538 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

539 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

541 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

542 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

544 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

545 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

547 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

548 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

550 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

551 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

553 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

554 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

556 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

557 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

559 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

560 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

562 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

563 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

566 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

567 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

569 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

570 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

572 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

573 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

576 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

577 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

579 
	#SCB_HFSR_FORCED_Pos
 30

	)

580 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

582 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

583 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

586 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

587 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

589 
	#SCB_DFSR_VCATCH_Pos
 3

	)

590 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

592 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

593 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

595 
	#SCB_DFSR_BKPT_Pos
 1

	)

596 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

598 
	#SCB_DFSR_HALTED_Pos
 0

	)

599 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

614 
uöt32_t
 
RESERVED0
[1];

615 
__I
 
uöt32_t
 
ICTR
;

616 
__IO
 
uöt32_t
 
ACTLR
;

617 } 
	tSCnSCB_Ty≥
;

620 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

621 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

624 
	#SCnSCB_ACTLR_DISOOFP_Pos
 9

	)

625 
	#SCnSCB_ACTLR_DISOOFP_Msk
 (1UL << 
SCnSCB_ACTLR_DISOOFP_Pos
Ë

	)

627 
	#SCnSCB_ACTLR_DISFPCA_Pos
 8

	)

628 
	#SCnSCB_ACTLR_DISFPCA_Msk
 (1UL << 
SCnSCB_ACTLR_DISFPCA_Pos
Ë

	)

630 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2

	)

631 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

633 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1

	)

634 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

636 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

637 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

652 
__IO
 
uöt32_t
 
CTRL
;

653 
__IO
 
uöt32_t
 
LOAD
;

654 
__IO
 
uöt32_t
 
VAL
;

655 
__I
 
uöt32_t
 
CALIB
;

656 } 
	tSysTick_Ty≥
;

659 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

660 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

662 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

663 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

665 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

666 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

668 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

669 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

672 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

673 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

676 
	#SysTick_VAL_CURRENT_Pos
 0

	)

677 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

680 
	#SysTick_CALIB_NOREF_Pos
 31

	)

681 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

683 
	#SysTick_CALIB_SKEW_Pos
 30

	)

684 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

686 
	#SysTick_CALIB_TENMS_Pos
 0

	)

687 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_CALIB_TENMS_Pos
Ë

	)

702 
__O
 union

704 
__O
 
uöt8_t
 
u8
;

705 
__O
 
uöt16_t
 
u16
;

706 
__O
 
uöt32_t
 
u32
;

707 } 
PORT
 [32];

708 
uöt32_t
 
RESERVED0
[864];

709 
__IO
 
uöt32_t
 
TER
;

710 
uöt32_t
 
RESERVED1
[15];

711 
__IO
 
uöt32_t
 
TPR
;

712 
uöt32_t
 
RESERVED2
[15];

713 
__IO
 
uöt32_t
 
TCR
;

714 
uöt32_t
 
RESERVED3
[29];

715 
__O
 
uöt32_t
 
IWR
;

716 
__I
 
uöt32_t
 
IRR
;

717 
__IO
 
uöt32_t
 
IMCR
;

718 
uöt32_t
 
RESERVED4
[43];

719 
__O
 
uöt32_t
 
LAR
;

720 
__I
 
uöt32_t
 
LSR
;

721 
uöt32_t
 
RESERVED5
[6];

722 
__I
 
uöt32_t
 
PID4
;

723 
__I
 
uöt32_t
 
PID5
;

724 
__I
 
uöt32_t
 
PID6
;

725 
__I
 
uöt32_t
 
PID7
;

726 
__I
 
uöt32_t
 
PID0
;

727 
__I
 
uöt32_t
 
PID1
;

728 
__I
 
uöt32_t
 
PID2
;

729 
__I
 
uöt32_t
 
PID3
;

730 
__I
 
uöt32_t
 
CID0
;

731 
__I
 
uöt32_t
 
CID1
;

732 
__I
 
uöt32_t
 
CID2
;

733 
__I
 
uöt32_t
 
CID3
;

734 } 
	tITM_Ty≥
;

737 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

738 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

741 
	#ITM_TCR_BUSY_Pos
 23

	)

742 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

744 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

745 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

747 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

748 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

750 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

751 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

753 
	#ITM_TCR_SWOENA_Pos
 4

	)

754 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

756 
	#ITM_TCR_DWTENA_Pos
 3

	)

757 
	#ITM_TCR_DWTENA_Msk
 (1UL << 
ITM_TCR_DWTENA_Pos
Ë

	)

759 
	#ITM_TCR_SYNCENA_Pos
 2

	)

760 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

762 
	#ITM_TCR_TSENA_Pos
 1

	)

763 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

765 
	#ITM_TCR_ITMENA_Pos
 0

	)

766 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

769 
	#ITM_IWR_ATVALIDM_Pos
 0

	)

770 
	#ITM_IWR_ATVALIDM_Msk
 (1UL << 
ITM_IWR_ATVALIDM_Pos
Ë

	)

773 
	#ITM_IRR_ATREADYM_Pos
 0

	)

774 
	#ITM_IRR_ATREADYM_Msk
 (1UL << 
ITM_IRR_ATREADYM_Pos
Ë

	)

777 
	#ITM_IMCR_INTEGRATION_Pos
 0

	)

778 
	#ITM_IMCR_INTEGRATION_Msk
 (1UL << 
ITM_IMCR_INTEGRATION_Pos
Ë

	)

781 
	#ITM_LSR_ByãAcc_Pos
 2

	)

782 
	#ITM_LSR_ByãAcc_Msk
 (1UL << 
ITM_LSR_ByãAcc_Pos
Ë

	)

784 
	#ITM_LSR_Ac˚ss_Pos
 1

	)

785 
	#ITM_LSR_Ac˚ss_Msk
 (1UL << 
ITM_LSR_Ac˚ss_Pos
Ë

	)

787 
	#ITM_LSR_Pª£¡_Pos
 0

	)

788 
	#ITM_LSR_Pª£¡_Msk
 (1UL << 
ITM_LSR_Pª£¡_Pos
Ë

	)

803 
__IO
 
uöt32_t
 
CTRL
;

804 
__IO
 
uöt32_t
 
CYCCNT
;

805 
__IO
 
uöt32_t
 
CPICNT
;

806 
__IO
 
uöt32_t
 
EXCCNT
;

807 
__IO
 
uöt32_t
 
SLEEPCNT
;

808 
__IO
 
uöt32_t
 
LSUCNT
;

809 
__IO
 
uöt32_t
 
FOLDCNT
;

810 
__I
 
uöt32_t
 
PCSR
;

811 
__IO
 
uöt32_t
 
COMP0
;

812 
__IO
 
uöt32_t
 
MASK0
;

813 
__IO
 
uöt32_t
 
FUNCTION0
;

814 
uöt32_t
 
RESERVED0
[1];

815 
__IO
 
uöt32_t
 
COMP1
;

816 
__IO
 
uöt32_t
 
MASK1
;

817 
__IO
 
uöt32_t
 
FUNCTION1
;

818 
uöt32_t
 
RESERVED1
[1];

819 
__IO
 
uöt32_t
 
COMP2
;

820 
__IO
 
uöt32_t
 
MASK2
;

821 
__IO
 
uöt32_t
 
FUNCTION2
;

822 
uöt32_t
 
RESERVED2
[1];

823 
__IO
 
uöt32_t
 
COMP3
;

824 
__IO
 
uöt32_t
 
MASK3
;

825 
__IO
 
uöt32_t
 
FUNCTION3
;

826 } 
	tDWT_Ty≥
;

829 
	#DWT_CTRL_NUMCOMP_Pos
 28

	)

830 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

832 
	#DWT_CTRL_NOTRCPKT_Pos
 27

	)

833 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

835 
	#DWT_CTRL_NOEXTTRIG_Pos
 26

	)

836 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

838 
	#DWT_CTRL_NOCYCCNT_Pos
 25

	)

839 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

841 
	#DWT_CTRL_NOPRFCNT_Pos
 24

	)

842 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

844 
	#DWT_CTRL_CYCEVTENA_Pos
 22

	)

845 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

847 
	#DWT_CTRL_FOLDEVTENA_Pos
 21

	)

848 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

850 
	#DWT_CTRL_LSUEVTENA_Pos
 20

	)

851 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

853 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19

	)

854 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

856 
	#DWT_CTRL_EXCEVTENA_Pos
 18

	)

857 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

859 
	#DWT_CTRL_CPIEVTENA_Pos
 17

	)

860 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

862 
	#DWT_CTRL_EXCTRCENA_Pos
 16

	)

863 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

865 
	#DWT_CTRL_PCSAMPLENA_Pos
 12

	)

866 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

868 
	#DWT_CTRL_SYNCTAP_Pos
 10

	)

869 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

871 
	#DWT_CTRL_CYCTAP_Pos
 9

	)

872 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

874 
	#DWT_CTRL_POSTINIT_Pos
 5

	)

875 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

877 
	#DWT_CTRL_POSTPRESET_Pos
 1

	)

878 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

880 
	#DWT_CTRL_CYCCNTENA_Pos
 0

	)

881 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCCNTENA_Pos
Ë

	)

884 
	#DWT_CPICNT_CPICNT_Pos
 0

	)

885 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL << 
DWT_CPICNT_CPICNT_Pos
Ë

	)

888 
	#DWT_EXCCNT_EXCCNT_Pos
 0

	)

889 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL << 
DWT_EXCCNT_EXCCNT_Pos
Ë

	)

892 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0

	)

893 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL << 
DWT_SLEEPCNT_SLEEPCNT_Pos
Ë

	)

896 
	#DWT_LSUCNT_LSUCNT_Pos
 0

	)

897 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL << 
DWT_LSUCNT_LSUCNT_Pos
Ë

	)

900 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0

	)

901 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL << 
DWT_FOLDCNT_FOLDCNT_Pos
Ë

	)

904 
	#DWT_MASK_MASK_Pos
 0

	)

905 
	#DWT_MASK_MASK_Msk
 (0x1FUL << 
DWT_MASK_MASK_Pos
Ë

	)

908 
	#DWT_FUNCTION_MATCHED_Pos
 24

	)

909 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

911 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16

	)

912 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

914 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12

	)

915 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

917 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10

	)

918 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

920 
	#DWT_FUNCTION_LNK1ENA_Pos
 9

	)

921 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

923 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8

	)

924 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

926 
	#DWT_FUNCTION_CYCMATCH_Pos
 7

	)

927 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

929 
	#DWT_FUNCTION_EMITRANGE_Pos
 5

	)

930 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

932 
	#DWT_FUNCTION_FUNCTION_Pos
 0

	)

933 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL << 
DWT_FUNCTION_FUNCTION_Pos
Ë

	)

948 
__IO
 
uöt32_t
 
SSPSR
;

949 
__IO
 
uöt32_t
 
CSPSR
;

950 
uöt32_t
 
RESERVED0
[2];

951 
__IO
 
uöt32_t
 
ACPR
;

952 
uöt32_t
 
RESERVED1
[55];

953 
__IO
 
uöt32_t
 
SPPR
;

954 
uöt32_t
 
RESERVED2
[131];

955 
__I
 
uöt32_t
 
FFSR
;

956 
__IO
 
uöt32_t
 
FFCR
;

957 
__I
 
uöt32_t
 
FSCR
;

958 
uöt32_t
 
RESERVED3
[759];

959 
__I
 
uöt32_t
 
TRIGGER
;

960 
__I
 
uöt32_t
 
FIFO0
;

961 
__I
 
uöt32_t
 
ITATBCTR2
;

962 
uöt32_t
 
RESERVED4
[1];

963 
__I
 
uöt32_t
 
ITATBCTR0
;

964 
__I
 
uöt32_t
 
FIFO1
;

965 
__IO
 
uöt32_t
 
ITCTRL
;

966 
uöt32_t
 
RESERVED5
[39];

967 
__IO
 
uöt32_t
 
CLAIMSET
;

968 
__IO
 
uöt32_t
 
CLAIMCLR
;

969 
uöt32_t
 
RESERVED7
[8];

970 
__I
 
uöt32_t
 
DEVID
;

971 
__I
 
uöt32_t
 
DEVTYPE
;

972 } 
	tTPI_Ty≥
;

975 
	#TPI_ACPR_PRESCALER_Pos
 0

	)

976 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL << 
TPI_ACPR_PRESCALER_Pos
Ë

	)

979 
	#TPI_SPPR_TXMODE_Pos
 0

	)

980 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL << 
TPI_SPPR_TXMODE_Pos
Ë

	)

983 
	#TPI_FFSR_FtN⁄St›_Pos
 3

	)

984 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

986 
	#TPI_FFSR_TCPª£¡_Pos
 2

	)

987 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

989 
	#TPI_FFSR_FtSt›≥d_Pos
 1

	)

990 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

992 
	#TPI_FFSR_FlInProg_Pos
 0

	)

993 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL << 
TPI_FFSR_FlInProg_Pos
Ë

	)

996 
	#TPI_FFCR_TrigIn_Pos
 8

	)

997 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

999 
	#TPI_FFCR_EnFC⁄t_Pos
 1

	)

1000 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

1003 
	#TPI_TRIGGER_TRIGGER_Pos
 0

	)

1004 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL << 
TPI_TRIGGER_TRIGGER_Pos
Ë

	)

1007 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29

	)

1008 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

1010 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27

	)

1011 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

1013 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26

	)

1014 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

1016 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24

	)

1017 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

1019 
	#TPI_FIFO0_ETM2_Pos
 16

	)

1020 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

1022 
	#TPI_FIFO0_ETM1_Pos
 8

	)

1023 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

1025 
	#TPI_FIFO0_ETM0_Pos
 0

	)

1026 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL << 
TPI_FIFO0_ETM0_Pos
Ë

	)

1029 
	#TPI_ITATBCTR2_ATREADY_Pos
 0

	)

1030 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR2_ATREADY_Pos
Ë

	)

1033 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29

	)

1034 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

1036 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27

	)

1037 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

1039 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26

	)

1040 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

1042 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24

	)

1043 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

1045 
	#TPI_FIFO1_ITM2_Pos
 16

	)

1046 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

1048 
	#TPI_FIFO1_ITM1_Pos
 8

	)

1049 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

1051 
	#TPI_FIFO1_ITM0_Pos
 0

	)

1052 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL << 
TPI_FIFO1_ITM0_Pos
Ë

	)

1055 
	#TPI_ITATBCTR0_ATREADY_Pos
 0

	)

1056 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR0_ATREADY_Pos
Ë

	)

1059 
	#TPI_ITCTRL_Mode_Pos
 0

	)

1060 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL << 
TPI_ITCTRL_Mode_Pos
Ë

	)

1063 
	#TPI_DEVID_NRZVALID_Pos
 11

	)

1064 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

1066 
	#TPI_DEVID_MANCVALID_Pos
 10

	)

1067 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

1069 
	#TPI_DEVID_PTINVALID_Pos
 9

	)

1070 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

1072 
	#TPI_DEVID_MöBufSz_Pos
 6

	)

1073 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

1075 
	#TPI_DEVID_AsynClkIn_Pos
 5

	)

1076 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

1078 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0

	)

1079 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL << 
TPI_DEVID_NrTø˚I≈ut_Pos
Ë

	)

1082 
	#TPI_DEVTYPE_SubTy≥_Pos
 0

	)

1083 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL << 
TPI_DEVTYPE_SubTy≥_Pos
Ë

	)

1085 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4

	)

1086 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

1091 #i‡(
__MPU_PRESENT
 == 1)

1102 
__I
 
uöt32_t
 
TYPE
;

1103 
__IO
 
uöt32_t
 
CTRL
;

1104 
__IO
 
uöt32_t
 
RNR
;

1105 
__IO
 
uöt32_t
 
RBAR
;

1106 
__IO
 
uöt32_t
 
RASR
;

1107 
__IO
 
uöt32_t
 
RBAR_A1
;

1108 
__IO
 
uöt32_t
 
RASR_A1
;

1109 
__IO
 
uöt32_t
 
RBAR_A2
;

1110 
__IO
 
uöt32_t
 
RASR_A2
;

1111 
__IO
 
uöt32_t
 
RBAR_A3
;

1112 
__IO
 
uöt32_t
 
RASR_A3
;

1113 } 
	tMPU_Ty≥
;

1116 
	#MPU_TYPE_IREGION_Pos
 16

	)

1117 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1119 
	#MPU_TYPE_DREGION_Pos
 8

	)

1120 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1122 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

1123 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

1126 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

1127 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1129 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

1130 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1132 
	#MPU_CTRL_ENABLE_Pos
 0

	)

1133 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

1136 
	#MPU_RNR_REGION_Pos
 0

	)

1137 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

1140 
	#MPU_RBAR_ADDR_Pos
 5

	)

1141 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1143 
	#MPU_RBAR_VALID_Pos
 4

	)

1144 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1146 
	#MPU_RBAR_REGION_Pos
 0

	)

1147 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

1150 
	#MPU_RASR_ATTRS_Pos
 16

	)

1151 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1153 
	#MPU_RASR_XN_Pos
 28

	)

1154 
	#MPU_RASR_XN_Msk
 (1UL << 
MPU_RASR_XN_Pos
Ë

	)

1156 
	#MPU_RASR_AP_Pos
 24

	)

1157 
	#MPU_RASR_AP_Msk
 (0x7UL << 
MPU_RASR_AP_Pos
Ë

	)

1159 
	#MPU_RASR_TEX_Pos
 19

	)

1160 
	#MPU_RASR_TEX_Msk
 (0x7UL << 
MPU_RASR_TEX_Pos
Ë

	)

1162 
	#MPU_RASR_S_Pos
 18

	)

1163 
	#MPU_RASR_S_Msk
 (1UL << 
MPU_RASR_S_Pos
Ë

	)

1165 
	#MPU_RASR_C_Pos
 17

	)

1166 
	#MPU_RASR_C_Msk
 (1UL << 
MPU_RASR_C_Pos
Ë

	)

1168 
	#MPU_RASR_B_Pos
 16

	)

1169 
	#MPU_RASR_B_Msk
 (1UL << 
MPU_RASR_B_Pos
Ë

	)

1171 
	#MPU_RASR_SRD_Pos
 8

	)

1172 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1174 
	#MPU_RASR_SIZE_Pos
 1

	)

1175 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1177 
	#MPU_RASR_ENABLE_Pos
 0

	)

1178 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

1184 #i‡(
__FPU_PRESENT
 == 1)

1195 
uöt32_t
 
RESERVED0
[1];

1196 
__IO
 
uöt32_t
 
FPCCR
;

1197 
__IO
 
uöt32_t
 
FPCAR
;

1198 
__IO
 
uöt32_t
 
FPDSCR
;

1199 
__I
 
uöt32_t
 
MVFR0
;

1200 
__I
 
uöt32_t
 
MVFR1
;

1201 } 
	tFPU_Ty≥
;

1204 
	#FPU_FPCCR_ASPEN_Pos
 31

	)

1205 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

1207 
	#FPU_FPCCR_LSPEN_Pos
 30

	)

1208 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

1210 
	#FPU_FPCCR_MONRDY_Pos
 8

	)

1211 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

1213 
	#FPU_FPCCR_BFRDY_Pos
 6

	)

1214 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

1216 
	#FPU_FPCCR_MMRDY_Pos
 5

	)

1217 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

1219 
	#FPU_FPCCR_HFRDY_Pos
 4

	)

1220 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

1222 
	#FPU_FPCCR_THREAD_Pos
 3

	)

1223 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

1225 
	#FPU_FPCCR_USER_Pos
 1

	)

1226 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

1228 
	#FPU_FPCCR_LSPACT_Pos
 0

	)

1229 
	#FPU_FPCCR_LSPACT_Msk
 (1UL << 
FPU_FPCCR_LSPACT_Pos
Ë

	)

1232 
	#FPU_FPCAR_ADDRESS_Pos
 3

	)

1233 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

1236 
	#FPU_FPDSCR_AHP_Pos
 26

	)

1237 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

1239 
	#FPU_FPDSCR_DN_Pos
 25

	)

1240 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

1242 
	#FPU_FPDSCR_FZ_Pos
 24

	)

1243 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

1245 
	#FPU_FPDSCR_RMode_Pos
 22

	)

1246 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

1249 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28

	)

1250 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

1252 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24

	)

1253 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

1255 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20

	)

1256 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

1258 
	#FPU_MVFR0_Divide_Pos
 16

	)

1259 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

1261 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12

	)

1262 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

1264 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8

	)

1265 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

1267 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4

	)

1268 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

1270 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0

	)

1271 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL << 
FPU_MVFR0_A_SIMD_ªgi°îs_Pos
Ë

	)

1274 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28

	)

1275 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

1277 
	#FPU_MVFR1_FP_HPFP_Pos
 24

	)

1278 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

1280 
	#FPU_MVFR1_D_NaN_mode_Pos
 4

	)

1281 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

1283 
	#FPU_MVFR1_FtZ_mode_Pos
 0

	)

1284 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL << 
FPU_MVFR1_FtZ_mode_Pos
Ë

	)

1300 
__IO
 
uöt32_t
 
DHCSR
;

1301 
__O
 
uöt32_t
 
DCRSR
;

1302 
__IO
 
uöt32_t
 
DCRDR
;

1303 
__IO
 
uöt32_t
 
DEMCR
;

1304 } 
	tC‹eDebug_Ty≥
;

1307 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

1308 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1310 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

1311 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1313 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

1314 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1316 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

1317 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1319 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

1320 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1322 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

1323 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1325 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

1326 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1328 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

1329 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1331 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

1332 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1334 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

1335 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1337 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

1338 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1340 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

1341 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

1344 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

1345 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1347 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

1348 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

1351 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

1352 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1354 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

1355 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1357 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

1358 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1360 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

1361 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1363 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

1364 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1366 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

1367 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1369 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

1370 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1372 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

1373 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1375 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

1376 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1378 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

1379 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1381 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

1382 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1384 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

1385 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1387 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

1388 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

1400 
	#SCS_BASE
 (0xE000E000ULË

	)

1401 
	#ITM_BASE
 (0xE0000000ULË

	)

1402 
	#DWT_BASE
 (0xE0001000ULË

	)

1403 
	#TPI_BASE
 (0xE0040000ULË

	)

1404 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1405 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1406 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1407 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1409 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1410 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1411 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1412 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1413 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1414 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1415 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1416 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1418 #i‡(
__MPU_PRESENT
 == 1)

1419 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1420 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1423 #i‡(
__FPU_PRESENT
 == 1)

1424 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

1425 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

1462 
__STATIC_INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1464 
uöt32_t
 
ªg_vÆue
;

1465 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1467 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1468 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1469 
ªg_vÆue
 = (reg_value |

1470 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1471 (
Pri‹ôyGroupTmp
 << 8));

1472 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1482 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1484  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1494 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1497 
NVIC
->
ISER
[(
uöt32_t
)((
öt32_t
)
IRQn
) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));

1507 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1509 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1523 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1525 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1535 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1537 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1547 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1549 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1562 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1564 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1577 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1579 if(
IRQn
 < 0) {

1580 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1582 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1597 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1600 if(
IRQn
 < 0) {

1601 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1603 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1619 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1621 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1622 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1623 
uöt32_t
 
SubPri‹ôyBôs
;

1625 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1626 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1629 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1630 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1647 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1649 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1650 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1651 
uöt32_t
 
SubPri‹ôyBôs
;

1653 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1654 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1656 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1657 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1665 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

1667 
__DSB
();

1669 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1670 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1671 
SCB_AIRCR_SYSRESETREQ_Msk
);

1672 
__DSB
();

1687 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1704 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1706 i‡((
ticks
 - 1Ë> 
SysTick_LOAD_RELOAD_Msk
)  (1);

1708 
SysTick
->
LOAD
 = 
ticks
 - 1;

1709 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1710 
SysTick
->
VAL
 = 0;

1711 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1712 
SysTick_CTRL_TICKINT_Msk
 |

1713 
SysTick_CTRL_ENABLE_Msk
;

1730 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1731 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1744 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1746 i‡((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1747 (
	gITM
->
	gTER
 & (1UL << 0) ) )

1749 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1750 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1752  (
	gch
);

1763 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 () {

1764 
öt32_t
 
	gch
 = -1;

1766 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1767 
ch
 = 
ITM_RxBuf„r
;

1768 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1771  (
	gch
);

1782 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 () {

1784 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1796 #ifde‡
__˝lu•lus


	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\CMSIS\Include\core_cmFunc.h

38 #i‚de‡
__CORE_CMFUNC_H


39 
	#__CORE_CMFUNC_H


	)

48 #i‡ 
deföed
 ( 
__CC_ARM
 )

51 #i‡(
__ARMCC_VERSION
 < 400677)

64 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

66 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

67 (
__ªgC⁄åﬁ
);

68 
	}
}

77 
__STATIC_INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

79 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

80 
__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

81 
	}
}

90 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_IPSR
()

92 
uöt32_t
 
__ªgIPSR
 
	`__ASM
("ipsr");

93 (
__ªgIPSR
);

94 
	}
}

103 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_APSR
()

105 
uöt32_t
 
__ªgAPSR
 
	`__ASM
("apsr");

106 (
__ªgAPSR
);

107 
	}
}

116 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_xPSR
()

118 
uöt32_t
 
__ªgXPSR
 
	`__ASM
("xpsr");

119 (
__ªgXPSR
);

120 
	}
}

129 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PSP
()

131 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

132 (
__ªgPro˚ssSèckPoöãr
);

133 
	}
}

142 
__STATIC_INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

144 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

145 
__ªgPro˚ssSèckPoöãr
 = 
t›OfProcSèck
;

146 
	}
}

155 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_MSP
()

157 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

158 (
__ªgMaöSèckPoöãr
);

159 
	}
}

168 
__STATIC_INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

170 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

171 
__ªgMaöSèckPoöãr
 = 
t›OfMaöSèck
;

172 
	}
}

181 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

183 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

184 (
__ªgPriMask
);

185 
	}
}

194 
__STATIC_INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

196 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

197 
__ªgPriMask
 = (
¥iMask
);

198 
	}
}

201 #i‡ (
__CORTEX_M
 >0x03Ë|| (
__CORTEX_SC
 >= 300)

208 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

216 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

225 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

227 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

228 (
__ªgBa£Pri
);

229 
	}
}

238 
__STATIC_INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

240 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

241 
__ªgBa£Pri
 = (
ba£Pri
 & 0xff);

242 
	}
}

251 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

253 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

254 (
__ªgFau…Mask
);

255 
	}
}

264 
__STATIC_INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

266 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

267 
__ªgFau…Mask
 = (
Áu…Mask
 & (
uöt32_t
)1);

268 
	}
}

273 #i‡ (
__CORTEX_M
 == 0x04) || (__CORTEX_M == 0x07)

281 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

283 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

284 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

285 (
__ªgÂs¸
);

289 
	}
}

298 
__STATIC_INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

300 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

301 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

302 
__ªgÂs¸
 = (
Âs¸
);

304 
	}
}

309 #ñi‡
deföed
 ( 
__GNUC__
 )

317 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__íabÀ_úq
()

319 
__ASM
 volatile ("cpsie i" : : : "memory");

320 
	}
}

328 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__dißbÀ_úq
()

330 
__ASM
 volatile ("cpsid i" : : : "memory");

331 
	}
}

340 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

342 
uöt32_t
 
ªsu…
;

344 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

345 (
ªsu…
);

346 
	}
}

355 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

357 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) : "memory");

358 
	}
}

367 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_IPSR
()

369 
uöt32_t
 
ªsu…
;

371 
__ASM
 vﬁ©ûê("MRS %0, ip§" : "Ù" (
ªsu…
) );

372 (
ªsu…
);

373 
	}
}

382 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_APSR
()

384 
uöt32_t
 
ªsu…
;

386 
__ASM
 vﬁ©ûê("MRS %0,áp§" : "Ù" (
ªsu…
) );

387 (
ªsu…
);

388 
	}
}

397 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_xPSR
()

399 
uöt32_t
 
ªsu…
;

401 
__ASM
 vﬁ©ûê("MRS %0, xp§" : "Ù" (
ªsu…
) );

402 (
ªsu…
);

403 
	}
}

412 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PSP
()

414 
uöt32_t
 
ªsu…
;

416 
__ASM
 vﬁ©ûê("MRS %0,Ö•\n" : "Ù" (
ªsu…
) );

417 (
ªsu…
);

418 
	}
}

427 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

429 
__ASM
 vﬁ©ûê("MSRÖ•, %0\n" : : "r" (
t›OfProcSèck
) : "sp");

430 
	}
}

439 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_MSP
()

441 
uöt32_t
 
ªsu…
;

443 
__ASM
 vﬁ©ûê("MRS %0, m•\n" : "Ù" (
ªsu…
) );

444 (
ªsu…
);

445 
	}
}

454 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

456 
__ASM
 vﬁ©ûê("MSR m•, %0\n" : : "r" (
t›OfMaöSèck
) : "sp");

457 
	}
}

466 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

468 
uöt32_t
 
ªsu…
;

470 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

471 (
ªsu…
);

472 
	}
}

481 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

483 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) : "memory");

484 
	}
}

487 #i‡ (
__CORTEX_M
 >= 0x03)

494 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__íabÀ_Áu…_úq
()

496 
__ASM
 volatile ("cpsie f" : : : "memory");

497 
	}
}

505 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__dißbÀ_Áu…_úq
()

507 
__ASM
 volatile ("cpsid f" : : : "memory");

508 
	}
}

517 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

519 
uöt32_t
 
ªsu…
;

521 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

522 (
ªsu…
);

523 
	}
}

532 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

534 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) : "memory");

535 
	}
}

544 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

546 
uöt32_t
 
ªsu…
;

548 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

549 (
ªsu…
);

550 
	}
}

559 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

561 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) : "memory");

562 
	}
}

567 #i‡ (
__CORTEX_M
 == 0x04) || (__CORTEX_M == 0x07)

575 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

577 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

578 
uöt32_t
 
ªsu…
;

581 
__ASM
 volatile ("");

582 
__ASM
 vﬁ©ûê("VMRS %0, fps¸" : "Ù" (
ªsu…
) );

583 
__ASM
 volatile ("");

584 (
ªsu…
);

588 
	}
}

597 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

599 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

601 
__ASM
 volatile ("");

602 
__ASM
 vﬁ©ûê("VMSR fps¸, %0" : : "r" (
Âs¸
) : "vfpcc");

603 
__ASM
 volatile ("");

605 
	}
}

610 #ñi‡
deföed
 ( 
__ICCARM__
 )

612 
	~<cmsis_ür.h
>

615 #ñi‡
deföed
 ( 
__TMS470__
 )

617 
	~<cmsis_ccs.h
>

620 #ñi‡
deföed
 ( 
__TASKING__
 )

629 #ñi‡
deföed
 ( 
__CSMC__
 )

631 
	~<cmsis_csm.h
>

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\CMSIS\Include\core_cmInstr.h

38 #i‚de‡
__CORE_CMINSTR_H


39 
	#__CORE_CMINSTR_H


	)

48 #i‡ 
deföed
 ( 
__CC_ARM
 )

51 #i‡(
__ARMCC_VERSION
 < 400677)

60 
	#__NOP
 
__n›


	)

68 
	#__WFI
 
__wfi


	)

76 
	#__WFE
 
__w„


	)

83 
	#__SEV
 
__£v


	)

92 
	#__ISB
(Ë
	`__isb
(0xF)

	)

100 
	#__DSB
(Ë
	`__dsb
(0xF)

	)

108 
	#__DMB
(Ë
	`__dmb
(0xF)

	)

118 
	#__REV
 
__ªv


	)

128 #i‚de‡
__NO_EMBEDDED_ASM


129 
__©åibuã__
((
£˘i⁄
(".ªv16_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

131 
ªv16
 
r0
,Ñ0

132 
bx
 
Ã


133 
	}
}

143 #i‚de‡
__NO_EMBEDDED_ASM


144 
__©åibuã__
((
£˘i⁄
(".ªvsh_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

146 
ªvsh
 
r0
,Ñ0

147 
bx
 
Ã


148 
	}
}

160 
	#__ROR
 
__r‹


	)

171 
	#__BKPT
(
vÆue
Ë
	`__bªakpoöt
(vÆue)

	)

174 #i‡ (
__CORTEX_M
 >0x03Ë|| (
__CORTEX_SC
 >= 300)

183 
	#__RBIT
 
__rbô


	)

193 
	#__LDREXB
(
±r
Ë((
uöt8_t
 ) 
	`__ldªx
’å))

	)

203 
	#__LDREXH
(
±r
Ë((
uöt16_t
Ë
	`__ldªx
’å))

	)

213 
	#__LDREXW
(
±r
Ë((
uöt32_t
 ) 
	`__ldªx
’å))

	)

225 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

237 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

249 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

257 
	#__CLREX
 
__˛ªx


	)

268 
	#__SSAT
 
__sßt


	)

279 
	#__USAT
 
__ußt


	)

289 
	#__CLZ
 
__˛z


	)

299 #i‚de‡
__NO_EMBEDDED_ASM


300 
__©åibuã__
((
£˘i⁄
(".ºx_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
uöt32_t
 
	$__RRX
(
uöt32_t
 
vÆue
)

302 
ºx
 
r0
,Ñ0

303 
bx
 
Ã


304 
	}
}

315 
	#__LDRBT
(
±r
Ë((
uöt8_t
 ) 
	`__ldπ
’å))

	)

325 
	#__LDRHT
(
±r
Ë((
uöt16_t
Ë
	`__ldπ
’å))

	)

335 
	#__LDRT
(
±r
Ë((
uöt32_t
 ) 
	`__ldπ
’å))

	)

345 
	#__STRBT
(
vÆue
, 
±r
Ë
	`__°π
(vÆue,Öå)

	)

355 
	#__STRHT
(
vÆue
, 
±r
Ë
	`__°π
(vÆue,Öå)

	)

365 
	#__STRT
(
vÆue
, 
±r
Ë
	`__°π
(vÆue,Öå)

	)

370 #ñi‡
deföed
 ( 
__GNUC__
 )

376 #i‡
deföed
 (
__thumb__
Ë&& !deföed (
__thumb2__
)

377 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"ˆ" (r)

	)

378 
	#__CMSIS_GCC_USE_REG
(
r
Ë"l" (r)

	)

380 
	#__CMSIS_GCC_OUT_REG
(
r
Ë"Ù" (r)

	)

381 
	#__CMSIS_GCC_USE_REG
(
r
Ë"r" (r)

	)

388 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__NOP
()

390 
__ASM
 volatile ("nop");

391 
	}
}

399 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__WFI
()

401 
__ASM
 volatile ("wfi");

402 
	}
}

410 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__WFE
()

412 
__ASM
 volatile ("wfe");

413 
	}
}

420 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__SEV
()

422 
__ASM
 volatile ("sev");

423 
	}
}

432 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__ISB
()

434 
__ASM
 volatile ("isb");

435 
	}
}

443 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__DSB
()

445 
__ASM
 volatile ("dsb");

446 
	}
}

454 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__DMB
()

456 
__ASM
 volatile ("dmb");

457 
	}
}

467 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

469 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 5)

470  
	`__buûtö_bsw≠32
(
vÆue
);

472 
uöt32_t
 
ªsu…
;

474 
__ASM
 vﬁ©ûê("ªv %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

475 (
ªsu…
);

477 
	}
}

487 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

489 
uöt32_t
 
ªsu…
;

491 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

492 (
ªsu…
);

493 
	}
}

503 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

505 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

506  ()
	`__buûtö_bsw≠16
(
vÆue
);

508 
uöt32_t
 
ªsu…
;

510 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

511 (
ªsu…
);

513 
	}
}

524 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__ROR
(
uöt32_t
 
›1
, uöt32_à
›2
)

526  (
›1
 >> 
›2
) | (op1 << (32 - op2));

527 
	}
}

538 
	#__BKPT
(
vÆue
Ë
__ASM
 vﬁ©ûê("bk± "#vÆue)

	)

541 #i‡ (
__CORTEX_M
 >0x03Ë|| (
__CORTEX_SC
 >= 300)

550 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

552 
uöt32_t
 
ªsu…
;

554 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

555 (
ªsu…
);

556 
	}
}

566 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt8_t
 
	$__LDREXB
(vﬁ©ûê
uöt8_t
 *
addr
)

568 
uöt32_t
 
ªsu…
;

570 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

571 
__ASM
 vﬁ©ûê("ldªxb %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

576 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

578  ((
uöt8_t
Ë
ªsu…
);

579 
	}
}

589 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt16_t
 
	$__LDREXH
(vﬁ©ûê
uöt16_t
 *
addr
)

591 
uöt32_t
 
ªsu…
;

593 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

594 
__ASM
 vﬁ©ûê("ldªxh %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

599 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

601  ((
uöt16_t
Ë
ªsu…
);

602 
	}
}

612 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__LDREXW
(vﬁ©ûê
uöt32_t
 *
addr
)

614 
uöt32_t
 
ªsu…
;

616 
__ASM
 vﬁ©ûê("ldªx %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

617 (
ªsu…
);

618 
	}
}

630 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

632 
uöt32_t
 
ªsu…
;

634 
__ASM
 vﬁ©ûê("°ªxb %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

635 (
ªsu…
);

636 
	}
}

648 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

650 
uöt32_t
 
ªsu…
;

652 
__ASM
 vﬁ©ûê("°ªxh %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

653 (
ªsu…
);

654 
	}
}

666 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

668 
uöt32_t
 
ªsu…
;

670 
__ASM
 vﬁ©ûê("°ªx %0, %2, %1" : "=&r" (
ªsu…
), "=Q" (*
addr
Ë: "r" (
vÆue
) );

671 (
ªsu…
);

672 
	}
}

680 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__CLREX
()

682 
__ASM
 volatile ("clrex" ::: "memory");

683 
	}
}

694 
	#__SSAT
(
ARG1
,
ARG2
) \

696 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

697 
	`__ASM
 ("sßà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

698 
__RES
; \

699 })

	)

710 
	#__USAT
(
ARG1
,
ARG2
) \

712 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

713 
	`__ASM
 ("ußà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

714 
__RES
; \

715 })

	)

725 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt8_t
 
	$__CLZ
(
uöt32_t
 
vÆue
)

727 
uöt32_t
 
ªsu…
;

729 
__ASM
 vﬁ©ûê("˛z %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

730  ((
uöt8_t
Ë
ªsu…
);

731 
	}
}

741 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__RRX
(
uöt32_t
 
vÆue
)

743 
uöt32_t
 
ªsu…
;

745 
__ASM
 vﬁ©ûê("ºx %0, %1" : 
	`__CMSIS_GCC_OUT_REG
 (
ªsu…
Ë: 
	`__CMSIS_GCC_USE_REG
 (
vÆue
) );

746 (
ªsu…
);

747 
	}
}

757 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt8_t
 
	$__LDRBT
(vﬁ©ûê
uöt8_t
 *
addr
)

759 
uöt32_t
 
ªsu…
;

761 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

762 
__ASM
 vﬁ©ûê("ldrbà%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

767 
__ASM
 vﬁ©ûê("ldrbà%0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

769  ((
uöt8_t
Ë
ªsu…
);

770 
	}
}

780 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt16_t
 
	$__LDRHT
(vﬁ©ûê
uöt16_t
 *
addr
)

782 
uöt32_t
 
ªsu…
;

784 #i‡(
__GNUC__
 > 4Ë|| (__GNUC__ =4 && 
__GNUC_MINOR__
 >= 8)

785 
__ASM
 vﬁ©ûê("ldrhà%0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

790 
__ASM
 vﬁ©ûê("ldrhà%0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) : "memory" );

792  ((
uöt16_t
Ë
ªsu…
);

793 
	}
}

803 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__LDRT
(vﬁ©ûê
uöt32_t
 *
addr
)

805 
uöt32_t
 
ªsu…
;

807 
__ASM
 vﬁ©ûê("ldπ %0, %1" : "Ù" (
ªsu…
Ë: "Q" (*
addr
) );

808 (
ªsu…
);

809 
	}
}

819 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__STRBT
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

821 
__ASM
 vﬁ©ûê("°rbà%1, %0" : "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

822 
	}
}

832 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__STRHT
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

834 
__ASM
 vﬁ©ûê("°rhà%1, %0" : "=Q" (*
addr
Ë: "r" ((
uöt32_t
)
vÆue
) );

835 
	}
}

845 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__STRT
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

847 
__ASM
 vﬁ©ûê("°π %1, %0" : "=Q" (*
addr
Ë: "r" (
vÆue
) );

848 
	}
}

853 #ñi‡
deföed
 ( 
__ICCARM__
 )

855 
	~<cmsis_ür.h
>

858 #ñi‡
deföed
 ( 
__TMS470__
 )

860 
	~<cmsis_ccs.h
>

863 #ñi‡
deföed
 ( 
__TASKING__
 )

872 #ñi‡
deföed
 ( 
__CSMC__
 )

874 
	~<cmsis_csm.h
>

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\CMSIS\Include\core_cmSimd.h

38 #i‡
deföed
 ( 
__ICCARM__
 )

39 #¥agm®
sy°em_ö˛ude


42 #i‚de‡
__CORE_CMSIMD_H


43 
	#__CORE_CMSIMD_H


	)

45 #ifde‡
__˝lu•lus


61 #i‡ 
deföed
 ( 
__CC_ARM
 )

63 
	#__SADD8
 
__ßdd8


	)

64 
	#__QADD8
 
__qadd8


	)

65 
	#__SHADD8
 
__shadd8


	)

66 
	#__UADD8
 
__uadd8


	)

67 
	#__UQADD8
 
__uqadd8


	)

68 
	#__UHADD8
 
__uhadd8


	)

69 
	#__SSUB8
 
__ssub8


	)

70 
	#__QSUB8
 
__qsub8


	)

71 
	#__SHSUB8
 
__shsub8


	)

72 
	#__USUB8
 
__usub8


	)

73 
	#__UQSUB8
 
__uqsub8


	)

74 
	#__UHSUB8
 
__uhsub8


	)

75 
	#__SADD16
 
__ßdd16


	)

76 
	#__QADD16
 
__qadd16


	)

77 
	#__SHADD16
 
__shadd16


	)

78 
	#__UADD16
 
__uadd16


	)

79 
	#__UQADD16
 
__uqadd16


	)

80 
	#__UHADD16
 
__uhadd16


	)

81 
	#__SSUB16
 
__ssub16


	)

82 
	#__QSUB16
 
__qsub16


	)

83 
	#__SHSUB16
 
__shsub16


	)

84 
	#__USUB16
 
__usub16


	)

85 
	#__UQSUB16
 
__uqsub16


	)

86 
	#__UHSUB16
 
__uhsub16


	)

87 
	#__SASX
 
__ßsx


	)

88 
	#__QASX
 
__qasx


	)

89 
	#__SHASX
 
__shasx


	)

90 
	#__UASX
 
__uasx


	)

91 
	#__UQASX
 
__uqasx


	)

92 
	#__UHASX
 
__uhasx


	)

93 
	#__SSAX
 
__sßx


	)

94 
	#__QSAX
 
__qßx


	)

95 
	#__SHSAX
 
__shßx


	)

96 
	#__USAX
 
__ußx


	)

97 
	#__UQSAX
 
__uqßx


	)

98 
	#__UHSAX
 
__uhßx


	)

99 
	#__USAD8
 
__ußd8


	)

100 
	#__USADA8
 
__ußda8


	)

101 
	#__SSAT16
 
__sßt16


	)

102 
	#__USAT16
 
__ußt16


	)

103 
	#__UXTB16
 
__uxtb16


	)

104 
	#__UXTAB16
 
__uxèb16


	)

105 
	#__SXTB16
 
__sxtb16


	)

106 
	#__SXTAB16
 
__sxèb16


	)

107 
	#__SMUAD
 
__smuad


	)

108 
	#__SMUADX
 
__smuadx


	)

109 
	#__SMLAD
 
__smœd


	)

110 
	#__SMLADX
 
__smœdx


	)

111 
	#__SMLALD
 
__smœld


	)

112 
	#__SMLALDX
 
__smœldx


	)

113 
	#__SMUSD
 
__smusd


	)

114 
	#__SMUSDX
 
__smusdx


	)

115 
	#__SMLSD
 
__smlsd


	)

116 
	#__SMLSDX
 
__smlsdx


	)

117 
	#__SMLSLD
 
__sml¶d


	)

118 
	#__SMLSLDX
 
__sml¶dx


	)

119 
	#__SEL
 
__£l


	)

120 
	#__QADD
 
__qadd


	)

121 
	#__QSUB
 
__qsub


	)

123 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0x0000FFFFUL) | \

124 ((((
uöt32_t
)(
ARG2
)Ë<< (
ARG3
)Ë& 0xFFFF0000ULË)

	)

126 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)) ) & 0xFFFF0000UL) | \

127 ((((
uöt32_t
)(
ARG2
)Ë>> (
ARG3
)Ë& 0x0000FFFFULË)

	)

129 
	#__SMMLA
(
ARG1
,
ARG2
,
ARG3
Ë–(
öt32_t
)((((
öt64_t
)(ARG1) * (ARG2)) + \

130 ((
öt64_t
)(
ARG3
Ë<< 32ËË>> 32))

	)

133 #ñi‡
deföed
 ( 
__GNUC__
 )

135 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

137 
uöt32_t
 
ªsu…
;

139 
__ASM
 vﬁ©ûê("ßdd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

140 (
ªsu…
);

141 
	}
}

143 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

145 
uöt32_t
 
ªsu…
;

147 
__ASM
 vﬁ©ûê("qadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

148 (
ªsu…
);

149 
	}
}

151 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

153 
uöt32_t
 
ªsu…
;

155 
__ASM
 vﬁ©ûê("shadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

156 (
ªsu…
);

157 
	}
}

159 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

161 
uöt32_t
 
ªsu…
;

163 
__ASM
 vﬁ©ûê("uadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

164 (
ªsu…
);

165 
	}
}

167 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

169 
uöt32_t
 
ªsu…
;

171 
__ASM
 vﬁ©ûê("uqadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

172 (
ªsu…
);

173 
	}
}

175 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

177 
uöt32_t
 
ªsu…
;

179 
__ASM
 vﬁ©ûê("uhadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

180 (
ªsu…
);

181 
	}
}

184 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

186 
uöt32_t
 
ªsu…
;

188 
__ASM
 vﬁ©ûê("ssub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

189 (
ªsu…
);

190 
	}
}

192 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

194 
uöt32_t
 
ªsu…
;

196 
__ASM
 vﬁ©ûê("qsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

197 (
ªsu…
);

198 
	}
}

200 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

202 
uöt32_t
 
ªsu…
;

204 
__ASM
 vﬁ©ûê("shsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

205 (
ªsu…
);

206 
	}
}

208 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

210 
uöt32_t
 
ªsu…
;

212 
__ASM
 vﬁ©ûê("usub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

213 (
ªsu…
);

214 
	}
}

216 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

218 
uöt32_t
 
ªsu…
;

220 
__ASM
 vﬁ©ûê("uqsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

221 (
ªsu…
);

222 
	}
}

224 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

226 
uöt32_t
 
ªsu…
;

228 
__ASM
 vﬁ©ûê("uhsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

229 (
ªsu…
);

230 
	}
}

233 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

235 
uöt32_t
 
ªsu…
;

237 
__ASM
 vﬁ©ûê("ßdd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

238 (
ªsu…
);

239 
	}
}

241 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

243 
uöt32_t
 
ªsu…
;

245 
__ASM
 vﬁ©ûê("qadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

246 (
ªsu…
);

247 
	}
}

249 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

251 
uöt32_t
 
ªsu…
;

253 
__ASM
 vﬁ©ûê("shadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

254 (
ªsu…
);

255 
	}
}

257 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

259 
uöt32_t
 
ªsu…
;

261 
__ASM
 vﬁ©ûê("uadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

262 (
ªsu…
);

263 
	}
}

265 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

267 
uöt32_t
 
ªsu…
;

269 
__ASM
 vﬁ©ûê("uqadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

270 (
ªsu…
);

271 
	}
}

273 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

275 
uöt32_t
 
ªsu…
;

277 
__ASM
 vﬁ©ûê("uhadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

278 (
ªsu…
);

279 
	}
}

281 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

283 
uöt32_t
 
ªsu…
;

285 
__ASM
 vﬁ©ûê("ssub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

286 (
ªsu…
);

287 
	}
}

289 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

291 
uöt32_t
 
ªsu…
;

293 
__ASM
 vﬁ©ûê("qsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

294 (
ªsu…
);

295 
	}
}

297 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

299 
uöt32_t
 
ªsu…
;

301 
__ASM
 vﬁ©ûê("shsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

302 (
ªsu…
);

303 
	}
}

305 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

307 
uöt32_t
 
ªsu…
;

309 
__ASM
 vﬁ©ûê("usub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

310 (
ªsu…
);

311 
	}
}

313 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

315 
uöt32_t
 
ªsu…
;

317 
__ASM
 vﬁ©ûê("uqsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

318 (
ªsu…
);

319 
	}
}

321 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

323 
uöt32_t
 
ªsu…
;

325 
__ASM
 vﬁ©ûê("uhsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

326 (
ªsu…
);

327 
	}
}

329 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

331 
uöt32_t
 
ªsu…
;

333 
__ASM
 vﬁ©ûê("ßsx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

334 (
ªsu…
);

335 
	}
}

337 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

339 
uöt32_t
 
ªsu…
;

341 
__ASM
 vﬁ©ûê("qasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

342 (
ªsu…
);

343 
	}
}

345 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

347 
uöt32_t
 
ªsu…
;

349 
__ASM
 vﬁ©ûê("shasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

350 (
ªsu…
);

351 
	}
}

353 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

355 
uöt32_t
 
ªsu…
;

357 
__ASM
 vﬁ©ûê("uasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

358 (
ªsu…
);

359 
	}
}

361 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

363 
uöt32_t
 
ªsu…
;

365 
__ASM
 vﬁ©ûê("uqasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

366 (
ªsu…
);

367 
	}
}

369 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

371 
uöt32_t
 
ªsu…
;

373 
__ASM
 vﬁ©ûê("uhasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

374 (
ªsu…
);

375 
	}
}

377 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

379 
uöt32_t
 
ªsu…
;

381 
__ASM
 vﬁ©ûê("sßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

382 (
ªsu…
);

383 
	}
}

385 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

387 
uöt32_t
 
ªsu…
;

389 
__ASM
 vﬁ©ûê("qßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

390 (
ªsu…
);

391 
	}
}

393 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

395 
uöt32_t
 
ªsu…
;

397 
__ASM
 vﬁ©ûê("shßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

398 (
ªsu…
);

399 
	}
}

401 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

403 
uöt32_t
 
ªsu…
;

405 
__ASM
 vﬁ©ûê("ußx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

406 (
ªsu…
);

407 
	}
}

409 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

411 
uöt32_t
 
ªsu…
;

413 
__ASM
 vﬁ©ûê("uqßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

414 (
ªsu…
);

415 
	}
}

417 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

419 
uöt32_t
 
ªsu…
;

421 
__ASM
 vﬁ©ûê("uhßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

422 (
ªsu…
);

423 
	}
}

425 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USAD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

427 
uöt32_t
 
ªsu…
;

429 
__ASM
 vﬁ©ûê("ußd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

430 (
ªsu…
);

431 
	}
}

433 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USADA8
(
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

435 
uöt32_t
 
ªsu…
;

437 
__ASM
 vﬁ©ûê("ußda8 %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

438 (
ªsu…
);

439 
	}
}

441 
	#__SSAT16
(
ARG1
,
ARG2
) \

443 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

444 
	`__ASM
 ("sßt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

445 
__RES
; \

446 })

	)

448 
	#__USAT16
(
ARG1
,
ARG2
) \

450 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

451 
	`__ASM
 ("ußt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

452 
__RES
; \

453 })

	)

455 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UXTB16
(
uöt32_t
 
›1
)

457 
uöt32_t
 
ªsu…
;

459 
__ASM
 vﬁ©ûê("uxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

460 (
ªsu…
);

461 
	}
}

463 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

465 
uöt32_t
 
ªsu…
;

467 
__ASM
 vﬁ©ûê("uxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

468 (
ªsu…
);

469 
	}
}

471 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SXTB16
(
uöt32_t
 
›1
)

473 
uöt32_t
 
ªsu…
;

475 
__ASM
 vﬁ©ûê("sxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

476 (
ªsu…
);

477 
	}
}

479 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

481 
uöt32_t
 
ªsu…
;

483 
__ASM
 vﬁ©ûê("sxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

484 (
ªsu…
);

485 
	}
}

487 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUAD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

489 
uöt32_t
 
ªsu…
;

491 
__ASM
 vﬁ©ûê("smuad %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

492 (
ªsu…
);

493 
	}
}

495 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUADX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

497 
uöt32_t
 
ªsu…
;

499 
__ASM
 vﬁ©ûê("smuadx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

500 (
ªsu…
);

501 
	}
}

503 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLAD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

505 
uöt32_t
 
ªsu…
;

507 
__ASM
 vﬁ©ûê("smœd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

508 (
ªsu…
);

509 
	}
}

511 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLADX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

513 
uöt32_t
 
ªsu…
;

515 
__ASM
 vﬁ©ûê("smœdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

516 (
ªsu…
);

517 
	}
}

519 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt64_t
 
	$__SMLALD
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

521 
	uŒªg_u
{

522 
uöt32_t
 
w32
[2];

523 
uöt64_t
 
w64
;

524 } 
Œr
;

525 
Œr
.
w64
 = 
acc
;

527 #i‚de‡
__ARMEB__


528 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

530 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

533 (
Œr
.
w64
);

534 
	}
}

536 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt64_t
 
	$__SMLALDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

538 
	uŒªg_u
{

539 
uöt32_t
 
w32
[2];

540 
uöt64_t
 
w64
;

541 } 
Œr
;

542 
Œr
.
w64
 = 
acc
;

544 #i‚de‡
__ARMEB__


545 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

547 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

550 (
Œr
.
w64
);

551 
	}
}

553 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUSD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

555 
uöt32_t
 
ªsu…
;

557 
__ASM
 vﬁ©ûê("smusd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

558 (
ªsu…
);

559 
	}
}

561 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

563 
uöt32_t
 
ªsu…
;

565 
__ASM
 vﬁ©ûê("smusdx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

566 (
ªsu…
);

567 
	}
}

569 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLSD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

571 
uöt32_t
 
ªsu…
;

573 
__ASM
 vﬁ©ûê("smlsd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

574 (
ªsu…
);

575 
	}
}

577 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

579 
uöt32_t
 
ªsu…
;

581 
__ASM
 vﬁ©ûê("smlsdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

582 (
ªsu…
);

583 
	}
}

585 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt64_t
 
	$__SMLSLD
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

587 
	uŒªg_u
{

588 
uöt32_t
 
w32
[2];

589 
uöt64_t
 
w64
;

590 } 
Œr
;

591 
Œr
.
w64
 = 
acc
;

593 #i‚de‡
__ARMEB__


594 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

596 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

599 (
Œr
.
w64
);

600 
	}
}

602 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt64_t
 
	$__SMLSLDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, 
uöt64_t
 
acc
)

604 
	uŒªg_u
{

605 
uöt32_t
 
w32
[2];

606 
uöt64_t
 
w64
;

607 } 
Œr
;

608 
Œr
.
w64
 = 
acc
;

610 #i‚de‡
__ARMEB__


611 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[0]), "Ù" (Œr.w32[1]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[0]), "1" (llr.w32[1]) );

613 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
Œr
.
w32
[1]), "Ù" (Œr.w32[0]): "r" (
›1
), "r" (
›2
) , "0" (llr.w32[1]), "1" (llr.w32[0]) );

616 (
Œr
.
w64
);

617 
	}
}

619 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SEL
 (
uöt32_t
 
›1
, uöt32_à
›2
)

621 
uöt32_t
 
ªsu…
;

623 
__ASM
 vﬁ©ûê("£»%0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

624 (
ªsu…
);

625 
	}
}

627 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QADD
(
uöt32_t
 
›1
, uöt32_à
›2
)

629 
uöt32_t
 
ªsu…
;

631 
__ASM
 vﬁ©ûê("qadd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

632 (
ªsu…
);

633 
	}
}

635 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSUB
(
uöt32_t
 
›1
, uöt32_à
›2
)

637 
uöt32_t
 
ªsu…
;

639 
__ASM
 vﬁ©ûê("qsub %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

640 (
ªsu…
);

641 
	}
}

643 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
) \

645 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

646 
	`__ASM
 ("pkhbà%0, %1, %2,Ü¶ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

647 
__RES
; \

648 })

	)

650 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
) \

652 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

653 i‡(
ARG3
 == 0) \

654 
	`__ASM
 ("pkhtb %0, %1, %2" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
) ); \

656 
	`__ASM
 ("pkhtb %0, %1, %2,á§ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

657 
__RES
; \

658 })

	)

660 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMMLA
 (
öt32_t
 
›1
, i¡32_à
›2
, i¡32_à
›3
)

662 
öt32_t
 
ªsu…
;

664 
__ASM
 vﬁ©ûê("smmœ %0, %1, %2, %3" : "Ù" (
ªsu…
): "r" (
›1
), "r" (
›2
), "r" (
›3
) );

665 (
ªsu…
);

666 
	}
}

669 #ñi‡
deföed
 ( 
__ICCARM__
 )

671 
	~<cmsis_ür.h
>

674 #ñi‡
deföed
 ( 
__TMS470__
 )

676 
	~<cmsis_ccs.h
>

679 #ñi‡
deföed
 ( 
__TASKING__
 )

684 #ñi‡
deföed
 ( 
__CSMC__
 )

686 
	~<cmsis_csm.h
>

693 #ifde‡
__˝lu•lus


	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\devices\MCIMX6X\include\MCIMX6X_M4.h

70 #i‡!
deföed
(
MCIMX6X_M4_H_
)

71 
	#MCIMX6X_M4_H_


	)

72 
	#MCU_MCIMX6X_M4


	)

75 #i‡(
deföed
(
MCU_ACTIVE
))

76 #îr‹ 
MCIMX6X_M4
 
mem‹y
 
m≠
: 
Thîe
 
is
 
Æªady
 
ö˛uded
 
™Ÿhî
 mem‹y m≠. 
O∆y
 
⁄e
 mem‹y m≠ 
ˇn
 
be
 included.

78 
	#MCU_ACTIVE


	)

80 
	~<°döt.h
>

84 
	#MCU_MEM_MAP_VERSION
 0x0100u

	)

86 
	#MCU_MEM_MAP_VERSION_MINOR
 0x0000u

	)

98 
	#NUMBER_OF_INT_VECTORS
 144

	)

100 
	eIRQn
 {

102 
	mNŸAvaû_IRQn
 = -128,

105 
	mN⁄MaskabÀI¡_IRQn
 = -14,

106 
	mH¨dFau…_IRQn
 = -13,

107 
	mMem‹yM™agemít_IRQn
 = -12,

108 
	mBusFau…_IRQn
 = -11,

109 
	mUßgeFau…_IRQn
 = -10,

110 
	mSVCÆl_IRQn
 = -5,

111 
	mDebugM⁄ô‹_IRQn
 = -4,

112 
	mPídSV_IRQn
 = -2,

113 
	mSysTick_IRQn
 = -1,

116 
	mC‹ãx_M4_IRQn
 = 0,

117 
	mDAP_IRQn
 = 1,

118 
	mSDMA_IRQn
 = 2,

119 
	mRe£rved0_IRQn
 = 3,

120 
	mSNVS_IRQn
 = 4,

121 
	mLCDIF1_IRQn
 = 5,

122 
	mLCDIF2_IRQn
 = 6,

123 
	mCSI1_IRQn
 = 7,

124 
	mPXP_IRQn
 = 8,

125 
	mRe£rved1_IRQn
 = 9,

126 
	mGPU_IRQn
 = 10,

127 
	mWDOG3_IRQn
 = 11,

128 
	mSEMA4_CP1_IRQn
 = 12,

129 
	mAPBHDMA_IRQn
 = 13,

130 
	mEIM_IRQn
 = 14,

131 
	mBCH_IRQn
 = 15,

132 
	mGPMI_IRQn
 = 16,

133 
	mUART6_IRQn
 = 17,

134 
	meCSPI5_IRQn
 = 18,

135 
	mSNVS_CONSOLIDATED_IRQn
 = 19,

136 
	mSNVS_SECURITY_IRQn
 = 20,

137 
	mCSU_IRQn
 = 21,

138 
	mUSDHC1_IRQn
 = 22,

139 
	mUSDHC2_IRQn
 = 23,

140 
	mUSDHC3_IRQn
 = 24,

141 
	mUSDHC4_IRQn
 = 25,

142 
	mUART1_IRQn
 = 26,

143 
	mUART2_IRQn
 = 27,

144 
	mUART3_IRQn
 = 28,

145 
	mUART4_IRQn
 = 29,

146 
	mUART5_IRQn
 = 30,

147 
	meCSPI1_IRQn
 = 31,

148 
	meCSPI2_IRQn
 = 32,

149 
	meCSPI3_IRQn
 = 33,

150 
	meCSPI4_IRQn
 = 34,

151 
	mI2C4_IRQn
 = 35,

152 
	mI2C1_IRQn
 = 36,

153 
	mI2C2_IRQn
 = 37,

154 
	mI2C3_IRQn
 = 38,

155 
	mRDC_IRQn
 = 39,

156 
	mUSB_IRQn
 = 40,

157 
	mCSI2_IRQn
 = 41,

158 
	mUSB_OTG2_IRQn
 = 42,

159 
	mUSB_OTG1_IRQn
 = 43,

160 
	mUSB_PHY1_IRQn
 = 44,

161 
	mUSB_PHY2_IRQn
 = 45,

162 
	mSSI1_IRQn
 = 46,

163 
	mSSI2_IRQn
 = 47,

164 
	mSSI3_IRQn
 = 48,

165 
	mTem≥øtuª_M⁄ô‹_IRQn
 = 49,

166 
	mASRC_IRQn
 = 50,

167 
	mESAI_IRQn
 = 51,

168 
	mSPDIF_IRQn
 = 52,

169 
	mMLB_ERROR_IRQn
 = 53,

170 
	mPMU1_IRQn
 = 54,

171 
	mGPT_IRQn
 = 55,

172 
	mEPIT1_IRQn
 = 56,

173 
	mEPIT2_IRQn
 = 57,

174 
	mGPIO1_INT7_IRQn
 = 58,

175 
	mGPIO1_INT6_IRQn
 = 59,

176 
	mGPIO1_INT5_IRQn
 = 60,

177 
	mGPIO1_INT4_IRQn
 = 61,

178 
	mGPIO1_INT3_IRQn
 = 62,

179 
	mGPIO1_INT2_IRQn
 = 63,

180 
	mGPIO1_INT1_IRQn
 = 64,

181 
	mGPIO1_INT0_IRQn
 = 65,

182 
	mGPIO1_INT15_0_IRQn
 = 66,

183 
	mGPIO1_INT31_16_IRQn
 = 67,

184 
	mGPIO2_INT15_0_IRQn
 = 68,

185 
	mGPIO2_INT31_16_IRQn
 = 69,

186 
	mGPIO3_INT15_0_IRQn
 = 70,

187 
	mGPIO3_INT31_16_IRQn
 = 71,

188 
	mGPIO4_INT15_0_IRQn
 = 72,

189 
	mGPIO4_INT31_16_IRQn
 = 73,

190 
	mGPIO5_INT15_0_IRQn
 = 74,

191 
	mGPIO5_INT31_16_IRQn
 = 75,

192 
	mGPIO6_INT15_0_IRQn
 = 76,

193 
	mGPIO6_INT31_16_IRQn
 = 77,

194 
	mGPIO7_INT15_0_IRQn
 = 78,

195 
	mGPIO7_INT31_16_IRQn
 = 79,

196 
	mWDOG1_IRQn
 = 80,

197 
	mWDOG2_IRQn
 = 81,

198 
	mKPP_IRQn
 = 82,

199 
	mPWM1_PWM5_IRQn
 = 83,

200 
	mPWM2_PWM6_IRQn
 = 84,

201 
	mPWM3_PWM7_IRQn
 = 85,

202 
	mPWM4_PWM8_IRQn
 = 86,

203 
	mCCM1_IRQn
 = 87,

204 
	mCCM2_IRQn
 = 88,

205 
	mGPC_IRQn
 = 89,

206 
	mMU_A9_IRQn
 = 90,

207 
	mSRC_IRQn
 = 91,

208 
	mCPU_L2I_IRQn
 = 92,

209 
	mCPU_PCEI_IRQn
 = 93,

210 
	mCPU_PUI_IRQn
 = 94,

211 
	mCPU_CTI_IRQn
 = 95,

212 
	mSRC_CPU_WDOG_IRQn
 = 96,

213 
	mSAI1_IRQn
 = 97,

214 
	mSAI2_IRQn
 = 98,

215 
	mMU_M4_IRQn
 = 99,

216 
	mADC1_IRQn
 = 100,

217 
	mADC2_IRQn
 = 101,

218 
	mENET2_IRQn
 = 102,

219 
	mENET2_TI_IRQn
 = 103,

220 
	mSJC_IRQn
 = 104,

221 
	mCAAM1_IRQn
 = 105,

222 
	mCAAM2_IRQn
 = 106,

223 
	mQSPI1_IRQn
 = 107,

224 
	mTZASC_IRQn
 = 108,

225 
	mQSPI2_IRQn
 = 109,

226 
	mFLEXCAN1_IRQn
 = 110,

227 
	mFLEXCAN2_IRQn
 = 111,

228 
	mRe£rved2_IRQn
 = 112,

229 
	mRe£rved3_IRQn
 = 113,

230 
	mRe£rved4_IRQn
 = 114,

231 
	mRe£rved5_IRQn
 = 115,

232 
	mSEMA4_CP0_IRQn
 = 116,

233 
	mMLB_IRCI_IRQn
 = 117,

234 
	mENET1_IRQn
 = 118,

235 
	mENET1_TI_IRQn
 = 119,

236 
	mPCIe1_IRQn
 = 120,

237 
	mPCIe2_IRQn
 = 121,

238 
	mPCIe3_IRQn
 = 122,

239 
	mPCIe4_IRQn
 = 123,

240 
	mDCIC1_IRQn
 = 124,

241 
	mDCIC2_IRQn
 = 125,

242 
	mMLB_LOCI_IRQn
 = 126,

243 
	mPMU2_IRQn
 = 127,

244 } 
	tIRQn_Ty≥
;

259 
	#__MPU_PRESENT
 1

	)

260 
	#__NVIC_PRIO_BITS
 4

	)

261 
	#__Víd‹_SysTickC⁄fig
 0

	)

262 
	#__FPU_PRESENT
 1

	)

264 
	~"c‹e_cm4.h
"

265 
	~"sy°em_MCIMX6X_M4.h
"

284 #i‡
deföed
(
__ARMCC_VERSION
)

285 #¥agm®
push


286 #¥agm®
™⁄_uni⁄s


287 #ñi‡
deföed
(
__CWCC__
)

288 #¥agm®
push


289 #¥agm®
˝p_exãnsi⁄s
 
⁄


290 #ñi‡
deföed
(
__GNUC__
)

292 #ñi‡
deföed
(
__IAR_SYSTEMS_ICC__
)

293 #¥agm®
œnguage
=
exãnded


295 #îr‹ 
NŸ
 
suµ‹ãd
 
compûî
 
ty≥


309 
__IO
 
uöt32_t
 
	mHC0
;

310 
__IO
 
uöt32_t
 
	mHC1
;

311 
__I
 
uöt32_t
 
	mHS
;

312 
__IO
 
uöt32_t
 
	mR0
;

313 
__IO
 
uöt32_t
 
	mR1
;

314 
__IO
 
uöt32_t
 
	mCFG
;

315 
__IO
 
uöt32_t
 
	mGC
;

316 
__IO
 
uöt32_t
 
	mGS
;

317 
__IO
 
uöt32_t
 
	mCV
;

318 
__IO
 
uöt32_t
 
	mOFS
;

319 
__IO
 
uöt32_t
 
	mCAL
;

320 } 
	tADC_Ty≥
, *
	tADC_MemM≠På
;

332 
	#ADC_HC0_REG
(
ba£
Ë((ba£)->
HC0
)

	)

333 
	#ADC_HC1_REG
(
ba£
Ë((ba£)->
HC1
)

	)

334 
	#ADC_HS_REG
(
ba£
Ë((ba£)->
HS
)

	)

335 
	#ADC_R0_REG
(
ba£
Ë((ba£)->
R0
)

	)

336 
	#ADC_R1_REG
(
ba£
Ë((ba£)->
R1
)

	)

337 
	#ADC_CFG_REG
(
ba£
Ë((ba£)->
CFG
)

	)

338 
	#ADC_GC_REG
(
ba£
Ë((ba£)->
GC
)

	)

339 
	#ADC_GS_REG
(
ba£
Ë((ba£)->
GS
)

	)

340 
	#ADC_CV_REG
(
ba£
Ë((ba£)->
CV
)

	)

341 
	#ADC_OFS_REG
(
ba£
Ë((ba£)->
OFS
)

	)

342 
	#ADC_CAL_REG
(
ba£
Ë((ba£)->
CAL
)

	)

358 
	#ADC_HC0_ADCH_MASK
 0x1Fu

	)

359 
	#ADC_HC0_ADCH_SHIFT
 0

	)

360 
	#ADC_HC0_ADCH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ADC_HC0_ADCH_SHIFT
))&
ADC_HC0_ADCH_MASK
)

	)

361 
	#ADC_HC0_AIEN_MASK
 0x80u

	)

362 
	#ADC_HC0_AIEN_SHIFT
 7

	)

364 
	#ADC_HC1_ADCH_MASK
 0x1Fu

	)

365 
	#ADC_HC1_ADCH_SHIFT
 0

	)

366 
	#ADC_HC1_ADCH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ADC_HC1_ADCH_SHIFT
))&
ADC_HC1_ADCH_MASK
)

	)

367 
	#ADC_HC1_AIEN_MASK
 0x80u

	)

368 
	#ADC_HC1_AIEN_SHIFT
 7

	)

370 
	#ADC_HS_COCO0_MASK
 0x1u

	)

371 
	#ADC_HS_COCO0_SHIFT
 0

	)

372 
	#ADC_HS_COCO1_MASK
 0x2u

	)

373 
	#ADC_HS_COCO1_SHIFT
 1

	)

375 
	#ADC_R0_D_MASK
 0xFFFu

	)

376 
	#ADC_R0_D_SHIFT
 0

	)

377 
	#ADC_R0_D
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ADC_R0_D_SHIFT
))&
ADC_R0_D_MASK
)

	)

379 
	#ADC_R1_D_MASK
 0xFFFu

	)

380 
	#ADC_R1_D_SHIFT
 0

	)

381 
	#ADC_R1_D
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ADC_R1_D_SHIFT
))&
ADC_R1_D_MASK
)

	)

383 
	#ADC_CFG_ADICLK_MASK
 0x3u

	)

384 
	#ADC_CFG_ADICLK_SHIFT
 0

	)

385 
	#ADC_CFG_ADICLK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ADC_CFG_ADICLK_SHIFT
))&
ADC_CFG_ADICLK_MASK
)

	)

386 
	#ADC_CFG_MODE_MASK
 0xCu

	)

387 
	#ADC_CFG_MODE_SHIFT
 2

	)

388 
	#ADC_CFG_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ADC_CFG_MODE_SHIFT
))&
ADC_CFG_MODE_MASK
)

	)

389 
	#ADC_CFG_ADLSMP_MASK
 0x10u

	)

390 
	#ADC_CFG_ADLSMP_SHIFT
 4

	)

391 
	#ADC_CFG_ADIV_MASK
 0x60u

	)

392 
	#ADC_CFG_ADIV_SHIFT
 5

	)

393 
	#ADC_CFG_ADIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ADC_CFG_ADIV_SHIFT
))&
ADC_CFG_ADIV_MASK
)

	)

394 
	#ADC_CFG_ADLPC_MASK
 0x80u

	)

395 
	#ADC_CFG_ADLPC_SHIFT
 7

	)

396 
	#ADC_CFG_ADSTS_MASK
 0x300u

	)

397 
	#ADC_CFG_ADSTS_SHIFT
 8

	)

398 
	#ADC_CFG_ADSTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ADC_CFG_ADSTS_SHIFT
))&
ADC_CFG_ADSTS_MASK
)

	)

399 
	#ADC_CFG_ADHSC_MASK
 0x400u

	)

400 
	#ADC_CFG_ADHSC_SHIFT
 10

	)

401 
	#ADC_CFG_REFSEL_MASK
 0x1800u

	)

402 
	#ADC_CFG_REFSEL_SHIFT
 11

	)

403 
	#ADC_CFG_REFSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ADC_CFG_REFSEL_SHIFT
))&
ADC_CFG_REFSEL_MASK
)

	)

404 
	#ADC_CFG_ADTRG_MASK
 0x2000u

	)

405 
	#ADC_CFG_ADTRG_SHIFT
 13

	)

406 
	#ADC_CFG_AVGS_MASK
 0xC000u

	)

407 
	#ADC_CFG_AVGS_SHIFT
 14

	)

408 
	#ADC_CFG_AVGS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ADC_CFG_AVGS_SHIFT
))&
ADC_CFG_AVGS_MASK
)

	)

409 
	#ADC_CFG_OVWREN_MASK
 0x10000u

	)

410 
	#ADC_CFG_OVWREN_SHIFT
 16

	)

412 
	#ADC_GC_ADACKEN_MASK
 0x1u

	)

413 
	#ADC_GC_ADACKEN_SHIFT
 0

	)

414 
	#ADC_GC_DMAEN_MASK
 0x2u

	)

415 
	#ADC_GC_DMAEN_SHIFT
 1

	)

416 
	#ADC_GC_ACREN_MASK
 0x4u

	)

417 
	#ADC_GC_ACREN_SHIFT
 2

	)

418 
	#ADC_GC_ACFGT_MASK
 0x8u

	)

419 
	#ADC_GC_ACFGT_SHIFT
 3

	)

420 
	#ADC_GC_ACFE_MASK
 0x10u

	)

421 
	#ADC_GC_ACFE_SHIFT
 4

	)

422 
	#ADC_GC_AVGE_MASK
 0x20u

	)

423 
	#ADC_GC_AVGE_SHIFT
 5

	)

424 
	#ADC_GC_ADCO_MASK
 0x40u

	)

425 
	#ADC_GC_ADCO_SHIFT
 6

	)

426 
	#ADC_GC_CAL_MASK
 0x80u

	)

427 
	#ADC_GC_CAL_SHIFT
 7

	)

429 
	#ADC_GS_ADACT_MASK
 0x1u

	)

430 
	#ADC_GS_ADACT_SHIFT
 0

	)

431 
	#ADC_GS_CALF_MASK
 0x2u

	)

432 
	#ADC_GS_CALF_SHIFT
 1

	)

433 
	#ADC_GS_AWKST_MASK
 0x4u

	)

434 
	#ADC_GS_AWKST_SHIFT
 2

	)

436 
	#ADC_CV_CV1_MASK
 0xFFFu

	)

437 
	#ADC_CV_CV1_SHIFT
 0

	)

438 
	#ADC_CV_CV1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ADC_CV_CV1_SHIFT
))&
ADC_CV_CV1_MASK
)

	)

439 
	#ADC_CV_CV2_MASK
 0xFFF0000u

	)

440 
	#ADC_CV_CV2_SHIFT
 16

	)

441 
	#ADC_CV_CV2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ADC_CV_CV2_SHIFT
))&
ADC_CV_CV2_MASK
)

	)

443 
	#ADC_OFS_OFS_MASK
 0xFFFu

	)

444 
	#ADC_OFS_OFS_SHIFT
 0

	)

445 
	#ADC_OFS_OFS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ADC_OFS_OFS_SHIFT
))&
ADC_OFS_OFS_MASK
)

	)

446 
	#ADC_OFS_SIGN_MASK
 0x1000u

	)

447 
	#ADC_OFS_SIGN_SHIFT
 12

	)

449 
	#ADC_CAL_CAL_CODE_MASK
 0xFu

	)

450 
	#ADC_CAL_CAL_CODE_SHIFT
 0

	)

451 
	#ADC_CAL_CAL_CODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ADC_CAL_CAL_CODE_SHIFT
))&
ADC_CAL_CAL_CODE_MASK
)

	)

459 
	#ADC1_BASE
 (0x42280000u)

	)

461 
	#ADC1
 ((
ADC_Ty≥
 *)
ADC1_BASE
)

	)

462 
	#ADC1_BASE_PTR
 (
ADC1
)

	)

464 
	#ADC2_BASE
 (0x42284000u)

	)

466 
	#ADC2
 ((
ADC_Ty≥
 *)
ADC2_BASE
)

	)

467 
	#ADC2_BASE_PTR
 (
ADC2
)

	)

469 
	#ADC_BASE_ADDRS
 { 
ADC1_BASE
, 
ADC2_BASE
 }

	)

471 
	#ADC_BASE_PTRS
 { 
ADC1
, 
ADC2
 }

	)

473 
	#ADC_IRQS
 { 
ADC1_IRQn
, 
ADC2_IRQn
 }

	)

486 
	#ADC1_HC0
 
	`ADC_HC0_REG
(
ADC1_BASE_PTR
)

	)

487 
	#ADC1_HC1
 
	`ADC_HC1_REG
(
ADC1_BASE_PTR
)

	)

488 
	#ADC1_HS
 
	`ADC_HS_REG
(
ADC1_BASE_PTR
)

	)

489 
	#ADC1_R0
 
	`ADC_R0_REG
(
ADC1_BASE_PTR
)

	)

490 
	#ADC1_R1
 
	`ADC_R1_REG
(
ADC1_BASE_PTR
)

	)

491 
	#ADC1_CFG
 
	`ADC_CFG_REG
(
ADC1_BASE_PTR
)

	)

492 
	#ADC1_GC
 
	`ADC_GC_REG
(
ADC1_BASE_PTR
)

	)

493 
	#ADC1_GS
 
	`ADC_GS_REG
(
ADC1_BASE_PTR
)

	)

494 
	#ADC1_CV
 
	`ADC_CV_REG
(
ADC1_BASE_PTR
)

	)

495 
	#ADC1_OFS
 
	`ADC_OFS_REG
(
ADC1_BASE_PTR
)

	)

496 
	#ADC1_CAL
 
	`ADC_CAL_REG
(
ADC1_BASE_PTR
)

	)

498 
	#ADC2_HC0
 
	`ADC_HC0_REG
(
ADC2_BASE_PTR
)

	)

499 
	#ADC2_HC1
 
	`ADC_HC1_REG
(
ADC2_BASE_PTR
)

	)

500 
	#ADC2_HS
 
	`ADC_HS_REG
(
ADC2_BASE_PTR
)

	)

501 
	#ADC2_R0
 
	`ADC_R0_REG
(
ADC2_BASE_PTR
)

	)

502 
	#ADC2_R1
 
	`ADC_R1_REG
(
ADC2_BASE_PTR
)

	)

503 
	#ADC2_CFG
 
	`ADC_CFG_REG
(
ADC2_BASE_PTR
)

	)

504 
	#ADC2_GC
 
	`ADC_GC_REG
(
ADC2_BASE_PTR
)

	)

505 
	#ADC2_GS
 
	`ADC_GS_REG
(
ADC2_BASE_PTR
)

	)

506 
	#ADC2_CV
 
	`ADC_CV_REG
(
ADC2_BASE_PTR
)

	)

507 
	#ADC2_OFS
 
	`ADC_OFS_REG
(
ADC2_BASE_PTR
)

	)

508 
	#ADC2_CAL
 
	`ADC_CAL_REG
(
ADC2_BASE_PTR
)

	)

529 
__I
 
uöt32_t
 
	mBLOCK_ID
;

530 
__IO
 
uöt32_t
 
	mPDBUF
;

531 
__IO
 
uöt32_t
 
	mSWRST
;

532 
uöt8_t
 
	mRESERVED_0
[12];

533 
__IO
 
uöt32_t
 
	mBGREG
;

534 
uöt8_t
 
	mRESERVED_1
[996];

535 
__IO
 
uöt32_t
 
	mACCESSAR_ID
;

536 
__IO
 
uöt32_t
 
	mPDADC
;

537 
__IO
 
uöt32_t
 
	mPDSARH
;

538 
__IO
 
uöt32_t
 
	mPDSARL
;

539 
__IO
 
uöt32_t
 
	mPDADCRFH
;

540 
__IO
 
uöt32_t
 
	mPDADCRFL
;

541 
uöt8_t
 
	mRESERVED_2
[4];

542 
__IO
 
uöt32_t
 
	mADCGN
;

543 
uöt8_t
 
	mRESERVED_3
[20];

544 
__IO
 
uöt32_t
 
	mREFTRIML
;

545 
__IO
 
uöt32_t
 
	mREFTRIMH
;

546 
uöt8_t
 
	mRESERVED_4
[16];

547 
__IO
 
uöt32_t
 
	mDACAMP
;

548 
uöt8_t
 
	mRESERVED_5
[4];

549 
__IO
 
uöt32_t
 
	mCLMPDAT
;

550 
__IO
 
uöt32_t
 
	mCLMPAMP
;

551 
__IO
 
uöt32_t
 
	mCLAMP
;

552 
__IO
 
uöt32_t
 
	mINPBUF
;

553 
__IO
 
uöt32_t
 
	mINPFLT
;

554 
__IO
 
uöt32_t
 
	mADCDGN
;

555 
__IO
 
uöt32_t
 
	mOFFDRV
;

556 
__IO
 
uöt32_t
 
	mINPCONFIG
;

557 
__IO
 
uöt32_t
 
	mPROGDELAY
;

558 
__IO
 
uöt32_t
 
	mADCOMT
;

559 
__IO
 
uöt32_t
 
	mALGDELAY
;

560 
uöt8_t
 
	mRESERVED_6
[896];

561 
__I
 
uöt32_t
 
	mACC_ID
;

562 
__IO
 
uöt32_t
 
	mACCSTA
;

563 
__IO
 
uöt32_t
 
	mACCNOSLI
;

564 
__IO
 
uöt32_t
 
	mACCCALCON
;

565 
__IO
 
uöt32_t
 
	mBWEWRICTRL
;

566 
__IO
 
uöt32_t
 
	mSELSLI
;

567 
__IO
 
uöt32_t
 
	mSELBYT
;

568 
uöt8_t
 
	mRESERVED_7
[4];

569 
__IO
 
uöt32_t
 
	mREDVAL
;

570 
__IO
 
uöt32_t
 
	mWRIBYT
;

571 } 
	tAFE_Ty≥
, *
	tAFE_MemM≠På
;

583 
	#AFE_BLOCK_ID_REG
(
ba£
Ë((ba£)->
BLOCK_ID
)

	)

584 
	#AFE_PDBUF_REG
(
ba£
Ë((ba£)->
PDBUF
)

	)

585 
	#AFE_SWRST_REG
(
ba£
Ë((ba£)->
SWRST
)

	)

586 
	#AFE_BGREG_REG
(
ba£
Ë((ba£)->
BGREG
)

	)

587 
	#AFE_ACCESSAR_ID_REG
(
ba£
Ë((ba£)->
ACCESSAR_ID
)

	)

588 
	#AFE_PDADC_REG
(
ba£
Ë((ba£)->
PDADC
)

	)

589 
	#AFE_PDSARH_REG
(
ba£
Ë((ba£)->
PDSARH
)

	)

590 
	#AFE_PDSARL_REG
(
ba£
Ë((ba£)->
PDSARL
)

	)

591 
	#AFE_PDADCRFH_REG
(
ba£
Ë((ba£)->
PDADCRFH
)

	)

592 
	#AFE_PDADCRFL_REG
(
ba£
Ë((ba£)->
PDADCRFL
)

	)

593 
	#AFE_ADCGN_REG
(
ba£
Ë((ba£)->
ADCGN
)

	)

594 
	#AFE_REFTRIML_REG
(
ba£
Ë((ba£)->
REFTRIML
)

	)

595 
	#AFE_REFTRIMH_REG
(
ba£
Ë((ba£)->
REFTRIMH
)

	)

596 
	#AFE_DACAMP_REG
(
ba£
Ë((ba£)->
DACAMP
)

	)

597 
	#AFE_CLMPDAT_REG
(
ba£
Ë((ba£)->
CLMPDAT
)

	)

598 
	#AFE_CLMPAMP_REG
(
ba£
Ë((ba£)->
CLMPAMP
)

	)

599 
	#AFE_CLAMP_REG
(
ba£
Ë((ba£)->
CLAMP
)

	)

600 
	#AFE_INPBUF_REG
(
ba£
Ë((ba£)->
INPBUF
)

	)

601 
	#AFE_INPFLT_REG
(
ba£
Ë((ba£)->
INPFLT
)

	)

602 
	#AFE_ADCDGN_REG
(
ba£
Ë((ba£)->
ADCDGN
)

	)

603 
	#AFE_OFFDRV_REG
(
ba£
Ë((ba£)->
OFFDRV
)

	)

604 
	#AFE_INPCONFIG_REG
(
ba£
Ë((ba£)->
INPCONFIG
)

	)

605 
	#AFE_PROGDELAY_REG
(
ba£
Ë((ba£)->
PROGDELAY
)

	)

606 
	#AFE_ADCOMT_REG
(
ba£
Ë((ba£)->
ADCOMT
)

	)

607 
	#AFE_ALGDELAY_REG
(
ba£
Ë((ba£)->
ALGDELAY
)

	)

608 
	#AFE_ACC_ID_REG
(
ba£
Ë((ba£)->
ACC_ID
)

	)

609 
	#AFE_ACCSTA_REG
(
ba£
Ë((ba£)->
ACCSTA
)

	)

610 
	#AFE_ACCNOSLI_REG
(
ba£
Ë((ba£)->
ACCNOSLI
)

	)

611 
	#AFE_ACCCALCON_REG
(
ba£
Ë((ba£)->
ACCCALCON
)

	)

612 
	#AFE_BWEWRICTRL_REG
(
ba£
Ë((ba£)->
BWEWRICTRL
)

	)

613 
	#AFE_SELSLI_REG
(
ba£
Ë((ba£)->
SELSLI
)

	)

614 
	#AFE_SELBYT_REG
(
ba£
Ë((ba£)->
SELBYT
)

	)

615 
	#AFE_REDVAL_REG
(
ba£
Ë((ba£)->
REDVAL
)

	)

616 
	#AFE_WRIBYT_REG
(
ba£
Ë((ba£)->
WRIBYT
)

	)

632 
	#AFE_BLOCK_ID_BLOCK_ID_MASK
 0xFFu

	)

633 
	#AFE_BLOCK_ID_BLOCK_ID_SHIFT
 0

	)

634 
	#AFE_BLOCK_ID_BLOCK_ID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_BLOCK_ID_BLOCK_ID_SHIFT
))&
AFE_BLOCK_ID_BLOCK_ID_MASK
)

	)

636 
	#AFE_PDBUF_ACAFE_PD_N_MASK
 0x1u

	)

637 
	#AFE_PDBUF_ACAFE_PD_N_SHIFT
 0

	)

638 
	#AFE_PDBUF_BGR_BGR_PD_N_MASK
 0x2u

	)

639 
	#AFE_PDBUF_BGR_BGR_PD_N_SHIFT
 1

	)

640 
	#AFE_PDBUF_BGR_PD_N_MASK
 0x4u

	)

641 
	#AFE_PDBUF_BGR_PD_N_SHIFT
 2

	)

642 
	#AFE_PDBUF_TESTBUFFERS_PD_N_MASK
 0x18u

	)

643 
	#AFE_PDBUF_TESTBUFFERS_PD_N_SHIFT
 3

	)

644 
	#AFE_PDBUF_TESTBUFFERS_PD_N
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_PDBUF_TESTBUFFERS_PD_N_SHIFT
))&
AFE_PDBUF_TESTBUFFERS_PD_N_MASK
)

	)

646 
	#AFE_SWRST_SYSCLK_SW_RST_N_MASK
 0x1u

	)

647 
	#AFE_SWRST_SYSCLK_SW_RST_N_SHIFT
 0

	)

648 
	#AFE_SWRST_ADC_PROC_CLK_SW_RST_N_MASK
 0x2u

	)

649 
	#AFE_SWRST_ADC_PROC_CLK_SW_RST_N_SHIFT
 1

	)

650 
	#AFE_SWRST_ACAFE_SW_RST_N_MASK
 0x4u

	)

651 
	#AFE_SWRST_ACAFE_SW_RST_N_SHIFT
 2

	)

653 
	#AFE_BGREG_BGR_TRIMLEVEL_MASK
 0xFu

	)

654 
	#AFE_BGREG_BGR_TRIMLEVEL_SHIFT
 0

	)

655 
	#AFE_BGREG_BGR_TRIMLEVEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_BGREG_BGR_TRIMLEVEL_SHIFT
))&
AFE_BGREG_BGR_TRIMLEVEL_MASK
)

	)

656 
	#AFE_BGREG_BGR_EN_EXT_CURRENT_MASK
 0x10u

	)

657 
	#AFE_BGREG_BGR_EN_EXT_CURRENT_SHIFT
 4

	)

659 
	#AFE_ACCESSAR_ID_ACCESSAR_ID_MASK
 0xFFu

	)

660 
	#AFE_ACCESSAR_ID_ACCESSAR_ID_SHIFT
 0

	)

661 
	#AFE_ACCESSAR_ID_ACCESSAR_ID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_ACCESSAR_ID_ACCESSAR_ID_SHIFT
))&
AFE_ACCESSAR_ID_ACCESSAR_ID_MASK
)

	)

663 
	#AFE_PDADC_ACCESSAR_PD_N_MASK
 0x1u

	)

664 
	#AFE_PDADC_ACCESSAR_PD_N_SHIFT
 0

	)

665 
	#AFE_PDADC_DLYLOOP_PD_N_MASK
 0x2u

	)

666 
	#AFE_PDADC_DLYLOOP_PD_N_SHIFT
 1

	)

667 
	#AFE_PDADC_ADC_IREF_PD_N_MASK
 0x4u

	)

668 
	#AFE_PDADC_ADC_IREF_PD_N_SHIFT
 2

	)

669 
	#AFE_PDADC_CLAMP_PD_N_MASK
 0x8u

	)

670 
	#AFE_PDADC_CLAMP_PD_N_SHIFT
 3

	)

672 
	#AFE_PDSARH_ADC_PD_N_MASK
 0x1u

	)

673 
	#AFE_PDSARH_ADC_PD_N_SHIFT
 0

	)

675 
	#AFE_PDSARL_ADC_PD_N_MASK
 0xFFu

	)

676 
	#AFE_PDSARL_ADC_PD_N_SHIFT
 0

	)

677 
	#AFE_PDSARL_ADC_PD_N
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_PDSARL_ADC_PD_N_SHIFT
))&
AFE_PDSARL_ADC_PD_N_MASK
)

	)

679 
	#AFE_PDADCRFH_ADCREF_REFBUFSLICE_PD_N_MASK
 0x1u

	)

680 
	#AFE_PDADCRFH_ADCREF_REFBUFSLICE_PD_N_SHIFT
 0

	)

682 
	#AFE_PDADCRFL_ADCREF_REFBUFSLICE_PD_N_MASK
 0xFFu

	)

683 
	#AFE_PDADCRFL_ADCREF_REFBUFSLICE_PD_N_SHIFT
 0

	)

684 
	#AFE_PDADCRFL_ADCREF_REFBUFSLICE_PD_N
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_PDADCRFL_ADCREF_REFBUFSLICE_PD_N_SHIFT
))&
AFE_PDADCRFL_ADCREF_REFBUFSLICE_PD_N_MASK
)

	)

686 
	#AFE_ADCGN_ADC_GAIN_MASK
 0xFu

	)

687 
	#AFE_ADCGN_ADC_GAIN_SHIFT
 0

	)

688 
	#AFE_ADCGN_ADC_GAIN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_ADCGN_ADC_GAIN_SHIFT
))&
AFE_ADCGN_ADC_GAIN_MASK
)

	)

690 
	#AFE_REFTRIML_ADCREF_REFTRIM08_MASK
 0x3u

	)

691 
	#AFE_REFTRIML_ADCREF_REFTRIM08_SHIFT
 0

	)

692 
	#AFE_REFTRIML_ADCREF_REFTRIM08
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_REFTRIML_ADCREF_REFTRIM08_SHIFT
))&
AFE_REFTRIML_ADCREF_REFTRIM08_MASK
)

	)

693 
	#AFE_REFTRIML_ADCREF_REFTRIM04_MASK
 0xCu

	)

694 
	#AFE_REFTRIML_ADCREF_REFTRIM04_SHIFT
 2

	)

695 
	#AFE_REFTRIML_ADCREF_REFTRIM04
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_REFTRIML_ADCREF_REFTRIM04_SHIFT
))&
AFE_REFTRIML_ADCREF_REFTRIM04_MASK
)

	)

696 
	#AFE_REFTRIML_ADCREF_REFTRIM02_MASK
 0x30u

	)

697 
	#AFE_REFTRIML_ADCREF_REFTRIM02_SHIFT
 4

	)

698 
	#AFE_REFTRIML_ADCREF_REFTRIM02
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_REFTRIML_ADCREF_REFTRIM02_SHIFT
))&
AFE_REFTRIML_ADCREF_REFTRIM02_MASK
)

	)

699 
	#AFE_REFTRIML_ADCREF_REFTRIMOP_MASK
 0xC0u

	)

700 
	#AFE_REFTRIML_ADCREF_REFTRIMOP_SHIFT
 6

	)

701 
	#AFE_REFTRIML_ADCREF_REFTRIMOP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_REFTRIML_ADCREF_REFTRIMOP_SHIFT
))&
AFE_REFTRIML_ADCREF_REFTRIMOP_MASK
)

	)

703 
	#AFE_REFTRIMH_ADCREF_REFTRIM_MASK
 0xFu

	)

704 
	#AFE_REFTRIMH_ADCREF_REFTRIM_SHIFT
 0

	)

705 
	#AFE_REFTRIMH_ADCREF_REFTRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_REFTRIMH_ADCREF_REFTRIM_SHIFT
))&
AFE_REFTRIMH_ADCREF_REFTRIM_MASK
)

	)

707 
	#AFE_DACAMP_CLAMPDAC_TRIM_MASK
 0xFu

	)

708 
	#AFE_DACAMP_CLAMPDAC_TRIM_SHIFT
 0

	)

709 
	#AFE_DACAMP_CLAMPDAC_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_DACAMP_CLAMPDAC_TRIM_SHIFT
))&
AFE_DACAMP_CLAMPDAC_TRIM_MASK
)

	)

711 
	#AFE_CLMPDAT_CLAMPDAC_DATA_MASK
 0xFFu

	)

712 
	#AFE_CLMPDAT_CLAMPDAC_DATA_SHIFT
 0

	)

713 
	#AFE_CLMPDAT_CLAMPDAC_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_CLMPDAT_CLAMPDAC_DATA_SHIFT
))&
AFE_CLMPDAT_CLAMPDAC_DATA_MASK
)

	)

715 
	#AFE_CLMPAMP_CLAMP_DACDATA_EXTRA_MASK
 0x7u

	)

716 
	#AFE_CLMPAMP_CLAMP_DACDATA_EXTRA_SHIFT
 0

	)

717 
	#AFE_CLMPAMP_CLAMP_DACDATA_EXTRA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_CLMPAMP_CLAMP_DACDATA_EXTRA_SHIFT
))&
AFE_CLMPAMP_CLAMP_DACDATA_EXTRA_MASK
)

	)

718 
	#AFE_CLMPAMP_CLAMP_DACDATA_WEIGHT_MASK
 0x18u

	)

719 
	#AFE_CLMPAMP_CLAMP_DACDATA_WEIGHT_SHIFT
 3

	)

720 
	#AFE_CLMPAMP_CLAMP_DACDATA_WEIGHT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_CLMPAMP_CLAMP_DACDATA_WEIGHT_SHIFT
))&
AFE_CLMPAMP_CLAMP_DACDATA_WEIGHT_MASK
)

	)

721 
	#AFE_CLMPAMP_CLAMP_UPDN_REG_OVERRIDE_MASK
 0x20u

	)

722 
	#AFE_CLMPAMP_CLAMP_UPDN_REG_OVERRIDE_SHIFT
 5

	)

723 
	#AFE_CLMPAMP_CLAMP_CURRENT_REG_OVERRIDE_MASK
 0x40u

	)

724 
	#AFE_CLMPAMP_CLAMP_CURRENT_REG_OVERRIDE_SHIFT
 6

	)

726 
	#AFE_CLAMP_NCLAMP_POWERSAVE_MASK
 0x1u

	)

727 
	#AFE_CLAMP_NCLAMP_POWERSAVE_SHIFT
 0

	)

728 
	#AFE_CLAMP_CLAMP_VN_MASK
 0x2u

	)

729 
	#AFE_CLAMP_CLAMP_VN_SHIFT
 1

	)

730 
	#AFE_CLAMP_CLAMP_IPEN_REG_MASK
 0x4u

	)

731 
	#AFE_CLAMP_CLAMP_IPEN_REG_SHIFT
 2

	)

732 
	#AFE_CLAMP_CLAMP_INEN_REG_MASK
 0x8u

	)

733 
	#AFE_CLAMP_CLAMP_INEN_REG_SHIFT
 3

	)

734 
	#AFE_CLAMP_CLAMP_LOWCURRMODE_MASK
 0x10u

	)

735 
	#AFE_CLAMP_CLAMP_LOWCURRMODE_SHIFT
 4

	)

736 
	#AFE_CLAMP_DIV_PROC_CLK_MASK
 0x20u

	)

737 
	#AFE_CLAMP_DIV_PROC_CLK_SHIFT
 5

	)

738 
	#AFE_CLAMP_CLAMP_UP_DOWN_POLARITY_MASK
 0x40u

	)

739 
	#AFE_CLAMP_CLAMP_UP_DOWN_POLARITY_SHIFT
 6

	)

740 
	#AFE_CLAMP_CLAMP_PWN_MODE_MASK
 0x80u

	)

741 
	#AFE_CLAMP_CLAMP_PWN_MODE_SHIFT
 7

	)

743 
	#AFE_INPBUF_BUFF_EN_RI_MASK
 0x1u

	)

744 
	#AFE_INPBUF_BUFF_EN_RI_SHIFT
 0

	)

745 
	#AFE_INPBUF_BUFF_EN_DI_MASK
 0x2u

	)

746 
	#AFE_INPBUF_BUFF_EN_DI_SHIFT
 1

	)

747 
	#AFE_INPBUF_BUFF_EN_CM_MASK
 0x4u

	)

748 
	#AFE_INPBUF_BUFF_EN_CM_SHIFT
 2

	)

749 
	#AFE_INPBUF_MUX_BUFFER_BP_EN_MASK
 0x8u

	)

750 
	#AFE_INPBUF_MUX_BUFFER_BP_EN_SHIFT
 3

	)

751 
	#AFE_INPBUF_MUX_BUFFER_15M_EN_MASK
 0x10u

	)

752 
	#AFE_INPBUF_MUX_BUFFER_15M_EN_SHIFT
 4

	)

753 
	#AFE_INPBUF_MUX_CLAMPEN_MASK
 0x20u

	)

754 
	#AFE_INPBUF_MUX_CLAMPEN_SHIFT
 5

	)

756 
	#AFE_INPFLT_MUX_PDCURRENTMIRROR_MASK
 0x1u

	)

757 
	#AFE_INPFLT_MUX_PDCURRENTMIRROR_SHIFT
 0

	)

758 
	#AFE_INPFLT_MUX_FILTER_15M_EN_MASK
 0x2u

	)

759 
	#AFE_INPFLT_MUX_FILTER_15M_EN_SHIFT
 1

	)

760 
	#AFE_INPFLT_MUX_FILTERBYPASS_MASK
 0x4u

	)

761 
	#AFE_INPFLT_MUX_FILTERBYPASS_SHIFT
 2

	)

763 
	#AFE_ADCDGN_ADC_DIGITAL_GAIN_MASK
 0x3Fu

	)

764 
	#AFE_ADCDGN_ADC_DIGITAL_GAIN_SHIFT
 0

	)

765 
	#AFE_ADCDGN_ADC_DIGITAL_GAIN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_ADCDGN_ADC_DIGITAL_GAIN_SHIFT
))&
AFE_ADCDGN_ADC_DIGITAL_GAIN_MASK
)

	)

766 
	#AFE_ADCDGN_ADC_DIGITAL_GAIN_BYPASS_MASK
 0x40u

	)

767 
	#AFE_ADCDGN_ADC_DIGITAL_GAIN_BYPASS_SHIFT
 6

	)

769 
	#AFE_OFFDRV_ENOFFCHIPDRIVE_MASK
 0x3u

	)

770 
	#AFE_OFFDRV_ENOFFCHIPDRIVE_SHIFT
 0

	)

771 
	#AFE_OFFDRV_ENOFFCHIPDRIVE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_OFFDRV_ENOFFCHIPDRIVE_SHIFT
))&
AFE_OFFDRV_ENOFFCHIPDRIVE_MASK
)

	)

772 
	#AFE_OFFDRV_SH_TRIM_MASK
 0xCu

	)

773 
	#AFE_OFFDRV_SH_TRIM_SHIFT
 2

	)

774 
	#AFE_OFFDRV_SH_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_OFFDRV_SH_TRIM_SHIFT
))&
AFE_OFFDRV_SH_TRIM_MASK
)

	)

776 
	#AFE_INPCONFIG_INPUT_PULLDOWN_EN_MASK
 0xFu

	)

777 
	#AFE_INPCONFIG_INPUT_PULLDOWN_EN_SHIFT
 0

	)

778 
	#AFE_INPCONFIG_INPUT_PULLDOWN_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_INPCONFIG_INPUT_PULLDOWN_EN_SHIFT
))&
AFE_INPCONFIG_INPUT_PULLDOWN_EN_MASK
)

	)

779 
	#AFE_INPCONFIG_MUX_ENLF_MASK
 0xF0u

	)

780 
	#AFE_INPCONFIG_MUX_ENLF_SHIFT
 4

	)

781 
	#AFE_INPCONFIG_MUX_ENLF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_INPCONFIG_MUX_ENLF_SHIFT
))&
AFE_INPCONFIG_MUX_ENLF_MASK
)

	)

783 
	#AFE_PROGDELAY_PROG_DELAY_MASK
 0xFFu

	)

784 
	#AFE_PROGDELAY_PROG_DELAY_SHIFT
 0

	)

785 
	#AFE_PROGDELAY_PROG_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_PROGDELAY_PROG_DELAY_SHIFT
))&
AFE_PROGDELAY_PROG_DELAY_MASK
)

	)

787 
	#AFE_ADCOMT_OVERRIDE_MASK
 0x1u

	)

788 
	#AFE_ADCOMT_OVERRIDE_SHIFT
 0

	)

789 
	#AFE_ADCOMT_WAIT_TIME_MASK
 0x3Eu

	)

790 
	#AFE_ADCOMT_WAIT_TIME_SHIFT
 1

	)

791 
	#AFE_ADCOMT_WAIT_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_ADCOMT_WAIT_TIME_SHIFT
))&
AFE_ADCOMT_WAIT_TIME_MASK
)

	)

792 
	#AFE_ADCOMT_MEASURE_TIMING_MASK
 0xC0u

	)

793 
	#AFE_ADCOMT_MEASURE_TIMING_SHIFT
 6

	)

794 
	#AFE_ADCOMT_MEASURE_TIMING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_ADCOMT_MEASURE_TIMING_SHIFT
))&
AFE_ADCOMT_MEASURE_TIMING_MASK
)

	)

796 
	#AFE_ALGDELAY_ALGORITHM_DELAY_MASK
 0xFFu

	)

797 
	#AFE_ALGDELAY_ALGORITHM_DELAY_SHIFT
 0

	)

798 
	#AFE_ALGDELAY_ALGORITHM_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_ALGDELAY_ALGORITHM_DELAY_SHIFT
))&
AFE_ALGDELAY_ALGORITHM_DELAY_MASK
)

	)

800 
	#AFE_ACC_ID_BLOCK_ID_MASK
 0xFFu

	)

801 
	#AFE_ACC_ID_BLOCK_ID_SHIFT
 0

	)

802 
	#AFE_ACC_ID_BLOCK_ID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_ACC_ID_BLOCK_ID_SHIFT
))&
AFE_ACC_ID_BLOCK_ID_MASK
)

	)

804 
	#AFE_ACCSTA_STATUS_MASK
 0x1Fu

	)

805 
	#AFE_ACCSTA_STATUS_SHIFT
 0

	)

806 
	#AFE_ACCSTA_STATUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_ACCSTA_STATUS_SHIFT
))&
AFE_ACCSTA_STATUS_MASK
)

	)

808 
	#AFE_ACCNOSLI_NO_OF_SLICES_MASK
 0x3Fu

	)

809 
	#AFE_ACCNOSLI_NO_OF_SLICES_SHIFT
 0

	)

810 
	#AFE_ACCNOSLI_NO_OF_SLICES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_ACCNOSLI_NO_OF_SLICES_SHIFT
))&
AFE_ACCNOSLI_NO_OF_SLICES_MASK
)

	)

812 
	#AFE_ACCCALCON_CALIBRATE_START_MASK
 0x1u

	)

813 
	#AFE_ACCCALCON_CALIBRATE_START_SHIFT
 0

	)

814 
	#AFE_ACCCALCON_BYPASS_MASK
 0x2u

	)

815 
	#AFE_ACCCALCON_BYPASS_SHIFT
 1

	)

816 
	#AFE_ACCCALCON_BYPASS_CALIB_MASK
 0x4u

	)

817 
	#AFE_ACCCALCON_BYPASS_CALIB_SHIFT
 2

	)

818 
	#AFE_ACCCALCON_OFFSET_COMP_EN_MASK
 0x8u

	)

819 
	#AFE_ACCCALCON_OFFSET_COMP_EN_SHIFT
 3

	)

820 
	#AFE_ACCCALCON_ANA_OFFSET_COMP_EN_MASK
 0x10u

	)

821 
	#AFE_ACCCALCON_ANA_OFFSET_COMP_EN_SHIFT
 4

	)

823 
	#AFE_BWEWRICTRL_BWE_CTRL_MASK
 0x3u

	)

824 
	#AFE_BWEWRICTRL_BWE_CTRL_SHIFT
 0

	)

825 
	#AFE_BWEWRICTRL_BWE_CTRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_BWEWRICTRL_BWE_CTRL_SHIFT
))&
AFE_BWEWRICTRL_BWE_CTRL_MASK
)

	)

826 
	#AFE_BWEWRICTRL_BWE_WRITE_CTRL_MASK
 0x4u

	)

827 
	#AFE_BWEWRICTRL_BWE_WRITE_CTRL_SHIFT
 2

	)

829 
	#AFE_SELSLI_SELECT_SLICE_MASK
 0xFFu

	)

830 
	#AFE_SELSLI_SELECT_SLICE_SHIFT
 0

	)

831 
	#AFE_SELSLI_SELECT_SLICE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_SELSLI_SELECT_SLICE_SHIFT
))&
AFE_SELSLI_SELECT_SLICE_MASK
)

	)

833 
	#AFE_SELBYT_SELECT_BYTE_MASK
 0xFFu

	)

834 
	#AFE_SELBYT_SELECT_BYTE_SHIFT
 0

	)

835 
	#AFE_SELBYT_SELECT_BYTE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_SELBYT_SELECT_BYTE_SHIFT
))&
AFE_SELBYT_SELECT_BYTE_MASK
)

	)

837 
	#AFE_REDVAL_READ_VALUE_MASK
 0xFFu

	)

838 
	#AFE_REDVAL_READ_VALUE_SHIFT
 0

	)

839 
	#AFE_REDVAL_READ_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_REDVAL_READ_VALUE_SHIFT
))&
AFE_REDVAL_READ_VALUE_MASK
)

	)

841 
	#AFE_WRIBYT_WRITE_BYTE_MASK
 0xFFu

	)

842 
	#AFE_WRIBYT_WRITE_BYTE_SHIFT
 0

	)

843 
	#AFE_WRIBYT_WRITE_BYTE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AFE_WRIBYT_WRITE_BYTE_SHIFT
))&
AFE_WRIBYT_WRITE_BYTE_MASK
)

	)

851 
	#AFE_BASE
 (0x42228000u)

	)

853 
	#AFE
 ((
AFE_Ty≥
 *)
AFE_BASE
)

	)

854 
	#AFE_BASE_PTR
 (
AFE
)

	)

856 
	#AFE_BASE_ADDRS
 { 
AFE_BASE
 }

	)

858 
	#AFE_BASE_PTRS
 { 
AFE
 }

	)

871 
	#AFE_BLOCK_ID
 
	`AFE_BLOCK_ID_REG
(
AFE_BASE_PTR
)

	)

872 
	#AFE_PDBUF
 
	`AFE_PDBUF_REG
(
AFE_BASE_PTR
)

	)

873 
	#AFE_SWRST
 
	`AFE_SWRST_REG
(
AFE_BASE_PTR
)

	)

874 
	#AFE_BGREG
 
	`AFE_BGREG_REG
(
AFE_BASE_PTR
)

	)

875 
	#AFE_ACCESSAR_ID
 
	`AFE_ACCESSAR_ID_REG
(
AFE_BASE_PTR
)

	)

876 
	#AFE_PDADC
 
	`AFE_PDADC_REG
(
AFE_BASE_PTR
)

	)

877 
	#AFE_PDSARH
 
	`AFE_PDSARH_REG
(
AFE_BASE_PTR
)

	)

878 
	#AFE_PDSARL
 
	`AFE_PDSARL_REG
(
AFE_BASE_PTR
)

	)

879 
	#AFE_PDADCRFH
 
	`AFE_PDADCRFH_REG
(
AFE_BASE_PTR
)

	)

880 
	#AFE_PDADCRFL
 
	`AFE_PDADCRFL_REG
(
AFE_BASE_PTR
)

	)

881 
	#AFE_ADCGN
 
	`AFE_ADCGN_REG
(
AFE_BASE_PTR
)

	)

882 
	#AFE_REFTRIML
 
	`AFE_REFTRIML_REG
(
AFE_BASE_PTR
)

	)

883 
	#AFE_REFTRIMH
 
	`AFE_REFTRIMH_REG
(
AFE_BASE_PTR
)

	)

884 
	#AFE_DACAMP
 
	`AFE_DACAMP_REG
(
AFE_BASE_PTR
)

	)

885 
	#AFE_CLMPDAT
 
	`AFE_CLMPDAT_REG
(
AFE_BASE_PTR
)

	)

886 
	#AFE_CLMPAMP
 
	`AFE_CLMPAMP_REG
(
AFE_BASE_PTR
)

	)

887 
	#AFE_CLAMP
 
	`AFE_CLAMP_REG
(
AFE_BASE_PTR
)

	)

888 
	#AFE_INPBUF
 
	`AFE_INPBUF_REG
(
AFE_BASE_PTR
)

	)

889 
	#AFE_INPFLT
 
	`AFE_INPFLT_REG
(
AFE_BASE_PTR
)

	)

890 
	#AFE_ADCDGN
 
	`AFE_ADCDGN_REG
(
AFE_BASE_PTR
)

	)

891 
	#AFE_OFFDRV
 
	`AFE_OFFDRV_REG
(
AFE_BASE_PTR
)

	)

892 
	#AFE_INPCONFIG
 
	`AFE_INPCONFIG_REG
(
AFE_BASE_PTR
)

	)

893 
	#AFE_PROGDELAY
 
	`AFE_PROGDELAY_REG
(
AFE_BASE_PTR
)

	)

894 
	#AFE_ADCOMT
 
	`AFE_ADCOMT_REG
(
AFE_BASE_PTR
)

	)

895 
	#AFE_ALGDELAY
 
	`AFE_ALGDELAY_REG
(
AFE_BASE_PTR
)

	)

896 
	#AFE_ACC_ID
 
	`AFE_ACC_ID_REG
(
AFE_BASE_PTR
)

	)

897 
	#AFE_ACCSTA
 
	`AFE_ACCSTA_REG
(
AFE_BASE_PTR
)

	)

898 
	#AFE_ACCNOSLI
 
	`AFE_ACCNOSLI_REG
(
AFE_BASE_PTR
)

	)

899 
	#AFE_ACCCALCON
 
	`AFE_ACCCALCON_REG
(
AFE_BASE_PTR
)

	)

900 
	#AFE_BWEWRICTRL
 
	`AFE_BWEWRICTRL_REG
(
AFE_BASE_PTR
)

	)

901 
	#AFE_SELSLI
 
	`AFE_SELSLI_REG
(
AFE_BASE_PTR
)

	)

902 
	#AFE_SELBYT
 
	`AFE_SELBYT_REG
(
AFE_BASE_PTR
)

	)

903 
	#AFE_REDVAL
 
	`AFE_REDVAL_REG
(
AFE_BASE_PTR
)

	)

904 
	#AFE_WRIBYT
 
	`AFE_WRIBYT_REG
(
AFE_BASE_PTR
)

	)

925 
__IO
 
uöt32_t
 
	mASRCTR
;

926 
__IO
 
uöt32_t
 
	mASRIER
;

927 
uöt8_t
 
	mRESERVED_0
[4];

928 
__IO
 
uöt32_t
 
	mASRCNCR
;

929 
__IO
 
uöt32_t
 
	mASRCFG
;

930 
__IO
 
uöt32_t
 
	mASRCSR
;

931 
__IO
 
uöt32_t
 
	mASRCDR1
;

932 
__IO
 
uöt32_t
 
	mASRCDR2
;

933 
__I
 
uöt32_t
 
	mASRSTR
;

934 
uöt8_t
 
	mRESERVED_1
[28];

935 
__IO
 
uöt32_t
 
	mASRPMn
[5];

936 
__IO
 
uöt32_t
 
	mASRTFR1
;

937 
uöt8_t
 
	mRESERVED_2
[4];

938 
__IO
 
uöt32_t
 
	mASRCCR
;

940 
__O
 
uöt32_t
 
	mASRDI
;

941 
__I
 
uöt32_t
 
	mASRDO
;

942 } 
	mASRD
[3];

943 
uöt8_t
 
	mRESERVED_3
[8];

944 
__IO
 
uöt32_t
 
	mASRIDRHA
;

945 
__IO
 
uöt32_t
 
	mASRIDRLA
;

946 
__IO
 
uöt32_t
 
	mASRIDRHB
;

947 
__IO
 
uöt32_t
 
	mASRIDRLB
;

948 
__IO
 
uöt32_t
 
	mASRIDRHC
;

949 
__IO
 
uöt32_t
 
	mASRIDRLC
;

950 
__IO
 
uöt32_t
 
	mASR76K
;

951 
__IO
 
uöt32_t
 
	mASR56K
;

952 
__IO
 
uöt32_t
 
	mASRMCRA
;

953 
__I
 
uöt32_t
 
	mASRFSTA
;

954 
__IO
 
uöt32_t
 
	mASRMCRB
;

955 
__I
 
uöt32_t
 
	mASRFSTB
;

956 
__IO
 
uöt32_t
 
	mASRMCRC
;

957 
__I
 
uöt32_t
 
	mASRFSTC
;

958 
uöt8_t
 
	mRESERVED_4
[8];

959 
__IO
 
uöt32_t
 
	mASRMCR1
[3];

960 } 
	tASRC_Ty≥
, *
	tASRC_MemM≠På
;

972 
	#ASRC_ASRCTR_REG
(
ba£
Ë((ba£)->
ASRCTR
)

	)

973 
	#ASRC_ASRIER_REG
(
ba£
Ë((ba£)->
ASRIER
)

	)

974 
	#ASRC_ASRCNCR_REG
(
ba£
Ë((ba£)->
ASRCNCR
)

	)

975 
	#ASRC_ASRCFG_REG
(
ba£
Ë((ba£)->
ASRCFG
)

	)

976 
	#ASRC_ASRCSR_REG
(
ba£
Ë((ba£)->
ASRCSR
)

	)

977 
	#ASRC_ASRCDR1_REG
(
ba£
Ë((ba£)->
ASRCDR1
)

	)

978 
	#ASRC_ASRCDR2_REG
(
ba£
Ë((ba£)->
ASRCDR2
)

	)

979 
	#ASRC_ASRSTR_REG
(
ba£
Ë((ba£)->
ASRSTR
)

	)

980 
	#ASRC_ASRPMn_REG
(
ba£
,
ödex
Ë((ba£)->
ASRPMn
[ödex])

	)

981 
	#ASRC_ASRTFR1_REG
(
ba£
Ë((ba£)->
ASRTFR1
)

	)

982 
	#ASRC_ASRCCR_REG
(
ba£
Ë((ba£)->
ASRCCR
)

	)

983 
	#ASRC_ASRDI_REG
(
ba£
,
ödex
Ë((ba£)->
ASRD
[ödex].
ASRDI
)

	)

984 
	#ASRC_ASRDO_REG
(
ba£
,
ödex
Ë((ba£)->
ASRD
[ödex].
ASRDO
)

	)

985 
	#ASRC_ASRIDRHA_REG
(
ba£
Ë((ba£)->
ASRIDRHA
)

	)

986 
	#ASRC_ASRIDRLA_REG
(
ba£
Ë((ba£)->
ASRIDRLA
)

	)

987 
	#ASRC_ASRIDRHB_REG
(
ba£
Ë((ba£)->
ASRIDRHB
)

	)

988 
	#ASRC_ASRIDRLB_REG
(
ba£
Ë((ba£)->
ASRIDRLB
)

	)

989 
	#ASRC_ASRIDRHC_REG
(
ba£
Ë((ba£)->
ASRIDRHC
)

	)

990 
	#ASRC_ASRIDRLC_REG
(
ba£
Ë((ba£)->
ASRIDRLC
)

	)

991 
	#ASRC_ASR76K_REG
(
ba£
Ë((ba£)->
ASR76K
)

	)

992 
	#ASRC_ASR56K_REG
(
ba£
Ë((ba£)->
ASR56K
)

	)

993 
	#ASRC_ASRMCRA_REG
(
ba£
Ë((ba£)->
ASRMCRA
)

	)

994 
	#ASRC_ASRFSTA_REG
(
ba£
Ë((ba£)->
ASRFSTA
)

	)

995 
	#ASRC_ASRMCRB_REG
(
ba£
Ë((ba£)->
ASRMCRB
)

	)

996 
	#ASRC_ASRFSTB_REG
(
ba£
Ë((ba£)->
ASRFSTB
)

	)

997 
	#ASRC_ASRMCRC_REG
(
ba£
Ë((ba£)->
ASRMCRC
)

	)

998 
	#ASRC_ASRFSTC_REG
(
ba£
Ë((ba£)->
ASRFSTC
)

	)

999 
	#ASRC_ASRMCR1_REG
(
ba£
,
ödex
Ë((ba£)->
ASRMCR1
[ödex])

	)

1015 
	#ASRC_ASRCTR_ASRCEN_MASK
 0x1u

	)

1016 
	#ASRC_ASRCTR_ASRCEN_SHIFT
 0

	)

1017 
	#ASRC_ASRCTR_ASREA_MASK
 0x2u

	)

1018 
	#ASRC_ASRCTR_ASREA_SHIFT
 1

	)

1019 
	#ASRC_ASRCTR_ASREB_MASK
 0x4u

	)

1020 
	#ASRC_ASRCTR_ASREB_SHIFT
 2

	)

1021 
	#ASRC_ASRCTR_ASREC_MASK
 0x8u

	)

1022 
	#ASRC_ASRCTR_ASREC_SHIFT
 3

	)

1023 
	#ASRC_ASRCTR_SRST_MASK
 0x10u

	)

1024 
	#ASRC_ASRCTR_SRST_SHIFT
 4

	)

1025 
	#ASRC_ASRCTR_IDRA_MASK
 0x2000u

	)

1026 
	#ASRC_ASRCTR_IDRA_SHIFT
 13

	)

1027 
	#ASRC_ASRCTR_USRA_MASK
 0x4000u

	)

1028 
	#ASRC_ASRCTR_USRA_SHIFT
 14

	)

1029 
	#ASRC_ASRCTR_IDRB_MASK
 0x8000u

	)

1030 
	#ASRC_ASRCTR_IDRB_SHIFT
 15

	)

1031 
	#ASRC_ASRCTR_USRB_MASK
 0x10000u

	)

1032 
	#ASRC_ASRCTR_USRB_SHIFT
 16

	)

1033 
	#ASRC_ASRCTR_IDRC_MASK
 0x20000u

	)

1034 
	#ASRC_ASRCTR_IDRC_SHIFT
 17

	)

1035 
	#ASRC_ASRCTR_USRC_MASK
 0x40000u

	)

1036 
	#ASRC_ASRCTR_USRC_SHIFT
 18

	)

1037 
	#ASRC_ASRCTR_ATSA_MASK
 0x100000u

	)

1038 
	#ASRC_ASRCTR_ATSA_SHIFT
 20

	)

1039 
	#ASRC_ASRCTR_ATSB_MASK
 0x200000u

	)

1040 
	#ASRC_ASRCTR_ATSB_SHIFT
 21

	)

1041 
	#ASRC_ASRCTR_ATSC_MASK
 0x400000u

	)

1042 
	#ASRC_ASRCTR_ATSC_SHIFT
 22

	)

1044 
	#ASRC_ASRIER_ADIEA_MASK
 0x1u

	)

1045 
	#ASRC_ASRIER_ADIEA_SHIFT
 0

	)

1046 
	#ASRC_ASRIER_ADIEB_MASK
 0x2u

	)

1047 
	#ASRC_ASRIER_ADIEB_SHIFT
 1

	)

1048 
	#ASRC_ASRIER_ADIEC_MASK
 0x4u

	)

1049 
	#ASRC_ASRIER_ADIEC_SHIFT
 2

	)

1050 
	#ASRC_ASRIER_ADOEA_MASK
 0x8u

	)

1051 
	#ASRC_ASRIER_ADOEA_SHIFT
 3

	)

1052 
	#ASRC_ASRIER_ADOEB_MASK
 0x10u

	)

1053 
	#ASRC_ASRIER_ADOEB_SHIFT
 4

	)

1054 
	#ASRC_ASRIER_ADOEC_MASK
 0x20u

	)

1055 
	#ASRC_ASRIER_ADOEC_SHIFT
 5

	)

1056 
	#ASRC_ASRIER_AOLIE_MASK
 0x40u

	)

1057 
	#ASRC_ASRIER_AOLIE_SHIFT
 6

	)

1058 
	#ASRC_ASRIER_AFPWE_MASK
 0x80u

	)

1059 
	#ASRC_ASRIER_AFPWE_SHIFT
 7

	)

1061 
	#ASRC_ASRCNCR_ANCA_MASK
 0xFu

	)

1062 
	#ASRC_ASRCNCR_ANCA_SHIFT
 0

	)

1063 
	#ASRC_ASRCNCR_ANCA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCNCR_ANCA_SHIFT
))&
ASRC_ASRCNCR_ANCA_MASK
)

	)

1064 
	#ASRC_ASRCNCR_ANCB_MASK
 0xF0u

	)

1065 
	#ASRC_ASRCNCR_ANCB_SHIFT
 4

	)

1066 
	#ASRC_ASRCNCR_ANCB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCNCR_ANCB_SHIFT
))&
ASRC_ASRCNCR_ANCB_MASK
)

	)

1067 
	#ASRC_ASRCNCR_ANCC_MASK
 0xF00u

	)

1068 
	#ASRC_ASRCNCR_ANCC_SHIFT
 8

	)

1069 
	#ASRC_ASRCNCR_ANCC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCNCR_ANCC_SHIFT
))&
ASRC_ASRCNCR_ANCC_MASK
)

	)

1071 
	#ASRC_ASRCFG_PREMODA_MASK
 0xC0u

	)

1072 
	#ASRC_ASRCFG_PREMODA_SHIFT
 6

	)

1073 
	#ASRC_ASRCFG_PREMODA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCFG_PREMODA_SHIFT
))&
ASRC_ASRCFG_PREMODA_MASK
)

	)

1074 
	#ASRC_ASRCFG_POSTMODA_MASK
 0x300u

	)

1075 
	#ASRC_ASRCFG_POSTMODA_SHIFT
 8

	)

1076 
	#ASRC_ASRCFG_POSTMODA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCFG_POSTMODA_SHIFT
))&
ASRC_ASRCFG_POSTMODA_MASK
)

	)

1077 
	#ASRC_ASRCFG_PREMODB_MASK
 0xC00u

	)

1078 
	#ASRC_ASRCFG_PREMODB_SHIFT
 10

	)

1079 
	#ASRC_ASRCFG_PREMODB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCFG_PREMODB_SHIFT
))&
ASRC_ASRCFG_PREMODB_MASK
)

	)

1080 
	#ASRC_ASRCFG_POSTMODB_MASK
 0x3000u

	)

1081 
	#ASRC_ASRCFG_POSTMODB_SHIFT
 12

	)

1082 
	#ASRC_ASRCFG_POSTMODB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCFG_POSTMODB_SHIFT
))&
ASRC_ASRCFG_POSTMODB_MASK
)

	)

1083 
	#ASRC_ASRCFG_PREMODC_MASK
 0xC000u

	)

1084 
	#ASRC_ASRCFG_PREMODC_SHIFT
 14

	)

1085 
	#ASRC_ASRCFG_PREMODC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCFG_PREMODC_SHIFT
))&
ASRC_ASRCFG_PREMODC_MASK
)

	)

1086 
	#ASRC_ASRCFG_POSTMODC_MASK
 0x30000u

	)

1087 
	#ASRC_ASRCFG_POSTMODC_SHIFT
 16

	)

1088 
	#ASRC_ASRCFG_POSTMODC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCFG_POSTMODC_SHIFT
))&
ASRC_ASRCFG_POSTMODC_MASK
)

	)

1089 
	#ASRC_ASRCFG_NDPRA_MASK
 0x40000u

	)

1090 
	#ASRC_ASRCFG_NDPRA_SHIFT
 18

	)

1091 
	#ASRC_ASRCFG_NDPRB_MASK
 0x80000u

	)

1092 
	#ASRC_ASRCFG_NDPRB_SHIFT
 19

	)

1093 
	#ASRC_ASRCFG_NDPRC_MASK
 0x100000u

	)

1094 
	#ASRC_ASRCFG_NDPRC_SHIFT
 20

	)

1095 
	#ASRC_ASRCFG_INIRQA_MASK
 0x200000u

	)

1096 
	#ASRC_ASRCFG_INIRQA_SHIFT
 21

	)

1097 
	#ASRC_ASRCFG_INIRQB_MASK
 0x400000u

	)

1098 
	#ASRC_ASRCFG_INIRQB_SHIFT
 22

	)

1099 
	#ASRC_ASRCFG_INIRQC_MASK
 0x800000u

	)

1100 
	#ASRC_ASRCFG_INIRQC_SHIFT
 23

	)

1102 
	#ASRC_ASRCSR_AICSA_MASK
 0xFu

	)

1103 
	#ASRC_ASRCSR_AICSA_SHIFT
 0

	)

1104 
	#ASRC_ASRCSR_AICSA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCSR_AICSA_SHIFT
))&
ASRC_ASRCSR_AICSA_MASK
)

	)

1105 
	#ASRC_ASRCSR_AICSB_MASK
 0xF0u

	)

1106 
	#ASRC_ASRCSR_AICSB_SHIFT
 4

	)

1107 
	#ASRC_ASRCSR_AICSB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCSR_AICSB_SHIFT
))&
ASRC_ASRCSR_AICSB_MASK
)

	)

1108 
	#ASRC_ASRCSR_AICSC_MASK
 0xF00u

	)

1109 
	#ASRC_ASRCSR_AICSC_SHIFT
 8

	)

1110 
	#ASRC_ASRCSR_AICSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCSR_AICSC_SHIFT
))&
ASRC_ASRCSR_AICSC_MASK
)

	)

1111 
	#ASRC_ASRCSR_AOCSA_MASK
 0xF000u

	)

1112 
	#ASRC_ASRCSR_AOCSA_SHIFT
 12

	)

1113 
	#ASRC_ASRCSR_AOCSA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCSR_AOCSA_SHIFT
))&
ASRC_ASRCSR_AOCSA_MASK
)

	)

1114 
	#ASRC_ASRCSR_AOCSB_MASK
 0xF0000u

	)

1115 
	#ASRC_ASRCSR_AOCSB_SHIFT
 16

	)

1116 
	#ASRC_ASRCSR_AOCSB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCSR_AOCSB_SHIFT
))&
ASRC_ASRCSR_AOCSB_MASK
)

	)

1117 
	#ASRC_ASRCSR_AOCSC_MASK
 0xF00000u

	)

1118 
	#ASRC_ASRCSR_AOCSC_SHIFT
 20

	)

1119 
	#ASRC_ASRCSR_AOCSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCSR_AOCSC_SHIFT
))&
ASRC_ASRCSR_AOCSC_MASK
)

	)

1121 
	#ASRC_ASRCDR1_AICPA_MASK
 0x7u

	)

1122 
	#ASRC_ASRCDR1_AICPA_SHIFT
 0

	)

1123 
	#ASRC_ASRCDR1_AICPA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCDR1_AICPA_SHIFT
))&
ASRC_ASRCDR1_AICPA_MASK
)

	)

1124 
	#ASRC_ASRCDR1_AICDA_MASK
 0x38u

	)

1125 
	#ASRC_ASRCDR1_AICDA_SHIFT
 3

	)

1126 
	#ASRC_ASRCDR1_AICDA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCDR1_AICDA_SHIFT
))&
ASRC_ASRCDR1_AICDA_MASK
)

	)

1127 
	#ASRC_ASRCDR1_AICPB_MASK
 0x1C0u

	)

1128 
	#ASRC_ASRCDR1_AICPB_SHIFT
 6

	)

1129 
	#ASRC_ASRCDR1_AICPB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCDR1_AICPB_SHIFT
))&
ASRC_ASRCDR1_AICPB_MASK
)

	)

1130 
	#ASRC_ASRCDR1_AICDB_MASK
 0xE00u

	)

1131 
	#ASRC_ASRCDR1_AICDB_SHIFT
 9

	)

1132 
	#ASRC_ASRCDR1_AICDB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCDR1_AICDB_SHIFT
))&
ASRC_ASRCDR1_AICDB_MASK
)

	)

1133 
	#ASRC_ASRCDR1_AOCPA_MASK
 0x7000u

	)

1134 
	#ASRC_ASRCDR1_AOCPA_SHIFT
 12

	)

1135 
	#ASRC_ASRCDR1_AOCPA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCDR1_AOCPA_SHIFT
))&
ASRC_ASRCDR1_AOCPA_MASK
)

	)

1136 
	#ASRC_ASRCDR1_AOCDA_MASK
 0x38000u

	)

1137 
	#ASRC_ASRCDR1_AOCDA_SHIFT
 15

	)

1138 
	#ASRC_ASRCDR1_AOCDA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCDR1_AOCDA_SHIFT
))&
ASRC_ASRCDR1_AOCDA_MASK
)

	)

1139 
	#ASRC_ASRCDR1_AOCPB_MASK
 0x1C0000u

	)

1140 
	#ASRC_ASRCDR1_AOCPB_SHIFT
 18

	)

1141 
	#ASRC_ASRCDR1_AOCPB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCDR1_AOCPB_SHIFT
))&
ASRC_ASRCDR1_AOCPB_MASK
)

	)

1142 
	#ASRC_ASRCDR1_AOCDB_MASK
 0xE00000u

	)

1143 
	#ASRC_ASRCDR1_AOCDB_SHIFT
 21

	)

1144 
	#ASRC_ASRCDR1_AOCDB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCDR1_AOCDB_SHIFT
))&
ASRC_ASRCDR1_AOCDB_MASK
)

	)

1146 
	#ASRC_ASRCDR2_AICPC_MASK
 0x7u

	)

1147 
	#ASRC_ASRCDR2_AICPC_SHIFT
 0

	)

1148 
	#ASRC_ASRCDR2_AICPC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCDR2_AICPC_SHIFT
))&
ASRC_ASRCDR2_AICPC_MASK
)

	)

1149 
	#ASRC_ASRCDR2_AICDC_MASK
 0x38u

	)

1150 
	#ASRC_ASRCDR2_AICDC_SHIFT
 3

	)

1151 
	#ASRC_ASRCDR2_AICDC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCDR2_AICDC_SHIFT
))&
ASRC_ASRCDR2_AICDC_MASK
)

	)

1152 
	#ASRC_ASRCDR2_AOCPC_MASK
 0x1C0u

	)

1153 
	#ASRC_ASRCDR2_AOCPC_SHIFT
 6

	)

1154 
	#ASRC_ASRCDR2_AOCPC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCDR2_AOCPC_SHIFT
))&
ASRC_ASRCDR2_AOCPC_MASK
)

	)

1155 
	#ASRC_ASRCDR2_AOCDC_MASK
 0xE00u

	)

1156 
	#ASRC_ASRCDR2_AOCDC_SHIFT
 9

	)

1157 
	#ASRC_ASRCDR2_AOCDC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCDR2_AOCDC_SHIFT
))&
ASRC_ASRCDR2_AOCDC_MASK
)

	)

1159 
	#ASRC_ASRSTR_AIDEA_MASK
 0x1u

	)

1160 
	#ASRC_ASRSTR_AIDEA_SHIFT
 0

	)

1161 
	#ASRC_ASRSTR_AIDEB_MASK
 0x2u

	)

1162 
	#ASRC_ASRSTR_AIDEB_SHIFT
 1

	)

1163 
	#ASRC_ASRSTR_AIDEC_MASK
 0x4u

	)

1164 
	#ASRC_ASRSTR_AIDEC_SHIFT
 2

	)

1165 
	#ASRC_ASRSTR_AODFA_MASK
 0x8u

	)

1166 
	#ASRC_ASRSTR_AODFA_SHIFT
 3

	)

1167 
	#ASRC_ASRSTR_AODFB_MASK
 0x10u

	)

1168 
	#ASRC_ASRSTR_AODFB_SHIFT
 4

	)

1169 
	#ASRC_ASRSTR_AODFC_MASK
 0x20u

	)

1170 
	#ASRC_ASRSTR_AODFC_SHIFT
 5

	)

1171 
	#ASRC_ASRSTR_AOLE_MASK
 0x40u

	)

1172 
	#ASRC_ASRSTR_AOLE_SHIFT
 6

	)

1173 
	#ASRC_ASRSTR_FPWT_MASK
 0x80u

	)

1174 
	#ASRC_ASRSTR_FPWT_SHIFT
 7

	)

1175 
	#ASRC_ASRSTR_AIDUA_MASK
 0x100u

	)

1176 
	#ASRC_ASRSTR_AIDUA_SHIFT
 8

	)

1177 
	#ASRC_ASRSTR_AIDUB_MASK
 0x200u

	)

1178 
	#ASRC_ASRSTR_AIDUB_SHIFT
 9

	)

1179 
	#ASRC_ASRSTR_AIDUC_MASK
 0x400u

	)

1180 
	#ASRC_ASRSTR_AIDUC_SHIFT
 10

	)

1181 
	#ASRC_ASRSTR_AODOA_MASK
 0x800u

	)

1182 
	#ASRC_ASRSTR_AODOA_SHIFT
 11

	)

1183 
	#ASRC_ASRSTR_AODOB_MASK
 0x1000u

	)

1184 
	#ASRC_ASRSTR_AODOB_SHIFT
 12

	)

1185 
	#ASRC_ASRSTR_AODOC_MASK
 0x2000u

	)

1186 
	#ASRC_ASRSTR_AODOC_SHIFT
 13

	)

1187 
	#ASRC_ASRSTR_AIOLA_MASK
 0x4000u

	)

1188 
	#ASRC_ASRSTR_AIOLA_SHIFT
 14

	)

1189 
	#ASRC_ASRSTR_AIOLB_MASK
 0x8000u

	)

1190 
	#ASRC_ASRSTR_AIOLB_SHIFT
 15

	)

1191 
	#ASRC_ASRSTR_AIOLC_MASK
 0x10000u

	)

1192 
	#ASRC_ASRSTR_AIOLC_SHIFT
 16

	)

1193 
	#ASRC_ASRSTR_AOOLA_MASK
 0x20000u

	)

1194 
	#ASRC_ASRSTR_AOOLA_SHIFT
 17

	)

1195 
	#ASRC_ASRSTR_AOOLB_MASK
 0x40000u

	)

1196 
	#ASRC_ASRSTR_AOOLB_SHIFT
 18

	)

1197 
	#ASRC_ASRSTR_AOOLC_MASK
 0x80000u

	)

1198 
	#ASRC_ASRSTR_AOOLC_SHIFT
 19

	)

1199 
	#ASRC_ASRSTR_ATQOL_MASK
 0x100000u

	)

1200 
	#ASRC_ASRSTR_ATQOL_SHIFT
 20

	)

1201 
	#ASRC_ASRSTR_DSLCNT_MASK
 0x200000u

	)

1202 
	#ASRC_ASRSTR_DSLCNT_SHIFT
 21

	)

1204 
	#ASRC_ASRPMn_PARAMETER_VALUE_MASK
 0xFFFFFFu

	)

1205 
	#ASRC_ASRPMn_PARAMETER_VALUE_SHIFT
 0

	)

1206 
	#ASRC_ASRPMn_PARAMETER_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRPMn_PARAMETER_VALUE_SHIFT
))&
ASRC_ASRPMn_PARAMETER_VALUE_MASK
)

	)

1208 
	#ASRC_ASRTFR1_TF_BASE_MASK
 0x1FC0u

	)

1209 
	#ASRC_ASRTFR1_TF_BASE_SHIFT
 6

	)

1210 
	#ASRC_ASRTFR1_TF_BASE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRTFR1_TF_BASE_SHIFT
))&
ASRC_ASRTFR1_TF_BASE_MASK
)

	)

1211 
	#ASRC_ASRTFR1_TF_FILL_MASK
 0xFE000u

	)

1212 
	#ASRC_ASRTFR1_TF_FILL_SHIFT
 13

	)

1213 
	#ASRC_ASRTFR1_TF_FILL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRTFR1_TF_FILL_SHIFT
))&
ASRC_ASRTFR1_TF_FILL_MASK
)

	)

1215 
	#ASRC_ASRCCR_ACIA_MASK
 0xFu

	)

1216 
	#ASRC_ASRCCR_ACIA_SHIFT
 0

	)

1217 
	#ASRC_ASRCCR_ACIA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCCR_ACIA_SHIFT
))&
ASRC_ASRCCR_ACIA_MASK
)

	)

1218 
	#ASRC_ASRCCR_ACIB_MASK
 0xF0u

	)

1219 
	#ASRC_ASRCCR_ACIB_SHIFT
 4

	)

1220 
	#ASRC_ASRCCR_ACIB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCCR_ACIB_SHIFT
))&
ASRC_ASRCCR_ACIB_MASK
)

	)

1221 
	#ASRC_ASRCCR_ACIC_MASK
 0xF00u

	)

1222 
	#ASRC_ASRCCR_ACIC_SHIFT
 8

	)

1223 
	#ASRC_ASRCCR_ACIC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCCR_ACIC_SHIFT
))&
ASRC_ASRCCR_ACIC_MASK
)

	)

1224 
	#ASRC_ASRCCR_ACOA_MASK
 0xF000u

	)

1225 
	#ASRC_ASRCCR_ACOA_SHIFT
 12

	)

1226 
	#ASRC_ASRCCR_ACOA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCCR_ACOA_SHIFT
))&
ASRC_ASRCCR_ACOA_MASK
)

	)

1227 
	#ASRC_ASRCCR_ACOB_MASK
 0xF0000u

	)

1228 
	#ASRC_ASRCCR_ACOB_SHIFT
 16

	)

1229 
	#ASRC_ASRCCR_ACOB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCCR_ACOB_SHIFT
))&
ASRC_ASRCCR_ACOB_MASK
)

	)

1230 
	#ASRC_ASRCCR_ACOC_MASK
 0xF00000u

	)

1231 
	#ASRC_ASRCCR_ACOC_SHIFT
 20

	)

1232 
	#ASRC_ASRCCR_ACOC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRCCR_ACOC_SHIFT
))&
ASRC_ASRCCR_ACOC_MASK
)

	)

1234 
	#ASRC_ASRDI_DATA_MASK
 0xFFFFFFu

	)

1235 
	#ASRC_ASRDI_DATA_SHIFT
 0

	)

1236 
	#ASRC_ASRDI_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRDI_DATA_SHIFT
))&
ASRC_ASRDI_DATA_MASK
)

	)

1238 
	#ASRC_ASRDO_DATA_MASK
 0xFFFFFFu

	)

1239 
	#ASRC_ASRDO_DATA_SHIFT
 0

	)

1240 
	#ASRC_ASRDO_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRDO_DATA_SHIFT
))&
ASRC_ASRDO_DATA_MASK
)

	)

1242 
	#ASRC_ASRIDRHA_IDRATIOA_MASK
 0xFFu

	)

1243 
	#ASRC_ASRIDRHA_IDRATIOA_SHIFT
 0

	)

1244 
	#ASRC_ASRIDRHA_IDRATIOA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRIDRHA_IDRATIOA_SHIFT
))&
ASRC_ASRIDRHA_IDRATIOA_MASK
)

	)

1246 
	#ASRC_ASRIDRLA_IDRATIOA_MASK
 0xFFFFFFu

	)

1247 
	#ASRC_ASRIDRLA_IDRATIOA_SHIFT
 0

	)

1248 
	#ASRC_ASRIDRLA_IDRATIOA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRIDRLA_IDRATIOA_SHIFT
))&
ASRC_ASRIDRLA_IDRATIOA_MASK
)

	)

1250 
	#ASRC_ASRIDRHB_IDRATIOB_MASK
 0xFFu

	)

1251 
	#ASRC_ASRIDRHB_IDRATIOB_SHIFT
 0

	)

1252 
	#ASRC_ASRIDRHB_IDRATIOB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRIDRHB_IDRATIOB_SHIFT
))&
ASRC_ASRIDRHB_IDRATIOB_MASK
)

	)

1254 
	#ASRC_ASRIDRLB_IDRATIOB_MASK
 0xFFFFFFu

	)

1255 
	#ASRC_ASRIDRLB_IDRATIOB_SHIFT
 0

	)

1256 
	#ASRC_ASRIDRLB_IDRATIOB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRIDRLB_IDRATIOB_SHIFT
))&
ASRC_ASRIDRLB_IDRATIOB_MASK
)

	)

1258 
	#ASRC_ASRIDRHC_IDRATIOC_MASK
 0xFFu

	)

1259 
	#ASRC_ASRIDRHC_IDRATIOC_SHIFT
 0

	)

1260 
	#ASRC_ASRIDRHC_IDRATIOC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRIDRHC_IDRATIOC_SHIFT
))&
ASRC_ASRIDRHC_IDRATIOC_MASK
)

	)

1262 
	#ASRC_ASRIDRLC_IDRATIOC_MASK
 0xFFFFFFu

	)

1263 
	#ASRC_ASRIDRLC_IDRATIOC_SHIFT
 0

	)

1264 
	#ASRC_ASRIDRLC_IDRATIOC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRIDRLC_IDRATIOC_SHIFT
))&
ASRC_ASRIDRLC_IDRATIOC_MASK
)

	)

1266 
	#ASRC_ASR76K_ASR76K_MASK
 0x1FFFFu

	)

1267 
	#ASRC_ASR76K_ASR76K_SHIFT
 0

	)

1268 
	#ASRC_ASR76K_ASR76K
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASR76K_ASR76K_SHIFT
))&
ASRC_ASR76K_ASR76K_MASK
)

	)

1270 
	#ASRC_ASR56K_ASR56K_MASK
 0x1FFFFu

	)

1271 
	#ASRC_ASR56K_ASR56K_SHIFT
 0

	)

1272 
	#ASRC_ASR56K_ASR56K
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASR56K_ASR56K_SHIFT
))&
ASRC_ASR56K_ASR56K_MASK
)

	)

1274 
	#ASRC_ASRMCRA_INFIFO_THRESHOLDA_MASK
 0x3Fu

	)

1275 
	#ASRC_ASRMCRA_INFIFO_THRESHOLDA_SHIFT
 0

	)

1276 
	#ASRC_ASRMCRA_INFIFO_THRESHOLDA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRMCRA_INFIFO_THRESHOLDA_SHIFT
))&
ASRC_ASRMCRA_INFIFO_THRESHOLDA_MASK
)

	)

1277 
	#ASRC_ASRMCRA_RSYNOFA_MASK
 0x400u

	)

1278 
	#ASRC_ASRMCRA_RSYNOFA_SHIFT
 10

	)

1279 
	#ASRC_ASRMCRA_RSYNIFA_MASK
 0x800u

	)

1280 
	#ASRC_ASRMCRA_RSYNIFA_SHIFT
 11

	)

1281 
	#ASRC_ASRMCRA_OUTFIFO_THRESHOLDA_MASK
 0x3F000u

	)

1282 
	#ASRC_ASRMCRA_OUTFIFO_THRESHOLDA_SHIFT
 12

	)

1283 
	#ASRC_ASRMCRA_OUTFIFO_THRESHOLDA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRMCRA_OUTFIFO_THRESHOLDA_SHIFT
))&
ASRC_ASRMCRA_OUTFIFO_THRESHOLDA_MASK
)

	)

1284 
	#ASRC_ASRMCRA_BYPASSPOLYA_MASK
 0x100000u

	)

1285 
	#ASRC_ASRMCRA_BYPASSPOLYA_SHIFT
 20

	)

1286 
	#ASRC_ASRMCRA_BUFSTALLA_MASK
 0x200000u

	)

1287 
	#ASRC_ASRMCRA_BUFSTALLA_SHIFT
 21

	)

1288 
	#ASRC_ASRMCRA_EXTTHRSHA_MASK
 0x400000u

	)

1289 
	#ASRC_ASRMCRA_EXTTHRSHA_SHIFT
 22

	)

1290 
	#ASRC_ASRMCRA_ZEROBUFA_MASK
 0x800000u

	)

1291 
	#ASRC_ASRMCRA_ZEROBUFA_SHIFT
 23

	)

1293 
	#ASRC_ASRFSTA_INFIFO_FILLA_MASK
 0x7Fu

	)

1294 
	#ASRC_ASRFSTA_INFIFO_FILLA_SHIFT
 0

	)

1295 
	#ASRC_ASRFSTA_INFIFO_FILLA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRFSTA_INFIFO_FILLA_SHIFT
))&
ASRC_ASRFSTA_INFIFO_FILLA_MASK
)

	)

1296 
	#ASRC_ASRFSTA_IAEA_MASK
 0x800u

	)

1297 
	#ASRC_ASRFSTA_IAEA_SHIFT
 11

	)

1298 
	#ASRC_ASRFSTA_OUTFIFO_FILLA_MASK
 0x7F000u

	)

1299 
	#ASRC_ASRFSTA_OUTFIFO_FILLA_SHIFT
 12

	)

1300 
	#ASRC_ASRFSTA_OUTFIFO_FILLA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRFSTA_OUTFIFO_FILLA_SHIFT
))&
ASRC_ASRFSTA_OUTFIFO_FILLA_MASK
)

	)

1301 
	#ASRC_ASRFSTA_OAFA_MASK
 0x800000u

	)

1302 
	#ASRC_ASRFSTA_OAFA_SHIFT
 23

	)

1304 
	#ASRC_ASRMCRB_INFIFO_THRESHOLDB_MASK
 0x3Fu

	)

1305 
	#ASRC_ASRMCRB_INFIFO_THRESHOLDB_SHIFT
 0

	)

1306 
	#ASRC_ASRMCRB_INFIFO_THRESHOLDB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRMCRB_INFIFO_THRESHOLDB_SHIFT
))&
ASRC_ASRMCRB_INFIFO_THRESHOLDB_MASK
)

	)

1307 
	#ASRC_ASRMCRB_RSYNOFB_MASK
 0x400u

	)

1308 
	#ASRC_ASRMCRB_RSYNOFB_SHIFT
 10

	)

1309 
	#ASRC_ASRMCRB_RSYNIFB_MASK
 0x800u

	)

1310 
	#ASRC_ASRMCRB_RSYNIFB_SHIFT
 11

	)

1311 
	#ASRC_ASRMCRB_OUTFIFO_THRESHOLDB_MASK
 0x3F000u

	)

1312 
	#ASRC_ASRMCRB_OUTFIFO_THRESHOLDB_SHIFT
 12

	)

1313 
	#ASRC_ASRMCRB_OUTFIFO_THRESHOLDB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRMCRB_OUTFIFO_THRESHOLDB_SHIFT
))&
ASRC_ASRMCRB_OUTFIFO_THRESHOLDB_MASK
)

	)

1314 
	#ASRC_ASRMCRB_BYPASSPOLYB_MASK
 0x100000u

	)

1315 
	#ASRC_ASRMCRB_BYPASSPOLYB_SHIFT
 20

	)

1316 
	#ASRC_ASRMCRB_BUFSTALLB_MASK
 0x200000u

	)

1317 
	#ASRC_ASRMCRB_BUFSTALLB_SHIFT
 21

	)

1318 
	#ASRC_ASRMCRB_EXTTHRSHB_MASK
 0x400000u

	)

1319 
	#ASRC_ASRMCRB_EXTTHRSHB_SHIFT
 22

	)

1320 
	#ASRC_ASRMCRB_ZEROBUFB_MASK
 0x800000u

	)

1321 
	#ASRC_ASRMCRB_ZEROBUFB_SHIFT
 23

	)

1323 
	#ASRC_ASRFSTB_INFIFO_FILLB_MASK
 0x7Fu

	)

1324 
	#ASRC_ASRFSTB_INFIFO_FILLB_SHIFT
 0

	)

1325 
	#ASRC_ASRFSTB_INFIFO_FILLB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRFSTB_INFIFO_FILLB_SHIFT
))&
ASRC_ASRFSTB_INFIFO_FILLB_MASK
)

	)

1326 
	#ASRC_ASRFSTB_IAEB_MASK
 0x800u

	)

1327 
	#ASRC_ASRFSTB_IAEB_SHIFT
 11

	)

1328 
	#ASRC_ASRFSTB_OUTFIFO_FILLB_MASK
 0x7F000u

	)

1329 
	#ASRC_ASRFSTB_OUTFIFO_FILLB_SHIFT
 12

	)

1330 
	#ASRC_ASRFSTB_OUTFIFO_FILLB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRFSTB_OUTFIFO_FILLB_SHIFT
))&
ASRC_ASRFSTB_OUTFIFO_FILLB_MASK
)

	)

1331 
	#ASRC_ASRFSTB_OAFB_MASK
 0x800000u

	)

1332 
	#ASRC_ASRFSTB_OAFB_SHIFT
 23

	)

1334 
	#ASRC_ASRMCRC_INFIFO_THRESHOLDC_MASK
 0x3Fu

	)

1335 
	#ASRC_ASRMCRC_INFIFO_THRESHOLDC_SHIFT
 0

	)

1336 
	#ASRC_ASRMCRC_INFIFO_THRESHOLDC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRMCRC_INFIFO_THRESHOLDC_SHIFT
))&
ASRC_ASRMCRC_INFIFO_THRESHOLDC_MASK
)

	)

1337 
	#ASRC_ASRMCRC_RSYNOFC_MASK
 0x400u

	)

1338 
	#ASRC_ASRMCRC_RSYNOFC_SHIFT
 10

	)

1339 
	#ASRC_ASRMCRC_RSYNIFC_MASK
 0x800u

	)

1340 
	#ASRC_ASRMCRC_RSYNIFC_SHIFT
 11

	)

1341 
	#ASRC_ASRMCRC_OUTFIFO_THRESHOLDC_MASK
 0x3F000u

	)

1342 
	#ASRC_ASRMCRC_OUTFIFO_THRESHOLDC_SHIFT
 12

	)

1343 
	#ASRC_ASRMCRC_OUTFIFO_THRESHOLDC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRMCRC_OUTFIFO_THRESHOLDC_SHIFT
))&
ASRC_ASRMCRC_OUTFIFO_THRESHOLDC_MASK
)

	)

1344 
	#ASRC_ASRMCRC_BYPASSPOLYC_MASK
 0x100000u

	)

1345 
	#ASRC_ASRMCRC_BYPASSPOLYC_SHIFT
 20

	)

1346 
	#ASRC_ASRMCRC_BUFSTALLC_MASK
 0x200000u

	)

1347 
	#ASRC_ASRMCRC_BUFSTALLC_SHIFT
 21

	)

1348 
	#ASRC_ASRMCRC_EXTTHRSHC_MASK
 0x400000u

	)

1349 
	#ASRC_ASRMCRC_EXTTHRSHC_SHIFT
 22

	)

1350 
	#ASRC_ASRMCRC_ZEROBUFC_MASK
 0x800000u

	)

1351 
	#ASRC_ASRMCRC_ZEROBUFC_SHIFT
 23

	)

1353 
	#ASRC_ASRFSTC_INFIFO_FILLC_MASK
 0x7Fu

	)

1354 
	#ASRC_ASRFSTC_INFIFO_FILLC_SHIFT
 0

	)

1355 
	#ASRC_ASRFSTC_INFIFO_FILLC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRFSTC_INFIFO_FILLC_SHIFT
))&
ASRC_ASRFSTC_INFIFO_FILLC_MASK
)

	)

1356 
	#ASRC_ASRFSTC_IAEC_MASK
 0x800u

	)

1357 
	#ASRC_ASRFSTC_IAEC_SHIFT
 11

	)

1358 
	#ASRC_ASRFSTC_OUTFIFO_FILLC_MASK
 0x7F000u

	)

1359 
	#ASRC_ASRFSTC_OUTFIFO_FILLC_SHIFT
 12

	)

1360 
	#ASRC_ASRFSTC_OUTFIFO_FILLC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRFSTC_OUTFIFO_FILLC_SHIFT
))&
ASRC_ASRFSTC_OUTFIFO_FILLC_MASK
)

	)

1361 
	#ASRC_ASRFSTC_OAFC_MASK
 0x800000u

	)

1362 
	#ASRC_ASRFSTC_OAFC_SHIFT
 23

	)

1364 
	#ASRC_ASRMCR1_OW16_MASK
 0x1u

	)

1365 
	#ASRC_ASRMCR1_OW16_SHIFT
 0

	)

1366 
	#ASRC_ASRMCR1_OSGN_MASK
 0x2u

	)

1367 
	#ASRC_ASRMCR1_OSGN_SHIFT
 1

	)

1368 
	#ASRC_ASRMCR1_OMSB_MASK
 0x4u

	)

1369 
	#ASRC_ASRMCR1_OMSB_SHIFT
 2

	)

1370 
	#ASRC_ASRMCR1_IMSB_MASK
 0x100u

	)

1371 
	#ASRC_ASRMCR1_IMSB_SHIFT
 8

	)

1372 
	#ASRC_ASRMCR1_IWD_MASK
 0xE00u

	)

1373 
	#ASRC_ASRMCR1_IWD_SHIFT
 9

	)

1374 
	#ASRC_ASRMCR1_IWD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ASRC_ASRMCR1_IWD_SHIFT
))&
ASRC_ASRMCR1_IWD_MASK
)

	)

1382 
	#ASRC_BASE
 (0x42034000u)

	)

1384 
	#ASRC
 ((
ASRC_Ty≥
 *)
ASRC_BASE
)

	)

1385 
	#ASRC_BASE_PTR
 (
ASRC
)

	)

1387 
	#ASRC_BASE_ADDRS
 { 
ASRC_BASE
 }

	)

1389 
	#ASRC_BASE_PTRS
 { 
ASRC
 }

	)

1391 
	#ASRC_IRQS
 { 
ASRC_IRQn
 }

	)

1404 
	#ASRC_ASRCTR
 
	`ASRC_ASRCTR_REG
(
ASRC_BASE_PTR
)

	)

1405 
	#ASRC_ASRIER
 
	`ASRC_ASRIER_REG
(
ASRC_BASE_PTR
)

	)

1406 
	#ASRC_ASRCNCR
 
	`ASRC_ASRCNCR_REG
(
ASRC_BASE_PTR
)

	)

1407 
	#ASRC_ASRCFG
 
	`ASRC_ASRCFG_REG
(
ASRC_BASE_PTR
)

	)

1408 
	#ASRC_ASRCSR
 
	`ASRC_ASRCSR_REG
(
ASRC_BASE_PTR
)

	)

1409 
	#ASRC_ASRCDR1
 
	`ASRC_ASRCDR1_REG
(
ASRC_BASE_PTR
)

	)

1410 
	#ASRC_ASRCDR2
 
	`ASRC_ASRCDR2_REG
(
ASRC_BASE_PTR
)

	)

1411 
	#ASRC_ASRSTR
 
	`ASRC_ASRSTR_REG
(
ASRC_BASE_PTR
)

	)

1412 
	#ASRC_ASRPMn1
 
	`ASRC_ASRPMn_REG
(
ASRC_BASE_PTR
,0)

	)

1413 
	#ASRC_ASRPMn2
 
	`ASRC_ASRPMn_REG
(
ASRC_BASE_PTR
,1)

	)

1414 
	#ASRC_ASRPMn3
 
	`ASRC_ASRPMn_REG
(
ASRC_BASE_PTR
,2)

	)

1415 
	#ASRC_ASRPMn4
 
	`ASRC_ASRPMn_REG
(
ASRC_BASE_PTR
,3)

	)

1416 
	#ASRC_ASRPMn5
 
	`ASRC_ASRPMn_REG
(
ASRC_BASE_PTR
,4)

	)

1417 
	#ASRC_ASRTFR1
 
	`ASRC_ASRTFR1_REG
(
ASRC_BASE_PTR
)

	)

1418 
	#ASRC_ASRCCR
 
	`ASRC_ASRCCR_REG
(
ASRC_BASE_PTR
)

	)

1419 
	#ASRC_ASRDIA
 
	`ASRC_ASRDI_REG
(
ASRC_BASE_PTR
,0)

	)

1420 
	#ASRC_ASRDOA
 
	`ASRC_ASRDO_REG
(
ASRC_BASE_PTR
,0)

	)

1421 
	#ASRC_ASRDIB
 
	`ASRC_ASRDI_REG
(
ASRC_BASE_PTR
,1)

	)

1422 
	#ASRC_ASRDOB
 
	`ASRC_ASRDO_REG
(
ASRC_BASE_PTR
,1)

	)

1423 
	#ASRC_ASRDIC
 
	`ASRC_ASRDI_REG
(
ASRC_BASE_PTR
,2)

	)

1424 
	#ASRC_ASRDOC
 
	`ASRC_ASRDO_REG
(
ASRC_BASE_PTR
,2)

	)

1425 
	#ASRC_ASRIDRHA
 
	`ASRC_ASRIDRHA_REG
(
ASRC_BASE_PTR
)

	)

1426 
	#ASRC_ASRIDRLA
 
	`ASRC_ASRIDRLA_REG
(
ASRC_BASE_PTR
)

	)

1427 
	#ASRC_ASRIDRHB
 
	`ASRC_ASRIDRHB_REG
(
ASRC_BASE_PTR
)

	)

1428 
	#ASRC_ASRIDRLB
 
	`ASRC_ASRIDRLB_REG
(
ASRC_BASE_PTR
)

	)

1429 
	#ASRC_ASRIDRHC
 
	`ASRC_ASRIDRHC_REG
(
ASRC_BASE_PTR
)

	)

1430 
	#ASRC_ASRIDRLC
 
	`ASRC_ASRIDRLC_REG
(
ASRC_BASE_PTR
)

	)

1431 
	#ASRC_ASR76K
 
	`ASRC_ASR76K_REG
(
ASRC_BASE_PTR
)

	)

1432 
	#ASRC_ASR56K
 
	`ASRC_ASR56K_REG
(
ASRC_BASE_PTR
)

	)

1433 
	#ASRC_ASRMCRA
 
	`ASRC_ASRMCRA_REG
(
ASRC_BASE_PTR
)

	)

1434 
	#ASRC_ASRFSTA
 
	`ASRC_ASRFSTA_REG
(
ASRC_BASE_PTR
)

	)

1435 
	#ASRC_ASRMCRB
 
	`ASRC_ASRMCRB_REG
(
ASRC_BASE_PTR
)

	)

1436 
	#ASRC_ASRFSTB
 
	`ASRC_ASRFSTB_REG
(
ASRC_BASE_PTR
)

	)

1437 
	#ASRC_ASRMCRC
 
	`ASRC_ASRMCRC_REG
(
ASRC_BASE_PTR
)

	)

1438 
	#ASRC_ASRFSTC
 
	`ASRC_ASRFSTC_REG
(
ASRC_BASE_PTR
)

	)

1439 
	#ASRC_ASRMCR1A
 
	`ASRC_ASRMCR1_REG
(
ASRC_BASE_PTR
,0)

	)

1440 
	#ASRC_ASRMCR1B
 
	`ASRC_ASRMCR1_REG
(
ASRC_BASE_PTR
,1)

	)

1441 
	#ASRC_ASRMCR1C
 
	`ASRC_ASRMCR1_REG
(
ASRC_BASE_PTR
,2)

	)

1443 
	#ASRC_ASRPMn
(
ödex
Ë
	`ASRC_ASRPMn_REG
(
ASRC_BASE_PTR
,ödex)

	)

1444 
	#ASRC_ASRDI
(
ödex
Ë
	`ASRC_ASRDI_REG
(
ASRC_BASE_PTR
,ödex)

	)

1445 
	#ASRC_ASRDO
(
ödex
Ë
	`ASRC_ASRDO_REG
(
ASRC_BASE_PTR
,ödex)

	)

1446 
	#ASRC_ASRMCR1
(
ödex
Ë
	`ASRC_ASRMCR1_REG
(
ASRC_BASE_PTR
,ödex)

	)

1467 
__IO
 
uöt32_t
 
	mPTCR1
;

1468 
__IO
 
uöt32_t
 
	mPDCR1
;

1469 
__IO
 
uöt32_t
 
	mPTCR2
;

1470 
__IO
 
uöt32_t
 
	mPDCR2
;

1471 
__IO
 
uöt32_t
 
	mPTCR3
;

1472 
__IO
 
uöt32_t
 
	mPDCR3
;

1473 
__IO
 
uöt32_t
 
	mPTCR4
;

1474 
__IO
 
uöt32_t
 
	mPDCR4
;

1475 
__IO
 
uöt32_t
 
	mPTCR5
;

1476 
__IO
 
uöt32_t
 
	mPDCR5
;

1477 
__IO
 
uöt32_t
 
	mPTCR6
;

1478 
__IO
 
uöt32_t
 
	mPDCR6
;

1479 
__IO
 
uöt32_t
 
	mPTCR7
;

1480 
__IO
 
uöt32_t
 
	mPDCR7
;

1481 } 
	tAUDMUX_Ty≥
, *
	tAUDMUX_MemM≠På
;

1493 
	#AUDMUX_PTCR1_REG
(
ba£
Ë((ba£)->
PTCR1
)

	)

1494 
	#AUDMUX_PDCR1_REG
(
ba£
Ë((ba£)->
PDCR1
)

	)

1495 
	#AUDMUX_PTCR2_REG
(
ba£
Ë((ba£)->
PTCR2
)

	)

1496 
	#AUDMUX_PDCR2_REG
(
ba£
Ë((ba£)->
PDCR2
)

	)

1497 
	#AUDMUX_PTCR3_REG
(
ba£
Ë((ba£)->
PTCR3
)

	)

1498 
	#AUDMUX_PDCR3_REG
(
ba£
Ë((ba£)->
PDCR3
)

	)

1499 
	#AUDMUX_PTCR4_REG
(
ba£
Ë((ba£)->
PTCR4
)

	)

1500 
	#AUDMUX_PDCR4_REG
(
ba£
Ë((ba£)->
PDCR4
)

	)

1501 
	#AUDMUX_PTCR5_REG
(
ba£
Ë((ba£)->
PTCR5
)

	)

1502 
	#AUDMUX_PDCR5_REG
(
ba£
Ë((ba£)->
PDCR5
)

	)

1503 
	#AUDMUX_PTCR6_REG
(
ba£
Ë((ba£)->
PTCR6
)

	)

1504 
	#AUDMUX_PDCR6_REG
(
ba£
Ë((ba£)->
PDCR6
)

	)

1505 
	#AUDMUX_PTCR7_REG
(
ba£
Ë((ba£)->
PTCR7
)

	)

1506 
	#AUDMUX_PDCR7_REG
(
ba£
Ë((ba£)->
PDCR7
)

	)

1522 
	#AUDMUX_PTCR1_SYN_MASK
 0x800u

	)

1523 
	#AUDMUX_PTCR1_SYN_SHIFT
 11

	)

1524 
	#AUDMUX_PTCR1_RCSEL_MASK
 0xF000u

	)

1525 
	#AUDMUX_PTCR1_RCSEL_SHIFT
 12

	)

1526 
	#AUDMUX_PTCR1_RCSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR1_RCSEL_SHIFT
))&
AUDMUX_PTCR1_RCSEL_MASK
)

	)

1527 
	#AUDMUX_PTCR1_RCLKDIR_MASK
 0x10000u

	)

1528 
	#AUDMUX_PTCR1_RCLKDIR_SHIFT
 16

	)

1529 
	#AUDMUX_PTCR1_RFSEL_MASK
 0x1E0000u

	)

1530 
	#AUDMUX_PTCR1_RFSEL_SHIFT
 17

	)

1531 
	#AUDMUX_PTCR1_RFSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR1_RFSEL_SHIFT
))&
AUDMUX_PTCR1_RFSEL_MASK
)

	)

1532 
	#AUDMUX_PTCR1_RFS_DIR_MASK
 0x200000u

	)

1533 
	#AUDMUX_PTCR1_RFS_DIR_SHIFT
 21

	)

1534 
	#AUDMUX_PTCR1_TCSEL_MASK
 0x3C00000u

	)

1535 
	#AUDMUX_PTCR1_TCSEL_SHIFT
 22

	)

1536 
	#AUDMUX_PTCR1_TCSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR1_TCSEL_SHIFT
))&
AUDMUX_PTCR1_TCSEL_MASK
)

	)

1537 
	#AUDMUX_PTCR1_TCLKDIR_MASK
 0x4000000u

	)

1538 
	#AUDMUX_PTCR1_TCLKDIR_SHIFT
 26

	)

1539 
	#AUDMUX_PTCR1_TFSEL_MASK
 0x78000000u

	)

1540 
	#AUDMUX_PTCR1_TFSEL_SHIFT
 27

	)

1541 
	#AUDMUX_PTCR1_TFSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR1_TFSEL_SHIFT
))&
AUDMUX_PTCR1_TFSEL_MASK
)

	)

1542 
	#AUDMUX_PTCR1_TFS_DIR_MASK
 0x80000000u

	)

1543 
	#AUDMUX_PTCR1_TFS_DIR_SHIFT
 31

	)

1545 
	#AUDMUX_PDCR1_INMMASK_MASK
 0xFFu

	)

1546 
	#AUDMUX_PDCR1_INMMASK_SHIFT
 0

	)

1547 
	#AUDMUX_PDCR1_INMMASK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PDCR1_INMMASK_SHIFT
))&
AUDMUX_PDCR1_INMMASK_MASK
)

	)

1548 
	#AUDMUX_PDCR1_MODE_MASK
 0x100u

	)

1549 
	#AUDMUX_PDCR1_MODE_SHIFT
 8

	)

1550 
	#AUDMUX_PDCR1_TXRXEN_MASK
 0x1000u

	)

1551 
	#AUDMUX_PDCR1_TXRXEN_SHIFT
 12

	)

1552 
	#AUDMUX_PDCR1_RXDSEL_MASK
 0xE000u

	)

1553 
	#AUDMUX_PDCR1_RXDSEL_SHIFT
 13

	)

1554 
	#AUDMUX_PDCR1_RXDSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PDCR1_RXDSEL_SHIFT
))&
AUDMUX_PDCR1_RXDSEL_MASK
)

	)

1556 
	#AUDMUX_PTCR2_SYN_MASK
 0x800u

	)

1557 
	#AUDMUX_PTCR2_SYN_SHIFT
 11

	)

1558 
	#AUDMUX_PTCR2_RCSEL_MASK
 0xF000u

	)

1559 
	#AUDMUX_PTCR2_RCSEL_SHIFT
 12

	)

1560 
	#AUDMUX_PTCR2_RCSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR2_RCSEL_SHIFT
))&
AUDMUX_PTCR2_RCSEL_MASK
)

	)

1561 
	#AUDMUX_PTCR2_RCLKDIR_MASK
 0x10000u

	)

1562 
	#AUDMUX_PTCR2_RCLKDIR_SHIFT
 16

	)

1563 
	#AUDMUX_PTCR2_RFSEL_MASK
 0x1E0000u

	)

1564 
	#AUDMUX_PTCR2_RFSEL_SHIFT
 17

	)

1565 
	#AUDMUX_PTCR2_RFSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR2_RFSEL_SHIFT
))&
AUDMUX_PTCR2_RFSEL_MASK
)

	)

1566 
	#AUDMUX_PTCR2_RFS_DIR_MASK
 0x200000u

	)

1567 
	#AUDMUX_PTCR2_RFS_DIR_SHIFT
 21

	)

1568 
	#AUDMUX_PTCR2_TCSEL_MASK
 0x3C00000u

	)

1569 
	#AUDMUX_PTCR2_TCSEL_SHIFT
 22

	)

1570 
	#AUDMUX_PTCR2_TCSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR2_TCSEL_SHIFT
))&
AUDMUX_PTCR2_TCSEL_MASK
)

	)

1571 
	#AUDMUX_PTCR2_TCLKDIR_MASK
 0x4000000u

	)

1572 
	#AUDMUX_PTCR2_TCLKDIR_SHIFT
 26

	)

1573 
	#AUDMUX_PTCR2_TFSEL_MASK
 0x78000000u

	)

1574 
	#AUDMUX_PTCR2_TFSEL_SHIFT
 27

	)

1575 
	#AUDMUX_PTCR2_TFSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR2_TFSEL_SHIFT
))&
AUDMUX_PTCR2_TFSEL_MASK
)

	)

1576 
	#AUDMUX_PTCR2_TFS_DIR_MASK
 0x80000000u

	)

1577 
	#AUDMUX_PTCR2_TFS_DIR_SHIFT
 31

	)

1579 
	#AUDMUX_PDCR2_INMMASK_MASK
 0xFFu

	)

1580 
	#AUDMUX_PDCR2_INMMASK_SHIFT
 0

	)

1581 
	#AUDMUX_PDCR2_INMMASK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PDCR2_INMMASK_SHIFT
))&
AUDMUX_PDCR2_INMMASK_MASK
)

	)

1582 
	#AUDMUX_PDCR2_MODE_MASK
 0x100u

	)

1583 
	#AUDMUX_PDCR2_MODE_SHIFT
 8

	)

1584 
	#AUDMUX_PDCR2_TXRXEN_MASK
 0x1000u

	)

1585 
	#AUDMUX_PDCR2_TXRXEN_SHIFT
 12

	)

1586 
	#AUDMUX_PDCR2_RXDSEL_MASK
 0xE000u

	)

1587 
	#AUDMUX_PDCR2_RXDSEL_SHIFT
 13

	)

1588 
	#AUDMUX_PDCR2_RXDSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PDCR2_RXDSEL_SHIFT
))&
AUDMUX_PDCR2_RXDSEL_MASK
)

	)

1590 
	#AUDMUX_PTCR3_SYN_MASK
 0x800u

	)

1591 
	#AUDMUX_PTCR3_SYN_SHIFT
 11

	)

1592 
	#AUDMUX_PTCR3_RCSEL_MASK
 0xF000u

	)

1593 
	#AUDMUX_PTCR3_RCSEL_SHIFT
 12

	)

1594 
	#AUDMUX_PTCR3_RCSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR3_RCSEL_SHIFT
))&
AUDMUX_PTCR3_RCSEL_MASK
)

	)

1595 
	#AUDMUX_PTCR3_RCLKDIR_MASK
 0x10000u

	)

1596 
	#AUDMUX_PTCR3_RCLKDIR_SHIFT
 16

	)

1597 
	#AUDMUX_PTCR3_RFSEL_MASK
 0x1E0000u

	)

1598 
	#AUDMUX_PTCR3_RFSEL_SHIFT
 17

	)

1599 
	#AUDMUX_PTCR3_RFSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR3_RFSEL_SHIFT
))&
AUDMUX_PTCR3_RFSEL_MASK
)

	)

1600 
	#AUDMUX_PTCR3_RFS_DIR_MASK
 0x200000u

	)

1601 
	#AUDMUX_PTCR3_RFS_DIR_SHIFT
 21

	)

1602 
	#AUDMUX_PTCR3_TCSEL_MASK
 0x3C00000u

	)

1603 
	#AUDMUX_PTCR3_TCSEL_SHIFT
 22

	)

1604 
	#AUDMUX_PTCR3_TCSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR3_TCSEL_SHIFT
))&
AUDMUX_PTCR3_TCSEL_MASK
)

	)

1605 
	#AUDMUX_PTCR3_TCLKDIR_MASK
 0x4000000u

	)

1606 
	#AUDMUX_PTCR3_TCLKDIR_SHIFT
 26

	)

1607 
	#AUDMUX_PTCR3_TFSEL_MASK
 0x78000000u

	)

1608 
	#AUDMUX_PTCR3_TFSEL_SHIFT
 27

	)

1609 
	#AUDMUX_PTCR3_TFSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR3_TFSEL_SHIFT
))&
AUDMUX_PTCR3_TFSEL_MASK
)

	)

1610 
	#AUDMUX_PTCR3_TFS_DIR_MASK
 0x80000000u

	)

1611 
	#AUDMUX_PTCR3_TFS_DIR_SHIFT
 31

	)

1613 
	#AUDMUX_PDCR3_INMMASK_MASK
 0xFFu

	)

1614 
	#AUDMUX_PDCR3_INMMASK_SHIFT
 0

	)

1615 
	#AUDMUX_PDCR3_INMMASK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PDCR3_INMMASK_SHIFT
))&
AUDMUX_PDCR3_INMMASK_MASK
)

	)

1616 
	#AUDMUX_PDCR3_MODE_MASK
 0x100u

	)

1617 
	#AUDMUX_PDCR3_MODE_SHIFT
 8

	)

1618 
	#AUDMUX_PDCR3_TXRXEN_MASK
 0x1000u

	)

1619 
	#AUDMUX_PDCR3_TXRXEN_SHIFT
 12

	)

1620 
	#AUDMUX_PDCR3_RXDSEL_MASK
 0xE000u

	)

1621 
	#AUDMUX_PDCR3_RXDSEL_SHIFT
 13

	)

1622 
	#AUDMUX_PDCR3_RXDSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PDCR3_RXDSEL_SHIFT
))&
AUDMUX_PDCR3_RXDSEL_MASK
)

	)

1624 
	#AUDMUX_PTCR4_SYN_MASK
 0x800u

	)

1625 
	#AUDMUX_PTCR4_SYN_SHIFT
 11

	)

1626 
	#AUDMUX_PTCR4_RCSEL_MASK
 0xF000u

	)

1627 
	#AUDMUX_PTCR4_RCSEL_SHIFT
 12

	)

1628 
	#AUDMUX_PTCR4_RCSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR4_RCSEL_SHIFT
))&
AUDMUX_PTCR4_RCSEL_MASK
)

	)

1629 
	#AUDMUX_PTCR4_RCLKDIR_MASK
 0x10000u

	)

1630 
	#AUDMUX_PTCR4_RCLKDIR_SHIFT
 16

	)

1631 
	#AUDMUX_PTCR4_RFSEL_MASK
 0x1E0000u

	)

1632 
	#AUDMUX_PTCR4_RFSEL_SHIFT
 17

	)

1633 
	#AUDMUX_PTCR4_RFSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR4_RFSEL_SHIFT
))&
AUDMUX_PTCR4_RFSEL_MASK
)

	)

1634 
	#AUDMUX_PTCR4_RFS_DIR_MASK
 0x200000u

	)

1635 
	#AUDMUX_PTCR4_RFS_DIR_SHIFT
 21

	)

1636 
	#AUDMUX_PTCR4_TCSEL_MASK
 0x3C00000u

	)

1637 
	#AUDMUX_PTCR4_TCSEL_SHIFT
 22

	)

1638 
	#AUDMUX_PTCR4_TCSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR4_TCSEL_SHIFT
))&
AUDMUX_PTCR4_TCSEL_MASK
)

	)

1639 
	#AUDMUX_PTCR4_TCLKDIR_MASK
 0x4000000u

	)

1640 
	#AUDMUX_PTCR4_TCLKDIR_SHIFT
 26

	)

1641 
	#AUDMUX_PTCR4_TFSEL_MASK
 0x78000000u

	)

1642 
	#AUDMUX_PTCR4_TFSEL_SHIFT
 27

	)

1643 
	#AUDMUX_PTCR4_TFSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR4_TFSEL_SHIFT
))&
AUDMUX_PTCR4_TFSEL_MASK
)

	)

1644 
	#AUDMUX_PTCR4_TFS_DIR_MASK
 0x80000000u

	)

1645 
	#AUDMUX_PTCR4_TFS_DIR_SHIFT
 31

	)

1647 
	#AUDMUX_PDCR4_INMMASK_MASK
 0xFFu

	)

1648 
	#AUDMUX_PDCR4_INMMASK_SHIFT
 0

	)

1649 
	#AUDMUX_PDCR4_INMMASK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PDCR4_INMMASK_SHIFT
))&
AUDMUX_PDCR4_INMMASK_MASK
)

	)

1650 
	#AUDMUX_PDCR4_MODE_MASK
 0x100u

	)

1651 
	#AUDMUX_PDCR4_MODE_SHIFT
 8

	)

1652 
	#AUDMUX_PDCR4_TXRXEN_MASK
 0x1000u

	)

1653 
	#AUDMUX_PDCR4_TXRXEN_SHIFT
 12

	)

1654 
	#AUDMUX_PDCR4_RXDSEL_MASK
 0xE000u

	)

1655 
	#AUDMUX_PDCR4_RXDSEL_SHIFT
 13

	)

1656 
	#AUDMUX_PDCR4_RXDSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PDCR4_RXDSEL_SHIFT
))&
AUDMUX_PDCR4_RXDSEL_MASK
)

	)

1658 
	#AUDMUX_PTCR5_SYN_MASK
 0x800u

	)

1659 
	#AUDMUX_PTCR5_SYN_SHIFT
 11

	)

1660 
	#AUDMUX_PTCR5_RCSEL_MASK
 0xF000u

	)

1661 
	#AUDMUX_PTCR5_RCSEL_SHIFT
 12

	)

1662 
	#AUDMUX_PTCR5_RCSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR5_RCSEL_SHIFT
))&
AUDMUX_PTCR5_RCSEL_MASK
)

	)

1663 
	#AUDMUX_PTCR5_RCLKDIR_MASK
 0x10000u

	)

1664 
	#AUDMUX_PTCR5_RCLKDIR_SHIFT
 16

	)

1665 
	#AUDMUX_PTCR5_RFSEL_MASK
 0x1E0000u

	)

1666 
	#AUDMUX_PTCR5_RFSEL_SHIFT
 17

	)

1667 
	#AUDMUX_PTCR5_RFSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR5_RFSEL_SHIFT
))&
AUDMUX_PTCR5_RFSEL_MASK
)

	)

1668 
	#AUDMUX_PTCR5_RFS_DIR_MASK
 0x200000u

	)

1669 
	#AUDMUX_PTCR5_RFS_DIR_SHIFT
 21

	)

1670 
	#AUDMUX_PTCR5_TCSEL_MASK
 0x3C00000u

	)

1671 
	#AUDMUX_PTCR5_TCSEL_SHIFT
 22

	)

1672 
	#AUDMUX_PTCR5_TCSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR5_TCSEL_SHIFT
))&
AUDMUX_PTCR5_TCSEL_MASK
)

	)

1673 
	#AUDMUX_PTCR5_TCLKDIR_MASK
 0x4000000u

	)

1674 
	#AUDMUX_PTCR5_TCLKDIR_SHIFT
 26

	)

1675 
	#AUDMUX_PTCR5_TFSEL_MASK
 0x78000000u

	)

1676 
	#AUDMUX_PTCR5_TFSEL_SHIFT
 27

	)

1677 
	#AUDMUX_PTCR5_TFSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR5_TFSEL_SHIFT
))&
AUDMUX_PTCR5_TFSEL_MASK
)

	)

1678 
	#AUDMUX_PTCR5_TFS_DIR_MASK
 0x80000000u

	)

1679 
	#AUDMUX_PTCR5_TFS_DIR_SHIFT
 31

	)

1681 
	#AUDMUX_PDCR5_INMMASK_MASK
 0xFFu

	)

1682 
	#AUDMUX_PDCR5_INMMASK_SHIFT
 0

	)

1683 
	#AUDMUX_PDCR5_INMMASK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PDCR5_INMMASK_SHIFT
))&
AUDMUX_PDCR5_INMMASK_MASK
)

	)

1684 
	#AUDMUX_PDCR5_MODE_MASK
 0x100u

	)

1685 
	#AUDMUX_PDCR5_MODE_SHIFT
 8

	)

1686 
	#AUDMUX_PDCR5_TXRXEN_MASK
 0x1000u

	)

1687 
	#AUDMUX_PDCR5_TXRXEN_SHIFT
 12

	)

1688 
	#AUDMUX_PDCR5_RXDSEL_MASK
 0xE000u

	)

1689 
	#AUDMUX_PDCR5_RXDSEL_SHIFT
 13

	)

1690 
	#AUDMUX_PDCR5_RXDSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PDCR5_RXDSEL_SHIFT
))&
AUDMUX_PDCR5_RXDSEL_MASK
)

	)

1692 
	#AUDMUX_PTCR6_SYN_MASK
 0x800u

	)

1693 
	#AUDMUX_PTCR6_SYN_SHIFT
 11

	)

1694 
	#AUDMUX_PTCR6_RCSEL_MASK
 0xF000u

	)

1695 
	#AUDMUX_PTCR6_RCSEL_SHIFT
 12

	)

1696 
	#AUDMUX_PTCR6_RCSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR6_RCSEL_SHIFT
))&
AUDMUX_PTCR6_RCSEL_MASK
)

	)

1697 
	#AUDMUX_PTCR6_RCLKDIR_MASK
 0x10000u

	)

1698 
	#AUDMUX_PTCR6_RCLKDIR_SHIFT
 16

	)

1699 
	#AUDMUX_PTCR6_RFSEL_MASK
 0x1E0000u

	)

1700 
	#AUDMUX_PTCR6_RFSEL_SHIFT
 17

	)

1701 
	#AUDMUX_PTCR6_RFSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR6_RFSEL_SHIFT
))&
AUDMUX_PTCR6_RFSEL_MASK
)

	)

1702 
	#AUDMUX_PTCR6_RFS_DIR_MASK
 0x200000u

	)

1703 
	#AUDMUX_PTCR6_RFS_DIR_SHIFT
 21

	)

1704 
	#AUDMUX_PTCR6_TCSEL_MASK
 0x3C00000u

	)

1705 
	#AUDMUX_PTCR6_TCSEL_SHIFT
 22

	)

1706 
	#AUDMUX_PTCR6_TCSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR6_TCSEL_SHIFT
))&
AUDMUX_PTCR6_TCSEL_MASK
)

	)

1707 
	#AUDMUX_PTCR6_TCLKDIR_MASK
 0x4000000u

	)

1708 
	#AUDMUX_PTCR6_TCLKDIR_SHIFT
 26

	)

1709 
	#AUDMUX_PTCR6_TFSEL_MASK
 0x78000000u

	)

1710 
	#AUDMUX_PTCR6_TFSEL_SHIFT
 27

	)

1711 
	#AUDMUX_PTCR6_TFSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR6_TFSEL_SHIFT
))&
AUDMUX_PTCR6_TFSEL_MASK
)

	)

1712 
	#AUDMUX_PTCR6_TFS_DIR_MASK
 0x80000000u

	)

1713 
	#AUDMUX_PTCR6_TFS_DIR_SHIFT
 31

	)

1715 
	#AUDMUX_PDCR6_INMMASK_MASK
 0xFFu

	)

1716 
	#AUDMUX_PDCR6_INMMASK_SHIFT
 0

	)

1717 
	#AUDMUX_PDCR6_INMMASK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PDCR6_INMMASK_SHIFT
))&
AUDMUX_PDCR6_INMMASK_MASK
)

	)

1718 
	#AUDMUX_PDCR6_MODE_MASK
 0x100u

	)

1719 
	#AUDMUX_PDCR6_MODE_SHIFT
 8

	)

1720 
	#AUDMUX_PDCR6_TXRXEN_MASK
 0x1000u

	)

1721 
	#AUDMUX_PDCR6_TXRXEN_SHIFT
 12

	)

1722 
	#AUDMUX_PDCR6_RXDSEL_MASK
 0xE000u

	)

1723 
	#AUDMUX_PDCR6_RXDSEL_SHIFT
 13

	)

1724 
	#AUDMUX_PDCR6_RXDSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PDCR6_RXDSEL_SHIFT
))&
AUDMUX_PDCR6_RXDSEL_MASK
)

	)

1726 
	#AUDMUX_PTCR7_SYN_MASK
 0x800u

	)

1727 
	#AUDMUX_PTCR7_SYN_SHIFT
 11

	)

1728 
	#AUDMUX_PTCR7_RCSEL_MASK
 0xF000u

	)

1729 
	#AUDMUX_PTCR7_RCSEL_SHIFT
 12

	)

1730 
	#AUDMUX_PTCR7_RCSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR7_RCSEL_SHIFT
))&
AUDMUX_PTCR7_RCSEL_MASK
)

	)

1731 
	#AUDMUX_PTCR7_RCLKDIR_MASK
 0x10000u

	)

1732 
	#AUDMUX_PTCR7_RCLKDIR_SHIFT
 16

	)

1733 
	#AUDMUX_PTCR7_RFSEL_MASK
 0x1E0000u

	)

1734 
	#AUDMUX_PTCR7_RFSEL_SHIFT
 17

	)

1735 
	#AUDMUX_PTCR7_RFSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR7_RFSEL_SHIFT
))&
AUDMUX_PTCR7_RFSEL_MASK
)

	)

1736 
	#AUDMUX_PTCR7_RFS_DIR_MASK
 0x200000u

	)

1737 
	#AUDMUX_PTCR7_RFS_DIR_SHIFT
 21

	)

1738 
	#AUDMUX_PTCR7_TCSEL_MASK
 0x3C00000u

	)

1739 
	#AUDMUX_PTCR7_TCSEL_SHIFT
 22

	)

1740 
	#AUDMUX_PTCR7_TCSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR7_TCSEL_SHIFT
))&
AUDMUX_PTCR7_TCSEL_MASK
)

	)

1741 
	#AUDMUX_PTCR7_TCLKDIR_MASK
 0x4000000u

	)

1742 
	#AUDMUX_PTCR7_TCLKDIR_SHIFT
 26

	)

1743 
	#AUDMUX_PTCR7_TFSEL_MASK
 0x78000000u

	)

1744 
	#AUDMUX_PTCR7_TFSEL_SHIFT
 27

	)

1745 
	#AUDMUX_PTCR7_TFSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PTCR7_TFSEL_SHIFT
))&
AUDMUX_PTCR7_TFSEL_MASK
)

	)

1746 
	#AUDMUX_PTCR7_TFS_DIR_MASK
 0x80000000u

	)

1747 
	#AUDMUX_PTCR7_TFS_DIR_SHIFT
 31

	)

1749 
	#AUDMUX_PDCR7_INMMASK_MASK
 0xFFu

	)

1750 
	#AUDMUX_PDCR7_INMMASK_SHIFT
 0

	)

1751 
	#AUDMUX_PDCR7_INMMASK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PDCR7_INMMASK_SHIFT
))&
AUDMUX_PDCR7_INMMASK_MASK
)

	)

1752 
	#AUDMUX_PDCR7_MODE_MASK
 0x100u

	)

1753 
	#AUDMUX_PDCR7_MODE_SHIFT
 8

	)

1754 
	#AUDMUX_PDCR7_TXRXEN_MASK
 0x1000u

	)

1755 
	#AUDMUX_PDCR7_TXRXEN_SHIFT
 12

	)

1756 
	#AUDMUX_PDCR7_RXDSEL_MASK
 0xE000u

	)

1757 
	#AUDMUX_PDCR7_RXDSEL_SHIFT
 13

	)

1758 
	#AUDMUX_PDCR7_RXDSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
AUDMUX_PDCR7_RXDSEL_SHIFT
))&
AUDMUX_PDCR7_RXDSEL_MASK
)

	)

1766 
	#AUDMUX_BASE
 (0x421D8000u)

	)

1768 
	#AUDMUX
 ((
AUDMUX_Ty≥
 *)
AUDMUX_BASE
)

	)

1769 
	#AUDMUX_BASE_PTR
 (
AUDMUX
)

	)

1771 
	#AUDMUX_BASE_ADDRS
 { 
AUDMUX_BASE
 }

	)

1773 
	#AUDMUX_BASE_PTRS
 { 
AUDMUX
 }

	)

1786 
	#AUDMUX_PTCR1
 
	`AUDMUX_PTCR1_REG
(
AUDMUX_BASE_PTR
)

	)

1787 
	#AUDMUX_PDCR1
 
	`AUDMUX_PDCR1_REG
(
AUDMUX_BASE_PTR
)

	)

1788 
	#AUDMUX_PTCR2
 
	`AUDMUX_PTCR2_REG
(
AUDMUX_BASE_PTR
)

	)

1789 
	#AUDMUX_PDCR2
 
	`AUDMUX_PDCR2_REG
(
AUDMUX_BASE_PTR
)

	)

1790 
	#AUDMUX_PTCR3
 
	`AUDMUX_PTCR3_REG
(
AUDMUX_BASE_PTR
)

	)

1791 
	#AUDMUX_PDCR3
 
	`AUDMUX_PDCR3_REG
(
AUDMUX_BASE_PTR
)

	)

1792 
	#AUDMUX_PTCR4
 
	`AUDMUX_PTCR4_REG
(
AUDMUX_BASE_PTR
)

	)

1793 
	#AUDMUX_PDCR4
 
	`AUDMUX_PDCR4_REG
(
AUDMUX_BASE_PTR
)

	)

1794 
	#AUDMUX_PTCR5
 
	`AUDMUX_PTCR5_REG
(
AUDMUX_BASE_PTR
)

	)

1795 
	#AUDMUX_PDCR5
 
	`AUDMUX_PDCR5_REG
(
AUDMUX_BASE_PTR
)

	)

1796 
	#AUDMUX_PTCR6
 
	`AUDMUX_PTCR6_REG
(
AUDMUX_BASE_PTR
)

	)

1797 
	#AUDMUX_PDCR6
 
	`AUDMUX_PDCR6_REG
(
AUDMUX_BASE_PTR
)

	)

1798 
	#AUDMUX_PTCR7
 
	`AUDMUX_PTCR7_REG
(
AUDMUX_BASE_PTR
)

	)

1799 
	#AUDMUX_PDCR7
 
	`AUDMUX_PDCR7_REG
(
AUDMUX_BASE_PTR
)

	)

1820 
__IO
 
uöt32_t
 
	mCTRL
;

1821 
__IO
 
uöt32_t
 
	mCTRL_SET
;

1822 
__IO
 
uöt32_t
 
	mCTRL_CLR
;

1823 
__IO
 
uöt32_t
 
	mCTRL_TOG
;

1824 
__I
 
uöt32_t
 
	mSTATUS0
;

1825 
__I
 
uöt32_t
 
	mSTATUS0_SET
;

1826 
__I
 
uöt32_t
 
	mSTATUS0_CLR
;

1827 
__I
 
uöt32_t
 
	mSTATUS0_TOG
;

1828 
__IO
 
uöt32_t
 
	mMODE
;

1829 
__IO
 
uöt32_t
 
	mMODE_SET
;

1830 
__IO
 
uöt32_t
 
	mMODE_CLR
;

1831 
__IO
 
uöt32_t
 
	mMODE_TOG
;

1832 
__IO
 
uöt32_t
 
	mENCODEPTR
;

1833 
__IO
 
uöt32_t
 
	mENCODEPTR_SET
;

1834 
__IO
 
uöt32_t
 
	mENCODEPTR_CLR
;

1835 
__IO
 
uöt32_t
 
	mENCODEPTR_TOG
;

1836 
__IO
 
uöt32_t
 
	mDATAPTR
;

1837 
__IO
 
uöt32_t
 
	mDATAPTR_SET
;

1838 
__IO
 
uöt32_t
 
	mDATAPTR_CLR
;

1839 
__IO
 
uöt32_t
 
	mDATAPTR_TOG
;

1840 
__IO
 
uöt32_t
 
	mMETAPTR
;

1841 
__IO
 
uöt32_t
 
	mMETAPTR_SET
;

1842 
__IO
 
uöt32_t
 
	mMETAPTR_CLR
;

1843 
__IO
 
uöt32_t
 
	mMETAPTR_TOG
;

1844 
uöt8_t
 
	mRESERVED_0
[16];

1845 
__IO
 
uöt32_t
 
	mLAYOUTSELECT
;

1846 
__IO
 
uöt32_t
 
	mLAYOUTSELECT_SET
;

1847 
__IO
 
uöt32_t
 
	mLAYOUTSELECT_CLR
;

1848 
__IO
 
uöt32_t
 
	mLAYOUTSELECT_TOG
;

1849 
__IO
 
uöt32_t
 
	mFLASH0LAYOUT0
;

1850 
__IO
 
uöt32_t
 
	mFLASH0LAYOUT0_SET
;

1851 
__IO
 
uöt32_t
 
	mFLASH0LAYOUT0_CLR
;

1852 
__IO
 
uöt32_t
 
	mFLASH0LAYOUT0_TOG
;

1853 
__IO
 
uöt32_t
 
	mFLASH0LAYOUT1
;

1854 
__IO
 
uöt32_t
 
	mFLASH0LAYOUT1_SET
;

1855 
__IO
 
uöt32_t
 
	mFLASH0LAYOUT1_CLR
;

1856 
__IO
 
uöt32_t
 
	mFLASH0LAYOUT1_TOG
;

1857 
__IO
 
uöt32_t
 
	mFLASH1LAYOUT0
;

1858 
__IO
 
uöt32_t
 
	mFLASH1LAYOUT0_SET
;

1859 
__IO
 
uöt32_t
 
	mFLASH1LAYOUT0_CLR
;

1860 
__IO
 
uöt32_t
 
	mFLASH1LAYOUT0_TOG
;

1861 
__IO
 
uöt32_t
 
	mFLASH1LAYOUT1
;

1862 
__IO
 
uöt32_t
 
	mFLASH1LAYOUT1_SET
;

1863 
__IO
 
uöt32_t
 
	mFLASH1LAYOUT1_CLR
;

1864 
__IO
 
uöt32_t
 
	mFLASH1LAYOUT1_TOG
;

1865 
__IO
 
uöt32_t
 
	mFLASH2LAYOUT0
;

1866 
__IO
 
uöt32_t
 
	mFLASH2LAYOUT0_SET
;

1867 
__IO
 
uöt32_t
 
	mFLASH2LAYOUT0_CLR
;

1868 
__IO
 
uöt32_t
 
	mFLASH2LAYOUT0_TOG
;

1869 
__IO
 
uöt32_t
 
	mFLASH2LAYOUT1
;

1870 
__IO
 
uöt32_t
 
	mFLASH2LAYOUT1_SET
;

1871 
__IO
 
uöt32_t
 
	mFLASH2LAYOUT1_CLR
;

1872 
__IO
 
uöt32_t
 
	mFLASH2LAYOUT1_TOG
;

1873 
__IO
 
uöt32_t
 
	mFLASH3LAYOUT0
;

1874 
__IO
 
uöt32_t
 
	mFLASH3LAYOUT0_SET
;

1875 
__IO
 
uöt32_t
 
	mFLASH3LAYOUT0_CLR
;

1876 
__IO
 
uöt32_t
 
	mFLASH3LAYOUT0_TOG
;

1877 
__IO
 
uöt32_t
 
	mFLASH3LAYOUT1
;

1878 
__IO
 
uöt32_t
 
	mFLASH3LAYOUT1_SET
;

1879 
__IO
 
uöt32_t
 
	mFLASH3LAYOUT1_CLR
;

1880 
__IO
 
uöt32_t
 
	mFLASH3LAYOUT1_TOG
;

1881 
__IO
 
uöt32_t
 
	mDEBUG0
;

1882 
__IO
 
uöt32_t
 
	mDEBUG0_SET
;

1883 
__IO
 
uöt32_t
 
	mDEBUG0_CLR
;

1884 
__IO
 
uöt32_t
 
	mDEBUG0_TOG
;

1885 
__I
 
uöt32_t
 
	mDBGKESREAD
;

1886 
__I
 
uöt32_t
 
	mDBGKESREAD_SET
;

1887 
__I
 
uöt32_t
 
	mDBGKESREAD_CLR
;

1888 
__I
 
uöt32_t
 
	mDBGKESREAD_TOG
;

1889 
__I
 
uöt32_t
 
	mDBGCSFEREAD
;

1890 
__I
 
uöt32_t
 
	mDBGCSFEREAD_SET
;

1891 
__I
 
uöt32_t
 
	mDBGCSFEREAD_CLR
;

1892 
__I
 
uöt32_t
 
	mDBGCSFEREAD_TOG
;

1893 
__I
 
uöt32_t
 
	mDBGSYNDGENREAD
;

1894 
__I
 
uöt32_t
 
	mDBGSYNDGENREAD_SET
;

1895 
__I
 
uöt32_t
 
	mDBGSYNDGENREAD_CLR
;

1896 
__I
 
uöt32_t
 
	mDBGSYNDGENREAD_TOG
;

1897 
__I
 
uöt32_t
 
	mDBGAHBMREAD
;

1898 
__I
 
uöt32_t
 
	mDBGAHBMREAD_SET
;

1899 
__I
 
uöt32_t
 
	mDBGAHBMREAD_CLR
;

1900 
__I
 
uöt32_t
 
	mDBGAHBMREAD_TOG
;

1901 
__I
 
uöt32_t
 
	mBLOCKNAME
;

1902 
__I
 
uöt32_t
 
	mBLOCKNAME_SET
;

1903 
__I
 
uöt32_t
 
	mBLOCKNAME_CLR
;

1904 
__I
 
uöt32_t
 
	mBLOCKNAME_TOG
;

1905 
__I
 
uöt32_t
 
	mVERSION
;

1906 
__I
 
uöt32_t
 
	mVERSION_SET
;

1907 
__I
 
uöt32_t
 
	mVERSION_CLR
;

1908 
__I
 
uöt32_t
 
	mVERSION_TOG
;

1909 
__IO
 
uöt32_t
 
	mDEBUG1
;

1910 
__IO
 
uöt32_t
 
	mDEBUG1_SET
;

1911 
__IO
 
uöt32_t
 
	mDEBUG1_CLR
;

1912 
__IO
 
uöt32_t
 
	mDEBUG1_TOG
;

1913 } 
	tBCH_Ty≥
, *
	tBCH_MemM≠På
;

1925 
	#BCH_CTRL_REG
(
ba£
Ë((ba£)->
CTRL
)

	)

1926 
	#BCH_CTRL_SET_REG
(
ba£
Ë((ba£)->
CTRL_SET
)

	)

1927 
	#BCH_CTRL_CLR_REG
(
ba£
Ë((ba£)->
CTRL_CLR
)

	)

1928 
	#BCH_CTRL_TOG_REG
(
ba£
Ë((ba£)->
CTRL_TOG
)

	)

1929 
	#BCH_STATUS0_REG
(
ba£
Ë((ba£)->
STATUS0
)

	)

1930 
	#BCH_STATUS0_SET_REG
(
ba£
Ë((ba£)->
STATUS0_SET
)

	)

1931 
	#BCH_STATUS0_CLR_REG
(
ba£
Ë((ba£)->
STATUS0_CLR
)

	)

1932 
	#BCH_STATUS0_TOG_REG
(
ba£
Ë((ba£)->
STATUS0_TOG
)

	)

1933 
	#BCH_MODE_REG
(
ba£
Ë((ba£)->
MODE
)

	)

1934 
	#BCH_MODE_SET_REG
(
ba£
Ë((ba£)->
MODE_SET
)

	)

1935 
	#BCH_MODE_CLR_REG
(
ba£
Ë((ba£)->
MODE_CLR
)

	)

1936 
	#BCH_MODE_TOG_REG
(
ba£
Ë((ba£)->
MODE_TOG
)

	)

1937 
	#BCH_ENCODEPTR_REG
(
ba£
Ë((ba£)->
ENCODEPTR
)

	)

1938 
	#BCH_ENCODEPTR_SET_REG
(
ba£
Ë((ba£)->
ENCODEPTR_SET
)

	)

1939 
	#BCH_ENCODEPTR_CLR_REG
(
ba£
Ë((ba£)->
ENCODEPTR_CLR
)

	)

1940 
	#BCH_ENCODEPTR_TOG_REG
(
ba£
Ë((ba£)->
ENCODEPTR_TOG
)

	)

1941 
	#BCH_DATAPTR_REG
(
ba£
Ë((ba£)->
DATAPTR
)

	)

1942 
	#BCH_DATAPTR_SET_REG
(
ba£
Ë((ba£)->
DATAPTR_SET
)

	)

1943 
	#BCH_DATAPTR_CLR_REG
(
ba£
Ë((ba£)->
DATAPTR_CLR
)

	)

1944 
	#BCH_DATAPTR_TOG_REG
(
ba£
Ë((ba£)->
DATAPTR_TOG
)

	)

1945 
	#BCH_METAPTR_REG
(
ba£
Ë((ba£)->
METAPTR
)

	)

1946 
	#BCH_METAPTR_SET_REG
(
ba£
Ë((ba£)->
METAPTR_SET
)

	)

1947 
	#BCH_METAPTR_CLR_REG
(
ba£
Ë((ba£)->
METAPTR_CLR
)

	)

1948 
	#BCH_METAPTR_TOG_REG
(
ba£
Ë((ba£)->
METAPTR_TOG
)

	)

1949 
	#BCH_LAYOUTSELECT_REG
(
ba£
Ë((ba£)->
LAYOUTSELECT
)

	)

1950 
	#BCH_LAYOUTSELECT_SET_REG
(
ba£
Ë((ba£)->
LAYOUTSELECT_SET
)

	)

1951 
	#BCH_LAYOUTSELECT_CLR_REG
(
ba£
Ë((ba£)->
LAYOUTSELECT_CLR
)

	)

1952 
	#BCH_LAYOUTSELECT_TOG_REG
(
ba£
Ë((ba£)->
LAYOUTSELECT_TOG
)

	)

1953 
	#BCH_FLASH0LAYOUT0_REG
(
ba£
Ë((ba£)->
FLASH0LAYOUT0
)

	)

1954 
	#BCH_FLASH0LAYOUT0_SET_REG
(
ba£
Ë((ba£)->
FLASH0LAYOUT0_SET
)

	)

1955 
	#BCH_FLASH0LAYOUT0_CLR_REG
(
ba£
Ë((ba£)->
FLASH0LAYOUT0_CLR
)

	)

1956 
	#BCH_FLASH0LAYOUT0_TOG_REG
(
ba£
Ë((ba£)->
FLASH0LAYOUT0_TOG
)

	)

1957 
	#BCH_FLASH0LAYOUT1_REG
(
ba£
Ë((ba£)->
FLASH0LAYOUT1
)

	)

1958 
	#BCH_FLASH0LAYOUT1_SET_REG
(
ba£
Ë((ba£)->
FLASH0LAYOUT1_SET
)

	)

1959 
	#BCH_FLASH0LAYOUT1_CLR_REG
(
ba£
Ë((ba£)->
FLASH0LAYOUT1_CLR
)

	)

1960 
	#BCH_FLASH0LAYOUT1_TOG_REG
(
ba£
Ë((ba£)->
FLASH0LAYOUT1_TOG
)

	)

1961 
	#BCH_FLASH1LAYOUT0_REG
(
ba£
Ë((ba£)->
FLASH1LAYOUT0
)

	)

1962 
	#BCH_FLASH1LAYOUT0_SET_REG
(
ba£
Ë((ba£)->
FLASH1LAYOUT0_SET
)

	)

1963 
	#BCH_FLASH1LAYOUT0_CLR_REG
(
ba£
Ë((ba£)->
FLASH1LAYOUT0_CLR
)

	)

1964 
	#BCH_FLASH1LAYOUT0_TOG_REG
(
ba£
Ë((ba£)->
FLASH1LAYOUT0_TOG
)

	)

1965 
	#BCH_FLASH1LAYOUT1_REG
(
ba£
Ë((ba£)->
FLASH1LAYOUT1
)

	)

1966 
	#BCH_FLASH1LAYOUT1_SET_REG
(
ba£
Ë((ba£)->
FLASH1LAYOUT1_SET
)

	)

1967 
	#BCH_FLASH1LAYOUT1_CLR_REG
(
ba£
Ë((ba£)->
FLASH1LAYOUT1_CLR
)

	)

1968 
	#BCH_FLASH1LAYOUT1_TOG_REG
(
ba£
Ë((ba£)->
FLASH1LAYOUT1_TOG
)

	)

1969 
	#BCH_FLASH2LAYOUT0_REG
(
ba£
Ë((ba£)->
FLASH2LAYOUT0
)

	)

1970 
	#BCH_FLASH2LAYOUT0_SET_REG
(
ba£
Ë((ba£)->
FLASH2LAYOUT0_SET
)

	)

1971 
	#BCH_FLASH2LAYOUT0_CLR_REG
(
ba£
Ë((ba£)->
FLASH2LAYOUT0_CLR
)

	)

1972 
	#BCH_FLASH2LAYOUT0_TOG_REG
(
ba£
Ë((ba£)->
FLASH2LAYOUT0_TOG
)

	)

1973 
	#BCH_FLASH2LAYOUT1_REG
(
ba£
Ë((ba£)->
FLASH2LAYOUT1
)

	)

1974 
	#BCH_FLASH2LAYOUT1_SET_REG
(
ba£
Ë((ba£)->
FLASH2LAYOUT1_SET
)

	)

1975 
	#BCH_FLASH2LAYOUT1_CLR_REG
(
ba£
Ë((ba£)->
FLASH2LAYOUT1_CLR
)

	)

1976 
	#BCH_FLASH2LAYOUT1_TOG_REG
(
ba£
Ë((ba£)->
FLASH2LAYOUT1_TOG
)

	)

1977 
	#BCH_FLASH3LAYOUT0_REG
(
ba£
Ë((ba£)->
FLASH3LAYOUT0
)

	)

1978 
	#BCH_FLASH3LAYOUT0_SET_REG
(
ba£
Ë((ba£)->
FLASH3LAYOUT0_SET
)

	)

1979 
	#BCH_FLASH3LAYOUT0_CLR_REG
(
ba£
Ë((ba£)->
FLASH3LAYOUT0_CLR
)

	)

1980 
	#BCH_FLASH3LAYOUT0_TOG_REG
(
ba£
Ë((ba£)->
FLASH3LAYOUT0_TOG
)

	)

1981 
	#BCH_FLASH3LAYOUT1_REG
(
ba£
Ë((ba£)->
FLASH3LAYOUT1
)

	)

1982 
	#BCH_FLASH3LAYOUT1_SET_REG
(
ba£
Ë((ba£)->
FLASH3LAYOUT1_SET
)

	)

1983 
	#BCH_FLASH3LAYOUT1_CLR_REG
(
ba£
Ë((ba£)->
FLASH3LAYOUT1_CLR
)

	)

1984 
	#BCH_FLASH3LAYOUT1_TOG_REG
(
ba£
Ë((ba£)->
FLASH3LAYOUT1_TOG
)

	)

1985 
	#BCH_DEBUG0_REG
(
ba£
Ë((ba£)->
DEBUG0
)

	)

1986 
	#BCH_DEBUG0_SET_REG
(
ba£
Ë((ba£)->
DEBUG0_SET
)

	)

1987 
	#BCH_DEBUG0_CLR_REG
(
ba£
Ë((ba£)->
DEBUG0_CLR
)

	)

1988 
	#BCH_DEBUG0_TOG_REG
(
ba£
Ë((ba£)->
DEBUG0_TOG
)

	)

1989 
	#BCH_DBGKESREAD_REG
(
ba£
Ë((ba£)->
DBGKESREAD
)

	)

1990 
	#BCH_DBGKESREAD_SET_REG
(
ba£
Ë((ba£)->
DBGKESREAD_SET
)

	)

1991 
	#BCH_DBGKESREAD_CLR_REG
(
ba£
Ë((ba£)->
DBGKESREAD_CLR
)

	)

1992 
	#BCH_DBGKESREAD_TOG_REG
(
ba£
Ë((ba£)->
DBGKESREAD_TOG
)

	)

1993 
	#BCH_DBGCSFEREAD_REG
(
ba£
Ë((ba£)->
DBGCSFEREAD
)

	)

1994 
	#BCH_DBGCSFEREAD_SET_REG
(
ba£
Ë((ba£)->
DBGCSFEREAD_SET
)

	)

1995 
	#BCH_DBGCSFEREAD_CLR_REG
(
ba£
Ë((ba£)->
DBGCSFEREAD_CLR
)

	)

1996 
	#BCH_DBGCSFEREAD_TOG_REG
(
ba£
Ë((ba£)->
DBGCSFEREAD_TOG
)

	)

1997 
	#BCH_DBGSYNDGENREAD_REG
(
ba£
Ë((ba£)->
DBGSYNDGENREAD
)

	)

1998 
	#BCH_DBGSYNDGENREAD_SET_REG
(
ba£
Ë((ba£)->
DBGSYNDGENREAD_SET
)

	)

1999 
	#BCH_DBGSYNDGENREAD_CLR_REG
(
ba£
Ë((ba£)->
DBGSYNDGENREAD_CLR
)

	)

2000 
	#BCH_DBGSYNDGENREAD_TOG_REG
(
ba£
Ë((ba£)->
DBGSYNDGENREAD_TOG
)

	)

2001 
	#BCH_DBGAHBMREAD_REG
(
ba£
Ë((ba£)->
DBGAHBMREAD
)

	)

2002 
	#BCH_DBGAHBMREAD_SET_REG
(
ba£
Ë((ba£)->
DBGAHBMREAD_SET
)

	)

2003 
	#BCH_DBGAHBMREAD_CLR_REG
(
ba£
Ë((ba£)->
DBGAHBMREAD_CLR
)

	)

2004 
	#BCH_DBGAHBMREAD_TOG_REG
(
ba£
Ë((ba£)->
DBGAHBMREAD_TOG
)

	)

2005 
	#BCH_BLOCKNAME_REG
(
ba£
Ë((ba£)->
BLOCKNAME
)

	)

2006 
	#BCH_BLOCKNAME_SET_REG
(
ba£
Ë((ba£)->
BLOCKNAME_SET
)

	)

2007 
	#BCH_BLOCKNAME_CLR_REG
(
ba£
Ë((ba£)->
BLOCKNAME_CLR
)

	)

2008 
	#BCH_BLOCKNAME_TOG_REG
(
ba£
Ë((ba£)->
BLOCKNAME_TOG
)

	)

2009 
	#BCH_VERSION_REG
(
ba£
Ë((ba£)->
VERSION
)

	)

2010 
	#BCH_VERSION_SET_REG
(
ba£
Ë((ba£)->
VERSION_SET
)

	)

2011 
	#BCH_VERSION_CLR_REG
(
ba£
Ë((ba£)->
VERSION_CLR
)

	)

2012 
	#BCH_VERSION_TOG_REG
(
ba£
Ë((ba£)->
VERSION_TOG
)

	)

2013 
	#BCH_DEBUG1_REG
(
ba£
Ë((ba£)->
DEBUG1
)

	)

2014 
	#BCH_DEBUG1_SET_REG
(
ba£
Ë((ba£)->
DEBUG1_SET
)

	)

2015 
	#BCH_DEBUG1_CLR_REG
(
ba£
Ë((ba£)->
DEBUG1_CLR
)

	)

2016 
	#BCH_DEBUG1_TOG_REG
(
ba£
Ë((ba£)->
DEBUG1_TOG
)

	)

2032 
	#BCH_CTRL_COMPLETE_IRQ_MASK
 0x1u

	)

2033 
	#BCH_CTRL_COMPLETE_IRQ_SHIFT
 0

	)

2034 
	#BCH_CTRL_RSVD0_MASK
 0x2u

	)

2035 
	#BCH_CTRL_RSVD0_SHIFT
 1

	)

2036 
	#BCH_CTRL_DEBUG_STALL_IRQ_MASK
 0x4u

	)

2037 
	#BCH_CTRL_DEBUG_STALL_IRQ_SHIFT
 2

	)

2038 
	#BCH_CTRL_BM_ERROR_IRQ_MASK
 0x8u

	)

2039 
	#BCH_CTRL_BM_ERROR_IRQ_SHIFT
 3

	)

2040 
	#BCH_CTRL_RSVD1_MASK
 0xF0u

	)

2041 
	#BCH_CTRL_RSVD1_SHIFT
 4

	)

2042 
	#BCH_CTRL_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_RSVD1_SHIFT
))&
BCH_CTRL_RSVD1_MASK
)

	)

2043 
	#BCH_CTRL_COMPLETE_IRQ_EN_MASK
 0x100u

	)

2044 
	#BCH_CTRL_COMPLETE_IRQ_EN_SHIFT
 8

	)

2045 
	#BCH_CTRL_RSVD2_MASK
 0x200u

	)

2046 
	#BCH_CTRL_RSVD2_SHIFT
 9

	)

2047 
	#BCH_CTRL_DEBUG_STALL_IRQ_EN_MASK
 0x400u

	)

2048 
	#BCH_CTRL_DEBUG_STALL_IRQ_EN_SHIFT
 10

	)

2049 
	#BCH_CTRL_RSVD3_MASK
 0xF800u

	)

2050 
	#BCH_CTRL_RSVD3_SHIFT
 11

	)

2051 
	#BCH_CTRL_RSVD3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_RSVD3_SHIFT
))&
BCH_CTRL_RSVD3_MASK
)

	)

2052 
	#BCH_CTRL_M2M_ENABLE_MASK
 0x10000u

	)

2053 
	#BCH_CTRL_M2M_ENABLE_SHIFT
 16

	)

2054 
	#BCH_CTRL_M2M_ENCODE_MASK
 0x20000u

	)

2055 
	#BCH_CTRL_M2M_ENCODE_SHIFT
 17

	)

2056 
	#BCH_CTRL_M2M_LAYOUT_MASK
 0xC0000u

	)

2057 
	#BCH_CTRL_M2M_LAYOUT_SHIFT
 18

	)

2058 
	#BCH_CTRL_M2M_LAYOUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_M2M_LAYOUT_SHIFT
))&
BCH_CTRL_M2M_LAYOUT_MASK
)

	)

2059 
	#BCH_CTRL_RSVD4_MASK
 0x300000u

	)

2060 
	#BCH_CTRL_RSVD4_SHIFT
 20

	)

2061 
	#BCH_CTRL_RSVD4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_RSVD4_SHIFT
))&
BCH_CTRL_RSVD4_MASK
)

	)

2062 
	#BCH_CTRL_DEBUGSYNDROME_MASK
 0x400000u

	)

2063 
	#BCH_CTRL_DEBUGSYNDROME_SHIFT
 22

	)

2064 
	#BCH_CTRL_RSVD5_MASK
 0x3F800000u

	)

2065 
	#BCH_CTRL_RSVD5_SHIFT
 23

	)

2066 
	#BCH_CTRL_RSVD5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_RSVD5_SHIFT
))&
BCH_CTRL_RSVD5_MASK
)

	)

2067 
	#BCH_CTRL_CLKGATE_MASK
 0x40000000u

	)

2068 
	#BCH_CTRL_CLKGATE_SHIFT
 30

	)

2069 
	#BCH_CTRL_SFTRST_MASK
 0x80000000u

	)

2070 
	#BCH_CTRL_SFTRST_SHIFT
 31

	)

2072 
	#BCH_CTRL_SET_COMPLETE_IRQ_MASK
 0x1u

	)

2073 
	#BCH_CTRL_SET_COMPLETE_IRQ_SHIFT
 0

	)

2074 
	#BCH_CTRL_SET_RSVD0_MASK
 0x2u

	)

2075 
	#BCH_CTRL_SET_RSVD0_SHIFT
 1

	)

2076 
	#BCH_CTRL_SET_DEBUG_STALL_IRQ_MASK
 0x4u

	)

2077 
	#BCH_CTRL_SET_DEBUG_STALL_IRQ_SHIFT
 2

	)

2078 
	#BCH_CTRL_SET_BM_ERROR_IRQ_MASK
 0x8u

	)

2079 
	#BCH_CTRL_SET_BM_ERROR_IRQ_SHIFT
 3

	)

2080 
	#BCH_CTRL_SET_RSVD1_MASK
 0xF0u

	)

2081 
	#BCH_CTRL_SET_RSVD1_SHIFT
 4

	)

2082 
	#BCH_CTRL_SET_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_SET_RSVD1_SHIFT
))&
BCH_CTRL_SET_RSVD1_MASK
)

	)

2083 
	#BCH_CTRL_SET_COMPLETE_IRQ_EN_MASK
 0x100u

	)

2084 
	#BCH_CTRL_SET_COMPLETE_IRQ_EN_SHIFT
 8

	)

2085 
	#BCH_CTRL_SET_RSVD2_MASK
 0x200u

	)

2086 
	#BCH_CTRL_SET_RSVD2_SHIFT
 9

	)

2087 
	#BCH_CTRL_SET_DEBUG_STALL_IRQ_EN_MASK
 0x400u

	)

2088 
	#BCH_CTRL_SET_DEBUG_STALL_IRQ_EN_SHIFT
 10

	)

2089 
	#BCH_CTRL_SET_RSVD3_MASK
 0xF800u

	)

2090 
	#BCH_CTRL_SET_RSVD3_SHIFT
 11

	)

2091 
	#BCH_CTRL_SET_RSVD3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_SET_RSVD3_SHIFT
))&
BCH_CTRL_SET_RSVD3_MASK
)

	)

2092 
	#BCH_CTRL_SET_M2M_ENABLE_MASK
 0x10000u

	)

2093 
	#BCH_CTRL_SET_M2M_ENABLE_SHIFT
 16

	)

2094 
	#BCH_CTRL_SET_M2M_ENCODE_MASK
 0x20000u

	)

2095 
	#BCH_CTRL_SET_M2M_ENCODE_SHIFT
 17

	)

2096 
	#BCH_CTRL_SET_M2M_LAYOUT_MASK
 0xC0000u

	)

2097 
	#BCH_CTRL_SET_M2M_LAYOUT_SHIFT
 18

	)

2098 
	#BCH_CTRL_SET_M2M_LAYOUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_SET_M2M_LAYOUT_SHIFT
))&
BCH_CTRL_SET_M2M_LAYOUT_MASK
)

	)

2099 
	#BCH_CTRL_SET_RSVD4_MASK
 0x300000u

	)

2100 
	#BCH_CTRL_SET_RSVD4_SHIFT
 20

	)

2101 
	#BCH_CTRL_SET_RSVD4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_SET_RSVD4_SHIFT
))&
BCH_CTRL_SET_RSVD4_MASK
)

	)

2102 
	#BCH_CTRL_SET_DEBUGSYNDROME_MASK
 0x400000u

	)

2103 
	#BCH_CTRL_SET_DEBUGSYNDROME_SHIFT
 22

	)

2104 
	#BCH_CTRL_SET_RSVD5_MASK
 0x3F800000u

	)

2105 
	#BCH_CTRL_SET_RSVD5_SHIFT
 23

	)

2106 
	#BCH_CTRL_SET_RSVD5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_SET_RSVD5_SHIFT
))&
BCH_CTRL_SET_RSVD5_MASK
)

	)

2107 
	#BCH_CTRL_SET_CLKGATE_MASK
 0x40000000u

	)

2108 
	#BCH_CTRL_SET_CLKGATE_SHIFT
 30

	)

2109 
	#BCH_CTRL_SET_SFTRST_MASK
 0x80000000u

	)

2110 
	#BCH_CTRL_SET_SFTRST_SHIFT
 31

	)

2112 
	#BCH_CTRL_CLR_COMPLETE_IRQ_MASK
 0x1u

	)

2113 
	#BCH_CTRL_CLR_COMPLETE_IRQ_SHIFT
 0

	)

2114 
	#BCH_CTRL_CLR_RSVD0_MASK
 0x2u

	)

2115 
	#BCH_CTRL_CLR_RSVD0_SHIFT
 1

	)

2116 
	#BCH_CTRL_CLR_DEBUG_STALL_IRQ_MASK
 0x4u

	)

2117 
	#BCH_CTRL_CLR_DEBUG_STALL_IRQ_SHIFT
 2

	)

2118 
	#BCH_CTRL_CLR_BM_ERROR_IRQ_MASK
 0x8u

	)

2119 
	#BCH_CTRL_CLR_BM_ERROR_IRQ_SHIFT
 3

	)

2120 
	#BCH_CTRL_CLR_RSVD1_MASK
 0xF0u

	)

2121 
	#BCH_CTRL_CLR_RSVD1_SHIFT
 4

	)

2122 
	#BCH_CTRL_CLR_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_CLR_RSVD1_SHIFT
))&
BCH_CTRL_CLR_RSVD1_MASK
)

	)

2123 
	#BCH_CTRL_CLR_COMPLETE_IRQ_EN_MASK
 0x100u

	)

2124 
	#BCH_CTRL_CLR_COMPLETE_IRQ_EN_SHIFT
 8

	)

2125 
	#BCH_CTRL_CLR_RSVD2_MASK
 0x200u

	)

2126 
	#BCH_CTRL_CLR_RSVD2_SHIFT
 9

	)

2127 
	#BCH_CTRL_CLR_DEBUG_STALL_IRQ_EN_MASK
 0x400u

	)

2128 
	#BCH_CTRL_CLR_DEBUG_STALL_IRQ_EN_SHIFT
 10

	)

2129 
	#BCH_CTRL_CLR_RSVD3_MASK
 0xF800u

	)

2130 
	#BCH_CTRL_CLR_RSVD3_SHIFT
 11

	)

2131 
	#BCH_CTRL_CLR_RSVD3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_CLR_RSVD3_SHIFT
))&
BCH_CTRL_CLR_RSVD3_MASK
)

	)

2132 
	#BCH_CTRL_CLR_M2M_ENABLE_MASK
 0x10000u

	)

2133 
	#BCH_CTRL_CLR_M2M_ENABLE_SHIFT
 16

	)

2134 
	#BCH_CTRL_CLR_M2M_ENCODE_MASK
 0x20000u

	)

2135 
	#BCH_CTRL_CLR_M2M_ENCODE_SHIFT
 17

	)

2136 
	#BCH_CTRL_CLR_M2M_LAYOUT_MASK
 0xC0000u

	)

2137 
	#BCH_CTRL_CLR_M2M_LAYOUT_SHIFT
 18

	)

2138 
	#BCH_CTRL_CLR_M2M_LAYOUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_CLR_M2M_LAYOUT_SHIFT
))&
BCH_CTRL_CLR_M2M_LAYOUT_MASK
)

	)

2139 
	#BCH_CTRL_CLR_RSVD4_MASK
 0x300000u

	)

2140 
	#BCH_CTRL_CLR_RSVD4_SHIFT
 20

	)

2141 
	#BCH_CTRL_CLR_RSVD4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_CLR_RSVD4_SHIFT
))&
BCH_CTRL_CLR_RSVD4_MASK
)

	)

2142 
	#BCH_CTRL_CLR_DEBUGSYNDROME_MASK
 0x400000u

	)

2143 
	#BCH_CTRL_CLR_DEBUGSYNDROME_SHIFT
 22

	)

2144 
	#BCH_CTRL_CLR_RSVD5_MASK
 0x3F800000u

	)

2145 
	#BCH_CTRL_CLR_RSVD5_SHIFT
 23

	)

2146 
	#BCH_CTRL_CLR_RSVD5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_CLR_RSVD5_SHIFT
))&
BCH_CTRL_CLR_RSVD5_MASK
)

	)

2147 
	#BCH_CTRL_CLR_CLKGATE_MASK
 0x40000000u

	)

2148 
	#BCH_CTRL_CLR_CLKGATE_SHIFT
 30

	)

2149 
	#BCH_CTRL_CLR_SFTRST_MASK
 0x80000000u

	)

2150 
	#BCH_CTRL_CLR_SFTRST_SHIFT
 31

	)

2152 
	#BCH_CTRL_TOG_COMPLETE_IRQ_MASK
 0x1u

	)

2153 
	#BCH_CTRL_TOG_COMPLETE_IRQ_SHIFT
 0

	)

2154 
	#BCH_CTRL_TOG_RSVD0_MASK
 0x2u

	)

2155 
	#BCH_CTRL_TOG_RSVD0_SHIFT
 1

	)

2156 
	#BCH_CTRL_TOG_DEBUG_STALL_IRQ_MASK
 0x4u

	)

2157 
	#BCH_CTRL_TOG_DEBUG_STALL_IRQ_SHIFT
 2

	)

2158 
	#BCH_CTRL_TOG_BM_ERROR_IRQ_MASK
 0x8u

	)

2159 
	#BCH_CTRL_TOG_BM_ERROR_IRQ_SHIFT
 3

	)

2160 
	#BCH_CTRL_TOG_RSVD1_MASK
 0xF0u

	)

2161 
	#BCH_CTRL_TOG_RSVD1_SHIFT
 4

	)

2162 
	#BCH_CTRL_TOG_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_TOG_RSVD1_SHIFT
))&
BCH_CTRL_TOG_RSVD1_MASK
)

	)

2163 
	#BCH_CTRL_TOG_COMPLETE_IRQ_EN_MASK
 0x100u

	)

2164 
	#BCH_CTRL_TOG_COMPLETE_IRQ_EN_SHIFT
 8

	)

2165 
	#BCH_CTRL_TOG_RSVD2_MASK
 0x200u

	)

2166 
	#BCH_CTRL_TOG_RSVD2_SHIFT
 9

	)

2167 
	#BCH_CTRL_TOG_DEBUG_STALL_IRQ_EN_MASK
 0x400u

	)

2168 
	#BCH_CTRL_TOG_DEBUG_STALL_IRQ_EN_SHIFT
 10

	)

2169 
	#BCH_CTRL_TOG_RSVD3_MASK
 0xF800u

	)

2170 
	#BCH_CTRL_TOG_RSVD3_SHIFT
 11

	)

2171 
	#BCH_CTRL_TOG_RSVD3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_TOG_RSVD3_SHIFT
))&
BCH_CTRL_TOG_RSVD3_MASK
)

	)

2172 
	#BCH_CTRL_TOG_M2M_ENABLE_MASK
 0x10000u

	)

2173 
	#BCH_CTRL_TOG_M2M_ENABLE_SHIFT
 16

	)

2174 
	#BCH_CTRL_TOG_M2M_ENCODE_MASK
 0x20000u

	)

2175 
	#BCH_CTRL_TOG_M2M_ENCODE_SHIFT
 17

	)

2176 
	#BCH_CTRL_TOG_M2M_LAYOUT_MASK
 0xC0000u

	)

2177 
	#BCH_CTRL_TOG_M2M_LAYOUT_SHIFT
 18

	)

2178 
	#BCH_CTRL_TOG_M2M_LAYOUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_TOG_M2M_LAYOUT_SHIFT
))&
BCH_CTRL_TOG_M2M_LAYOUT_MASK
)

	)

2179 
	#BCH_CTRL_TOG_RSVD4_MASK
 0x300000u

	)

2180 
	#BCH_CTRL_TOG_RSVD4_SHIFT
 20

	)

2181 
	#BCH_CTRL_TOG_RSVD4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_TOG_RSVD4_SHIFT
))&
BCH_CTRL_TOG_RSVD4_MASK
)

	)

2182 
	#BCH_CTRL_TOG_DEBUGSYNDROME_MASK
 0x400000u

	)

2183 
	#BCH_CTRL_TOG_DEBUGSYNDROME_SHIFT
 22

	)

2184 
	#BCH_CTRL_TOG_RSVD5_MASK
 0x3F800000u

	)

2185 
	#BCH_CTRL_TOG_RSVD5_SHIFT
 23

	)

2186 
	#BCH_CTRL_TOG_RSVD5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_CTRL_TOG_RSVD5_SHIFT
))&
BCH_CTRL_TOG_RSVD5_MASK
)

	)

2187 
	#BCH_CTRL_TOG_CLKGATE_MASK
 0x40000000u

	)

2188 
	#BCH_CTRL_TOG_CLKGATE_SHIFT
 30

	)

2189 
	#BCH_CTRL_TOG_SFTRST_MASK
 0x80000000u

	)

2190 
	#BCH_CTRL_TOG_SFTRST_SHIFT
 31

	)

2192 
	#BCH_STATUS0_RSVD0_MASK
 0x3u

	)

2193 
	#BCH_STATUS0_RSVD0_SHIFT
 0

	)

2194 
	#BCH_STATUS0_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_RSVD0_SHIFT
))&
BCH_STATUS0_RSVD0_MASK
)

	)

2195 
	#BCH_STATUS0_UNCORRECTABLE_MASK
 0x4u

	)

2196 
	#BCH_STATUS0_UNCORRECTABLE_SHIFT
 2

	)

2197 
	#BCH_STATUS0_CORRECTED_MASK
 0x8u

	)

2198 
	#BCH_STATUS0_CORRECTED_SHIFT
 3

	)

2199 
	#BCH_STATUS0_ALLONES_MASK
 0x10u

	)

2200 
	#BCH_STATUS0_ALLONES_SHIFT
 4

	)

2201 
	#BCH_STATUS0_RSVD1_MASK
 0xE0u

	)

2202 
	#BCH_STATUS0_RSVD1_SHIFT
 5

	)

2203 
	#BCH_STATUS0_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_RSVD1_SHIFT
))&
BCH_STATUS0_RSVD1_MASK
)

	)

2204 
	#BCH_STATUS0_STATUS_BLK0_MASK
 0xFF00u

	)

2205 
	#BCH_STATUS0_STATUS_BLK0_SHIFT
 8

	)

2206 
	#BCH_STATUS0_STATUS_BLK0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_STATUS_BLK0_SHIFT
))&
BCH_STATUS0_STATUS_BLK0_MASK
)

	)

2207 
	#BCH_STATUS0_COMPLETED_CE_MASK
 0xF0000u

	)

2208 
	#BCH_STATUS0_COMPLETED_CE_SHIFT
 16

	)

2209 
	#BCH_STATUS0_COMPLETED_CE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_COMPLETED_CE_SHIFT
))&
BCH_STATUS0_COMPLETED_CE_MASK
)

	)

2210 
	#BCH_STATUS0_HANDLE_MASK
 0xFFF00000u

	)

2211 
	#BCH_STATUS0_HANDLE_SHIFT
 20

	)

2212 
	#BCH_STATUS0_HANDLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_HANDLE_SHIFT
))&
BCH_STATUS0_HANDLE_MASK
)

	)

2214 
	#BCH_STATUS0_SET_RSVD0_MASK
 0x3u

	)

2215 
	#BCH_STATUS0_SET_RSVD0_SHIFT
 0

	)

2216 
	#BCH_STATUS0_SET_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_SET_RSVD0_SHIFT
))&
BCH_STATUS0_SET_RSVD0_MASK
)

	)

2217 
	#BCH_STATUS0_SET_UNCORRECTABLE_MASK
 0x4u

	)

2218 
	#BCH_STATUS0_SET_UNCORRECTABLE_SHIFT
 2

	)

2219 
	#BCH_STATUS0_SET_CORRECTED_MASK
 0x8u

	)

2220 
	#BCH_STATUS0_SET_CORRECTED_SHIFT
 3

	)

2221 
	#BCH_STATUS0_SET_ALLONES_MASK
 0x10u

	)

2222 
	#BCH_STATUS0_SET_ALLONES_SHIFT
 4

	)

2223 
	#BCH_STATUS0_SET_RSVD1_MASK
 0xE0u

	)

2224 
	#BCH_STATUS0_SET_RSVD1_SHIFT
 5

	)

2225 
	#BCH_STATUS0_SET_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_SET_RSVD1_SHIFT
))&
BCH_STATUS0_SET_RSVD1_MASK
)

	)

2226 
	#BCH_STATUS0_SET_STATUS_BLK0_MASK
 0xFF00u

	)

2227 
	#BCH_STATUS0_SET_STATUS_BLK0_SHIFT
 8

	)

2228 
	#BCH_STATUS0_SET_STATUS_BLK0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_SET_STATUS_BLK0_SHIFT
))&
BCH_STATUS0_SET_STATUS_BLK0_MASK
)

	)

2229 
	#BCH_STATUS0_SET_COMPLETED_CE_MASK
 0xF0000u

	)

2230 
	#BCH_STATUS0_SET_COMPLETED_CE_SHIFT
 16

	)

2231 
	#BCH_STATUS0_SET_COMPLETED_CE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_SET_COMPLETED_CE_SHIFT
))&
BCH_STATUS0_SET_COMPLETED_CE_MASK
)

	)

2232 
	#BCH_STATUS0_SET_HANDLE_MASK
 0xFFF00000u

	)

2233 
	#BCH_STATUS0_SET_HANDLE_SHIFT
 20

	)

2234 
	#BCH_STATUS0_SET_HANDLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_SET_HANDLE_SHIFT
))&
BCH_STATUS0_SET_HANDLE_MASK
)

	)

2236 
	#BCH_STATUS0_CLR_RSVD0_MASK
 0x3u

	)

2237 
	#BCH_STATUS0_CLR_RSVD0_SHIFT
 0

	)

2238 
	#BCH_STATUS0_CLR_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_CLR_RSVD0_SHIFT
))&
BCH_STATUS0_CLR_RSVD0_MASK
)

	)

2239 
	#BCH_STATUS0_CLR_UNCORRECTABLE_MASK
 0x4u

	)

2240 
	#BCH_STATUS0_CLR_UNCORRECTABLE_SHIFT
 2

	)

2241 
	#BCH_STATUS0_CLR_CORRECTED_MASK
 0x8u

	)

2242 
	#BCH_STATUS0_CLR_CORRECTED_SHIFT
 3

	)

2243 
	#BCH_STATUS0_CLR_ALLONES_MASK
 0x10u

	)

2244 
	#BCH_STATUS0_CLR_ALLONES_SHIFT
 4

	)

2245 
	#BCH_STATUS0_CLR_RSVD1_MASK
 0xE0u

	)

2246 
	#BCH_STATUS0_CLR_RSVD1_SHIFT
 5

	)

2247 
	#BCH_STATUS0_CLR_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_CLR_RSVD1_SHIFT
))&
BCH_STATUS0_CLR_RSVD1_MASK
)

	)

2248 
	#BCH_STATUS0_CLR_STATUS_BLK0_MASK
 0xFF00u

	)

2249 
	#BCH_STATUS0_CLR_STATUS_BLK0_SHIFT
 8

	)

2250 
	#BCH_STATUS0_CLR_STATUS_BLK0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_CLR_STATUS_BLK0_SHIFT
))&
BCH_STATUS0_CLR_STATUS_BLK0_MASK
)

	)

2251 
	#BCH_STATUS0_CLR_COMPLETED_CE_MASK
 0xF0000u

	)

2252 
	#BCH_STATUS0_CLR_COMPLETED_CE_SHIFT
 16

	)

2253 
	#BCH_STATUS0_CLR_COMPLETED_CE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_CLR_COMPLETED_CE_SHIFT
))&
BCH_STATUS0_CLR_COMPLETED_CE_MASK
)

	)

2254 
	#BCH_STATUS0_CLR_HANDLE_MASK
 0xFFF00000u

	)

2255 
	#BCH_STATUS0_CLR_HANDLE_SHIFT
 20

	)

2256 
	#BCH_STATUS0_CLR_HANDLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_CLR_HANDLE_SHIFT
))&
BCH_STATUS0_CLR_HANDLE_MASK
)

	)

2258 
	#BCH_STATUS0_TOG_RSVD0_MASK
 0x3u

	)

2259 
	#BCH_STATUS0_TOG_RSVD0_SHIFT
 0

	)

2260 
	#BCH_STATUS0_TOG_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_TOG_RSVD0_SHIFT
))&
BCH_STATUS0_TOG_RSVD0_MASK
)

	)

2261 
	#BCH_STATUS0_TOG_UNCORRECTABLE_MASK
 0x4u

	)

2262 
	#BCH_STATUS0_TOG_UNCORRECTABLE_SHIFT
 2

	)

2263 
	#BCH_STATUS0_TOG_CORRECTED_MASK
 0x8u

	)

2264 
	#BCH_STATUS0_TOG_CORRECTED_SHIFT
 3

	)

2265 
	#BCH_STATUS0_TOG_ALLONES_MASK
 0x10u

	)

2266 
	#BCH_STATUS0_TOG_ALLONES_SHIFT
 4

	)

2267 
	#BCH_STATUS0_TOG_RSVD1_MASK
 0xE0u

	)

2268 
	#BCH_STATUS0_TOG_RSVD1_SHIFT
 5

	)

2269 
	#BCH_STATUS0_TOG_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_TOG_RSVD1_SHIFT
))&
BCH_STATUS0_TOG_RSVD1_MASK
)

	)

2270 
	#BCH_STATUS0_TOG_STATUS_BLK0_MASK
 0xFF00u

	)

2271 
	#BCH_STATUS0_TOG_STATUS_BLK0_SHIFT
 8

	)

2272 
	#BCH_STATUS0_TOG_STATUS_BLK0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_TOG_STATUS_BLK0_SHIFT
))&
BCH_STATUS0_TOG_STATUS_BLK0_MASK
)

	)

2273 
	#BCH_STATUS0_TOG_COMPLETED_CE_MASK
 0xF0000u

	)

2274 
	#BCH_STATUS0_TOG_COMPLETED_CE_SHIFT
 16

	)

2275 
	#BCH_STATUS0_TOG_COMPLETED_CE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_TOG_COMPLETED_CE_SHIFT
))&
BCH_STATUS0_TOG_COMPLETED_CE_MASK
)

	)

2276 
	#BCH_STATUS0_TOG_HANDLE_MASK
 0xFFF00000u

	)

2277 
	#BCH_STATUS0_TOG_HANDLE_SHIFT
 20

	)

2278 
	#BCH_STATUS0_TOG_HANDLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_STATUS0_TOG_HANDLE_SHIFT
))&
BCH_STATUS0_TOG_HANDLE_MASK
)

	)

2280 
	#BCH_MODE_ERASE_THRESHOLD_MASK
 0xFFu

	)

2281 
	#BCH_MODE_ERASE_THRESHOLD_SHIFT
 0

	)

2282 
	#BCH_MODE_ERASE_THRESHOLD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_MODE_ERASE_THRESHOLD_SHIFT
))&
BCH_MODE_ERASE_THRESHOLD_MASK
)

	)

2283 
	#BCH_MODE_RSVD_MASK
 0xFFFFFF00u

	)

2284 
	#BCH_MODE_RSVD_SHIFT
 8

	)

2285 
	#BCH_MODE_RSVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_MODE_RSVD_SHIFT
))&
BCH_MODE_RSVD_MASK
)

	)

2287 
	#BCH_MODE_SET_ERASE_THRESHOLD_MASK
 0xFFu

	)

2288 
	#BCH_MODE_SET_ERASE_THRESHOLD_SHIFT
 0

	)

2289 
	#BCH_MODE_SET_ERASE_THRESHOLD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_MODE_SET_ERASE_THRESHOLD_SHIFT
))&
BCH_MODE_SET_ERASE_THRESHOLD_MASK
)

	)

2290 
	#BCH_MODE_SET_RSVD_MASK
 0xFFFFFF00u

	)

2291 
	#BCH_MODE_SET_RSVD_SHIFT
 8

	)

2292 
	#BCH_MODE_SET_RSVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_MODE_SET_RSVD_SHIFT
))&
BCH_MODE_SET_RSVD_MASK
)

	)

2294 
	#BCH_MODE_CLR_ERASE_THRESHOLD_MASK
 0xFFu

	)

2295 
	#BCH_MODE_CLR_ERASE_THRESHOLD_SHIFT
 0

	)

2296 
	#BCH_MODE_CLR_ERASE_THRESHOLD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_MODE_CLR_ERASE_THRESHOLD_SHIFT
))&
BCH_MODE_CLR_ERASE_THRESHOLD_MASK
)

	)

2297 
	#BCH_MODE_CLR_RSVD_MASK
 0xFFFFFF00u

	)

2298 
	#BCH_MODE_CLR_RSVD_SHIFT
 8

	)

2299 
	#BCH_MODE_CLR_RSVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_MODE_CLR_RSVD_SHIFT
))&
BCH_MODE_CLR_RSVD_MASK
)

	)

2301 
	#BCH_MODE_TOG_ERASE_THRESHOLD_MASK
 0xFFu

	)

2302 
	#BCH_MODE_TOG_ERASE_THRESHOLD_SHIFT
 0

	)

2303 
	#BCH_MODE_TOG_ERASE_THRESHOLD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_MODE_TOG_ERASE_THRESHOLD_SHIFT
))&
BCH_MODE_TOG_ERASE_THRESHOLD_MASK
)

	)

2304 
	#BCH_MODE_TOG_RSVD_MASK
 0xFFFFFF00u

	)

2305 
	#BCH_MODE_TOG_RSVD_SHIFT
 8

	)

2306 
	#BCH_MODE_TOG_RSVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_MODE_TOG_RSVD_SHIFT
))&
BCH_MODE_TOG_RSVD_MASK
)

	)

2308 
	#BCH_ENCODEPTR_ADDR_MASK
 0xFFFFFFFFu

	)

2309 
	#BCH_ENCODEPTR_ADDR_SHIFT
 0

	)

2310 
	#BCH_ENCODEPTR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_ENCODEPTR_ADDR_SHIFT
))&
BCH_ENCODEPTR_ADDR_MASK
)

	)

2312 
	#BCH_ENCODEPTR_SET_ADDR_MASK
 0xFFFFFFFFu

	)

2313 
	#BCH_ENCODEPTR_SET_ADDR_SHIFT
 0

	)

2314 
	#BCH_ENCODEPTR_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_ENCODEPTR_SET_ADDR_SHIFT
))&
BCH_ENCODEPTR_SET_ADDR_MASK
)

	)

2316 
	#BCH_ENCODEPTR_CLR_ADDR_MASK
 0xFFFFFFFFu

	)

2317 
	#BCH_ENCODEPTR_CLR_ADDR_SHIFT
 0

	)

2318 
	#BCH_ENCODEPTR_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_ENCODEPTR_CLR_ADDR_SHIFT
))&
BCH_ENCODEPTR_CLR_ADDR_MASK
)

	)

2320 
	#BCH_ENCODEPTR_TOG_ADDR_MASK
 0xFFFFFFFFu

	)

2321 
	#BCH_ENCODEPTR_TOG_ADDR_SHIFT
 0

	)

2322 
	#BCH_ENCODEPTR_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_ENCODEPTR_TOG_ADDR_SHIFT
))&
BCH_ENCODEPTR_TOG_ADDR_MASK
)

	)

2324 
	#BCH_DATAPTR_ADDR_MASK
 0xFFFFFFFFu

	)

2325 
	#BCH_DATAPTR_ADDR_SHIFT
 0

	)

2326 
	#BCH_DATAPTR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DATAPTR_ADDR_SHIFT
))&
BCH_DATAPTR_ADDR_MASK
)

	)

2328 
	#BCH_DATAPTR_SET_ADDR_MASK
 0xFFFFFFFFu

	)

2329 
	#BCH_DATAPTR_SET_ADDR_SHIFT
 0

	)

2330 
	#BCH_DATAPTR_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DATAPTR_SET_ADDR_SHIFT
))&
BCH_DATAPTR_SET_ADDR_MASK
)

	)

2332 
	#BCH_DATAPTR_CLR_ADDR_MASK
 0xFFFFFFFFu

	)

2333 
	#BCH_DATAPTR_CLR_ADDR_SHIFT
 0

	)

2334 
	#BCH_DATAPTR_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DATAPTR_CLR_ADDR_SHIFT
))&
BCH_DATAPTR_CLR_ADDR_MASK
)

	)

2336 
	#BCH_DATAPTR_TOG_ADDR_MASK
 0xFFFFFFFFu

	)

2337 
	#BCH_DATAPTR_TOG_ADDR_SHIFT
 0

	)

2338 
	#BCH_DATAPTR_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DATAPTR_TOG_ADDR_SHIFT
))&
BCH_DATAPTR_TOG_ADDR_MASK
)

	)

2340 
	#BCH_METAPTR_ADDR_MASK
 0xFFFFFFFFu

	)

2341 
	#BCH_METAPTR_ADDR_SHIFT
 0

	)

2342 
	#BCH_METAPTR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_METAPTR_ADDR_SHIFT
))&
BCH_METAPTR_ADDR_MASK
)

	)

2344 
	#BCH_METAPTR_SET_ADDR_MASK
 0xFFFFFFFFu

	)

2345 
	#BCH_METAPTR_SET_ADDR_SHIFT
 0

	)

2346 
	#BCH_METAPTR_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_METAPTR_SET_ADDR_SHIFT
))&
BCH_METAPTR_SET_ADDR_MASK
)

	)

2348 
	#BCH_METAPTR_CLR_ADDR_MASK
 0xFFFFFFFFu

	)

2349 
	#BCH_METAPTR_CLR_ADDR_SHIFT
 0

	)

2350 
	#BCH_METAPTR_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_METAPTR_CLR_ADDR_SHIFT
))&
BCH_METAPTR_CLR_ADDR_MASK
)

	)

2352 
	#BCH_METAPTR_TOG_ADDR_MASK
 0xFFFFFFFFu

	)

2353 
	#BCH_METAPTR_TOG_ADDR_SHIFT
 0

	)

2354 
	#BCH_METAPTR_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_METAPTR_TOG_ADDR_SHIFT
))&
BCH_METAPTR_TOG_ADDR_MASK
)

	)

2356 
	#BCH_LAYOUTSELECT_CS0_SELECT_MASK
 0x3u

	)

2357 
	#BCH_LAYOUTSELECT_CS0_SELECT_SHIFT
 0

	)

2358 
	#BCH_LAYOUTSELECT_CS0_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CS0_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CS0_SELECT_MASK
)

	)

2359 
	#BCH_LAYOUTSELECT_CS1_SELECT_MASK
 0xCu

	)

2360 
	#BCH_LAYOUTSELECT_CS1_SELECT_SHIFT
 2

	)

2361 
	#BCH_LAYOUTSELECT_CS1_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CS1_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CS1_SELECT_MASK
)

	)

2362 
	#BCH_LAYOUTSELECT_CS2_SELECT_MASK
 0x30u

	)

2363 
	#BCH_LAYOUTSELECT_CS2_SELECT_SHIFT
 4

	)

2364 
	#BCH_LAYOUTSELECT_CS2_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CS2_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CS2_SELECT_MASK
)

	)

2365 
	#BCH_LAYOUTSELECT_CS3_SELECT_MASK
 0xC0u

	)

2366 
	#BCH_LAYOUTSELECT_CS3_SELECT_SHIFT
 6

	)

2367 
	#BCH_LAYOUTSELECT_CS3_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CS3_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CS3_SELECT_MASK
)

	)

2368 
	#BCH_LAYOUTSELECT_CS4_SELECT_MASK
 0x300u

	)

2369 
	#BCH_LAYOUTSELECT_CS4_SELECT_SHIFT
 8

	)

2370 
	#BCH_LAYOUTSELECT_CS4_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CS4_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CS4_SELECT_MASK
)

	)

2371 
	#BCH_LAYOUTSELECT_CS5_SELECT_MASK
 0xC00u

	)

2372 
	#BCH_LAYOUTSELECT_CS5_SELECT_SHIFT
 10

	)

2373 
	#BCH_LAYOUTSELECT_CS5_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CS5_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CS5_SELECT_MASK
)

	)

2374 
	#BCH_LAYOUTSELECT_CS6_SELECT_MASK
 0x3000u

	)

2375 
	#BCH_LAYOUTSELECT_CS6_SELECT_SHIFT
 12

	)

2376 
	#BCH_LAYOUTSELECT_CS6_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CS6_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CS6_SELECT_MASK
)

	)

2377 
	#BCH_LAYOUTSELECT_CS7_SELECT_MASK
 0xC000u

	)

2378 
	#BCH_LAYOUTSELECT_CS7_SELECT_SHIFT
 14

	)

2379 
	#BCH_LAYOUTSELECT_CS7_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CS7_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CS7_SELECT_MASK
)

	)

2380 
	#BCH_LAYOUTSELECT_CS8_SELECT_MASK
 0x30000u

	)

2381 
	#BCH_LAYOUTSELECT_CS8_SELECT_SHIFT
 16

	)

2382 
	#BCH_LAYOUTSELECT_CS8_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CS8_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CS8_SELECT_MASK
)

	)

2383 
	#BCH_LAYOUTSELECT_CS9_SELECT_MASK
 0xC0000u

	)

2384 
	#BCH_LAYOUTSELECT_CS9_SELECT_SHIFT
 18

	)

2385 
	#BCH_LAYOUTSELECT_CS9_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CS9_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CS9_SELECT_MASK
)

	)

2386 
	#BCH_LAYOUTSELECT_CS10_SELECT_MASK
 0x300000u

	)

2387 
	#BCH_LAYOUTSELECT_CS10_SELECT_SHIFT
 20

	)

2388 
	#BCH_LAYOUTSELECT_CS10_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CS10_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CS10_SELECT_MASK
)

	)

2389 
	#BCH_LAYOUTSELECT_CS11_SELECT_MASK
 0xC00000u

	)

2390 
	#BCH_LAYOUTSELECT_CS11_SELECT_SHIFT
 22

	)

2391 
	#BCH_LAYOUTSELECT_CS11_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CS11_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CS11_SELECT_MASK
)

	)

2392 
	#BCH_LAYOUTSELECT_CS12_SELECT_MASK
 0x3000000u

	)

2393 
	#BCH_LAYOUTSELECT_CS12_SELECT_SHIFT
 24

	)

2394 
	#BCH_LAYOUTSELECT_CS12_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CS12_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CS12_SELECT_MASK
)

	)

2395 
	#BCH_LAYOUTSELECT_CS13_SELECT_MASK
 0xC000000u

	)

2396 
	#BCH_LAYOUTSELECT_CS13_SELECT_SHIFT
 26

	)

2397 
	#BCH_LAYOUTSELECT_CS13_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CS13_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CS13_SELECT_MASK
)

	)

2398 
	#BCH_LAYOUTSELECT_CS14_SELECT_MASK
 0x30000000u

	)

2399 
	#BCH_LAYOUTSELECT_CS14_SELECT_SHIFT
 28

	)

2400 
	#BCH_LAYOUTSELECT_CS14_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CS14_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CS14_SELECT_MASK
)

	)

2401 
	#BCH_LAYOUTSELECT_CS15_SELECT_MASK
 0xC0000000u

	)

2402 
	#BCH_LAYOUTSELECT_CS15_SELECT_SHIFT
 30

	)

2403 
	#BCH_LAYOUTSELECT_CS15_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CS15_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CS15_SELECT_MASK
)

	)

2405 
	#BCH_LAYOUTSELECT_SET_CS0_SELECT_MASK
 0x3u

	)

2406 
	#BCH_LAYOUTSELECT_SET_CS0_SELECT_SHIFT
 0

	)

2407 
	#BCH_LAYOUTSELECT_SET_CS0_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_SET_CS0_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_SET_CS0_SELECT_MASK
)

	)

2408 
	#BCH_LAYOUTSELECT_SET_CS1_SELECT_MASK
 0xCu

	)

2409 
	#BCH_LAYOUTSELECT_SET_CS1_SELECT_SHIFT
 2

	)

2410 
	#BCH_LAYOUTSELECT_SET_CS1_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_SET_CS1_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_SET_CS1_SELECT_MASK
)

	)

2411 
	#BCH_LAYOUTSELECT_SET_CS2_SELECT_MASK
 0x30u

	)

2412 
	#BCH_LAYOUTSELECT_SET_CS2_SELECT_SHIFT
 4

	)

2413 
	#BCH_LAYOUTSELECT_SET_CS2_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_SET_CS2_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_SET_CS2_SELECT_MASK
)

	)

2414 
	#BCH_LAYOUTSELECT_SET_CS3_SELECT_MASK
 0xC0u

	)

2415 
	#BCH_LAYOUTSELECT_SET_CS3_SELECT_SHIFT
 6

	)

2416 
	#BCH_LAYOUTSELECT_SET_CS3_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_SET_CS3_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_SET_CS3_SELECT_MASK
)

	)

2417 
	#BCH_LAYOUTSELECT_SET_CS4_SELECT_MASK
 0x300u

	)

2418 
	#BCH_LAYOUTSELECT_SET_CS4_SELECT_SHIFT
 8

	)

2419 
	#BCH_LAYOUTSELECT_SET_CS4_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_SET_CS4_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_SET_CS4_SELECT_MASK
)

	)

2420 
	#BCH_LAYOUTSELECT_SET_CS5_SELECT_MASK
 0xC00u

	)

2421 
	#BCH_LAYOUTSELECT_SET_CS5_SELECT_SHIFT
 10

	)

2422 
	#BCH_LAYOUTSELECT_SET_CS5_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_SET_CS5_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_SET_CS5_SELECT_MASK
)

	)

2423 
	#BCH_LAYOUTSELECT_SET_CS6_SELECT_MASK
 0x3000u

	)

2424 
	#BCH_LAYOUTSELECT_SET_CS6_SELECT_SHIFT
 12

	)

2425 
	#BCH_LAYOUTSELECT_SET_CS6_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_SET_CS6_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_SET_CS6_SELECT_MASK
)

	)

2426 
	#BCH_LAYOUTSELECT_SET_CS7_SELECT_MASK
 0xC000u

	)

2427 
	#BCH_LAYOUTSELECT_SET_CS7_SELECT_SHIFT
 14

	)

2428 
	#BCH_LAYOUTSELECT_SET_CS7_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_SET_CS7_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_SET_CS7_SELECT_MASK
)

	)

2429 
	#BCH_LAYOUTSELECT_SET_CS8_SELECT_MASK
 0x30000u

	)

2430 
	#BCH_LAYOUTSELECT_SET_CS8_SELECT_SHIFT
 16

	)

2431 
	#BCH_LAYOUTSELECT_SET_CS8_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_SET_CS8_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_SET_CS8_SELECT_MASK
)

	)

2432 
	#BCH_LAYOUTSELECT_SET_CS9_SELECT_MASK
 0xC0000u

	)

2433 
	#BCH_LAYOUTSELECT_SET_CS9_SELECT_SHIFT
 18

	)

2434 
	#BCH_LAYOUTSELECT_SET_CS9_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_SET_CS9_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_SET_CS9_SELECT_MASK
)

	)

2435 
	#BCH_LAYOUTSELECT_SET_CS10_SELECT_MASK
 0x300000u

	)

2436 
	#BCH_LAYOUTSELECT_SET_CS10_SELECT_SHIFT
 20

	)

2437 
	#BCH_LAYOUTSELECT_SET_CS10_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_SET_CS10_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_SET_CS10_SELECT_MASK
)

	)

2438 
	#BCH_LAYOUTSELECT_SET_CS11_SELECT_MASK
 0xC00000u

	)

2439 
	#BCH_LAYOUTSELECT_SET_CS11_SELECT_SHIFT
 22

	)

2440 
	#BCH_LAYOUTSELECT_SET_CS11_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_SET_CS11_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_SET_CS11_SELECT_MASK
)

	)

2441 
	#BCH_LAYOUTSELECT_SET_CS12_SELECT_MASK
 0x3000000u

	)

2442 
	#BCH_LAYOUTSELECT_SET_CS12_SELECT_SHIFT
 24

	)

2443 
	#BCH_LAYOUTSELECT_SET_CS12_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_SET_CS12_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_SET_CS12_SELECT_MASK
)

	)

2444 
	#BCH_LAYOUTSELECT_SET_CS13_SELECT_MASK
 0xC000000u

	)

2445 
	#BCH_LAYOUTSELECT_SET_CS13_SELECT_SHIFT
 26

	)

2446 
	#BCH_LAYOUTSELECT_SET_CS13_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_SET_CS13_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_SET_CS13_SELECT_MASK
)

	)

2447 
	#BCH_LAYOUTSELECT_SET_CS14_SELECT_MASK
 0x30000000u

	)

2448 
	#BCH_LAYOUTSELECT_SET_CS14_SELECT_SHIFT
 28

	)

2449 
	#BCH_LAYOUTSELECT_SET_CS14_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_SET_CS14_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_SET_CS14_SELECT_MASK
)

	)

2450 
	#BCH_LAYOUTSELECT_SET_CS15_SELECT_MASK
 0xC0000000u

	)

2451 
	#BCH_LAYOUTSELECT_SET_CS15_SELECT_SHIFT
 30

	)

2452 
	#BCH_LAYOUTSELECT_SET_CS15_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_SET_CS15_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_SET_CS15_SELECT_MASK
)

	)

2454 
	#BCH_LAYOUTSELECT_CLR_CS0_SELECT_MASK
 0x3u

	)

2455 
	#BCH_LAYOUTSELECT_CLR_CS0_SELECT_SHIFT
 0

	)

2456 
	#BCH_LAYOUTSELECT_CLR_CS0_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CLR_CS0_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CLR_CS0_SELECT_MASK
)

	)

2457 
	#BCH_LAYOUTSELECT_CLR_CS1_SELECT_MASK
 0xCu

	)

2458 
	#BCH_LAYOUTSELECT_CLR_CS1_SELECT_SHIFT
 2

	)

2459 
	#BCH_LAYOUTSELECT_CLR_CS1_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CLR_CS1_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CLR_CS1_SELECT_MASK
)

	)

2460 
	#BCH_LAYOUTSELECT_CLR_CS2_SELECT_MASK
 0x30u

	)

2461 
	#BCH_LAYOUTSELECT_CLR_CS2_SELECT_SHIFT
 4

	)

2462 
	#BCH_LAYOUTSELECT_CLR_CS2_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CLR_CS2_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CLR_CS2_SELECT_MASK
)

	)

2463 
	#BCH_LAYOUTSELECT_CLR_CS3_SELECT_MASK
 0xC0u

	)

2464 
	#BCH_LAYOUTSELECT_CLR_CS3_SELECT_SHIFT
 6

	)

2465 
	#BCH_LAYOUTSELECT_CLR_CS3_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CLR_CS3_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CLR_CS3_SELECT_MASK
)

	)

2466 
	#BCH_LAYOUTSELECT_CLR_CS4_SELECT_MASK
 0x300u

	)

2467 
	#BCH_LAYOUTSELECT_CLR_CS4_SELECT_SHIFT
 8

	)

2468 
	#BCH_LAYOUTSELECT_CLR_CS4_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CLR_CS4_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CLR_CS4_SELECT_MASK
)

	)

2469 
	#BCH_LAYOUTSELECT_CLR_CS5_SELECT_MASK
 0xC00u

	)

2470 
	#BCH_LAYOUTSELECT_CLR_CS5_SELECT_SHIFT
 10

	)

2471 
	#BCH_LAYOUTSELECT_CLR_CS5_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CLR_CS5_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CLR_CS5_SELECT_MASK
)

	)

2472 
	#BCH_LAYOUTSELECT_CLR_CS6_SELECT_MASK
 0x3000u

	)

2473 
	#BCH_LAYOUTSELECT_CLR_CS6_SELECT_SHIFT
 12

	)

2474 
	#BCH_LAYOUTSELECT_CLR_CS6_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CLR_CS6_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CLR_CS6_SELECT_MASK
)

	)

2475 
	#BCH_LAYOUTSELECT_CLR_CS7_SELECT_MASK
 0xC000u

	)

2476 
	#BCH_LAYOUTSELECT_CLR_CS7_SELECT_SHIFT
 14

	)

2477 
	#BCH_LAYOUTSELECT_CLR_CS7_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CLR_CS7_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CLR_CS7_SELECT_MASK
)

	)

2478 
	#BCH_LAYOUTSELECT_CLR_CS8_SELECT_MASK
 0x30000u

	)

2479 
	#BCH_LAYOUTSELECT_CLR_CS8_SELECT_SHIFT
 16

	)

2480 
	#BCH_LAYOUTSELECT_CLR_CS8_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CLR_CS8_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CLR_CS8_SELECT_MASK
)

	)

2481 
	#BCH_LAYOUTSELECT_CLR_CS9_SELECT_MASK
 0xC0000u

	)

2482 
	#BCH_LAYOUTSELECT_CLR_CS9_SELECT_SHIFT
 18

	)

2483 
	#BCH_LAYOUTSELECT_CLR_CS9_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CLR_CS9_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CLR_CS9_SELECT_MASK
)

	)

2484 
	#BCH_LAYOUTSELECT_CLR_CS10_SELECT_MASK
 0x300000u

	)

2485 
	#BCH_LAYOUTSELECT_CLR_CS10_SELECT_SHIFT
 20

	)

2486 
	#BCH_LAYOUTSELECT_CLR_CS10_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CLR_CS10_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CLR_CS10_SELECT_MASK
)

	)

2487 
	#BCH_LAYOUTSELECT_CLR_CS11_SELECT_MASK
 0xC00000u

	)

2488 
	#BCH_LAYOUTSELECT_CLR_CS11_SELECT_SHIFT
 22

	)

2489 
	#BCH_LAYOUTSELECT_CLR_CS11_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CLR_CS11_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CLR_CS11_SELECT_MASK
)

	)

2490 
	#BCH_LAYOUTSELECT_CLR_CS12_SELECT_MASK
 0x3000000u

	)

2491 
	#BCH_LAYOUTSELECT_CLR_CS12_SELECT_SHIFT
 24

	)

2492 
	#BCH_LAYOUTSELECT_CLR_CS12_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CLR_CS12_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CLR_CS12_SELECT_MASK
)

	)

2493 
	#BCH_LAYOUTSELECT_CLR_CS13_SELECT_MASK
 0xC000000u

	)

2494 
	#BCH_LAYOUTSELECT_CLR_CS13_SELECT_SHIFT
 26

	)

2495 
	#BCH_LAYOUTSELECT_CLR_CS13_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CLR_CS13_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CLR_CS13_SELECT_MASK
)

	)

2496 
	#BCH_LAYOUTSELECT_CLR_CS14_SELECT_MASK
 0x30000000u

	)

2497 
	#BCH_LAYOUTSELECT_CLR_CS14_SELECT_SHIFT
 28

	)

2498 
	#BCH_LAYOUTSELECT_CLR_CS14_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CLR_CS14_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CLR_CS14_SELECT_MASK
)

	)

2499 
	#BCH_LAYOUTSELECT_CLR_CS15_SELECT_MASK
 0xC0000000u

	)

2500 
	#BCH_LAYOUTSELECT_CLR_CS15_SELECT_SHIFT
 30

	)

2501 
	#BCH_LAYOUTSELECT_CLR_CS15_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_CLR_CS15_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_CLR_CS15_SELECT_MASK
)

	)

2503 
	#BCH_LAYOUTSELECT_TOG_CS0_SELECT_MASK
 0x3u

	)

2504 
	#BCH_LAYOUTSELECT_TOG_CS0_SELECT_SHIFT
 0

	)

2505 
	#BCH_LAYOUTSELECT_TOG_CS0_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_TOG_CS0_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_TOG_CS0_SELECT_MASK
)

	)

2506 
	#BCH_LAYOUTSELECT_TOG_CS1_SELECT_MASK
 0xCu

	)

2507 
	#BCH_LAYOUTSELECT_TOG_CS1_SELECT_SHIFT
 2

	)

2508 
	#BCH_LAYOUTSELECT_TOG_CS1_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_TOG_CS1_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_TOG_CS1_SELECT_MASK
)

	)

2509 
	#BCH_LAYOUTSELECT_TOG_CS2_SELECT_MASK
 0x30u

	)

2510 
	#BCH_LAYOUTSELECT_TOG_CS2_SELECT_SHIFT
 4

	)

2511 
	#BCH_LAYOUTSELECT_TOG_CS2_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_TOG_CS2_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_TOG_CS2_SELECT_MASK
)

	)

2512 
	#BCH_LAYOUTSELECT_TOG_CS3_SELECT_MASK
 0xC0u

	)

2513 
	#BCH_LAYOUTSELECT_TOG_CS3_SELECT_SHIFT
 6

	)

2514 
	#BCH_LAYOUTSELECT_TOG_CS3_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_TOG_CS3_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_TOG_CS3_SELECT_MASK
)

	)

2515 
	#BCH_LAYOUTSELECT_TOG_CS4_SELECT_MASK
 0x300u

	)

2516 
	#BCH_LAYOUTSELECT_TOG_CS4_SELECT_SHIFT
 8

	)

2517 
	#BCH_LAYOUTSELECT_TOG_CS4_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_TOG_CS4_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_TOG_CS4_SELECT_MASK
)

	)

2518 
	#BCH_LAYOUTSELECT_TOG_CS5_SELECT_MASK
 0xC00u

	)

2519 
	#BCH_LAYOUTSELECT_TOG_CS5_SELECT_SHIFT
 10

	)

2520 
	#BCH_LAYOUTSELECT_TOG_CS5_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_TOG_CS5_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_TOG_CS5_SELECT_MASK
)

	)

2521 
	#BCH_LAYOUTSELECT_TOG_CS6_SELECT_MASK
 0x3000u

	)

2522 
	#BCH_LAYOUTSELECT_TOG_CS6_SELECT_SHIFT
 12

	)

2523 
	#BCH_LAYOUTSELECT_TOG_CS6_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_TOG_CS6_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_TOG_CS6_SELECT_MASK
)

	)

2524 
	#BCH_LAYOUTSELECT_TOG_CS7_SELECT_MASK
 0xC000u

	)

2525 
	#BCH_LAYOUTSELECT_TOG_CS7_SELECT_SHIFT
 14

	)

2526 
	#BCH_LAYOUTSELECT_TOG_CS7_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_TOG_CS7_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_TOG_CS7_SELECT_MASK
)

	)

2527 
	#BCH_LAYOUTSELECT_TOG_CS8_SELECT_MASK
 0x30000u

	)

2528 
	#BCH_LAYOUTSELECT_TOG_CS8_SELECT_SHIFT
 16

	)

2529 
	#BCH_LAYOUTSELECT_TOG_CS8_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_TOG_CS8_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_TOG_CS8_SELECT_MASK
)

	)

2530 
	#BCH_LAYOUTSELECT_TOG_CS9_SELECT_MASK
 0xC0000u

	)

2531 
	#BCH_LAYOUTSELECT_TOG_CS9_SELECT_SHIFT
 18

	)

2532 
	#BCH_LAYOUTSELECT_TOG_CS9_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_TOG_CS9_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_TOG_CS9_SELECT_MASK
)

	)

2533 
	#BCH_LAYOUTSELECT_TOG_CS10_SELECT_MASK
 0x300000u

	)

2534 
	#BCH_LAYOUTSELECT_TOG_CS10_SELECT_SHIFT
 20

	)

2535 
	#BCH_LAYOUTSELECT_TOG_CS10_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_TOG_CS10_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_TOG_CS10_SELECT_MASK
)

	)

2536 
	#BCH_LAYOUTSELECT_TOG_CS11_SELECT_MASK
 0xC00000u

	)

2537 
	#BCH_LAYOUTSELECT_TOG_CS11_SELECT_SHIFT
 22

	)

2538 
	#BCH_LAYOUTSELECT_TOG_CS11_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_TOG_CS11_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_TOG_CS11_SELECT_MASK
)

	)

2539 
	#BCH_LAYOUTSELECT_TOG_CS12_SELECT_MASK
 0x3000000u

	)

2540 
	#BCH_LAYOUTSELECT_TOG_CS12_SELECT_SHIFT
 24

	)

2541 
	#BCH_LAYOUTSELECT_TOG_CS12_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_TOG_CS12_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_TOG_CS12_SELECT_MASK
)

	)

2542 
	#BCH_LAYOUTSELECT_TOG_CS13_SELECT_MASK
 0xC000000u

	)

2543 
	#BCH_LAYOUTSELECT_TOG_CS13_SELECT_SHIFT
 26

	)

2544 
	#BCH_LAYOUTSELECT_TOG_CS13_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_TOG_CS13_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_TOG_CS13_SELECT_MASK
)

	)

2545 
	#BCH_LAYOUTSELECT_TOG_CS14_SELECT_MASK
 0x30000000u

	)

2546 
	#BCH_LAYOUTSELECT_TOG_CS14_SELECT_SHIFT
 28

	)

2547 
	#BCH_LAYOUTSELECT_TOG_CS14_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_TOG_CS14_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_TOG_CS14_SELECT_MASK
)

	)

2548 
	#BCH_LAYOUTSELECT_TOG_CS15_SELECT_MASK
 0xC0000000u

	)

2549 
	#BCH_LAYOUTSELECT_TOG_CS15_SELECT_SHIFT
 30

	)

2550 
	#BCH_LAYOUTSELECT_TOG_CS15_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_LAYOUTSELECT_TOG_CS15_SELECT_SHIFT
))&
BCH_LAYOUTSELECT_TOG_CS15_SELECT_MASK
)

	)

2552 
	#BCH_FLASH0LAYOUT0_DATA0_SIZE_MASK
 0x3FFu

	)

2553 
	#BCH_FLASH0LAYOUT0_DATA0_SIZE_SHIFT
 0

	)

2554 
	#BCH_FLASH0LAYOUT0_DATA0_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT0_DATA0_SIZE_SHIFT
))&
BCH_FLASH0LAYOUT0_DATA0_SIZE_MASK
)

	)

2555 
	#BCH_FLASH0LAYOUT0_GF13_0_GF14_1_MASK
 0x400u

	)

2556 
	#BCH_FLASH0LAYOUT0_GF13_0_GF14_1_SHIFT
 10

	)

2557 
	#BCH_FLASH0LAYOUT0_ECC0_MASK
 0xF800u

	)

2558 
	#BCH_FLASH0LAYOUT0_ECC0_SHIFT
 11

	)

2559 
	#BCH_FLASH0LAYOUT0_ECC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT0_ECC0_SHIFT
))&
BCH_FLASH0LAYOUT0_ECC0_MASK
)

	)

2560 
	#BCH_FLASH0LAYOUT0_META_SIZE_MASK
 0xFF0000u

	)

2561 
	#BCH_FLASH0LAYOUT0_META_SIZE_SHIFT
 16

	)

2562 
	#BCH_FLASH0LAYOUT0_META_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT0_META_SIZE_SHIFT
))&
BCH_FLASH0LAYOUT0_META_SIZE_MASK
)

	)

2563 
	#BCH_FLASH0LAYOUT0_NBLOCKS_MASK
 0xFF000000u

	)

2564 
	#BCH_FLASH0LAYOUT0_NBLOCKS_SHIFT
 24

	)

2565 
	#BCH_FLASH0LAYOUT0_NBLOCKS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT0_NBLOCKS_SHIFT
))&
BCH_FLASH0LAYOUT0_NBLOCKS_MASK
)

	)

2567 
	#BCH_FLASH0LAYOUT0_SET_DATA0_SIZE_MASK
 0x3FFu

	)

2568 
	#BCH_FLASH0LAYOUT0_SET_DATA0_SIZE_SHIFT
 0

	)

2569 
	#BCH_FLASH0LAYOUT0_SET_DATA0_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT0_SET_DATA0_SIZE_SHIFT
))&
BCH_FLASH0LAYOUT0_SET_DATA0_SIZE_MASK
)

	)

2570 
	#BCH_FLASH0LAYOUT0_SET_GF13_0_GF14_1_MASK
 0x400u

	)

2571 
	#BCH_FLASH0LAYOUT0_SET_GF13_0_GF14_1_SHIFT
 10

	)

2572 
	#BCH_FLASH0LAYOUT0_SET_ECC0_MASK
 0xF800u

	)

2573 
	#BCH_FLASH0LAYOUT0_SET_ECC0_SHIFT
 11

	)

2574 
	#BCH_FLASH0LAYOUT0_SET_ECC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT0_SET_ECC0_SHIFT
))&
BCH_FLASH0LAYOUT0_SET_ECC0_MASK
)

	)

2575 
	#BCH_FLASH0LAYOUT0_SET_META_SIZE_MASK
 0xFF0000u

	)

2576 
	#BCH_FLASH0LAYOUT0_SET_META_SIZE_SHIFT
 16

	)

2577 
	#BCH_FLASH0LAYOUT0_SET_META_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT0_SET_META_SIZE_SHIFT
))&
BCH_FLASH0LAYOUT0_SET_META_SIZE_MASK
)

	)

2578 
	#BCH_FLASH0LAYOUT0_SET_NBLOCKS_MASK
 0xFF000000u

	)

2579 
	#BCH_FLASH0LAYOUT0_SET_NBLOCKS_SHIFT
 24

	)

2580 
	#BCH_FLASH0LAYOUT0_SET_NBLOCKS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT0_SET_NBLOCKS_SHIFT
))&
BCH_FLASH0LAYOUT0_SET_NBLOCKS_MASK
)

	)

2582 
	#BCH_FLASH0LAYOUT0_CLR_DATA0_SIZE_MASK
 0x3FFu

	)

2583 
	#BCH_FLASH0LAYOUT0_CLR_DATA0_SIZE_SHIFT
 0

	)

2584 
	#BCH_FLASH0LAYOUT0_CLR_DATA0_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT0_CLR_DATA0_SIZE_SHIFT
))&
BCH_FLASH0LAYOUT0_CLR_DATA0_SIZE_MASK
)

	)

2585 
	#BCH_FLASH0LAYOUT0_CLR_GF13_0_GF14_1_MASK
 0x400u

	)

2586 
	#BCH_FLASH0LAYOUT0_CLR_GF13_0_GF14_1_SHIFT
 10

	)

2587 
	#BCH_FLASH0LAYOUT0_CLR_ECC0_MASK
 0xF800u

	)

2588 
	#BCH_FLASH0LAYOUT0_CLR_ECC0_SHIFT
 11

	)

2589 
	#BCH_FLASH0LAYOUT0_CLR_ECC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT0_CLR_ECC0_SHIFT
))&
BCH_FLASH0LAYOUT0_CLR_ECC0_MASK
)

	)

2590 
	#BCH_FLASH0LAYOUT0_CLR_META_SIZE_MASK
 0xFF0000u

	)

2591 
	#BCH_FLASH0LAYOUT0_CLR_META_SIZE_SHIFT
 16

	)

2592 
	#BCH_FLASH0LAYOUT0_CLR_META_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT0_CLR_META_SIZE_SHIFT
))&
BCH_FLASH0LAYOUT0_CLR_META_SIZE_MASK
)

	)

2593 
	#BCH_FLASH0LAYOUT0_CLR_NBLOCKS_MASK
 0xFF000000u

	)

2594 
	#BCH_FLASH0LAYOUT0_CLR_NBLOCKS_SHIFT
 24

	)

2595 
	#BCH_FLASH0LAYOUT0_CLR_NBLOCKS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT0_CLR_NBLOCKS_SHIFT
))&
BCH_FLASH0LAYOUT0_CLR_NBLOCKS_MASK
)

	)

2597 
	#BCH_FLASH0LAYOUT0_TOG_DATA0_SIZE_MASK
 0x3FFu

	)

2598 
	#BCH_FLASH0LAYOUT0_TOG_DATA0_SIZE_SHIFT
 0

	)

2599 
	#BCH_FLASH0LAYOUT0_TOG_DATA0_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT0_TOG_DATA0_SIZE_SHIFT
))&
BCH_FLASH0LAYOUT0_TOG_DATA0_SIZE_MASK
)

	)

2600 
	#BCH_FLASH0LAYOUT0_TOG_GF13_0_GF14_1_MASK
 0x400u

	)

2601 
	#BCH_FLASH0LAYOUT0_TOG_GF13_0_GF14_1_SHIFT
 10

	)

2602 
	#BCH_FLASH0LAYOUT0_TOG_ECC0_MASK
 0xF800u

	)

2603 
	#BCH_FLASH0LAYOUT0_TOG_ECC0_SHIFT
 11

	)

2604 
	#BCH_FLASH0LAYOUT0_TOG_ECC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT0_TOG_ECC0_SHIFT
))&
BCH_FLASH0LAYOUT0_TOG_ECC0_MASK
)

	)

2605 
	#BCH_FLASH0LAYOUT0_TOG_META_SIZE_MASK
 0xFF0000u

	)

2606 
	#BCH_FLASH0LAYOUT0_TOG_META_SIZE_SHIFT
 16

	)

2607 
	#BCH_FLASH0LAYOUT0_TOG_META_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT0_TOG_META_SIZE_SHIFT
))&
BCH_FLASH0LAYOUT0_TOG_META_SIZE_MASK
)

	)

2608 
	#BCH_FLASH0LAYOUT0_TOG_NBLOCKS_MASK
 0xFF000000u

	)

2609 
	#BCH_FLASH0LAYOUT0_TOG_NBLOCKS_SHIFT
 24

	)

2610 
	#BCH_FLASH0LAYOUT0_TOG_NBLOCKS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT0_TOG_NBLOCKS_SHIFT
))&
BCH_FLASH0LAYOUT0_TOG_NBLOCKS_MASK
)

	)

2612 
	#BCH_FLASH0LAYOUT1_DATAN_SIZE_MASK
 0x3FFu

	)

2613 
	#BCH_FLASH0LAYOUT1_DATAN_SIZE_SHIFT
 0

	)

2614 
	#BCH_FLASH0LAYOUT1_DATAN_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT1_DATAN_SIZE_SHIFT
))&
BCH_FLASH0LAYOUT1_DATAN_SIZE_MASK
)

	)

2615 
	#BCH_FLASH0LAYOUT1_GF13_0_GF14_1_MASK
 0x400u

	)

2616 
	#BCH_FLASH0LAYOUT1_GF13_0_GF14_1_SHIFT
 10

	)

2617 
	#BCH_FLASH0LAYOUT1_ECCN_MASK
 0xF800u

	)

2618 
	#BCH_FLASH0LAYOUT1_ECCN_SHIFT
 11

	)

2619 
	#BCH_FLASH0LAYOUT1_ECCN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT1_ECCN_SHIFT
))&
BCH_FLASH0LAYOUT1_ECCN_MASK
)

	)

2620 
	#BCH_FLASH0LAYOUT1_PAGE_SIZE_MASK
 0xFFFF0000u

	)

2621 
	#BCH_FLASH0LAYOUT1_PAGE_SIZE_SHIFT
 16

	)

2622 
	#BCH_FLASH0LAYOUT1_PAGE_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT1_PAGE_SIZE_SHIFT
))&
BCH_FLASH0LAYOUT1_PAGE_SIZE_MASK
)

	)

2624 
	#BCH_FLASH0LAYOUT1_SET_DATAN_SIZE_MASK
 0x3FFu

	)

2625 
	#BCH_FLASH0LAYOUT1_SET_DATAN_SIZE_SHIFT
 0

	)

2626 
	#BCH_FLASH0LAYOUT1_SET_DATAN_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT1_SET_DATAN_SIZE_SHIFT
))&
BCH_FLASH0LAYOUT1_SET_DATAN_SIZE_MASK
)

	)

2627 
	#BCH_FLASH0LAYOUT1_SET_GF13_0_GF14_1_MASK
 0x400u

	)

2628 
	#BCH_FLASH0LAYOUT1_SET_GF13_0_GF14_1_SHIFT
 10

	)

2629 
	#BCH_FLASH0LAYOUT1_SET_ECCN_MASK
 0xF800u

	)

2630 
	#BCH_FLASH0LAYOUT1_SET_ECCN_SHIFT
 11

	)

2631 
	#BCH_FLASH0LAYOUT1_SET_ECCN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT1_SET_ECCN_SHIFT
))&
BCH_FLASH0LAYOUT1_SET_ECCN_MASK
)

	)

2632 
	#BCH_FLASH0LAYOUT1_SET_PAGE_SIZE_MASK
 0xFFFF0000u

	)

2633 
	#BCH_FLASH0LAYOUT1_SET_PAGE_SIZE_SHIFT
 16

	)

2634 
	#BCH_FLASH0LAYOUT1_SET_PAGE_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT1_SET_PAGE_SIZE_SHIFT
))&
BCH_FLASH0LAYOUT1_SET_PAGE_SIZE_MASK
)

	)

2636 
	#BCH_FLASH0LAYOUT1_CLR_DATAN_SIZE_MASK
 0x3FFu

	)

2637 
	#BCH_FLASH0LAYOUT1_CLR_DATAN_SIZE_SHIFT
 0

	)

2638 
	#BCH_FLASH0LAYOUT1_CLR_DATAN_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT1_CLR_DATAN_SIZE_SHIFT
))&
BCH_FLASH0LAYOUT1_CLR_DATAN_SIZE_MASK
)

	)

2639 
	#BCH_FLASH0LAYOUT1_CLR_GF13_0_GF14_1_MASK
 0x400u

	)

2640 
	#BCH_FLASH0LAYOUT1_CLR_GF13_0_GF14_1_SHIFT
 10

	)

2641 
	#BCH_FLASH0LAYOUT1_CLR_ECCN_MASK
 0xF800u

	)

2642 
	#BCH_FLASH0LAYOUT1_CLR_ECCN_SHIFT
 11

	)

2643 
	#BCH_FLASH0LAYOUT1_CLR_ECCN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT1_CLR_ECCN_SHIFT
))&
BCH_FLASH0LAYOUT1_CLR_ECCN_MASK
)

	)

2644 
	#BCH_FLASH0LAYOUT1_CLR_PAGE_SIZE_MASK
 0xFFFF0000u

	)

2645 
	#BCH_FLASH0LAYOUT1_CLR_PAGE_SIZE_SHIFT
 16

	)

2646 
	#BCH_FLASH0LAYOUT1_CLR_PAGE_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT1_CLR_PAGE_SIZE_SHIFT
))&
BCH_FLASH0LAYOUT1_CLR_PAGE_SIZE_MASK
)

	)

2648 
	#BCH_FLASH0LAYOUT1_TOG_DATAN_SIZE_MASK
 0x3FFu

	)

2649 
	#BCH_FLASH0LAYOUT1_TOG_DATAN_SIZE_SHIFT
 0

	)

2650 
	#BCH_FLASH0LAYOUT1_TOG_DATAN_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT1_TOG_DATAN_SIZE_SHIFT
))&
BCH_FLASH0LAYOUT1_TOG_DATAN_SIZE_MASK
)

	)

2651 
	#BCH_FLASH0LAYOUT1_TOG_GF13_0_GF14_1_MASK
 0x400u

	)

2652 
	#BCH_FLASH0LAYOUT1_TOG_GF13_0_GF14_1_SHIFT
 10

	)

2653 
	#BCH_FLASH0LAYOUT1_TOG_ECCN_MASK
 0xF800u

	)

2654 
	#BCH_FLASH0LAYOUT1_TOG_ECCN_SHIFT
 11

	)

2655 
	#BCH_FLASH0LAYOUT1_TOG_ECCN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT1_TOG_ECCN_SHIFT
))&
BCH_FLASH0LAYOUT1_TOG_ECCN_MASK
)

	)

2656 
	#BCH_FLASH0LAYOUT1_TOG_PAGE_SIZE_MASK
 0xFFFF0000u

	)

2657 
	#BCH_FLASH0LAYOUT1_TOG_PAGE_SIZE_SHIFT
 16

	)

2658 
	#BCH_FLASH0LAYOUT1_TOG_PAGE_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH0LAYOUT1_TOG_PAGE_SIZE_SHIFT
))&
BCH_FLASH0LAYOUT1_TOG_PAGE_SIZE_MASK
)

	)

2660 
	#BCH_FLASH1LAYOUT0_DATA0_SIZE_MASK
 0x3FFu

	)

2661 
	#BCH_FLASH1LAYOUT0_DATA0_SIZE_SHIFT
 0

	)

2662 
	#BCH_FLASH1LAYOUT0_DATA0_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT0_DATA0_SIZE_SHIFT
))&
BCH_FLASH1LAYOUT0_DATA0_SIZE_MASK
)

	)

2663 
	#BCH_FLASH1LAYOUT0_GF13_0_GF14_1_MASK
 0x400u

	)

2664 
	#BCH_FLASH1LAYOUT0_GF13_0_GF14_1_SHIFT
 10

	)

2665 
	#BCH_FLASH1LAYOUT0_ECC0_MASK
 0xF800u

	)

2666 
	#BCH_FLASH1LAYOUT0_ECC0_SHIFT
 11

	)

2667 
	#BCH_FLASH1LAYOUT0_ECC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT0_ECC0_SHIFT
))&
BCH_FLASH1LAYOUT0_ECC0_MASK
)

	)

2668 
	#BCH_FLASH1LAYOUT0_META_SIZE_MASK
 0xFF0000u

	)

2669 
	#BCH_FLASH1LAYOUT0_META_SIZE_SHIFT
 16

	)

2670 
	#BCH_FLASH1LAYOUT0_META_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT0_META_SIZE_SHIFT
))&
BCH_FLASH1LAYOUT0_META_SIZE_MASK
)

	)

2671 
	#BCH_FLASH1LAYOUT0_NBLOCKS_MASK
 0xFF000000u

	)

2672 
	#BCH_FLASH1LAYOUT0_NBLOCKS_SHIFT
 24

	)

2673 
	#BCH_FLASH1LAYOUT0_NBLOCKS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT0_NBLOCKS_SHIFT
))&
BCH_FLASH1LAYOUT0_NBLOCKS_MASK
)

	)

2675 
	#BCH_FLASH1LAYOUT0_SET_DATA0_SIZE_MASK
 0x3FFu

	)

2676 
	#BCH_FLASH1LAYOUT0_SET_DATA0_SIZE_SHIFT
 0

	)

2677 
	#BCH_FLASH1LAYOUT0_SET_DATA0_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT0_SET_DATA0_SIZE_SHIFT
))&
BCH_FLASH1LAYOUT0_SET_DATA0_SIZE_MASK
)

	)

2678 
	#BCH_FLASH1LAYOUT0_SET_GF13_0_GF14_1_MASK
 0x400u

	)

2679 
	#BCH_FLASH1LAYOUT0_SET_GF13_0_GF14_1_SHIFT
 10

	)

2680 
	#BCH_FLASH1LAYOUT0_SET_ECC0_MASK
 0xF800u

	)

2681 
	#BCH_FLASH1LAYOUT0_SET_ECC0_SHIFT
 11

	)

2682 
	#BCH_FLASH1LAYOUT0_SET_ECC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT0_SET_ECC0_SHIFT
))&
BCH_FLASH1LAYOUT0_SET_ECC0_MASK
)

	)

2683 
	#BCH_FLASH1LAYOUT0_SET_META_SIZE_MASK
 0xFF0000u

	)

2684 
	#BCH_FLASH1LAYOUT0_SET_META_SIZE_SHIFT
 16

	)

2685 
	#BCH_FLASH1LAYOUT0_SET_META_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT0_SET_META_SIZE_SHIFT
))&
BCH_FLASH1LAYOUT0_SET_META_SIZE_MASK
)

	)

2686 
	#BCH_FLASH1LAYOUT0_SET_NBLOCKS_MASK
 0xFF000000u

	)

2687 
	#BCH_FLASH1LAYOUT0_SET_NBLOCKS_SHIFT
 24

	)

2688 
	#BCH_FLASH1LAYOUT0_SET_NBLOCKS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT0_SET_NBLOCKS_SHIFT
))&
BCH_FLASH1LAYOUT0_SET_NBLOCKS_MASK
)

	)

2690 
	#BCH_FLASH1LAYOUT0_CLR_DATA0_SIZE_MASK
 0x3FFu

	)

2691 
	#BCH_FLASH1LAYOUT0_CLR_DATA0_SIZE_SHIFT
 0

	)

2692 
	#BCH_FLASH1LAYOUT0_CLR_DATA0_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT0_CLR_DATA0_SIZE_SHIFT
))&
BCH_FLASH1LAYOUT0_CLR_DATA0_SIZE_MASK
)

	)

2693 
	#BCH_FLASH1LAYOUT0_CLR_GF13_0_GF14_1_MASK
 0x400u

	)

2694 
	#BCH_FLASH1LAYOUT0_CLR_GF13_0_GF14_1_SHIFT
 10

	)

2695 
	#BCH_FLASH1LAYOUT0_CLR_ECC0_MASK
 0xF800u

	)

2696 
	#BCH_FLASH1LAYOUT0_CLR_ECC0_SHIFT
 11

	)

2697 
	#BCH_FLASH1LAYOUT0_CLR_ECC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT0_CLR_ECC0_SHIFT
))&
BCH_FLASH1LAYOUT0_CLR_ECC0_MASK
)

	)

2698 
	#BCH_FLASH1LAYOUT0_CLR_META_SIZE_MASK
 0xFF0000u

	)

2699 
	#BCH_FLASH1LAYOUT0_CLR_META_SIZE_SHIFT
 16

	)

2700 
	#BCH_FLASH1LAYOUT0_CLR_META_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT0_CLR_META_SIZE_SHIFT
))&
BCH_FLASH1LAYOUT0_CLR_META_SIZE_MASK
)

	)

2701 
	#BCH_FLASH1LAYOUT0_CLR_NBLOCKS_MASK
 0xFF000000u

	)

2702 
	#BCH_FLASH1LAYOUT0_CLR_NBLOCKS_SHIFT
 24

	)

2703 
	#BCH_FLASH1LAYOUT0_CLR_NBLOCKS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT0_CLR_NBLOCKS_SHIFT
))&
BCH_FLASH1LAYOUT0_CLR_NBLOCKS_MASK
)

	)

2705 
	#BCH_FLASH1LAYOUT0_TOG_DATA0_SIZE_MASK
 0x3FFu

	)

2706 
	#BCH_FLASH1LAYOUT0_TOG_DATA0_SIZE_SHIFT
 0

	)

2707 
	#BCH_FLASH1LAYOUT0_TOG_DATA0_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT0_TOG_DATA0_SIZE_SHIFT
))&
BCH_FLASH1LAYOUT0_TOG_DATA0_SIZE_MASK
)

	)

2708 
	#BCH_FLASH1LAYOUT0_TOG_GF13_0_GF14_1_MASK
 0x400u

	)

2709 
	#BCH_FLASH1LAYOUT0_TOG_GF13_0_GF14_1_SHIFT
 10

	)

2710 
	#BCH_FLASH1LAYOUT0_TOG_ECC0_MASK
 0xF800u

	)

2711 
	#BCH_FLASH1LAYOUT0_TOG_ECC0_SHIFT
 11

	)

2712 
	#BCH_FLASH1LAYOUT0_TOG_ECC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT0_TOG_ECC0_SHIFT
))&
BCH_FLASH1LAYOUT0_TOG_ECC0_MASK
)

	)

2713 
	#BCH_FLASH1LAYOUT0_TOG_META_SIZE_MASK
 0xFF0000u

	)

2714 
	#BCH_FLASH1LAYOUT0_TOG_META_SIZE_SHIFT
 16

	)

2715 
	#BCH_FLASH1LAYOUT0_TOG_META_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT0_TOG_META_SIZE_SHIFT
))&
BCH_FLASH1LAYOUT0_TOG_META_SIZE_MASK
)

	)

2716 
	#BCH_FLASH1LAYOUT0_TOG_NBLOCKS_MASK
 0xFF000000u

	)

2717 
	#BCH_FLASH1LAYOUT0_TOG_NBLOCKS_SHIFT
 24

	)

2718 
	#BCH_FLASH1LAYOUT0_TOG_NBLOCKS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT0_TOG_NBLOCKS_SHIFT
))&
BCH_FLASH1LAYOUT0_TOG_NBLOCKS_MASK
)

	)

2720 
	#BCH_FLASH1LAYOUT1_DATAN_SIZE_MASK
 0x3FFu

	)

2721 
	#BCH_FLASH1LAYOUT1_DATAN_SIZE_SHIFT
 0

	)

2722 
	#BCH_FLASH1LAYOUT1_DATAN_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT1_DATAN_SIZE_SHIFT
))&
BCH_FLASH1LAYOUT1_DATAN_SIZE_MASK
)

	)

2723 
	#BCH_FLASH1LAYOUT1_GF13_0_GF14_1_MASK
 0x400u

	)

2724 
	#BCH_FLASH1LAYOUT1_GF13_0_GF14_1_SHIFT
 10

	)

2725 
	#BCH_FLASH1LAYOUT1_ECCN_MASK
 0xF800u

	)

2726 
	#BCH_FLASH1LAYOUT1_ECCN_SHIFT
 11

	)

2727 
	#BCH_FLASH1LAYOUT1_ECCN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT1_ECCN_SHIFT
))&
BCH_FLASH1LAYOUT1_ECCN_MASK
)

	)

2728 
	#BCH_FLASH1LAYOUT1_PAGE_SIZE_MASK
 0xFFFF0000u

	)

2729 
	#BCH_FLASH1LAYOUT1_PAGE_SIZE_SHIFT
 16

	)

2730 
	#BCH_FLASH1LAYOUT1_PAGE_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT1_PAGE_SIZE_SHIFT
))&
BCH_FLASH1LAYOUT1_PAGE_SIZE_MASK
)

	)

2732 
	#BCH_FLASH1LAYOUT1_SET_DATAN_SIZE_MASK
 0x3FFu

	)

2733 
	#BCH_FLASH1LAYOUT1_SET_DATAN_SIZE_SHIFT
 0

	)

2734 
	#BCH_FLASH1LAYOUT1_SET_DATAN_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT1_SET_DATAN_SIZE_SHIFT
))&
BCH_FLASH1LAYOUT1_SET_DATAN_SIZE_MASK
)

	)

2735 
	#BCH_FLASH1LAYOUT1_SET_GF13_0_GF14_1_MASK
 0x400u

	)

2736 
	#BCH_FLASH1LAYOUT1_SET_GF13_0_GF14_1_SHIFT
 10

	)

2737 
	#BCH_FLASH1LAYOUT1_SET_ECCN_MASK
 0xF800u

	)

2738 
	#BCH_FLASH1LAYOUT1_SET_ECCN_SHIFT
 11

	)

2739 
	#BCH_FLASH1LAYOUT1_SET_ECCN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT1_SET_ECCN_SHIFT
))&
BCH_FLASH1LAYOUT1_SET_ECCN_MASK
)

	)

2740 
	#BCH_FLASH1LAYOUT1_SET_PAGE_SIZE_MASK
 0xFFFF0000u

	)

2741 
	#BCH_FLASH1LAYOUT1_SET_PAGE_SIZE_SHIFT
 16

	)

2742 
	#BCH_FLASH1LAYOUT1_SET_PAGE_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT1_SET_PAGE_SIZE_SHIFT
))&
BCH_FLASH1LAYOUT1_SET_PAGE_SIZE_MASK
)

	)

2744 
	#BCH_FLASH1LAYOUT1_CLR_DATAN_SIZE_MASK
 0x3FFu

	)

2745 
	#BCH_FLASH1LAYOUT1_CLR_DATAN_SIZE_SHIFT
 0

	)

2746 
	#BCH_FLASH1LAYOUT1_CLR_DATAN_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT1_CLR_DATAN_SIZE_SHIFT
))&
BCH_FLASH1LAYOUT1_CLR_DATAN_SIZE_MASK
)

	)

2747 
	#BCH_FLASH1LAYOUT1_CLR_GF13_0_GF14_1_MASK
 0x400u

	)

2748 
	#BCH_FLASH1LAYOUT1_CLR_GF13_0_GF14_1_SHIFT
 10

	)

2749 
	#BCH_FLASH1LAYOUT1_CLR_ECCN_MASK
 0xF800u

	)

2750 
	#BCH_FLASH1LAYOUT1_CLR_ECCN_SHIFT
 11

	)

2751 
	#BCH_FLASH1LAYOUT1_CLR_ECCN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT1_CLR_ECCN_SHIFT
))&
BCH_FLASH1LAYOUT1_CLR_ECCN_MASK
)

	)

2752 
	#BCH_FLASH1LAYOUT1_CLR_PAGE_SIZE_MASK
 0xFFFF0000u

	)

2753 
	#BCH_FLASH1LAYOUT1_CLR_PAGE_SIZE_SHIFT
 16

	)

2754 
	#BCH_FLASH1LAYOUT1_CLR_PAGE_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT1_CLR_PAGE_SIZE_SHIFT
))&
BCH_FLASH1LAYOUT1_CLR_PAGE_SIZE_MASK
)

	)

2756 
	#BCH_FLASH1LAYOUT1_TOG_DATAN_SIZE_MASK
 0x3FFu

	)

2757 
	#BCH_FLASH1LAYOUT1_TOG_DATAN_SIZE_SHIFT
 0

	)

2758 
	#BCH_FLASH1LAYOUT1_TOG_DATAN_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT1_TOG_DATAN_SIZE_SHIFT
))&
BCH_FLASH1LAYOUT1_TOG_DATAN_SIZE_MASK
)

	)

2759 
	#BCH_FLASH1LAYOUT1_TOG_GF13_0_GF14_1_MASK
 0x400u

	)

2760 
	#BCH_FLASH1LAYOUT1_TOG_GF13_0_GF14_1_SHIFT
 10

	)

2761 
	#BCH_FLASH1LAYOUT1_TOG_ECCN_MASK
 0xF800u

	)

2762 
	#BCH_FLASH1LAYOUT1_TOG_ECCN_SHIFT
 11

	)

2763 
	#BCH_FLASH1LAYOUT1_TOG_ECCN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT1_TOG_ECCN_SHIFT
))&
BCH_FLASH1LAYOUT1_TOG_ECCN_MASK
)

	)

2764 
	#BCH_FLASH1LAYOUT1_TOG_PAGE_SIZE_MASK
 0xFFFF0000u

	)

2765 
	#BCH_FLASH1LAYOUT1_TOG_PAGE_SIZE_SHIFT
 16

	)

2766 
	#BCH_FLASH1LAYOUT1_TOG_PAGE_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH1LAYOUT1_TOG_PAGE_SIZE_SHIFT
))&
BCH_FLASH1LAYOUT1_TOG_PAGE_SIZE_MASK
)

	)

2768 
	#BCH_FLASH2LAYOUT0_DATA0_SIZE_MASK
 0x3FFu

	)

2769 
	#BCH_FLASH2LAYOUT0_DATA0_SIZE_SHIFT
 0

	)

2770 
	#BCH_FLASH2LAYOUT0_DATA0_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT0_DATA0_SIZE_SHIFT
))&
BCH_FLASH2LAYOUT0_DATA0_SIZE_MASK
)

	)

2771 
	#BCH_FLASH2LAYOUT0_GF13_0_GF14_1_MASK
 0x400u

	)

2772 
	#BCH_FLASH2LAYOUT0_GF13_0_GF14_1_SHIFT
 10

	)

2773 
	#BCH_FLASH2LAYOUT0_ECC0_MASK
 0xF800u

	)

2774 
	#BCH_FLASH2LAYOUT0_ECC0_SHIFT
 11

	)

2775 
	#BCH_FLASH2LAYOUT0_ECC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT0_ECC0_SHIFT
))&
BCH_FLASH2LAYOUT0_ECC0_MASK
)

	)

2776 
	#BCH_FLASH2LAYOUT0_META_SIZE_MASK
 0xFF0000u

	)

2777 
	#BCH_FLASH2LAYOUT0_META_SIZE_SHIFT
 16

	)

2778 
	#BCH_FLASH2LAYOUT0_META_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT0_META_SIZE_SHIFT
))&
BCH_FLASH2LAYOUT0_META_SIZE_MASK
)

	)

2779 
	#BCH_FLASH2LAYOUT0_NBLOCKS_MASK
 0xFF000000u

	)

2780 
	#BCH_FLASH2LAYOUT0_NBLOCKS_SHIFT
 24

	)

2781 
	#BCH_FLASH2LAYOUT0_NBLOCKS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT0_NBLOCKS_SHIFT
))&
BCH_FLASH2LAYOUT0_NBLOCKS_MASK
)

	)

2783 
	#BCH_FLASH2LAYOUT0_SET_DATA0_SIZE_MASK
 0x3FFu

	)

2784 
	#BCH_FLASH2LAYOUT0_SET_DATA0_SIZE_SHIFT
 0

	)

2785 
	#BCH_FLASH2LAYOUT0_SET_DATA0_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT0_SET_DATA0_SIZE_SHIFT
))&
BCH_FLASH2LAYOUT0_SET_DATA0_SIZE_MASK
)

	)

2786 
	#BCH_FLASH2LAYOUT0_SET_GF13_0_GF14_1_MASK
 0x400u

	)

2787 
	#BCH_FLASH2LAYOUT0_SET_GF13_0_GF14_1_SHIFT
 10

	)

2788 
	#BCH_FLASH2LAYOUT0_SET_ECC0_MASK
 0xF800u

	)

2789 
	#BCH_FLASH2LAYOUT0_SET_ECC0_SHIFT
 11

	)

2790 
	#BCH_FLASH2LAYOUT0_SET_ECC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT0_SET_ECC0_SHIFT
))&
BCH_FLASH2LAYOUT0_SET_ECC0_MASK
)

	)

2791 
	#BCH_FLASH2LAYOUT0_SET_META_SIZE_MASK
 0xFF0000u

	)

2792 
	#BCH_FLASH2LAYOUT0_SET_META_SIZE_SHIFT
 16

	)

2793 
	#BCH_FLASH2LAYOUT0_SET_META_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT0_SET_META_SIZE_SHIFT
))&
BCH_FLASH2LAYOUT0_SET_META_SIZE_MASK
)

	)

2794 
	#BCH_FLASH2LAYOUT0_SET_NBLOCKS_MASK
 0xFF000000u

	)

2795 
	#BCH_FLASH2LAYOUT0_SET_NBLOCKS_SHIFT
 24

	)

2796 
	#BCH_FLASH2LAYOUT0_SET_NBLOCKS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT0_SET_NBLOCKS_SHIFT
))&
BCH_FLASH2LAYOUT0_SET_NBLOCKS_MASK
)

	)

2798 
	#BCH_FLASH2LAYOUT0_CLR_DATA0_SIZE_MASK
 0x3FFu

	)

2799 
	#BCH_FLASH2LAYOUT0_CLR_DATA0_SIZE_SHIFT
 0

	)

2800 
	#BCH_FLASH2LAYOUT0_CLR_DATA0_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT0_CLR_DATA0_SIZE_SHIFT
))&
BCH_FLASH2LAYOUT0_CLR_DATA0_SIZE_MASK
)

	)

2801 
	#BCH_FLASH2LAYOUT0_CLR_GF13_0_GF14_1_MASK
 0x400u

	)

2802 
	#BCH_FLASH2LAYOUT0_CLR_GF13_0_GF14_1_SHIFT
 10

	)

2803 
	#BCH_FLASH2LAYOUT0_CLR_ECC0_MASK
 0xF800u

	)

2804 
	#BCH_FLASH2LAYOUT0_CLR_ECC0_SHIFT
 11

	)

2805 
	#BCH_FLASH2LAYOUT0_CLR_ECC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT0_CLR_ECC0_SHIFT
))&
BCH_FLASH2LAYOUT0_CLR_ECC0_MASK
)

	)

2806 
	#BCH_FLASH2LAYOUT0_CLR_META_SIZE_MASK
 0xFF0000u

	)

2807 
	#BCH_FLASH2LAYOUT0_CLR_META_SIZE_SHIFT
 16

	)

2808 
	#BCH_FLASH2LAYOUT0_CLR_META_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT0_CLR_META_SIZE_SHIFT
))&
BCH_FLASH2LAYOUT0_CLR_META_SIZE_MASK
)

	)

2809 
	#BCH_FLASH2LAYOUT0_CLR_NBLOCKS_MASK
 0xFF000000u

	)

2810 
	#BCH_FLASH2LAYOUT0_CLR_NBLOCKS_SHIFT
 24

	)

2811 
	#BCH_FLASH2LAYOUT0_CLR_NBLOCKS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT0_CLR_NBLOCKS_SHIFT
))&
BCH_FLASH2LAYOUT0_CLR_NBLOCKS_MASK
)

	)

2813 
	#BCH_FLASH2LAYOUT0_TOG_DATA0_SIZE_MASK
 0x3FFu

	)

2814 
	#BCH_FLASH2LAYOUT0_TOG_DATA0_SIZE_SHIFT
 0

	)

2815 
	#BCH_FLASH2LAYOUT0_TOG_DATA0_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT0_TOG_DATA0_SIZE_SHIFT
))&
BCH_FLASH2LAYOUT0_TOG_DATA0_SIZE_MASK
)

	)

2816 
	#BCH_FLASH2LAYOUT0_TOG_GF13_0_GF14_1_MASK
 0x400u

	)

2817 
	#BCH_FLASH2LAYOUT0_TOG_GF13_0_GF14_1_SHIFT
 10

	)

2818 
	#BCH_FLASH2LAYOUT0_TOG_ECC0_MASK
 0xF800u

	)

2819 
	#BCH_FLASH2LAYOUT0_TOG_ECC0_SHIFT
 11

	)

2820 
	#BCH_FLASH2LAYOUT0_TOG_ECC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT0_TOG_ECC0_SHIFT
))&
BCH_FLASH2LAYOUT0_TOG_ECC0_MASK
)

	)

2821 
	#BCH_FLASH2LAYOUT0_TOG_META_SIZE_MASK
 0xFF0000u

	)

2822 
	#BCH_FLASH2LAYOUT0_TOG_META_SIZE_SHIFT
 16

	)

2823 
	#BCH_FLASH2LAYOUT0_TOG_META_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT0_TOG_META_SIZE_SHIFT
))&
BCH_FLASH2LAYOUT0_TOG_META_SIZE_MASK
)

	)

2824 
	#BCH_FLASH2LAYOUT0_TOG_NBLOCKS_MASK
 0xFF000000u

	)

2825 
	#BCH_FLASH2LAYOUT0_TOG_NBLOCKS_SHIFT
 24

	)

2826 
	#BCH_FLASH2LAYOUT0_TOG_NBLOCKS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT0_TOG_NBLOCKS_SHIFT
))&
BCH_FLASH2LAYOUT0_TOG_NBLOCKS_MASK
)

	)

2828 
	#BCH_FLASH2LAYOUT1_DATAN_SIZE_MASK
 0x3FFu

	)

2829 
	#BCH_FLASH2LAYOUT1_DATAN_SIZE_SHIFT
 0

	)

2830 
	#BCH_FLASH2LAYOUT1_DATAN_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT1_DATAN_SIZE_SHIFT
))&
BCH_FLASH2LAYOUT1_DATAN_SIZE_MASK
)

	)

2831 
	#BCH_FLASH2LAYOUT1_GF13_0_GF14_1_MASK
 0x400u

	)

2832 
	#BCH_FLASH2LAYOUT1_GF13_0_GF14_1_SHIFT
 10

	)

2833 
	#BCH_FLASH2LAYOUT1_ECCN_MASK
 0xF800u

	)

2834 
	#BCH_FLASH2LAYOUT1_ECCN_SHIFT
 11

	)

2835 
	#BCH_FLASH2LAYOUT1_ECCN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT1_ECCN_SHIFT
))&
BCH_FLASH2LAYOUT1_ECCN_MASK
)

	)

2836 
	#BCH_FLASH2LAYOUT1_PAGE_SIZE_MASK
 0xFFFF0000u

	)

2837 
	#BCH_FLASH2LAYOUT1_PAGE_SIZE_SHIFT
 16

	)

2838 
	#BCH_FLASH2LAYOUT1_PAGE_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT1_PAGE_SIZE_SHIFT
))&
BCH_FLASH2LAYOUT1_PAGE_SIZE_MASK
)

	)

2840 
	#BCH_FLASH2LAYOUT1_SET_DATAN_SIZE_MASK
 0x3FFu

	)

2841 
	#BCH_FLASH2LAYOUT1_SET_DATAN_SIZE_SHIFT
 0

	)

2842 
	#BCH_FLASH2LAYOUT1_SET_DATAN_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT1_SET_DATAN_SIZE_SHIFT
))&
BCH_FLASH2LAYOUT1_SET_DATAN_SIZE_MASK
)

	)

2843 
	#BCH_FLASH2LAYOUT1_SET_GF13_0_GF14_1_MASK
 0x400u

	)

2844 
	#BCH_FLASH2LAYOUT1_SET_GF13_0_GF14_1_SHIFT
 10

	)

2845 
	#BCH_FLASH2LAYOUT1_SET_ECCN_MASK
 0xF800u

	)

2846 
	#BCH_FLASH2LAYOUT1_SET_ECCN_SHIFT
 11

	)

2847 
	#BCH_FLASH2LAYOUT1_SET_ECCN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT1_SET_ECCN_SHIFT
))&
BCH_FLASH2LAYOUT1_SET_ECCN_MASK
)

	)

2848 
	#BCH_FLASH2LAYOUT1_SET_PAGE_SIZE_MASK
 0xFFFF0000u

	)

2849 
	#BCH_FLASH2LAYOUT1_SET_PAGE_SIZE_SHIFT
 16

	)

2850 
	#BCH_FLASH2LAYOUT1_SET_PAGE_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT1_SET_PAGE_SIZE_SHIFT
))&
BCH_FLASH2LAYOUT1_SET_PAGE_SIZE_MASK
)

	)

2852 
	#BCH_FLASH2LAYOUT1_CLR_DATAN_SIZE_MASK
 0x3FFu

	)

2853 
	#BCH_FLASH2LAYOUT1_CLR_DATAN_SIZE_SHIFT
 0

	)

2854 
	#BCH_FLASH2LAYOUT1_CLR_DATAN_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT1_CLR_DATAN_SIZE_SHIFT
))&
BCH_FLASH2LAYOUT1_CLR_DATAN_SIZE_MASK
)

	)

2855 
	#BCH_FLASH2LAYOUT1_CLR_GF13_0_GF14_1_MASK
 0x400u

	)

2856 
	#BCH_FLASH2LAYOUT1_CLR_GF13_0_GF14_1_SHIFT
 10

	)

2857 
	#BCH_FLASH2LAYOUT1_CLR_ECCN_MASK
 0xF800u

	)

2858 
	#BCH_FLASH2LAYOUT1_CLR_ECCN_SHIFT
 11

	)

2859 
	#BCH_FLASH2LAYOUT1_CLR_ECCN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT1_CLR_ECCN_SHIFT
))&
BCH_FLASH2LAYOUT1_CLR_ECCN_MASK
)

	)

2860 
	#BCH_FLASH2LAYOUT1_CLR_PAGE_SIZE_MASK
 0xFFFF0000u

	)

2861 
	#BCH_FLASH2LAYOUT1_CLR_PAGE_SIZE_SHIFT
 16

	)

2862 
	#BCH_FLASH2LAYOUT1_CLR_PAGE_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT1_CLR_PAGE_SIZE_SHIFT
))&
BCH_FLASH2LAYOUT1_CLR_PAGE_SIZE_MASK
)

	)

2864 
	#BCH_FLASH2LAYOUT1_TOG_DATAN_SIZE_MASK
 0x3FFu

	)

2865 
	#BCH_FLASH2LAYOUT1_TOG_DATAN_SIZE_SHIFT
 0

	)

2866 
	#BCH_FLASH2LAYOUT1_TOG_DATAN_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT1_TOG_DATAN_SIZE_SHIFT
))&
BCH_FLASH2LAYOUT1_TOG_DATAN_SIZE_MASK
)

	)

2867 
	#BCH_FLASH2LAYOUT1_TOG_GF13_0_GF14_1_MASK
 0x400u

	)

2868 
	#BCH_FLASH2LAYOUT1_TOG_GF13_0_GF14_1_SHIFT
 10

	)

2869 
	#BCH_FLASH2LAYOUT1_TOG_ECCN_MASK
 0xF800u

	)

2870 
	#BCH_FLASH2LAYOUT1_TOG_ECCN_SHIFT
 11

	)

2871 
	#BCH_FLASH2LAYOUT1_TOG_ECCN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT1_TOG_ECCN_SHIFT
))&
BCH_FLASH2LAYOUT1_TOG_ECCN_MASK
)

	)

2872 
	#BCH_FLASH2LAYOUT1_TOG_PAGE_SIZE_MASK
 0xFFFF0000u

	)

2873 
	#BCH_FLASH2LAYOUT1_TOG_PAGE_SIZE_SHIFT
 16

	)

2874 
	#BCH_FLASH2LAYOUT1_TOG_PAGE_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH2LAYOUT1_TOG_PAGE_SIZE_SHIFT
))&
BCH_FLASH2LAYOUT1_TOG_PAGE_SIZE_MASK
)

	)

2876 
	#BCH_FLASH3LAYOUT0_DATA0_SIZE_MASK
 0x3FFu

	)

2877 
	#BCH_FLASH3LAYOUT0_DATA0_SIZE_SHIFT
 0

	)

2878 
	#BCH_FLASH3LAYOUT0_DATA0_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT0_DATA0_SIZE_SHIFT
))&
BCH_FLASH3LAYOUT0_DATA0_SIZE_MASK
)

	)

2879 
	#BCH_FLASH3LAYOUT0_GF13_0_GF14_1_MASK
 0x400u

	)

2880 
	#BCH_FLASH3LAYOUT0_GF13_0_GF14_1_SHIFT
 10

	)

2881 
	#BCH_FLASH3LAYOUT0_ECC0_MASK
 0xF800u

	)

2882 
	#BCH_FLASH3LAYOUT0_ECC0_SHIFT
 11

	)

2883 
	#BCH_FLASH3LAYOUT0_ECC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT0_ECC0_SHIFT
))&
BCH_FLASH3LAYOUT0_ECC0_MASK
)

	)

2884 
	#BCH_FLASH3LAYOUT0_META_SIZE_MASK
 0xFF0000u

	)

2885 
	#BCH_FLASH3LAYOUT0_META_SIZE_SHIFT
 16

	)

2886 
	#BCH_FLASH3LAYOUT0_META_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT0_META_SIZE_SHIFT
))&
BCH_FLASH3LAYOUT0_META_SIZE_MASK
)

	)

2887 
	#BCH_FLASH3LAYOUT0_NBLOCKS_MASK
 0xFF000000u

	)

2888 
	#BCH_FLASH3LAYOUT0_NBLOCKS_SHIFT
 24

	)

2889 
	#BCH_FLASH3LAYOUT0_NBLOCKS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT0_NBLOCKS_SHIFT
))&
BCH_FLASH3LAYOUT0_NBLOCKS_MASK
)

	)

2891 
	#BCH_FLASH3LAYOUT0_SET_DATA0_SIZE_MASK
 0x3FFu

	)

2892 
	#BCH_FLASH3LAYOUT0_SET_DATA0_SIZE_SHIFT
 0

	)

2893 
	#BCH_FLASH3LAYOUT0_SET_DATA0_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT0_SET_DATA0_SIZE_SHIFT
))&
BCH_FLASH3LAYOUT0_SET_DATA0_SIZE_MASK
)

	)

2894 
	#BCH_FLASH3LAYOUT0_SET_GF13_0_GF14_1_MASK
 0x400u

	)

2895 
	#BCH_FLASH3LAYOUT0_SET_GF13_0_GF14_1_SHIFT
 10

	)

2896 
	#BCH_FLASH3LAYOUT0_SET_ECC0_MASK
 0xF800u

	)

2897 
	#BCH_FLASH3LAYOUT0_SET_ECC0_SHIFT
 11

	)

2898 
	#BCH_FLASH3LAYOUT0_SET_ECC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT0_SET_ECC0_SHIFT
))&
BCH_FLASH3LAYOUT0_SET_ECC0_MASK
)

	)

2899 
	#BCH_FLASH3LAYOUT0_SET_META_SIZE_MASK
 0xFF0000u

	)

2900 
	#BCH_FLASH3LAYOUT0_SET_META_SIZE_SHIFT
 16

	)

2901 
	#BCH_FLASH3LAYOUT0_SET_META_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT0_SET_META_SIZE_SHIFT
))&
BCH_FLASH3LAYOUT0_SET_META_SIZE_MASK
)

	)

2902 
	#BCH_FLASH3LAYOUT0_SET_NBLOCKS_MASK
 0xFF000000u

	)

2903 
	#BCH_FLASH3LAYOUT0_SET_NBLOCKS_SHIFT
 24

	)

2904 
	#BCH_FLASH3LAYOUT0_SET_NBLOCKS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT0_SET_NBLOCKS_SHIFT
))&
BCH_FLASH3LAYOUT0_SET_NBLOCKS_MASK
)

	)

2906 
	#BCH_FLASH3LAYOUT0_CLR_DATA0_SIZE_MASK
 0x3FFu

	)

2907 
	#BCH_FLASH3LAYOUT0_CLR_DATA0_SIZE_SHIFT
 0

	)

2908 
	#BCH_FLASH3LAYOUT0_CLR_DATA0_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT0_CLR_DATA0_SIZE_SHIFT
))&
BCH_FLASH3LAYOUT0_CLR_DATA0_SIZE_MASK
)

	)

2909 
	#BCH_FLASH3LAYOUT0_CLR_GF13_0_GF14_1_MASK
 0x400u

	)

2910 
	#BCH_FLASH3LAYOUT0_CLR_GF13_0_GF14_1_SHIFT
 10

	)

2911 
	#BCH_FLASH3LAYOUT0_CLR_ECC0_MASK
 0xF800u

	)

2912 
	#BCH_FLASH3LAYOUT0_CLR_ECC0_SHIFT
 11

	)

2913 
	#BCH_FLASH3LAYOUT0_CLR_ECC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT0_CLR_ECC0_SHIFT
))&
BCH_FLASH3LAYOUT0_CLR_ECC0_MASK
)

	)

2914 
	#BCH_FLASH3LAYOUT0_CLR_META_SIZE_MASK
 0xFF0000u

	)

2915 
	#BCH_FLASH3LAYOUT0_CLR_META_SIZE_SHIFT
 16

	)

2916 
	#BCH_FLASH3LAYOUT0_CLR_META_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT0_CLR_META_SIZE_SHIFT
))&
BCH_FLASH3LAYOUT0_CLR_META_SIZE_MASK
)

	)

2917 
	#BCH_FLASH3LAYOUT0_CLR_NBLOCKS_MASK
 0xFF000000u

	)

2918 
	#BCH_FLASH3LAYOUT0_CLR_NBLOCKS_SHIFT
 24

	)

2919 
	#BCH_FLASH3LAYOUT0_CLR_NBLOCKS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT0_CLR_NBLOCKS_SHIFT
))&
BCH_FLASH3LAYOUT0_CLR_NBLOCKS_MASK
)

	)

2921 
	#BCH_FLASH3LAYOUT0_TOG_DATA0_SIZE_MASK
 0x3FFu

	)

2922 
	#BCH_FLASH3LAYOUT0_TOG_DATA0_SIZE_SHIFT
 0

	)

2923 
	#BCH_FLASH3LAYOUT0_TOG_DATA0_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT0_TOG_DATA0_SIZE_SHIFT
))&
BCH_FLASH3LAYOUT0_TOG_DATA0_SIZE_MASK
)

	)

2924 
	#BCH_FLASH3LAYOUT0_TOG_GF13_0_GF14_1_MASK
 0x400u

	)

2925 
	#BCH_FLASH3LAYOUT0_TOG_GF13_0_GF14_1_SHIFT
 10

	)

2926 
	#BCH_FLASH3LAYOUT0_TOG_ECC0_MASK
 0xF800u

	)

2927 
	#BCH_FLASH3LAYOUT0_TOG_ECC0_SHIFT
 11

	)

2928 
	#BCH_FLASH3LAYOUT0_TOG_ECC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT0_TOG_ECC0_SHIFT
))&
BCH_FLASH3LAYOUT0_TOG_ECC0_MASK
)

	)

2929 
	#BCH_FLASH3LAYOUT0_TOG_META_SIZE_MASK
 0xFF0000u

	)

2930 
	#BCH_FLASH3LAYOUT0_TOG_META_SIZE_SHIFT
 16

	)

2931 
	#BCH_FLASH3LAYOUT0_TOG_META_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT0_TOG_META_SIZE_SHIFT
))&
BCH_FLASH3LAYOUT0_TOG_META_SIZE_MASK
)

	)

2932 
	#BCH_FLASH3LAYOUT0_TOG_NBLOCKS_MASK
 0xFF000000u

	)

2933 
	#BCH_FLASH3LAYOUT0_TOG_NBLOCKS_SHIFT
 24

	)

2934 
	#BCH_FLASH3LAYOUT0_TOG_NBLOCKS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT0_TOG_NBLOCKS_SHIFT
))&
BCH_FLASH3LAYOUT0_TOG_NBLOCKS_MASK
)

	)

2936 
	#BCH_FLASH3LAYOUT1_DATAN_SIZE_MASK
 0x3FFu

	)

2937 
	#BCH_FLASH3LAYOUT1_DATAN_SIZE_SHIFT
 0

	)

2938 
	#BCH_FLASH3LAYOUT1_DATAN_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT1_DATAN_SIZE_SHIFT
))&
BCH_FLASH3LAYOUT1_DATAN_SIZE_MASK
)

	)

2939 
	#BCH_FLASH3LAYOUT1_GF13_0_GF14_1_MASK
 0x400u

	)

2940 
	#BCH_FLASH3LAYOUT1_GF13_0_GF14_1_SHIFT
 10

	)

2941 
	#BCH_FLASH3LAYOUT1_ECCN_MASK
 0xF800u

	)

2942 
	#BCH_FLASH3LAYOUT1_ECCN_SHIFT
 11

	)

2943 
	#BCH_FLASH3LAYOUT1_ECCN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT1_ECCN_SHIFT
))&
BCH_FLASH3LAYOUT1_ECCN_MASK
)

	)

2944 
	#BCH_FLASH3LAYOUT1_PAGE_SIZE_MASK
 0xFFFF0000u

	)

2945 
	#BCH_FLASH3LAYOUT1_PAGE_SIZE_SHIFT
 16

	)

2946 
	#BCH_FLASH3LAYOUT1_PAGE_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT1_PAGE_SIZE_SHIFT
))&
BCH_FLASH3LAYOUT1_PAGE_SIZE_MASK
)

	)

2948 
	#BCH_FLASH3LAYOUT1_SET_DATAN_SIZE_MASK
 0x3FFu

	)

2949 
	#BCH_FLASH3LAYOUT1_SET_DATAN_SIZE_SHIFT
 0

	)

2950 
	#BCH_FLASH3LAYOUT1_SET_DATAN_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT1_SET_DATAN_SIZE_SHIFT
))&
BCH_FLASH3LAYOUT1_SET_DATAN_SIZE_MASK
)

	)

2951 
	#BCH_FLASH3LAYOUT1_SET_GF13_0_GF14_1_MASK
 0x400u

	)

2952 
	#BCH_FLASH3LAYOUT1_SET_GF13_0_GF14_1_SHIFT
 10

	)

2953 
	#BCH_FLASH3LAYOUT1_SET_ECCN_MASK
 0xF800u

	)

2954 
	#BCH_FLASH3LAYOUT1_SET_ECCN_SHIFT
 11

	)

2955 
	#BCH_FLASH3LAYOUT1_SET_ECCN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT1_SET_ECCN_SHIFT
))&
BCH_FLASH3LAYOUT1_SET_ECCN_MASK
)

	)

2956 
	#BCH_FLASH3LAYOUT1_SET_PAGE_SIZE_MASK
 0xFFFF0000u

	)

2957 
	#BCH_FLASH3LAYOUT1_SET_PAGE_SIZE_SHIFT
 16

	)

2958 
	#BCH_FLASH3LAYOUT1_SET_PAGE_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT1_SET_PAGE_SIZE_SHIFT
))&
BCH_FLASH3LAYOUT1_SET_PAGE_SIZE_MASK
)

	)

2960 
	#BCH_FLASH3LAYOUT1_CLR_DATAN_SIZE_MASK
 0x3FFu

	)

2961 
	#BCH_FLASH3LAYOUT1_CLR_DATAN_SIZE_SHIFT
 0

	)

2962 
	#BCH_FLASH3LAYOUT1_CLR_DATAN_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT1_CLR_DATAN_SIZE_SHIFT
))&
BCH_FLASH3LAYOUT1_CLR_DATAN_SIZE_MASK
)

	)

2963 
	#BCH_FLASH3LAYOUT1_CLR_GF13_0_GF14_1_MASK
 0x400u

	)

2964 
	#BCH_FLASH3LAYOUT1_CLR_GF13_0_GF14_1_SHIFT
 10

	)

2965 
	#BCH_FLASH3LAYOUT1_CLR_ECCN_MASK
 0xF800u

	)

2966 
	#BCH_FLASH3LAYOUT1_CLR_ECCN_SHIFT
 11

	)

2967 
	#BCH_FLASH3LAYOUT1_CLR_ECCN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT1_CLR_ECCN_SHIFT
))&
BCH_FLASH3LAYOUT1_CLR_ECCN_MASK
)

	)

2968 
	#BCH_FLASH3LAYOUT1_CLR_PAGE_SIZE_MASK
 0xFFFF0000u

	)

2969 
	#BCH_FLASH3LAYOUT1_CLR_PAGE_SIZE_SHIFT
 16

	)

2970 
	#BCH_FLASH3LAYOUT1_CLR_PAGE_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT1_CLR_PAGE_SIZE_SHIFT
))&
BCH_FLASH3LAYOUT1_CLR_PAGE_SIZE_MASK
)

	)

2972 
	#BCH_FLASH3LAYOUT1_TOG_DATAN_SIZE_MASK
 0x3FFu

	)

2973 
	#BCH_FLASH3LAYOUT1_TOG_DATAN_SIZE_SHIFT
 0

	)

2974 
	#BCH_FLASH3LAYOUT1_TOG_DATAN_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT1_TOG_DATAN_SIZE_SHIFT
))&
BCH_FLASH3LAYOUT1_TOG_DATAN_SIZE_MASK
)

	)

2975 
	#BCH_FLASH3LAYOUT1_TOG_GF13_0_GF14_1_MASK
 0x400u

	)

2976 
	#BCH_FLASH3LAYOUT1_TOG_GF13_0_GF14_1_SHIFT
 10

	)

2977 
	#BCH_FLASH3LAYOUT1_TOG_ECCN_MASK
 0xF800u

	)

2978 
	#BCH_FLASH3LAYOUT1_TOG_ECCN_SHIFT
 11

	)

2979 
	#BCH_FLASH3LAYOUT1_TOG_ECCN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT1_TOG_ECCN_SHIFT
))&
BCH_FLASH3LAYOUT1_TOG_ECCN_MASK
)

	)

2980 
	#BCH_FLASH3LAYOUT1_TOG_PAGE_SIZE_MASK
 0xFFFF0000u

	)

2981 
	#BCH_FLASH3LAYOUT1_TOG_PAGE_SIZE_SHIFT
 16

	)

2982 
	#BCH_FLASH3LAYOUT1_TOG_PAGE_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_FLASH3LAYOUT1_TOG_PAGE_SIZE_SHIFT
))&
BCH_FLASH3LAYOUT1_TOG_PAGE_SIZE_MASK
)

	)

2984 
	#BCH_DEBUG0_DEBUG_REG_SELECT_MASK
 0x3Fu

	)

2985 
	#BCH_DEBUG0_DEBUG_REG_SELECT_SHIFT
 0

	)

2986 
	#BCH_DEBUG0_DEBUG_REG_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG0_DEBUG_REG_SELECT_SHIFT
))&
BCH_DEBUG0_DEBUG_REG_SELECT_MASK
)

	)

2987 
	#BCH_DEBUG0_RSVD0_MASK
 0xC0u

	)

2988 
	#BCH_DEBUG0_RSVD0_SHIFT
 6

	)

2989 
	#BCH_DEBUG0_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG0_RSVD0_SHIFT
))&
BCH_DEBUG0_RSVD0_MASK
)

	)

2990 
	#BCH_DEBUG0_BM_KES_TEST_BYPASS_MASK
 0x100u

	)

2991 
	#BCH_DEBUG0_BM_KES_TEST_BYPASS_SHIFT
 8

	)

2992 
	#BCH_DEBUG0_KES_DEBUG_STALL_MASK
 0x200u

	)

2993 
	#BCH_DEBUG0_KES_DEBUG_STALL_SHIFT
 9

	)

2994 
	#BCH_DEBUG0_KES_DEBUG_STEP_MASK
 0x400u

	)

2995 
	#BCH_DEBUG0_KES_DEBUG_STEP_SHIFT
 10

	)

2996 
	#BCH_DEBUG0_KES_STANDALONE_MASK
 0x800u

	)

2997 
	#BCH_DEBUG0_KES_STANDALONE_SHIFT
 11

	)

2998 
	#BCH_DEBUG0_KES_DEBUG_KICK_MASK
 0x1000u

	)

2999 
	#BCH_DEBUG0_KES_DEBUG_KICK_SHIFT
 12

	)

3000 
	#BCH_DEBUG0_KES_DEBUG_MODE4K_MASK
 0x2000u

	)

3001 
	#BCH_DEBUG0_KES_DEBUG_MODE4K_SHIFT
 13

	)

3002 
	#BCH_DEBUG0_KES_DEBUG_PAYLOAD_FLAG_MASK
 0x4000u

	)

3003 
	#BCH_DEBUG0_KES_DEBUG_PAYLOAD_FLAG_SHIFT
 14

	)

3004 
	#BCH_DEBUG0_KES_DEBUG_SHIFT_SYND_MASK
 0x8000u

	)

3005 
	#BCH_DEBUG0_KES_DEBUG_SHIFT_SYND_SHIFT
 15

	)

3006 
	#BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL_MASK
 0x1FF0000u

	)

3007 
	#BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL_SHIFT
 16

	)

3008 
	#BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL_SHIFT
))&
BCH_DEBUG0_KES_DEBUG_SYNDROME_SYMBOL_MASK
)

	)

3009 
	#BCH_DEBUG0_RSVD1_MASK
 0xFE000000u

	)

3010 
	#BCH_DEBUG0_RSVD1_SHIFT
 25

	)

3011 
	#BCH_DEBUG0_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG0_RSVD1_SHIFT
))&
BCH_DEBUG0_RSVD1_MASK
)

	)

3013 
	#BCH_DEBUG0_SET_DEBUG_REG_SELECT_MASK
 0x3Fu

	)

3014 
	#BCH_DEBUG0_SET_DEBUG_REG_SELECT_SHIFT
 0

	)

3015 
	#BCH_DEBUG0_SET_DEBUG_REG_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG0_SET_DEBUG_REG_SELECT_SHIFT
))&
BCH_DEBUG0_SET_DEBUG_REG_SELECT_MASK
)

	)

3016 
	#BCH_DEBUG0_SET_RSVD0_MASK
 0xC0u

	)

3017 
	#BCH_DEBUG0_SET_RSVD0_SHIFT
 6

	)

3018 
	#BCH_DEBUG0_SET_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG0_SET_RSVD0_SHIFT
))&
BCH_DEBUG0_SET_RSVD0_MASK
)

	)

3019 
	#BCH_DEBUG0_SET_BM_KES_TEST_BYPASS_MASK
 0x100u

	)

3020 
	#BCH_DEBUG0_SET_BM_KES_TEST_BYPASS_SHIFT
 8

	)

3021 
	#BCH_DEBUG0_SET_KES_DEBUG_STALL_MASK
 0x200u

	)

3022 
	#BCH_DEBUG0_SET_KES_DEBUG_STALL_SHIFT
 9

	)

3023 
	#BCH_DEBUG0_SET_KES_DEBUG_STEP_MASK
 0x400u

	)

3024 
	#BCH_DEBUG0_SET_KES_DEBUG_STEP_SHIFT
 10

	)

3025 
	#BCH_DEBUG0_SET_KES_STANDALONE_MASK
 0x800u

	)

3026 
	#BCH_DEBUG0_SET_KES_STANDALONE_SHIFT
 11

	)

3027 
	#BCH_DEBUG0_SET_KES_DEBUG_KICK_MASK
 0x1000u

	)

3028 
	#BCH_DEBUG0_SET_KES_DEBUG_KICK_SHIFT
 12

	)

3029 
	#BCH_DEBUG0_SET_KES_DEBUG_MODE4K_MASK
 0x2000u

	)

3030 
	#BCH_DEBUG0_SET_KES_DEBUG_MODE4K_SHIFT
 13

	)

3031 
	#BCH_DEBUG0_SET_KES_DEBUG_PAYLOAD_FLAG_MASK
 0x4000u

	)

3032 
	#BCH_DEBUG0_SET_KES_DEBUG_PAYLOAD_FLAG_SHIFT
 14

	)

3033 
	#BCH_DEBUG0_SET_KES_DEBUG_SHIFT_SYND_MASK
 0x8000u

	)

3034 
	#BCH_DEBUG0_SET_KES_DEBUG_SHIFT_SYND_SHIFT
 15

	)

3035 
	#BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL_MASK
 0x1FF0000u

	)

3036 
	#BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL_SHIFT
 16

	)

3037 
	#BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL_SHIFT
))&
BCH_DEBUG0_SET_KES_DEBUG_SYNDROME_SYMBOL_MASK
)

	)

3038 
	#BCH_DEBUG0_SET_RSVD1_MASK
 0xFE000000u

	)

3039 
	#BCH_DEBUG0_SET_RSVD1_SHIFT
 25

	)

3040 
	#BCH_DEBUG0_SET_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG0_SET_RSVD1_SHIFT
))&
BCH_DEBUG0_SET_RSVD1_MASK
)

	)

3042 
	#BCH_DEBUG0_CLR_DEBUG_REG_SELECT_MASK
 0x3Fu

	)

3043 
	#BCH_DEBUG0_CLR_DEBUG_REG_SELECT_SHIFT
 0

	)

3044 
	#BCH_DEBUG0_CLR_DEBUG_REG_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG0_CLR_DEBUG_REG_SELECT_SHIFT
))&
BCH_DEBUG0_CLR_DEBUG_REG_SELECT_MASK
)

	)

3045 
	#BCH_DEBUG0_CLR_RSVD0_MASK
 0xC0u

	)

3046 
	#BCH_DEBUG0_CLR_RSVD0_SHIFT
 6

	)

3047 
	#BCH_DEBUG0_CLR_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG0_CLR_RSVD0_SHIFT
))&
BCH_DEBUG0_CLR_RSVD0_MASK
)

	)

3048 
	#BCH_DEBUG0_CLR_BM_KES_TEST_BYPASS_MASK
 0x100u

	)

3049 
	#BCH_DEBUG0_CLR_BM_KES_TEST_BYPASS_SHIFT
 8

	)

3050 
	#BCH_DEBUG0_CLR_KES_DEBUG_STALL_MASK
 0x200u

	)

3051 
	#BCH_DEBUG0_CLR_KES_DEBUG_STALL_SHIFT
 9

	)

3052 
	#BCH_DEBUG0_CLR_KES_DEBUG_STEP_MASK
 0x400u

	)

3053 
	#BCH_DEBUG0_CLR_KES_DEBUG_STEP_SHIFT
 10

	)

3054 
	#BCH_DEBUG0_CLR_KES_STANDALONE_MASK
 0x800u

	)

3055 
	#BCH_DEBUG0_CLR_KES_STANDALONE_SHIFT
 11

	)

3056 
	#BCH_DEBUG0_CLR_KES_DEBUG_KICK_MASK
 0x1000u

	)

3057 
	#BCH_DEBUG0_CLR_KES_DEBUG_KICK_SHIFT
 12

	)

3058 
	#BCH_DEBUG0_CLR_KES_DEBUG_MODE4K_MASK
 0x2000u

	)

3059 
	#BCH_DEBUG0_CLR_KES_DEBUG_MODE4K_SHIFT
 13

	)

3060 
	#BCH_DEBUG0_CLR_KES_DEBUG_PAYLOAD_FLAG_MASK
 0x4000u

	)

3061 
	#BCH_DEBUG0_CLR_KES_DEBUG_PAYLOAD_FLAG_SHIFT
 14

	)

3062 
	#BCH_DEBUG0_CLR_KES_DEBUG_SHIFT_SYND_MASK
 0x8000u

	)

3063 
	#BCH_DEBUG0_CLR_KES_DEBUG_SHIFT_SYND_SHIFT
 15

	)

3064 
	#BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL_MASK
 0x1FF0000u

	)

3065 
	#BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL_SHIFT
 16

	)

3066 
	#BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL_SHIFT
))&
BCH_DEBUG0_CLR_KES_DEBUG_SYNDROME_SYMBOL_MASK
)

	)

3067 
	#BCH_DEBUG0_CLR_RSVD1_MASK
 0xFE000000u

	)

3068 
	#BCH_DEBUG0_CLR_RSVD1_SHIFT
 25

	)

3069 
	#BCH_DEBUG0_CLR_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG0_CLR_RSVD1_SHIFT
))&
BCH_DEBUG0_CLR_RSVD1_MASK
)

	)

3071 
	#BCH_DEBUG0_TOG_DEBUG_REG_SELECT_MASK
 0x3Fu

	)

3072 
	#BCH_DEBUG0_TOG_DEBUG_REG_SELECT_SHIFT
 0

	)

3073 
	#BCH_DEBUG0_TOG_DEBUG_REG_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG0_TOG_DEBUG_REG_SELECT_SHIFT
))&
BCH_DEBUG0_TOG_DEBUG_REG_SELECT_MASK
)

	)

3074 
	#BCH_DEBUG0_TOG_RSVD0_MASK
 0xC0u

	)

3075 
	#BCH_DEBUG0_TOG_RSVD0_SHIFT
 6

	)

3076 
	#BCH_DEBUG0_TOG_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG0_TOG_RSVD0_SHIFT
))&
BCH_DEBUG0_TOG_RSVD0_MASK
)

	)

3077 
	#BCH_DEBUG0_TOG_BM_KES_TEST_BYPASS_MASK
 0x100u

	)

3078 
	#BCH_DEBUG0_TOG_BM_KES_TEST_BYPASS_SHIFT
 8

	)

3079 
	#BCH_DEBUG0_TOG_KES_DEBUG_STALL_MASK
 0x200u

	)

3080 
	#BCH_DEBUG0_TOG_KES_DEBUG_STALL_SHIFT
 9

	)

3081 
	#BCH_DEBUG0_TOG_KES_DEBUG_STEP_MASK
 0x400u

	)

3082 
	#BCH_DEBUG0_TOG_KES_DEBUG_STEP_SHIFT
 10

	)

3083 
	#BCH_DEBUG0_TOG_KES_STANDALONE_MASK
 0x800u

	)

3084 
	#BCH_DEBUG0_TOG_KES_STANDALONE_SHIFT
 11

	)

3085 
	#BCH_DEBUG0_TOG_KES_DEBUG_KICK_MASK
 0x1000u

	)

3086 
	#BCH_DEBUG0_TOG_KES_DEBUG_KICK_SHIFT
 12

	)

3087 
	#BCH_DEBUG0_TOG_KES_DEBUG_MODE4K_MASK
 0x2000u

	)

3088 
	#BCH_DEBUG0_TOG_KES_DEBUG_MODE4K_SHIFT
 13

	)

3089 
	#BCH_DEBUG0_TOG_KES_DEBUG_PAYLOAD_FLAG_MASK
 0x4000u

	)

3090 
	#BCH_DEBUG0_TOG_KES_DEBUG_PAYLOAD_FLAG_SHIFT
 14

	)

3091 
	#BCH_DEBUG0_TOG_KES_DEBUG_SHIFT_SYND_MASK
 0x8000u

	)

3092 
	#BCH_DEBUG0_TOG_KES_DEBUG_SHIFT_SYND_SHIFT
 15

	)

3093 
	#BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL_MASK
 0x1FF0000u

	)

3094 
	#BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL_SHIFT
 16

	)

3095 
	#BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL_SHIFT
))&
BCH_DEBUG0_TOG_KES_DEBUG_SYNDROME_SYMBOL_MASK
)

	)

3096 
	#BCH_DEBUG0_TOG_RSVD1_MASK
 0xFE000000u

	)

3097 
	#BCH_DEBUG0_TOG_RSVD1_SHIFT
 25

	)

3098 
	#BCH_DEBUG0_TOG_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG0_TOG_RSVD1_SHIFT
))&
BCH_DEBUG0_TOG_RSVD1_MASK
)

	)

3100 
	#BCH_DBGKESREAD_VALUES_MASK
 0xFFFFFFFFu

	)

3101 
	#BCH_DBGKESREAD_VALUES_SHIFT
 0

	)

3102 
	#BCH_DBGKESREAD_VALUES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DBGKESREAD_VALUES_SHIFT
))&
BCH_DBGKESREAD_VALUES_MASK
)

	)

3104 
	#BCH_DBGKESREAD_SET_VALUES_MASK
 0xFFFFFFFFu

	)

3105 
	#BCH_DBGKESREAD_SET_VALUES_SHIFT
 0

	)

3106 
	#BCH_DBGKESREAD_SET_VALUES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DBGKESREAD_SET_VALUES_SHIFT
))&
BCH_DBGKESREAD_SET_VALUES_MASK
)

	)

3108 
	#BCH_DBGKESREAD_CLR_VALUES_MASK
 0xFFFFFFFFu

	)

3109 
	#BCH_DBGKESREAD_CLR_VALUES_SHIFT
 0

	)

3110 
	#BCH_DBGKESREAD_CLR_VALUES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DBGKESREAD_CLR_VALUES_SHIFT
))&
BCH_DBGKESREAD_CLR_VALUES_MASK
)

	)

3112 
	#BCH_DBGKESREAD_TOG_VALUES_MASK
 0xFFFFFFFFu

	)

3113 
	#BCH_DBGKESREAD_TOG_VALUES_SHIFT
 0

	)

3114 
	#BCH_DBGKESREAD_TOG_VALUES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DBGKESREAD_TOG_VALUES_SHIFT
))&
BCH_DBGKESREAD_TOG_VALUES_MASK
)

	)

3116 
	#BCH_DBGCSFEREAD_VALUES_MASK
 0xFFFFFFFFu

	)

3117 
	#BCH_DBGCSFEREAD_VALUES_SHIFT
 0

	)

3118 
	#BCH_DBGCSFEREAD_VALUES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DBGCSFEREAD_VALUES_SHIFT
))&
BCH_DBGCSFEREAD_VALUES_MASK
)

	)

3120 
	#BCH_DBGCSFEREAD_SET_VALUES_MASK
 0xFFFFFFFFu

	)

3121 
	#BCH_DBGCSFEREAD_SET_VALUES_SHIFT
 0

	)

3122 
	#BCH_DBGCSFEREAD_SET_VALUES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DBGCSFEREAD_SET_VALUES_SHIFT
))&
BCH_DBGCSFEREAD_SET_VALUES_MASK
)

	)

3124 
	#BCH_DBGCSFEREAD_CLR_VALUES_MASK
 0xFFFFFFFFu

	)

3125 
	#BCH_DBGCSFEREAD_CLR_VALUES_SHIFT
 0

	)

3126 
	#BCH_DBGCSFEREAD_CLR_VALUES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DBGCSFEREAD_CLR_VALUES_SHIFT
))&
BCH_DBGCSFEREAD_CLR_VALUES_MASK
)

	)

3128 
	#BCH_DBGCSFEREAD_TOG_VALUES_MASK
 0xFFFFFFFFu

	)

3129 
	#BCH_DBGCSFEREAD_TOG_VALUES_SHIFT
 0

	)

3130 
	#BCH_DBGCSFEREAD_TOG_VALUES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DBGCSFEREAD_TOG_VALUES_SHIFT
))&
BCH_DBGCSFEREAD_TOG_VALUES_MASK
)

	)

3132 
	#BCH_DBGSYNDGENREAD_VALUES_MASK
 0xFFFFFFFFu

	)

3133 
	#BCH_DBGSYNDGENREAD_VALUES_SHIFT
 0

	)

3134 
	#BCH_DBGSYNDGENREAD_VALUES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DBGSYNDGENREAD_VALUES_SHIFT
))&
BCH_DBGSYNDGENREAD_VALUES_MASK
)

	)

3136 
	#BCH_DBGSYNDGENREAD_SET_VALUES_MASK
 0xFFFFFFFFu

	)

3137 
	#BCH_DBGSYNDGENREAD_SET_VALUES_SHIFT
 0

	)

3138 
	#BCH_DBGSYNDGENREAD_SET_VALUES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DBGSYNDGENREAD_SET_VALUES_SHIFT
))&
BCH_DBGSYNDGENREAD_SET_VALUES_MASK
)

	)

3140 
	#BCH_DBGSYNDGENREAD_CLR_VALUES_MASK
 0xFFFFFFFFu

	)

3141 
	#BCH_DBGSYNDGENREAD_CLR_VALUES_SHIFT
 0

	)

3142 
	#BCH_DBGSYNDGENREAD_CLR_VALUES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DBGSYNDGENREAD_CLR_VALUES_SHIFT
))&
BCH_DBGSYNDGENREAD_CLR_VALUES_MASK
)

	)

3144 
	#BCH_DBGSYNDGENREAD_TOG_VALUES_MASK
 0xFFFFFFFFu

	)

3145 
	#BCH_DBGSYNDGENREAD_TOG_VALUES_SHIFT
 0

	)

3146 
	#BCH_DBGSYNDGENREAD_TOG_VALUES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DBGSYNDGENREAD_TOG_VALUES_SHIFT
))&
BCH_DBGSYNDGENREAD_TOG_VALUES_MASK
)

	)

3148 
	#BCH_DBGAHBMREAD_VALUES_MASK
 0xFFFFFFFFu

	)

3149 
	#BCH_DBGAHBMREAD_VALUES_SHIFT
 0

	)

3150 
	#BCH_DBGAHBMREAD_VALUES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DBGAHBMREAD_VALUES_SHIFT
))&
BCH_DBGAHBMREAD_VALUES_MASK
)

	)

3152 
	#BCH_DBGAHBMREAD_SET_VALUES_MASK
 0xFFFFFFFFu

	)

3153 
	#BCH_DBGAHBMREAD_SET_VALUES_SHIFT
 0

	)

3154 
	#BCH_DBGAHBMREAD_SET_VALUES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DBGAHBMREAD_SET_VALUES_SHIFT
))&
BCH_DBGAHBMREAD_SET_VALUES_MASK
)

	)

3156 
	#BCH_DBGAHBMREAD_CLR_VALUES_MASK
 0xFFFFFFFFu

	)

3157 
	#BCH_DBGAHBMREAD_CLR_VALUES_SHIFT
 0

	)

3158 
	#BCH_DBGAHBMREAD_CLR_VALUES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DBGAHBMREAD_CLR_VALUES_SHIFT
))&
BCH_DBGAHBMREAD_CLR_VALUES_MASK
)

	)

3160 
	#BCH_DBGAHBMREAD_TOG_VALUES_MASK
 0xFFFFFFFFu

	)

3161 
	#BCH_DBGAHBMREAD_TOG_VALUES_SHIFT
 0

	)

3162 
	#BCH_DBGAHBMREAD_TOG_VALUES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DBGAHBMREAD_TOG_VALUES_SHIFT
))&
BCH_DBGAHBMREAD_TOG_VALUES_MASK
)

	)

3164 
	#BCH_BLOCKNAME_NAME_MASK
 0xFFFFFFFFu

	)

3165 
	#BCH_BLOCKNAME_NAME_SHIFT
 0

	)

3166 
	#BCH_BLOCKNAME_NAME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_BLOCKNAME_NAME_SHIFT
))&
BCH_BLOCKNAME_NAME_MASK
)

	)

3168 
	#BCH_BLOCKNAME_SET_NAME_MASK
 0xFFFFFFFFu

	)

3169 
	#BCH_BLOCKNAME_SET_NAME_SHIFT
 0

	)

3170 
	#BCH_BLOCKNAME_SET_NAME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_BLOCKNAME_SET_NAME_SHIFT
))&
BCH_BLOCKNAME_SET_NAME_MASK
)

	)

3172 
	#BCH_BLOCKNAME_CLR_NAME_MASK
 0xFFFFFFFFu

	)

3173 
	#BCH_BLOCKNAME_CLR_NAME_SHIFT
 0

	)

3174 
	#BCH_BLOCKNAME_CLR_NAME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_BLOCKNAME_CLR_NAME_SHIFT
))&
BCH_BLOCKNAME_CLR_NAME_MASK
)

	)

3176 
	#BCH_BLOCKNAME_TOG_NAME_MASK
 0xFFFFFFFFu

	)

3177 
	#BCH_BLOCKNAME_TOG_NAME_SHIFT
 0

	)

3178 
	#BCH_BLOCKNAME_TOG_NAME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_BLOCKNAME_TOG_NAME_SHIFT
))&
BCH_BLOCKNAME_TOG_NAME_MASK
)

	)

3180 
	#BCH_VERSION_STEP_MASK
 0xFFFFu

	)

3181 
	#BCH_VERSION_STEP_SHIFT
 0

	)

3182 
	#BCH_VERSION_STEP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_VERSION_STEP_SHIFT
))&
BCH_VERSION_STEP_MASK
)

	)

3183 
	#BCH_VERSION_MINOR_MASK
 0xFF0000u

	)

3184 
	#BCH_VERSION_MINOR_SHIFT
 16

	)

3185 
	#BCH_VERSION_MINOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_VERSION_MINOR_SHIFT
))&
BCH_VERSION_MINOR_MASK
)

	)

3186 
	#BCH_VERSION_MAJOR_MASK
 0xFF000000u

	)

3187 
	#BCH_VERSION_MAJOR_SHIFT
 24

	)

3188 
	#BCH_VERSION_MAJOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_VERSION_MAJOR_SHIFT
))&
BCH_VERSION_MAJOR_MASK
)

	)

3190 
	#BCH_VERSION_SET_STEP_MASK
 0xFFFFu

	)

3191 
	#BCH_VERSION_SET_STEP_SHIFT
 0

	)

3192 
	#BCH_VERSION_SET_STEP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_VERSION_SET_STEP_SHIFT
))&
BCH_VERSION_SET_STEP_MASK
)

	)

3193 
	#BCH_VERSION_SET_MINOR_MASK
 0xFF0000u

	)

3194 
	#BCH_VERSION_SET_MINOR_SHIFT
 16

	)

3195 
	#BCH_VERSION_SET_MINOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_VERSION_SET_MINOR_SHIFT
))&
BCH_VERSION_SET_MINOR_MASK
)

	)

3196 
	#BCH_VERSION_SET_MAJOR_MASK
 0xFF000000u

	)

3197 
	#BCH_VERSION_SET_MAJOR_SHIFT
 24

	)

3198 
	#BCH_VERSION_SET_MAJOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_VERSION_SET_MAJOR_SHIFT
))&
BCH_VERSION_SET_MAJOR_MASK
)

	)

3200 
	#BCH_VERSION_CLR_STEP_MASK
 0xFFFFu

	)

3201 
	#BCH_VERSION_CLR_STEP_SHIFT
 0

	)

3202 
	#BCH_VERSION_CLR_STEP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_VERSION_CLR_STEP_SHIFT
))&
BCH_VERSION_CLR_STEP_MASK
)

	)

3203 
	#BCH_VERSION_CLR_MINOR_MASK
 0xFF0000u

	)

3204 
	#BCH_VERSION_CLR_MINOR_SHIFT
 16

	)

3205 
	#BCH_VERSION_CLR_MINOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_VERSION_CLR_MINOR_SHIFT
))&
BCH_VERSION_CLR_MINOR_MASK
)

	)

3206 
	#BCH_VERSION_CLR_MAJOR_MASK
 0xFF000000u

	)

3207 
	#BCH_VERSION_CLR_MAJOR_SHIFT
 24

	)

3208 
	#BCH_VERSION_CLR_MAJOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_VERSION_CLR_MAJOR_SHIFT
))&
BCH_VERSION_CLR_MAJOR_MASK
)

	)

3210 
	#BCH_VERSION_TOG_STEP_MASK
 0xFFFFu

	)

3211 
	#BCH_VERSION_TOG_STEP_SHIFT
 0

	)

3212 
	#BCH_VERSION_TOG_STEP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_VERSION_TOG_STEP_SHIFT
))&
BCH_VERSION_TOG_STEP_MASK
)

	)

3213 
	#BCH_VERSION_TOG_MINOR_MASK
 0xFF0000u

	)

3214 
	#BCH_VERSION_TOG_MINOR_SHIFT
 16

	)

3215 
	#BCH_VERSION_TOG_MINOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_VERSION_TOG_MINOR_SHIFT
))&
BCH_VERSION_TOG_MINOR_MASK
)

	)

3216 
	#BCH_VERSION_TOG_MAJOR_MASK
 0xFF000000u

	)

3217 
	#BCH_VERSION_TOG_MAJOR_SHIFT
 24

	)

3218 
	#BCH_VERSION_TOG_MAJOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_VERSION_TOG_MAJOR_SHIFT
))&
BCH_VERSION_TOG_MAJOR_MASK
)

	)

3220 
	#BCH_DEBUG1_ERASED_ZERO_COUNT_MASK
 0x1FFu

	)

3221 
	#BCH_DEBUG1_ERASED_ZERO_COUNT_SHIFT
 0

	)

3222 
	#BCH_DEBUG1_ERASED_ZERO_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG1_ERASED_ZERO_COUNT_SHIFT
))&
BCH_DEBUG1_ERASED_ZERO_COUNT_MASK
)

	)

3223 
	#BCH_DEBUG1_RSVD_MASK
 0x7FFFFE00u

	)

3224 
	#BCH_DEBUG1_RSVD_SHIFT
 9

	)

3225 
	#BCH_DEBUG1_RSVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG1_RSVD_SHIFT
))&
BCH_DEBUG1_RSVD_MASK
)

	)

3226 
	#BCH_DEBUG1_DEBUG1_PREERASECHK_MASK
 0x80000000u

	)

3227 
	#BCH_DEBUG1_DEBUG1_PREERASECHK_SHIFT
 31

	)

3229 
	#BCH_DEBUG1_SET_ERASED_ZERO_COUNT_MASK
 0x1FFu

	)

3230 
	#BCH_DEBUG1_SET_ERASED_ZERO_COUNT_SHIFT
 0

	)

3231 
	#BCH_DEBUG1_SET_ERASED_ZERO_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG1_SET_ERASED_ZERO_COUNT_SHIFT
))&
BCH_DEBUG1_SET_ERASED_ZERO_COUNT_MASK
)

	)

3232 
	#BCH_DEBUG1_SET_RSVD_MASK
 0x7FFFFE00u

	)

3233 
	#BCH_DEBUG1_SET_RSVD_SHIFT
 9

	)

3234 
	#BCH_DEBUG1_SET_RSVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG1_SET_RSVD_SHIFT
))&
BCH_DEBUG1_SET_RSVD_MASK
)

	)

3235 
	#BCH_DEBUG1_SET_DEBUG1_PREERASECHK_MASK
 0x80000000u

	)

3236 
	#BCH_DEBUG1_SET_DEBUG1_PREERASECHK_SHIFT
 31

	)

3238 
	#BCH_DEBUG1_CLR_ERASED_ZERO_COUNT_MASK
 0x1FFu

	)

3239 
	#BCH_DEBUG1_CLR_ERASED_ZERO_COUNT_SHIFT
 0

	)

3240 
	#BCH_DEBUG1_CLR_ERASED_ZERO_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG1_CLR_ERASED_ZERO_COUNT_SHIFT
))&
BCH_DEBUG1_CLR_ERASED_ZERO_COUNT_MASK
)

	)

3241 
	#BCH_DEBUG1_CLR_RSVD_MASK
 0x7FFFFE00u

	)

3242 
	#BCH_DEBUG1_CLR_RSVD_SHIFT
 9

	)

3243 
	#BCH_DEBUG1_CLR_RSVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG1_CLR_RSVD_SHIFT
))&
BCH_DEBUG1_CLR_RSVD_MASK
)

	)

3244 
	#BCH_DEBUG1_CLR_DEBUG1_PREERASECHK_MASK
 0x80000000u

	)

3245 
	#BCH_DEBUG1_CLR_DEBUG1_PREERASECHK_SHIFT
 31

	)

3247 
	#BCH_DEBUG1_TOG_ERASED_ZERO_COUNT_MASK
 0x1FFu

	)

3248 
	#BCH_DEBUG1_TOG_ERASED_ZERO_COUNT_SHIFT
 0

	)

3249 
	#BCH_DEBUG1_TOG_ERASED_ZERO_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG1_TOG_ERASED_ZERO_COUNT_SHIFT
))&
BCH_DEBUG1_TOG_ERASED_ZERO_COUNT_MASK
)

	)

3250 
	#BCH_DEBUG1_TOG_RSVD_MASK
 0x7FFFFE00u

	)

3251 
	#BCH_DEBUG1_TOG_RSVD_SHIFT
 9

	)

3252 
	#BCH_DEBUG1_TOG_RSVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
BCH_DEBUG1_TOG_RSVD_SHIFT
))&
BCH_DEBUG1_TOG_RSVD_MASK
)

	)

3253 
	#BCH_DEBUG1_TOG_DEBUG1_PREERASECHK_MASK
 0x80000000u

	)

3254 
	#BCH_DEBUG1_TOG_DEBUG1_PREERASECHK_SHIFT
 31

	)

3262 
	#BCH_BASE
 (0x41808000u)

	)

3264 
	#BCH
 ((
BCH_Ty≥
 *)
BCH_BASE
)

	)

3265 
	#BCH_BASE_PTR
 (
BCH
)

	)

3267 
	#BCH_BASE_ADDRS
 { 
BCH_BASE
 }

	)

3269 
	#BCH_BASE_PTRS
 { 
BCH
 }

	)

3271 
	#BCH_IRQS
 { 
BCH_IRQn
 }

	)

3284 
	#BCH_CTRL
 
	`BCH_CTRL_REG
(
BCH_BASE_PTR
)

	)

3285 
	#BCH_CTRL_SET
 
	`BCH_CTRL_SET_REG
(
BCH_BASE_PTR
)

	)

3286 
	#BCH_CTRL_CLR
 
	`BCH_CTRL_CLR_REG
(
BCH_BASE_PTR
)

	)

3287 
	#BCH_CTRL_TOG
 
	`BCH_CTRL_TOG_REG
(
BCH_BASE_PTR
)

	)

3288 
	#BCH_STATUS0
 
	`BCH_STATUS0_REG
(
BCH_BASE_PTR
)

	)

3289 
	#BCH_STATUS0_SET
 
	`BCH_STATUS0_SET_REG
(
BCH_BASE_PTR
)

	)

3290 
	#BCH_STATUS0_CLR
 
	`BCH_STATUS0_CLR_REG
(
BCH_BASE_PTR
)

	)

3291 
	#BCH_STATUS0_TOG
 
	`BCH_STATUS0_TOG_REG
(
BCH_BASE_PTR
)

	)

3292 
	#BCH_MODE
 
	`BCH_MODE_REG
(
BCH_BASE_PTR
)

	)

3293 
	#BCH_MODE_SET
 
	`BCH_MODE_SET_REG
(
BCH_BASE_PTR
)

	)

3294 
	#BCH_MODE_CLR
 
	`BCH_MODE_CLR_REG
(
BCH_BASE_PTR
)

	)

3295 
	#BCH_MODE_TOG
 
	`BCH_MODE_TOG_REG
(
BCH_BASE_PTR
)

	)

3296 
	#BCH_ENCODEPTR
 
	`BCH_ENCODEPTR_REG
(
BCH_BASE_PTR
)

	)

3297 
	#BCH_ENCODEPTR_SET
 
	`BCH_ENCODEPTR_SET_REG
(
BCH_BASE_PTR
)

	)

3298 
	#BCH_ENCODEPTR_CLR
 
	`BCH_ENCODEPTR_CLR_REG
(
BCH_BASE_PTR
)

	)

3299 
	#BCH_ENCODEPTR_TOG
 
	`BCH_ENCODEPTR_TOG_REG
(
BCH_BASE_PTR
)

	)

3300 
	#BCH_DATAPTR
 
	`BCH_DATAPTR_REG
(
BCH_BASE_PTR
)

	)

3301 
	#BCH_DATAPTR_SET
 
	`BCH_DATAPTR_SET_REG
(
BCH_BASE_PTR
)

	)

3302 
	#BCH_DATAPTR_CLR
 
	`BCH_DATAPTR_CLR_REG
(
BCH_BASE_PTR
)

	)

3303 
	#BCH_DATAPTR_TOG
 
	`BCH_DATAPTR_TOG_REG
(
BCH_BASE_PTR
)

	)

3304 
	#BCH_METAPTR
 
	`BCH_METAPTR_REG
(
BCH_BASE_PTR
)

	)

3305 
	#BCH_METAPTR_SET
 
	`BCH_METAPTR_SET_REG
(
BCH_BASE_PTR
)

	)

3306 
	#BCH_METAPTR_CLR
 
	`BCH_METAPTR_CLR_REG
(
BCH_BASE_PTR
)

	)

3307 
	#BCH_METAPTR_TOG
 
	`BCH_METAPTR_TOG_REG
(
BCH_BASE_PTR
)

	)

3308 
	#BCH_LAYOUTSELECT
 
	`BCH_LAYOUTSELECT_REG
(
BCH_BASE_PTR
)

	)

3309 
	#BCH_LAYOUTSELECT_SET
 
	`BCH_LAYOUTSELECT_SET_REG
(
BCH_BASE_PTR
)

	)

3310 
	#BCH_LAYOUTSELECT_CLR
 
	`BCH_LAYOUTSELECT_CLR_REG
(
BCH_BASE_PTR
)

	)

3311 
	#BCH_LAYOUTSELECT_TOG
 
	`BCH_LAYOUTSELECT_TOG_REG
(
BCH_BASE_PTR
)

	)

3312 
	#BCH_FLASH0LAYOUT0
 
	`BCH_FLASH0LAYOUT0_REG
(
BCH_BASE_PTR
)

	)

3313 
	#BCH_FLASH0LAYOUT0_SET
 
	`BCH_FLASH0LAYOUT0_SET_REG
(
BCH_BASE_PTR
)

	)

3314 
	#BCH_FLASH0LAYOUT0_CLR
 
	`BCH_FLASH0LAYOUT0_CLR_REG
(
BCH_BASE_PTR
)

	)

3315 
	#BCH_FLASH0LAYOUT0_TOG
 
	`BCH_FLASH0LAYOUT0_TOG_REG
(
BCH_BASE_PTR
)

	)

3316 
	#BCH_FLASH0LAYOUT1
 
	`BCH_FLASH0LAYOUT1_REG
(
BCH_BASE_PTR
)

	)

3317 
	#BCH_FLASH0LAYOUT1_SET
 
	`BCH_FLASH0LAYOUT1_SET_REG
(
BCH_BASE_PTR
)

	)

3318 
	#BCH_FLASH0LAYOUT1_CLR
 
	`BCH_FLASH0LAYOUT1_CLR_REG
(
BCH_BASE_PTR
)

	)

3319 
	#BCH_FLASH0LAYOUT1_TOG
 
	`BCH_FLASH0LAYOUT1_TOG_REG
(
BCH_BASE_PTR
)

	)

3320 
	#BCH_FLASH1LAYOUT0
 
	`BCH_FLASH1LAYOUT0_REG
(
BCH_BASE_PTR
)

	)

3321 
	#BCH_FLASH1LAYOUT0_SET
 
	`BCH_FLASH1LAYOUT0_SET_REG
(
BCH_BASE_PTR
)

	)

3322 
	#BCH_FLASH1LAYOUT0_CLR
 
	`BCH_FLASH1LAYOUT0_CLR_REG
(
BCH_BASE_PTR
)

	)

3323 
	#BCH_FLASH1LAYOUT0_TOG
 
	`BCH_FLASH1LAYOUT0_TOG_REG
(
BCH_BASE_PTR
)

	)

3324 
	#BCH_FLASH1LAYOUT1
 
	`BCH_FLASH1LAYOUT1_REG
(
BCH_BASE_PTR
)

	)

3325 
	#BCH_FLASH1LAYOUT1_SET
 
	`BCH_FLASH1LAYOUT1_SET_REG
(
BCH_BASE_PTR
)

	)

3326 
	#BCH_FLASH1LAYOUT1_CLR
 
	`BCH_FLASH1LAYOUT1_CLR_REG
(
BCH_BASE_PTR
)

	)

3327 
	#BCH_FLASH1LAYOUT1_TOG
 
	`BCH_FLASH1LAYOUT1_TOG_REG
(
BCH_BASE_PTR
)

	)

3328 
	#BCH_FLASH2LAYOUT0
 
	`BCH_FLASH2LAYOUT0_REG
(
BCH_BASE_PTR
)

	)

3329 
	#BCH_FLASH2LAYOUT0_SET
 
	`BCH_FLASH2LAYOUT0_SET_REG
(
BCH_BASE_PTR
)

	)

3330 
	#BCH_FLASH2LAYOUT0_CLR
 
	`BCH_FLASH2LAYOUT0_CLR_REG
(
BCH_BASE_PTR
)

	)

3331 
	#BCH_FLASH2LAYOUT0_TOG
 
	`BCH_FLASH2LAYOUT0_TOG_REG
(
BCH_BASE_PTR
)

	)

3332 
	#BCH_FLASH2LAYOUT1
 
	`BCH_FLASH2LAYOUT1_REG
(
BCH_BASE_PTR
)

	)

3333 
	#BCH_FLASH2LAYOUT1_SET
 
	`BCH_FLASH2LAYOUT1_SET_REG
(
BCH_BASE_PTR
)

	)

3334 
	#BCH_FLASH2LAYOUT1_CLR
 
	`BCH_FLASH2LAYOUT1_CLR_REG
(
BCH_BASE_PTR
)

	)

3335 
	#BCH_FLASH2LAYOUT1_TOG
 
	`BCH_FLASH2LAYOUT1_TOG_REG
(
BCH_BASE_PTR
)

	)

3336 
	#BCH_FLASH3LAYOUT0
 
	`BCH_FLASH3LAYOUT0_REG
(
BCH_BASE_PTR
)

	)

3337 
	#BCH_FLASH3LAYOUT0_SET
 
	`BCH_FLASH3LAYOUT0_SET_REG
(
BCH_BASE_PTR
)

	)

3338 
	#BCH_FLASH3LAYOUT0_CLR
 
	`BCH_FLASH3LAYOUT0_CLR_REG
(
BCH_BASE_PTR
)

	)

3339 
	#BCH_FLASH3LAYOUT0_TOG
 
	`BCH_FLASH3LAYOUT0_TOG_REG
(
BCH_BASE_PTR
)

	)

3340 
	#BCH_FLASH3LAYOUT1
 
	`BCH_FLASH3LAYOUT1_REG
(
BCH_BASE_PTR
)

	)

3341 
	#BCH_FLASH3LAYOUT1_SET
 
	`BCH_FLASH3LAYOUT1_SET_REG
(
BCH_BASE_PTR
)

	)

3342 
	#BCH_FLASH3LAYOUT1_CLR
 
	`BCH_FLASH3LAYOUT1_CLR_REG
(
BCH_BASE_PTR
)

	)

3343 
	#BCH_FLASH3LAYOUT1_TOG
 
	`BCH_FLASH3LAYOUT1_TOG_REG
(
BCH_BASE_PTR
)

	)

3344 
	#BCH_DEBUG0
 
	`BCH_DEBUG0_REG
(
BCH_BASE_PTR
)

	)

3345 
	#BCH_DEBUG0_SET
 
	`BCH_DEBUG0_SET_REG
(
BCH_BASE_PTR
)

	)

3346 
	#BCH_DEBUG0_CLR
 
	`BCH_DEBUG0_CLR_REG
(
BCH_BASE_PTR
)

	)

3347 
	#BCH_DEBUG0_TOG
 
	`BCH_DEBUG0_TOG_REG
(
BCH_BASE_PTR
)

	)

3348 
	#BCH_DBGKESREAD
 
	`BCH_DBGKESREAD_REG
(
BCH_BASE_PTR
)

	)

3349 
	#BCH_DBGKESREAD_SET
 
	`BCH_DBGKESREAD_SET_REG
(
BCH_BASE_PTR
)

	)

3350 
	#BCH_DBGKESREAD_CLR
 
	`BCH_DBGKESREAD_CLR_REG
(
BCH_BASE_PTR
)

	)

3351 
	#BCH_DBGKESREAD_TOG
 
	`BCH_DBGKESREAD_TOG_REG
(
BCH_BASE_PTR
)

	)

3352 
	#BCH_DBGCSFEREAD
 
	`BCH_DBGCSFEREAD_REG
(
BCH_BASE_PTR
)

	)

3353 
	#BCH_DBGCSFEREAD_SET
 
	`BCH_DBGCSFEREAD_SET_REG
(
BCH_BASE_PTR
)

	)

3354 
	#BCH_DBGCSFEREAD_CLR
 
	`BCH_DBGCSFEREAD_CLR_REG
(
BCH_BASE_PTR
)

	)

3355 
	#BCH_DBGCSFEREAD_TOG
 
	`BCH_DBGCSFEREAD_TOG_REG
(
BCH_BASE_PTR
)

	)

3356 
	#BCH_DBGSYNDGENREAD
 
	`BCH_DBGSYNDGENREAD_REG
(
BCH_BASE_PTR
)

	)

3357 
	#BCH_DBGSYNDGENREAD_SET
 
	`BCH_DBGSYNDGENREAD_SET_REG
(
BCH_BASE_PTR
)

	)

3358 
	#BCH_DBGSYNDGENREAD_CLR
 
	`BCH_DBGSYNDGENREAD_CLR_REG
(
BCH_BASE_PTR
)

	)

3359 
	#BCH_DBGSYNDGENREAD_TOG
 
	`BCH_DBGSYNDGENREAD_TOG_REG
(
BCH_BASE_PTR
)

	)

3360 
	#BCH_DBGAHBMREAD
 
	`BCH_DBGAHBMREAD_REG
(
BCH_BASE_PTR
)

	)

3361 
	#BCH_DBGAHBMREAD_SET
 
	`BCH_DBGAHBMREAD_SET_REG
(
BCH_BASE_PTR
)

	)

3362 
	#BCH_DBGAHBMREAD_CLR
 
	`BCH_DBGAHBMREAD_CLR_REG
(
BCH_BASE_PTR
)

	)

3363 
	#BCH_DBGAHBMREAD_TOG
 
	`BCH_DBGAHBMREAD_TOG_REG
(
BCH_BASE_PTR
)

	)

3364 
	#BCH_BLOCKNAME
 
	`BCH_BLOCKNAME_REG
(
BCH_BASE_PTR
)

	)

3365 
	#BCH_BLOCKNAME_SET
 
	`BCH_BLOCKNAME_SET_REG
(
BCH_BASE_PTR
)

	)

3366 
	#BCH_BLOCKNAME_CLR
 
	`BCH_BLOCKNAME_CLR_REG
(
BCH_BASE_PTR
)

	)

3367 
	#BCH_BLOCKNAME_TOG
 
	`BCH_BLOCKNAME_TOG_REG
(
BCH_BASE_PTR
)

	)

3368 
	#BCH_VERSION
 
	`BCH_VERSION_REG
(
BCH_BASE_PTR
)

	)

3369 
	#BCH_VERSION_SET
 
	`BCH_VERSION_SET_REG
(
BCH_BASE_PTR
)

	)

3370 
	#BCH_VERSION_CLR
 
	`BCH_VERSION_CLR_REG
(
BCH_BASE_PTR
)

	)

3371 
	#BCH_VERSION_TOG
 
	`BCH_VERSION_TOG_REG
(
BCH_BASE_PTR
)

	)

3372 
	#BCH_DEBUG1
 
	`BCH_DEBUG1_REG
(
BCH_BASE_PTR
)

	)

3373 
	#BCH_DEBUG1_SET
 
	`BCH_DEBUG1_SET_REG
(
BCH_BASE_PTR
)

	)

3374 
	#BCH_DEBUG1_CLR
 
	`BCH_DEBUG1_CLR_REG
(
BCH_BASE_PTR
)

	)

3375 
	#BCH_DEBUG1_TOG
 
	`BCH_DEBUG1_TOG_REG
(
BCH_BASE_PTR
)

	)

3396 
__IO
 
uöt32_t
 
	mMCR
;

3397 
__IO
 
uöt32_t
 
	mCTRL1
;

3398 
__IO
 
uöt32_t
 
	mTIMER
;

3399 
uöt8_t
 
	mRESERVED_0
[4];

3400 
__IO
 
uöt32_t
 
	mRXMGMASK
;

3401 
__IO
 
uöt32_t
 
	mRX14MASK
;

3402 
__IO
 
uöt32_t
 
	mRX15MASK
;

3403 
__IO
 
uöt32_t
 
	mECR
;

3404 
__IO
 
uöt32_t
 
	mESR1
;

3405 
__IO
 
uöt32_t
 
	mIMASK2
;

3406 
__IO
 
uöt32_t
 
	mIMASK1
;

3407 
__IO
 
uöt32_t
 
	mIFLAG2
;

3408 
__IO
 
uöt32_t
 
	mIFLAG1
;

3409 
__IO
 
uöt32_t
 
	mCTRL2
;

3410 
__I
 
uöt32_t
 
	mESR2
;

3411 
uöt8_t
 
	mRESERVED_1
[8];

3412 
__I
 
uöt32_t
 
	mCRCR
;

3413 
__IO
 
uöt32_t
 
	mRXFGMASK
;

3414 
__I
 
uöt32_t
 
	mRXFIR
;

3415 
uöt8_t
 
	mRESERVED_2
[48];

3417 
__IO
 
uöt32_t
 
	mCS
;

3418 
__IO
 
uöt32_t
 
	mID
;

3419 
__IO
 
uöt32_t
 
	mWORD0
;

3420 
__IO
 
uöt32_t
 
	mWORD1
;

3421 } 
	mMB
[64];

3422 
uöt8_t
 
	mRESERVED_3
[1024];

3423 
__IO
 
uöt32_t
 
	mRXIMR
[64];

3424 
uöt8_t
 
	mRESERVED_4
[96];

3425 
__IO
 
uöt32_t
 
	mGFWR
;

3426 } 
	tCAN_Ty≥
, *
	tCAN_MemM≠På
;

3438 
	#CAN_MCR_REG
(
ba£
Ë((ba£)->
MCR
)

	)

3439 
	#CAN_CTRL1_REG
(
ba£
Ë((ba£)->
CTRL1
)

	)

3440 
	#CAN_TIMER_REG
(
ba£
Ë((ba£)->
TIMER
)

	)

3441 
	#CAN_RXMGMASK_REG
(
ba£
Ë((ba£)->
RXMGMASK
)

	)

3442 
	#CAN_RX14MASK_REG
(
ba£
Ë((ba£)->
RX14MASK
)

	)

3443 
	#CAN_RX15MASK_REG
(
ba£
Ë((ba£)->
RX15MASK
)

	)

3444 
	#CAN_ECR_REG
(
ba£
Ë((ba£)->
ECR
)

	)

3445 
	#CAN_ESR1_REG
(
ba£
Ë((ba£)->
ESR1
)

	)

3446 
	#CAN_IMASK2_REG
(
ba£
Ë((ba£)->
IMASK2
)

	)

3447 
	#CAN_IMASK1_REG
(
ba£
Ë((ba£)->
IMASK1
)

	)

3448 
	#CAN_IFLAG2_REG
(
ba£
Ë((ba£)->
IFLAG2
)

	)

3449 
	#CAN_IFLAG1_REG
(
ba£
Ë((ba£)->
IFLAG1
)

	)

3450 
	#CAN_CTRL2_REG
(
ba£
Ë((ba£)->
CTRL2
)

	)

3451 
	#CAN_ESR2_REG
(
ba£
Ë((ba£)->
ESR2
)

	)

3452 
	#CAN_CRCR_REG
(
ba£
Ë((ba£)->
CRCR
)

	)

3453 
	#CAN_RXFGMASK_REG
(
ba£
Ë((ba£)->
RXFGMASK
)

	)

3454 
	#CAN_RXFIR_REG
(
ba£
Ë((ba£)->
RXFIR
)

	)

3455 
	#CAN_CS_REG
(
ba£
,
ödex
Ë((ba£)->
MB
[ödex].
CS
)

	)

3456 
	#CAN_CS_COUNT
 64

	)

3457 
	#CAN_ID_REG
(
ba£
,
ödex
Ë((ba£)->
MB
[ödex].
ID
)

	)

3458 
	#CAN_ID_COUNT
 64

	)

3459 
	#CAN_WORD0_REG
(
ba£
,
ödex
Ë((ba£)->
MB
[ödex].
WORD0
)

	)

3460 
	#CAN_WORD0_COUNT
 64

	)

3461 
	#CAN_WORD1_REG
(
ba£
,
ödex
Ë((ba£)->
MB
[ödex].
WORD1
)

	)

3462 
	#CAN_WORD1_COUNT
 64

	)

3463 
	#CAN_RXIMR_REG
(
ba£
,
ödex
Ë((ba£)->
RXIMR
[ödex])

	)

3464 
	#CAN_RXIMR_COUNT
 64

	)

3465 
	#CAN_GFWR_REG
(
ba£
Ë((ba£)->
GFWR
)

	)

3481 
	#CAN_MCR_MAXMB_MASK
 0x7Fu

	)

3482 
	#CAN_MCR_MAXMB_SHIFT
 0

	)

3483 
	#CAN_MCR_MAXMB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_MCR_MAXMB_SHIFT
))&
CAN_MCR_MAXMB_MASK
)

	)

3484 
	#CAN_MCR_IDAM_MASK
 0x300u

	)

3485 
	#CAN_MCR_IDAM_SHIFT
 8

	)

3486 
	#CAN_MCR_IDAM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_MCR_IDAM_SHIFT
))&
CAN_MCR_IDAM_MASK
)

	)

3487 
	#CAN_MCR_AEN_MASK
 0x1000u

	)

3488 
	#CAN_MCR_AEN_SHIFT
 12

	)

3489 
	#CAN_MCR_LPRIO_EN_MASK
 0x2000u

	)

3490 
	#CAN_MCR_LPRIO_EN_SHIFT
 13

	)

3491 
	#CAN_MCR_IRMQ_MASK
 0x10000u

	)

3492 
	#CAN_MCR_IRMQ_SHIFT
 16

	)

3493 
	#CAN_MCR_SRX_DIS_MASK
 0x20000u

	)

3494 
	#CAN_MCR_SRX_DIS_SHIFT
 17

	)

3495 
	#CAN_MCR_WAK_SRC_MASK
 0x80000u

	)

3496 
	#CAN_MCR_WAK_SRC_SHIFT
 19

	)

3497 
	#CAN_MCR_LPM_ACK_MASK
 0x100000u

	)

3498 
	#CAN_MCR_LPM_ACK_SHIFT
 20

	)

3499 
	#CAN_MCR_WRN_EN_MASK
 0x200000u

	)

3500 
	#CAN_MCR_WRN_EN_SHIFT
 21

	)

3501 
	#CAN_MCR_SLF_WAK_MASK
 0x400000u

	)

3502 
	#CAN_MCR_SLF_WAK_SHIFT
 22

	)

3503 
	#CAN_MCR_SUPV_MASK
 0x800000u

	)

3504 
	#CAN_MCR_SUPV_SHIFT
 23

	)

3505 
	#CAN_MCR_FRZ_ACK_MASK
 0x1000000u

	)

3506 
	#CAN_MCR_FRZ_ACK_SHIFT
 24

	)

3507 
	#CAN_MCR_SOFT_RST_MASK
 0x2000000u

	)

3508 
	#CAN_MCR_SOFT_RST_SHIFT
 25

	)

3509 
	#CAN_MCR_WAK_MSK_MASK
 0x4000000u

	)

3510 
	#CAN_MCR_WAK_MSK_SHIFT
 26

	)

3511 
	#CAN_MCR_NOT_RDY_MASK
 0x8000000u

	)

3512 
	#CAN_MCR_NOT_RDY_SHIFT
 27

	)

3513 
	#CAN_MCR_HALT_MASK
 0x10000000u

	)

3514 
	#CAN_MCR_HALT_SHIFT
 28

	)

3515 
	#CAN_MCR_RFEN_MASK
 0x20000000u

	)

3516 
	#CAN_MCR_RFEN_SHIFT
 29

	)

3517 
	#CAN_MCR_FRZ_MASK
 0x40000000u

	)

3518 
	#CAN_MCR_FRZ_SHIFT
 30

	)

3519 
	#CAN_MCR_MDIS_MASK
 0x80000000u

	)

3520 
	#CAN_MCR_MDIS_SHIFT
 31

	)

3522 
	#CAN_CTRL1_PROP_SEG_MASK
 0x7u

	)

3523 
	#CAN_CTRL1_PROP_SEG_SHIFT
 0

	)

3524 
	#CAN_CTRL1_PROP_SEG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_CTRL1_PROP_SEG_SHIFT
))&
CAN_CTRL1_PROP_SEG_MASK
)

	)

3525 
	#CAN_CTRL1_LOM_MASK
 0x8u

	)

3526 
	#CAN_CTRL1_LOM_SHIFT
 3

	)

3527 
	#CAN_CTRL1_LBUF_MASK
 0x10u

	)

3528 
	#CAN_CTRL1_LBUF_SHIFT
 4

	)

3529 
	#CAN_CTRL1_TSYN_MASK
 0x20u

	)

3530 
	#CAN_CTRL1_TSYN_SHIFT
 5

	)

3531 
	#CAN_CTRL1_BOFF_REC_MASK
 0x40u

	)

3532 
	#CAN_CTRL1_BOFF_REC_SHIFT
 6

	)

3533 
	#CAN_CTRL1_SMP_MASK
 0x80u

	)

3534 
	#CAN_CTRL1_SMP_SHIFT
 7

	)

3535 
	#CAN_CTRL1_RWRN_MSK_MASK
 0x400u

	)

3536 
	#CAN_CTRL1_RWRN_MSK_SHIFT
 10

	)

3537 
	#CAN_CTRL1_TWRN_MSK_MASK
 0x800u

	)

3538 
	#CAN_CTRL1_TWRN_MSK_SHIFT
 11

	)

3539 
	#CAN_CTRL1_LPB_MASK
 0x1000u

	)

3540 
	#CAN_CTRL1_LPB_SHIFT
 12

	)

3541 
	#CAN_CTRL1_ERR_MSK_MASK
 0x4000u

	)

3542 
	#CAN_CTRL1_ERR_MSK_SHIFT
 14

	)

3543 
	#CAN_CTRL1_BOFF_MSK_MASK
 0x8000u

	)

3544 
	#CAN_CTRL1_BOFF_MSK_SHIFT
 15

	)

3545 
	#CAN_CTRL1_PSEG2_MASK
 0x70000u

	)

3546 
	#CAN_CTRL1_PSEG2_SHIFT
 16

	)

3547 
	#CAN_CTRL1_PSEG2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_CTRL1_PSEG2_SHIFT
))&
CAN_CTRL1_PSEG2_MASK
)

	)

3548 
	#CAN_CTRL1_PSEG1_MASK
 0x380000u

	)

3549 
	#CAN_CTRL1_PSEG1_SHIFT
 19

	)

3550 
	#CAN_CTRL1_PSEG1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_CTRL1_PSEG1_SHIFT
))&
CAN_CTRL1_PSEG1_MASK
)

	)

3551 
	#CAN_CTRL1_RJW_MASK
 0xC00000u

	)

3552 
	#CAN_CTRL1_RJW_SHIFT
 22

	)

3553 
	#CAN_CTRL1_RJW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_CTRL1_RJW_SHIFT
))&
CAN_CTRL1_RJW_MASK
)

	)

3554 
	#CAN_CTRL1_PRESDIV_MASK
 0xFF000000u

	)

3555 
	#CAN_CTRL1_PRESDIV_SHIFT
 24

	)

3556 
	#CAN_CTRL1_PRESDIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_CTRL1_PRESDIV_SHIFT
))&
CAN_CTRL1_PRESDIV_MASK
)

	)

3558 
	#CAN_TIMER_TIMER_MASK
 0xFFFFu

	)

3559 
	#CAN_TIMER_TIMER_SHIFT
 0

	)

3560 
	#CAN_TIMER_TIMER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_TIMER_TIMER_SHIFT
))&
CAN_TIMER_TIMER_MASK
)

	)

3562 
	#CAN_RXMGMASK_MG31_MG0_MASK
 0xFFFFFFFFu

	)

3563 
	#CAN_RXMGMASK_MG31_MG0_SHIFT
 0

	)

3564 
	#CAN_RXMGMASK_MG31_MG0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_RXMGMASK_MG31_MG0_SHIFT
))&
CAN_RXMGMASK_MG31_MG0_MASK
)

	)

3566 
	#CAN_RX14MASK_RX14M31_RX14M0_MASK
 0xFFFFFFFFu

	)

3567 
	#CAN_RX14MASK_RX14M31_RX14M0_SHIFT
 0

	)

3568 
	#CAN_RX14MASK_RX14M31_RX14M0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_RX14MASK_RX14M31_RX14M0_SHIFT
))&
CAN_RX14MASK_RX14M31_RX14M0_MASK
)

	)

3570 
	#CAN_RX15MASK_RX15M31_RX15M0_MASK
 0xFFFFFFFFu

	)

3571 
	#CAN_RX15MASK_RX15M31_RX15M0_SHIFT
 0

	)

3572 
	#CAN_RX15MASK_RX15M31_RX15M0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_RX15MASK_RX15M31_RX15M0_SHIFT
))&
CAN_RX15MASK_RX15M31_RX15M0_MASK
)

	)

3574 
	#CAN_ECR_Tx_Eº_Cou¡î_MASK
 0xFFu

	)

3575 
	#CAN_ECR_Tx_Eº_Cou¡î_SHIFT
 0

	)

3576 
	#CAN_ECR_Tx_Eº_Cou¡î
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_ECR_Tx_Eº_Cou¡î_SHIFT
))&
CAN_ECR_Tx_Eº_Cou¡î_MASK
)

	)

3577 
	#CAN_ECR_Rx_Eº_Cou¡î_MASK
 0xFF00u

	)

3578 
	#CAN_ECR_Rx_Eº_Cou¡î_SHIFT
 8

	)

3579 
	#CAN_ECR_Rx_Eº_Cou¡î
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_ECR_Rx_Eº_Cou¡î_SHIFT
))&
CAN_ECR_Rx_Eº_Cou¡î_MASK
)

	)

3581 
	#CAN_ESR1_WAK_INT_MASK
 0x1u

	)

3582 
	#CAN_ESR1_WAK_INT_SHIFT
 0

	)

3583 
	#CAN_ESR1_ERR_INT_MASK
 0x2u

	)

3584 
	#CAN_ESR1_ERR_INT_SHIFT
 1

	)

3585 
	#CAN_ESR1_BOFF_INT_MASK
 0x4u

	)

3586 
	#CAN_ESR1_BOFF_INT_SHIFT
 2

	)

3587 
	#CAN_ESR1_RX_MASK
 0x8u

	)

3588 
	#CAN_ESR1_RX_SHIFT
 3

	)

3589 
	#CAN_ESR1_FLT_CONF_MASK
 0x30u

	)

3590 
	#CAN_ESR1_FLT_CONF_SHIFT
 4

	)

3591 
	#CAN_ESR1_FLT_CONF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_ESR1_FLT_CONF_SHIFT
))&
CAN_ESR1_FLT_CONF_MASK
)

	)

3592 
	#CAN_ESR1_TX_MASK
 0x40u

	)

3593 
	#CAN_ESR1_TX_SHIFT
 6

	)

3594 
	#CAN_ESR1_IDLE_MASK
 0x80u

	)

3595 
	#CAN_ESR1_IDLE_SHIFT
 7

	)

3596 
	#CAN_ESR1_RX_WRN_MASK
 0x100u

	)

3597 
	#CAN_ESR1_RX_WRN_SHIFT
 8

	)

3598 
	#CAN_ESR1_TX_WRN_MASK
 0x200u

	)

3599 
	#CAN_ESR1_TX_WRN_SHIFT
 9

	)

3600 
	#CAN_ESR1_STF_ERR_MASK
 0x400u

	)

3601 
	#CAN_ESR1_STF_ERR_SHIFT
 10

	)

3602 
	#CAN_ESR1_FRM_ERR_MASK
 0x800u

	)

3603 
	#CAN_ESR1_FRM_ERR_SHIFT
 11

	)

3604 
	#CAN_ESR1_CRC_ERR_MASK
 0x1000u

	)

3605 
	#CAN_ESR1_CRC_ERR_SHIFT
 12

	)

3606 
	#CAN_ESR1_ACK_ERR_MASK
 0x2000u

	)

3607 
	#CAN_ESR1_ACK_ERR_SHIFT
 13

	)

3608 
	#CAN_ESR1_BIT0_ERR_MASK
 0x4000u

	)

3609 
	#CAN_ESR1_BIT0_ERR_SHIFT
 14

	)

3610 
	#CAN_ESR1_BIT1_ERR_MASK
 0x8000u

	)

3611 
	#CAN_ESR1_BIT1_ERR_SHIFT
 15

	)

3612 
	#CAN_ESR1_RWRN_INT_MASK
 0x10000u

	)

3613 
	#CAN_ESR1_RWRN_INT_SHIFT
 16

	)

3614 
	#CAN_ESR1_TWRN_INT_MASK
 0x20000u

	)

3615 
	#CAN_ESR1_TWRN_INT_SHIFT
 17

	)

3616 
	#CAN_ESR1_SYNCH_MASK
 0x40000u

	)

3617 
	#CAN_ESR1_SYNCH_SHIFT
 18

	)

3619 
	#CAN_IMASK2_BUF63M_BUF32M_MASK
 0xFFFFFFFFu

	)

3620 
	#CAN_IMASK2_BUF63M_BUF32M_SHIFT
 0

	)

3621 
	#CAN_IMASK2_BUF63M_BUF32M
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_IMASK2_BUF63M_BUF32M_SHIFT
))&
CAN_IMASK2_BUF63M_BUF32M_MASK
)

	)

3623 
	#CAN_IMASK1_BUF31M_BUF0M_MASK
 0xFFFFFFFFu

	)

3624 
	#CAN_IMASK1_BUF31M_BUF0M_SHIFT
 0

	)

3625 
	#CAN_IMASK1_BUF31M_BUF0M
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_IMASK1_BUF31M_BUF0M_SHIFT
))&
CAN_IMASK1_BUF31M_BUF0M_MASK
)

	)

3627 
	#CAN_IFLAG2_BUF63I_BUF32I_MASK
 0xFFFFFFFFu

	)

3628 
	#CAN_IFLAG2_BUF63I_BUF32I_SHIFT
 0

	)

3629 
	#CAN_IFLAG2_BUF63I_BUF32I
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_IFLAG2_BUF63I_BUF32I_SHIFT
))&
CAN_IFLAG2_BUF63I_BUF32I_MASK
)

	)

3631 
	#CAN_IFLAG1_BUF4I_BUF0I_MASK
 0x1Fu

	)

3632 
	#CAN_IFLAG1_BUF4I_BUF0I_SHIFT
 0

	)

3633 
	#CAN_IFLAG1_BUF4I_BUF0I
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_IFLAG1_BUF4I_BUF0I_SHIFT
))&
CAN_IFLAG1_BUF4I_BUF0I_MASK
)

	)

3634 
	#CAN_IFLAG1_BUF5I_MASK
 0x20u

	)

3635 
	#CAN_IFLAG1_BUF5I_SHIFT
 5

	)

3636 
	#CAN_IFLAG1_BUF6I_MASK
 0x40u

	)

3637 
	#CAN_IFLAG1_BUF6I_SHIFT
 6

	)

3638 
	#CAN_IFLAG1_BUF7I_MASK
 0x80u

	)

3639 
	#CAN_IFLAG1_BUF7I_SHIFT
 7

	)

3640 
	#CAN_IFLAG1_BUF31I_BUF8I_MASK
 0xFFFFFF00u

	)

3641 
	#CAN_IFLAG1_BUF31I_BUF8I_SHIFT
 8

	)

3642 
	#CAN_IFLAG1_BUF31I_BUF8I
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_IFLAG1_BUF31I_BUF8I_SHIFT
))&
CAN_IFLAG1_BUF31I_BUF8I_MASK
)

	)

3644 
	#CAN_CTRL2_EACEN_MASK
 0x10000u

	)

3645 
	#CAN_CTRL2_EACEN_SHIFT
 16

	)

3646 
	#CAN_CTRL2_RRS_MASK
 0x20000u

	)

3647 
	#CAN_CTRL2_RRS_SHIFT
 17

	)

3648 
	#CAN_CTRL2_MRP_MASK
 0x40000u

	)

3649 
	#CAN_CTRL2_MRP_SHIFT
 18

	)

3650 
	#CAN_CTRL2_TASD_MASK
 0xF80000u

	)

3651 
	#CAN_CTRL2_TASD_SHIFT
 19

	)

3652 
	#CAN_CTRL2_TASD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_CTRL2_TASD_SHIFT
))&
CAN_CTRL2_TASD_MASK
)

	)

3653 
	#CAN_CTRL2_RFFN_MASK
 0xF000000u

	)

3654 
	#CAN_CTRL2_RFFN_SHIFT
 24

	)

3655 
	#CAN_CTRL2_RFFN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_CTRL2_RFFN_SHIFT
))&
CAN_CTRL2_RFFN_MASK
)

	)

3656 
	#CAN_CTRL2_WRMFRZ_MASK
 0x10000000u

	)

3657 
	#CAN_CTRL2_WRMFRZ_SHIFT
 28

	)

3659 
	#CAN_ESR2_IMB_MASK
 0x2000u

	)

3660 
	#CAN_ESR2_IMB_SHIFT
 13

	)

3661 
	#CAN_ESR2_VPS_MASK
 0x4000u

	)

3662 
	#CAN_ESR2_VPS_SHIFT
 14

	)

3663 
	#CAN_ESR2_LPTM_MASK
 0x7F0000u

	)

3664 
	#CAN_ESR2_LPTM_SHIFT
 16

	)

3665 
	#CAN_ESR2_LPTM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_ESR2_LPTM_SHIFT
))&
CAN_ESR2_LPTM_MASK
)

	)

3667 
	#CAN_CRCR_TXCRC_MASK
 0x7FFFu

	)

3668 
	#CAN_CRCR_TXCRC_SHIFT
 0

	)

3669 
	#CAN_CRCR_TXCRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_CRCR_TXCRC_SHIFT
))&
CAN_CRCR_TXCRC_MASK
)

	)

3670 
	#CAN_CRCR_MBCRC_MASK
 0x7F0000u

	)

3671 
	#CAN_CRCR_MBCRC_SHIFT
 16

	)

3672 
	#CAN_CRCR_MBCRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_CRCR_MBCRC_SHIFT
))&
CAN_CRCR_MBCRC_MASK
)

	)

3674 
	#CAN_RXFGMASK_FGM31_FGM0_MASK
 0xFFFFFFFFu

	)

3675 
	#CAN_RXFGMASK_FGM31_FGM0_SHIFT
 0

	)

3676 
	#CAN_RXFGMASK_FGM31_FGM0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_RXFGMASK_FGM31_FGM0_SHIFT
))&
CAN_RXFGMASK_FGM31_FGM0_MASK
)

	)

3678 
	#CAN_RXFIR_IDHIT_MASK
 0x1FFu

	)

3679 
	#CAN_RXFIR_IDHIT_SHIFT
 0

	)

3680 
	#CAN_RXFIR_IDHIT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_RXFIR_IDHIT_SHIFT
))&
CAN_RXFIR_IDHIT_MASK
)

	)

3682 
	#CAN_CS_TIME_STAMP_MASK
 0xFFFFu

	)

3683 
	#CAN_CS_TIME_STAMP_SHIFT
 0

	)

3684 
	#CAN_CS_TIME_STAMP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_CS_TIME_STAMP_SHIFT
))&
CAN_CS_TIME_STAMP_MASK
)

	)

3685 
	#CAN_CS_DLC_MASK
 0xF0000u

	)

3686 
	#CAN_CS_DLC_SHIFT
 16

	)

3687 
	#CAN_CS_DLC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_CS_DLC_SHIFT
))&
CAN_CS_DLC_MASK
)

	)

3688 
	#CAN_CS_RTR_MASK
 0x100000u

	)

3689 
	#CAN_CS_RTR_SHIFT
 20

	)

3690 
	#CAN_CS_IDE_MASK
 0x200000u

	)

3691 
	#CAN_CS_IDE_SHIFT
 21

	)

3692 
	#CAN_CS_SRR_MASK
 0x400000u

	)

3693 
	#CAN_CS_SRR_SHIFT
 22

	)

3694 
	#CAN_CS_CODE_MASK
 0xF000000u

	)

3695 
	#CAN_CS_CODE_SHIFT
 24

	)

3696 
	#CAN_CS_CODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_CS_CODE_SHIFT
))&
CAN_CS_CODE_MASK
)

	)

3698 
	#CAN_ID_EXT_MASK
 0x3FFFFu

	)

3699 
	#CAN_ID_EXT_SHIFT
 0

	)

3700 
	#CAN_ID_EXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_ID_EXT_SHIFT
))&
CAN_ID_EXT_MASK
)

	)

3701 
	#CAN_ID_STD_MASK
 0x1FFC0000u

	)

3702 
	#CAN_ID_STD_SHIFT
 18

	)

3703 
	#CAN_ID_STD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_ID_STD_SHIFT
))&
CAN_ID_STD_MASK
)

	)

3704 
	#CAN_ID_PRIO_MASK
 0xE0000000u

	)

3705 
	#CAN_ID_PRIO_SHIFT
 29

	)

3706 
	#CAN_ID_PRIO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_ID_PRIO_SHIFT
))&
CAN_ID_PRIO_MASK
)

	)

3708 
	#CAN_WORD0_DATA_BYTE_3_MASK
 0xFFu

	)

3709 
	#CAN_WORD0_DATA_BYTE_3_SHIFT
 0

	)

3710 
	#CAN_WORD0_DATA_BYTE_3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_WORD0_DATA_BYTE_3_SHIFT
))&
CAN_WORD0_DATA_BYTE_3_MASK
)

	)

3711 
	#CAN_WORD0_DATA_BYTE_2_MASK
 0xFF00u

	)

3712 
	#CAN_WORD0_DATA_BYTE_2_SHIFT
 8

	)

3713 
	#CAN_WORD0_DATA_BYTE_2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_WORD0_DATA_BYTE_2_SHIFT
))&
CAN_WORD0_DATA_BYTE_2_MASK
)

	)

3714 
	#CAN_WORD0_DATA_BYTE_1_MASK
 0xFF0000u

	)

3715 
	#CAN_WORD0_DATA_BYTE_1_SHIFT
 16

	)

3716 
	#CAN_WORD0_DATA_BYTE_1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_WORD0_DATA_BYTE_1_SHIFT
))&
CAN_WORD0_DATA_BYTE_1_MASK
)

	)

3717 
	#CAN_WORD0_DATA_BYTE_0_MASK
 0xFF000000u

	)

3718 
	#CAN_WORD0_DATA_BYTE_0_SHIFT
 24

	)

3719 
	#CAN_WORD0_DATA_BYTE_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_WORD0_DATA_BYTE_0_SHIFT
))&
CAN_WORD0_DATA_BYTE_0_MASK
)

	)

3721 
	#CAN_WORD1_DATA_BYTE_7_MASK
 0xFFu

	)

3722 
	#CAN_WORD1_DATA_BYTE_7_SHIFT
 0

	)

3723 
	#CAN_WORD1_DATA_BYTE_7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_WORD1_DATA_BYTE_7_SHIFT
))&
CAN_WORD1_DATA_BYTE_7_MASK
)

	)

3724 
	#CAN_WORD1_DATA_BYTE_6_MASK
 0xFF00u

	)

3725 
	#CAN_WORD1_DATA_BYTE_6_SHIFT
 8

	)

3726 
	#CAN_WORD1_DATA_BYTE_6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_WORD1_DATA_BYTE_6_SHIFT
))&
CAN_WORD1_DATA_BYTE_6_MASK
)

	)

3727 
	#CAN_WORD1_DATA_BYTE_5_MASK
 0xFF0000u

	)

3728 
	#CAN_WORD1_DATA_BYTE_5_SHIFT
 16

	)

3729 
	#CAN_WORD1_DATA_BYTE_5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_WORD1_DATA_BYTE_5_SHIFT
))&
CAN_WORD1_DATA_BYTE_5_MASK
)

	)

3730 
	#CAN_WORD1_DATA_BYTE_4_MASK
 0xFF000000u

	)

3731 
	#CAN_WORD1_DATA_BYTE_4_SHIFT
 24

	)

3732 
	#CAN_WORD1_DATA_BYTE_4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_WORD1_DATA_BYTE_4_SHIFT
))&
CAN_WORD1_DATA_BYTE_4_MASK
)

	)

3734 
	#CAN_RXIMR0_RXIMR63_MI31_MI0_MASK
 0xFFFFFFFFu

	)

3735 
	#CAN_RXIMR0_RXIMR63_MI31_MI0_SHIFT
 0

	)

3736 
	#CAN_RXIMR0_RXIMR63_MI31_MI0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_RXIMR0_RXIMR63_MI31_MI0_SHIFT
))&
CAN_RXIMR0_RXIMR63_MI31_MI0_MASK
)

	)

3738 
	#CAN_GFWR_GFWR_MASK
 0xFFu

	)

3739 
	#CAN_GFWR_GFWR_SHIFT
 0

	)

3740 
	#CAN_GFWR_GFWR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CAN_GFWR_GFWR_SHIFT
))&
CAN_GFWR_GFWR_MASK
)

	)

3748 
	#CAN1_BASE
 (0x42090000u)

	)

3750 
	#CAN1
 ((
CAN_Ty≥
 *)
CAN1_BASE
)

	)

3751 
	#CAN1_BASE_PTR
 (
CAN1
)

	)

3753 
	#CAN2_BASE
 (0x42094000u)

	)

3755 
	#CAN2
 ((
CAN_Ty≥
 *)
CAN2_BASE
)

	)

3756 
	#CAN2_BASE_PTR
 (
CAN2
)

	)

3758 
	#CAN_BASE_ADDRS
 { 
CAN1_BASE
, 
CAN2_BASE
 }

	)

3760 
	#CAN_BASE_PTRS
 { 
CAN1
, 
CAN2
 }

	)

3762 
	#CAN_IRQS
 { 
FLEXCAN1_IRQn
, 
FLEXCAN2_IRQn
 }

	)

3775 
	#CAN1_MCR
 
	`CAN_MCR_REG
(
CAN1_BASE_PTR
)

	)

3776 
	#CAN1_CTRL1
 
	`CAN_CTRL1_REG
(
CAN1_BASE_PTR
)

	)

3777 
	#CAN1_TIMER
 
	`CAN_TIMER_REG
(
CAN1_BASE_PTR
)

	)

3778 
	#CAN1_RXMGMASK
 
	`CAN_RXMGMASK_REG
(
CAN1_BASE_PTR
)

	)

3779 
	#CAN1_RX14MASK
 
	`CAN_RX14MASK_REG
(
CAN1_BASE_PTR
)

	)

3780 
	#CAN1_RX15MASK
 
	`CAN_RX15MASK_REG
(
CAN1_BASE_PTR
)

	)

3781 
	#CAN1_ECR
 
	`CAN_ECR_REG
(
CAN1_BASE_PTR
)

	)

3782 
	#CAN1_ESR1
 
	`CAN_ESR1_REG
(
CAN1_BASE_PTR
)

	)

3783 
	#CAN1_IMASK2
 
	`CAN_IMASK2_REG
(
CAN1_BASE_PTR
)

	)

3784 
	#CAN1_IMASK1
 
	`CAN_IMASK1_REG
(
CAN1_BASE_PTR
)

	)

3785 
	#CAN1_IFLAG2
 
	`CAN_IFLAG2_REG
(
CAN1_BASE_PTR
)

	)

3786 
	#CAN1_IFLAG1
 
	`CAN_IFLAG1_REG
(
CAN1_BASE_PTR
)

	)

3787 
	#CAN1_CTRL2
 
	`CAN_CTRL2_REG
(
CAN1_BASE_PTR
)

	)

3788 
	#CAN1_ESR2
 
	`CAN_ESR2_REG
(
CAN1_BASE_PTR
)

	)

3789 
	#CAN1_CRCR
 
	`CAN_CRCR_REG
(
CAN1_BASE_PTR
)

	)

3790 
	#CAN1_RXFGMASK
 
	`CAN_RXFGMASK_REG
(
CAN1_BASE_PTR
)

	)

3791 
	#CAN1_RXFIR
 
	`CAN_RXFIR_REG
(
CAN1_BASE_PTR
)

	)

3792 
	#CAN1_CS0
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,0)

	)

3793 
	#CAN1_ID0
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,0)

	)

3794 
	#CAN1_WORD00
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,0)

	)

3795 
	#CAN1_WORD10
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,0)

	)

3796 
	#CAN1_CS1
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,1)

	)

3797 
	#CAN1_ID1
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,1)

	)

3798 
	#CAN1_WORD01
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,1)

	)

3799 
	#CAN1_WORD11
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,1)

	)

3800 
	#CAN1_CS2
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,2)

	)

3801 
	#CAN1_ID2
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,2)

	)

3802 
	#CAN1_WORD02
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,2)

	)

3803 
	#CAN1_WORD12
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,2)

	)

3804 
	#CAN1_CS3
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,3)

	)

3805 
	#CAN1_ID3
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,3)

	)

3806 
	#CAN1_WORD03
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,3)

	)

3807 
	#CAN1_WORD13
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,3)

	)

3808 
	#CAN1_CS4
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,4)

	)

3809 
	#CAN1_ID4
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,4)

	)

3810 
	#CAN1_WORD04
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,4)

	)

3811 
	#CAN1_WORD14
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,4)

	)

3812 
	#CAN1_CS5
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,5)

	)

3813 
	#CAN1_ID5
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,5)

	)

3814 
	#CAN1_WORD05
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,5)

	)

3815 
	#CAN1_WORD15
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,5)

	)

3816 
	#CAN1_CS6
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,6)

	)

3817 
	#CAN1_ID6
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,6)

	)

3818 
	#CAN1_WORD06
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,6)

	)

3819 
	#CAN1_WORD16
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,6)

	)

3820 
	#CAN1_CS7
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,7)

	)

3821 
	#CAN1_ID7
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,7)

	)

3822 
	#CAN1_WORD07
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,7)

	)

3823 
	#CAN1_WORD17
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,7)

	)

3824 
	#CAN1_CS8
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,8)

	)

3825 
	#CAN1_ID8
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,8)

	)

3826 
	#CAN1_WORD08
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,8)

	)

3827 
	#CAN1_WORD18
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,8)

	)

3828 
	#CAN1_CS9
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,9)

	)

3829 
	#CAN1_ID9
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,9)

	)

3830 
	#CAN1_WORD09
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,9)

	)

3831 
	#CAN1_WORD19
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,9)

	)

3832 
	#CAN1_CS10
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,10)

	)

3833 
	#CAN1_ID10
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,10)

	)

3834 
	#CAN1_WORD010
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,10)

	)

3835 
	#CAN1_WORD110
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,10)

	)

3836 
	#CAN1_CS11
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,11)

	)

3837 
	#CAN1_ID11
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,11)

	)

3838 
	#CAN1_WORD011
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,11)

	)

3839 
	#CAN1_WORD111
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,11)

	)

3840 
	#CAN1_CS12
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,12)

	)

3841 
	#CAN1_ID12
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,12)

	)

3842 
	#CAN1_WORD012
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,12)

	)

3843 
	#CAN1_WORD112
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,12)

	)

3844 
	#CAN1_CS13
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,13)

	)

3845 
	#CAN1_ID13
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,13)

	)

3846 
	#CAN1_WORD013
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,13)

	)

3847 
	#CAN1_WORD113
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,13)

	)

3848 
	#CAN1_CS14
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,14)

	)

3849 
	#CAN1_ID14
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,14)

	)

3850 
	#CAN1_WORD014
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,14)

	)

3851 
	#CAN1_WORD114
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,14)

	)

3852 
	#CAN1_CS15
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,15)

	)

3853 
	#CAN1_ID15
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,15)

	)

3854 
	#CAN1_WORD015
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,15)

	)

3855 
	#CAN1_WORD115
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,15)

	)

3856 
	#CAN1_CS16
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,16)

	)

3857 
	#CAN1_ID16
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,16)

	)

3858 
	#CAN1_WORD016
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,16)

	)

3859 
	#CAN1_WORD116
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,16)

	)

3860 
	#CAN1_CS17
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,17)

	)

3861 
	#CAN1_ID17
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,17)

	)

3862 
	#CAN1_WORD017
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,17)

	)

3863 
	#CAN1_WORD117
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,17)

	)

3864 
	#CAN1_CS18
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,18)

	)

3865 
	#CAN1_ID18
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,18)

	)

3866 
	#CAN1_WORD018
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,18)

	)

3867 
	#CAN1_WORD118
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,18)

	)

3868 
	#CAN1_CS19
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,19)

	)

3869 
	#CAN1_ID19
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,19)

	)

3870 
	#CAN1_WORD019
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,19)

	)

3871 
	#CAN1_WORD119
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,19)

	)

3872 
	#CAN1_CS20
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,20)

	)

3873 
	#CAN1_ID20
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,20)

	)

3874 
	#CAN1_WORD020
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,20)

	)

3875 
	#CAN1_WORD120
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,20)

	)

3876 
	#CAN1_CS21
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,21)

	)

3877 
	#CAN1_ID21
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,21)

	)

3878 
	#CAN1_WORD021
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,21)

	)

3879 
	#CAN1_WORD121
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,21)

	)

3880 
	#CAN1_CS22
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,22)

	)

3881 
	#CAN1_ID22
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,22)

	)

3882 
	#CAN1_WORD022
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,22)

	)

3883 
	#CAN1_WORD122
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,22)

	)

3884 
	#CAN1_CS23
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,23)

	)

3885 
	#CAN1_ID23
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,23)

	)

3886 
	#CAN1_WORD023
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,23)

	)

3887 
	#CAN1_WORD123
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,23)

	)

3888 
	#CAN1_CS24
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,24)

	)

3889 
	#CAN1_ID24
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,24)

	)

3890 
	#CAN1_WORD024
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,24)

	)

3891 
	#CAN1_WORD124
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,24)

	)

3892 
	#CAN1_CS25
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,25)

	)

3893 
	#CAN1_ID25
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,25)

	)

3894 
	#CAN1_WORD025
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,25)

	)

3895 
	#CAN1_WORD125
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,25)

	)

3896 
	#CAN1_CS26
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,26)

	)

3897 
	#CAN1_ID26
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,26)

	)

3898 
	#CAN1_WORD026
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,26)

	)

3899 
	#CAN1_WORD126
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,26)

	)

3900 
	#CAN1_CS27
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,27)

	)

3901 
	#CAN1_ID27
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,27)

	)

3902 
	#CAN1_WORD027
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,27)

	)

3903 
	#CAN1_WORD127
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,27)

	)

3904 
	#CAN1_CS28
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,28)

	)

3905 
	#CAN1_ID28
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,28)

	)

3906 
	#CAN1_WORD028
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,28)

	)

3907 
	#CAN1_WORD128
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,28)

	)

3908 
	#CAN1_CS29
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,29)

	)

3909 
	#CAN1_ID29
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,29)

	)

3910 
	#CAN1_WORD029
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,29)

	)

3911 
	#CAN1_WORD129
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,29)

	)

3912 
	#CAN1_CS30
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,30)

	)

3913 
	#CAN1_ID30
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,30)

	)

3914 
	#CAN1_WORD030
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,30)

	)

3915 
	#CAN1_WORD130
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,30)

	)

3916 
	#CAN1_CS31
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,31)

	)

3917 
	#CAN1_ID31
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,31)

	)

3918 
	#CAN1_WORD031
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,31)

	)

3919 
	#CAN1_WORD131
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,31)

	)

3920 
	#CAN1_CS32
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,32)

	)

3921 
	#CAN1_ID32
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,32)

	)

3922 
	#CAN1_WORD032
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,32)

	)

3923 
	#CAN1_WORD132
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,32)

	)

3924 
	#CAN1_CS33
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,33)

	)

3925 
	#CAN1_ID33
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,33)

	)

3926 
	#CAN1_WORD033
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,33)

	)

3927 
	#CAN1_WORD133
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,33)

	)

3928 
	#CAN1_CS34
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,34)

	)

3929 
	#CAN1_ID34
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,34)

	)

3930 
	#CAN1_WORD034
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,34)

	)

3931 
	#CAN1_WORD134
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,34)

	)

3932 
	#CAN1_CS35
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,35)

	)

3933 
	#CAN1_ID35
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,35)

	)

3934 
	#CAN1_WORD035
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,35)

	)

3935 
	#CAN1_WORD135
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,35)

	)

3936 
	#CAN1_CS36
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,36)

	)

3937 
	#CAN1_ID36
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,36)

	)

3938 
	#CAN1_WORD036
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,36)

	)

3939 
	#CAN1_WORD136
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,36)

	)

3940 
	#CAN1_CS37
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,37)

	)

3941 
	#CAN1_ID37
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,37)

	)

3942 
	#CAN1_WORD037
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,37)

	)

3943 
	#CAN1_WORD137
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,37)

	)

3944 
	#CAN1_CS38
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,38)

	)

3945 
	#CAN1_ID38
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,38)

	)

3946 
	#CAN1_WORD038
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,38)

	)

3947 
	#CAN1_WORD138
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,38)

	)

3948 
	#CAN1_CS39
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,39)

	)

3949 
	#CAN1_ID39
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,39)

	)

3950 
	#CAN1_WORD039
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,39)

	)

3951 
	#CAN1_WORD139
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,39)

	)

3952 
	#CAN1_CS40
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,40)

	)

3953 
	#CAN1_ID40
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,40)

	)

3954 
	#CAN1_WORD040
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,40)

	)

3955 
	#CAN1_WORD140
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,40)

	)

3956 
	#CAN1_CS41
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,41)

	)

3957 
	#CAN1_ID41
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,41)

	)

3958 
	#CAN1_WORD041
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,41)

	)

3959 
	#CAN1_WORD141
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,41)

	)

3960 
	#CAN1_CS42
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,42)

	)

3961 
	#CAN1_ID42
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,42)

	)

3962 
	#CAN1_WORD042
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,42)

	)

3963 
	#CAN1_WORD142
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,42)

	)

3964 
	#CAN1_CS43
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,43)

	)

3965 
	#CAN1_ID43
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,43)

	)

3966 
	#CAN1_WORD043
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,43)

	)

3967 
	#CAN1_WORD143
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,43)

	)

3968 
	#CAN1_CS44
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,44)

	)

3969 
	#CAN1_ID44
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,44)

	)

3970 
	#CAN1_WORD044
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,44)

	)

3971 
	#CAN1_WORD144
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,44)

	)

3972 
	#CAN1_CS45
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,45)

	)

3973 
	#CAN1_ID45
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,45)

	)

3974 
	#CAN1_WORD045
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,45)

	)

3975 
	#CAN1_WORD145
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,45)

	)

3976 
	#CAN1_CS46
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,46)

	)

3977 
	#CAN1_ID46
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,46)

	)

3978 
	#CAN1_WORD046
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,46)

	)

3979 
	#CAN1_WORD146
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,46)

	)

3980 
	#CAN1_CS47
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,47)

	)

3981 
	#CAN1_ID47
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,47)

	)

3982 
	#CAN1_WORD047
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,47)

	)

3983 
	#CAN1_WORD147
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,47)

	)

3984 
	#CAN1_CS48
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,48)

	)

3985 
	#CAN1_ID48
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,48)

	)

3986 
	#CAN1_WORD048
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,48)

	)

3987 
	#CAN1_WORD148
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,48)

	)

3988 
	#CAN1_CS49
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,49)

	)

3989 
	#CAN1_ID49
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,49)

	)

3990 
	#CAN1_WORD049
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,49)

	)

3991 
	#CAN1_WORD149
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,49)

	)

3992 
	#CAN1_CS50
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,50)

	)

3993 
	#CAN1_ID50
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,50)

	)

3994 
	#CAN1_WORD050
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,50)

	)

3995 
	#CAN1_WORD150
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,50)

	)

3996 
	#CAN1_CS51
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,51)

	)

3997 
	#CAN1_ID51
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,51)

	)

3998 
	#CAN1_WORD051
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,51)

	)

3999 
	#CAN1_WORD151
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,51)

	)

4000 
	#CAN1_CS52
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,52)

	)

4001 
	#CAN1_ID52
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,52)

	)

4002 
	#CAN1_WORD052
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,52)

	)

4003 
	#CAN1_WORD152
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,52)

	)

4004 
	#CAN1_CS53
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,53)

	)

4005 
	#CAN1_ID53
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,53)

	)

4006 
	#CAN1_WORD053
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,53)

	)

4007 
	#CAN1_WORD153
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,53)

	)

4008 
	#CAN1_CS54
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,54)

	)

4009 
	#CAN1_ID54
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,54)

	)

4010 
	#CAN1_WORD054
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,54)

	)

4011 
	#CAN1_WORD154
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,54)

	)

4012 
	#CAN1_CS55
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,55)

	)

4013 
	#CAN1_ID55
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,55)

	)

4014 
	#CAN1_WORD055
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,55)

	)

4015 
	#CAN1_WORD155
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,55)

	)

4016 
	#CAN1_CS56
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,56)

	)

4017 
	#CAN1_ID56
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,56)

	)

4018 
	#CAN1_WORD056
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,56)

	)

4019 
	#CAN1_WORD156
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,56)

	)

4020 
	#CAN1_CS57
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,57)

	)

4021 
	#CAN1_ID57
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,57)

	)

4022 
	#CAN1_WORD057
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,57)

	)

4023 
	#CAN1_WORD157
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,57)

	)

4024 
	#CAN1_CS58
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,58)

	)

4025 
	#CAN1_ID58
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,58)

	)

4026 
	#CAN1_WORD058
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,58)

	)

4027 
	#CAN1_WORD158
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,58)

	)

4028 
	#CAN1_CS59
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,59)

	)

4029 
	#CAN1_ID59
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,59)

	)

4030 
	#CAN1_WORD059
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,59)

	)

4031 
	#CAN1_WORD159
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,59)

	)

4032 
	#CAN1_CS60
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,60)

	)

4033 
	#CAN1_ID60
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,60)

	)

4034 
	#CAN1_WORD060
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,60)

	)

4035 
	#CAN1_WORD160
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,60)

	)

4036 
	#CAN1_CS61
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,61)

	)

4037 
	#CAN1_ID61
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,61)

	)

4038 
	#CAN1_WORD061
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,61)

	)

4039 
	#CAN1_WORD161
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,61)

	)

4040 
	#CAN1_CS62
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,62)

	)

4041 
	#CAN1_ID62
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,62)

	)

4042 
	#CAN1_WORD062
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,62)

	)

4043 
	#CAN1_WORD162
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,62)

	)

4044 
	#CAN1_CS63
 
	`CAN_CS_REG
(
CAN1_BASE_PTR
,63)

	)

4045 
	#CAN1_ID63
 
	`CAN_ID_REG
(
CAN1_BASE_PTR
,63)

	)

4046 
	#CAN1_WORD063
 
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,63)

	)

4047 
	#CAN1_WORD163
 
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,63)

	)

4048 
	#CAN1_RXIMR0
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,0)

	)

4049 
	#CAN1_RXIMR1
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,1)

	)

4050 
	#CAN1_RXIMR2
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,2)

	)

4051 
	#CAN1_RXIMR3
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,3)

	)

4052 
	#CAN1_RXIMR4
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,4)

	)

4053 
	#CAN1_RXIMR5
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,5)

	)

4054 
	#CAN1_RXIMR6
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,6)

	)

4055 
	#CAN1_RXIMR7
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,7)

	)

4056 
	#CAN1_RXIMR8
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,8)

	)

4057 
	#CAN1_RXIMR9
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,9)

	)

4058 
	#CAN1_RXIMR10
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,10)

	)

4059 
	#CAN1_RXIMR11
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,11)

	)

4060 
	#CAN1_RXIMR12
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,12)

	)

4061 
	#CAN1_RXIMR13
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,13)

	)

4062 
	#CAN1_RXIMR14
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,14)

	)

4063 
	#CAN1_RXIMR15
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,15)

	)

4064 
	#CAN1_RXIMR16
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,16)

	)

4065 
	#CAN1_RXIMR17
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,17)

	)

4066 
	#CAN1_RXIMR18
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,18)

	)

4067 
	#CAN1_RXIMR19
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,19)

	)

4068 
	#CAN1_RXIMR20
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,20)

	)

4069 
	#CAN1_RXIMR21
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,21)

	)

4070 
	#CAN1_RXIMR22
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,22)

	)

4071 
	#CAN1_RXIMR23
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,23)

	)

4072 
	#CAN1_RXIMR24
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,24)

	)

4073 
	#CAN1_RXIMR25
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,25)

	)

4074 
	#CAN1_RXIMR26
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,26)

	)

4075 
	#CAN1_RXIMR27
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,27)

	)

4076 
	#CAN1_RXIMR28
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,28)

	)

4077 
	#CAN1_RXIMR29
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,29)

	)

4078 
	#CAN1_RXIMR30
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,30)

	)

4079 
	#CAN1_RXIMR31
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,31)

	)

4080 
	#CAN1_RXIMR32
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,32)

	)

4081 
	#CAN1_RXIMR33
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,33)

	)

4082 
	#CAN1_RXIMR34
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,34)

	)

4083 
	#CAN1_RXIMR35
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,35)

	)

4084 
	#CAN1_RXIMR36
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,36)

	)

4085 
	#CAN1_RXIMR37
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,37)

	)

4086 
	#CAN1_RXIMR38
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,38)

	)

4087 
	#CAN1_RXIMR39
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,39)

	)

4088 
	#CAN1_RXIMR40
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,40)

	)

4089 
	#CAN1_RXIMR41
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,41)

	)

4090 
	#CAN1_RXIMR42
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,42)

	)

4091 
	#CAN1_RXIMR43
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,43)

	)

4092 
	#CAN1_RXIMR44
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,44)

	)

4093 
	#CAN1_RXIMR45
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,45)

	)

4094 
	#CAN1_RXIMR46
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,46)

	)

4095 
	#CAN1_RXIMR47
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,47)

	)

4096 
	#CAN1_RXIMR48
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,48)

	)

4097 
	#CAN1_RXIMR49
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,49)

	)

4098 
	#CAN1_RXIMR50
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,50)

	)

4099 
	#CAN1_RXIMR51
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,51)

	)

4100 
	#CAN1_RXIMR52
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,52)

	)

4101 
	#CAN1_RXIMR53
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,53)

	)

4102 
	#CAN1_RXIMR54
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,54)

	)

4103 
	#CAN1_RXIMR55
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,55)

	)

4104 
	#CAN1_RXIMR56
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,56)

	)

4105 
	#CAN1_RXIMR57
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,57)

	)

4106 
	#CAN1_RXIMR58
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,58)

	)

4107 
	#CAN1_RXIMR59
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,59)

	)

4108 
	#CAN1_RXIMR60
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,60)

	)

4109 
	#CAN1_RXIMR61
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,61)

	)

4110 
	#CAN1_RXIMR62
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,62)

	)

4111 
	#CAN1_RXIMR63
 
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,63)

	)

4112 
	#CAN1_GFWR
 
	`CAN_GFWR_REG
(
CAN1_BASE_PTR
)

	)

4114 
	#CAN2_MCR
 
	`CAN_MCR_REG
(
CAN2_BASE_PTR
)

	)

4115 
	#CAN2_CTRL1
 
	`CAN_CTRL1_REG
(
CAN2_BASE_PTR
)

	)

4116 
	#CAN2_TIMER
 
	`CAN_TIMER_REG
(
CAN2_BASE_PTR
)

	)

4117 
	#CAN2_RXMGMASK
 
	`CAN_RXMGMASK_REG
(
CAN2_BASE_PTR
)

	)

4118 
	#CAN2_RX14MASK
 
	`CAN_RX14MASK_REG
(
CAN2_BASE_PTR
)

	)

4119 
	#CAN2_RX15MASK
 
	`CAN_RX15MASK_REG
(
CAN2_BASE_PTR
)

	)

4120 
	#CAN2_ECR
 
	`CAN_ECR_REG
(
CAN2_BASE_PTR
)

	)

4121 
	#CAN2_ESR1
 
	`CAN_ESR1_REG
(
CAN2_BASE_PTR
)

	)

4122 
	#CAN2_IMASK2
 
	`CAN_IMASK2_REG
(
CAN2_BASE_PTR
)

	)

4123 
	#CAN2_IMASK1
 
	`CAN_IMASK1_REG
(
CAN2_BASE_PTR
)

	)

4124 
	#CAN2_IFLAG2
 
	`CAN_IFLAG2_REG
(
CAN2_BASE_PTR
)

	)

4125 
	#CAN2_IFLAG1
 
	`CAN_IFLAG1_REG
(
CAN2_BASE_PTR
)

	)

4126 
	#CAN2_CTRL2
 
	`CAN_CTRL2_REG
(
CAN2_BASE_PTR
)

	)

4127 
	#CAN2_ESR2
 
	`CAN_ESR2_REG
(
CAN2_BASE_PTR
)

	)

4128 
	#CAN2_CRCR
 
	`CAN_CRCR_REG
(
CAN2_BASE_PTR
)

	)

4129 
	#CAN2_RXFGMASK
 
	`CAN_RXFGMASK_REG
(
CAN2_BASE_PTR
)

	)

4130 
	#CAN2_RXFIR
 
	`CAN_RXFIR_REG
(
CAN2_BASE_PTR
)

	)

4131 
	#CAN2_CS0
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,0)

	)

4132 
	#CAN2_ID0
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,0)

	)

4133 
	#CAN2_WORD00
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,0)

	)

4134 
	#CAN2_WORD10
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,0)

	)

4135 
	#CAN2_CS1
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,1)

	)

4136 
	#CAN2_ID1
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,1)

	)

4137 
	#CAN2_WORD01
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,1)

	)

4138 
	#CAN2_WORD11
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,1)

	)

4139 
	#CAN2_CS2
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,2)

	)

4140 
	#CAN2_ID2
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,2)

	)

4141 
	#CAN2_WORD02
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,2)

	)

4142 
	#CAN2_WORD12
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,2)

	)

4143 
	#CAN2_CS3
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,3)

	)

4144 
	#CAN2_ID3
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,3)

	)

4145 
	#CAN2_WORD03
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,3)

	)

4146 
	#CAN2_WORD13
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,3)

	)

4147 
	#CAN2_CS4
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,4)

	)

4148 
	#CAN2_ID4
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,4)

	)

4149 
	#CAN2_WORD04
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,4)

	)

4150 
	#CAN2_WORD14
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,4)

	)

4151 
	#CAN2_CS5
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,5)

	)

4152 
	#CAN2_ID5
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,5)

	)

4153 
	#CAN2_WORD05
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,5)

	)

4154 
	#CAN2_WORD15
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,5)

	)

4155 
	#CAN2_CS6
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,6)

	)

4156 
	#CAN2_ID6
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,6)

	)

4157 
	#CAN2_WORD06
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,6)

	)

4158 
	#CAN2_WORD16
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,6)

	)

4159 
	#CAN2_CS7
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,7)

	)

4160 
	#CAN2_ID7
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,7)

	)

4161 
	#CAN2_WORD07
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,7)

	)

4162 
	#CAN2_WORD17
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,7)

	)

4163 
	#CAN2_CS8
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,8)

	)

4164 
	#CAN2_ID8
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,8)

	)

4165 
	#CAN2_WORD08
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,8)

	)

4166 
	#CAN2_WORD18
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,8)

	)

4167 
	#CAN2_CS9
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,9)

	)

4168 
	#CAN2_ID9
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,9)

	)

4169 
	#CAN2_WORD09
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,9)

	)

4170 
	#CAN2_WORD19
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,9)

	)

4171 
	#CAN2_CS10
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,10)

	)

4172 
	#CAN2_ID10
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,10)

	)

4173 
	#CAN2_WORD010
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,10)

	)

4174 
	#CAN2_WORD110
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,10)

	)

4175 
	#CAN2_CS11
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,11)

	)

4176 
	#CAN2_ID11
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,11)

	)

4177 
	#CAN2_WORD011
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,11)

	)

4178 
	#CAN2_WORD111
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,11)

	)

4179 
	#CAN2_CS12
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,12)

	)

4180 
	#CAN2_ID12
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,12)

	)

4181 
	#CAN2_WORD012
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,12)

	)

4182 
	#CAN2_WORD112
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,12)

	)

4183 
	#CAN2_CS13
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,13)

	)

4184 
	#CAN2_ID13
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,13)

	)

4185 
	#CAN2_WORD013
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,13)

	)

4186 
	#CAN2_WORD113
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,13)

	)

4187 
	#CAN2_CS14
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,14)

	)

4188 
	#CAN2_ID14
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,14)

	)

4189 
	#CAN2_WORD014
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,14)

	)

4190 
	#CAN2_WORD114
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,14)

	)

4191 
	#CAN2_CS15
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,15)

	)

4192 
	#CAN2_ID15
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,15)

	)

4193 
	#CAN2_WORD015
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,15)

	)

4194 
	#CAN2_WORD115
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,15)

	)

4195 
	#CAN2_CS16
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,16)

	)

4196 
	#CAN2_ID16
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,16)

	)

4197 
	#CAN2_WORD016
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,16)

	)

4198 
	#CAN2_WORD116
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,16)

	)

4199 
	#CAN2_CS17
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,17)

	)

4200 
	#CAN2_ID17
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,17)

	)

4201 
	#CAN2_WORD017
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,17)

	)

4202 
	#CAN2_WORD117
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,17)

	)

4203 
	#CAN2_CS18
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,18)

	)

4204 
	#CAN2_ID18
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,18)

	)

4205 
	#CAN2_WORD018
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,18)

	)

4206 
	#CAN2_WORD118
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,18)

	)

4207 
	#CAN2_CS19
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,19)

	)

4208 
	#CAN2_ID19
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,19)

	)

4209 
	#CAN2_WORD019
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,19)

	)

4210 
	#CAN2_WORD119
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,19)

	)

4211 
	#CAN2_CS20
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,20)

	)

4212 
	#CAN2_ID20
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,20)

	)

4213 
	#CAN2_WORD020
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,20)

	)

4214 
	#CAN2_WORD120
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,20)

	)

4215 
	#CAN2_CS21
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,21)

	)

4216 
	#CAN2_ID21
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,21)

	)

4217 
	#CAN2_WORD021
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,21)

	)

4218 
	#CAN2_WORD121
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,21)

	)

4219 
	#CAN2_CS22
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,22)

	)

4220 
	#CAN2_ID22
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,22)

	)

4221 
	#CAN2_WORD022
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,22)

	)

4222 
	#CAN2_WORD122
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,22)

	)

4223 
	#CAN2_CS23
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,23)

	)

4224 
	#CAN2_ID23
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,23)

	)

4225 
	#CAN2_WORD023
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,23)

	)

4226 
	#CAN2_WORD123
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,23)

	)

4227 
	#CAN2_CS24
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,24)

	)

4228 
	#CAN2_ID24
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,24)

	)

4229 
	#CAN2_WORD024
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,24)

	)

4230 
	#CAN2_WORD124
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,24)

	)

4231 
	#CAN2_CS25
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,25)

	)

4232 
	#CAN2_ID25
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,25)

	)

4233 
	#CAN2_WORD025
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,25)

	)

4234 
	#CAN2_WORD125
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,25)

	)

4235 
	#CAN2_CS26
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,26)

	)

4236 
	#CAN2_ID26
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,26)

	)

4237 
	#CAN2_WORD026
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,26)

	)

4238 
	#CAN2_WORD126
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,26)

	)

4239 
	#CAN2_CS27
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,27)

	)

4240 
	#CAN2_ID27
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,27)

	)

4241 
	#CAN2_WORD027
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,27)

	)

4242 
	#CAN2_WORD127
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,27)

	)

4243 
	#CAN2_CS28
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,28)

	)

4244 
	#CAN2_ID28
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,28)

	)

4245 
	#CAN2_WORD028
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,28)

	)

4246 
	#CAN2_WORD128
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,28)

	)

4247 
	#CAN2_CS29
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,29)

	)

4248 
	#CAN2_ID29
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,29)

	)

4249 
	#CAN2_WORD029
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,29)

	)

4250 
	#CAN2_WORD129
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,29)

	)

4251 
	#CAN2_CS30
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,30)

	)

4252 
	#CAN2_ID30
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,30)

	)

4253 
	#CAN2_WORD030
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,30)

	)

4254 
	#CAN2_WORD130
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,30)

	)

4255 
	#CAN2_CS31
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,31)

	)

4256 
	#CAN2_ID31
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,31)

	)

4257 
	#CAN2_WORD031
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,31)

	)

4258 
	#CAN2_WORD131
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,31)

	)

4259 
	#CAN2_CS32
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,32)

	)

4260 
	#CAN2_ID32
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,32)

	)

4261 
	#CAN2_WORD032
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,32)

	)

4262 
	#CAN2_WORD132
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,32)

	)

4263 
	#CAN2_CS33
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,33)

	)

4264 
	#CAN2_ID33
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,33)

	)

4265 
	#CAN2_WORD033
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,33)

	)

4266 
	#CAN2_WORD133
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,33)

	)

4267 
	#CAN2_CS34
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,34)

	)

4268 
	#CAN2_ID34
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,34)

	)

4269 
	#CAN2_WORD034
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,34)

	)

4270 
	#CAN2_WORD134
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,34)

	)

4271 
	#CAN2_CS35
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,35)

	)

4272 
	#CAN2_ID35
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,35)

	)

4273 
	#CAN2_WORD035
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,35)

	)

4274 
	#CAN2_WORD135
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,35)

	)

4275 
	#CAN2_CS36
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,36)

	)

4276 
	#CAN2_ID36
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,36)

	)

4277 
	#CAN2_WORD036
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,36)

	)

4278 
	#CAN2_WORD136
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,36)

	)

4279 
	#CAN2_CS37
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,37)

	)

4280 
	#CAN2_ID37
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,37)

	)

4281 
	#CAN2_WORD037
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,37)

	)

4282 
	#CAN2_WORD137
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,37)

	)

4283 
	#CAN2_CS38
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,38)

	)

4284 
	#CAN2_ID38
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,38)

	)

4285 
	#CAN2_WORD038
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,38)

	)

4286 
	#CAN2_WORD138
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,38)

	)

4287 
	#CAN2_CS39
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,39)

	)

4288 
	#CAN2_ID39
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,39)

	)

4289 
	#CAN2_WORD039
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,39)

	)

4290 
	#CAN2_WORD139
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,39)

	)

4291 
	#CAN2_CS40
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,40)

	)

4292 
	#CAN2_ID40
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,40)

	)

4293 
	#CAN2_WORD040
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,40)

	)

4294 
	#CAN2_WORD140
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,40)

	)

4295 
	#CAN2_CS41
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,41)

	)

4296 
	#CAN2_ID41
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,41)

	)

4297 
	#CAN2_WORD041
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,41)

	)

4298 
	#CAN2_WORD141
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,41)

	)

4299 
	#CAN2_CS42
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,42)

	)

4300 
	#CAN2_ID42
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,42)

	)

4301 
	#CAN2_WORD042
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,42)

	)

4302 
	#CAN2_WORD142
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,42)

	)

4303 
	#CAN2_CS43
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,43)

	)

4304 
	#CAN2_ID43
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,43)

	)

4305 
	#CAN2_WORD043
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,43)

	)

4306 
	#CAN2_WORD143
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,43)

	)

4307 
	#CAN2_CS44
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,44)

	)

4308 
	#CAN2_ID44
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,44)

	)

4309 
	#CAN2_WORD044
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,44)

	)

4310 
	#CAN2_WORD144
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,44)

	)

4311 
	#CAN2_CS45
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,45)

	)

4312 
	#CAN2_ID45
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,45)

	)

4313 
	#CAN2_WORD045
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,45)

	)

4314 
	#CAN2_WORD145
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,45)

	)

4315 
	#CAN2_CS46
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,46)

	)

4316 
	#CAN2_ID46
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,46)

	)

4317 
	#CAN2_WORD046
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,46)

	)

4318 
	#CAN2_WORD146
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,46)

	)

4319 
	#CAN2_CS47
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,47)

	)

4320 
	#CAN2_ID47
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,47)

	)

4321 
	#CAN2_WORD047
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,47)

	)

4322 
	#CAN2_WORD147
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,47)

	)

4323 
	#CAN2_CS48
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,48)

	)

4324 
	#CAN2_ID48
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,48)

	)

4325 
	#CAN2_WORD048
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,48)

	)

4326 
	#CAN2_WORD148
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,48)

	)

4327 
	#CAN2_CS49
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,49)

	)

4328 
	#CAN2_ID49
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,49)

	)

4329 
	#CAN2_WORD049
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,49)

	)

4330 
	#CAN2_WORD149
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,49)

	)

4331 
	#CAN2_CS50
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,50)

	)

4332 
	#CAN2_ID50
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,50)

	)

4333 
	#CAN2_WORD050
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,50)

	)

4334 
	#CAN2_WORD150
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,50)

	)

4335 
	#CAN2_CS51
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,51)

	)

4336 
	#CAN2_ID51
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,51)

	)

4337 
	#CAN2_WORD051
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,51)

	)

4338 
	#CAN2_WORD151
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,51)

	)

4339 
	#CAN2_CS52
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,52)

	)

4340 
	#CAN2_ID52
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,52)

	)

4341 
	#CAN2_WORD052
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,52)

	)

4342 
	#CAN2_WORD152
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,52)

	)

4343 
	#CAN2_CS53
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,53)

	)

4344 
	#CAN2_ID53
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,53)

	)

4345 
	#CAN2_WORD053
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,53)

	)

4346 
	#CAN2_WORD153
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,53)

	)

4347 
	#CAN2_CS54
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,54)

	)

4348 
	#CAN2_ID54
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,54)

	)

4349 
	#CAN2_WORD054
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,54)

	)

4350 
	#CAN2_WORD154
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,54)

	)

4351 
	#CAN2_CS55
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,55)

	)

4352 
	#CAN2_ID55
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,55)

	)

4353 
	#CAN2_WORD055
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,55)

	)

4354 
	#CAN2_WORD155
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,55)

	)

4355 
	#CAN2_CS56
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,56)

	)

4356 
	#CAN2_ID56
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,56)

	)

4357 
	#CAN2_WORD056
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,56)

	)

4358 
	#CAN2_WORD156
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,56)

	)

4359 
	#CAN2_CS57
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,57)

	)

4360 
	#CAN2_ID57
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,57)

	)

4361 
	#CAN2_WORD057
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,57)

	)

4362 
	#CAN2_WORD157
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,57)

	)

4363 
	#CAN2_CS58
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,58)

	)

4364 
	#CAN2_ID58
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,58)

	)

4365 
	#CAN2_WORD058
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,58)

	)

4366 
	#CAN2_WORD158
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,58)

	)

4367 
	#CAN2_CS59
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,59)

	)

4368 
	#CAN2_ID59
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,59)

	)

4369 
	#CAN2_WORD059
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,59)

	)

4370 
	#CAN2_WORD159
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,59)

	)

4371 
	#CAN2_CS60
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,60)

	)

4372 
	#CAN2_ID60
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,60)

	)

4373 
	#CAN2_WORD060
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,60)

	)

4374 
	#CAN2_WORD160
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,60)

	)

4375 
	#CAN2_CS61
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,61)

	)

4376 
	#CAN2_ID61
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,61)

	)

4377 
	#CAN2_WORD061
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,61)

	)

4378 
	#CAN2_WORD161
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,61)

	)

4379 
	#CAN2_CS62
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,62)

	)

4380 
	#CAN2_ID62
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,62)

	)

4381 
	#CAN2_WORD062
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,62)

	)

4382 
	#CAN2_WORD162
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,62)

	)

4383 
	#CAN2_CS63
 
	`CAN_CS_REG
(
CAN2_BASE_PTR
,63)

	)

4384 
	#CAN2_ID63
 
	`CAN_ID_REG
(
CAN2_BASE_PTR
,63)

	)

4385 
	#CAN2_WORD063
 
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,63)

	)

4386 
	#CAN2_WORD163
 
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,63)

	)

4387 
	#CAN2_RXIMR0
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,0)

	)

4388 
	#CAN2_RXIMR1
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,1)

	)

4389 
	#CAN2_RXIMR2
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,2)

	)

4390 
	#CAN2_RXIMR3
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,3)

	)

4391 
	#CAN2_RXIMR4
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,4)

	)

4392 
	#CAN2_RXIMR5
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,5)

	)

4393 
	#CAN2_RXIMR6
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,6)

	)

4394 
	#CAN2_RXIMR7
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,7)

	)

4395 
	#CAN2_RXIMR8
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,8)

	)

4396 
	#CAN2_RXIMR9
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,9)

	)

4397 
	#CAN2_RXIMR10
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,10)

	)

4398 
	#CAN2_RXIMR11
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,11)

	)

4399 
	#CAN2_RXIMR12
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,12)

	)

4400 
	#CAN2_RXIMR13
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,13)

	)

4401 
	#CAN2_RXIMR14
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,14)

	)

4402 
	#CAN2_RXIMR15
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,15)

	)

4403 
	#CAN2_RXIMR16
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,16)

	)

4404 
	#CAN2_RXIMR17
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,17)

	)

4405 
	#CAN2_RXIMR18
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,18)

	)

4406 
	#CAN2_RXIMR19
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,19)

	)

4407 
	#CAN2_RXIMR20
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,20)

	)

4408 
	#CAN2_RXIMR21
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,21)

	)

4409 
	#CAN2_RXIMR22
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,22)

	)

4410 
	#CAN2_RXIMR23
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,23)

	)

4411 
	#CAN2_RXIMR24
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,24)

	)

4412 
	#CAN2_RXIMR25
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,25)

	)

4413 
	#CAN2_RXIMR26
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,26)

	)

4414 
	#CAN2_RXIMR27
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,27)

	)

4415 
	#CAN2_RXIMR28
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,28)

	)

4416 
	#CAN2_RXIMR29
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,29)

	)

4417 
	#CAN2_RXIMR30
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,30)

	)

4418 
	#CAN2_RXIMR31
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,31)

	)

4419 
	#CAN2_RXIMR32
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,32)

	)

4420 
	#CAN2_RXIMR33
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,33)

	)

4421 
	#CAN2_RXIMR34
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,34)

	)

4422 
	#CAN2_RXIMR35
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,35)

	)

4423 
	#CAN2_RXIMR36
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,36)

	)

4424 
	#CAN2_RXIMR37
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,37)

	)

4425 
	#CAN2_RXIMR38
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,38)

	)

4426 
	#CAN2_RXIMR39
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,39)

	)

4427 
	#CAN2_RXIMR40
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,40)

	)

4428 
	#CAN2_RXIMR41
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,41)

	)

4429 
	#CAN2_RXIMR42
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,42)

	)

4430 
	#CAN2_RXIMR43
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,43)

	)

4431 
	#CAN2_RXIMR44
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,44)

	)

4432 
	#CAN2_RXIMR45
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,45)

	)

4433 
	#CAN2_RXIMR46
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,46)

	)

4434 
	#CAN2_RXIMR47
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,47)

	)

4435 
	#CAN2_RXIMR48
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,48)

	)

4436 
	#CAN2_RXIMR49
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,49)

	)

4437 
	#CAN2_RXIMR50
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,50)

	)

4438 
	#CAN2_RXIMR51
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,51)

	)

4439 
	#CAN2_RXIMR52
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,52)

	)

4440 
	#CAN2_RXIMR53
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,53)

	)

4441 
	#CAN2_RXIMR54
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,54)

	)

4442 
	#CAN2_RXIMR55
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,55)

	)

4443 
	#CAN2_RXIMR56
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,56)

	)

4444 
	#CAN2_RXIMR57
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,57)

	)

4445 
	#CAN2_RXIMR58
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,58)

	)

4446 
	#CAN2_RXIMR59
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,59)

	)

4447 
	#CAN2_RXIMR60
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,60)

	)

4448 
	#CAN2_RXIMR61
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,61)

	)

4449 
	#CAN2_RXIMR62
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,62)

	)

4450 
	#CAN2_RXIMR63
 
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,63)

	)

4451 
	#CAN2_GFWR
 
	`CAN_GFWR_REG
(
CAN2_BASE_PTR
)

	)

4453 
	#CAN1_CS
(
ödex
Ë
	`CAN_CS_REG
(
CAN1_BASE_PTR
,ödex)

	)

4454 
	#CAN2_CS
(
ödex
Ë
	`CAN_CS_REG
(
CAN2_BASE_PTR
,ödex)

	)

4455 
	#CAN1_ID
(
ödex
Ë
	`CAN_ID_REG
(
CAN1_BASE_PTR
,ödex)

	)

4456 
	#CAN2_ID
(
ödex
Ë
	`CAN_ID_REG
(
CAN2_BASE_PTR
,ödex)

	)

4457 
	#CAN1_WORD0
(
ödex
Ë
	`CAN_WORD0_REG
(
CAN1_BASE_PTR
,ödex)

	)

4458 
	#CAN2_WORD0
(
ödex
Ë
	`CAN_WORD0_REG
(
CAN2_BASE_PTR
,ödex)

	)

4459 
	#CAN1_WORD1
(
ödex
Ë
	`CAN_WORD1_REG
(
CAN1_BASE_PTR
,ödex)

	)

4460 
	#CAN2_WORD1
(
ödex
Ë
	`CAN_WORD1_REG
(
CAN2_BASE_PTR
,ödex)

	)

4461 
	#CAN1_RXIMR
(
ödex
Ë
	`CAN_RXIMR_REG
(
CAN1_BASE_PTR
,ödex)

	)

4462 
	#CAN2_RXIMR
(
ödex
Ë
	`CAN_RXIMR_REG
(
CAN2_BASE_PTR
,ödex)

	)

4483 
__IO
 
uöt32_t
 
	mCCR
;

4484 
__IO
 
uöt32_t
 
	mCCDR
;

4485 
__I
 
uöt32_t
 
	mCSR
;

4486 
__IO
 
uöt32_t
 
	mCCSR
;

4487 
__IO
 
uöt32_t
 
	mCACRR
;

4488 
__IO
 
uöt32_t
 
	mCBCDR
;

4489 
__IO
 
uöt32_t
 
	mCBCMR
;

4490 
__IO
 
uöt32_t
 
	mCSCMR1
;

4491 
__IO
 
uöt32_t
 
	mCSCMR2
;

4492 
__IO
 
uöt32_t
 
	mCSCDR1
;

4493 
__IO
 
uöt32_t
 
	mCS1CDR
;

4494 
__IO
 
uöt32_t
 
	mCS2CDR
;

4495 
__IO
 
uöt32_t
 
	mCDCDR
;

4496 
__IO
 
uöt32_t
 
	mCHSCCDR
;

4497 
__IO
 
uöt32_t
 
	mCSCDR2
;

4498 
__IO
 
uöt32_t
 
	mCSCDR3
;

4499 
uöt8_t
 
	mRESERVED_0
[4];

4500 
__IO
 
uöt32_t
 
	mCWDR
;

4501 
__I
 
uöt32_t
 
	mCDHIPR
;

4502 
uöt8_t
 
	mRESERVED_1
[8];

4503 
__IO
 
uöt32_t
 
	mCLPCR
;

4504 
__IO
 
uöt32_t
 
	mCISR
;

4505 
__IO
 
uöt32_t
 
	mCIMR
;

4506 
__IO
 
uöt32_t
 
	mCCOSR
;

4507 
__IO
 
uöt32_t
 
	mCGPR
;

4508 
__IO
 
uöt32_t
 
	mCCGR0
;

4509 
__IO
 
uöt32_t
 
	mCCGR1
;

4510 
__IO
 
uöt32_t
 
	mCCGR2
;

4511 
__IO
 
uöt32_t
 
	mCCGR3
;

4512 
__IO
 
uöt32_t
 
	mCCGR4
;

4513 
__IO
 
uöt32_t
 
	mCCGR5
;

4514 
__IO
 
uöt32_t
 
	mCCGR6
;

4515 
uöt8_t
 
	mRESERVED_2
[4];

4516 
__IO
 
uöt32_t
 
	mCMEOR
;

4517 } 
	tCCM_Ty≥
, *
	tCCM_MemM≠På
;

4529 
	#CCM_CCR_REG
(
ba£
Ë((ba£)->
CCR
)

	)

4530 
	#CCM_CCDR_REG
(
ba£
Ë((ba£)->
CCDR
)

	)

4531 
	#CCM_CSR_REG
(
ba£
Ë((ba£)->
CSR
)

	)

4532 
	#CCM_CCSR_REG
(
ba£
Ë((ba£)->
CCSR
)

	)

4533 
	#CCM_CACRR_REG
(
ba£
Ë((ba£)->
CACRR
)

	)

4534 
	#CCM_CBCDR_REG
(
ba£
Ë((ba£)->
CBCDR
)

	)

4535 
	#CCM_CBCMR_REG
(
ba£
Ë((ba£)->
CBCMR
)

	)

4536 
	#CCM_CSCMR1_REG
(
ba£
Ë((ba£)->
CSCMR1
)

	)

4537 
	#CCM_CSCMR2_REG
(
ba£
Ë((ba£)->
CSCMR2
)

	)

4538 
	#CCM_CSCDR1_REG
(
ba£
Ë((ba£)->
CSCDR1
)

	)

4539 
	#CCM_CS1CDR_REG
(
ba£
Ë((ba£)->
CS1CDR
)

	)

4540 
	#CCM_CS2CDR_REG
(
ba£
Ë((ba£)->
CS2CDR
)

	)

4541 
	#CCM_CDCDR_REG
(
ba£
Ë((ba£)->
CDCDR
)

	)

4542 
	#CCM_CHSCCDR_REG
(
ba£
Ë((ba£)->
CHSCCDR
)

	)

4543 
	#CCM_CSCDR2_REG
(
ba£
Ë((ba£)->
CSCDR2
)

	)

4544 
	#CCM_CSCDR3_REG
(
ba£
Ë((ba£)->
CSCDR3
)

	)

4545 
	#CCM_CWDR_REG
(
ba£
Ë((ba£)->
CWDR
)

	)

4546 
	#CCM_CDHIPR_REG
(
ba£
Ë((ba£)->
CDHIPR
)

	)

4547 
	#CCM_CLPCR_REG
(
ba£
Ë((ba£)->
CLPCR
)

	)

4548 
	#CCM_CISR_REG
(
ba£
Ë((ba£)->
CISR
)

	)

4549 
	#CCM_CIMR_REG
(
ba£
Ë((ba£)->
CIMR
)

	)

4550 
	#CCM_CCOSR_REG
(
ba£
Ë((ba£)->
CCOSR
)

	)

4551 
	#CCM_CGPR_REG
(
ba£
Ë((ba£)->
CGPR
)

	)

4552 
	#CCM_CCGR0_REG
(
ba£
Ë((ba£)->
CCGR0
)

	)

4553 
	#CCM_CCGR1_REG
(
ba£
Ë((ba£)->
CCGR1
)

	)

4554 
	#CCM_CCGR2_REG
(
ba£
Ë((ba£)->
CCGR2
)

	)

4555 
	#CCM_CCGR3_REG
(
ba£
Ë((ba£)->
CCGR3
)

	)

4556 
	#CCM_CCGR4_REG
(
ba£
Ë((ba£)->
CCGR4
)

	)

4557 
	#CCM_CCGR5_REG
(
ba£
Ë((ba£)->
CCGR5
)

	)

4558 
	#CCM_CCGR6_REG
(
ba£
Ë((ba£)->
CCGR6
)

	)

4559 
	#CCM_CMEOR_REG
(
ba£
Ë((ba£)->
CMEOR
)

	)

4575 
	#CCM_CCR_OSCNT_MASK
 0x7Fu

	)

4576 
	#CCM_CCR_OSCNT_SHIFT
 0

	)

4577 
	#CCM_CCR_OSCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCR_OSCNT_SHIFT
))&
CCM_CCR_OSCNT_MASK
)

	)

4578 
	#CCM_CCR_COSC_EN_MASK
 0x1000u

	)

4579 
	#CCM_CCR_COSC_EN_SHIFT
 12

	)

4580 
	#CCM_CCR_REG_BYPASS_COUNT_MASK
 0x7E00000u

	)

4581 
	#CCM_CCR_REG_BYPASS_COUNT_SHIFT
 21

	)

4582 
	#CCM_CCR_REG_BYPASS_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCR_REG_BYPASS_COUNT_SHIFT
))&
CCM_CCR_REG_BYPASS_COUNT_MASK
)

	)

4583 
	#CCM_CCR_RBC_EN_MASK
 0x8000000u

	)

4584 
	#CCM_CCR_RBC_EN_SHIFT
 27

	)

4586 
	#CCM_CCDR_mmdc_mask_MASK
 0x10000u

	)

4587 
	#CCM_CCDR_mmdc_mask_SHIFT
 16

	)

4589 
	#CCM_CSR_REF_EN_B_MASK
 0x1u

	)

4590 
	#CCM_CSR_REF_EN_B_SHIFT
 0

	)

4591 
	#CCM_CSR_cosc_ªady_MASK
 0x20u

	)

4592 
	#CCM_CSR_cosc_ªady_SHIFT
 5

	)

4594 
	#CCM_CCSR_∂l3_sw_˛k_£l_MASK
 0x1u

	)

4595 
	#CCM_CCSR_∂l3_sw_˛k_£l_SHIFT
 0

	)

4596 
	#CCM_CCSR_∂l1_sw_˛k_£l_MASK
 0x4u

	)

4597 
	#CCM_CCSR_∂l1_sw_˛k_£l_SHIFT
 2

	)

4598 
	#CCM_CCSR_°ï_£l_MASK
 0x100u

	)

4599 
	#CCM_CCSR_°ï_£l_SHIFT
 8

	)

4601 
	#CCM_CACRR_¨m_podf_MASK
 0x7u

	)

4602 
	#CCM_CACRR_¨m_podf_SHIFT
 0

	)

4603 
	#CCM_CACRR_¨m_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CACRR_¨m_podf_SHIFT
))&
CCM_CACRR_¨m_podf_MASK
)

	)

4605 
	#CCM_CBCDR_≥rùh2_˛k2_podf_MASK
 0x7u

	)

4606 
	#CCM_CBCDR_≥rùh2_˛k2_podf_SHIFT
 0

	)

4607 
	#CCM_CBCDR_≥rùh2_˛k2_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CBCDR_≥rùh2_˛k2_podf_SHIFT
))&
CCM_CBCDR_≥rùh2_˛k2_podf_MASK
)

	)

4608 
	#CCM_CBCDR_Ábric_mmdc_podf_MASK
 0x38u

	)

4609 
	#CCM_CBCDR_Ábric_mmdc_podf_SHIFT
 3

	)

4610 
	#CCM_CBCDR_Ábric_mmdc_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CBCDR_Ábric_mmdc_podf_SHIFT
))&
CCM_CBCDR_Ábric_mmdc_podf_MASK
)

	)

4611 
	#CCM_CBCDR_o¸am_˛k_£l_MASK
 0x40u

	)

4612 
	#CCM_CBCDR_o¸am_˛k_£l_SHIFT
 6

	)

4613 
	#CCM_CBCDR_o¸am_Æt_˛k_£l_MASK
 0x80u

	)

4614 
	#CCM_CBCDR_o¸am_Æt_˛k_£l_SHIFT
 7

	)

4615 
	#CCM_CBCDR_ùg_podf_MASK
 0x300u

	)

4616 
	#CCM_CBCDR_ùg_podf_SHIFT
 8

	)

4617 
	#CCM_CBCDR_ùg_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CBCDR_ùg_podf_SHIFT
))&
CCM_CBCDR_ùg_podf_MASK
)

	)

4618 
	#CCM_CBCDR_ahb_podf_MASK
 0x1C00u

	)

4619 
	#CCM_CBCDR_ahb_podf_SHIFT
 10

	)

4620 
	#CCM_CBCDR_ahb_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CBCDR_ahb_podf_SHIFT
))&
CCM_CBCDR_ahb_podf_MASK
)

	)

4621 
	#CCM_CBCDR_o¸am_podf_MASK
 0x70000u

	)

4622 
	#CCM_CBCDR_o¸am_podf_SHIFT
 16

	)

4623 
	#CCM_CBCDR_o¸am_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CBCDR_o¸am_podf_SHIFT
))&
CCM_CBCDR_o¸am_podf_MASK
)

	)

4624 
	#CCM_CBCDR_≥rùh_˛k_£l_MASK
 0x2000000u

	)

4625 
	#CCM_CBCDR_≥rùh_˛k_£l_SHIFT
 25

	)

4626 
	#CCM_CBCDR_≥rùh2_˛k_£l_MASK
 0x4000000u

	)

4627 
	#CCM_CBCDR_≥rùh2_˛k_£l_SHIFT
 26

	)

4628 
	#CCM_CBCDR_≥rùh_˛k2_podf_MASK
 0x38000000u

	)

4629 
	#CCM_CBCDR_≥rùh_˛k2_podf_SHIFT
 27

	)

4630 
	#CCM_CBCDR_≥rùh_˛k2_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CBCDR_≥rùh_˛k2_podf_SHIFT
))&
CCM_CBCDR_≥rùh_˛k2_podf_MASK
)

	)

4632 
	#CCM_CBCMR_gpu_c‹e_£l_MASK
 0x30u

	)

4633 
	#CCM_CBCMR_gpu_c‹e_£l_SHIFT
 4

	)

4634 
	#CCM_CBCMR_gpu_c‹e_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CBCMR_gpu_c‹e_£l_SHIFT
))&
CCM_CBCMR_gpu_c‹e_£l_MASK
)

	)

4635 
	#CCM_CBCMR_gpu_axi_£l_MASK
 0x300u

	)

4636 
	#CCM_CBCMR_gpu_axi_£l_SHIFT
 8

	)

4637 
	#CCM_CBCMR_gpu_axi_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CBCMR_gpu_axi_£l_SHIFT
))&
CCM_CBCMR_gpu_axi_£l_MASK
)

	)

4638 
	#CCM_CBCMR_pcõ_axi_˛k_£l_MASK
 0x400u

	)

4639 
	#CCM_CBCMR_pcõ_axi_˛k_£l_SHIFT
 10

	)

4640 
	#CCM_CBCMR_≥rùh_˛k2_£l_MASK
 0x3000u

	)

4641 
	#CCM_CBCMR_≥rùh_˛k2_£l_SHIFT
 12

	)

4642 
	#CCM_CBCMR_≥rùh_˛k2_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CBCMR_≥rùh_˛k2_£l_SHIFT
))&
CCM_CBCMR_≥rùh_˛k2_£l_MASK
)

	)

4643 
	#CCM_CBCMR_¥e_≥rùh_˛k_£l_MASK
 0xC0000u

	)

4644 
	#CCM_CBCMR_¥e_≥rùh_˛k_£l_SHIFT
 18

	)

4645 
	#CCM_CBCMR_¥e_≥rùh_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CBCMR_¥e_≥rùh_˛k_£l_SHIFT
))&
CCM_CBCMR_¥e_≥rùh_˛k_£l_MASK
)

	)

4646 
	#CCM_CBCMR_≥rùh2_˛k2_£l_MASK
 0x100000u

	)

4647 
	#CCM_CBCMR_≥rùh2_˛k2_£l_SHIFT
 20

	)

4648 
	#CCM_CBCMR_¥e_≥rùh2_˛k_£l_MASK
 0x600000u

	)

4649 
	#CCM_CBCMR_¥e_≥rùh2_˛k_£l_SHIFT
 21

	)

4650 
	#CCM_CBCMR_¥e_≥rùh2_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CBCMR_¥e_≥rùh2_˛k_£l_SHIFT
))&
CCM_CBCMR_¥e_≥rùh2_˛k_£l_MASK
)

	)

4651 
	#CCM_CBCMR_lcdif1_podf_MASK
 0x3800000u

	)

4652 
	#CCM_CBCMR_lcdif1_podf_SHIFT
 23

	)

4653 
	#CCM_CBCMR_lcdif1_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CBCMR_lcdif1_podf_SHIFT
))&
CCM_CBCMR_lcdif1_podf_MASK
)

	)

4654 
	#CCM_CBCMR_gpu_axi_podf_MASK
 0x1C000000u

	)

4655 
	#CCM_CBCMR_gpu_axi_podf_SHIFT
 26

	)

4656 
	#CCM_CBCMR_gpu_axi_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CBCMR_gpu_axi_podf_SHIFT
))&
CCM_CBCMR_gpu_axi_podf_MASK
)

	)

4657 
	#CCM_CBCMR_gpu_c‹e_podf_MASK
 0xE0000000u

	)

4658 
	#CCM_CBCMR_gpu_c‹e_podf_SHIFT
 29

	)

4659 
	#CCM_CBCMR_gpu_c‹e_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CBCMR_gpu_c‹e_podf_SHIFT
))&
CCM_CBCMR_gpu_c‹e_podf_MASK
)

	)

4661 
	#CCM_CSCMR1_≥r˛k_podf_MASK
 0x3Fu

	)

4662 
	#CCM_CSCMR1_≥r˛k_podf_SHIFT
 0

	)

4663 
	#CCM_CSCMR1_≥r˛k_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCMR1_≥r˛k_podf_SHIFT
))&
CCM_CSCMR1_≥r˛k_podf_MASK
)

	)

4664 
	#CCM_CSCMR1_≥r˛k_˛k_£l_MASK
 0x40u

	)

4665 
	#CCM_CSCMR1_≥r˛k_˛k_£l_SHIFT
 6

	)

4666 
	#CCM_CSCMR1_q•i1_£l_MASK
 0x380u

	)

4667 
	#CCM_CSCMR1_q•i1_£l_SHIFT
 7

	)

4668 
	#CCM_CSCMR1_q•i1_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCMR1_q•i1_£l_SHIFT
))&
CCM_CSCMR1_q•i1_£l_MASK
)

	)

4669 
	#CCM_CSCMR1_ssi1_˛k_£l_MASK
 0xC00u

	)

4670 
	#CCM_CSCMR1_ssi1_˛k_£l_SHIFT
 10

	)

4671 
	#CCM_CSCMR1_ssi1_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCMR1_ssi1_˛k_£l_SHIFT
))&
CCM_CSCMR1_ssi1_˛k_£l_MASK
)

	)

4672 
	#CCM_CSCMR1_ssi2_˛k_£l_MASK
 0x3000u

	)

4673 
	#CCM_CSCMR1_ssi2_˛k_£l_SHIFT
 12

	)

4674 
	#CCM_CSCMR1_ssi2_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCMR1_ssi2_˛k_£l_SHIFT
))&
CCM_CSCMR1_ssi2_˛k_£l_MASK
)

	)

4675 
	#CCM_CSCMR1_ssi3_˛k_£l_MASK
 0xC000u

	)

4676 
	#CCM_CSCMR1_ssi3_˛k_£l_SHIFT
 14

	)

4677 
	#CCM_CSCMR1_ssi3_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCMR1_ssi3_˛k_£l_SHIFT
))&
CCM_CSCMR1_ssi3_˛k_£l_MASK
)

	)

4678 
	#CCM_CSCMR1_usdhc1_˛k_£l_MASK
 0x10000u

	)

4679 
	#CCM_CSCMR1_usdhc1_˛k_£l_SHIFT
 16

	)

4680 
	#CCM_CSCMR1_usdhc2_˛k_£l_MASK
 0x20000u

	)

4681 
	#CCM_CSCMR1_usdhc2_˛k_£l_SHIFT
 17

	)

4682 
	#CCM_CSCMR1_usdhc3_˛k_£l_MASK
 0x40000u

	)

4683 
	#CCM_CSCMR1_usdhc3_˛k_£l_SHIFT
 18

	)

4684 
	#CCM_CSCMR1_usdhc4_˛k_£l_MASK
 0x80000u

	)

4685 
	#CCM_CSCMR1_usdhc4_˛k_£l_SHIFT
 19

	)

4686 
	#CCM_CSCMR1_lcdif2_podf_MASK
 0x700000u

	)

4687 
	#CCM_CSCMR1_lcdif2_podf_SHIFT
 20

	)

4688 
	#CCM_CSCMR1_lcdif2_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCMR1_lcdif2_podf_SHIFT
))&
CCM_CSCMR1_lcdif2_podf_MASK
)

	)

4689 
	#CCM_CSCMR1_a˛k_eim_¶ow_podf_MASK
 0x3800000u

	)

4690 
	#CCM_CSCMR1_a˛k_eim_¶ow_podf_SHIFT
 23

	)

4691 
	#CCM_CSCMR1_a˛k_eim_¶ow_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCMR1_a˛k_eim_¶ow_podf_SHIFT
))&
CCM_CSCMR1_a˛k_eim_¶ow_podf_MASK
)

	)

4692 
	#CCM_CSCMR1_q•i1_podf_MASK
 0x1C000000u

	)

4693 
	#CCM_CSCMR1_q•i1_podf_SHIFT
 26

	)

4694 
	#CCM_CSCMR1_q•i1_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCMR1_q•i1_podf_SHIFT
))&
CCM_CSCMR1_q•i1_podf_MASK
)

	)

4695 
	#CCM_CSCMR1_a˛k_eim_¶ow_£l_MASK
 0x60000000u

	)

4696 
	#CCM_CSCMR1_a˛k_eim_¶ow_£l_SHIFT
 29

	)

4697 
	#CCM_CSCMR1_a˛k_eim_¶ow_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCMR1_a˛k_eim_¶ow_£l_SHIFT
))&
CCM_CSCMR1_a˛k_eim_¶ow_£l_MASK
)

	)

4699 
	#CCM_CSCMR2_ˇn_˛k_podf_MASK
 0xFCu

	)

4700 
	#CCM_CSCMR2_ˇn_˛k_podf_SHIFT
 2

	)

4701 
	#CCM_CSCMR2_ˇn_˛k_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCMR2_ˇn_˛k_podf_SHIFT
))&
CCM_CSCMR2_ˇn_˛k_podf_MASK
)

	)

4702 
	#CCM_CSCMR2_ˇn_˛k_£l_MASK
 0x300u

	)

4703 
	#CCM_CSCMR2_ˇn_˛k_£l_SHIFT
 8

	)

4704 
	#CCM_CSCMR2_ˇn_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCMR2_ˇn_˛k_£l_SHIFT
))&
CCM_CSCMR2_ˇn_˛k_£l_MASK
)

	)

4705 
	#CCM_CSCMR2_ldb_di0_div_MASK
 0x400u

	)

4706 
	#CCM_CSCMR2_ldb_di0_div_SHIFT
 10

	)

4707 
	#CCM_CSCMR2_ldb_di1_div_MASK
 0x800u

	)

4708 
	#CCM_CSCMR2_ldb_di1_div_SHIFT
 11

	)

4709 
	#CCM_CSCMR2_eßi_˛k_£l_MASK
 0x180000u

	)

4710 
	#CCM_CSCMR2_eßi_˛k_£l_SHIFT
 19

	)

4711 
	#CCM_CSCMR2_eßi_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCMR2_eßi_˛k_£l_SHIFT
))&
CCM_CSCMR2_eßi_˛k_£l_MASK
)

	)

4712 
	#CCM_CSCMR2_vid_˛k_£l_MASK
 0xE00000u

	)

4713 
	#CCM_CSCMR2_vid_˛k_£l_SHIFT
 21

	)

4714 
	#CCM_CSCMR2_vid_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCMR2_vid_˛k_£l_SHIFT
))&
CCM_CSCMR2_vid_˛k_£l_MASK
)

	)

4715 
	#CCM_CSCMR2_vid_˛k_¥e_podf_MASK
 0x3000000u

	)

4716 
	#CCM_CSCMR2_vid_˛k_¥e_podf_SHIFT
 24

	)

4717 
	#CCM_CSCMR2_vid_˛k_¥e_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCMR2_vid_˛k_¥e_podf_SHIFT
))&
CCM_CSCMR2_vid_˛k_¥e_podf_MASK
)

	)

4718 
	#CCM_CSCMR2_vid_˛k_podf_MASK
 0x1C000000u

	)

4719 
	#CCM_CSCMR2_vid_˛k_podf_SHIFT
 26

	)

4720 
	#CCM_CSCMR2_vid_˛k_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCMR2_vid_˛k_podf_SHIFT
))&
CCM_CSCMR2_vid_˛k_podf_MASK
)

	)

4722 
	#CCM_CSCDR1_u¨t_˛k_podf_MASK
 0x3Fu

	)

4723 
	#CCM_CSCDR1_u¨t_˛k_podf_SHIFT
 0

	)

4724 
	#CCM_CSCDR1_u¨t_˛k_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCDR1_u¨t_˛k_podf_SHIFT
))&
CCM_CSCDR1_u¨t_˛k_podf_MASK
)

	)

4725 
	#CCM_CSCDR1_u¨t_˛k_£l_MASK
 0x40u

	)

4726 
	#CCM_CSCDR1_u¨t_˛k_£l_SHIFT
 6

	)

4727 
	#CCM_CSCDR1_usdhc1_podf_MASK
 0x3800u

	)

4728 
	#CCM_CSCDR1_usdhc1_podf_SHIFT
 11

	)

4729 
	#CCM_CSCDR1_usdhc1_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCDR1_usdhc1_podf_SHIFT
))&
CCM_CSCDR1_usdhc1_podf_MASK
)

	)

4730 
	#CCM_CSCDR1_usdhc2_podf_MASK
 0x70000u

	)

4731 
	#CCM_CSCDR1_usdhc2_podf_SHIFT
 16

	)

4732 
	#CCM_CSCDR1_usdhc2_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCDR1_usdhc2_podf_SHIFT
))&
CCM_CSCDR1_usdhc2_podf_MASK
)

	)

4733 
	#CCM_CSCDR1_usdhc3_podf_MASK
 0x380000u

	)

4734 
	#CCM_CSCDR1_usdhc3_podf_SHIFT
 19

	)

4735 
	#CCM_CSCDR1_usdhc3_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCDR1_usdhc3_podf_SHIFT
))&
CCM_CSCDR1_usdhc3_podf_MASK
)

	)

4736 
	#CCM_CSCDR1_usdhc4_podf_MASK
 0x1C00000u

	)

4737 
	#CCM_CSCDR1_usdhc4_podf_SHIFT
 22

	)

4738 
	#CCM_CSCDR1_usdhc4_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCDR1_usdhc4_podf_SHIFT
))&
CCM_CSCDR1_usdhc4_podf_MASK
)

	)

4740 
	#CCM_CS1CDR_ssi1_˛k_podf_MASK
 0x3Fu

	)

4741 
	#CCM_CS1CDR_ssi1_˛k_podf_SHIFT
 0

	)

4742 
	#CCM_CS1CDR_ssi1_˛k_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CS1CDR_ssi1_˛k_podf_SHIFT
))&
CCM_CS1CDR_ssi1_˛k_podf_MASK
)

	)

4743 
	#CCM_CS1CDR_ssi1_˛k_¥ed_MASK
 0x1C0u

	)

4744 
	#CCM_CS1CDR_ssi1_˛k_¥ed_SHIFT
 6

	)

4745 
	#CCM_CS1CDR_ssi1_˛k_¥ed
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CS1CDR_ssi1_˛k_¥ed_SHIFT
))&
CCM_CS1CDR_ssi1_˛k_¥ed_MASK
)

	)

4746 
	#CCM_CS1CDR_eßi_˛k_¥ed_MASK
 0xE00u

	)

4747 
	#CCM_CS1CDR_eßi_˛k_¥ed_SHIFT
 9

	)

4748 
	#CCM_CS1CDR_eßi_˛k_¥ed
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CS1CDR_eßi_˛k_¥ed_SHIFT
))&
CCM_CS1CDR_eßi_˛k_¥ed_MASK
)

	)

4749 
	#CCM_CS1CDR_ssi3_˛k_podf_MASK
 0x3F0000u

	)

4750 
	#CCM_CS1CDR_ssi3_˛k_podf_SHIFT
 16

	)

4751 
	#CCM_CS1CDR_ssi3_˛k_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CS1CDR_ssi3_˛k_podf_SHIFT
))&
CCM_CS1CDR_ssi3_˛k_podf_MASK
)

	)

4752 
	#CCM_CS1CDR_ssi3_˛k_¥ed_MASK
 0x1C00000u

	)

4753 
	#CCM_CS1CDR_ssi3_˛k_¥ed_SHIFT
 22

	)

4754 
	#CCM_CS1CDR_ssi3_˛k_¥ed
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CS1CDR_ssi3_˛k_¥ed_SHIFT
))&
CCM_CS1CDR_ssi3_˛k_¥ed_MASK
)

	)

4755 
	#CCM_CS1CDR_eßi_˛k_podf_MASK
 0xE000000u

	)

4756 
	#CCM_CS1CDR_eßi_˛k_podf_SHIFT
 25

	)

4757 
	#CCM_CS1CDR_eßi_˛k_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CS1CDR_eßi_˛k_podf_SHIFT
))&
CCM_CS1CDR_eßi_˛k_podf_MASK
)

	)

4759 
	#CCM_CS2CDR_ssi2_˛k_podf_MASK
 0x3Fu

	)

4760 
	#CCM_CS2CDR_ssi2_˛k_podf_SHIFT
 0

	)

4761 
	#CCM_CS2CDR_ssi2_˛k_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CS2CDR_ssi2_˛k_podf_SHIFT
))&
CCM_CS2CDR_ssi2_˛k_podf_MASK
)

	)

4762 
	#CCM_CS2CDR_ssi2_˛k_¥ed_MASK
 0x1C0u

	)

4763 
	#CCM_CS2CDR_ssi2_˛k_¥ed_SHIFT
 6

	)

4764 
	#CCM_CS2CDR_ssi2_˛k_¥ed
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CS2CDR_ssi2_˛k_¥ed_SHIFT
))&
CCM_CS2CDR_ssi2_˛k_¥ed_MASK
)

	)

4765 
	#CCM_CS2CDR_ldb_di0_˛k_£l_MASK
 0xE00u

	)

4766 
	#CCM_CS2CDR_ldb_di0_˛k_£l_SHIFT
 9

	)

4767 
	#CCM_CS2CDR_ldb_di0_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CS2CDR_ldb_di0_˛k_£l_SHIFT
))&
CCM_CS2CDR_ldb_di0_˛k_£l_MASK
)

	)

4768 
	#CCM_CS2CDR_ldb_di1_˛k_£l_MASK
 0x7000u

	)

4769 
	#CCM_CS2CDR_ldb_di1_˛k_£l_SHIFT
 12

	)

4770 
	#CCM_CS2CDR_ldb_di1_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CS2CDR_ldb_di1_˛k_£l_SHIFT
))&
CCM_CS2CDR_ldb_di1_˛k_£l_MASK
)

	)

4771 
	#CCM_CS2CDR_q•i2_˛k_£l_MASK
 0x38000u

	)

4772 
	#CCM_CS2CDR_q•i2_˛k_£l_SHIFT
 15

	)

4773 
	#CCM_CS2CDR_q•i2_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CS2CDR_q•i2_˛k_£l_SHIFT
))&
CCM_CS2CDR_q•i2_˛k_£l_MASK
)

	)

4774 
	#CCM_CS2CDR_q•i2_˛k_¥ed_MASK
 0x1C0000u

	)

4775 
	#CCM_CS2CDR_q•i2_˛k_¥ed_SHIFT
 18

	)

4776 
	#CCM_CS2CDR_q•i2_˛k_¥ed
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CS2CDR_q•i2_˛k_¥ed_SHIFT
))&
CCM_CS2CDR_q•i2_˛k_¥ed_MASK
)

	)

4777 
	#CCM_CS2CDR_q•i2_˛k_podf_MASK
 0x7E00000u

	)

4778 
	#CCM_CS2CDR_q•i2_˛k_podf_SHIFT
 21

	)

4779 
	#CCM_CS2CDR_q•i2_˛k_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CS2CDR_q•i2_˛k_podf_SHIFT
))&
CCM_CS2CDR_q•i2_˛k_podf_MASK
)

	)

4781 
	#CCM_CDCDR_audio_˛k_£l_MASK
 0x180u

	)

4782 
	#CCM_CDCDR_audio_˛k_£l_SHIFT
 7

	)

4783 
	#CCM_CDCDR_audio_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CDCDR_audio_˛k_£l_SHIFT
))&
CCM_CDCDR_audio_˛k_£l_MASK
)

	)

4784 
	#CCM_CDCDR_audio_˛k_podf_MASK
 0xE00u

	)

4785 
	#CCM_CDCDR_audio_˛k_podf_SHIFT
 9

	)

4786 
	#CCM_CDCDR_audio_˛k_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CDCDR_audio_˛k_podf_SHIFT
))&
CCM_CDCDR_audio_˛k_podf_MASK
)

	)

4787 
	#CCM_CDCDR_audio_˛k_¥ed_MASK
 0x7000u

	)

4788 
	#CCM_CDCDR_audio_˛k_¥ed_SHIFT
 12

	)

4789 
	#CCM_CDCDR_audio_˛k_¥ed
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CDCDR_audio_˛k_¥ed_SHIFT
))&
CCM_CDCDR_audio_˛k_¥ed_MASK
)

	)

4790 
	#CCM_CDCDR_•dif0_˛k_£l_MASK
 0x300000u

	)

4791 
	#CCM_CDCDR_•dif0_˛k_£l_SHIFT
 20

	)

4792 
	#CCM_CDCDR_•dif0_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CDCDR_•dif0_˛k_£l_SHIFT
))&
CCM_CDCDR_•dif0_˛k_£l_MASK
)

	)

4793 
	#CCM_CDCDR_•dif0_˛k_podf_MASK
 0x1C00000u

	)

4794 
	#CCM_CDCDR_•dif0_˛k_podf_SHIFT
 22

	)

4795 
	#CCM_CDCDR_•dif0_˛k_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CDCDR_•dif0_˛k_podf_SHIFT
))&
CCM_CDCDR_•dif0_˛k_podf_MASK
)

	)

4796 
	#CCM_CDCDR_•dif0_˛k_¥ed_MASK
 0xE000000u

	)

4797 
	#CCM_CDCDR_•dif0_˛k_¥ed_SHIFT
 25

	)

4798 
	#CCM_CDCDR_•dif0_˛k_¥ed
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CDCDR_•dif0_˛k_¥ed_SHIFT
))&
CCM_CDCDR_•dif0_˛k_¥ed_MASK
)

	)

4800 
	#CCM_CHSCCDR_m4_˛k_£l_MASK
 0x7u

	)

4801 
	#CCM_CHSCCDR_m4_˛k_£l_SHIFT
 0

	)

4802 
	#CCM_CHSCCDR_m4_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CHSCCDR_m4_˛k_£l_SHIFT
))&
CCM_CHSCCDR_m4_˛k_£l_MASK
)

	)

4803 
	#CCM_CHSCCDR_m4_podf_MASK
 0x38u

	)

4804 
	#CCM_CHSCCDR_m4_podf_SHIFT
 3

	)

4805 
	#CCM_CHSCCDR_m4_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CHSCCDR_m4_podf_SHIFT
))&
CCM_CHSCCDR_m4_podf_MASK
)

	)

4806 
	#CCM_CHSCCDR_m4_¥e_˛k_£l_MASK
 0x1C0u

	)

4807 
	#CCM_CHSCCDR_m4_¥e_˛k_£l_SHIFT
 6

	)

4808 
	#CCM_CHSCCDR_m4_¥e_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CHSCCDR_m4_¥e_˛k_£l_SHIFT
))&
CCM_CHSCCDR_m4_¥e_˛k_£l_MASK
)

	)

4809 
	#CCM_CHSCCDR_íë_˛k_£l_MASK
 0xE00u

	)

4810 
	#CCM_CHSCCDR_íë_˛k_£l_SHIFT
 9

	)

4811 
	#CCM_CHSCCDR_íë_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CHSCCDR_íë_˛k_£l_SHIFT
))&
CCM_CHSCCDR_íë_˛k_£l_MASK
)

	)

4812 
	#CCM_CHSCCDR_íë_podf_MASK
 0x7000u

	)

4813 
	#CCM_CHSCCDR_íë_podf_SHIFT
 12

	)

4814 
	#CCM_CHSCCDR_íë_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CHSCCDR_íë_podf_SHIFT
))&
CCM_CHSCCDR_íë_podf_MASK
)

	)

4815 
	#CCM_CHSCCDR_íë_¥e_˛k_£l_MASK
 0x38000u

	)

4816 
	#CCM_CHSCCDR_íë_¥e_˛k_£l_SHIFT
 15

	)

4817 
	#CCM_CHSCCDR_íë_¥e_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CHSCCDR_íë_¥e_˛k_£l_SHIFT
))&
CCM_CHSCCDR_íë_¥e_˛k_£l_MASK
)

	)

4819 
	#CCM_CSCDR2_lcdif2_˛k_£l_MASK
 0x7u

	)

4820 
	#CCM_CSCDR2_lcdif2_˛k_£l_SHIFT
 0

	)

4821 
	#CCM_CSCDR2_lcdif2_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCDR2_lcdif2_˛k_£l_SHIFT
))&
CCM_CSCDR2_lcdif2_˛k_£l_MASK
)

	)

4822 
	#CCM_CSCDR2_lcdif2_¥ed_MASK
 0x38u

	)

4823 
	#CCM_CSCDR2_lcdif2_¥ed_SHIFT
 3

	)

4824 
	#CCM_CSCDR2_lcdif2_¥ed
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCDR2_lcdif2_¥ed_SHIFT
))&
CCM_CSCDR2_lcdif2_¥ed_MASK
)

	)

4825 
	#CCM_CSCDR2_lcdif2_¥e_˛k_£l_MASK
 0x1C0u

	)

4826 
	#CCM_CSCDR2_lcdif2_¥e_˛k_£l_SHIFT
 6

	)

4827 
	#CCM_CSCDR2_lcdif2_¥e_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCDR2_lcdif2_¥e_˛k_£l_SHIFT
))&
CCM_CSCDR2_lcdif2_¥e_˛k_£l_MASK
)

	)

4828 
	#CCM_CSCDR2_lcdif1_˛k_£l_MASK
 0xE00u

	)

4829 
	#CCM_CSCDR2_lcdif1_˛k_£l_SHIFT
 9

	)

4830 
	#CCM_CSCDR2_lcdif1_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCDR2_lcdif1_˛k_£l_SHIFT
))&
CCM_CSCDR2_lcdif1_˛k_£l_MASK
)

	)

4831 
	#CCM_CSCDR2_lcdif1_¥ed_MASK
 0x7000u

	)

4832 
	#CCM_CSCDR2_lcdif1_¥ed_SHIFT
 12

	)

4833 
	#CCM_CSCDR2_lcdif1_¥ed
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCDR2_lcdif1_¥ed_SHIFT
))&
CCM_CSCDR2_lcdif1_¥ed_MASK
)

	)

4834 
	#CCM_CSCDR2_lcdif1_¥e_˛k_£l_MASK
 0x38000u

	)

4835 
	#CCM_CSCDR2_lcdif1_¥e_˛k_£l_SHIFT
 15

	)

4836 
	#CCM_CSCDR2_lcdif1_¥e_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCDR2_lcdif1_¥e_˛k_£l_SHIFT
))&
CCM_CSCDR2_lcdif1_¥e_˛k_£l_MASK
)

	)

4837 
	#CCM_CSCDR2_ec•i_˛k_£l_MASK
 0x40000u

	)

4838 
	#CCM_CSCDR2_ec•i_˛k_£l_SHIFT
 18

	)

4839 
	#CCM_CSCDR2_ec•i_˛k_podf_MASK
 0x1F80000u

	)

4840 
	#CCM_CSCDR2_ec•i_˛k_podf_SHIFT
 19

	)

4841 
	#CCM_CSCDR2_ec•i_˛k_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCDR2_ec•i_˛k_podf_SHIFT
))&
CCM_CSCDR2_ec•i_˛k_podf_MASK
)

	)

4843 
	#CCM_CSCDR3_csi_˛k_£l_MASK
 0x600u

	)

4844 
	#CCM_CSCDR3_csi_˛k_£l_SHIFT
 9

	)

4845 
	#CCM_CSCDR3_csi_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCDR3_csi_˛k_£l_SHIFT
))&
CCM_CSCDR3_csi_˛k_£l_MASK
)

	)

4846 
	#CCM_CSCDR3_csi_podf_MASK
 0x3800u

	)

4847 
	#CCM_CSCDR3_csi_podf_SHIFT
 11

	)

4848 
	#CCM_CSCDR3_csi_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCDR3_csi_podf_SHIFT
))&
CCM_CSCDR3_csi_podf_MASK
)

	)

4849 
	#CCM_CSCDR3_di•œy_˛k_£l_MASK
 0xC000u

	)

4850 
	#CCM_CSCDR3_di•œy_˛k_£l_SHIFT
 14

	)

4851 
	#CCM_CSCDR3_di•œy_˛k_£l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCDR3_di•œy_˛k_£l_SHIFT
))&
CCM_CSCDR3_di•œy_˛k_£l_MASK
)

	)

4852 
	#CCM_CSCDR3_di•œy_podf_MASK
 0x70000u

	)

4853 
	#CCM_CSCDR3_di•œy_podf_SHIFT
 16

	)

4854 
	#CCM_CSCDR3_di•œy_podf
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CSCDR3_di•œy_podf_SHIFT
))&
CCM_CSCDR3_di•œy_podf_MASK
)

	)

4857 
	#CCM_CDHIPR_o¸am_podf_busy_MASK
 0x1u

	)

4858 
	#CCM_CDHIPR_o¸am_podf_busy_SHIFT
 0

	)

4859 
	#CCM_CDHIPR_ahb_podf_busy_MASK
 0x2u

	)

4860 
	#CCM_CDHIPR_ahb_podf_busy_SHIFT
 1

	)

4861 
	#CCM_CDHIPR_mmdc_podf_busy_MASK
 0x4u

	)

4862 
	#CCM_CDHIPR_mmdc_podf_busy_SHIFT
 2

	)

4863 
	#CCM_CDHIPR_≥rùh2_˛k_£l_busy_MASK
 0x8u

	)

4864 
	#CCM_CDHIPR_≥rùh2_˛k_£l_busy_SHIFT
 3

	)

4865 
	#CCM_CDHIPR_≥rùh_˛k_£l_busy_MASK
 0x20u

	)

4866 
	#CCM_CDHIPR_≥rùh_˛k_£l_busy_SHIFT
 5

	)

4867 
	#CCM_CDHIPR_¨m_podf_busy_MASK
 0x10000u

	)

4868 
	#CCM_CDHIPR_¨m_podf_busy_SHIFT
 16

	)

4870 
	#CCM_CLPCR_LPM_MASK
 0x3u

	)

4871 
	#CCM_CLPCR_LPM_SHIFT
 0

	)

4872 
	#CCM_CLPCR_LPM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CLPCR_LPM_SHIFT
))&
CCM_CLPCR_LPM_MASK
)

	)

4873 
	#CCM_CLPCR_ARM_˛k_dis_⁄_Õm_MASK
 0x20u

	)

4874 
	#CCM_CLPCR_ARM_˛k_dis_⁄_Õm_SHIFT
 5

	)

4875 
	#CCM_CLPCR_SBYOS_MASK
 0x40u

	)

4876 
	#CCM_CLPCR_SBYOS_SHIFT
 6

	)

4877 
	#CCM_CLPCR_dis_ªf_osc_MASK
 0x80u

	)

4878 
	#CCM_CLPCR_dis_ªf_osc_SHIFT
 7

	)

4879 
	#CCM_CLPCR_VSTBY_MASK
 0x100u

	)

4880 
	#CCM_CLPCR_VSTBY_SHIFT
 8

	)

4881 
	#CCM_CLPCR_°by_cou¡_MASK
 0x600u

	)

4882 
	#CCM_CLPCR_°by_cou¡_SHIFT
 9

	)

4883 
	#CCM_CLPCR_°by_cou¡
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CLPCR_°by_cou¡_SHIFT
))&
CCM_CLPCR_°by_cou¡_MASK
)

	)

4884 
	#CCM_CLPCR_cosc_pwrdown_MASK
 0x800u

	)

4885 
	#CCM_CLPCR_cosc_pwrdown_SHIFT
 11

	)

4886 
	#CCM_CLPCR_by∑ss_mmdc_Õm_hs_MASK
 0x200000u

	)

4887 
	#CCM_CLPCR_by∑ss_mmdc_Õm_hs_SHIFT
 21

	)

4888 
	#CCM_CLPCR_mask_c‹e0_wfi_MASK
 0x400000u

	)

4889 
	#CCM_CLPCR_mask_c‹e0_wfi_SHIFT
 22

	)

4890 
	#CCM_CLPCR_mask_scu_idÀ_MASK
 0x4000000u

	)

4891 
	#CCM_CLPCR_mask_scu_idÀ_SHIFT
 26

	)

4892 
	#CCM_CLPCR_mask_l2cc_idÀ_MASK
 0x8000000u

	)

4893 
	#CCM_CLPCR_mask_l2cc_idÀ_SHIFT
 27

	)

4895 
	#CCM_CISR_Ãf_∂l_MASK
 0x1u

	)

4896 
	#CCM_CISR_Ãf_∂l_SHIFT
 0

	)

4897 
	#CCM_CISR_cosc_ªady_MASK
 0x40u

	)

4898 
	#CCM_CISR_cosc_ªady_SHIFT
 6

	)

4899 
	#CCM_CISR_o¸am_podf_lﬂded_MASK
 0x20000u

	)

4900 
	#CCM_CISR_o¸am_podf_lﬂded_SHIFT
 17

	)

4901 
	#CCM_CISR_≥rùh2_˛k_£l_lﬂded_MASK
 0x80000u

	)

4902 
	#CCM_CISR_≥rùh2_˛k_£l_lﬂded_SHIFT
 19

	)

4903 
	#CCM_CISR_ahb_podf_lﬂded_MASK
 0x100000u

	)

4904 
	#CCM_CISR_ahb_podf_lﬂded_SHIFT
 20

	)

4905 
	#CCM_CISR_mmdc_podf_lﬂded_MASK
 0x200000u

	)

4906 
	#CCM_CISR_mmdc_podf_lﬂded_SHIFT
 21

	)

4907 
	#CCM_CISR_≥rùh_˛k_£l_lﬂded_MASK
 0x400000u

	)

4908 
	#CCM_CISR_≥rùh_˛k_£l_lﬂded_SHIFT
 22

	)

4909 
	#CCM_CISR_¨m_podf_lﬂded_MASK
 0x4000000u

	)

4910 
	#CCM_CISR_¨m_podf_lﬂded_SHIFT
 26

	)

4912 
	#CCM_CIMR_mask_Ãf_∂l_MASK
 0x1u

	)

4913 
	#CCM_CIMR_mask_Ãf_∂l_SHIFT
 0

	)

4914 
	#CCM_CIMR_mask_cosc_ªady_MASK
 0x40u

	)

4915 
	#CCM_CIMR_mask_cosc_ªady_SHIFT
 6

	)

4916 
	#CCM_CIMR_mask_o¸am_podf_lﬂded_MASK
 0x20000u

	)

4917 
	#CCM_CIMR_mask_o¸am_podf_lﬂded_SHIFT
 17

	)

4918 
	#CCM_CIMR_mask_≥rùh2_˛k_£l_lﬂded_MASK
 0x80000u

	)

4919 
	#CCM_CIMR_mask_≥rùh2_˛k_£l_lﬂded_SHIFT
 19

	)

4920 
	#CCM_CIMR_mask_ahb_podf_lﬂded_MASK
 0x100000u

	)

4921 
	#CCM_CIMR_mask_ahb_podf_lﬂded_SHIFT
 20

	)

4922 
	#CCM_CIMR_mask_mmdc_podf_lﬂded_MASK
 0x200000u

	)

4923 
	#CCM_CIMR_mask_mmdc_podf_lﬂded_SHIFT
 21

	)

4924 
	#CCM_CIMR_mask_≥rùh_˛k_£l_lﬂded_MASK
 0x400000u

	)

4925 
	#CCM_CIMR_mask_≥rùh_˛k_£l_lﬂded_SHIFT
 22

	)

4926 
	#CCM_CIMR_¨m_podf_lﬂded_MASK
 0x4000000u

	)

4927 
	#CCM_CIMR_¨m_podf_lﬂded_SHIFT
 26

	)

4929 
	#CCM_CCOSR_CLKO_SEL_MASK
 0xFu

	)

4930 
	#CCM_CCOSR_CLKO_SEL_SHIFT
 0

	)

4931 
	#CCM_CCOSR_CLKO_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCOSR_CLKO_SEL_SHIFT
))&
CCM_CCOSR_CLKO_SEL_MASK
)

	)

4932 
	#CCM_CCOSR_CLKO1_DIV_MASK
 0x70u

	)

4933 
	#CCM_CCOSR_CLKO1_DIV_SHIFT
 4

	)

4934 
	#CCM_CCOSR_CLKO1_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCOSR_CLKO1_DIV_SHIFT
))&
CCM_CCOSR_CLKO1_DIV_MASK
)

	)

4935 
	#CCM_CCOSR_CLKO1_EN_MASK
 0x80u

	)

4936 
	#CCM_CCOSR_CLKO1_EN_SHIFT
 7

	)

4937 
	#CCM_CCOSR_CLK_OUT_SEL_MASK
 0x100u

	)

4938 
	#CCM_CCOSR_CLK_OUT_SEL_SHIFT
 8

	)

4939 
	#CCM_CCOSR_CLKO2_SEL_MASK
 0x1F0000u

	)

4940 
	#CCM_CCOSR_CLKO2_SEL_SHIFT
 16

	)

4941 
	#CCM_CCOSR_CLKO2_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCOSR_CLKO2_SEL_SHIFT
))&
CCM_CCOSR_CLKO2_SEL_MASK
)

	)

4942 
	#CCM_CCOSR_CLKO2_DIV_MASK
 0xE00000u

	)

4943 
	#CCM_CCOSR_CLKO2_DIV_SHIFT
 21

	)

4944 
	#CCM_CCOSR_CLKO2_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCOSR_CLKO2_DIV_SHIFT
))&
CCM_CCOSR_CLKO2_DIV_MASK
)

	)

4945 
	#CCM_CCOSR_CLKO2_EN_MASK
 0x1000000u

	)

4946 
	#CCM_CCOSR_CLKO2_EN_SHIFT
 24

	)

4948 
	#CCM_CGPR_pmic_dñay_sˇÀr_MASK
 0x1u

	)

4949 
	#CCM_CGPR_pmic_dñay_sˇÀr_SHIFT
 0

	)

4950 
	#CCM_CGPR_mmdc_ext_˛k_dis_MASK
 0x4u

	)

4951 
	#CCM_CGPR_mmdc_ext_˛k_dis_SHIFT
 2

	)

4952 
	#CCM_CGPR_efu£_¥og_suµly_g©e_MASK
 0x10u

	)

4953 
	#CCM_CGPR_efu£_¥og_suµly_g©e_SHIFT
 4

	)

4954 
	#CCM_CGPR_FPL_MASK
 0x10000u

	)

4955 
	#CCM_CGPR_FPL_SHIFT
 16

	)

4956 
	#CCM_CGPR_INT_MEM_CLK_LPM_MASK
 0x20000u

	)

4957 
	#CCM_CGPR_INT_MEM_CLK_LPM_SHIFT
 17

	)

4959 
	#CCM_CCGR0_CG0_MASK
 0x3u

	)

4960 
	#CCM_CCGR0_CG0_SHIFT
 0

	)

4961 
	#CCM_CCGR0_CG0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR0_CG0_SHIFT
))&
CCM_CCGR0_CG0_MASK
)

	)

4962 
	#CCM_CCGR0_CG1_MASK
 0xCu

	)

4963 
	#CCM_CCGR0_CG1_SHIFT
 2

	)

4964 
	#CCM_CCGR0_CG1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR0_CG1_SHIFT
))&
CCM_CCGR0_CG1_MASK
)

	)

4965 
	#CCM_CCGR0_CG2_MASK
 0x30u

	)

4966 
	#CCM_CCGR0_CG2_SHIFT
 4

	)

4967 
	#CCM_CCGR0_CG2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR0_CG2_SHIFT
))&
CCM_CCGR0_CG2_MASK
)

	)

4968 
	#CCM_CCGR0_CG3_MASK
 0xC0u

	)

4969 
	#CCM_CCGR0_CG3_SHIFT
 6

	)

4970 
	#CCM_CCGR0_CG3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR0_CG3_SHIFT
))&
CCM_CCGR0_CG3_MASK
)

	)

4971 
	#CCM_CCGR0_CG4_MASK
 0x300u

	)

4972 
	#CCM_CCGR0_CG4_SHIFT
 8

	)

4973 
	#CCM_CCGR0_CG4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR0_CG4_SHIFT
))&
CCM_CCGR0_CG4_MASK
)

	)

4974 
	#CCM_CCGR0_CG5_MASK
 0xC00u

	)

4975 
	#CCM_CCGR0_CG5_SHIFT
 10

	)

4976 
	#CCM_CCGR0_CG5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR0_CG5_SHIFT
))&
CCM_CCGR0_CG5_MASK
)

	)

4977 
	#CCM_CCGR0_CG6_MASK
 0x3000u

	)

4978 
	#CCM_CCGR0_CG6_SHIFT
 12

	)

4979 
	#CCM_CCGR0_CG6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR0_CG6_SHIFT
))&
CCM_CCGR0_CG6_MASK
)

	)

4980 
	#CCM_CCGR0_CG7_MASK
 0xC000u

	)

4981 
	#CCM_CCGR0_CG7_SHIFT
 14

	)

4982 
	#CCM_CCGR0_CG7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR0_CG7_SHIFT
))&
CCM_CCGR0_CG7_MASK
)

	)

4983 
	#CCM_CCGR0_CG8_MASK
 0x30000u

	)

4984 
	#CCM_CCGR0_CG8_SHIFT
 16

	)

4985 
	#CCM_CCGR0_CG8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR0_CG8_SHIFT
))&
CCM_CCGR0_CG8_MASK
)

	)

4986 
	#CCM_CCGR0_CG9_MASK
 0xC0000u

	)

4987 
	#CCM_CCGR0_CG9_SHIFT
 18

	)

4988 
	#CCM_CCGR0_CG9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR0_CG9_SHIFT
))&
CCM_CCGR0_CG9_MASK
)

	)

4989 
	#CCM_CCGR0_CG10_MASK
 0x300000u

	)

4990 
	#CCM_CCGR0_CG10_SHIFT
 20

	)

4991 
	#CCM_CCGR0_CG10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR0_CG10_SHIFT
))&
CCM_CCGR0_CG10_MASK
)

	)

4992 
	#CCM_CCGR0_CG11_MASK
 0xC00000u

	)

4993 
	#CCM_CCGR0_CG11_SHIFT
 22

	)

4994 
	#CCM_CCGR0_CG11
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR0_CG11_SHIFT
))&
CCM_CCGR0_CG11_MASK
)

	)

4995 
	#CCM_CCGR0_CG12_MASK
 0x3000000u

	)

4996 
	#CCM_CCGR0_CG12_SHIFT
 24

	)

4997 
	#CCM_CCGR0_CG12
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR0_CG12_SHIFT
))&
CCM_CCGR0_CG12_MASK
)

	)

4998 
	#CCM_CCGR0_CG13_MASK
 0xC000000u

	)

4999 
	#CCM_CCGR0_CG13_SHIFT
 26

	)

5000 
	#CCM_CCGR0_CG13
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR0_CG13_SHIFT
))&
CCM_CCGR0_CG13_MASK
)

	)

5001 
	#CCM_CCGR0_CG14_MASK
 0x30000000u

	)

5002 
	#CCM_CCGR0_CG14_SHIFT
 28

	)

5003 
	#CCM_CCGR0_CG14
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR0_CG14_SHIFT
))&
CCM_CCGR0_CG14_MASK
)

	)

5004 
	#CCM_CCGR0_CG15_MASK
 0xC0000000u

	)

5005 
	#CCM_CCGR0_CG15_SHIFT
 30

	)

5006 
	#CCM_CCGR0_CG15
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR0_CG15_SHIFT
))&
CCM_CCGR0_CG15_MASK
)

	)

5008 
	#CCM_CCGR1_CG0_MASK
 0x3u

	)

5009 
	#CCM_CCGR1_CG0_SHIFT
 0

	)

5010 
	#CCM_CCGR1_CG0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR1_CG0_SHIFT
))&
CCM_CCGR1_CG0_MASK
)

	)

5011 
	#CCM_CCGR1_CG1_MASK
 0xCu

	)

5012 
	#CCM_CCGR1_CG1_SHIFT
 2

	)

5013 
	#CCM_CCGR1_CG1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR1_CG1_SHIFT
))&
CCM_CCGR1_CG1_MASK
)

	)

5014 
	#CCM_CCGR1_CG2_MASK
 0x30u

	)

5015 
	#CCM_CCGR1_CG2_SHIFT
 4

	)

5016 
	#CCM_CCGR1_CG2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR1_CG2_SHIFT
))&
CCM_CCGR1_CG2_MASK
)

	)

5017 
	#CCM_CCGR1_CG3_MASK
 0xC0u

	)

5018 
	#CCM_CCGR1_CG3_SHIFT
 6

	)

5019 
	#CCM_CCGR1_CG3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR1_CG3_SHIFT
))&
CCM_CCGR1_CG3_MASK
)

	)

5020 
	#CCM_CCGR1_CG4_MASK
 0x300u

	)

5021 
	#CCM_CCGR1_CG4_SHIFT
 8

	)

5022 
	#CCM_CCGR1_CG4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR1_CG4_SHIFT
))&
CCM_CCGR1_CG4_MASK
)

	)

5023 
	#CCM_CCGR1_CG5_MASK
 0xC00u

	)

5024 
	#CCM_CCGR1_CG5_SHIFT
 10

	)

5025 
	#CCM_CCGR1_CG5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR1_CG5_SHIFT
))&
CCM_CCGR1_CG5_MASK
)

	)

5026 
	#CCM_CCGR1_CG6_MASK
 0x3000u

	)

5027 
	#CCM_CCGR1_CG6_SHIFT
 12

	)

5028 
	#CCM_CCGR1_CG6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR1_CG6_SHIFT
))&
CCM_CCGR1_CG6_MASK
)

	)

5029 
	#CCM_CCGR1_CG7_MASK
 0xC000u

	)

5030 
	#CCM_CCGR1_CG7_SHIFT
 14

	)

5031 
	#CCM_CCGR1_CG7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR1_CG7_SHIFT
))&
CCM_CCGR1_CG7_MASK
)

	)

5032 
	#CCM_CCGR1_CG8_MASK
 0x30000u

	)

5033 
	#CCM_CCGR1_CG8_SHIFT
 16

	)

5034 
	#CCM_CCGR1_CG8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR1_CG8_SHIFT
))&
CCM_CCGR1_CG8_MASK
)

	)

5035 
	#CCM_CCGR1_CG9_MASK
 0xC0000u

	)

5036 
	#CCM_CCGR1_CG9_SHIFT
 18

	)

5037 
	#CCM_CCGR1_CG9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR1_CG9_SHIFT
))&
CCM_CCGR1_CG9_MASK
)

	)

5038 
	#CCM_CCGR1_CG10_MASK
 0x300000u

	)

5039 
	#CCM_CCGR1_CG10_SHIFT
 20

	)

5040 
	#CCM_CCGR1_CG10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR1_CG10_SHIFT
))&
CCM_CCGR1_CG10_MASK
)

	)

5041 
	#CCM_CCGR1_CG11_MASK
 0xC00000u

	)

5042 
	#CCM_CCGR1_CG11_SHIFT
 22

	)

5043 
	#CCM_CCGR1_CG11
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR1_CG11_SHIFT
))&
CCM_CCGR1_CG11_MASK
)

	)

5044 
	#CCM_CCGR1_CG12_MASK
 0x3000000u

	)

5045 
	#CCM_CCGR1_CG12_SHIFT
 24

	)

5046 
	#CCM_CCGR1_CG12
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR1_CG12_SHIFT
))&
CCM_CCGR1_CG12_MASK
)

	)

5047 
	#CCM_CCGR1_CG13_MASK
 0xC000000u

	)

5048 
	#CCM_CCGR1_CG13_SHIFT
 26

	)

5049 
	#CCM_CCGR1_CG13
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR1_CG13_SHIFT
))&
CCM_CCGR1_CG13_MASK
)

	)

5050 
	#CCM_CCGR1_CG14_MASK
 0x30000000u

	)

5051 
	#CCM_CCGR1_CG14_SHIFT
 28

	)

5052 
	#CCM_CCGR1_CG14
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR1_CG14_SHIFT
))&
CCM_CCGR1_CG14_MASK
)

	)

5053 
	#CCM_CCGR1_CG15_MASK
 0xC0000000u

	)

5054 
	#CCM_CCGR1_CG15_SHIFT
 30

	)

5055 
	#CCM_CCGR1_CG15
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR1_CG15_SHIFT
))&
CCM_CCGR1_CG15_MASK
)

	)

5057 
	#CCM_CCGR2_CG0_MASK
 0x3u

	)

5058 
	#CCM_CCGR2_CG0_SHIFT
 0

	)

5059 
	#CCM_CCGR2_CG0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR2_CG0_SHIFT
))&
CCM_CCGR2_CG0_MASK
)

	)

5060 
	#CCM_CCGR2_CG1_MASK
 0xCu

	)

5061 
	#CCM_CCGR2_CG1_SHIFT
 2

	)

5062 
	#CCM_CCGR2_CG1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR2_CG1_SHIFT
))&
CCM_CCGR2_CG1_MASK
)

	)

5063 
	#CCM_CCGR2_CG2_MASK
 0x30u

	)

5064 
	#CCM_CCGR2_CG2_SHIFT
 4

	)

5065 
	#CCM_CCGR2_CG2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR2_CG2_SHIFT
))&
CCM_CCGR2_CG2_MASK
)

	)

5066 
	#CCM_CCGR2_CG3_MASK
 0xC0u

	)

5067 
	#CCM_CCGR2_CG3_SHIFT
 6

	)

5068 
	#CCM_CCGR2_CG3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR2_CG3_SHIFT
))&
CCM_CCGR2_CG3_MASK
)

	)

5069 
	#CCM_CCGR2_CG4_MASK
 0x300u

	)

5070 
	#CCM_CCGR2_CG4_SHIFT
 8

	)

5071 
	#CCM_CCGR2_CG4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR2_CG4_SHIFT
))&
CCM_CCGR2_CG4_MASK
)

	)

5072 
	#CCM_CCGR2_CG5_MASK
 0xC00u

	)

5073 
	#CCM_CCGR2_CG5_SHIFT
 10

	)

5074 
	#CCM_CCGR2_CG5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR2_CG5_SHIFT
))&
CCM_CCGR2_CG5_MASK
)

	)

5075 
	#CCM_CCGR2_CG6_MASK
 0x3000u

	)

5076 
	#CCM_CCGR2_CG6_SHIFT
 12

	)

5077 
	#CCM_CCGR2_CG6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR2_CG6_SHIFT
))&
CCM_CCGR2_CG6_MASK
)

	)

5078 
	#CCM_CCGR2_CG7_MASK
 0xC000u

	)

5079 
	#CCM_CCGR2_CG7_SHIFT
 14

	)

5080 
	#CCM_CCGR2_CG7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR2_CG7_SHIFT
))&
CCM_CCGR2_CG7_MASK
)

	)

5081 
	#CCM_CCGR2_CG8_MASK
 0x30000u

	)

5082 
	#CCM_CCGR2_CG8_SHIFT
 16

	)

5083 
	#CCM_CCGR2_CG8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR2_CG8_SHIFT
))&
CCM_CCGR2_CG8_MASK
)

	)

5084 
	#CCM_CCGR2_CG9_MASK
 0xC0000u

	)

5085 
	#CCM_CCGR2_CG9_SHIFT
 18

	)

5086 
	#CCM_CCGR2_CG9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR2_CG9_SHIFT
))&
CCM_CCGR2_CG9_MASK
)

	)

5087 
	#CCM_CCGR2_CG10_MASK
 0x300000u

	)

5088 
	#CCM_CCGR2_CG10_SHIFT
 20

	)

5089 
	#CCM_CCGR2_CG10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR2_CG10_SHIFT
))&
CCM_CCGR2_CG10_MASK
)

	)

5090 
	#CCM_CCGR2_CG11_MASK
 0xC00000u

	)

5091 
	#CCM_CCGR2_CG11_SHIFT
 22

	)

5092 
	#CCM_CCGR2_CG11
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR2_CG11_SHIFT
))&
CCM_CCGR2_CG11_MASK
)

	)

5093 
	#CCM_CCGR2_CG12_MASK
 0x3000000u

	)

5094 
	#CCM_CCGR2_CG12_SHIFT
 24

	)

5095 
	#CCM_CCGR2_CG12
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR2_CG12_SHIFT
))&
CCM_CCGR2_CG12_MASK
)

	)

5096 
	#CCM_CCGR2_CG13_MASK
 0xC000000u

	)

5097 
	#CCM_CCGR2_CG13_SHIFT
 26

	)

5098 
	#CCM_CCGR2_CG13
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR2_CG13_SHIFT
))&
CCM_CCGR2_CG13_MASK
)

	)

5099 
	#CCM_CCGR2_CG14_MASK
 0x30000000u

	)

5100 
	#CCM_CCGR2_CG14_SHIFT
 28

	)

5101 
	#CCM_CCGR2_CG14
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR2_CG14_SHIFT
))&
CCM_CCGR2_CG14_MASK
)

	)

5102 
	#CCM_CCGR2_CG15_MASK
 0xC0000000u

	)

5103 
	#CCM_CCGR2_CG15_SHIFT
 30

	)

5104 
	#CCM_CCGR2_CG15
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR2_CG15_SHIFT
))&
CCM_CCGR2_CG15_MASK
)

	)

5106 
	#CCM_CCGR3_CG0_MASK
 0x3u

	)

5107 
	#CCM_CCGR3_CG0_SHIFT
 0

	)

5108 
	#CCM_CCGR3_CG0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR3_CG0_SHIFT
))&
CCM_CCGR3_CG0_MASK
)

	)

5109 
	#CCM_CCGR3_CG1_MASK
 0xCu

	)

5110 
	#CCM_CCGR3_CG1_SHIFT
 2

	)

5111 
	#CCM_CCGR3_CG1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR3_CG1_SHIFT
))&
CCM_CCGR3_CG1_MASK
)

	)

5112 
	#CCM_CCGR3_CG2_MASK
 0x30u

	)

5113 
	#CCM_CCGR3_CG2_SHIFT
 4

	)

5114 
	#CCM_CCGR3_CG2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR3_CG2_SHIFT
))&
CCM_CCGR3_CG2_MASK
)

	)

5115 
	#CCM_CCGR3_CG3_MASK
 0xC0u

	)

5116 
	#CCM_CCGR3_CG3_SHIFT
 6

	)

5117 
	#CCM_CCGR3_CG3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR3_CG3_SHIFT
))&
CCM_CCGR3_CG3_MASK
)

	)

5118 
	#CCM_CCGR3_CG4_MASK
 0x300u

	)

5119 
	#CCM_CCGR3_CG4_SHIFT
 8

	)

5120 
	#CCM_CCGR3_CG4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR3_CG4_SHIFT
))&
CCM_CCGR3_CG4_MASK
)

	)

5121 
	#CCM_CCGR3_CG5_MASK
 0xC00u

	)

5122 
	#CCM_CCGR3_CG5_SHIFT
 10

	)

5123 
	#CCM_CCGR3_CG5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR3_CG5_SHIFT
))&
CCM_CCGR3_CG5_MASK
)

	)

5124 
	#CCM_CCGR3_CG6_MASK
 0x3000u

	)

5125 
	#CCM_CCGR3_CG6_SHIFT
 12

	)

5126 
	#CCM_CCGR3_CG6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR3_CG6_SHIFT
))&
CCM_CCGR3_CG6_MASK
)

	)

5127 
	#CCM_CCGR3_CG7_MASK
 0xC000u

	)

5128 
	#CCM_CCGR3_CG7_SHIFT
 14

	)

5129 
	#CCM_CCGR3_CG7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR3_CG7_SHIFT
))&
CCM_CCGR3_CG7_MASK
)

	)

5130 
	#CCM_CCGR3_CG8_MASK
 0x30000u

	)

5131 
	#CCM_CCGR3_CG8_SHIFT
 16

	)

5132 
	#CCM_CCGR3_CG8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR3_CG8_SHIFT
))&
CCM_CCGR3_CG8_MASK
)

	)

5133 
	#CCM_CCGR3_CG9_MASK
 0xC0000u

	)

5134 
	#CCM_CCGR3_CG9_SHIFT
 18

	)

5135 
	#CCM_CCGR3_CG9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR3_CG9_SHIFT
))&
CCM_CCGR3_CG9_MASK
)

	)

5136 
	#CCM_CCGR3_CG10_MASK
 0x300000u

	)

5137 
	#CCM_CCGR3_CG10_SHIFT
 20

	)

5138 
	#CCM_CCGR3_CG10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR3_CG10_SHIFT
))&
CCM_CCGR3_CG10_MASK
)

	)

5139 
	#CCM_CCGR3_CG11_MASK
 0xC00000u

	)

5140 
	#CCM_CCGR3_CG11_SHIFT
 22

	)

5141 
	#CCM_CCGR3_CG11
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR3_CG11_SHIFT
))&
CCM_CCGR3_CG11_MASK
)

	)

5142 
	#CCM_CCGR3_CG12_MASK
 0x3000000u

	)

5143 
	#CCM_CCGR3_CG12_SHIFT
 24

	)

5144 
	#CCM_CCGR3_CG12
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR3_CG12_SHIFT
))&
CCM_CCGR3_CG12_MASK
)

	)

5145 
	#CCM_CCGR3_CG13_MASK
 0xC000000u

	)

5146 
	#CCM_CCGR3_CG13_SHIFT
 26

	)

5147 
	#CCM_CCGR3_CG13
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR3_CG13_SHIFT
))&
CCM_CCGR3_CG13_MASK
)

	)

5148 
	#CCM_CCGR3_CG14_MASK
 0x30000000u

	)

5149 
	#CCM_CCGR3_CG14_SHIFT
 28

	)

5150 
	#CCM_CCGR3_CG14
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR3_CG14_SHIFT
))&
CCM_CCGR3_CG14_MASK
)

	)

5151 
	#CCM_CCGR3_CG15_MASK
 0xC0000000u

	)

5152 
	#CCM_CCGR3_CG15_SHIFT
 30

	)

5153 
	#CCM_CCGR3_CG15
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR3_CG15_SHIFT
))&
CCM_CCGR3_CG15_MASK
)

	)

5155 
	#CCM_CCGR4_CG0_MASK
 0x3u

	)

5156 
	#CCM_CCGR4_CG0_SHIFT
 0

	)

5157 
	#CCM_CCGR4_CG0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR4_CG0_SHIFT
))&
CCM_CCGR4_CG0_MASK
)

	)

5158 
	#CCM_CCGR4_CG1_MASK
 0xCu

	)

5159 
	#CCM_CCGR4_CG1_SHIFT
 2

	)

5160 
	#CCM_CCGR4_CG1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR4_CG1_SHIFT
))&
CCM_CCGR4_CG1_MASK
)

	)

5161 
	#CCM_CCGR4_CG2_MASK
 0x30u

	)

5162 
	#CCM_CCGR4_CG2_SHIFT
 4

	)

5163 
	#CCM_CCGR4_CG2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR4_CG2_SHIFT
))&
CCM_CCGR4_CG2_MASK
)

	)

5164 
	#CCM_CCGR4_CG3_MASK
 0xC0u

	)

5165 
	#CCM_CCGR4_CG3_SHIFT
 6

	)

5166 
	#CCM_CCGR4_CG3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR4_CG3_SHIFT
))&
CCM_CCGR4_CG3_MASK
)

	)

5167 
	#CCM_CCGR4_CG4_MASK
 0x300u

	)

5168 
	#CCM_CCGR4_CG4_SHIFT
 8

	)

5169 
	#CCM_CCGR4_CG4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR4_CG4_SHIFT
))&
CCM_CCGR4_CG4_MASK
)

	)

5170 
	#CCM_CCGR4_CG5_MASK
 0xC00u

	)

5171 
	#CCM_CCGR4_CG5_SHIFT
 10

	)

5172 
	#CCM_CCGR4_CG5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR4_CG5_SHIFT
))&
CCM_CCGR4_CG5_MASK
)

	)

5173 
	#CCM_CCGR4_CG6_MASK
 0x3000u

	)

5174 
	#CCM_CCGR4_CG6_SHIFT
 12

	)

5175 
	#CCM_CCGR4_CG6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR4_CG6_SHIFT
))&
CCM_CCGR4_CG6_MASK
)

	)

5176 
	#CCM_CCGR4_CG7_MASK
 0xC000u

	)

5177 
	#CCM_CCGR4_CG7_SHIFT
 14

	)

5178 
	#CCM_CCGR4_CG7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR4_CG7_SHIFT
))&
CCM_CCGR4_CG7_MASK
)

	)

5179 
	#CCM_CCGR4_CG8_MASK
 0x30000u

	)

5180 
	#CCM_CCGR4_CG8_SHIFT
 16

	)

5181 
	#CCM_CCGR4_CG8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR4_CG8_SHIFT
))&
CCM_CCGR4_CG8_MASK
)

	)

5182 
	#CCM_CCGR4_CG9_MASK
 0xC0000u

	)

5183 
	#CCM_CCGR4_CG9_SHIFT
 18

	)

5184 
	#CCM_CCGR4_CG9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR4_CG9_SHIFT
))&
CCM_CCGR4_CG9_MASK
)

	)

5185 
	#CCM_CCGR4_CG10_MASK
 0x300000u

	)

5186 
	#CCM_CCGR4_CG10_SHIFT
 20

	)

5187 
	#CCM_CCGR4_CG10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR4_CG10_SHIFT
))&
CCM_CCGR4_CG10_MASK
)

	)

5188 
	#CCM_CCGR4_CG11_MASK
 0xC00000u

	)

5189 
	#CCM_CCGR4_CG11_SHIFT
 22

	)

5190 
	#CCM_CCGR4_CG11
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR4_CG11_SHIFT
))&
CCM_CCGR4_CG11_MASK
)

	)

5191 
	#CCM_CCGR4_CG12_MASK
 0x3000000u

	)

5192 
	#CCM_CCGR4_CG12_SHIFT
 24

	)

5193 
	#CCM_CCGR4_CG12
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR4_CG12_SHIFT
))&
CCM_CCGR4_CG12_MASK
)

	)

5194 
	#CCM_CCGR4_CG13_MASK
 0xC000000u

	)

5195 
	#CCM_CCGR4_CG13_SHIFT
 26

	)

5196 
	#CCM_CCGR4_CG13
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR4_CG13_SHIFT
))&
CCM_CCGR4_CG13_MASK
)

	)

5197 
	#CCM_CCGR4_CG14_MASK
 0x30000000u

	)

5198 
	#CCM_CCGR4_CG14_SHIFT
 28

	)

5199 
	#CCM_CCGR4_CG14
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR4_CG14_SHIFT
))&
CCM_CCGR4_CG14_MASK
)

	)

5200 
	#CCM_CCGR4_CG15_MASK
 0xC0000000u

	)

5201 
	#CCM_CCGR4_CG15_SHIFT
 30

	)

5202 
	#CCM_CCGR4_CG15
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR4_CG15_SHIFT
))&
CCM_CCGR4_CG15_MASK
)

	)

5204 
	#CCM_CCGR5_CG0_MASK
 0x3u

	)

5205 
	#CCM_CCGR5_CG0_SHIFT
 0

	)

5206 
	#CCM_CCGR5_CG0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR5_CG0_SHIFT
))&
CCM_CCGR5_CG0_MASK
)

	)

5207 
	#CCM_CCGR5_CG1_MASK
 0xCu

	)

5208 
	#CCM_CCGR5_CG1_SHIFT
 2

	)

5209 
	#CCM_CCGR5_CG1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR5_CG1_SHIFT
))&
CCM_CCGR5_CG1_MASK
)

	)

5210 
	#CCM_CCGR5_CG2_MASK
 0x30u

	)

5211 
	#CCM_CCGR5_CG2_SHIFT
 4

	)

5212 
	#CCM_CCGR5_CG2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR5_CG2_SHIFT
))&
CCM_CCGR5_CG2_MASK
)

	)

5213 
	#CCM_CCGR5_CG3_MASK
 0xC0u

	)

5214 
	#CCM_CCGR5_CG3_SHIFT
 6

	)

5215 
	#CCM_CCGR5_CG3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR5_CG3_SHIFT
))&
CCM_CCGR5_CG3_MASK
)

	)

5216 
	#CCM_CCGR5_CG4_MASK
 0x300u

	)

5217 
	#CCM_CCGR5_CG4_SHIFT
 8

	)

5218 
	#CCM_CCGR5_CG4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR5_CG4_SHIFT
))&
CCM_CCGR5_CG4_MASK
)

	)

5219 
	#CCM_CCGR5_CG5_MASK
 0xC00u

	)

5220 
	#CCM_CCGR5_CG5_SHIFT
 10

	)

5221 
	#CCM_CCGR5_CG5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR5_CG5_SHIFT
))&
CCM_CCGR5_CG5_MASK
)

	)

5222 
	#CCM_CCGR5_CG6_MASK
 0x3000u

	)

5223 
	#CCM_CCGR5_CG6_SHIFT
 12

	)

5224 
	#CCM_CCGR5_CG6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR5_CG6_SHIFT
))&
CCM_CCGR5_CG6_MASK
)

	)

5225 
	#CCM_CCGR5_CG7_MASK
 0xC000u

	)

5226 
	#CCM_CCGR5_CG7_SHIFT
 14

	)

5227 
	#CCM_CCGR5_CG7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR5_CG7_SHIFT
))&
CCM_CCGR5_CG7_MASK
)

	)

5228 
	#CCM_CCGR5_CG8_MASK
 0x30000u

	)

5229 
	#CCM_CCGR5_CG8_SHIFT
 16

	)

5230 
	#CCM_CCGR5_CG8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR5_CG8_SHIFT
))&
CCM_CCGR5_CG8_MASK
)

	)

5231 
	#CCM_CCGR5_CG9_MASK
 0xC0000u

	)

5232 
	#CCM_CCGR5_CG9_SHIFT
 18

	)

5233 
	#CCM_CCGR5_CG9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR5_CG9_SHIFT
))&
CCM_CCGR5_CG9_MASK
)

	)

5234 
	#CCM_CCGR5_CG10_MASK
 0x300000u

	)

5235 
	#CCM_CCGR5_CG10_SHIFT
 20

	)

5236 
	#CCM_CCGR5_CG10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR5_CG10_SHIFT
))&
CCM_CCGR5_CG10_MASK
)

	)

5237 
	#CCM_CCGR5_CG11_MASK
 0xC00000u

	)

5238 
	#CCM_CCGR5_CG11_SHIFT
 22

	)

5239 
	#CCM_CCGR5_CG11
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR5_CG11_SHIFT
))&
CCM_CCGR5_CG11_MASK
)

	)

5240 
	#CCM_CCGR5_CG12_MASK
 0x3000000u

	)

5241 
	#CCM_CCGR5_CG12_SHIFT
 24

	)

5242 
	#CCM_CCGR5_CG12
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR5_CG12_SHIFT
))&
CCM_CCGR5_CG12_MASK
)

	)

5243 
	#CCM_CCGR5_CG13_MASK
 0xC000000u

	)

5244 
	#CCM_CCGR5_CG13_SHIFT
 26

	)

5245 
	#CCM_CCGR5_CG13
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR5_CG13_SHIFT
))&
CCM_CCGR5_CG13_MASK
)

	)

5246 
	#CCM_CCGR5_CG14_MASK
 0x30000000u

	)

5247 
	#CCM_CCGR5_CG14_SHIFT
 28

	)

5248 
	#CCM_CCGR5_CG14
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR5_CG14_SHIFT
))&
CCM_CCGR5_CG14_MASK
)

	)

5249 
	#CCM_CCGR5_CG15_MASK
 0xC0000000u

	)

5250 
	#CCM_CCGR5_CG15_SHIFT
 30

	)

5251 
	#CCM_CCGR5_CG15
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR5_CG15_SHIFT
))&
CCM_CCGR5_CG15_MASK
)

	)

5253 
	#CCM_CCGR6_CG0_MASK
 0x3u

	)

5254 
	#CCM_CCGR6_CG0_SHIFT
 0

	)

5255 
	#CCM_CCGR6_CG0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR6_CG0_SHIFT
))&
CCM_CCGR6_CG0_MASK
)

	)

5256 
	#CCM_CCGR6_CG1_MASK
 0xCu

	)

5257 
	#CCM_CCGR6_CG1_SHIFT
 2

	)

5258 
	#CCM_CCGR6_CG1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR6_CG1_SHIFT
))&
CCM_CCGR6_CG1_MASK
)

	)

5259 
	#CCM_CCGR6_CG2_MASK
 0x30u

	)

5260 
	#CCM_CCGR6_CG2_SHIFT
 4

	)

5261 
	#CCM_CCGR6_CG2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR6_CG2_SHIFT
))&
CCM_CCGR6_CG2_MASK
)

	)

5262 
	#CCM_CCGR6_CG3_MASK
 0xC0u

	)

5263 
	#CCM_CCGR6_CG3_SHIFT
 6

	)

5264 
	#CCM_CCGR6_CG3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR6_CG3_SHIFT
))&
CCM_CCGR6_CG3_MASK
)

	)

5265 
	#CCM_CCGR6_CG4_MASK
 0x300u

	)

5266 
	#CCM_CCGR6_CG4_SHIFT
 8

	)

5267 
	#CCM_CCGR6_CG4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR6_CG4_SHIFT
))&
CCM_CCGR6_CG4_MASK
)

	)

5268 
	#CCM_CCGR6_CG5_MASK
 0xC00u

	)

5269 
	#CCM_CCGR6_CG5_SHIFT
 10

	)

5270 
	#CCM_CCGR6_CG5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR6_CG5_SHIFT
))&
CCM_CCGR6_CG5_MASK
)

	)

5271 
	#CCM_CCGR6_CG6_MASK
 0x3000u

	)

5272 
	#CCM_CCGR6_CG6_SHIFT
 12

	)

5273 
	#CCM_CCGR6_CG6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR6_CG6_SHIFT
))&
CCM_CCGR6_CG6_MASK
)

	)

5274 
	#CCM_CCGR6_CG7_MASK
 0xC000u

	)

5275 
	#CCM_CCGR6_CG7_SHIFT
 14

	)

5276 
	#CCM_CCGR6_CG7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR6_CG7_SHIFT
))&
CCM_CCGR6_CG7_MASK
)

	)

5277 
	#CCM_CCGR6_CG8_MASK
 0x30000u

	)

5278 
	#CCM_CCGR6_CG8_SHIFT
 16

	)

5279 
	#CCM_CCGR6_CG8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR6_CG8_SHIFT
))&
CCM_CCGR6_CG8_MASK
)

	)

5280 
	#CCM_CCGR6_CG9_MASK
 0xC0000u

	)

5281 
	#CCM_CCGR6_CG9_SHIFT
 18

	)

5282 
	#CCM_CCGR6_CG9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR6_CG9_SHIFT
))&
CCM_CCGR6_CG9_MASK
)

	)

5283 
	#CCM_CCGR6_CG10_MASK
 0x300000u

	)

5284 
	#CCM_CCGR6_CG10_SHIFT
 20

	)

5285 
	#CCM_CCGR6_CG10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR6_CG10_SHIFT
))&
CCM_CCGR6_CG10_MASK
)

	)

5286 
	#CCM_CCGR6_CG11_MASK
 0xC00000u

	)

5287 
	#CCM_CCGR6_CG11_SHIFT
 22

	)

5288 
	#CCM_CCGR6_CG11
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR6_CG11_SHIFT
))&
CCM_CCGR6_CG11_MASK
)

	)

5289 
	#CCM_CCGR6_CG12_MASK
 0x3000000u

	)

5290 
	#CCM_CCGR6_CG12_SHIFT
 24

	)

5291 
	#CCM_CCGR6_CG12
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR6_CG12_SHIFT
))&
CCM_CCGR6_CG12_MASK
)

	)

5292 
	#CCM_CCGR6_CG13_MASK
 0xC000000u

	)

5293 
	#CCM_CCGR6_CG13_SHIFT
 26

	)

5294 
	#CCM_CCGR6_CG13
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR6_CG13_SHIFT
))&
CCM_CCGR6_CG13_MASK
)

	)

5295 
	#CCM_CCGR6_CG14_MASK
 0x30000000u

	)

5296 
	#CCM_CCGR6_CG14_SHIFT
 28

	)

5297 
	#CCM_CCGR6_CG14
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR6_CG14_SHIFT
))&
CCM_CCGR6_CG14_MASK
)

	)

5298 
	#CCM_CCGR6_CG15_MASK
 0xC0000000u

	)

5299 
	#CCM_CCGR6_CG15_SHIFT
 30

	)

5300 
	#CCM_CCGR6_CG15
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_CCGR6_CG15_SHIFT
))&
CCM_CCGR6_CG15_MASK
)

	)

5302 
	#CCM_CMEOR_mod_í_ov_g±_MASK
 0x20u

	)

5303 
	#CCM_CMEOR_mod_í_ov_g±_SHIFT
 5

	)

5304 
	#CCM_CMEOR_mod_í_ov_ïô_MASK
 0x40u

	)

5305 
	#CCM_CMEOR_mod_í_ov_ïô_SHIFT
 6

	)

5306 
	#CCM_CMEOR_mod_í_usdhc_MASK
 0x80u

	)

5307 
	#CCM_CMEOR_mod_í_usdhc_SHIFT
 7

	)

5308 
	#CCM_CMEOR_mod_í_ov_gpu_MASK
 0x400u

	)

5309 
	#CCM_CMEOR_mod_í_ov_gpu_SHIFT
 10

	)

5310 
	#CCM_CMEOR_mod_í_ov_ˇn2_˝i_MASK
 0x10000000u

	)

5311 
	#CCM_CMEOR_mod_í_ov_ˇn2_˝i_SHIFT
 28

	)

5312 
	#CCM_CMEOR_mod_í_ov_ˇn1_˝i_MASK
 0x40000000u

	)

5313 
	#CCM_CMEOR_mod_í_ov_ˇn1_˝i_SHIFT
 30

	)

5321 
	#CCM_BASE
 (0x420C4000u)

	)

5323 
	#CCM
 ((
CCM_Ty≥
 *)
CCM_BASE
)

	)

5324 
	#CCM_BASE_PTR
 (
CCM
)

	)

5326 
	#CCM_BASE_ADDRS
 { 
CCM_BASE
 }

	)

5328 
	#CCM_BASE_PTRS
 { 
CCM
 }

	)

5341 
	#CCM_CCR
 
	`CCM_CCR_REG
(
CCM_BASE_PTR
)

	)

5342 
	#CCM_CCDR
 
	`CCM_CCDR_REG
(
CCM_BASE_PTR
)

	)

5343 
	#CCM_CSR
 
	`CCM_CSR_REG
(
CCM_BASE_PTR
)

	)

5344 
	#CCM_CCSR
 
	`CCM_CCSR_REG
(
CCM_BASE_PTR
)

	)

5345 
	#CCM_CACRR
 
	`CCM_CACRR_REG
(
CCM_BASE_PTR
)

	)

5346 
	#CCM_CBCDR
 
	`CCM_CBCDR_REG
(
CCM_BASE_PTR
)

	)

5347 
	#CCM_CBCMR
 
	`CCM_CBCMR_REG
(
CCM_BASE_PTR
)

	)

5348 
	#CCM_CSCMR1
 
	`CCM_CSCMR1_REG
(
CCM_BASE_PTR
)

	)

5349 
	#CCM_CSCMR2
 
	`CCM_CSCMR2_REG
(
CCM_BASE_PTR
)

	)

5350 
	#CCM_CSCDR1
 
	`CCM_CSCDR1_REG
(
CCM_BASE_PTR
)

	)

5351 
	#CCM_CS1CDR
 
	`CCM_CS1CDR_REG
(
CCM_BASE_PTR
)

	)

5352 
	#CCM_CS2CDR
 
	`CCM_CS2CDR_REG
(
CCM_BASE_PTR
)

	)

5353 
	#CCM_CDCDR
 
	`CCM_CDCDR_REG
(
CCM_BASE_PTR
)

	)

5354 
	#CCM_CHSCCDR
 
	`CCM_CHSCCDR_REG
(
CCM_BASE_PTR
)

	)

5355 
	#CCM_CSCDR2
 
	`CCM_CSCDR2_REG
(
CCM_BASE_PTR
)

	)

5356 
	#CCM_CSCDR3
 
	`CCM_CSCDR3_REG
(
CCM_BASE_PTR
)

	)

5357 
	#CCM_CWDR
 
	`CCM_CWDR_REG
(
CCM_BASE_PTR
)

	)

5358 
	#CCM_CDHIPR
 
	`CCM_CDHIPR_REG
(
CCM_BASE_PTR
)

	)

5359 
	#CCM_CLPCR
 
	`CCM_CLPCR_REG
(
CCM_BASE_PTR
)

	)

5360 
	#CCM_CISR
 
	`CCM_CISR_REG
(
CCM_BASE_PTR
)

	)

5361 
	#CCM_CIMR
 
	`CCM_CIMR_REG
(
CCM_BASE_PTR
)

	)

5362 
	#CCM_CCOSR
 
	`CCM_CCOSR_REG
(
CCM_BASE_PTR
)

	)

5363 
	#CCM_CGPR
 
	`CCM_CGPR_REG
(
CCM_BASE_PTR
)

	)

5364 
	#CCM_CCGR0
 
	`CCM_CCGR0_REG
(
CCM_BASE_PTR
)

	)

5365 
	#CCM_CCGR1
 
	`CCM_CCGR1_REG
(
CCM_BASE_PTR
)

	)

5366 
	#CCM_CCGR2
 
	`CCM_CCGR2_REG
(
CCM_BASE_PTR
)

	)

5367 
	#CCM_CCGR3
 
	`CCM_CCGR3_REG
(
CCM_BASE_PTR
)

	)

5368 
	#CCM_CCGR4
 
	`CCM_CCGR4_REG
(
CCM_BASE_PTR
)

	)

5369 
	#CCM_CCGR5
 
	`CCM_CCGR5_REG
(
CCM_BASE_PTR
)

	)

5370 
	#CCM_CCGR6
 
	`CCM_CCGR6_REG
(
CCM_BASE_PTR
)

	)

5371 
	#CCM_CMEOR
 
	`CCM_CMEOR_REG
(
CCM_BASE_PTR
)

	)

5392 
__IO
 
uöt32_t
 
	mPLL_ARM
;

5393 
__IO
 
uöt32_t
 
	mPLL_ARM_SET
;

5394 
__IO
 
uöt32_t
 
	mPLL_ARM_CLR
;

5395 
__IO
 
uöt32_t
 
	mPLL_ARM_TOG
;

5396 
__IO
 
uöt32_t
 
	mPLL_USB1
;

5397 
__IO
 
uöt32_t
 
	mPLL_USB1_SET
;

5398 
__IO
 
uöt32_t
 
	mPLL_USB1_CLR
;

5399 
__IO
 
uöt32_t
 
	mPLL_USB1_TOG
;

5400 
__IO
 
uöt32_t
 
	mPLL_USB2
;

5401 
__IO
 
uöt32_t
 
	mPLL_USB2_SET
;

5402 
__IO
 
uöt32_t
 
	mPLL_USB2_CLR
;

5403 
__IO
 
uöt32_t
 
	mPLL_USB2_TOG
;

5404 
__IO
 
uöt32_t
 
	mPLL_SYS
;

5405 
__IO
 
uöt32_t
 
	mPLL_SYS_SET
;

5406 
__IO
 
uöt32_t
 
	mPLL_SYS_CLR
;

5407 
__IO
 
uöt32_t
 
	mPLL_SYS_TOG
;

5408 
__IO
 
uöt32_t
 
	mPLL_SYS_SS
;

5409 
uöt8_t
 
	mRESERVED_0
[44];

5410 
__IO
 
uöt32_t
 
	mPLL_AUDIO
;

5411 
__IO
 
uöt32_t
 
	mPLL_AUDIO_SET
;

5412 
__IO
 
uöt32_t
 
	mPLL_AUDIO_CLR
;

5413 
__IO
 
uöt32_t
 
	mPLL_AUDIO_TOG
;

5414 
__IO
 
uöt32_t
 
	mPLL_AUDIO_NUM
;

5415 
uöt8_t
 
	mRESERVED_1
[12];

5416 
__IO
 
uöt32_t
 
	mPLL_AUDIO_DENOM
;

5417 
uöt8_t
 
	mRESERVED_2
[12];

5418 
__IO
 
uöt32_t
 
	mPLL_VIDEO
;

5419 
__IO
 
uöt32_t
 
	mPLL_VIDEO_SET
;

5420 
__IO
 
uöt32_t
 
	mPLL_VIDEO_CLR
;

5421 
__IO
 
uöt32_t
 
	mPLL_VIDEO_TOG
;

5422 
__IO
 
uöt32_t
 
	mPLL_VIDEO_NUM
;

5423 
uöt8_t
 
	mRESERVED_3
[12];

5424 
__IO
 
uöt32_t
 
	mPLL_VIDEO_DENOM
;

5425 
uöt8_t
 
	mRESERVED_4
[28];

5426 
__IO
 
uöt32_t
 
	mPLL_ENET
;

5427 
__IO
 
uöt32_t
 
	mPLL_ENET_SET
;

5428 
__IO
 
uöt32_t
 
	mPLL_ENET_CLR
;

5429 
__IO
 
uöt32_t
 
	mPLL_ENET_TOG
;

5430 
__IO
 
uöt32_t
 
	mPFD_480
;

5431 
__IO
 
uöt32_t
 
	mPFD_480_SET
;

5432 
__IO
 
uöt32_t
 
	mPFD_480_CLR
;

5433 
__IO
 
uöt32_t
 
	mPFD_480_TOG
;

5434 
__IO
 
uöt32_t
 
	mPFD_528
;

5435 
__IO
 
uöt32_t
 
	mPFD_528_SET
;

5436 
__IO
 
uöt32_t
 
	mPFD_528_CLR
;

5437 
__IO
 
uöt32_t
 
	mPFD_528_TOG
;

5438 
uöt8_t
 
	mRESERVED_5
[64];

5439 
__IO
 
uöt32_t
 
	mMISC0
;

5440 
__IO
 
uöt32_t
 
	mMISC0_SET
;

5441 
__IO
 
uöt32_t
 
	mMISC0_CLR
;

5442 
__IO
 
uöt32_t
 
	mMISC0_TOG
;

5443 
__IO
 
uöt32_t
 
	mMISC1
;

5444 
__IO
 
uöt32_t
 
	mMISC1_SET
;

5445 
__IO
 
uöt32_t
 
	mMISC1_CLR
;

5446 
__IO
 
uöt32_t
 
	mMISC1_TOG
;

5447 
__IO
 
uöt32_t
 
	mMISC2
;

5448 
__IO
 
uöt32_t
 
	mMISC2_SET
;

5449 
__IO
 
uöt32_t
 
	mMISC2_CLR
;

5450 
__IO
 
uöt32_t
 
	mMISC2_TOG
;

5451 } 
	tCCM_ANALOG_Ty≥
, *
	tCCM_ANALOG_MemM≠På
;

5463 
	#CCM_ANALOG_PLL_ARM_REG
(
ba£
Ë((ba£)->
PLL_ARM
)

	)

5464 
	#CCM_ANALOG_PLL_ARM_SET_REG
(
ba£
Ë((ba£)->
PLL_ARM_SET
)

	)

5465 
	#CCM_ANALOG_PLL_ARM_CLR_REG
(
ba£
Ë((ba£)->
PLL_ARM_CLR
)

	)

5466 
	#CCM_ANALOG_PLL_ARM_TOG_REG
(
ba£
Ë((ba£)->
PLL_ARM_TOG
)

	)

5467 
	#CCM_ANALOG_PLL_USB1_REG
(
ba£
Ë((ba£)->
PLL_USB1
)

	)

5468 
	#CCM_ANALOG_PLL_USB1_SET_REG
(
ba£
Ë((ba£)->
PLL_USB1_SET
)

	)

5469 
	#CCM_ANALOG_PLL_USB1_CLR_REG
(
ba£
Ë((ba£)->
PLL_USB1_CLR
)

	)

5470 
	#CCM_ANALOG_PLL_USB1_TOG_REG
(
ba£
Ë((ba£)->
PLL_USB1_TOG
)

	)

5471 
	#CCM_ANALOG_PLL_USB2_REG
(
ba£
Ë((ba£)->
PLL_USB2
)

	)

5472 
	#CCM_ANALOG_PLL_USB2_SET_REG
(
ba£
Ë((ba£)->
PLL_USB2_SET
)

	)

5473 
	#CCM_ANALOG_PLL_USB2_CLR_REG
(
ba£
Ë((ba£)->
PLL_USB2_CLR
)

	)

5474 
	#CCM_ANALOG_PLL_USB2_TOG_REG
(
ba£
Ë((ba£)->
PLL_USB2_TOG
)

	)

5475 
	#CCM_ANALOG_PLL_SYS_REG
(
ba£
Ë((ba£)->
PLL_SYS
)

	)

5476 
	#CCM_ANALOG_PLL_SYS_SET_REG
(
ba£
Ë((ba£)->
PLL_SYS_SET
)

	)

5477 
	#CCM_ANALOG_PLL_SYS_CLR_REG
(
ba£
Ë((ba£)->
PLL_SYS_CLR
)

	)

5478 
	#CCM_ANALOG_PLL_SYS_TOG_REG
(
ba£
Ë((ba£)->
PLL_SYS_TOG
)

	)

5479 
	#CCM_ANALOG_PLL_SYS_SS_REG
(
ba£
Ë((ba£)->
PLL_SYS_SS
)

	)

5480 
	#CCM_ANALOG_PLL_AUDIO_REG
(
ba£
Ë((ba£)->
PLL_AUDIO
)

	)

5481 
	#CCM_ANALOG_PLL_AUDIO_SET_REG
(
ba£
Ë((ba£)->
PLL_AUDIO_SET
)

	)

5482 
	#CCM_ANALOG_PLL_AUDIO_CLR_REG
(
ba£
Ë((ba£)->
PLL_AUDIO_CLR
)

	)

5483 
	#CCM_ANALOG_PLL_AUDIO_TOG_REG
(
ba£
Ë((ba£)->
PLL_AUDIO_TOG
)

	)

5484 
	#CCM_ANALOG_PLL_AUDIO_NUM_REG
(
ba£
Ë((ba£)->
PLL_AUDIO_NUM
)

	)

5485 
	#CCM_ANALOG_PLL_AUDIO_DENOM_REG
(
ba£
Ë((ba£)->
PLL_AUDIO_DENOM
)

	)

5486 
	#CCM_ANALOG_PLL_VIDEO_REG
(
ba£
Ë((ba£)->
PLL_VIDEO
)

	)

5487 
	#CCM_ANALOG_PLL_VIDEO_SET_REG
(
ba£
Ë((ba£)->
PLL_VIDEO_SET
)

	)

5488 
	#CCM_ANALOG_PLL_VIDEO_CLR_REG
(
ba£
Ë((ba£)->
PLL_VIDEO_CLR
)

	)

5489 
	#CCM_ANALOG_PLL_VIDEO_TOG_REG
(
ba£
Ë((ba£)->
PLL_VIDEO_TOG
)

	)

5490 
	#CCM_ANALOG_PLL_VIDEO_NUM_REG
(
ba£
Ë((ba£)->
PLL_VIDEO_NUM
)

	)

5491 
	#CCM_ANALOG_PLL_VIDEO_DENOM_REG
(
ba£
Ë((ba£)->
PLL_VIDEO_DENOM
)

	)

5492 
	#CCM_ANALOG_PLL_ENET_REG
(
ba£
Ë((ba£)->
PLL_ENET
)

	)

5493 
	#CCM_ANALOG_PLL_ENET_SET_REG
(
ba£
Ë((ba£)->
PLL_ENET_SET
)

	)

5494 
	#CCM_ANALOG_PLL_ENET_CLR_REG
(
ba£
Ë((ba£)->
PLL_ENET_CLR
)

	)

5495 
	#CCM_ANALOG_PLL_ENET_TOG_REG
(
ba£
Ë((ba£)->
PLL_ENET_TOG
)

	)

5496 
	#CCM_ANALOG_PFD_480_REG
(
ba£
Ë((ba£)->
PFD_480
)

	)

5497 
	#CCM_ANALOG_PFD_480_SET_REG
(
ba£
Ë((ba£)->
PFD_480_SET
)

	)

5498 
	#CCM_ANALOG_PFD_480_CLR_REG
(
ba£
Ë((ba£)->
PFD_480_CLR
)

	)

5499 
	#CCM_ANALOG_PFD_480_TOG_REG
(
ba£
Ë((ba£)->
PFD_480_TOG
)

	)

5500 
	#CCM_ANALOG_PFD_528_REG
(
ba£
Ë((ba£)->
PFD_528
)

	)

5501 
	#CCM_ANALOG_PFD_528_SET_REG
(
ba£
Ë((ba£)->
PFD_528_SET
)

	)

5502 
	#CCM_ANALOG_PFD_528_CLR_REG
(
ba£
Ë((ba£)->
PFD_528_CLR
)

	)

5503 
	#CCM_ANALOG_PFD_528_TOG_REG
(
ba£
Ë((ba£)->
PFD_528_TOG
)

	)

5504 
	#CCM_ANALOG_MISC0_REG
(
ba£
Ë((ba£)->
MISC0
)

	)

5505 
	#CCM_ANALOG_MISC0_SET_REG
(
ba£
Ë((ba£)->
MISC0_SET
)

	)

5506 
	#CCM_ANALOG_MISC0_CLR_REG
(
ba£
Ë((ba£)->
MISC0_CLR
)

	)

5507 
	#CCM_ANALOG_MISC0_TOG_REG
(
ba£
Ë((ba£)->
MISC0_TOG
)

	)

5508 
	#CCM_ANALOG_MISC1_REG
(
ba£
Ë((ba£)->
MISC1
)

	)

5509 
	#CCM_ANALOG_MISC1_SET_REG
(
ba£
Ë((ba£)->
MISC1_SET
)

	)

5510 
	#CCM_ANALOG_MISC1_CLR_REG
(
ba£
Ë((ba£)->
MISC1_CLR
)

	)

5511 
	#CCM_ANALOG_MISC1_TOG_REG
(
ba£
Ë((ba£)->
MISC1_TOG
)

	)

5512 
	#CCM_ANALOG_MISC2_REG
(
ba£
Ë((ba£)->
MISC2
)

	)

5513 
	#CCM_ANALOG_MISC2_SET_REG
(
ba£
Ë((ba£)->
MISC2_SET
)

	)

5514 
	#CCM_ANALOG_MISC2_CLR_REG
(
ba£
Ë((ba£)->
MISC2_CLR
)

	)

5515 
	#CCM_ANALOG_MISC2_TOG_REG
(
ba£
Ë((ba£)->
MISC2_TOG
)

	)

5531 
	#CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK
 0x7Fu

	)

5532 
	#CCM_ANALOG_PLL_ARM_DIV_SELECT_SHIFT
 0

	)

5533 
	#CCM_ANALOG_PLL_ARM_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ARM_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK
)

	)

5534 
	#CCM_ANALOG_PLL_ARM_POWERDOWN_MASK
 0x1000u

	)

5535 
	#CCM_ANALOG_PLL_ARM_POWERDOWN_SHIFT
 12

	)

5536 
	#CCM_ANALOG_PLL_ARM_ENABLE_MASK
 0x2000u

	)

5537 
	#CCM_ANALOG_PLL_ARM_ENABLE_SHIFT
 13

	)

5538 
	#CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5539 
	#CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC_SHIFT
 14

	)

5540 
	#CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_ARM_BYPASS_CLK_SRC_MASK
)

	)

5541 
	#CCM_ANALOG_PLL_ARM_BYPASS_MASK
 0x10000u

	)

5542 
	#CCM_ANALOG_PLL_ARM_BYPASS_SHIFT
 16

	)

5543 
	#CCM_ANALOG_PLL_ARM_LVDS_SEL_MASK
 0x20000u

	)

5544 
	#CCM_ANALOG_PLL_ARM_LVDS_SEL_SHIFT
 17

	)

5545 
	#CCM_ANALOG_PLL_ARM_LVDS_24MHZ_SEL_MASK
 0x40000u

	)

5546 
	#CCM_ANALOG_PLL_ARM_LVDS_24MHZ_SEL_SHIFT
 18

	)

5547 
	#CCM_ANALOG_PLL_ARM_PLL_SEL_MASK
 0x80000u

	)

5548 
	#CCM_ANALOG_PLL_ARM_PLL_SEL_SHIFT
 19

	)

5549 
	#CCM_ANALOG_PLL_ARM_LOCK_MASK
 0x80000000u

	)

5550 
	#CCM_ANALOG_PLL_ARM_LOCK_SHIFT
 31

	)

5552 
	#CCM_ANALOG_PLL_ARM_SET_DIV_SELECT_MASK
 0x7Fu

	)

5553 
	#CCM_ANALOG_PLL_ARM_SET_DIV_SELECT_SHIFT
 0

	)

5554 
	#CCM_ANALOG_PLL_ARM_SET_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ARM_SET_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_ARM_SET_DIV_SELECT_MASK
)

	)

5555 
	#CCM_ANALOG_PLL_ARM_SET_POWERDOWN_MASK
 0x1000u

	)

5556 
	#CCM_ANALOG_PLL_ARM_SET_POWERDOWN_SHIFT
 12

	)

5557 
	#CCM_ANALOG_PLL_ARM_SET_ENABLE_MASK
 0x2000u

	)

5558 
	#CCM_ANALOG_PLL_ARM_SET_ENABLE_SHIFT
 13

	)

5559 
	#CCM_ANALOG_PLL_ARM_SET_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5560 
	#CCM_ANALOG_PLL_ARM_SET_BYPASS_CLK_SRC_SHIFT
 14

	)

5561 
	#CCM_ANALOG_PLL_ARM_SET_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ARM_SET_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_ARM_SET_BYPASS_CLK_SRC_MASK
)

	)

5562 
	#CCM_ANALOG_PLL_ARM_SET_BYPASS_MASK
 0x10000u

	)

5563 
	#CCM_ANALOG_PLL_ARM_SET_BYPASS_SHIFT
 16

	)

5564 
	#CCM_ANALOG_PLL_ARM_SET_LVDS_SEL_MASK
 0x20000u

	)

5565 
	#CCM_ANALOG_PLL_ARM_SET_LVDS_SEL_SHIFT
 17

	)

5566 
	#CCM_ANALOG_PLL_ARM_SET_LVDS_24MHZ_SEL_MASK
 0x40000u

	)

5567 
	#CCM_ANALOG_PLL_ARM_SET_LVDS_24MHZ_SEL_SHIFT
 18

	)

5568 
	#CCM_ANALOG_PLL_ARM_SET_PLL_SEL_MASK
 0x80000u

	)

5569 
	#CCM_ANALOG_PLL_ARM_SET_PLL_SEL_SHIFT
 19

	)

5570 
	#CCM_ANALOG_PLL_ARM_SET_LOCK_MASK
 0x80000000u

	)

5571 
	#CCM_ANALOG_PLL_ARM_SET_LOCK_SHIFT
 31

	)

5573 
	#CCM_ANALOG_PLL_ARM_CLR_DIV_SELECT_MASK
 0x7Fu

	)

5574 
	#CCM_ANALOG_PLL_ARM_CLR_DIV_SELECT_SHIFT
 0

	)

5575 
	#CCM_ANALOG_PLL_ARM_CLR_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ARM_CLR_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_ARM_CLR_DIV_SELECT_MASK
)

	)

5576 
	#CCM_ANALOG_PLL_ARM_CLR_POWERDOWN_MASK
 0x1000u

	)

5577 
	#CCM_ANALOG_PLL_ARM_CLR_POWERDOWN_SHIFT
 12

	)

5578 
	#CCM_ANALOG_PLL_ARM_CLR_ENABLE_MASK
 0x2000u

	)

5579 
	#CCM_ANALOG_PLL_ARM_CLR_ENABLE_SHIFT
 13

	)

5580 
	#CCM_ANALOG_PLL_ARM_CLR_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5581 
	#CCM_ANALOG_PLL_ARM_CLR_BYPASS_CLK_SRC_SHIFT
 14

	)

5582 
	#CCM_ANALOG_PLL_ARM_CLR_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ARM_CLR_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_ARM_CLR_BYPASS_CLK_SRC_MASK
)

	)

5583 
	#CCM_ANALOG_PLL_ARM_CLR_BYPASS_MASK
 0x10000u

	)

5584 
	#CCM_ANALOG_PLL_ARM_CLR_BYPASS_SHIFT
 16

	)

5585 
	#CCM_ANALOG_PLL_ARM_CLR_LVDS_SEL_MASK
 0x20000u

	)

5586 
	#CCM_ANALOG_PLL_ARM_CLR_LVDS_SEL_SHIFT
 17

	)

5587 
	#CCM_ANALOG_PLL_ARM_CLR_LVDS_24MHZ_SEL_MASK
 0x40000u

	)

5588 
	#CCM_ANALOG_PLL_ARM_CLR_LVDS_24MHZ_SEL_SHIFT
 18

	)

5589 
	#CCM_ANALOG_PLL_ARM_CLR_PLL_SEL_MASK
 0x80000u

	)

5590 
	#CCM_ANALOG_PLL_ARM_CLR_PLL_SEL_SHIFT
 19

	)

5591 
	#CCM_ANALOG_PLL_ARM_CLR_LOCK_MASK
 0x80000000u

	)

5592 
	#CCM_ANALOG_PLL_ARM_CLR_LOCK_SHIFT
 31

	)

5594 
	#CCM_ANALOG_PLL_ARM_TOG_DIV_SELECT_MASK
 0x7Fu

	)

5595 
	#CCM_ANALOG_PLL_ARM_TOG_DIV_SELECT_SHIFT
 0

	)

5596 
	#CCM_ANALOG_PLL_ARM_TOG_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ARM_TOG_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_ARM_TOG_DIV_SELECT_MASK
)

	)

5597 
	#CCM_ANALOG_PLL_ARM_TOG_POWERDOWN_MASK
 0x1000u

	)

5598 
	#CCM_ANALOG_PLL_ARM_TOG_POWERDOWN_SHIFT
 12

	)

5599 
	#CCM_ANALOG_PLL_ARM_TOG_ENABLE_MASK
 0x2000u

	)

5600 
	#CCM_ANALOG_PLL_ARM_TOG_ENABLE_SHIFT
 13

	)

5601 
	#CCM_ANALOG_PLL_ARM_TOG_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5602 
	#CCM_ANALOG_PLL_ARM_TOG_BYPASS_CLK_SRC_SHIFT
 14

	)

5603 
	#CCM_ANALOG_PLL_ARM_TOG_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ARM_TOG_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_ARM_TOG_BYPASS_CLK_SRC_MASK
)

	)

5604 
	#CCM_ANALOG_PLL_ARM_TOG_BYPASS_MASK
 0x10000u

	)

5605 
	#CCM_ANALOG_PLL_ARM_TOG_BYPASS_SHIFT
 16

	)

5606 
	#CCM_ANALOG_PLL_ARM_TOG_LVDS_SEL_MASK
 0x20000u

	)

5607 
	#CCM_ANALOG_PLL_ARM_TOG_LVDS_SEL_SHIFT
 17

	)

5608 
	#CCM_ANALOG_PLL_ARM_TOG_LVDS_24MHZ_SEL_MASK
 0x40000u

	)

5609 
	#CCM_ANALOG_PLL_ARM_TOG_LVDS_24MHZ_SEL_SHIFT
 18

	)

5610 
	#CCM_ANALOG_PLL_ARM_TOG_PLL_SEL_MASK
 0x80000u

	)

5611 
	#CCM_ANALOG_PLL_ARM_TOG_PLL_SEL_SHIFT
 19

	)

5612 
	#CCM_ANALOG_PLL_ARM_TOG_LOCK_MASK
 0x80000000u

	)

5613 
	#CCM_ANALOG_PLL_ARM_TOG_LOCK_SHIFT
 31

	)

5615 
	#CCM_ANALOG_PLL_USB1_DIV_SELECT_MASK
 0x3u

	)

5616 
	#CCM_ANALOG_PLL_USB1_DIV_SELECT_SHIFT
 0

	)

5617 
	#CCM_ANALOG_PLL_USB1_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_USB1_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_USB1_DIV_SELECT_MASK
)

	)

5618 
	#CCM_ANALOG_PLL_USB1_EN_USB_CLKS_MASK
 0x40u

	)

5619 
	#CCM_ANALOG_PLL_USB1_EN_USB_CLKS_SHIFT
 6

	)

5620 
	#CCM_ANALOG_PLL_USB1_POWER_MASK
 0x1000u

	)

5621 
	#CCM_ANALOG_PLL_USB1_POWER_SHIFT
 12

	)

5622 
	#CCM_ANALOG_PLL_USB1_ENABLE_MASK
 0x2000u

	)

5623 
	#CCM_ANALOG_PLL_USB1_ENABLE_SHIFT
 13

	)

5624 
	#CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5625 
	#CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC_SHIFT
 14

	)

5626 
	#CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_USB1_BYPASS_CLK_SRC_MASK
)

	)

5627 
	#CCM_ANALOG_PLL_USB1_BYPASS_MASK
 0x10000u

	)

5628 
	#CCM_ANALOG_PLL_USB1_BYPASS_SHIFT
 16

	)

5629 
	#CCM_ANALOG_PLL_USB1_LOCK_MASK
 0x80000000u

	)

5630 
	#CCM_ANALOG_PLL_USB1_LOCK_SHIFT
 31

	)

5632 
	#CCM_ANALOG_PLL_USB1_SET_DIV_SELECT_MASK
 0x3u

	)

5633 
	#CCM_ANALOG_PLL_USB1_SET_DIV_SELECT_SHIFT
 0

	)

5634 
	#CCM_ANALOG_PLL_USB1_SET_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_USB1_SET_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_USB1_SET_DIV_SELECT_MASK
)

	)

5635 
	#CCM_ANALOG_PLL_USB1_SET_EN_USB_CLKS_MASK
 0x40u

	)

5636 
	#CCM_ANALOG_PLL_USB1_SET_EN_USB_CLKS_SHIFT
 6

	)

5637 
	#CCM_ANALOG_PLL_USB1_SET_POWER_MASK
 0x1000u

	)

5638 
	#CCM_ANALOG_PLL_USB1_SET_POWER_SHIFT
 12

	)

5639 
	#CCM_ANALOG_PLL_USB1_SET_ENABLE_MASK
 0x2000u

	)

5640 
	#CCM_ANALOG_PLL_USB1_SET_ENABLE_SHIFT
 13

	)

5641 
	#CCM_ANALOG_PLL_USB1_SET_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5642 
	#CCM_ANALOG_PLL_USB1_SET_BYPASS_CLK_SRC_SHIFT
 14

	)

5643 
	#CCM_ANALOG_PLL_USB1_SET_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_USB1_SET_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_USB1_SET_BYPASS_CLK_SRC_MASK
)

	)

5644 
	#CCM_ANALOG_PLL_USB1_SET_BYPASS_MASK
 0x10000u

	)

5645 
	#CCM_ANALOG_PLL_USB1_SET_BYPASS_SHIFT
 16

	)

5646 
	#CCM_ANALOG_PLL_USB1_SET_LOCK_MASK
 0x80000000u

	)

5647 
	#CCM_ANALOG_PLL_USB1_SET_LOCK_SHIFT
 31

	)

5649 
	#CCM_ANALOG_PLL_USB1_CLR_DIV_SELECT_MASK
 0x3u

	)

5650 
	#CCM_ANALOG_PLL_USB1_CLR_DIV_SELECT_SHIFT
 0

	)

5651 
	#CCM_ANALOG_PLL_USB1_CLR_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_USB1_CLR_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_USB1_CLR_DIV_SELECT_MASK
)

	)

5652 
	#CCM_ANALOG_PLL_USB1_CLR_EN_USB_CLKS_MASK
 0x40u

	)

5653 
	#CCM_ANALOG_PLL_USB1_CLR_EN_USB_CLKS_SHIFT
 6

	)

5654 
	#CCM_ANALOG_PLL_USB1_CLR_POWER_MASK
 0x1000u

	)

5655 
	#CCM_ANALOG_PLL_USB1_CLR_POWER_SHIFT
 12

	)

5656 
	#CCM_ANALOG_PLL_USB1_CLR_ENABLE_MASK
 0x2000u

	)

5657 
	#CCM_ANALOG_PLL_USB1_CLR_ENABLE_SHIFT
 13

	)

5658 
	#CCM_ANALOG_PLL_USB1_CLR_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5659 
	#CCM_ANALOG_PLL_USB1_CLR_BYPASS_CLK_SRC_SHIFT
 14

	)

5660 
	#CCM_ANALOG_PLL_USB1_CLR_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_USB1_CLR_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_USB1_CLR_BYPASS_CLK_SRC_MASK
)

	)

5661 
	#CCM_ANALOG_PLL_USB1_CLR_BYPASS_MASK
 0x10000u

	)

5662 
	#CCM_ANALOG_PLL_USB1_CLR_BYPASS_SHIFT
 16

	)

5663 
	#CCM_ANALOG_PLL_USB1_CLR_LOCK_MASK
 0x80000000u

	)

5664 
	#CCM_ANALOG_PLL_USB1_CLR_LOCK_SHIFT
 31

	)

5666 
	#CCM_ANALOG_PLL_USB1_TOG_DIV_SELECT_MASK
 0x3u

	)

5667 
	#CCM_ANALOG_PLL_USB1_TOG_DIV_SELECT_SHIFT
 0

	)

5668 
	#CCM_ANALOG_PLL_USB1_TOG_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_USB1_TOG_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_USB1_TOG_DIV_SELECT_MASK
)

	)

5669 
	#CCM_ANALOG_PLL_USB1_TOG_EN_USB_CLKS_MASK
 0x40u

	)

5670 
	#CCM_ANALOG_PLL_USB1_TOG_EN_USB_CLKS_SHIFT
 6

	)

5671 
	#CCM_ANALOG_PLL_USB1_TOG_POWER_MASK
 0x1000u

	)

5672 
	#CCM_ANALOG_PLL_USB1_TOG_POWER_SHIFT
 12

	)

5673 
	#CCM_ANALOG_PLL_USB1_TOG_ENABLE_MASK
 0x2000u

	)

5674 
	#CCM_ANALOG_PLL_USB1_TOG_ENABLE_SHIFT
 13

	)

5675 
	#CCM_ANALOG_PLL_USB1_TOG_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5676 
	#CCM_ANALOG_PLL_USB1_TOG_BYPASS_CLK_SRC_SHIFT
 14

	)

5677 
	#CCM_ANALOG_PLL_USB1_TOG_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_USB1_TOG_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_USB1_TOG_BYPASS_CLK_SRC_MASK
)

	)

5678 
	#CCM_ANALOG_PLL_USB1_TOG_BYPASS_MASK
 0x10000u

	)

5679 
	#CCM_ANALOG_PLL_USB1_TOG_BYPASS_SHIFT
 16

	)

5680 
	#CCM_ANALOG_PLL_USB1_TOG_LOCK_MASK
 0x80000000u

	)

5681 
	#CCM_ANALOG_PLL_USB1_TOG_LOCK_SHIFT
 31

	)

5683 
	#CCM_ANALOG_PLL_USB2_DIV_SELECT_MASK
 0x3u

	)

5684 
	#CCM_ANALOG_PLL_USB2_DIV_SELECT_SHIFT
 0

	)

5685 
	#CCM_ANALOG_PLL_USB2_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_USB2_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_USB2_DIV_SELECT_MASK
)

	)

5686 
	#CCM_ANALOG_PLL_USB2_EN_USB_CLKS_MASK
 0x40u

	)

5687 
	#CCM_ANALOG_PLL_USB2_EN_USB_CLKS_SHIFT
 6

	)

5688 
	#CCM_ANALOG_PLL_USB2_POWER_MASK
 0x1000u

	)

5689 
	#CCM_ANALOG_PLL_USB2_POWER_SHIFT
 12

	)

5690 
	#CCM_ANALOG_PLL_USB2_ENABLE_MASK
 0x2000u

	)

5691 
	#CCM_ANALOG_PLL_USB2_ENABLE_SHIFT
 13

	)

5692 
	#CCM_ANALOG_PLL_USB2_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5693 
	#CCM_ANALOG_PLL_USB2_BYPASS_CLK_SRC_SHIFT
 14

	)

5694 
	#CCM_ANALOG_PLL_USB2_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_USB2_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_USB2_BYPASS_CLK_SRC_MASK
)

	)

5695 
	#CCM_ANALOG_PLL_USB2_BYPASS_MASK
 0x10000u

	)

5696 
	#CCM_ANALOG_PLL_USB2_BYPASS_SHIFT
 16

	)

5697 
	#CCM_ANALOG_PLL_USB2_LOCK_MASK
 0x80000000u

	)

5698 
	#CCM_ANALOG_PLL_USB2_LOCK_SHIFT
 31

	)

5700 
	#CCM_ANALOG_PLL_USB2_SET_DIV_SELECT_MASK
 0x3u

	)

5701 
	#CCM_ANALOG_PLL_USB2_SET_DIV_SELECT_SHIFT
 0

	)

5702 
	#CCM_ANALOG_PLL_USB2_SET_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_USB2_SET_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_USB2_SET_DIV_SELECT_MASK
)

	)

5703 
	#CCM_ANALOG_PLL_USB2_SET_EN_USB_CLKS_MASK
 0x40u

	)

5704 
	#CCM_ANALOG_PLL_USB2_SET_EN_USB_CLKS_SHIFT
 6

	)

5705 
	#CCM_ANALOG_PLL_USB2_SET_POWER_MASK
 0x1000u

	)

5706 
	#CCM_ANALOG_PLL_USB2_SET_POWER_SHIFT
 12

	)

5707 
	#CCM_ANALOG_PLL_USB2_SET_ENABLE_MASK
 0x2000u

	)

5708 
	#CCM_ANALOG_PLL_USB2_SET_ENABLE_SHIFT
 13

	)

5709 
	#CCM_ANALOG_PLL_USB2_SET_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5710 
	#CCM_ANALOG_PLL_USB2_SET_BYPASS_CLK_SRC_SHIFT
 14

	)

5711 
	#CCM_ANALOG_PLL_USB2_SET_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_USB2_SET_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_USB2_SET_BYPASS_CLK_SRC_MASK
)

	)

5712 
	#CCM_ANALOG_PLL_USB2_SET_BYPASS_MASK
 0x10000u

	)

5713 
	#CCM_ANALOG_PLL_USB2_SET_BYPASS_SHIFT
 16

	)

5714 
	#CCM_ANALOG_PLL_USB2_SET_LOCK_MASK
 0x80000000u

	)

5715 
	#CCM_ANALOG_PLL_USB2_SET_LOCK_SHIFT
 31

	)

5717 
	#CCM_ANALOG_PLL_USB2_CLR_DIV_SELECT_MASK
 0x3u

	)

5718 
	#CCM_ANALOG_PLL_USB2_CLR_DIV_SELECT_SHIFT
 0

	)

5719 
	#CCM_ANALOG_PLL_USB2_CLR_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_USB2_CLR_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_USB2_CLR_DIV_SELECT_MASK
)

	)

5720 
	#CCM_ANALOG_PLL_USB2_CLR_EN_USB_CLKS_MASK
 0x40u

	)

5721 
	#CCM_ANALOG_PLL_USB2_CLR_EN_USB_CLKS_SHIFT
 6

	)

5722 
	#CCM_ANALOG_PLL_USB2_CLR_POWER_MASK
 0x1000u

	)

5723 
	#CCM_ANALOG_PLL_USB2_CLR_POWER_SHIFT
 12

	)

5724 
	#CCM_ANALOG_PLL_USB2_CLR_ENABLE_MASK
 0x2000u

	)

5725 
	#CCM_ANALOG_PLL_USB2_CLR_ENABLE_SHIFT
 13

	)

5726 
	#CCM_ANALOG_PLL_USB2_CLR_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5727 
	#CCM_ANALOG_PLL_USB2_CLR_BYPASS_CLK_SRC_SHIFT
 14

	)

5728 
	#CCM_ANALOG_PLL_USB2_CLR_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_USB2_CLR_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_USB2_CLR_BYPASS_CLK_SRC_MASK
)

	)

5729 
	#CCM_ANALOG_PLL_USB2_CLR_BYPASS_MASK
 0x10000u

	)

5730 
	#CCM_ANALOG_PLL_USB2_CLR_BYPASS_SHIFT
 16

	)

5731 
	#CCM_ANALOG_PLL_USB2_CLR_LOCK_MASK
 0x80000000u

	)

5732 
	#CCM_ANALOG_PLL_USB2_CLR_LOCK_SHIFT
 31

	)

5734 
	#CCM_ANALOG_PLL_USB2_TOG_DIV_SELECT_MASK
 0x3u

	)

5735 
	#CCM_ANALOG_PLL_USB2_TOG_DIV_SELECT_SHIFT
 0

	)

5736 
	#CCM_ANALOG_PLL_USB2_TOG_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_USB2_TOG_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_USB2_TOG_DIV_SELECT_MASK
)

	)

5737 
	#CCM_ANALOG_PLL_USB2_TOG_EN_USB_CLKS_MASK
 0x40u

	)

5738 
	#CCM_ANALOG_PLL_USB2_TOG_EN_USB_CLKS_SHIFT
 6

	)

5739 
	#CCM_ANALOG_PLL_USB2_TOG_POWER_MASK
 0x1000u

	)

5740 
	#CCM_ANALOG_PLL_USB2_TOG_POWER_SHIFT
 12

	)

5741 
	#CCM_ANALOG_PLL_USB2_TOG_ENABLE_MASK
 0x2000u

	)

5742 
	#CCM_ANALOG_PLL_USB2_TOG_ENABLE_SHIFT
 13

	)

5743 
	#CCM_ANALOG_PLL_USB2_TOG_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5744 
	#CCM_ANALOG_PLL_USB2_TOG_BYPASS_CLK_SRC_SHIFT
 14

	)

5745 
	#CCM_ANALOG_PLL_USB2_TOG_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_USB2_TOG_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_USB2_TOG_BYPASS_CLK_SRC_MASK
)

	)

5746 
	#CCM_ANALOG_PLL_USB2_TOG_BYPASS_MASK
 0x10000u

	)

5747 
	#CCM_ANALOG_PLL_USB2_TOG_BYPASS_SHIFT
 16

	)

5748 
	#CCM_ANALOG_PLL_USB2_TOG_LOCK_MASK
 0x80000000u

	)

5749 
	#CCM_ANALOG_PLL_USB2_TOG_LOCK_SHIFT
 31

	)

5751 
	#CCM_ANALOG_PLL_SYS_DIV_SELECT_MASK
 0x1u

	)

5752 
	#CCM_ANALOG_PLL_SYS_DIV_SELECT_SHIFT
 0

	)

5753 
	#CCM_ANALOG_PLL_SYS_POWERDOWN_MASK
 0x1000u

	)

5754 
	#CCM_ANALOG_PLL_SYS_POWERDOWN_SHIFT
 12

	)

5755 
	#CCM_ANALOG_PLL_SYS_ENABLE_MASK
 0x2000u

	)

5756 
	#CCM_ANALOG_PLL_SYS_ENABLE_SHIFT
 13

	)

5757 
	#CCM_ANALOG_PLL_SYS_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5758 
	#CCM_ANALOG_PLL_SYS_BYPASS_CLK_SRC_SHIFT
 14

	)

5759 
	#CCM_ANALOG_PLL_SYS_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_SYS_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_SYS_BYPASS_CLK_SRC_MASK
)

	)

5760 
	#CCM_ANALOG_PLL_SYS_BYPASS_MASK
 0x10000u

	)

5761 
	#CCM_ANALOG_PLL_SYS_BYPASS_SHIFT
 16

	)

5762 
	#CCM_ANALOG_PLL_SYS_PFD_OFFSET_EN_MASK
 0x40000u

	)

5763 
	#CCM_ANALOG_PLL_SYS_PFD_OFFSET_EN_SHIFT
 18

	)

5764 
	#CCM_ANALOG_PLL_SYS_LOCK_MASK
 0x80000000u

	)

5765 
	#CCM_ANALOG_PLL_SYS_LOCK_SHIFT
 31

	)

5767 
	#CCM_ANALOG_PLL_SYS_SET_DIV_SELECT_MASK
 0x1u

	)

5768 
	#CCM_ANALOG_PLL_SYS_SET_DIV_SELECT_SHIFT
 0

	)

5769 
	#CCM_ANALOG_PLL_SYS_SET_POWERDOWN_MASK
 0x1000u

	)

5770 
	#CCM_ANALOG_PLL_SYS_SET_POWERDOWN_SHIFT
 12

	)

5771 
	#CCM_ANALOG_PLL_SYS_SET_ENABLE_MASK
 0x2000u

	)

5772 
	#CCM_ANALOG_PLL_SYS_SET_ENABLE_SHIFT
 13

	)

5773 
	#CCM_ANALOG_PLL_SYS_SET_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5774 
	#CCM_ANALOG_PLL_SYS_SET_BYPASS_CLK_SRC_SHIFT
 14

	)

5775 
	#CCM_ANALOG_PLL_SYS_SET_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_SYS_SET_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_SYS_SET_BYPASS_CLK_SRC_MASK
)

	)

5776 
	#CCM_ANALOG_PLL_SYS_SET_BYPASS_MASK
 0x10000u

	)

5777 
	#CCM_ANALOG_PLL_SYS_SET_BYPASS_SHIFT
 16

	)

5778 
	#CCM_ANALOG_PLL_SYS_SET_PFD_OFFSET_EN_MASK
 0x40000u

	)

5779 
	#CCM_ANALOG_PLL_SYS_SET_PFD_OFFSET_EN_SHIFT
 18

	)

5780 
	#CCM_ANALOG_PLL_SYS_SET_LOCK_MASK
 0x80000000u

	)

5781 
	#CCM_ANALOG_PLL_SYS_SET_LOCK_SHIFT
 31

	)

5783 
	#CCM_ANALOG_PLL_SYS_CLR_DIV_SELECT_MASK
 0x1u

	)

5784 
	#CCM_ANALOG_PLL_SYS_CLR_DIV_SELECT_SHIFT
 0

	)

5785 
	#CCM_ANALOG_PLL_SYS_CLR_POWERDOWN_MASK
 0x1000u

	)

5786 
	#CCM_ANALOG_PLL_SYS_CLR_POWERDOWN_SHIFT
 12

	)

5787 
	#CCM_ANALOG_PLL_SYS_CLR_ENABLE_MASK
 0x2000u

	)

5788 
	#CCM_ANALOG_PLL_SYS_CLR_ENABLE_SHIFT
 13

	)

5789 
	#CCM_ANALOG_PLL_SYS_CLR_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5790 
	#CCM_ANALOG_PLL_SYS_CLR_BYPASS_CLK_SRC_SHIFT
 14

	)

5791 
	#CCM_ANALOG_PLL_SYS_CLR_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_SYS_CLR_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_SYS_CLR_BYPASS_CLK_SRC_MASK
)

	)

5792 
	#CCM_ANALOG_PLL_SYS_CLR_BYPASS_MASK
 0x10000u

	)

5793 
	#CCM_ANALOG_PLL_SYS_CLR_BYPASS_SHIFT
 16

	)

5794 
	#CCM_ANALOG_PLL_SYS_CLR_PFD_OFFSET_EN_MASK
 0x40000u

	)

5795 
	#CCM_ANALOG_PLL_SYS_CLR_PFD_OFFSET_EN_SHIFT
 18

	)

5796 
	#CCM_ANALOG_PLL_SYS_CLR_LOCK_MASK
 0x80000000u

	)

5797 
	#CCM_ANALOG_PLL_SYS_CLR_LOCK_SHIFT
 31

	)

5799 
	#CCM_ANALOG_PLL_SYS_TOG_DIV_SELECT_MASK
 0x1u

	)

5800 
	#CCM_ANALOG_PLL_SYS_TOG_DIV_SELECT_SHIFT
 0

	)

5801 
	#CCM_ANALOG_PLL_SYS_TOG_POWERDOWN_MASK
 0x1000u

	)

5802 
	#CCM_ANALOG_PLL_SYS_TOG_POWERDOWN_SHIFT
 12

	)

5803 
	#CCM_ANALOG_PLL_SYS_TOG_ENABLE_MASK
 0x2000u

	)

5804 
	#CCM_ANALOG_PLL_SYS_TOG_ENABLE_SHIFT
 13

	)

5805 
	#CCM_ANALOG_PLL_SYS_TOG_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5806 
	#CCM_ANALOG_PLL_SYS_TOG_BYPASS_CLK_SRC_SHIFT
 14

	)

5807 
	#CCM_ANALOG_PLL_SYS_TOG_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_SYS_TOG_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_SYS_TOG_BYPASS_CLK_SRC_MASK
)

	)

5808 
	#CCM_ANALOG_PLL_SYS_TOG_BYPASS_MASK
 0x10000u

	)

5809 
	#CCM_ANALOG_PLL_SYS_TOG_BYPASS_SHIFT
 16

	)

5810 
	#CCM_ANALOG_PLL_SYS_TOG_PFD_OFFSET_EN_MASK
 0x40000u

	)

5811 
	#CCM_ANALOG_PLL_SYS_TOG_PFD_OFFSET_EN_SHIFT
 18

	)

5812 
	#CCM_ANALOG_PLL_SYS_TOG_LOCK_MASK
 0x80000000u

	)

5813 
	#CCM_ANALOG_PLL_SYS_TOG_LOCK_SHIFT
 31

	)

5815 
	#CCM_ANALOG_PLL_SYS_SS_STEP_MASK
 0x7FFFu

	)

5816 
	#CCM_ANALOG_PLL_SYS_SS_STEP_SHIFT
 0

	)

5817 
	#CCM_ANALOG_PLL_SYS_SS_STEP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_SYS_SS_STEP_SHIFT
))&
CCM_ANALOG_PLL_SYS_SS_STEP_MASK
)

	)

5818 
	#CCM_ANALOG_PLL_SYS_SS_ENABLE_MASK
 0x8000u

	)

5819 
	#CCM_ANALOG_PLL_SYS_SS_ENABLE_SHIFT
 15

	)

5820 
	#CCM_ANALOG_PLL_SYS_SS_STOP_MASK
 0xFFFF0000u

	)

5821 
	#CCM_ANALOG_PLL_SYS_SS_STOP_SHIFT
 16

	)

5822 
	#CCM_ANALOG_PLL_SYS_SS_STOP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_SYS_SS_STOP_SHIFT
))&
CCM_ANALOG_PLL_SYS_SS_STOP_MASK
)

	)

5824 
	#CCM_ANALOG_PLL_AUDIO_DIV_SELECT_MASK
 0x7Fu

	)

5825 
	#CCM_ANALOG_PLL_AUDIO_DIV_SELECT_SHIFT
 0

	)

5826 
	#CCM_ANALOG_PLL_AUDIO_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_AUDIO_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_AUDIO_DIV_SELECT_MASK
)

	)

5827 
	#CCM_ANALOG_PLL_AUDIO_POWERDOWN_MASK
 0x1000u

	)

5828 
	#CCM_ANALOG_PLL_AUDIO_POWERDOWN_SHIFT
 12

	)

5829 
	#CCM_ANALOG_PLL_AUDIO_ENABLE_MASK
 0x2000u

	)

5830 
	#CCM_ANALOG_PLL_AUDIO_ENABLE_SHIFT
 13

	)

5831 
	#CCM_ANALOG_PLL_AUDIO_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5832 
	#CCM_ANALOG_PLL_AUDIO_BYPASS_CLK_SRC_SHIFT
 14

	)

5833 
	#CCM_ANALOG_PLL_AUDIO_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_AUDIO_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_AUDIO_BYPASS_CLK_SRC_MASK
)

	)

5834 
	#CCM_ANALOG_PLL_AUDIO_BYPASS_MASK
 0x10000u

	)

5835 
	#CCM_ANALOG_PLL_AUDIO_BYPASS_SHIFT
 16

	)

5836 
	#CCM_ANALOG_PLL_AUDIO_PFD_OFFSET_EN_MASK
 0x40000u

	)

5837 
	#CCM_ANALOG_PLL_AUDIO_PFD_OFFSET_EN_SHIFT
 18

	)

5838 
	#CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT_MASK
 0x180000u

	)

5839 
	#CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT_SHIFT
 19

	)

5840 
	#CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_AUDIO_POST_DIV_SELECT_MASK
)

	)

5841 
	#CCM_ANALOG_PLL_AUDIO_LOCK_MASK
 0x80000000u

	)

5842 
	#CCM_ANALOG_PLL_AUDIO_LOCK_SHIFT
 31

	)

5844 
	#CCM_ANALOG_PLL_AUDIO_SET_DIV_SELECT_MASK
 0x7Fu

	)

5845 
	#CCM_ANALOG_PLL_AUDIO_SET_DIV_SELECT_SHIFT
 0

	)

5846 
	#CCM_ANALOG_PLL_AUDIO_SET_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_AUDIO_SET_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_AUDIO_SET_DIV_SELECT_MASK
)

	)

5847 
	#CCM_ANALOG_PLL_AUDIO_SET_POWERDOWN_MASK
 0x1000u

	)

5848 
	#CCM_ANALOG_PLL_AUDIO_SET_POWERDOWN_SHIFT
 12

	)

5849 
	#CCM_ANALOG_PLL_AUDIO_SET_ENABLE_MASK
 0x2000u

	)

5850 
	#CCM_ANALOG_PLL_AUDIO_SET_ENABLE_SHIFT
 13

	)

5851 
	#CCM_ANALOG_PLL_AUDIO_SET_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5852 
	#CCM_ANALOG_PLL_AUDIO_SET_BYPASS_CLK_SRC_SHIFT
 14

	)

5853 
	#CCM_ANALOG_PLL_AUDIO_SET_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_AUDIO_SET_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_AUDIO_SET_BYPASS_CLK_SRC_MASK
)

	)

5854 
	#CCM_ANALOG_PLL_AUDIO_SET_BYPASS_MASK
 0x10000u

	)

5855 
	#CCM_ANALOG_PLL_AUDIO_SET_BYPASS_SHIFT
 16

	)

5856 
	#CCM_ANALOG_PLL_AUDIO_SET_PFD_OFFSET_EN_MASK
 0x40000u

	)

5857 
	#CCM_ANALOG_PLL_AUDIO_SET_PFD_OFFSET_EN_SHIFT
 18

	)

5858 
	#CCM_ANALOG_PLL_AUDIO_SET_POST_DIV_SELECT_MASK
 0x180000u

	)

5859 
	#CCM_ANALOG_PLL_AUDIO_SET_POST_DIV_SELECT_SHIFT
 19

	)

5860 
	#CCM_ANALOG_PLL_AUDIO_SET_POST_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_AUDIO_SET_POST_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_AUDIO_SET_POST_DIV_SELECT_MASK
)

	)

5861 
	#CCM_ANALOG_PLL_AUDIO_SET_LOCK_MASK
 0x80000000u

	)

5862 
	#CCM_ANALOG_PLL_AUDIO_SET_LOCK_SHIFT
 31

	)

5864 
	#CCM_ANALOG_PLL_AUDIO_CLR_DIV_SELECT_MASK
 0x7Fu

	)

5865 
	#CCM_ANALOG_PLL_AUDIO_CLR_DIV_SELECT_SHIFT
 0

	)

5866 
	#CCM_ANALOG_PLL_AUDIO_CLR_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_AUDIO_CLR_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_AUDIO_CLR_DIV_SELECT_MASK
)

	)

5867 
	#CCM_ANALOG_PLL_AUDIO_CLR_POWERDOWN_MASK
 0x1000u

	)

5868 
	#CCM_ANALOG_PLL_AUDIO_CLR_POWERDOWN_SHIFT
 12

	)

5869 
	#CCM_ANALOG_PLL_AUDIO_CLR_ENABLE_MASK
 0x2000u

	)

5870 
	#CCM_ANALOG_PLL_AUDIO_CLR_ENABLE_SHIFT
 13

	)

5871 
	#CCM_ANALOG_PLL_AUDIO_CLR_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5872 
	#CCM_ANALOG_PLL_AUDIO_CLR_BYPASS_CLK_SRC_SHIFT
 14

	)

5873 
	#CCM_ANALOG_PLL_AUDIO_CLR_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_AUDIO_CLR_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_AUDIO_CLR_BYPASS_CLK_SRC_MASK
)

	)

5874 
	#CCM_ANALOG_PLL_AUDIO_CLR_BYPASS_MASK
 0x10000u

	)

5875 
	#CCM_ANALOG_PLL_AUDIO_CLR_BYPASS_SHIFT
 16

	)

5876 
	#CCM_ANALOG_PLL_AUDIO_CLR_PFD_OFFSET_EN_MASK
 0x40000u

	)

5877 
	#CCM_ANALOG_PLL_AUDIO_CLR_PFD_OFFSET_EN_SHIFT
 18

	)

5878 
	#CCM_ANALOG_PLL_AUDIO_CLR_POST_DIV_SELECT_MASK
 0x180000u

	)

5879 
	#CCM_ANALOG_PLL_AUDIO_CLR_POST_DIV_SELECT_SHIFT
 19

	)

5880 
	#CCM_ANALOG_PLL_AUDIO_CLR_POST_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_AUDIO_CLR_POST_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_AUDIO_CLR_POST_DIV_SELECT_MASK
)

	)

5881 
	#CCM_ANALOG_PLL_AUDIO_CLR_LOCK_MASK
 0x80000000u

	)

5882 
	#CCM_ANALOG_PLL_AUDIO_CLR_LOCK_SHIFT
 31

	)

5884 
	#CCM_ANALOG_PLL_AUDIO_TOG_DIV_SELECT_MASK
 0x7Fu

	)

5885 
	#CCM_ANALOG_PLL_AUDIO_TOG_DIV_SELECT_SHIFT
 0

	)

5886 
	#CCM_ANALOG_PLL_AUDIO_TOG_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_AUDIO_TOG_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_AUDIO_TOG_DIV_SELECT_MASK
)

	)

5887 
	#CCM_ANALOG_PLL_AUDIO_TOG_POWERDOWN_MASK
 0x1000u

	)

5888 
	#CCM_ANALOG_PLL_AUDIO_TOG_POWERDOWN_SHIFT
 12

	)

5889 
	#CCM_ANALOG_PLL_AUDIO_TOG_ENABLE_MASK
 0x2000u

	)

5890 
	#CCM_ANALOG_PLL_AUDIO_TOG_ENABLE_SHIFT
 13

	)

5891 
	#CCM_ANALOG_PLL_AUDIO_TOG_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5892 
	#CCM_ANALOG_PLL_AUDIO_TOG_BYPASS_CLK_SRC_SHIFT
 14

	)

5893 
	#CCM_ANALOG_PLL_AUDIO_TOG_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_AUDIO_TOG_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_AUDIO_TOG_BYPASS_CLK_SRC_MASK
)

	)

5894 
	#CCM_ANALOG_PLL_AUDIO_TOG_BYPASS_MASK
 0x10000u

	)

5895 
	#CCM_ANALOG_PLL_AUDIO_TOG_BYPASS_SHIFT
 16

	)

5896 
	#CCM_ANALOG_PLL_AUDIO_TOG_PFD_OFFSET_EN_MASK
 0x40000u

	)

5897 
	#CCM_ANALOG_PLL_AUDIO_TOG_PFD_OFFSET_EN_SHIFT
 18

	)

5898 
	#CCM_ANALOG_PLL_AUDIO_TOG_POST_DIV_SELECT_MASK
 0x180000u

	)

5899 
	#CCM_ANALOG_PLL_AUDIO_TOG_POST_DIV_SELECT_SHIFT
 19

	)

5900 
	#CCM_ANALOG_PLL_AUDIO_TOG_POST_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_AUDIO_TOG_POST_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_AUDIO_TOG_POST_DIV_SELECT_MASK
)

	)

5901 
	#CCM_ANALOG_PLL_AUDIO_TOG_LOCK_MASK
 0x80000000u

	)

5902 
	#CCM_ANALOG_PLL_AUDIO_TOG_LOCK_SHIFT
 31

	)

5904 
	#CCM_ANALOG_PLL_AUDIO_NUM_A_MASK
 0x3FFFFFFFu

	)

5905 
	#CCM_ANALOG_PLL_AUDIO_NUM_A_SHIFT
 0

	)

5906 
	#CCM_ANALOG_PLL_AUDIO_NUM_A
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_AUDIO_NUM_A_SHIFT
))&
CCM_ANALOG_PLL_AUDIO_NUM_A_MASK
)

	)

5908 
	#CCM_ANALOG_PLL_AUDIO_DENOM_B_MASK
 0x3FFFFFFFu

	)

5909 
	#CCM_ANALOG_PLL_AUDIO_DENOM_B_SHIFT
 0

	)

5910 
	#CCM_ANALOG_PLL_AUDIO_DENOM_B
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_AUDIO_DENOM_B_SHIFT
))&
CCM_ANALOG_PLL_AUDIO_DENOM_B_MASK
)

	)

5912 
	#CCM_ANALOG_PLL_VIDEO_DIV_SELECT_MASK
 0x7Fu

	)

5913 
	#CCM_ANALOG_PLL_VIDEO_DIV_SELECT_SHIFT
 0

	)

5914 
	#CCM_ANALOG_PLL_VIDEO_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_VIDEO_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_VIDEO_DIV_SELECT_MASK
)

	)

5915 
	#CCM_ANALOG_PLL_VIDEO_POWERDOWN_MASK
 0x1000u

	)

5916 
	#CCM_ANALOG_PLL_VIDEO_POWERDOWN_SHIFT
 12

	)

5917 
	#CCM_ANALOG_PLL_VIDEO_ENABLE_MASK
 0x2000u

	)

5918 
	#CCM_ANALOG_PLL_VIDEO_ENABLE_SHIFT
 13

	)

5919 
	#CCM_ANALOG_PLL_VIDEO_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5920 
	#CCM_ANALOG_PLL_VIDEO_BYPASS_CLK_SRC_SHIFT
 14

	)

5921 
	#CCM_ANALOG_PLL_VIDEO_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_VIDEO_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_VIDEO_BYPASS_CLK_SRC_MASK
)

	)

5922 
	#CCM_ANALOG_PLL_VIDEO_BYPASS_MASK
 0x10000u

	)

5923 
	#CCM_ANALOG_PLL_VIDEO_BYPASS_SHIFT
 16

	)

5924 
	#CCM_ANALOG_PLL_VIDEO_PFD_OFFSET_EN_MASK
 0x40000u

	)

5925 
	#CCM_ANALOG_PLL_VIDEO_PFD_OFFSET_EN_SHIFT
 18

	)

5926 
	#CCM_ANALOG_PLL_VIDEO_POST_DIV_SELECT_MASK
 0x180000u

	)

5927 
	#CCM_ANALOG_PLL_VIDEO_POST_DIV_SELECT_SHIFT
 19

	)

5928 
	#CCM_ANALOG_PLL_VIDEO_POST_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_VIDEO_POST_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_VIDEO_POST_DIV_SELECT_MASK
)

	)

5929 
	#CCM_ANALOG_PLL_VIDEO_LOCK_MASK
 0x80000000u

	)

5930 
	#CCM_ANALOG_PLL_VIDEO_LOCK_SHIFT
 31

	)

5932 
	#CCM_ANALOG_PLL_VIDEO_SET_DIV_SELECT_MASK
 0x7Fu

	)

5933 
	#CCM_ANALOG_PLL_VIDEO_SET_DIV_SELECT_SHIFT
 0

	)

5934 
	#CCM_ANALOG_PLL_VIDEO_SET_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_VIDEO_SET_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_VIDEO_SET_DIV_SELECT_MASK
)

	)

5935 
	#CCM_ANALOG_PLL_VIDEO_SET_POWERDOWN_MASK
 0x1000u

	)

5936 
	#CCM_ANALOG_PLL_VIDEO_SET_POWERDOWN_SHIFT
 12

	)

5937 
	#CCM_ANALOG_PLL_VIDEO_SET_ENABLE_MASK
 0x2000u

	)

5938 
	#CCM_ANALOG_PLL_VIDEO_SET_ENABLE_SHIFT
 13

	)

5939 
	#CCM_ANALOG_PLL_VIDEO_SET_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5940 
	#CCM_ANALOG_PLL_VIDEO_SET_BYPASS_CLK_SRC_SHIFT
 14

	)

5941 
	#CCM_ANALOG_PLL_VIDEO_SET_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_VIDEO_SET_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_VIDEO_SET_BYPASS_CLK_SRC_MASK
)

	)

5942 
	#CCM_ANALOG_PLL_VIDEO_SET_BYPASS_MASK
 0x10000u

	)

5943 
	#CCM_ANALOG_PLL_VIDEO_SET_BYPASS_SHIFT
 16

	)

5944 
	#CCM_ANALOG_PLL_VIDEO_SET_PFD_OFFSET_EN_MASK
 0x40000u

	)

5945 
	#CCM_ANALOG_PLL_VIDEO_SET_PFD_OFFSET_EN_SHIFT
 18

	)

5946 
	#CCM_ANALOG_PLL_VIDEO_SET_POST_DIV_SELECT_MASK
 0x180000u

	)

5947 
	#CCM_ANALOG_PLL_VIDEO_SET_POST_DIV_SELECT_SHIFT
 19

	)

5948 
	#CCM_ANALOG_PLL_VIDEO_SET_POST_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_VIDEO_SET_POST_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_VIDEO_SET_POST_DIV_SELECT_MASK
)

	)

5949 
	#CCM_ANALOG_PLL_VIDEO_SET_LOCK_MASK
 0x80000000u

	)

5950 
	#CCM_ANALOG_PLL_VIDEO_SET_LOCK_SHIFT
 31

	)

5952 
	#CCM_ANALOG_PLL_VIDEO_CLR_DIV_SELECT_MASK
 0x7Fu

	)

5953 
	#CCM_ANALOG_PLL_VIDEO_CLR_DIV_SELECT_SHIFT
 0

	)

5954 
	#CCM_ANALOG_PLL_VIDEO_CLR_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_VIDEO_CLR_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_VIDEO_CLR_DIV_SELECT_MASK
)

	)

5955 
	#CCM_ANALOG_PLL_VIDEO_CLR_POWERDOWN_MASK
 0x1000u

	)

5956 
	#CCM_ANALOG_PLL_VIDEO_CLR_POWERDOWN_SHIFT
 12

	)

5957 
	#CCM_ANALOG_PLL_VIDEO_CLR_ENABLE_MASK
 0x2000u

	)

5958 
	#CCM_ANALOG_PLL_VIDEO_CLR_ENABLE_SHIFT
 13

	)

5959 
	#CCM_ANALOG_PLL_VIDEO_CLR_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5960 
	#CCM_ANALOG_PLL_VIDEO_CLR_BYPASS_CLK_SRC_SHIFT
 14

	)

5961 
	#CCM_ANALOG_PLL_VIDEO_CLR_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_VIDEO_CLR_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_VIDEO_CLR_BYPASS_CLK_SRC_MASK
)

	)

5962 
	#CCM_ANALOG_PLL_VIDEO_CLR_BYPASS_MASK
 0x10000u

	)

5963 
	#CCM_ANALOG_PLL_VIDEO_CLR_BYPASS_SHIFT
 16

	)

5964 
	#CCM_ANALOG_PLL_VIDEO_CLR_PFD_OFFSET_EN_MASK
 0x40000u

	)

5965 
	#CCM_ANALOG_PLL_VIDEO_CLR_PFD_OFFSET_EN_SHIFT
 18

	)

5966 
	#CCM_ANALOG_PLL_VIDEO_CLR_POST_DIV_SELECT_MASK
 0x180000u

	)

5967 
	#CCM_ANALOG_PLL_VIDEO_CLR_POST_DIV_SELECT_SHIFT
 19

	)

5968 
	#CCM_ANALOG_PLL_VIDEO_CLR_POST_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_VIDEO_CLR_POST_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_VIDEO_CLR_POST_DIV_SELECT_MASK
)

	)

5969 
	#CCM_ANALOG_PLL_VIDEO_CLR_LOCK_MASK
 0x80000000u

	)

5970 
	#CCM_ANALOG_PLL_VIDEO_CLR_LOCK_SHIFT
 31

	)

5972 
	#CCM_ANALOG_PLL_VIDEO_TOG_DIV_SELECT_MASK
 0x7Fu

	)

5973 
	#CCM_ANALOG_PLL_VIDEO_TOG_DIV_SELECT_SHIFT
 0

	)

5974 
	#CCM_ANALOG_PLL_VIDEO_TOG_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_VIDEO_TOG_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_VIDEO_TOG_DIV_SELECT_MASK
)

	)

5975 
	#CCM_ANALOG_PLL_VIDEO_TOG_POWERDOWN_MASK
 0x1000u

	)

5976 
	#CCM_ANALOG_PLL_VIDEO_TOG_POWERDOWN_SHIFT
 12

	)

5977 
	#CCM_ANALOG_PLL_VIDEO_TOG_ENABLE_MASK
 0x2000u

	)

5978 
	#CCM_ANALOG_PLL_VIDEO_TOG_ENABLE_SHIFT
 13

	)

5979 
	#CCM_ANALOG_PLL_VIDEO_TOG_BYPASS_CLK_SRC_MASK
 0xC000u

	)

5980 
	#CCM_ANALOG_PLL_VIDEO_TOG_BYPASS_CLK_SRC_SHIFT
 14

	)

5981 
	#CCM_ANALOG_PLL_VIDEO_TOG_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_VIDEO_TOG_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_VIDEO_TOG_BYPASS_CLK_SRC_MASK
)

	)

5982 
	#CCM_ANALOG_PLL_VIDEO_TOG_BYPASS_MASK
 0x10000u

	)

5983 
	#CCM_ANALOG_PLL_VIDEO_TOG_BYPASS_SHIFT
 16

	)

5984 
	#CCM_ANALOG_PLL_VIDEO_TOG_PFD_OFFSET_EN_MASK
 0x40000u

	)

5985 
	#CCM_ANALOG_PLL_VIDEO_TOG_PFD_OFFSET_EN_SHIFT
 18

	)

5986 
	#CCM_ANALOG_PLL_VIDEO_TOG_POST_DIV_SELECT_MASK
 0x180000u

	)

5987 
	#CCM_ANALOG_PLL_VIDEO_TOG_POST_DIV_SELECT_SHIFT
 19

	)

5988 
	#CCM_ANALOG_PLL_VIDEO_TOG_POST_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_VIDEO_TOG_POST_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_VIDEO_TOG_POST_DIV_SELECT_MASK
)

	)

5989 
	#CCM_ANALOG_PLL_VIDEO_TOG_LOCK_MASK
 0x80000000u

	)

5990 
	#CCM_ANALOG_PLL_VIDEO_TOG_LOCK_SHIFT
 31

	)

5992 
	#CCM_ANALOG_PLL_VIDEO_NUM_A_MASK
 0x3FFFFFFFu

	)

5993 
	#CCM_ANALOG_PLL_VIDEO_NUM_A_SHIFT
 0

	)

5994 
	#CCM_ANALOG_PLL_VIDEO_NUM_A
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_VIDEO_NUM_A_SHIFT
))&
CCM_ANALOG_PLL_VIDEO_NUM_A_MASK
)

	)

5996 
	#CCM_ANALOG_PLL_VIDEO_DENOM_B_MASK
 0x3FFFFFFFu

	)

5997 
	#CCM_ANALOG_PLL_VIDEO_DENOM_B_SHIFT
 0

	)

5998 
	#CCM_ANALOG_PLL_VIDEO_DENOM_B
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_VIDEO_DENOM_B_SHIFT
))&
CCM_ANALOG_PLL_VIDEO_DENOM_B_MASK
)

	)

6000 
	#CCM_ANALOG_PLL_ENET_ENET0_DIV_SELECT_MASK
 0x3u

	)

6001 
	#CCM_ANALOG_PLL_ENET_ENET0_DIV_SELECT_SHIFT
 0

	)

6002 
	#CCM_ANALOG_PLL_ENET_ENET0_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ENET_ENET0_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_ENET_ENET0_DIV_SELECT_MASK
)

	)

6003 
	#CCM_ANALOG_PLL_ENET_ENET1_DIV_SELECT_MASK
 0xCu

	)

6004 
	#CCM_ANALOG_PLL_ENET_ENET1_DIV_SELECT_SHIFT
 2

	)

6005 
	#CCM_ANALOG_PLL_ENET_ENET1_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ENET_ENET1_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_ENET_ENET1_DIV_SELECT_MASK
)

	)

6006 
	#CCM_ANALOG_PLL_ENET_POWERDOWN_MASK
 0x1000u

	)

6007 
	#CCM_ANALOG_PLL_ENET_POWERDOWN_SHIFT
 12

	)

6008 
	#CCM_ANALOG_PLL_ENET_ENET1_125M_EN_MASK
 0x2000u

	)

6009 
	#CCM_ANALOG_PLL_ENET_ENET1_125M_EN_SHIFT
 13

	)

6010 
	#CCM_ANALOG_PLL_ENET_BYPASS_CLK_SRC_MASK
 0xC000u

	)

6011 
	#CCM_ANALOG_PLL_ENET_BYPASS_CLK_SRC_SHIFT
 14

	)

6012 
	#CCM_ANALOG_PLL_ENET_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ENET_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_ENET_BYPASS_CLK_SRC_MASK
)

	)

6013 
	#CCM_ANALOG_PLL_ENET_BYPASS_MASK
 0x10000u

	)

6014 
	#CCM_ANALOG_PLL_ENET_BYPASS_SHIFT
 16

	)

6015 
	#CCM_ANALOG_PLL_ENET_PFD_OFFSET_EN_MASK
 0x40000u

	)

6016 
	#CCM_ANALOG_PLL_ENET_PFD_OFFSET_EN_SHIFT
 18

	)

6017 
	#CCM_ANALOG_PLL_ENET_ENABLE_125M_MASK
 0x80000u

	)

6018 
	#CCM_ANALOG_PLL_ENET_ENABLE_125M_SHIFT
 19

	)

6019 
	#CCM_ANALOG_PLL_ENET_ENET2_125M_EN_MASK
 0x100000u

	)

6020 
	#CCM_ANALOG_PLL_ENET_ENET2_125M_EN_SHIFT
 20

	)

6021 
	#CCM_ANALOG_PLL_ENET_ENET_25M_REF_EN_MASK
 0x200000u

	)

6022 
	#CCM_ANALOG_PLL_ENET_ENET_25M_REF_EN_SHIFT
 21

	)

6023 
	#CCM_ANALOG_PLL_ENET_LOCK_MASK
 0x80000000u

	)

6024 
	#CCM_ANALOG_PLL_ENET_LOCK_SHIFT
 31

	)

6026 
	#CCM_ANALOG_PLL_ENET_SET_ENET0_DIV_SELECT_MASK
 0x3u

	)

6027 
	#CCM_ANALOG_PLL_ENET_SET_ENET0_DIV_SELECT_SHIFT
 0

	)

6028 
	#CCM_ANALOG_PLL_ENET_SET_ENET0_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ENET_SET_ENET0_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_ENET_SET_ENET0_DIV_SELECT_MASK
)

	)

6029 
	#CCM_ANALOG_PLL_ENET_SET_ENET1_DIV_SELECT_MASK
 0xCu

	)

6030 
	#CCM_ANALOG_PLL_ENET_SET_ENET1_DIV_SELECT_SHIFT
 2

	)

6031 
	#CCM_ANALOG_PLL_ENET_SET_ENET1_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ENET_SET_ENET1_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_ENET_SET_ENET1_DIV_SELECT_MASK
)

	)

6032 
	#CCM_ANALOG_PLL_ENET_SET_POWERDOWN_MASK
 0x1000u

	)

6033 
	#CCM_ANALOG_PLL_ENET_SET_POWERDOWN_SHIFT
 12

	)

6034 
	#CCM_ANALOG_PLL_ENET_SET_ENET1_125M_EN_MASK
 0x2000u

	)

6035 
	#CCM_ANALOG_PLL_ENET_SET_ENET1_125M_EN_SHIFT
 13

	)

6036 
	#CCM_ANALOG_PLL_ENET_SET_BYPASS_CLK_SRC_MASK
 0xC000u

	)

6037 
	#CCM_ANALOG_PLL_ENET_SET_BYPASS_CLK_SRC_SHIFT
 14

	)

6038 
	#CCM_ANALOG_PLL_ENET_SET_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ENET_SET_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_ENET_SET_BYPASS_CLK_SRC_MASK
)

	)

6039 
	#CCM_ANALOG_PLL_ENET_SET_BYPASS_MASK
 0x10000u

	)

6040 
	#CCM_ANALOG_PLL_ENET_SET_BYPASS_SHIFT
 16

	)

6041 
	#CCM_ANALOG_PLL_ENET_SET_PFD_OFFSET_EN_MASK
 0x40000u

	)

6042 
	#CCM_ANALOG_PLL_ENET_SET_PFD_OFFSET_EN_SHIFT
 18

	)

6043 
	#CCM_ANALOG_PLL_ENET_SET_ENABLE_125M_MASK
 0x80000u

	)

6044 
	#CCM_ANALOG_PLL_ENET_SET_ENABLE_125M_SHIFT
 19

	)

6045 
	#CCM_ANALOG_PLL_ENET_SET_ENET2_125M_EN_MASK
 0x100000u

	)

6046 
	#CCM_ANALOG_PLL_ENET_SET_ENET2_125M_EN_SHIFT
 20

	)

6047 
	#CCM_ANALOG_PLL_ENET_SET_ENET_25M_REF_EN_MASK
 0x200000u

	)

6048 
	#CCM_ANALOG_PLL_ENET_SET_ENET_25M_REF_EN_SHIFT
 21

	)

6049 
	#CCM_ANALOG_PLL_ENET_SET_LOCK_MASK
 0x80000000u

	)

6050 
	#CCM_ANALOG_PLL_ENET_SET_LOCK_SHIFT
 31

	)

6052 
	#CCM_ANALOG_PLL_ENET_CLR_ENET0_DIV_SELECT_MASK
 0x3u

	)

6053 
	#CCM_ANALOG_PLL_ENET_CLR_ENET0_DIV_SELECT_SHIFT
 0

	)

6054 
	#CCM_ANALOG_PLL_ENET_CLR_ENET0_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ENET_CLR_ENET0_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_ENET_CLR_ENET0_DIV_SELECT_MASK
)

	)

6055 
	#CCM_ANALOG_PLL_ENET_CLR_ENET1_DIV_SELECT_MASK
 0xCu

	)

6056 
	#CCM_ANALOG_PLL_ENET_CLR_ENET1_DIV_SELECT_SHIFT
 2

	)

6057 
	#CCM_ANALOG_PLL_ENET_CLR_ENET1_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ENET_CLR_ENET1_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_ENET_CLR_ENET1_DIV_SELECT_MASK
)

	)

6058 
	#CCM_ANALOG_PLL_ENET_CLR_POWERDOWN_MASK
 0x1000u

	)

6059 
	#CCM_ANALOG_PLL_ENET_CLR_POWERDOWN_SHIFT
 12

	)

6060 
	#CCM_ANALOG_PLL_ENET_CLR_ENET1_125M_EN_MASK
 0x2000u

	)

6061 
	#CCM_ANALOG_PLL_ENET_CLR_ENET1_125M_EN_SHIFT
 13

	)

6062 
	#CCM_ANALOG_PLL_ENET_CLR_BYPASS_CLK_SRC_MASK
 0xC000u

	)

6063 
	#CCM_ANALOG_PLL_ENET_CLR_BYPASS_CLK_SRC_SHIFT
 14

	)

6064 
	#CCM_ANALOG_PLL_ENET_CLR_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ENET_CLR_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_ENET_CLR_BYPASS_CLK_SRC_MASK
)

	)

6065 
	#CCM_ANALOG_PLL_ENET_CLR_BYPASS_MASK
 0x10000u

	)

6066 
	#CCM_ANALOG_PLL_ENET_CLR_BYPASS_SHIFT
 16

	)

6067 
	#CCM_ANALOG_PLL_ENET_CLR_PFD_OFFSET_EN_MASK
 0x40000u

	)

6068 
	#CCM_ANALOG_PLL_ENET_CLR_PFD_OFFSET_EN_SHIFT
 18

	)

6069 
	#CCM_ANALOG_PLL_ENET_CLR_ENABLE_125M_MASK
 0x80000u

	)

6070 
	#CCM_ANALOG_PLL_ENET_CLR_ENABLE_125M_SHIFT
 19

	)

6071 
	#CCM_ANALOG_PLL_ENET_CLR_ENET2_125M_EN_MASK
 0x100000u

	)

6072 
	#CCM_ANALOG_PLL_ENET_CLR_ENET2_125M_EN_SHIFT
 20

	)

6073 
	#CCM_ANALOG_PLL_ENET_CLR_ENET_25M_REF_EN_MASK
 0x200000u

	)

6074 
	#CCM_ANALOG_PLL_ENET_CLR_ENET_25M_REF_EN_SHIFT
 21

	)

6075 
	#CCM_ANALOG_PLL_ENET_CLR_LOCK_MASK
 0x80000000u

	)

6076 
	#CCM_ANALOG_PLL_ENET_CLR_LOCK_SHIFT
 31

	)

6078 
	#CCM_ANALOG_PLL_ENET_TOG_ENET0_DIV_SELECT_MASK
 0x3u

	)

6079 
	#CCM_ANALOG_PLL_ENET_TOG_ENET0_DIV_SELECT_SHIFT
 0

	)

6080 
	#CCM_ANALOG_PLL_ENET_TOG_ENET0_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ENET_TOG_ENET0_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_ENET_TOG_ENET0_DIV_SELECT_MASK
)

	)

6081 
	#CCM_ANALOG_PLL_ENET_TOG_ENET1_DIV_SELECT_MASK
 0xCu

	)

6082 
	#CCM_ANALOG_PLL_ENET_TOG_ENET1_DIV_SELECT_SHIFT
 2

	)

6083 
	#CCM_ANALOG_PLL_ENET_TOG_ENET1_DIV_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ENET_TOG_ENET1_DIV_SELECT_SHIFT
))&
CCM_ANALOG_PLL_ENET_TOG_ENET1_DIV_SELECT_MASK
)

	)

6084 
	#CCM_ANALOG_PLL_ENET_TOG_POWERDOWN_MASK
 0x1000u

	)

6085 
	#CCM_ANALOG_PLL_ENET_TOG_POWERDOWN_SHIFT
 12

	)

6086 
	#CCM_ANALOG_PLL_ENET_TOG_ENET1_125M_EN_MASK
 0x2000u

	)

6087 
	#CCM_ANALOG_PLL_ENET_TOG_ENET1_125M_EN_SHIFT
 13

	)

6088 
	#CCM_ANALOG_PLL_ENET_TOG_BYPASS_CLK_SRC_MASK
 0xC000u

	)

6089 
	#CCM_ANALOG_PLL_ENET_TOG_BYPASS_CLK_SRC_SHIFT
 14

	)

6090 
	#CCM_ANALOG_PLL_ENET_TOG_BYPASS_CLK_SRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PLL_ENET_TOG_BYPASS_CLK_SRC_SHIFT
))&
CCM_ANALOG_PLL_ENET_TOG_BYPASS_CLK_SRC_MASK
)

	)

6091 
	#CCM_ANALOG_PLL_ENET_TOG_BYPASS_MASK
 0x10000u

	)

6092 
	#CCM_ANALOG_PLL_ENET_TOG_BYPASS_SHIFT
 16

	)

6093 
	#CCM_ANALOG_PLL_ENET_TOG_PFD_OFFSET_EN_MASK
 0x40000u

	)

6094 
	#CCM_ANALOG_PLL_ENET_TOG_PFD_OFFSET_EN_SHIFT
 18

	)

6095 
	#CCM_ANALOG_PLL_ENET_TOG_ENABLE_125M_MASK
 0x80000u

	)

6096 
	#CCM_ANALOG_PLL_ENET_TOG_ENABLE_125M_SHIFT
 19

	)

6097 
	#CCM_ANALOG_PLL_ENET_TOG_ENET2_125M_EN_MASK
 0x100000u

	)

6098 
	#CCM_ANALOG_PLL_ENET_TOG_ENET2_125M_EN_SHIFT
 20

	)

6099 
	#CCM_ANALOG_PLL_ENET_TOG_ENET_25M_REF_EN_MASK
 0x200000u

	)

6100 
	#CCM_ANALOG_PLL_ENET_TOG_ENET_25M_REF_EN_SHIFT
 21

	)

6101 
	#CCM_ANALOG_PLL_ENET_TOG_LOCK_MASK
 0x80000000u

	)

6102 
	#CCM_ANALOG_PLL_ENET_TOG_LOCK_SHIFT
 31

	)

6104 
	#CCM_ANALOG_PFD_480_PFD0_FRAC_MASK
 0x3Fu

	)

6105 
	#CCM_ANALOG_PFD_480_PFD0_FRAC_SHIFT
 0

	)

6106 
	#CCM_ANALOG_PFD_480_PFD0_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_480_PFD0_FRAC_SHIFT
))&
CCM_ANALOG_PFD_480_PFD0_FRAC_MASK
)

	)

6107 
	#CCM_ANALOG_PFD_480_PFD0_STABLE_MASK
 0x40u

	)

6108 
	#CCM_ANALOG_PFD_480_PFD0_STABLE_SHIFT
 6

	)

6109 
	#CCM_ANALOG_PFD_480_PFD0_CLKGATE_MASK
 0x80u

	)

6110 
	#CCM_ANALOG_PFD_480_PFD0_CLKGATE_SHIFT
 7

	)

6111 
	#CCM_ANALOG_PFD_480_PFD1_FRAC_MASK
 0x3F00u

	)

6112 
	#CCM_ANALOG_PFD_480_PFD1_FRAC_SHIFT
 8

	)

6113 
	#CCM_ANALOG_PFD_480_PFD1_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_480_PFD1_FRAC_SHIFT
))&
CCM_ANALOG_PFD_480_PFD1_FRAC_MASK
)

	)

6114 
	#CCM_ANALOG_PFD_480_PFD1_STABLE_MASK
 0x4000u

	)

6115 
	#CCM_ANALOG_PFD_480_PFD1_STABLE_SHIFT
 14

	)

6116 
	#CCM_ANALOG_PFD_480_PFD1_CLKGATE_MASK
 0x8000u

	)

6117 
	#CCM_ANALOG_PFD_480_PFD1_CLKGATE_SHIFT
 15

	)

6118 
	#CCM_ANALOG_PFD_480_PFD2_FRAC_MASK
 0x3F0000u

	)

6119 
	#CCM_ANALOG_PFD_480_PFD2_FRAC_SHIFT
 16

	)

6120 
	#CCM_ANALOG_PFD_480_PFD2_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_480_PFD2_FRAC_SHIFT
))&
CCM_ANALOG_PFD_480_PFD2_FRAC_MASK
)

	)

6121 
	#CCM_ANALOG_PFD_480_PFD2_STABLE_MASK
 0x400000u

	)

6122 
	#CCM_ANALOG_PFD_480_PFD2_STABLE_SHIFT
 22

	)

6123 
	#CCM_ANALOG_PFD_480_PFD2_CLKGATE_MASK
 0x800000u

	)

6124 
	#CCM_ANALOG_PFD_480_PFD2_CLKGATE_SHIFT
 23

	)

6125 
	#CCM_ANALOG_PFD_480_PFD3_FRAC_MASK
 0x3F000000u

	)

6126 
	#CCM_ANALOG_PFD_480_PFD3_FRAC_SHIFT
 24

	)

6127 
	#CCM_ANALOG_PFD_480_PFD3_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_480_PFD3_FRAC_SHIFT
))&
CCM_ANALOG_PFD_480_PFD3_FRAC_MASK
)

	)

6128 
	#CCM_ANALOG_PFD_480_PFD3_STABLE_MASK
 0x40000000u

	)

6129 
	#CCM_ANALOG_PFD_480_PFD3_STABLE_SHIFT
 30

	)

6130 
	#CCM_ANALOG_PFD_480_PFD3_CLKGATE_MASK
 0x80000000u

	)

6131 
	#CCM_ANALOG_PFD_480_PFD3_CLKGATE_SHIFT
 31

	)

6133 
	#CCM_ANALOG_PFD_480_SET_PFD0_FRAC_MASK
 0x3Fu

	)

6134 
	#CCM_ANALOG_PFD_480_SET_PFD0_FRAC_SHIFT
 0

	)

6135 
	#CCM_ANALOG_PFD_480_SET_PFD0_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_480_SET_PFD0_FRAC_SHIFT
))&
CCM_ANALOG_PFD_480_SET_PFD0_FRAC_MASK
)

	)

6136 
	#CCM_ANALOG_PFD_480_SET_PFD0_STABLE_MASK
 0x40u

	)

6137 
	#CCM_ANALOG_PFD_480_SET_PFD0_STABLE_SHIFT
 6

	)

6138 
	#CCM_ANALOG_PFD_480_SET_PFD0_CLKGATE_MASK
 0x80u

	)

6139 
	#CCM_ANALOG_PFD_480_SET_PFD0_CLKGATE_SHIFT
 7

	)

6140 
	#CCM_ANALOG_PFD_480_SET_PFD1_FRAC_MASK
 0x3F00u

	)

6141 
	#CCM_ANALOG_PFD_480_SET_PFD1_FRAC_SHIFT
 8

	)

6142 
	#CCM_ANALOG_PFD_480_SET_PFD1_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_480_SET_PFD1_FRAC_SHIFT
))&
CCM_ANALOG_PFD_480_SET_PFD1_FRAC_MASK
)

	)

6143 
	#CCM_ANALOG_PFD_480_SET_PFD1_STABLE_MASK
 0x4000u

	)

6144 
	#CCM_ANALOG_PFD_480_SET_PFD1_STABLE_SHIFT
 14

	)

6145 
	#CCM_ANALOG_PFD_480_SET_PFD1_CLKGATE_MASK
 0x8000u

	)

6146 
	#CCM_ANALOG_PFD_480_SET_PFD1_CLKGATE_SHIFT
 15

	)

6147 
	#CCM_ANALOG_PFD_480_SET_PFD2_FRAC_MASK
 0x3F0000u

	)

6148 
	#CCM_ANALOG_PFD_480_SET_PFD2_FRAC_SHIFT
 16

	)

6149 
	#CCM_ANALOG_PFD_480_SET_PFD2_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_480_SET_PFD2_FRAC_SHIFT
))&
CCM_ANALOG_PFD_480_SET_PFD2_FRAC_MASK
)

	)

6150 
	#CCM_ANALOG_PFD_480_SET_PFD2_STABLE_MASK
 0x400000u

	)

6151 
	#CCM_ANALOG_PFD_480_SET_PFD2_STABLE_SHIFT
 22

	)

6152 
	#CCM_ANALOG_PFD_480_SET_PFD2_CLKGATE_MASK
 0x800000u

	)

6153 
	#CCM_ANALOG_PFD_480_SET_PFD2_CLKGATE_SHIFT
 23

	)

6154 
	#CCM_ANALOG_PFD_480_SET_PFD3_FRAC_MASK
 0x3F000000u

	)

6155 
	#CCM_ANALOG_PFD_480_SET_PFD3_FRAC_SHIFT
 24

	)

6156 
	#CCM_ANALOG_PFD_480_SET_PFD3_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_480_SET_PFD3_FRAC_SHIFT
))&
CCM_ANALOG_PFD_480_SET_PFD3_FRAC_MASK
)

	)

6157 
	#CCM_ANALOG_PFD_480_SET_PFD3_STABLE_MASK
 0x40000000u

	)

6158 
	#CCM_ANALOG_PFD_480_SET_PFD3_STABLE_SHIFT
 30

	)

6159 
	#CCM_ANALOG_PFD_480_SET_PFD3_CLKGATE_MASK
 0x80000000u

	)

6160 
	#CCM_ANALOG_PFD_480_SET_PFD3_CLKGATE_SHIFT
 31

	)

6162 
	#CCM_ANALOG_PFD_480_CLR_PFD0_FRAC_MASK
 0x3Fu

	)

6163 
	#CCM_ANALOG_PFD_480_CLR_PFD0_FRAC_SHIFT
 0

	)

6164 
	#CCM_ANALOG_PFD_480_CLR_PFD0_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_480_CLR_PFD0_FRAC_SHIFT
))&
CCM_ANALOG_PFD_480_CLR_PFD0_FRAC_MASK
)

	)

6165 
	#CCM_ANALOG_PFD_480_CLR_PFD0_STABLE_MASK
 0x40u

	)

6166 
	#CCM_ANALOG_PFD_480_CLR_PFD0_STABLE_SHIFT
 6

	)

6167 
	#CCM_ANALOG_PFD_480_CLR_PFD0_CLKGATE_MASK
 0x80u

	)

6168 
	#CCM_ANALOG_PFD_480_CLR_PFD0_CLKGATE_SHIFT
 7

	)

6169 
	#CCM_ANALOG_PFD_480_CLR_PFD1_FRAC_MASK
 0x3F00u

	)

6170 
	#CCM_ANALOG_PFD_480_CLR_PFD1_FRAC_SHIFT
 8

	)

6171 
	#CCM_ANALOG_PFD_480_CLR_PFD1_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_480_CLR_PFD1_FRAC_SHIFT
))&
CCM_ANALOG_PFD_480_CLR_PFD1_FRAC_MASK
)

	)

6172 
	#CCM_ANALOG_PFD_480_CLR_PFD1_STABLE_MASK
 0x4000u

	)

6173 
	#CCM_ANALOG_PFD_480_CLR_PFD1_STABLE_SHIFT
 14

	)

6174 
	#CCM_ANALOG_PFD_480_CLR_PFD1_CLKGATE_MASK
 0x8000u

	)

6175 
	#CCM_ANALOG_PFD_480_CLR_PFD1_CLKGATE_SHIFT
 15

	)

6176 
	#CCM_ANALOG_PFD_480_CLR_PFD2_FRAC_MASK
 0x3F0000u

	)

6177 
	#CCM_ANALOG_PFD_480_CLR_PFD2_FRAC_SHIFT
 16

	)

6178 
	#CCM_ANALOG_PFD_480_CLR_PFD2_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_480_CLR_PFD2_FRAC_SHIFT
))&
CCM_ANALOG_PFD_480_CLR_PFD2_FRAC_MASK
)

	)

6179 
	#CCM_ANALOG_PFD_480_CLR_PFD2_STABLE_MASK
 0x400000u

	)

6180 
	#CCM_ANALOG_PFD_480_CLR_PFD2_STABLE_SHIFT
 22

	)

6181 
	#CCM_ANALOG_PFD_480_CLR_PFD2_CLKGATE_MASK
 0x800000u

	)

6182 
	#CCM_ANALOG_PFD_480_CLR_PFD2_CLKGATE_SHIFT
 23

	)

6183 
	#CCM_ANALOG_PFD_480_CLR_PFD3_FRAC_MASK
 0x3F000000u

	)

6184 
	#CCM_ANALOG_PFD_480_CLR_PFD3_FRAC_SHIFT
 24

	)

6185 
	#CCM_ANALOG_PFD_480_CLR_PFD3_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_480_CLR_PFD3_FRAC_SHIFT
))&
CCM_ANALOG_PFD_480_CLR_PFD3_FRAC_MASK
)

	)

6186 
	#CCM_ANALOG_PFD_480_CLR_PFD3_STABLE_MASK
 0x40000000u

	)

6187 
	#CCM_ANALOG_PFD_480_CLR_PFD3_STABLE_SHIFT
 30

	)

6188 
	#CCM_ANALOG_PFD_480_CLR_PFD3_CLKGATE_MASK
 0x80000000u

	)

6189 
	#CCM_ANALOG_PFD_480_CLR_PFD3_CLKGATE_SHIFT
 31

	)

6191 
	#CCM_ANALOG_PFD_480_TOG_PFD0_FRAC_MASK
 0x3Fu

	)

6192 
	#CCM_ANALOG_PFD_480_TOG_PFD0_FRAC_SHIFT
 0

	)

6193 
	#CCM_ANALOG_PFD_480_TOG_PFD0_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_480_TOG_PFD0_FRAC_SHIFT
))&
CCM_ANALOG_PFD_480_TOG_PFD0_FRAC_MASK
)

	)

6194 
	#CCM_ANALOG_PFD_480_TOG_PFD0_STABLE_MASK
 0x40u

	)

6195 
	#CCM_ANALOG_PFD_480_TOG_PFD0_STABLE_SHIFT
 6

	)

6196 
	#CCM_ANALOG_PFD_480_TOG_PFD0_CLKGATE_MASK
 0x80u

	)

6197 
	#CCM_ANALOG_PFD_480_TOG_PFD0_CLKGATE_SHIFT
 7

	)

6198 
	#CCM_ANALOG_PFD_480_TOG_PFD1_FRAC_MASK
 0x3F00u

	)

6199 
	#CCM_ANALOG_PFD_480_TOG_PFD1_FRAC_SHIFT
 8

	)

6200 
	#CCM_ANALOG_PFD_480_TOG_PFD1_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_480_TOG_PFD1_FRAC_SHIFT
))&
CCM_ANALOG_PFD_480_TOG_PFD1_FRAC_MASK
)

	)

6201 
	#CCM_ANALOG_PFD_480_TOG_PFD1_STABLE_MASK
 0x4000u

	)

6202 
	#CCM_ANALOG_PFD_480_TOG_PFD1_STABLE_SHIFT
 14

	)

6203 
	#CCM_ANALOG_PFD_480_TOG_PFD1_CLKGATE_MASK
 0x8000u

	)

6204 
	#CCM_ANALOG_PFD_480_TOG_PFD1_CLKGATE_SHIFT
 15

	)

6205 
	#CCM_ANALOG_PFD_480_TOG_PFD2_FRAC_MASK
 0x3F0000u

	)

6206 
	#CCM_ANALOG_PFD_480_TOG_PFD2_FRAC_SHIFT
 16

	)

6207 
	#CCM_ANALOG_PFD_480_TOG_PFD2_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_480_TOG_PFD2_FRAC_SHIFT
))&
CCM_ANALOG_PFD_480_TOG_PFD2_FRAC_MASK
)

	)

6208 
	#CCM_ANALOG_PFD_480_TOG_PFD2_STABLE_MASK
 0x400000u

	)

6209 
	#CCM_ANALOG_PFD_480_TOG_PFD2_STABLE_SHIFT
 22

	)

6210 
	#CCM_ANALOG_PFD_480_TOG_PFD2_CLKGATE_MASK
 0x800000u

	)

6211 
	#CCM_ANALOG_PFD_480_TOG_PFD2_CLKGATE_SHIFT
 23

	)

6212 
	#CCM_ANALOG_PFD_480_TOG_PFD3_FRAC_MASK
 0x3F000000u

	)

6213 
	#CCM_ANALOG_PFD_480_TOG_PFD3_FRAC_SHIFT
 24

	)

6214 
	#CCM_ANALOG_PFD_480_TOG_PFD3_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_480_TOG_PFD3_FRAC_SHIFT
))&
CCM_ANALOG_PFD_480_TOG_PFD3_FRAC_MASK
)

	)

6215 
	#CCM_ANALOG_PFD_480_TOG_PFD3_STABLE_MASK
 0x40000000u

	)

6216 
	#CCM_ANALOG_PFD_480_TOG_PFD3_STABLE_SHIFT
 30

	)

6217 
	#CCM_ANALOG_PFD_480_TOG_PFD3_CLKGATE_MASK
 0x80000000u

	)

6218 
	#CCM_ANALOG_PFD_480_TOG_PFD3_CLKGATE_SHIFT
 31

	)

6220 
	#CCM_ANALOG_PFD_528_PFD0_FRAC_MASK
 0x3Fu

	)

6221 
	#CCM_ANALOG_PFD_528_PFD0_FRAC_SHIFT
 0

	)

6222 
	#CCM_ANALOG_PFD_528_PFD0_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_528_PFD0_FRAC_SHIFT
))&
CCM_ANALOG_PFD_528_PFD0_FRAC_MASK
)

	)

6223 
	#CCM_ANALOG_PFD_528_PFD0_STABLE_MASK
 0x40u

	)

6224 
	#CCM_ANALOG_PFD_528_PFD0_STABLE_SHIFT
 6

	)

6225 
	#CCM_ANALOG_PFD_528_PFD0_CLKGATE_MASK
 0x80u

	)

6226 
	#CCM_ANALOG_PFD_528_PFD0_CLKGATE_SHIFT
 7

	)

6227 
	#CCM_ANALOG_PFD_528_PFD1_FRAC_MASK
 0x3F00u

	)

6228 
	#CCM_ANALOG_PFD_528_PFD1_FRAC_SHIFT
 8

	)

6229 
	#CCM_ANALOG_PFD_528_PFD1_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_528_PFD1_FRAC_SHIFT
))&
CCM_ANALOG_PFD_528_PFD1_FRAC_MASK
)

	)

6230 
	#CCM_ANALOG_PFD_528_PFD1_STABLE_MASK
 0x4000u

	)

6231 
	#CCM_ANALOG_PFD_528_PFD1_STABLE_SHIFT
 14

	)

6232 
	#CCM_ANALOG_PFD_528_PFD1_CLKGATE_MASK
 0x8000u

	)

6233 
	#CCM_ANALOG_PFD_528_PFD1_CLKGATE_SHIFT
 15

	)

6234 
	#CCM_ANALOG_PFD_528_PFD2_FRAC_MASK
 0x3F0000u

	)

6235 
	#CCM_ANALOG_PFD_528_PFD2_FRAC_SHIFT
 16

	)

6236 
	#CCM_ANALOG_PFD_528_PFD2_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_528_PFD2_FRAC_SHIFT
))&
CCM_ANALOG_PFD_528_PFD2_FRAC_MASK
)

	)

6237 
	#CCM_ANALOG_PFD_528_PFD2_STABLE_MASK
 0x400000u

	)

6238 
	#CCM_ANALOG_PFD_528_PFD2_STABLE_SHIFT
 22

	)

6239 
	#CCM_ANALOG_PFD_528_PFD2_CLKGATE_MASK
 0x800000u

	)

6240 
	#CCM_ANALOG_PFD_528_PFD2_CLKGATE_SHIFT
 23

	)

6241 
	#CCM_ANALOG_PFD_528_PFD3_FRAC_MASK
 0x3F000000u

	)

6242 
	#CCM_ANALOG_PFD_528_PFD3_FRAC_SHIFT
 24

	)

6243 
	#CCM_ANALOG_PFD_528_PFD3_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_528_PFD3_FRAC_SHIFT
))&
CCM_ANALOG_PFD_528_PFD3_FRAC_MASK
)

	)

6244 
	#CCM_ANALOG_PFD_528_PFD3_STABLE_MASK
 0x40000000u

	)

6245 
	#CCM_ANALOG_PFD_528_PFD3_STABLE_SHIFT
 30

	)

6246 
	#CCM_ANALOG_PFD_528_PFD3_CLKGATE_MASK
 0x80000000u

	)

6247 
	#CCM_ANALOG_PFD_528_PFD3_CLKGATE_SHIFT
 31

	)

6249 
	#CCM_ANALOG_PFD_528_SET_PFD0_FRAC_MASK
 0x3Fu

	)

6250 
	#CCM_ANALOG_PFD_528_SET_PFD0_FRAC_SHIFT
 0

	)

6251 
	#CCM_ANALOG_PFD_528_SET_PFD0_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_528_SET_PFD0_FRAC_SHIFT
))&
CCM_ANALOG_PFD_528_SET_PFD0_FRAC_MASK
)

	)

6252 
	#CCM_ANALOG_PFD_528_SET_PFD0_STABLE_MASK
 0x40u

	)

6253 
	#CCM_ANALOG_PFD_528_SET_PFD0_STABLE_SHIFT
 6

	)

6254 
	#CCM_ANALOG_PFD_528_SET_PFD0_CLKGATE_MASK
 0x80u

	)

6255 
	#CCM_ANALOG_PFD_528_SET_PFD0_CLKGATE_SHIFT
 7

	)

6256 
	#CCM_ANALOG_PFD_528_SET_PFD1_FRAC_MASK
 0x3F00u

	)

6257 
	#CCM_ANALOG_PFD_528_SET_PFD1_FRAC_SHIFT
 8

	)

6258 
	#CCM_ANALOG_PFD_528_SET_PFD1_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_528_SET_PFD1_FRAC_SHIFT
))&
CCM_ANALOG_PFD_528_SET_PFD1_FRAC_MASK
)

	)

6259 
	#CCM_ANALOG_PFD_528_SET_PFD1_STABLE_MASK
 0x4000u

	)

6260 
	#CCM_ANALOG_PFD_528_SET_PFD1_STABLE_SHIFT
 14

	)

6261 
	#CCM_ANALOG_PFD_528_SET_PFD1_CLKGATE_MASK
 0x8000u

	)

6262 
	#CCM_ANALOG_PFD_528_SET_PFD1_CLKGATE_SHIFT
 15

	)

6263 
	#CCM_ANALOG_PFD_528_SET_PFD2_FRAC_MASK
 0x3F0000u

	)

6264 
	#CCM_ANALOG_PFD_528_SET_PFD2_FRAC_SHIFT
 16

	)

6265 
	#CCM_ANALOG_PFD_528_SET_PFD2_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_528_SET_PFD2_FRAC_SHIFT
))&
CCM_ANALOG_PFD_528_SET_PFD2_FRAC_MASK
)

	)

6266 
	#CCM_ANALOG_PFD_528_SET_PFD2_STABLE_MASK
 0x400000u

	)

6267 
	#CCM_ANALOG_PFD_528_SET_PFD2_STABLE_SHIFT
 22

	)

6268 
	#CCM_ANALOG_PFD_528_SET_PFD2_CLKGATE_MASK
 0x800000u

	)

6269 
	#CCM_ANALOG_PFD_528_SET_PFD2_CLKGATE_SHIFT
 23

	)

6270 
	#CCM_ANALOG_PFD_528_SET_PFD3_FRAC_MASK
 0x3F000000u

	)

6271 
	#CCM_ANALOG_PFD_528_SET_PFD3_FRAC_SHIFT
 24

	)

6272 
	#CCM_ANALOG_PFD_528_SET_PFD3_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_528_SET_PFD3_FRAC_SHIFT
))&
CCM_ANALOG_PFD_528_SET_PFD3_FRAC_MASK
)

	)

6273 
	#CCM_ANALOG_PFD_528_SET_PFD3_STABLE_MASK
 0x40000000u

	)

6274 
	#CCM_ANALOG_PFD_528_SET_PFD3_STABLE_SHIFT
 30

	)

6275 
	#CCM_ANALOG_PFD_528_SET_PFD3_CLKGATE_MASK
 0x80000000u

	)

6276 
	#CCM_ANALOG_PFD_528_SET_PFD3_CLKGATE_SHIFT
 31

	)

6278 
	#CCM_ANALOG_PFD_528_CLR_PFD0_FRAC_MASK
 0x3Fu

	)

6279 
	#CCM_ANALOG_PFD_528_CLR_PFD0_FRAC_SHIFT
 0

	)

6280 
	#CCM_ANALOG_PFD_528_CLR_PFD0_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_528_CLR_PFD0_FRAC_SHIFT
))&
CCM_ANALOG_PFD_528_CLR_PFD0_FRAC_MASK
)

	)

6281 
	#CCM_ANALOG_PFD_528_CLR_PFD0_STABLE_MASK
 0x40u

	)

6282 
	#CCM_ANALOG_PFD_528_CLR_PFD0_STABLE_SHIFT
 6

	)

6283 
	#CCM_ANALOG_PFD_528_CLR_PFD0_CLKGATE_MASK
 0x80u

	)

6284 
	#CCM_ANALOG_PFD_528_CLR_PFD0_CLKGATE_SHIFT
 7

	)

6285 
	#CCM_ANALOG_PFD_528_CLR_PFD1_FRAC_MASK
 0x3F00u

	)

6286 
	#CCM_ANALOG_PFD_528_CLR_PFD1_FRAC_SHIFT
 8

	)

6287 
	#CCM_ANALOG_PFD_528_CLR_PFD1_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_528_CLR_PFD1_FRAC_SHIFT
))&
CCM_ANALOG_PFD_528_CLR_PFD1_FRAC_MASK
)

	)

6288 
	#CCM_ANALOG_PFD_528_CLR_PFD1_STABLE_MASK
 0x4000u

	)

6289 
	#CCM_ANALOG_PFD_528_CLR_PFD1_STABLE_SHIFT
 14

	)

6290 
	#CCM_ANALOG_PFD_528_CLR_PFD1_CLKGATE_MASK
 0x8000u

	)

6291 
	#CCM_ANALOG_PFD_528_CLR_PFD1_CLKGATE_SHIFT
 15

	)

6292 
	#CCM_ANALOG_PFD_528_CLR_PFD2_FRAC_MASK
 0x3F0000u

	)

6293 
	#CCM_ANALOG_PFD_528_CLR_PFD2_FRAC_SHIFT
 16

	)

6294 
	#CCM_ANALOG_PFD_528_CLR_PFD2_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_528_CLR_PFD2_FRAC_SHIFT
))&
CCM_ANALOG_PFD_528_CLR_PFD2_FRAC_MASK
)

	)

6295 
	#CCM_ANALOG_PFD_528_CLR_PFD2_STABLE_MASK
 0x400000u

	)

6296 
	#CCM_ANALOG_PFD_528_CLR_PFD2_STABLE_SHIFT
 22

	)

6297 
	#CCM_ANALOG_PFD_528_CLR_PFD2_CLKGATE_MASK
 0x800000u

	)

6298 
	#CCM_ANALOG_PFD_528_CLR_PFD2_CLKGATE_SHIFT
 23

	)

6299 
	#CCM_ANALOG_PFD_528_CLR_PFD3_FRAC_MASK
 0x3F000000u

	)

6300 
	#CCM_ANALOG_PFD_528_CLR_PFD3_FRAC_SHIFT
 24

	)

6301 
	#CCM_ANALOG_PFD_528_CLR_PFD3_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_528_CLR_PFD3_FRAC_SHIFT
))&
CCM_ANALOG_PFD_528_CLR_PFD3_FRAC_MASK
)

	)

6302 
	#CCM_ANALOG_PFD_528_CLR_PFD3_STABLE_MASK
 0x40000000u

	)

6303 
	#CCM_ANALOG_PFD_528_CLR_PFD3_STABLE_SHIFT
 30

	)

6304 
	#CCM_ANALOG_PFD_528_CLR_PFD3_CLKGATE_MASK
 0x80000000u

	)

6305 
	#CCM_ANALOG_PFD_528_CLR_PFD3_CLKGATE_SHIFT
 31

	)

6307 
	#CCM_ANALOG_PFD_528_TOG_PFD0_FRAC_MASK
 0x3Fu

	)

6308 
	#CCM_ANALOG_PFD_528_TOG_PFD0_FRAC_SHIFT
 0

	)

6309 
	#CCM_ANALOG_PFD_528_TOG_PFD0_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_528_TOG_PFD0_FRAC_SHIFT
))&
CCM_ANALOG_PFD_528_TOG_PFD0_FRAC_MASK
)

	)

6310 
	#CCM_ANALOG_PFD_528_TOG_PFD0_STABLE_MASK
 0x40u

	)

6311 
	#CCM_ANALOG_PFD_528_TOG_PFD0_STABLE_SHIFT
 6

	)

6312 
	#CCM_ANALOG_PFD_528_TOG_PFD0_CLKGATE_MASK
 0x80u

	)

6313 
	#CCM_ANALOG_PFD_528_TOG_PFD0_CLKGATE_SHIFT
 7

	)

6314 
	#CCM_ANALOG_PFD_528_TOG_PFD1_FRAC_MASK
 0x3F00u

	)

6315 
	#CCM_ANALOG_PFD_528_TOG_PFD1_FRAC_SHIFT
 8

	)

6316 
	#CCM_ANALOG_PFD_528_TOG_PFD1_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_528_TOG_PFD1_FRAC_SHIFT
))&
CCM_ANALOG_PFD_528_TOG_PFD1_FRAC_MASK
)

	)

6317 
	#CCM_ANALOG_PFD_528_TOG_PFD1_STABLE_MASK
 0x4000u

	)

6318 
	#CCM_ANALOG_PFD_528_TOG_PFD1_STABLE_SHIFT
 14

	)

6319 
	#CCM_ANALOG_PFD_528_TOG_PFD1_CLKGATE_MASK
 0x8000u

	)

6320 
	#CCM_ANALOG_PFD_528_TOG_PFD1_CLKGATE_SHIFT
 15

	)

6321 
	#CCM_ANALOG_PFD_528_TOG_PFD2_FRAC_MASK
 0x3F0000u

	)

6322 
	#CCM_ANALOG_PFD_528_TOG_PFD2_FRAC_SHIFT
 16

	)

6323 
	#CCM_ANALOG_PFD_528_TOG_PFD2_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_528_TOG_PFD2_FRAC_SHIFT
))&
CCM_ANALOG_PFD_528_TOG_PFD2_FRAC_MASK
)

	)

6324 
	#CCM_ANALOG_PFD_528_TOG_PFD2_STABLE_MASK
 0x400000u

	)

6325 
	#CCM_ANALOG_PFD_528_TOG_PFD2_STABLE_SHIFT
 22

	)

6326 
	#CCM_ANALOG_PFD_528_TOG_PFD2_CLKGATE_MASK
 0x800000u

	)

6327 
	#CCM_ANALOG_PFD_528_TOG_PFD2_CLKGATE_SHIFT
 23

	)

6328 
	#CCM_ANALOG_PFD_528_TOG_PFD3_FRAC_MASK
 0x3F000000u

	)

6329 
	#CCM_ANALOG_PFD_528_TOG_PFD3_FRAC_SHIFT
 24

	)

6330 
	#CCM_ANALOG_PFD_528_TOG_PFD3_FRAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_PFD_528_TOG_PFD3_FRAC_SHIFT
))&
CCM_ANALOG_PFD_528_TOG_PFD3_FRAC_MASK
)

	)

6331 
	#CCM_ANALOG_PFD_528_TOG_PFD3_STABLE_MASK
 0x40000000u

	)

6332 
	#CCM_ANALOG_PFD_528_TOG_PFD3_STABLE_SHIFT
 30

	)

6333 
	#CCM_ANALOG_PFD_528_TOG_PFD3_CLKGATE_MASK
 0x80000000u

	)

6334 
	#CCM_ANALOG_PFD_528_TOG_PFD3_CLKGATE_SHIFT
 31

	)

6336 
	#CCM_ANALOG_MISC0_REFTOP_PWD_MASK
 0x1u

	)

6337 
	#CCM_ANALOG_MISC0_REFTOP_PWD_SHIFT
 0

	)

6338 
	#CCM_ANALOG_MISC0_REFTOP_SELFBIASOFF_MASK
 0x8u

	)

6339 
	#CCM_ANALOG_MISC0_REFTOP_SELFBIASOFF_SHIFT
 3

	)

6340 
	#CCM_ANALOG_MISC0_REFTOP_VBGADJ_MASK
 0x70u

	)

6341 
	#CCM_ANALOG_MISC0_REFTOP_VBGADJ_SHIFT
 4

	)

6342 
	#CCM_ANALOG_MISC0_REFTOP_VBGADJ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC0_REFTOP_VBGADJ_SHIFT
))&
CCM_ANALOG_MISC0_REFTOP_VBGADJ_MASK
)

	)

6343 
	#CCM_ANALOG_MISC0_REFTOP_VBGUP_MASK
 0x80u

	)

6344 
	#CCM_ANALOG_MISC0_REFTOP_VBGUP_SHIFT
 7

	)

6345 
	#CCM_ANALOG_MISC0_STOP_MODE_CONFIG_MASK
 0xC00u

	)

6346 
	#CCM_ANALOG_MISC0_STOP_MODE_CONFIG_SHIFT
 10

	)

6347 
	#CCM_ANALOG_MISC0_STOP_MODE_CONFIG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC0_STOP_MODE_CONFIG_SHIFT
))&
CCM_ANALOG_MISC0_STOP_MODE_CONFIG_MASK
)

	)

6348 
	#CCM_ANALOG_MISC0_RTC_RINGOSC_EN_MASK
 0x1000u

	)

6349 
	#CCM_ANALOG_MISC0_RTC_RINGOSC_EN_SHIFT
 12

	)

6350 
	#CCM_ANALOG_MISC0_OSC_I_MASK
 0x6000u

	)

6351 
	#CCM_ANALOG_MISC0_OSC_I_SHIFT
 13

	)

6352 
	#CCM_ANALOG_MISC0_OSC_I
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC0_OSC_I_SHIFT
))&
CCM_ANALOG_MISC0_OSC_I_MASK
)

	)

6353 
	#CCM_ANALOG_MISC0_OSC_XTALOK_MASK
 0x8000u

	)

6354 
	#CCM_ANALOG_MISC0_OSC_XTALOK_SHIFT
 15

	)

6355 
	#CCM_ANALOG_MISC0_OSC_XTALOK_EN_MASK
 0x10000u

	)

6356 
	#CCM_ANALOG_MISC0_OSC_XTALOK_EN_SHIFT
 16

	)

6357 
	#CCM_ANALOG_MISC0_CLKGATE_CTRL_MASK
 0x2000000u

	)

6358 
	#CCM_ANALOG_MISC0_CLKGATE_CTRL_SHIFT
 25

	)

6359 
	#CCM_ANALOG_MISC0_CLKGATE_DELAY_MASK
 0x1C000000u

	)

6360 
	#CCM_ANALOG_MISC0_CLKGATE_DELAY_SHIFT
 26

	)

6361 
	#CCM_ANALOG_MISC0_CLKGATE_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC0_CLKGATE_DELAY_SHIFT
))&
CCM_ANALOG_MISC0_CLKGATE_DELAY_MASK
)

	)

6362 
	#CCM_ANALOG_MISC0_RTC_XTAL_SOURCE_MASK
 0x20000000u

	)

6363 
	#CCM_ANALOG_MISC0_RTC_XTAL_SOURCE_SHIFT
 29

	)

6364 
	#CCM_ANALOG_MISC0_XTAL_24M_PWD_MASK
 0x40000000u

	)

6365 
	#CCM_ANALOG_MISC0_XTAL_24M_PWD_SHIFT
 30

	)

6366 
	#CCM_ANALOG_MISC0_VID_PLL_PREDIV_MASK
 0x80000000u

	)

6367 
	#CCM_ANALOG_MISC0_VID_PLL_PREDIV_SHIFT
 31

	)

6369 
	#CCM_ANALOG_MISC0_SET_REFTOP_PWD_MASK
 0x1u

	)

6370 
	#CCM_ANALOG_MISC0_SET_REFTOP_PWD_SHIFT
 0

	)

6371 
	#CCM_ANALOG_MISC0_SET_REFTOP_SELFBIASOFF_MASK
 0x8u

	)

6372 
	#CCM_ANALOG_MISC0_SET_REFTOP_SELFBIASOFF_SHIFT
 3

	)

6373 
	#CCM_ANALOG_MISC0_SET_REFTOP_VBGADJ_MASK
 0x70u

	)

6374 
	#CCM_ANALOG_MISC0_SET_REFTOP_VBGADJ_SHIFT
 4

	)

6375 
	#CCM_ANALOG_MISC0_SET_REFTOP_VBGADJ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC0_SET_REFTOP_VBGADJ_SHIFT
))&
CCM_ANALOG_MISC0_SET_REFTOP_VBGADJ_MASK
)

	)

6376 
	#CCM_ANALOG_MISC0_SET_REFTOP_VBGUP_MASK
 0x80u

	)

6377 
	#CCM_ANALOG_MISC0_SET_REFTOP_VBGUP_SHIFT
 7

	)

6378 
	#CCM_ANALOG_MISC0_SET_STOP_MODE_CONFIG_MASK
 0xC00u

	)

6379 
	#CCM_ANALOG_MISC0_SET_STOP_MODE_CONFIG_SHIFT
 10

	)

6380 
	#CCM_ANALOG_MISC0_SET_STOP_MODE_CONFIG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC0_SET_STOP_MODE_CONFIG_SHIFT
))&
CCM_ANALOG_MISC0_SET_STOP_MODE_CONFIG_MASK
)

	)

6381 
	#CCM_ANALOG_MISC0_SET_RTC_RINGOSC_EN_MASK
 0x1000u

	)

6382 
	#CCM_ANALOG_MISC0_SET_RTC_RINGOSC_EN_SHIFT
 12

	)

6383 
	#CCM_ANALOG_MISC0_SET_OSC_I_MASK
 0x6000u

	)

6384 
	#CCM_ANALOG_MISC0_SET_OSC_I_SHIFT
 13

	)

6385 
	#CCM_ANALOG_MISC0_SET_OSC_I
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC0_SET_OSC_I_SHIFT
))&
CCM_ANALOG_MISC0_SET_OSC_I_MASK
)

	)

6386 
	#CCM_ANALOG_MISC0_SET_OSC_XTALOK_MASK
 0x8000u

	)

6387 
	#CCM_ANALOG_MISC0_SET_OSC_XTALOK_SHIFT
 15

	)

6388 
	#CCM_ANALOG_MISC0_SET_OSC_XTALOK_EN_MASK
 0x10000u

	)

6389 
	#CCM_ANALOG_MISC0_SET_OSC_XTALOK_EN_SHIFT
 16

	)

6390 
	#CCM_ANALOG_MISC0_SET_CLKGATE_CTRL_MASK
 0x2000000u

	)

6391 
	#CCM_ANALOG_MISC0_SET_CLKGATE_CTRL_SHIFT
 25

	)

6392 
	#CCM_ANALOG_MISC0_SET_CLKGATE_DELAY_MASK
 0x1C000000u

	)

6393 
	#CCM_ANALOG_MISC0_SET_CLKGATE_DELAY_SHIFT
 26

	)

6394 
	#CCM_ANALOG_MISC0_SET_CLKGATE_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC0_SET_CLKGATE_DELAY_SHIFT
))&
CCM_ANALOG_MISC0_SET_CLKGATE_DELAY_MASK
)

	)

6395 
	#CCM_ANALOG_MISC0_SET_RTC_XTAL_SOURCE_MASK
 0x20000000u

	)

6396 
	#CCM_ANALOG_MISC0_SET_RTC_XTAL_SOURCE_SHIFT
 29

	)

6397 
	#CCM_ANALOG_MISC0_SET_XTAL_24M_PWD_MASK
 0x40000000u

	)

6398 
	#CCM_ANALOG_MISC0_SET_XTAL_24M_PWD_SHIFT
 30

	)

6399 
	#CCM_ANALOG_MISC0_SET_VID_PLL_PREDIV_MASK
 0x80000000u

	)

6400 
	#CCM_ANALOG_MISC0_SET_VID_PLL_PREDIV_SHIFT
 31

	)

6402 
	#CCM_ANALOG_MISC0_CLR_REFTOP_PWD_MASK
 0x1u

	)

6403 
	#CCM_ANALOG_MISC0_CLR_REFTOP_PWD_SHIFT
 0

	)

6404 
	#CCM_ANALOG_MISC0_CLR_REFTOP_SELFBIASOFF_MASK
 0x8u

	)

6405 
	#CCM_ANALOG_MISC0_CLR_REFTOP_SELFBIASOFF_SHIFT
 3

	)

6406 
	#CCM_ANALOG_MISC0_CLR_REFTOP_VBGADJ_MASK
 0x70u

	)

6407 
	#CCM_ANALOG_MISC0_CLR_REFTOP_VBGADJ_SHIFT
 4

	)

6408 
	#CCM_ANALOG_MISC0_CLR_REFTOP_VBGADJ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC0_CLR_REFTOP_VBGADJ_SHIFT
))&
CCM_ANALOG_MISC0_CLR_REFTOP_VBGADJ_MASK
)

	)

6409 
	#CCM_ANALOG_MISC0_CLR_REFTOP_VBGUP_MASK
 0x80u

	)

6410 
	#CCM_ANALOG_MISC0_CLR_REFTOP_VBGUP_SHIFT
 7

	)

6411 
	#CCM_ANALOG_MISC0_CLR_STOP_MODE_CONFIG_MASK
 0xC00u

	)

6412 
	#CCM_ANALOG_MISC0_CLR_STOP_MODE_CONFIG_SHIFT
 10

	)

6413 
	#CCM_ANALOG_MISC0_CLR_STOP_MODE_CONFIG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC0_CLR_STOP_MODE_CONFIG_SHIFT
))&
CCM_ANALOG_MISC0_CLR_STOP_MODE_CONFIG_MASK
)

	)

6414 
	#CCM_ANALOG_MISC0_CLR_RTC_RINGOSC_EN_MASK
 0x1000u

	)

6415 
	#CCM_ANALOG_MISC0_CLR_RTC_RINGOSC_EN_SHIFT
 12

	)

6416 
	#CCM_ANALOG_MISC0_CLR_OSC_I_MASK
 0x6000u

	)

6417 
	#CCM_ANALOG_MISC0_CLR_OSC_I_SHIFT
 13

	)

6418 
	#CCM_ANALOG_MISC0_CLR_OSC_I
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC0_CLR_OSC_I_SHIFT
))&
CCM_ANALOG_MISC0_CLR_OSC_I_MASK
)

	)

6419 
	#CCM_ANALOG_MISC0_CLR_OSC_XTALOK_MASK
 0x8000u

	)

6420 
	#CCM_ANALOG_MISC0_CLR_OSC_XTALOK_SHIFT
 15

	)

6421 
	#CCM_ANALOG_MISC0_CLR_OSC_XTALOK_EN_MASK
 0x10000u

	)

6422 
	#CCM_ANALOG_MISC0_CLR_OSC_XTALOK_EN_SHIFT
 16

	)

6423 
	#CCM_ANALOG_MISC0_CLR_CLKGATE_CTRL_MASK
 0x2000000u

	)

6424 
	#CCM_ANALOG_MISC0_CLR_CLKGATE_CTRL_SHIFT
 25

	)

6425 
	#CCM_ANALOG_MISC0_CLR_CLKGATE_DELAY_MASK
 0x1C000000u

	)

6426 
	#CCM_ANALOG_MISC0_CLR_CLKGATE_DELAY_SHIFT
 26

	)

6427 
	#CCM_ANALOG_MISC0_CLR_CLKGATE_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC0_CLR_CLKGATE_DELAY_SHIFT
))&
CCM_ANALOG_MISC0_CLR_CLKGATE_DELAY_MASK
)

	)

6428 
	#CCM_ANALOG_MISC0_CLR_RTC_XTAL_SOURCE_MASK
 0x20000000u

	)

6429 
	#CCM_ANALOG_MISC0_CLR_RTC_XTAL_SOURCE_SHIFT
 29

	)

6430 
	#CCM_ANALOG_MISC0_CLR_XTAL_24M_PWD_MASK
 0x40000000u

	)

6431 
	#CCM_ANALOG_MISC0_CLR_XTAL_24M_PWD_SHIFT
 30

	)

6432 
	#CCM_ANALOG_MISC0_CLR_VID_PLL_PREDIV_MASK
 0x80000000u

	)

6433 
	#CCM_ANALOG_MISC0_CLR_VID_PLL_PREDIV_SHIFT
 31

	)

6435 
	#CCM_ANALOG_MISC0_TOG_REFTOP_PWD_MASK
 0x1u

	)

6436 
	#CCM_ANALOG_MISC0_TOG_REFTOP_PWD_SHIFT
 0

	)

6437 
	#CCM_ANALOG_MISC0_TOG_REFTOP_SELFBIASOFF_MASK
 0x8u

	)

6438 
	#CCM_ANALOG_MISC0_TOG_REFTOP_SELFBIASOFF_SHIFT
 3

	)

6439 
	#CCM_ANALOG_MISC0_TOG_REFTOP_VBGADJ_MASK
 0x70u

	)

6440 
	#CCM_ANALOG_MISC0_TOG_REFTOP_VBGADJ_SHIFT
 4

	)

6441 
	#CCM_ANALOG_MISC0_TOG_REFTOP_VBGADJ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC0_TOG_REFTOP_VBGADJ_SHIFT
))&
CCM_ANALOG_MISC0_TOG_REFTOP_VBGADJ_MASK
)

	)

6442 
	#CCM_ANALOG_MISC0_TOG_REFTOP_VBGUP_MASK
 0x80u

	)

6443 
	#CCM_ANALOG_MISC0_TOG_REFTOP_VBGUP_SHIFT
 7

	)

6444 
	#CCM_ANALOG_MISC0_TOG_STOP_MODE_CONFIG_MASK
 0xC00u

	)

6445 
	#CCM_ANALOG_MISC0_TOG_STOP_MODE_CONFIG_SHIFT
 10

	)

6446 
	#CCM_ANALOG_MISC0_TOG_STOP_MODE_CONFIG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC0_TOG_STOP_MODE_CONFIG_SHIFT
))&
CCM_ANALOG_MISC0_TOG_STOP_MODE_CONFIG_MASK
)

	)

6447 
	#CCM_ANALOG_MISC0_TOG_RTC_RINGOSC_EN_MASK
 0x1000u

	)

6448 
	#CCM_ANALOG_MISC0_TOG_RTC_RINGOSC_EN_SHIFT
 12

	)

6449 
	#CCM_ANALOG_MISC0_TOG_OSC_I_MASK
 0x6000u

	)

6450 
	#CCM_ANALOG_MISC0_TOG_OSC_I_SHIFT
 13

	)

6451 
	#CCM_ANALOG_MISC0_TOG_OSC_I
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC0_TOG_OSC_I_SHIFT
))&
CCM_ANALOG_MISC0_TOG_OSC_I_MASK
)

	)

6452 
	#CCM_ANALOG_MISC0_TOG_OSC_XTALOK_MASK
 0x8000u

	)

6453 
	#CCM_ANALOG_MISC0_TOG_OSC_XTALOK_SHIFT
 15

	)

6454 
	#CCM_ANALOG_MISC0_TOG_OSC_XTALOK_EN_MASK
 0x10000u

	)

6455 
	#CCM_ANALOG_MISC0_TOG_OSC_XTALOK_EN_SHIFT
 16

	)

6456 
	#CCM_ANALOG_MISC0_TOG_CLKGATE_CTRL_MASK
 0x2000000u

	)

6457 
	#CCM_ANALOG_MISC0_TOG_CLKGATE_CTRL_SHIFT
 25

	)

6458 
	#CCM_ANALOG_MISC0_TOG_CLKGATE_DELAY_MASK
 0x1C000000u

	)

6459 
	#CCM_ANALOG_MISC0_TOG_CLKGATE_DELAY_SHIFT
 26

	)

6460 
	#CCM_ANALOG_MISC0_TOG_CLKGATE_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC0_TOG_CLKGATE_DELAY_SHIFT
))&
CCM_ANALOG_MISC0_TOG_CLKGATE_DELAY_MASK
)

	)

6461 
	#CCM_ANALOG_MISC0_TOG_RTC_XTAL_SOURCE_MASK
 0x20000000u

	)

6462 
	#CCM_ANALOG_MISC0_TOG_RTC_XTAL_SOURCE_SHIFT
 29

	)

6463 
	#CCM_ANALOG_MISC0_TOG_XTAL_24M_PWD_MASK
 0x40000000u

	)

6464 
	#CCM_ANALOG_MISC0_TOG_XTAL_24M_PWD_SHIFT
 30

	)

6465 
	#CCM_ANALOG_MISC0_TOG_VID_PLL_PREDIV_MASK
 0x80000000u

	)

6466 
	#CCM_ANALOG_MISC0_TOG_VID_PLL_PREDIV_SHIFT
 31

	)

6468 
	#CCM_ANALOG_MISC1_LVDS1_CLK_SEL_MASK
 0x1Fu

	)

6469 
	#CCM_ANALOG_MISC1_LVDS1_CLK_SEL_SHIFT
 0

	)

6470 
	#CCM_ANALOG_MISC1_LVDS1_CLK_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC1_LVDS1_CLK_SEL_SHIFT
))&
CCM_ANALOG_MISC1_LVDS1_CLK_SEL_MASK
)

	)

6471 
	#CCM_ANALOG_MISC1_LVDS2_CLK_SEL_MASK
 0x3E0u

	)

6472 
	#CCM_ANALOG_MISC1_LVDS2_CLK_SEL_SHIFT
 5

	)

6473 
	#CCM_ANALOG_MISC1_LVDS2_CLK_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC1_LVDS2_CLK_SEL_SHIFT
))&
CCM_ANALOG_MISC1_LVDS2_CLK_SEL_MASK
)

	)

6474 
	#CCM_ANALOG_MISC1_LVDSCLK1_OBEN_MASK
 0x400u

	)

6475 
	#CCM_ANALOG_MISC1_LVDSCLK1_OBEN_SHIFT
 10

	)

6476 
	#CCM_ANALOG_MISC1_LVDSCLK2_OBEN_MASK
 0x800u

	)

6477 
	#CCM_ANALOG_MISC1_LVDSCLK2_OBEN_SHIFT
 11

	)

6478 
	#CCM_ANALOG_MISC1_LVDSCLK1_IBEN_MASK
 0x1000u

	)

6479 
	#CCM_ANALOG_MISC1_LVDSCLK1_IBEN_SHIFT
 12

	)

6480 
	#CCM_ANALOG_MISC1_LVDSCLK2_IBEN_MASK
 0x2000u

	)

6481 
	#CCM_ANALOG_MISC1_LVDSCLK2_IBEN_SHIFT
 13

	)

6482 
	#CCM_ANALOG_MISC1_PFD_480_AUTOGATE_EN_MASK
 0x10000u

	)

6483 
	#CCM_ANALOG_MISC1_PFD_480_AUTOGATE_EN_SHIFT
 16

	)

6484 
	#CCM_ANALOG_MISC1_PFD_528_AUTOGATE_EN_MASK
 0x20000u

	)

6485 
	#CCM_ANALOG_MISC1_PFD_528_AUTOGATE_EN_SHIFT
 17

	)

6486 
	#CCM_ANALOG_MISC1_IRQ_TEMPPANIC_MASK
 0x8000000u

	)

6487 
	#CCM_ANALOG_MISC1_IRQ_TEMPPANIC_SHIFT
 27

	)

6488 
	#CCM_ANALOG_MISC1_IRQ_TEMPLOW_MASK
 0x10000000u

	)

6489 
	#CCM_ANALOG_MISC1_IRQ_TEMPLOW_SHIFT
 28

	)

6490 
	#CCM_ANALOG_MISC1_IRQ_TEMPHIGH_MASK
 0x20000000u

	)

6491 
	#CCM_ANALOG_MISC1_IRQ_TEMPHIGH_SHIFT
 29

	)

6492 
	#CCM_ANALOG_MISC1_IRQ_ANA_BO_MASK
 0x40000000u

	)

6493 
	#CCM_ANALOG_MISC1_IRQ_ANA_BO_SHIFT
 30

	)

6494 
	#CCM_ANALOG_MISC1_IRQ_DIG_BO_MASK
 0x80000000u

	)

6495 
	#CCM_ANALOG_MISC1_IRQ_DIG_BO_SHIFT
 31

	)

6497 
	#CCM_ANALOG_MISC1_SET_LVDS1_CLK_SEL_MASK
 0x1Fu

	)

6498 
	#CCM_ANALOG_MISC1_SET_LVDS1_CLK_SEL_SHIFT
 0

	)

6499 
	#CCM_ANALOG_MISC1_SET_LVDS1_CLK_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC1_SET_LVDS1_CLK_SEL_SHIFT
))&
CCM_ANALOG_MISC1_SET_LVDS1_CLK_SEL_MASK
)

	)

6500 
	#CCM_ANALOG_MISC1_SET_LVDS2_CLK_SEL_MASK
 0x3E0u

	)

6501 
	#CCM_ANALOG_MISC1_SET_LVDS2_CLK_SEL_SHIFT
 5

	)

6502 
	#CCM_ANALOG_MISC1_SET_LVDS2_CLK_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC1_SET_LVDS2_CLK_SEL_SHIFT
))&
CCM_ANALOG_MISC1_SET_LVDS2_CLK_SEL_MASK
)

	)

6503 
	#CCM_ANALOG_MISC1_SET_LVDSCLK1_OBEN_MASK
 0x400u

	)

6504 
	#CCM_ANALOG_MISC1_SET_LVDSCLK1_OBEN_SHIFT
 10

	)

6505 
	#CCM_ANALOG_MISC1_SET_LVDSCLK2_OBEN_MASK
 0x800u

	)

6506 
	#CCM_ANALOG_MISC1_SET_LVDSCLK2_OBEN_SHIFT
 11

	)

6507 
	#CCM_ANALOG_MISC1_SET_LVDSCLK1_IBEN_MASK
 0x1000u

	)

6508 
	#CCM_ANALOG_MISC1_SET_LVDSCLK1_IBEN_SHIFT
 12

	)

6509 
	#CCM_ANALOG_MISC1_SET_LVDSCLK2_IBEN_MASK
 0x2000u

	)

6510 
	#CCM_ANALOG_MISC1_SET_LVDSCLK2_IBEN_SHIFT
 13

	)

6511 
	#CCM_ANALOG_MISC1_SET_PFD_480_AUTOGATE_EN_MASK
 0x10000u

	)

6512 
	#CCM_ANALOG_MISC1_SET_PFD_480_AUTOGATE_EN_SHIFT
 16

	)

6513 
	#CCM_ANALOG_MISC1_SET_PFD_528_AUTOGATE_EN_MASK
 0x20000u

	)

6514 
	#CCM_ANALOG_MISC1_SET_PFD_528_AUTOGATE_EN_SHIFT
 17

	)

6515 
	#CCM_ANALOG_MISC1_SET_IRQ_TEMPPANIC_MASK
 0x8000000u

	)

6516 
	#CCM_ANALOG_MISC1_SET_IRQ_TEMPPANIC_SHIFT
 27

	)

6517 
	#CCM_ANALOG_MISC1_SET_IRQ_TEMPLOW_MASK
 0x10000000u

	)

6518 
	#CCM_ANALOG_MISC1_SET_IRQ_TEMPLOW_SHIFT
 28

	)

6519 
	#CCM_ANALOG_MISC1_SET_IRQ_TEMPHIGH_MASK
 0x20000000u

	)

6520 
	#CCM_ANALOG_MISC1_SET_IRQ_TEMPHIGH_SHIFT
 29

	)

6521 
	#CCM_ANALOG_MISC1_SET_IRQ_ANA_BO_MASK
 0x40000000u

	)

6522 
	#CCM_ANALOG_MISC1_SET_IRQ_ANA_BO_SHIFT
 30

	)

6523 
	#CCM_ANALOG_MISC1_SET_IRQ_DIG_BO_MASK
 0x80000000u

	)

6524 
	#CCM_ANALOG_MISC1_SET_IRQ_DIG_BO_SHIFT
 31

	)

6526 
	#CCM_ANALOG_MISC1_CLR_LVDS1_CLK_SEL_MASK
 0x1Fu

	)

6527 
	#CCM_ANALOG_MISC1_CLR_LVDS1_CLK_SEL_SHIFT
 0

	)

6528 
	#CCM_ANALOG_MISC1_CLR_LVDS1_CLK_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC1_CLR_LVDS1_CLK_SEL_SHIFT
))&
CCM_ANALOG_MISC1_CLR_LVDS1_CLK_SEL_MASK
)

	)

6529 
	#CCM_ANALOG_MISC1_CLR_LVDS2_CLK_SEL_MASK
 0x3E0u

	)

6530 
	#CCM_ANALOG_MISC1_CLR_LVDS2_CLK_SEL_SHIFT
 5

	)

6531 
	#CCM_ANALOG_MISC1_CLR_LVDS2_CLK_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC1_CLR_LVDS2_CLK_SEL_SHIFT
))&
CCM_ANALOG_MISC1_CLR_LVDS2_CLK_SEL_MASK
)

	)

6532 
	#CCM_ANALOG_MISC1_CLR_LVDSCLK1_OBEN_MASK
 0x400u

	)

6533 
	#CCM_ANALOG_MISC1_CLR_LVDSCLK1_OBEN_SHIFT
 10

	)

6534 
	#CCM_ANALOG_MISC1_CLR_LVDSCLK2_OBEN_MASK
 0x800u

	)

6535 
	#CCM_ANALOG_MISC1_CLR_LVDSCLK2_OBEN_SHIFT
 11

	)

6536 
	#CCM_ANALOG_MISC1_CLR_LVDSCLK1_IBEN_MASK
 0x1000u

	)

6537 
	#CCM_ANALOG_MISC1_CLR_LVDSCLK1_IBEN_SHIFT
 12

	)

6538 
	#CCM_ANALOG_MISC1_CLR_LVDSCLK2_IBEN_MASK
 0x2000u

	)

6539 
	#CCM_ANALOG_MISC1_CLR_LVDSCLK2_IBEN_SHIFT
 13

	)

6540 
	#CCM_ANALOG_MISC1_CLR_PFD_480_AUTOGATE_EN_MASK
 0x10000u

	)

6541 
	#CCM_ANALOG_MISC1_CLR_PFD_480_AUTOGATE_EN_SHIFT
 16

	)

6542 
	#CCM_ANALOG_MISC1_CLR_PFD_528_AUTOGATE_EN_MASK
 0x20000u

	)

6543 
	#CCM_ANALOG_MISC1_CLR_PFD_528_AUTOGATE_EN_SHIFT
 17

	)

6544 
	#CCM_ANALOG_MISC1_CLR_IRQ_TEMPPANIC_MASK
 0x8000000u

	)

6545 
	#CCM_ANALOG_MISC1_CLR_IRQ_TEMPPANIC_SHIFT
 27

	)

6546 
	#CCM_ANALOG_MISC1_CLR_IRQ_TEMPLOW_MASK
 0x10000000u

	)

6547 
	#CCM_ANALOG_MISC1_CLR_IRQ_TEMPLOW_SHIFT
 28

	)

6548 
	#CCM_ANALOG_MISC1_CLR_IRQ_TEMPHIGH_MASK
 0x20000000u

	)

6549 
	#CCM_ANALOG_MISC1_CLR_IRQ_TEMPHIGH_SHIFT
 29

	)

6550 
	#CCM_ANALOG_MISC1_CLR_IRQ_ANA_BO_MASK
 0x40000000u

	)

6551 
	#CCM_ANALOG_MISC1_CLR_IRQ_ANA_BO_SHIFT
 30

	)

6552 
	#CCM_ANALOG_MISC1_CLR_IRQ_DIG_BO_MASK
 0x80000000u

	)

6553 
	#CCM_ANALOG_MISC1_CLR_IRQ_DIG_BO_SHIFT
 31

	)

6555 
	#CCM_ANALOG_MISC1_TOG_LVDS1_CLK_SEL_MASK
 0x1Fu

	)

6556 
	#CCM_ANALOG_MISC1_TOG_LVDS1_CLK_SEL_SHIFT
 0

	)

6557 
	#CCM_ANALOG_MISC1_TOG_LVDS1_CLK_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC1_TOG_LVDS1_CLK_SEL_SHIFT
))&
CCM_ANALOG_MISC1_TOG_LVDS1_CLK_SEL_MASK
)

	)

6558 
	#CCM_ANALOG_MISC1_TOG_LVDS2_CLK_SEL_MASK
 0x3E0u

	)

6559 
	#CCM_ANALOG_MISC1_TOG_LVDS2_CLK_SEL_SHIFT
 5

	)

6560 
	#CCM_ANALOG_MISC1_TOG_LVDS2_CLK_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC1_TOG_LVDS2_CLK_SEL_SHIFT
))&
CCM_ANALOG_MISC1_TOG_LVDS2_CLK_SEL_MASK
)

	)

6561 
	#CCM_ANALOG_MISC1_TOG_LVDSCLK1_OBEN_MASK
 0x400u

	)

6562 
	#CCM_ANALOG_MISC1_TOG_LVDSCLK1_OBEN_SHIFT
 10

	)

6563 
	#CCM_ANALOG_MISC1_TOG_LVDSCLK2_OBEN_MASK
 0x800u

	)

6564 
	#CCM_ANALOG_MISC1_TOG_LVDSCLK2_OBEN_SHIFT
 11

	)

6565 
	#CCM_ANALOG_MISC1_TOG_LVDSCLK1_IBEN_MASK
 0x1000u

	)

6566 
	#CCM_ANALOG_MISC1_TOG_LVDSCLK1_IBEN_SHIFT
 12

	)

6567 
	#CCM_ANALOG_MISC1_TOG_LVDSCLK2_IBEN_MASK
 0x2000u

	)

6568 
	#CCM_ANALOG_MISC1_TOG_LVDSCLK2_IBEN_SHIFT
 13

	)

6569 
	#CCM_ANALOG_MISC1_TOG_PFD_480_AUTOGATE_EN_MASK
 0x10000u

	)

6570 
	#CCM_ANALOG_MISC1_TOG_PFD_480_AUTOGATE_EN_SHIFT
 16

	)

6571 
	#CCM_ANALOG_MISC1_TOG_PFD_528_AUTOGATE_EN_MASK
 0x20000u

	)

6572 
	#CCM_ANALOG_MISC1_TOG_PFD_528_AUTOGATE_EN_SHIFT
 17

	)

6573 
	#CCM_ANALOG_MISC1_TOG_IRQ_TEMPPANIC_MASK
 0x8000000u

	)

6574 
	#CCM_ANALOG_MISC1_TOG_IRQ_TEMPPANIC_SHIFT
 27

	)

6575 
	#CCM_ANALOG_MISC1_TOG_IRQ_TEMPLOW_MASK
 0x10000000u

	)

6576 
	#CCM_ANALOG_MISC1_TOG_IRQ_TEMPLOW_SHIFT
 28

	)

6577 
	#CCM_ANALOG_MISC1_TOG_IRQ_TEMPHIGH_MASK
 0x20000000u

	)

6578 
	#CCM_ANALOG_MISC1_TOG_IRQ_TEMPHIGH_SHIFT
 29

	)

6579 
	#CCM_ANALOG_MISC1_TOG_IRQ_ANA_BO_MASK
 0x40000000u

	)

6580 
	#CCM_ANALOG_MISC1_TOG_IRQ_ANA_BO_SHIFT
 30

	)

6581 
	#CCM_ANALOG_MISC1_TOG_IRQ_DIG_BO_MASK
 0x80000000u

	)

6582 
	#CCM_ANALOG_MISC1_TOG_IRQ_DIG_BO_SHIFT
 31

	)

6584 
	#CCM_ANALOG_MISC2_REG0_BO_OFFSET_MASK
 0x7u

	)

6585 
	#CCM_ANALOG_MISC2_REG0_BO_OFFSET_SHIFT
 0

	)

6586 
	#CCM_ANALOG_MISC2_REG0_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_REG0_BO_OFFSET_SHIFT
))&
CCM_ANALOG_MISC2_REG0_BO_OFFSET_MASK
)

	)

6587 
	#CCM_ANALOG_MISC2_REG0_BO_STATUS_MASK
 0x8u

	)

6588 
	#CCM_ANALOG_MISC2_REG0_BO_STATUS_SHIFT
 3

	)

6589 
	#CCM_ANALOG_MISC2_REG0_ENABLE_BO_MASK
 0x20u

	)

6590 
	#CCM_ANALOG_MISC2_REG0_ENABLE_BO_SHIFT
 5

	)

6591 
	#CCM_ANALOG_MISC2_PLL3_dißbÀ_MASK
 0x80u

	)

6592 
	#CCM_ANALOG_MISC2_PLL3_dißbÀ_SHIFT
 7

	)

6593 
	#CCM_ANALOG_MISC2_REG1_BO_OFFSET_MASK
 0x700u

	)

6594 
	#CCM_ANALOG_MISC2_REG1_BO_OFFSET_SHIFT
 8

	)

6595 
	#CCM_ANALOG_MISC2_REG1_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_REG1_BO_OFFSET_SHIFT
))&
CCM_ANALOG_MISC2_REG1_BO_OFFSET_MASK
)

	)

6596 
	#CCM_ANALOG_MISC2_REG1_BO_STATUS_MASK
 0x800u

	)

6597 
	#CCM_ANALOG_MISC2_REG1_BO_STATUS_SHIFT
 11

	)

6598 
	#CCM_ANALOG_MISC2_REG1_ENABLE_BO_MASK
 0x2000u

	)

6599 
	#CCM_ANALOG_MISC2_REG1_ENABLE_BO_SHIFT
 13

	)

6600 
	#CCM_ANALOG_MISC2_AUDIO_DIV_LSB_MASK
 0x8000u

	)

6601 
	#CCM_ANALOG_MISC2_AUDIO_DIV_LSB_SHIFT
 15

	)

6602 
	#CCM_ANALOG_MISC2_REG2_BO_OFFSET_MASK
 0x70000u

	)

6603 
	#CCM_ANALOG_MISC2_REG2_BO_OFFSET_SHIFT
 16

	)

6604 
	#CCM_ANALOG_MISC2_REG2_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_REG2_BO_OFFSET_SHIFT
))&
CCM_ANALOG_MISC2_REG2_BO_OFFSET_MASK
)

	)

6605 
	#CCM_ANALOG_MISC2_REG2_BO_STATUS_MASK
 0x80000u

	)

6606 
	#CCM_ANALOG_MISC2_REG2_BO_STATUS_SHIFT
 19

	)

6607 
	#CCM_ANALOG_MISC2_REG2_ENABLE_BO_MASK
 0x200000u

	)

6608 
	#CCM_ANALOG_MISC2_REG2_ENABLE_BO_SHIFT
 21

	)

6609 
	#CCM_ANALOG_MISC2_REG2_OK_MASK
 0x400000u

	)

6610 
	#CCM_ANALOG_MISC2_REG2_OK_SHIFT
 22

	)

6611 
	#CCM_ANALOG_MISC2_AUDIO_DIV_MSB_MASK
 0x800000u

	)

6612 
	#CCM_ANALOG_MISC2_AUDIO_DIV_MSB_SHIFT
 23

	)

6613 
	#CCM_ANALOG_MISC2_REG0_STEP_TIME_MASK
 0x3000000u

	)

6614 
	#CCM_ANALOG_MISC2_REG0_STEP_TIME_SHIFT
 24

	)

6615 
	#CCM_ANALOG_MISC2_REG0_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_REG0_STEP_TIME_SHIFT
))&
CCM_ANALOG_MISC2_REG0_STEP_TIME_MASK
)

	)

6616 
	#CCM_ANALOG_MISC2_REG1_STEP_TIME_MASK
 0xC000000u

	)

6617 
	#CCM_ANALOG_MISC2_REG1_STEP_TIME_SHIFT
 26

	)

6618 
	#CCM_ANALOG_MISC2_REG1_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_REG1_STEP_TIME_SHIFT
))&
CCM_ANALOG_MISC2_REG1_STEP_TIME_MASK
)

	)

6619 
	#CCM_ANALOG_MISC2_REG2_STEP_TIME_MASK
 0x30000000u

	)

6620 
	#CCM_ANALOG_MISC2_REG2_STEP_TIME_SHIFT
 28

	)

6621 
	#CCM_ANALOG_MISC2_REG2_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_REG2_STEP_TIME_SHIFT
))&
CCM_ANALOG_MISC2_REG2_STEP_TIME_MASK
)

	)

6622 
	#CCM_ANALOG_MISC2_VIDEO_DIV_MASK
 0xC0000000u

	)

6623 
	#CCM_ANALOG_MISC2_VIDEO_DIV_SHIFT
 30

	)

6624 
	#CCM_ANALOG_MISC2_VIDEO_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_VIDEO_DIV_SHIFT
))&
CCM_ANALOG_MISC2_VIDEO_DIV_MASK
)

	)

6626 
	#CCM_ANALOG_MISC2_SET_REG0_BO_OFFSET_MASK
 0x7u

	)

6627 
	#CCM_ANALOG_MISC2_SET_REG0_BO_OFFSET_SHIFT
 0

	)

6628 
	#CCM_ANALOG_MISC2_SET_REG0_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_SET_REG0_BO_OFFSET_SHIFT
))&
CCM_ANALOG_MISC2_SET_REG0_BO_OFFSET_MASK
)

	)

6629 
	#CCM_ANALOG_MISC2_SET_REG0_BO_STATUS_MASK
 0x8u

	)

6630 
	#CCM_ANALOG_MISC2_SET_REG0_BO_STATUS_SHIFT
 3

	)

6631 
	#CCM_ANALOG_MISC2_SET_REG0_ENABLE_BO_MASK
 0x20u

	)

6632 
	#CCM_ANALOG_MISC2_SET_REG0_ENABLE_BO_SHIFT
 5

	)

6633 
	#CCM_ANALOG_MISC2_SET_PLL3_dißbÀ_MASK
 0x80u

	)

6634 
	#CCM_ANALOG_MISC2_SET_PLL3_dißbÀ_SHIFT
 7

	)

6635 
	#CCM_ANALOG_MISC2_SET_REG1_BO_OFFSET_MASK
 0x700u

	)

6636 
	#CCM_ANALOG_MISC2_SET_REG1_BO_OFFSET_SHIFT
 8

	)

6637 
	#CCM_ANALOG_MISC2_SET_REG1_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_SET_REG1_BO_OFFSET_SHIFT
))&
CCM_ANALOG_MISC2_SET_REG1_BO_OFFSET_MASK
)

	)

6638 
	#CCM_ANALOG_MISC2_SET_REG1_BO_STATUS_MASK
 0x800u

	)

6639 
	#CCM_ANALOG_MISC2_SET_REG1_BO_STATUS_SHIFT
 11

	)

6640 
	#CCM_ANALOG_MISC2_SET_REG1_ENABLE_BO_MASK
 0x2000u

	)

6641 
	#CCM_ANALOG_MISC2_SET_REG1_ENABLE_BO_SHIFT
 13

	)

6642 
	#CCM_ANALOG_MISC2_SET_AUDIO_DIV_LSB_MASK
 0x8000u

	)

6643 
	#CCM_ANALOG_MISC2_SET_AUDIO_DIV_LSB_SHIFT
 15

	)

6644 
	#CCM_ANALOG_MISC2_SET_REG2_BO_OFFSET_MASK
 0x70000u

	)

6645 
	#CCM_ANALOG_MISC2_SET_REG2_BO_OFFSET_SHIFT
 16

	)

6646 
	#CCM_ANALOG_MISC2_SET_REG2_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_SET_REG2_BO_OFFSET_SHIFT
))&
CCM_ANALOG_MISC2_SET_REG2_BO_OFFSET_MASK
)

	)

6647 
	#CCM_ANALOG_MISC2_SET_REG2_BO_STATUS_MASK
 0x80000u

	)

6648 
	#CCM_ANALOG_MISC2_SET_REG2_BO_STATUS_SHIFT
 19

	)

6649 
	#CCM_ANALOG_MISC2_SET_REG2_ENABLE_BO_MASK
 0x200000u

	)

6650 
	#CCM_ANALOG_MISC2_SET_REG2_ENABLE_BO_SHIFT
 21

	)

6651 
	#CCM_ANALOG_MISC2_SET_REG2_OK_MASK
 0x400000u

	)

6652 
	#CCM_ANALOG_MISC2_SET_REG2_OK_SHIFT
 22

	)

6653 
	#CCM_ANALOG_MISC2_SET_AUDIO_DIV_MSB_MASK
 0x800000u

	)

6654 
	#CCM_ANALOG_MISC2_SET_AUDIO_DIV_MSB_SHIFT
 23

	)

6655 
	#CCM_ANALOG_MISC2_SET_REG0_STEP_TIME_MASK
 0x3000000u

	)

6656 
	#CCM_ANALOG_MISC2_SET_REG0_STEP_TIME_SHIFT
 24

	)

6657 
	#CCM_ANALOG_MISC2_SET_REG0_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_SET_REG0_STEP_TIME_SHIFT
))&
CCM_ANALOG_MISC2_SET_REG0_STEP_TIME_MASK
)

	)

6658 
	#CCM_ANALOG_MISC2_SET_REG1_STEP_TIME_MASK
 0xC000000u

	)

6659 
	#CCM_ANALOG_MISC2_SET_REG1_STEP_TIME_SHIFT
 26

	)

6660 
	#CCM_ANALOG_MISC2_SET_REG1_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_SET_REG1_STEP_TIME_SHIFT
))&
CCM_ANALOG_MISC2_SET_REG1_STEP_TIME_MASK
)

	)

6661 
	#CCM_ANALOG_MISC2_SET_REG2_STEP_TIME_MASK
 0x30000000u

	)

6662 
	#CCM_ANALOG_MISC2_SET_REG2_STEP_TIME_SHIFT
 28

	)

6663 
	#CCM_ANALOG_MISC2_SET_REG2_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_SET_REG2_STEP_TIME_SHIFT
))&
CCM_ANALOG_MISC2_SET_REG2_STEP_TIME_MASK
)

	)

6664 
	#CCM_ANALOG_MISC2_SET_VIDEO_DIV_MASK
 0xC0000000u

	)

6665 
	#CCM_ANALOG_MISC2_SET_VIDEO_DIV_SHIFT
 30

	)

6666 
	#CCM_ANALOG_MISC2_SET_VIDEO_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_SET_VIDEO_DIV_SHIFT
))&
CCM_ANALOG_MISC2_SET_VIDEO_DIV_MASK
)

	)

6668 
	#CCM_ANALOG_MISC2_CLR_REG0_BO_OFFSET_MASK
 0x7u

	)

6669 
	#CCM_ANALOG_MISC2_CLR_REG0_BO_OFFSET_SHIFT
 0

	)

6670 
	#CCM_ANALOG_MISC2_CLR_REG0_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_CLR_REG0_BO_OFFSET_SHIFT
))&
CCM_ANALOG_MISC2_CLR_REG0_BO_OFFSET_MASK
)

	)

6671 
	#CCM_ANALOG_MISC2_CLR_REG0_BO_STATUS_MASK
 0x8u

	)

6672 
	#CCM_ANALOG_MISC2_CLR_REG0_BO_STATUS_SHIFT
 3

	)

6673 
	#CCM_ANALOG_MISC2_CLR_REG0_ENABLE_BO_MASK
 0x20u

	)

6674 
	#CCM_ANALOG_MISC2_CLR_REG0_ENABLE_BO_SHIFT
 5

	)

6675 
	#CCM_ANALOG_MISC2_CLR_PLL3_dißbÀ_MASK
 0x80u

	)

6676 
	#CCM_ANALOG_MISC2_CLR_PLL3_dißbÀ_SHIFT
 7

	)

6677 
	#CCM_ANALOG_MISC2_CLR_REG1_BO_OFFSET_MASK
 0x700u

	)

6678 
	#CCM_ANALOG_MISC2_CLR_REG1_BO_OFFSET_SHIFT
 8

	)

6679 
	#CCM_ANALOG_MISC2_CLR_REG1_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_CLR_REG1_BO_OFFSET_SHIFT
))&
CCM_ANALOG_MISC2_CLR_REG1_BO_OFFSET_MASK
)

	)

6680 
	#CCM_ANALOG_MISC2_CLR_REG1_BO_STATUS_MASK
 0x800u

	)

6681 
	#CCM_ANALOG_MISC2_CLR_REG1_BO_STATUS_SHIFT
 11

	)

6682 
	#CCM_ANALOG_MISC2_CLR_REG1_ENABLE_BO_MASK
 0x2000u

	)

6683 
	#CCM_ANALOG_MISC2_CLR_REG1_ENABLE_BO_SHIFT
 13

	)

6684 
	#CCM_ANALOG_MISC2_CLR_AUDIO_DIV_LSB_MASK
 0x8000u

	)

6685 
	#CCM_ANALOG_MISC2_CLR_AUDIO_DIV_LSB_SHIFT
 15

	)

6686 
	#CCM_ANALOG_MISC2_CLR_REG2_BO_OFFSET_MASK
 0x70000u

	)

6687 
	#CCM_ANALOG_MISC2_CLR_REG2_BO_OFFSET_SHIFT
 16

	)

6688 
	#CCM_ANALOG_MISC2_CLR_REG2_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_CLR_REG2_BO_OFFSET_SHIFT
))&
CCM_ANALOG_MISC2_CLR_REG2_BO_OFFSET_MASK
)

	)

6689 
	#CCM_ANALOG_MISC2_CLR_REG2_BO_STATUS_MASK
 0x80000u

	)

6690 
	#CCM_ANALOG_MISC2_CLR_REG2_BO_STATUS_SHIFT
 19

	)

6691 
	#CCM_ANALOG_MISC2_CLR_REG2_ENABLE_BO_MASK
 0x200000u

	)

6692 
	#CCM_ANALOG_MISC2_CLR_REG2_ENABLE_BO_SHIFT
 21

	)

6693 
	#CCM_ANALOG_MISC2_CLR_REG2_OK_MASK
 0x400000u

	)

6694 
	#CCM_ANALOG_MISC2_CLR_REG2_OK_SHIFT
 22

	)

6695 
	#CCM_ANALOG_MISC2_CLR_AUDIO_DIV_MSB_MASK
 0x800000u

	)

6696 
	#CCM_ANALOG_MISC2_CLR_AUDIO_DIV_MSB_SHIFT
 23

	)

6697 
	#CCM_ANALOG_MISC2_CLR_REG0_STEP_TIME_MASK
 0x3000000u

	)

6698 
	#CCM_ANALOG_MISC2_CLR_REG0_STEP_TIME_SHIFT
 24

	)

6699 
	#CCM_ANALOG_MISC2_CLR_REG0_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_CLR_REG0_STEP_TIME_SHIFT
))&
CCM_ANALOG_MISC2_CLR_REG0_STEP_TIME_MASK
)

	)

6700 
	#CCM_ANALOG_MISC2_CLR_REG1_STEP_TIME_MASK
 0xC000000u

	)

6701 
	#CCM_ANALOG_MISC2_CLR_REG1_STEP_TIME_SHIFT
 26

	)

6702 
	#CCM_ANALOG_MISC2_CLR_REG1_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_CLR_REG1_STEP_TIME_SHIFT
))&
CCM_ANALOG_MISC2_CLR_REG1_STEP_TIME_MASK
)

	)

6703 
	#CCM_ANALOG_MISC2_CLR_REG2_STEP_TIME_MASK
 0x30000000u

	)

6704 
	#CCM_ANALOG_MISC2_CLR_REG2_STEP_TIME_SHIFT
 28

	)

6705 
	#CCM_ANALOG_MISC2_CLR_REG2_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_CLR_REG2_STEP_TIME_SHIFT
))&
CCM_ANALOG_MISC2_CLR_REG2_STEP_TIME_MASK
)

	)

6706 
	#CCM_ANALOG_MISC2_CLR_VIDEO_DIV_MASK
 0xC0000000u

	)

6707 
	#CCM_ANALOG_MISC2_CLR_VIDEO_DIV_SHIFT
 30

	)

6708 
	#CCM_ANALOG_MISC2_CLR_VIDEO_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_CLR_VIDEO_DIV_SHIFT
))&
CCM_ANALOG_MISC2_CLR_VIDEO_DIV_MASK
)

	)

6710 
	#CCM_ANALOG_MISC2_TOG_REG0_BO_OFFSET_MASK
 0x7u

	)

6711 
	#CCM_ANALOG_MISC2_TOG_REG0_BO_OFFSET_SHIFT
 0

	)

6712 
	#CCM_ANALOG_MISC2_TOG_REG0_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_TOG_REG0_BO_OFFSET_SHIFT
))&
CCM_ANALOG_MISC2_TOG_REG0_BO_OFFSET_MASK
)

	)

6713 
	#CCM_ANALOG_MISC2_TOG_REG0_BO_STATUS_MASK
 0x8u

	)

6714 
	#CCM_ANALOG_MISC2_TOG_REG0_BO_STATUS_SHIFT
 3

	)

6715 
	#CCM_ANALOG_MISC2_TOG_REG0_ENABLE_BO_MASK
 0x20u

	)

6716 
	#CCM_ANALOG_MISC2_TOG_REG0_ENABLE_BO_SHIFT
 5

	)

6717 
	#CCM_ANALOG_MISC2_TOG_PLL3_dißbÀ_MASK
 0x80u

	)

6718 
	#CCM_ANALOG_MISC2_TOG_PLL3_dißbÀ_SHIFT
 7

	)

6719 
	#CCM_ANALOG_MISC2_TOG_REG1_BO_OFFSET_MASK
 0x700u

	)

6720 
	#CCM_ANALOG_MISC2_TOG_REG1_BO_OFFSET_SHIFT
 8

	)

6721 
	#CCM_ANALOG_MISC2_TOG_REG1_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_TOG_REG1_BO_OFFSET_SHIFT
))&
CCM_ANALOG_MISC2_TOG_REG1_BO_OFFSET_MASK
)

	)

6722 
	#CCM_ANALOG_MISC2_TOG_REG1_BO_STATUS_MASK
 0x800u

	)

6723 
	#CCM_ANALOG_MISC2_TOG_REG1_BO_STATUS_SHIFT
 11

	)

6724 
	#CCM_ANALOG_MISC2_TOG_REG1_ENABLE_BO_MASK
 0x2000u

	)

6725 
	#CCM_ANALOG_MISC2_TOG_REG1_ENABLE_BO_SHIFT
 13

	)

6726 
	#CCM_ANALOG_MISC2_TOG_AUDIO_DIV_LSB_MASK
 0x8000u

	)

6727 
	#CCM_ANALOG_MISC2_TOG_AUDIO_DIV_LSB_SHIFT
 15

	)

6728 
	#CCM_ANALOG_MISC2_TOG_REG2_BO_OFFSET_MASK
 0x70000u

	)

6729 
	#CCM_ANALOG_MISC2_TOG_REG2_BO_OFFSET_SHIFT
 16

	)

6730 
	#CCM_ANALOG_MISC2_TOG_REG2_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_TOG_REG2_BO_OFFSET_SHIFT
))&
CCM_ANALOG_MISC2_TOG_REG2_BO_OFFSET_MASK
)

	)

6731 
	#CCM_ANALOG_MISC2_TOG_REG2_BO_STATUS_MASK
 0x80000u

	)

6732 
	#CCM_ANALOG_MISC2_TOG_REG2_BO_STATUS_SHIFT
 19

	)

6733 
	#CCM_ANALOG_MISC2_TOG_REG2_ENABLE_BO_MASK
 0x200000u

	)

6734 
	#CCM_ANALOG_MISC2_TOG_REG2_ENABLE_BO_SHIFT
 21

	)

6735 
	#CCM_ANALOG_MISC2_TOG_REG2_OK_MASK
 0x400000u

	)

6736 
	#CCM_ANALOG_MISC2_TOG_REG2_OK_SHIFT
 22

	)

6737 
	#CCM_ANALOG_MISC2_TOG_AUDIO_DIV_MSB_MASK
 0x800000u

	)

6738 
	#CCM_ANALOG_MISC2_TOG_AUDIO_DIV_MSB_SHIFT
 23

	)

6739 
	#CCM_ANALOG_MISC2_TOG_REG0_STEP_TIME_MASK
 0x3000000u

	)

6740 
	#CCM_ANALOG_MISC2_TOG_REG0_STEP_TIME_SHIFT
 24

	)

6741 
	#CCM_ANALOG_MISC2_TOG_REG0_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_TOG_REG0_STEP_TIME_SHIFT
))&
CCM_ANALOG_MISC2_TOG_REG0_STEP_TIME_MASK
)

	)

6742 
	#CCM_ANALOG_MISC2_TOG_REG1_STEP_TIME_MASK
 0xC000000u

	)

6743 
	#CCM_ANALOG_MISC2_TOG_REG1_STEP_TIME_SHIFT
 26

	)

6744 
	#CCM_ANALOG_MISC2_TOG_REG1_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_TOG_REG1_STEP_TIME_SHIFT
))&
CCM_ANALOG_MISC2_TOG_REG1_STEP_TIME_MASK
)

	)

6745 
	#CCM_ANALOG_MISC2_TOG_REG2_STEP_TIME_MASK
 0x30000000u

	)

6746 
	#CCM_ANALOG_MISC2_TOG_REG2_STEP_TIME_SHIFT
 28

	)

6747 
	#CCM_ANALOG_MISC2_TOG_REG2_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_TOG_REG2_STEP_TIME_SHIFT
))&
CCM_ANALOG_MISC2_TOG_REG2_STEP_TIME_MASK
)

	)

6748 
	#CCM_ANALOG_MISC2_TOG_VIDEO_DIV_MASK
 0xC0000000u

	)

6749 
	#CCM_ANALOG_MISC2_TOG_VIDEO_DIV_SHIFT
 30

	)

6750 
	#CCM_ANALOG_MISC2_TOG_VIDEO_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CCM_ANALOG_MISC2_TOG_VIDEO_DIV_SHIFT
))&
CCM_ANALOG_MISC2_TOG_VIDEO_DIV_MASK
)

	)

6758 
	#CCM_ANALOG_BASE
 (0x420C8000u)

	)

6760 
	#CCM_ANALOG
 ((
CCM_ANALOG_Ty≥
 *)
CCM_ANALOG_BASE
)

	)

6761 
	#CCM_ANALOG_BASE_PTR
 (
CCM_ANALOG
)

	)

6763 
	#CCM_ANALOG_BASE_ADDRS
 { 
CCM_ANALOG_BASE
 }

	)

6765 
	#CCM_ANALOG_BASE_PTRS
 { 
CCM_ANALOG
 }

	)

6778 
	#CCM_ANALOG_PLL_ARM
 
	`CCM_ANALOG_PLL_ARM_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6779 
	#CCM_ANALOG_PLL_ARM_SET
 
	`CCM_ANALOG_PLL_ARM_SET_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6780 
	#CCM_ANALOG_PLL_ARM_CLR
 
	`CCM_ANALOG_PLL_ARM_CLR_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6781 
	#CCM_ANALOG_PLL_ARM_TOG
 
	`CCM_ANALOG_PLL_ARM_TOG_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6782 
	#CCM_ANALOG_PLL_USB1
 
	`CCM_ANALOG_PLL_USB1_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6783 
	#CCM_ANALOG_PLL_USB1_SET
 
	`CCM_ANALOG_PLL_USB1_SET_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6784 
	#CCM_ANALOG_PLL_USB1_CLR
 
	`CCM_ANALOG_PLL_USB1_CLR_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6785 
	#CCM_ANALOG_PLL_USB1_TOG
 
	`CCM_ANALOG_PLL_USB1_TOG_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6786 
	#CCM_ANALOG_PLL_USB2
 
	`CCM_ANALOG_PLL_USB2_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6787 
	#CCM_ANALOG_PLL_USB2_SET
 
	`CCM_ANALOG_PLL_USB2_SET_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6788 
	#CCM_ANALOG_PLL_USB2_CLR
 
	`CCM_ANALOG_PLL_USB2_CLR_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6789 
	#CCM_ANALOG_PLL_USB2_TOG
 
	`CCM_ANALOG_PLL_USB2_TOG_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6790 
	#CCM_ANALOG_PLL_SYS
 
	`CCM_ANALOG_PLL_SYS_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6791 
	#CCM_ANALOG_PLL_SYS_SET
 
	`CCM_ANALOG_PLL_SYS_SET_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6792 
	#CCM_ANALOG_PLL_SYS_CLR
 
	`CCM_ANALOG_PLL_SYS_CLR_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6793 
	#CCM_ANALOG_PLL_SYS_TOG
 
	`CCM_ANALOG_PLL_SYS_TOG_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6794 
	#CCM_ANALOG_PLL_SYS_SS
 
	`CCM_ANALOG_PLL_SYS_SS_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6795 
	#CCM_ANALOG_PLL_AUDIO
 
	`CCM_ANALOG_PLL_AUDIO_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6796 
	#CCM_ANALOG_PLL_AUDIO_SET
 
	`CCM_ANALOG_PLL_AUDIO_SET_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6797 
	#CCM_ANALOG_PLL_AUDIO_CLR
 
	`CCM_ANALOG_PLL_AUDIO_CLR_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6798 
	#CCM_ANALOG_PLL_AUDIO_TOG
 
	`CCM_ANALOG_PLL_AUDIO_TOG_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6799 
	#CCM_ANALOG_PLL_AUDIO_NUM
 
	`CCM_ANALOG_PLL_AUDIO_NUM_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6800 
	#CCM_ANALOG_PLL_AUDIO_DENOM
 
	`CCM_ANALOG_PLL_AUDIO_DENOM_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6801 
	#CCM_ANALOG_PLL_VIDEO
 
	`CCM_ANALOG_PLL_VIDEO_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6802 
	#CCM_ANALOG_PLL_VIDEO_SET
 
	`CCM_ANALOG_PLL_VIDEO_SET_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6803 
	#CCM_ANALOG_PLL_VIDEO_CLR
 
	`CCM_ANALOG_PLL_VIDEO_CLR_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6804 
	#CCM_ANALOG_PLL_VIDEO_TOG
 
	`CCM_ANALOG_PLL_VIDEO_TOG_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6805 
	#CCM_ANALOG_PLL_VIDEO_NUM
 
	`CCM_ANALOG_PLL_VIDEO_NUM_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6806 
	#CCM_ANALOG_PLL_VIDEO_DENOM
 
	`CCM_ANALOG_PLL_VIDEO_DENOM_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6807 
	#CCM_ANALOG_PLL_ENET
 
	`CCM_ANALOG_PLL_ENET_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6808 
	#CCM_ANALOG_PLL_ENET_SET
 
	`CCM_ANALOG_PLL_ENET_SET_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6809 
	#CCM_ANALOG_PLL_ENET_CLR
 
	`CCM_ANALOG_PLL_ENET_CLR_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6810 
	#CCM_ANALOG_PLL_ENET_TOG
 
	`CCM_ANALOG_PLL_ENET_TOG_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6811 
	#CCM_ANALOG_PFD_480
 
	`CCM_ANALOG_PFD_480_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6812 
	#CCM_ANALOG_PFD_480_SET
 
	`CCM_ANALOG_PFD_480_SET_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6813 
	#CCM_ANALOG_PFD_480_CLR
 
	`CCM_ANALOG_PFD_480_CLR_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6814 
	#CCM_ANALOG_PFD_480_TOG
 
	`CCM_ANALOG_PFD_480_TOG_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6815 
	#CCM_ANALOG_PFD_528
 
	`CCM_ANALOG_PFD_528_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6816 
	#CCM_ANALOG_PFD_528_SET
 
	`CCM_ANALOG_PFD_528_SET_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6817 
	#CCM_ANALOG_PFD_528_CLR
 
	`CCM_ANALOG_PFD_528_CLR_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6818 
	#CCM_ANALOG_PFD_528_TOG
 
	`CCM_ANALOG_PFD_528_TOG_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6819 
	#CCM_ANALOG_MISC0
 
	`CCM_ANALOG_MISC0_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6820 
	#CCM_ANALOG_MISC0_SET
 
	`CCM_ANALOG_MISC0_SET_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6821 
	#CCM_ANALOG_MISC0_CLR
 
	`CCM_ANALOG_MISC0_CLR_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6822 
	#CCM_ANALOG_MISC0_TOG
 
	`CCM_ANALOG_MISC0_TOG_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6823 
	#CCM_ANALOG_MISC1
 
	`CCM_ANALOG_MISC1_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6824 
	#CCM_ANALOG_MISC1_SET
 
	`CCM_ANALOG_MISC1_SET_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6825 
	#CCM_ANALOG_MISC1_CLR
 
	`CCM_ANALOG_MISC1_CLR_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6826 
	#CCM_ANALOG_MISC1_TOG
 
	`CCM_ANALOG_MISC1_TOG_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6827 
	#CCM_ANALOG_MISC2
 
	`CCM_ANALOG_MISC2_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6828 
	#CCM_ANALOG_MISC2_SET
 
	`CCM_ANALOG_MISC2_SET_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6829 
	#CCM_ANALOG_MISC2_CLR
 
	`CCM_ANALOG_MISC2_CLR_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6830 
	#CCM_ANALOG_MISC2_TOG
 
	`CCM_ANALOG_MISC2_TOG_REG
(
CCM_ANALOG_BASE_PTR
)

	)

6851 
__IO
 
uöt32_t
 
	mCSICR1
;

6852 
__IO
 
uöt32_t
 
	mCSICR2
;

6853 
__IO
 
uöt32_t
 
	mCSICR3
;

6854 
__I
 
uöt32_t
 
	mCSISTATFIFO
;

6855 
__I
 
uöt32_t
 
	mCSIRFIFO
;

6856 
__IO
 
uöt32_t
 
	mCSIRXCNT
;

6857 
__IO
 
uöt32_t
 
	mCSISR
;

6858 
uöt8_t
 
	mRESERVED_0
[4];

6859 
__IO
 
uöt32_t
 
	mCSIDMASA_STATFIFO
;

6860 
__IO
 
uöt32_t
 
	mCSIDMATS_STATFIFO
;

6861 
__IO
 
uöt32_t
 
	mCSIDMASA_FB1
;

6862 
__IO
 
uöt32_t
 
	mCSIDMASA_FB2
;

6863 
__IO
 
uöt32_t
 
	mCSIFBUF_PARA
;

6864 
__IO
 
uöt32_t
 
	mCSIIMAG_PARA
;

6865 
uöt8_t
 
	mRESERVED_1
[16];

6866 
__IO
 
uöt32_t
 
	mCSICR18
;

6867 
__IO
 
uöt32_t
 
	mCSICR19
;

6868 } 
	tCSI_Ty≥
, *
	tCSI_MemM≠På
;

6880 
	#CSI_CSICR1_REG
(
ba£
Ë((ba£)->
CSICR1
)

	)

6881 
	#CSI_CSICR2_REG
(
ba£
Ë((ba£)->
CSICR2
)

	)

6882 
	#CSI_CSICR3_REG
(
ba£
Ë((ba£)->
CSICR3
)

	)

6883 
	#CSI_CSISTATFIFO_REG
(
ba£
Ë((ba£)->
CSISTATFIFO
)

	)

6884 
	#CSI_CSIRFIFO_REG
(
ba£
Ë((ba£)->
CSIRFIFO
)

	)

6885 
	#CSI_CSIRXCNT_REG
(
ba£
Ë((ba£)->
CSIRXCNT
)

	)

6886 
	#CSI_CSISR_REG
(
ba£
Ë((ba£)->
CSISR
)

	)

6887 
	#CSI_CSIDMASA_STATFIFO_REG
(
ba£
Ë((ba£)->
CSIDMASA_STATFIFO
)

	)

6888 
	#CSI_CSIDMATS_STATFIFO_REG
(
ba£
Ë((ba£)->
CSIDMATS_STATFIFO
)

	)

6889 
	#CSI_CSIDMASA_FB1_REG
(
ba£
Ë((ba£)->
CSIDMASA_FB1
)

	)

6890 
	#CSI_CSIDMASA_FB2_REG
(
ba£
Ë((ba£)->
CSIDMASA_FB2
)

	)

6891 
	#CSI_CSIFBUF_PARA_REG
(
ba£
Ë((ba£)->
CSIFBUF_PARA
)

	)

6892 
	#CSI_CSIIMAG_PARA_REG
(
ba£
Ë((ba£)->
CSIIMAG_PARA
)

	)

6893 
	#CSI_CSICR18_REG
(
ba£
Ë((ba£)->
CSICR18
)

	)

6894 
	#CSI_CSICR19_REG
(
ba£
Ë((ba£)->
CSICR19
)

	)

6910 
	#CSI_CSICR1_PIXEL_BIT_MASK
 0x1u

	)

6911 
	#CSI_CSICR1_PIXEL_BIT_SHIFT
 0

	)

6912 
	#CSI_CSICR1_REDGE_MASK
 0x2u

	)

6913 
	#CSI_CSICR1_REDGE_SHIFT
 1

	)

6914 
	#CSI_CSICR1_INV_PCLK_MASK
 0x4u

	)

6915 
	#CSI_CSICR1_INV_PCLK_SHIFT
 2

	)

6916 
	#CSI_CSICR1_INV_DATA_MASK
 0x8u

	)

6917 
	#CSI_CSICR1_INV_DATA_SHIFT
 3

	)

6918 
	#CSI_CSICR1_GCLK_MODE_MASK
 0x10u

	)

6919 
	#CSI_CSICR1_GCLK_MODE_SHIFT
 4

	)

6920 
	#CSI_CSICR1_CLR_RXFIFO_MASK
 0x20u

	)

6921 
	#CSI_CSICR1_CLR_RXFIFO_SHIFT
 5

	)

6922 
	#CSI_CSICR1_CLR_STATFIFO_MASK
 0x40u

	)

6923 
	#CSI_CSICR1_CLR_STATFIFO_SHIFT
 6

	)

6924 
	#CSI_CSICR1_PACK_DIR_MASK
 0x80u

	)

6925 
	#CSI_CSICR1_PACK_DIR_SHIFT
 7

	)

6926 
	#CSI_CSICR1_FCC_MASK
 0x100u

	)

6927 
	#CSI_CSICR1_FCC_SHIFT
 8

	)

6928 
	#CSI_CSICR1_CCIR_EN_MASK
 0x400u

	)

6929 
	#CSI_CSICR1_CCIR_EN_SHIFT
 10

	)

6930 
	#CSI_CSICR1_HSYNC_POL_MASK
 0x800u

	)

6931 
	#CSI_CSICR1_HSYNC_POL_SHIFT
 11

	)

6932 
	#CSI_CSICR1_SOF_INTEN_MASK
 0x10000u

	)

6933 
	#CSI_CSICR1_SOF_INTEN_SHIFT
 16

	)

6934 
	#CSI_CSICR1_SOF_POL_MASK
 0x20000u

	)

6935 
	#CSI_CSICR1_SOF_POL_SHIFT
 17

	)

6936 
	#CSI_CSICR1_RXFF_INTEN_MASK
 0x40000u

	)

6937 
	#CSI_CSICR1_RXFF_INTEN_SHIFT
 18

	)

6938 
	#CSI_CSICR1_FB1_DMA_DONE_INTEN_MASK
 0x80000u

	)

6939 
	#CSI_CSICR1_FB1_DMA_DONE_INTEN_SHIFT
 19

	)

6940 
	#CSI_CSICR1_FB2_DMA_DONE_INTEN_MASK
 0x100000u

	)

6941 
	#CSI_CSICR1_FB2_DMA_DONE_INTEN_SHIFT
 20

	)

6942 
	#CSI_CSICR1_STATFF_INTEN_MASK
 0x200000u

	)

6943 
	#CSI_CSICR1_STATFF_INTEN_SHIFT
 21

	)

6944 
	#CSI_CSICR1_SFF_DMA_DONE_INTEN_MASK
 0x400000u

	)

6945 
	#CSI_CSICR1_SFF_DMA_DONE_INTEN_SHIFT
 22

	)

6946 
	#CSI_CSICR1_RF_OR_INTEN_MASK
 0x1000000u

	)

6947 
	#CSI_CSICR1_RF_OR_INTEN_SHIFT
 24

	)

6948 
	#CSI_CSICR1_SF_OR_INTEN_MASK
 0x2000000u

	)

6949 
	#CSI_CSICR1_SF_OR_INTEN_SHIFT
 25

	)

6950 
	#CSI_CSICR1_COF_INT_EN_MASK
 0x4000000u

	)

6951 
	#CSI_CSICR1_COF_INT_EN_SHIFT
 26

	)

6952 
	#CSI_CSICR1_VIDEO_MODE_MASK
 0x8000000u

	)

6953 
	#CSI_CSICR1_VIDEO_MODE_SHIFT
 27

	)

6954 
	#CSI_CSICR1_PrP_IF_EN_MASK
 0x10000000u

	)

6955 
	#CSI_CSICR1_PrP_IF_EN_SHIFT
 28

	)

6956 
	#CSI_CSICR1_EOF_INT_EN_MASK
 0x20000000u

	)

6957 
	#CSI_CSICR1_EOF_INT_EN_SHIFT
 29

	)

6958 
	#CSI_CSICR1_EXT_VSYNC_MASK
 0x40000000u

	)

6959 
	#CSI_CSICR1_EXT_VSYNC_SHIFT
 30

	)

6960 
	#CSI_CSICR1_SWAP16_EN_MASK
 0x80000000u

	)

6961 
	#CSI_CSICR1_SWAP16_EN_SHIFT
 31

	)

6963 
	#CSI_CSICR2_HSC_MASK
 0xFFu

	)

6964 
	#CSI_CSICR2_HSC_SHIFT
 0

	)

6965 
	#CSI_CSICR2_HSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSICR2_HSC_SHIFT
))&
CSI_CSICR2_HSC_MASK
)

	)

6966 
	#CSI_CSICR2_VSC_MASK
 0xFF00u

	)

6967 
	#CSI_CSICR2_VSC_SHIFT
 8

	)

6968 
	#CSI_CSICR2_VSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSICR2_VSC_SHIFT
))&
CSI_CSICR2_VSC_MASK
)

	)

6969 
	#CSI_CSICR2_LVRM_MASK
 0x70000u

	)

6970 
	#CSI_CSICR2_LVRM_SHIFT
 16

	)

6971 
	#CSI_CSICR2_LVRM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSICR2_LVRM_SHIFT
))&
CSI_CSICR2_LVRM_MASK
)

	)

6972 
	#CSI_CSICR2_BTS_MASK
 0x180000u

	)

6973 
	#CSI_CSICR2_BTS_SHIFT
 19

	)

6974 
	#CSI_CSICR2_BTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSICR2_BTS_SHIFT
))&
CSI_CSICR2_BTS_MASK
)

	)

6975 
	#CSI_CSICR2_SCE_MASK
 0x800000u

	)

6976 
	#CSI_CSICR2_SCE_SHIFT
 23

	)

6977 
	#CSI_CSICR2_AFS_MASK
 0x3000000u

	)

6978 
	#CSI_CSICR2_AFS_SHIFT
 24

	)

6979 
	#CSI_CSICR2_AFS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSICR2_AFS_SHIFT
))&
CSI_CSICR2_AFS_MASK
)

	)

6980 
	#CSI_CSICR2_DRM_MASK
 0x4000000u

	)

6981 
	#CSI_CSICR2_DRM_SHIFT
 26

	)

6982 
	#CSI_CSICR2_DMA_BURST_TYPE_SFF_MASK
 0x30000000u

	)

6983 
	#CSI_CSICR2_DMA_BURST_TYPE_SFF_SHIFT
 28

	)

6984 
	#CSI_CSICR2_DMA_BURST_TYPE_SFF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSICR2_DMA_BURST_TYPE_SFF_SHIFT
))&
CSI_CSICR2_DMA_BURST_TYPE_SFF_MASK
)

	)

6985 
	#CSI_CSICR2_DMA_BURST_TYPE_RFF_MASK
 0xC0000000u

	)

6986 
	#CSI_CSICR2_DMA_BURST_TYPE_RFF_SHIFT
 30

	)

6987 
	#CSI_CSICR2_DMA_BURST_TYPE_RFF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSICR2_DMA_BURST_TYPE_RFF_SHIFT
))&
CSI_CSICR2_DMA_BURST_TYPE_RFF_MASK
)

	)

6989 
	#CSI_CSICR3_ECC_AUTO_EN_MASK
 0x1u

	)

6990 
	#CSI_CSICR3_ECC_AUTO_EN_SHIFT
 0

	)

6991 
	#CSI_CSICR3_ECC_INT_EN_MASK
 0x2u

	)

6992 
	#CSI_CSICR3_ECC_INT_EN_SHIFT
 1

	)

6993 
	#CSI_CSICR3_ZERO_PACK_EN_MASK
 0x4u

	)

6994 
	#CSI_CSICR3_ZERO_PACK_EN_SHIFT
 2

	)

6995 
	#CSI_CSICR3_TWO_8BIT_SENSOR_MASK
 0x8u

	)

6996 
	#CSI_CSICR3_TWO_8BIT_SENSOR_SHIFT
 3

	)

6997 
	#CSI_CSICR3_RxFF_LEVEL_MASK
 0x70u

	)

6998 
	#CSI_CSICR3_RxFF_LEVEL_SHIFT
 4

	)

6999 
	#CSI_CSICR3_RxFF_LEVEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSICR3_RxFF_LEVEL_SHIFT
))&
CSI_CSICR3_RxFF_LEVEL_MASK
)

	)

7000 
	#CSI_CSICR3_HRESP_ERR_EN_MASK
 0x80u

	)

7001 
	#CSI_CSICR3_HRESP_ERR_EN_SHIFT
 7

	)

7002 
	#CSI_CSICR3_STATFF_LEVEL_MASK
 0x700u

	)

7003 
	#CSI_CSICR3_STATFF_LEVEL_SHIFT
 8

	)

7004 
	#CSI_CSICR3_STATFF_LEVEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSICR3_STATFF_LEVEL_SHIFT
))&
CSI_CSICR3_STATFF_LEVEL_MASK
)

	)

7005 
	#CSI_CSICR3_DMA_REQ_EN_SFF_MASK
 0x800u

	)

7006 
	#CSI_CSICR3_DMA_REQ_EN_SFF_SHIFT
 11

	)

7007 
	#CSI_CSICR3_DMA_REQ_EN_RFF_MASK
 0x1000u

	)

7008 
	#CSI_CSICR3_DMA_REQ_EN_RFF_SHIFT
 12

	)

7009 
	#CSI_CSICR3_DMA_REFLASH_SFF_MASK
 0x2000u

	)

7010 
	#CSI_CSICR3_DMA_REFLASH_SFF_SHIFT
 13

	)

7011 
	#CSI_CSICR3_DMA_REFLASH_RFF_MASK
 0x4000u

	)

7012 
	#CSI_CSICR3_DMA_REFLASH_RFF_SHIFT
 14

	)

7013 
	#CSI_CSICR3_FRMCNT_RST_MASK
 0x8000u

	)

7014 
	#CSI_CSICR3_FRMCNT_RST_SHIFT
 15

	)

7015 
	#CSI_CSICR3_FRMCNT_MASK
 0xFFFF0000u

	)

7016 
	#CSI_CSICR3_FRMCNT_SHIFT
 16

	)

7017 
	#CSI_CSICR3_FRMCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSICR3_FRMCNT_SHIFT
))&
CSI_CSICR3_FRMCNT_MASK
)

	)

7019 
	#CSI_CSISTATFIFO_STAT_MASK
 0xFFFFFFFFu

	)

7020 
	#CSI_CSISTATFIFO_STAT_SHIFT
 0

	)

7021 
	#CSI_CSISTATFIFO_STAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSISTATFIFO_STAT_SHIFT
))&
CSI_CSISTATFIFO_STAT_MASK
)

	)

7023 
	#CSI_CSIRFIFO_IMAGE_MASK
 0xFFFFFFFFu

	)

7024 
	#CSI_CSIRFIFO_IMAGE_SHIFT
 0

	)

7025 
	#CSI_CSIRFIFO_IMAGE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSIRFIFO_IMAGE_SHIFT
))&
CSI_CSIRFIFO_IMAGE_MASK
)

	)

7027 
	#CSI_CSIRXCNT_RXCNT_MASK
 0x3FFFFFu

	)

7028 
	#CSI_CSIRXCNT_RXCNT_SHIFT
 0

	)

7029 
	#CSI_CSIRXCNT_RXCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSIRXCNT_RXCNT_SHIFT
))&
CSI_CSIRXCNT_RXCNT_MASK
)

	)

7031 
	#CSI_CSISR_DRDY_MASK
 0x1u

	)

7032 
	#CSI_CSISR_DRDY_SHIFT
 0

	)

7033 
	#CSI_CSISR_ECC_INT_MASK
 0x2u

	)

7034 
	#CSI_CSISR_ECC_INT_SHIFT
 1

	)

7035 
	#CSI_CSISR_HRESP_ERR_INT_MASK
 0x80u

	)

7036 
	#CSI_CSISR_HRESP_ERR_INT_SHIFT
 7

	)

7037 
	#CSI_CSISR_COF_INT_MASK
 0x2000u

	)

7038 
	#CSI_CSISR_COF_INT_SHIFT
 13

	)

7039 
	#CSI_CSISR_F1_INT_MASK
 0x4000u

	)

7040 
	#CSI_CSISR_F1_INT_SHIFT
 14

	)

7041 
	#CSI_CSISR_F2_INT_MASK
 0x8000u

	)

7042 
	#CSI_CSISR_F2_INT_SHIFT
 15

	)

7043 
	#CSI_CSISR_SOF_INT_MASK
 0x10000u

	)

7044 
	#CSI_CSISR_SOF_INT_SHIFT
 16

	)

7045 
	#CSI_CSISR_EOF_INT_MASK
 0x20000u

	)

7046 
	#CSI_CSISR_EOF_INT_SHIFT
 17

	)

7047 
	#CSI_CSISR_RxFF_INT_MASK
 0x40000u

	)

7048 
	#CSI_CSISR_RxFF_INT_SHIFT
 18

	)

7049 
	#CSI_CSISR_DMA_TSF_DONE_FB1_MASK
 0x80000u

	)

7050 
	#CSI_CSISR_DMA_TSF_DONE_FB1_SHIFT
 19

	)

7051 
	#CSI_CSISR_DMA_TSF_DONE_FB2_MASK
 0x100000u

	)

7052 
	#CSI_CSISR_DMA_TSF_DONE_FB2_SHIFT
 20

	)

7053 
	#CSI_CSISR_STATFF_INT_MASK
 0x200000u

	)

7054 
	#CSI_CSISR_STATFF_INT_SHIFT
 21

	)

7055 
	#CSI_CSISR_DMA_TSF_DONE_SFF_MASK
 0x400000u

	)

7056 
	#CSI_CSISR_DMA_TSF_DONE_SFF_SHIFT
 22

	)

7057 
	#CSI_CSISR_RF_OR_INT_MASK
 0x1000000u

	)

7058 
	#CSI_CSISR_RF_OR_INT_SHIFT
 24

	)

7059 
	#CSI_CSISR_SF_OR_INT_MASK
 0x2000000u

	)

7060 
	#CSI_CSISR_SF_OR_INT_SHIFT
 25

	)

7061 
	#CSI_CSISR_DMA_FIELD1_DONE_MASK
 0x4000000u

	)

7062 
	#CSI_CSISR_DMA_FIELD1_DONE_SHIFT
 26

	)

7063 
	#CSI_CSISR_DMA_FIELD0_DONE_MASK
 0x8000000u

	)

7064 
	#CSI_CSISR_DMA_FIELD0_DONE_SHIFT
 27

	)

7065 
	#CSI_CSISR_BASEADDR_CHHANGE_ERROR_MASK
 0x10000000u

	)

7066 
	#CSI_CSISR_BASEADDR_CHHANGE_ERROR_SHIFT
 28

	)

7068 
	#CSI_CSIDMASA_STATFIFO_DMA_START_ADDR_SFF_MASK
 0xFFFFFFFCu

	)

7069 
	#CSI_CSIDMASA_STATFIFO_DMA_START_ADDR_SFF_SHIFT
 2

	)

7070 
	#CSI_CSIDMASA_STATFIFO_DMA_START_ADDR_SFF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSIDMASA_STATFIFO_DMA_START_ADDR_SFF_SHIFT
))&
CSI_CSIDMASA_STATFIFO_DMA_START_ADDR_SFF_MASK
)

	)

7072 
	#CSI_CSIDMATS_STATFIFO_DMA_TSF_SIZE_SFF_MASK
 0xFFFFFFFFu

	)

7073 
	#CSI_CSIDMATS_STATFIFO_DMA_TSF_SIZE_SFF_SHIFT
 0

	)

7074 
	#CSI_CSIDMATS_STATFIFO_DMA_TSF_SIZE_SFF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSIDMATS_STATFIFO_DMA_TSF_SIZE_SFF_SHIFT
))&
CSI_CSIDMATS_STATFIFO_DMA_TSF_SIZE_SFF_MASK
)

	)

7076 
	#CSI_CSIDMASA_FB1_DMA_START_ADDR_FB1_MASK
 0xFFFFFFFCu

	)

7077 
	#CSI_CSIDMASA_FB1_DMA_START_ADDR_FB1_SHIFT
 2

	)

7078 
	#CSI_CSIDMASA_FB1_DMA_START_ADDR_FB1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSIDMASA_FB1_DMA_START_ADDR_FB1_SHIFT
))&
CSI_CSIDMASA_FB1_DMA_START_ADDR_FB1_MASK
)

	)

7080 
	#CSI_CSIDMASA_FB2_DMA_START_ADDR_FB2_MASK
 0xFFFFFFFCu

	)

7081 
	#CSI_CSIDMASA_FB2_DMA_START_ADDR_FB2_SHIFT
 2

	)

7082 
	#CSI_CSIDMASA_FB2_DMA_START_ADDR_FB2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSIDMASA_FB2_DMA_START_ADDR_FB2_SHIFT
))&
CSI_CSIDMASA_FB2_DMA_START_ADDR_FB2_MASK
)

	)

7084 
	#CSI_CSIFBUF_PARA_FBUF_STRIDE_MASK
 0xFFFFu

	)

7085 
	#CSI_CSIFBUF_PARA_FBUF_STRIDE_SHIFT
 0

	)

7086 
	#CSI_CSIFBUF_PARA_FBUF_STRIDE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSIFBUF_PARA_FBUF_STRIDE_SHIFT
))&
CSI_CSIFBUF_PARA_FBUF_STRIDE_MASK
)

	)

7088 
	#CSI_CSIIMAG_PARA_IMAGE_HEIGHT_MASK
 0xFFFFu

	)

7089 
	#CSI_CSIIMAG_PARA_IMAGE_HEIGHT_SHIFT
 0

	)

7090 
	#CSI_CSIIMAG_PARA_IMAGE_HEIGHT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSIIMAG_PARA_IMAGE_HEIGHT_SHIFT
))&
CSI_CSIIMAG_PARA_IMAGE_HEIGHT_MASK
)

	)

7091 
	#CSI_CSIIMAG_PARA_IMAGE_WIDTH_MASK
 0xFFFF0000u

	)

7092 
	#CSI_CSIIMAG_PARA_IMAGE_WIDTH_SHIFT
 16

	)

7093 
	#CSI_CSIIMAG_PARA_IMAGE_WIDTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSIIMAG_PARA_IMAGE_WIDTH_SHIFT
))&
CSI_CSIIMAG_PARA_IMAGE_WIDTH_MASK
)

	)

7095 
	#CSI_CSICR18_NTSC_EN_MASK
 0x1u

	)

7096 
	#CSI_CSICR18_NTSC_EN_SHIFT
 0

	)

7097 
	#CSI_CSICR18_TVDECODER_IN_EN_MASK
 0x2u

	)

7098 
	#CSI_CSICR18_TVDECODER_IN_EN_SHIFT
 1

	)

7099 
	#CSI_CSICR18_DEINTERLACE_EN_MASK
 0x4u

	)

7100 
	#CSI_CSICR18_DEINTERLACE_EN_SHIFT
 2

	)

7101 
	#CSI_CSICR18_PARALLEL24_EN_MASK
 0x8u

	)

7102 
	#CSI_CSICR18_PARALLEL24_EN_SHIFT
 3

	)

7103 
	#CSI_CSICR18_BASEADDR_SWITCH_EN_MASK
 0x10u

	)

7104 
	#CSI_CSICR18_BASEADDR_SWITCH_EN_SHIFT
 4

	)

7105 
	#CSI_CSICR18_BASEADDR_SWITCH_SEL_MASK
 0x20u

	)

7106 
	#CSI_CSICR18_BASEADDR_SWITCH_SEL_SHIFT
 5

	)

7107 
	#CSI_CSICR18_FIELD0_DONE_IE_MASK
 0x40u

	)

7108 
	#CSI_CSICR18_FIELD0_DONE_IE_SHIFT
 6

	)

7109 
	#CSI_CSICR18_DMA_FIELD1_DONE_IE_MASK
 0x80u

	)

7110 
	#CSI_CSICR18_DMA_FIELD1_DONE_IE_SHIFT
 7

	)

7111 
	#CSI_CSICR18_LAST_DMA_REQ_SEL_MASK
 0x100u

	)

7112 
	#CSI_CSICR18_LAST_DMA_REQ_SEL_SHIFT
 8

	)

7113 
	#CSI_CSICR18_BASEADDR_CHANGE_ERROR_IE_MASK
 0x200u

	)

7114 
	#CSI_CSICR18_BASEADDR_CHANGE_ERROR_IE_SHIFT
 9

	)

7115 
	#CSI_CSICR18_RGB888A_FORMAT_SEL_MASK
 0x400u

	)

7116 
	#CSI_CSICR18_RGB888A_FORMAT_SEL_SHIFT
 10

	)

7117 
	#CSI_CSICR18_AHB_HPROT_MASK
 0xF000u

	)

7118 
	#CSI_CSICR18_AHB_HPROT_SHIFT
 12

	)

7119 
	#CSI_CSICR18_AHB_HPROT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSICR18_AHB_HPROT_SHIFT
))&
CSI_CSICR18_AHB_HPROT_MASK
)

	)

7120 
	#CSI_CSICR18_CSI_LCDIF_BUFFER_LINES_MASK
 0x30000u

	)

7121 
	#CSI_CSICR18_CSI_LCDIF_BUFFER_LINES_SHIFT
 16

	)

7122 
	#CSI_CSICR18_CSI_LCDIF_BUFFER_LINES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSICR18_CSI_LCDIF_BUFFER_LINES_SHIFT
))&
CSI_CSICR18_CSI_LCDIF_BUFFER_LINES_MASK
)

	)

7123 
	#CSI_CSICR18_MASK_OPTION_MASK
 0xC0000u

	)

7124 
	#CSI_CSICR18_MASK_OPTION_SHIFT
 18

	)

7125 
	#CSI_CSICR18_MASK_OPTION
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSICR18_MASK_OPTION_SHIFT
))&
CSI_CSICR18_MASK_OPTION_MASK
)

	)

7126 
	#CSI_CSICR18_CSI_ENABLE_MASK
 0x80000000u

	)

7127 
	#CSI_CSICR18_CSI_ENABLE_SHIFT
 31

	)

7129 
	#CSI_CSICR19_DMA_RFIFO_HIGHEST_FIFO_LEVEL_MASK
 0xFFu

	)

7130 
	#CSI_CSICR19_DMA_RFIFO_HIGHEST_FIFO_LEVEL_SHIFT
 0

	)

7131 
	#CSI_CSICR19_DMA_RFIFO_HIGHEST_FIFO_LEVEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
CSI_CSICR19_DMA_RFIFO_HIGHEST_FIFO_LEVEL_SHIFT
))&
CSI_CSICR19_DMA_RFIFO_HIGHEST_FIFO_LEVEL_MASK
)

	)

7139 
	#CSI1_BASE
 (0x42214000u)

	)

7141 
	#CSI1
 ((
CSI_Ty≥
 *)
CSI1_BASE
)

	)

7142 
	#CSI1_BASE_PTR
 (
CSI1
)

	)

7144 
	#CSI2_BASE
 (0x4221C000u)

	)

7146 
	#CSI2
 ((
CSI_Ty≥
 *)
CSI2_BASE
)

	)

7147 
	#CSI2_BASE_PTR
 (
CSI2
)

	)

7149 
	#CSI_BASE_ADDRS
 { 
CSI1_BASE
, 
CSI2_BASE
 }

	)

7151 
	#CSI_BASE_PTRS
 { 
CSI1
, 
CSI2
 }

	)

7153 
	#CSI_IRQS
 { 
CSI1_IRQn
, 
CSI2_IRQn
 }

	)

7166 
	#CSI1_CSICR1
 
	`CSI_CSICR1_REG
(
CSI1_BASE_PTR
)

	)

7167 
	#CSI1_CSICR2
 
	`CSI_CSICR2_REG
(
CSI1_BASE_PTR
)

	)

7168 
	#CSI1_CSICR3
 
	`CSI_CSICR3_REG
(
CSI1_BASE_PTR
)

	)

7169 
	#CSI1_CSISTATFIFO
 
	`CSI_CSISTATFIFO_REG
(
CSI1_BASE_PTR
)

	)

7170 
	#CSI1_CSIRFIFO
 
	`CSI_CSIRFIFO_REG
(
CSI1_BASE_PTR
)

	)

7171 
	#CSI1_CSIRXCNT
 
	`CSI_CSIRXCNT_REG
(
CSI1_BASE_PTR
)

	)

7172 
	#CSI1_CSISR
 
	`CSI_CSISR_REG
(
CSI1_BASE_PTR
)

	)

7173 
	#CSI1_CSIDMASA_STATFIFO
 
	`CSI_CSIDMASA_STATFIFO_REG
(
CSI1_BASE_PTR
)

	)

7174 
	#CSI1_CSIDMATS_STATFIFO
 
	`CSI_CSIDMATS_STATFIFO_REG
(
CSI1_BASE_PTR
)

	)

7175 
	#CSI1_CSIDMASA_FB1
 
	`CSI_CSIDMASA_FB1_REG
(
CSI1_BASE_PTR
)

	)

7176 
	#CSI1_CSIDMASA_FB2
 
	`CSI_CSIDMASA_FB2_REG
(
CSI1_BASE_PTR
)

	)

7177 
	#CSI1_CSIFBUF_PARA
 
	`CSI_CSIFBUF_PARA_REG
(
CSI1_BASE_PTR
)

	)

7178 
	#CSI1_CSIIMAG_PARA
 
	`CSI_CSIIMAG_PARA_REG
(
CSI1_BASE_PTR
)

	)

7179 
	#CSI1_CSICR18
 
	`CSI_CSICR18_REG
(
CSI1_BASE_PTR
)

	)

7180 
	#CSI1_CSICR19
 
	`CSI_CSICR19_REG
(
CSI1_BASE_PTR
)

	)

7182 
	#CSI2_CSICR1
 
	`CSI_CSICR1_REG
(
CSI2_BASE_PTR
)

	)

7183 
	#CSI2_CSICR2
 
	`CSI_CSICR2_REG
(
CSI2_BASE_PTR
)

	)

7184 
	#CSI2_CSICR3
 
	`CSI_CSICR3_REG
(
CSI2_BASE_PTR
)

	)

7185 
	#CSI2_CSISTATFIFO
 
	`CSI_CSISTATFIFO_REG
(
CSI2_BASE_PTR
)

	)

7186 
	#CSI2_CSIRFIFO
 
	`CSI_CSIRFIFO_REG
(
CSI2_BASE_PTR
)

	)

7187 
	#CSI2_CSIRXCNT
 
	`CSI_CSIRXCNT_REG
(
CSI2_BASE_PTR
)

	)

7188 
	#CSI2_CSISR
 
	`CSI_CSISR_REG
(
CSI2_BASE_PTR
)

	)

7189 
	#CSI2_CSIDMASA_STATFIFO
 
	`CSI_CSIDMASA_STATFIFO_REG
(
CSI2_BASE_PTR
)

	)

7190 
	#CSI2_CSIDMATS_STATFIFO
 
	`CSI_CSIDMATS_STATFIFO_REG
(
CSI2_BASE_PTR
)

	)

7191 
	#CSI2_CSIDMASA_FB1
 
	`CSI_CSIDMASA_FB1_REG
(
CSI2_BASE_PTR
)

	)

7192 
	#CSI2_CSIDMASA_FB2
 
	`CSI_CSIDMASA_FB2_REG
(
CSI2_BASE_PTR
)

	)

7193 
	#CSI2_CSIFBUF_PARA
 
	`CSI_CSIFBUF_PARA_REG
(
CSI2_BASE_PTR
)

	)

7194 
	#CSI2_CSIIMAG_PARA
 
	`CSI_CSIIMAG_PARA_REG
(
CSI2_BASE_PTR
)

	)

7195 
	#CSI2_CSICR18
 
	`CSI_CSICR18_REG
(
CSI2_BASE_PTR
)

	)

7196 
	#CSI2_CSICR19
 
	`CSI_CSICR19_REG
(
CSI2_BASE_PTR
)

	)

7217 
__IO
 
uöt32_t
 
	mDCICC
;

7218 
__IO
 
uöt32_t
 
	mDCICIC
;

7219 
__IO
 
uöt32_t
 
	mDCICS
;

7220 
uöt8_t
 
	mRESERVED_0
[4];

7221 
__IO
 
uöt32_t
 
	mDCICRC
;

7222 
__IO
 
uöt32_t
 
	mDCICRS
;

7223 
__IO
 
uöt32_t
 
	mDCICRRS
;

7224 
__I
 
uöt32_t
 
	mDCICRCS
;

7225 } 
	tDCIC_Ty≥
, *
	tDCIC_MemM≠På
;

7237 
	#DCIC_DCICC_REG
(
ba£
Ë((ba£)->
DCICC
)

	)

7238 
	#DCIC_DCICIC_REG
(
ba£
Ë((ba£)->
DCICIC
)

	)

7239 
	#DCIC_DCICS_REG
(
ba£
Ë((ba£)->
DCICS
)

	)

7240 
	#DCIC_DCICRC_REG
(
ba£
Ë((ba£)->
DCICRC
)

	)

7241 
	#DCIC_DCICRS_REG
(
ba£
Ë((ba£)->
DCICRS
)

	)

7242 
	#DCIC_DCICRRS_REG
(
ba£
Ë((ba£)->
DCICRRS
)

	)

7243 
	#DCIC_DCICRCS_REG
(
ba£
Ë((ba£)->
DCICRCS
)

	)

7259 
	#DCIC_DCICC_IC_EN_MASK
 0x1u

	)

7260 
	#DCIC_DCICC_IC_EN_SHIFT
 0

	)

7261 
	#DCIC_DCICC_DE_POL_MASK
 0x10u

	)

7262 
	#DCIC_DCICC_DE_POL_SHIFT
 4

	)

7263 
	#DCIC_DCICC_HSYNC_POL_MASK
 0x20u

	)

7264 
	#DCIC_DCICC_HSYNC_POL_SHIFT
 5

	)

7265 
	#DCIC_DCICC_VSYNC_POL_MASK
 0x40u

	)

7266 
	#DCIC_DCICC_VSYNC_POL_SHIFT
 6

	)

7267 
	#DCIC_DCICC_CLK_POL_MASK
 0x80u

	)

7268 
	#DCIC_DCICC_CLK_POL_SHIFT
 7

	)

7270 
	#DCIC_DCICIC_EI_MASK_MASK
 0x1u

	)

7271 
	#DCIC_DCICIC_EI_MASK_SHIFT
 0

	)

7272 
	#DCIC_DCICIC_FI_MASK_MASK
 0x2u

	)

7273 
	#DCIC_DCICIC_FI_MASK_SHIFT
 1

	)

7274 
	#DCIC_DCICIC_FREEZE_MASK_MASK
 0x8u

	)

7275 
	#DCIC_DCICIC_FREEZE_MASK_SHIFT
 3

	)

7276 
	#DCIC_DCICIC_EXT_SIG_EN_MASK
 0x10000u

	)

7277 
	#DCIC_DCICIC_EXT_SIG_EN_SHIFT
 16

	)

7279 
	#DCIC_DCICS_ROI_MATCH_STAT_MASK
 0xFFFFu

	)

7280 
	#DCIC_DCICS_ROI_MATCH_STAT_SHIFT
 0

	)

7281 
	#DCIC_DCICS_ROI_MATCH_STAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DCIC_DCICS_ROI_MATCH_STAT_SHIFT
))&
DCIC_DCICS_ROI_MATCH_STAT_MASK
)

	)

7282 
	#DCIC_DCICS_EI_STAT_MASK
 0x10000u

	)

7283 
	#DCIC_DCICS_EI_STAT_SHIFT
 16

	)

7284 
	#DCIC_DCICS_FI_STAT_MASK
 0x20000u

	)

7285 
	#DCIC_DCICS_FI_STAT_SHIFT
 17

	)

7287 
	#DCIC_DCICRC_START_OFFSET_X_MASK
 0x1FFFu

	)

7288 
	#DCIC_DCICRC_START_OFFSET_X_SHIFT
 0

	)

7289 
	#DCIC_DCICRC_START_OFFSET_X
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DCIC_DCICRC_START_OFFSET_X_SHIFT
))&
DCIC_DCICRC_START_OFFSET_X_MASK
)

	)

7290 
	#DCIC_DCICRC_START_OFFSET_Y_MASK
 0xFFF0000u

	)

7291 
	#DCIC_DCICRC_START_OFFSET_Y_SHIFT
 16

	)

7292 
	#DCIC_DCICRC_START_OFFSET_Y
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DCIC_DCICRC_START_OFFSET_Y_SHIFT
))&
DCIC_DCICRC_START_OFFSET_Y_MASK
)

	)

7293 
	#DCIC_DCICRC_ROI_FREEZE_MASK
 0x40000000u

	)

7294 
	#DCIC_DCICRC_ROI_FREEZE_SHIFT
 30

	)

7295 
	#DCIC_DCICRC_ROI_EN_MASK
 0x80000000u

	)

7296 
	#DCIC_DCICRC_ROI_EN_SHIFT
 31

	)

7298 
	#DCIC_DCICRS_END_OFFSET_X_MASK
 0x1FFFu

	)

7299 
	#DCIC_DCICRS_END_OFFSET_X_SHIFT
 0

	)

7300 
	#DCIC_DCICRS_END_OFFSET_X
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DCIC_DCICRS_END_OFFSET_X_SHIFT
))&
DCIC_DCICRS_END_OFFSET_X_MASK
)

	)

7301 
	#DCIC_DCICRS_END_OFFSET_Y_MASK
 0xFFF0000u

	)

7302 
	#DCIC_DCICRS_END_OFFSET_Y_SHIFT
 16

	)

7303 
	#DCIC_DCICRS_END_OFFSET_Y
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DCIC_DCICRS_END_OFFSET_Y_SHIFT
))&
DCIC_DCICRS_END_OFFSET_Y_MASK
)

	)

7305 
	#DCIC_DCICRRS_REFERENCE_SIGNATURE_MASK
 0xFFFFFFFFu

	)

7306 
	#DCIC_DCICRRS_REFERENCE_SIGNATURE_SHIFT
 0

	)

7307 
	#DCIC_DCICRRS_REFERENCE_SIGNATURE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DCIC_DCICRRS_REFERENCE_SIGNATURE_SHIFT
))&
DCIC_DCICRRS_REFERENCE_SIGNATURE_MASK
)

	)

7309 
	#DCIC_DCICRCS_CALCULATED_SIGNATURE_MASK
 0xFFFFFFFFu

	)

7310 
	#DCIC_DCICRCS_CALCULATED_SIGNATURE_SHIFT
 0

	)

7311 
	#DCIC_DCICRCS_CALCULATED_SIGNATURE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DCIC_DCICRCS_CALCULATED_SIGNATURE_SHIFT
))&
DCIC_DCICRCS_CALCULATED_SIGNATURE_MASK
)

	)

7319 
	#DCIC1_BASE
 (0x4220C000u)

	)

7321 
	#DCIC1
 ((
DCIC_Ty≥
 *)
DCIC1_BASE
)

	)

7322 
	#DCIC1_BASE_PTR
 (
DCIC1
)

	)

7324 
	#DCIC2_BASE
 (0x42210000u)

	)

7326 
	#DCIC2
 ((
DCIC_Ty≥
 *)
DCIC2_BASE
)

	)

7327 
	#DCIC2_BASE_PTR
 (
DCIC2
)

	)

7329 
	#DCIC_BASE_ADDRS
 { 
DCIC1_BASE
, 
DCIC2_BASE
 }

	)

7331 
	#DCIC_BASE_PTRS
 { 
DCIC1
, 
DCIC2
 }

	)

7333 
	#DCIC_IRQS
 { 
DCIC1_IRQn
, 
DCIC2_IRQn
 }

	)

7345 
	#DCIC1_DCICC
 
	`DCIC_DCICC_REG
(
DCIC1_BASE_PTR
)

	)

7346 
	#DCIC1_DCICIC
 
	`DCIC_DCICIC_REG
(
DCIC1_BASE_PTR
)

	)

7347 
	#DCIC1_DCICS
 
	`DCIC_DCICS_REG
(
DCIC1_BASE_PTR
)

	)

7348 
	#DCIC1_DCICRC
 
	`DCIC_DCICRC_REG
(
DCIC1_BASE_PTR
)

	)

7349 
	#DCIC1_DCICRS
 
	`DCIC_DCICRS_REG
(
DCIC1_BASE_PTR
)

	)

7350 
	#DCIC1_DCICRRS
 
	`DCIC_DCICRRS_REG
(
DCIC1_BASE_PTR
)

	)

7351 
	#DCIC1_DCICRCS
 
	`DCIC_DCICRCS_REG
(
DCIC1_BASE_PTR
)

	)

7353 
	#DCIC2_DCICC
 
	`DCIC_DCICC_REG
(
DCIC2_BASE_PTR
)

	)

7354 
	#DCIC2_DCICIC
 
	`DCIC_DCICIC_REG
(
DCIC2_BASE_PTR
)

	)

7355 
	#DCIC2_DCICS
 
	`DCIC_DCICS_REG
(
DCIC2_BASE_PTR
)

	)

7356 
	#DCIC2_DCICRC
 
	`DCIC_DCICRC_REG
(
DCIC2_BASE_PTR
)

	)

7357 
	#DCIC2_DCICRS
 
	`DCIC_DCICRS_REG
(
DCIC2_BASE_PTR
)

	)

7358 
	#DCIC2_DCICRRS
 
	`DCIC_DCICRRS_REG
(
DCIC2_BASE_PTR
)

	)

7359 
	#DCIC2_DCICRCS
 
	`DCIC_DCICRCS_REG
(
DCIC2_BASE_PTR
)

	)

7380 
__IO
 
uöt32_t
 
	mTHRS
;

7381 
__IO
 
uöt32_t
 
	mCOUN
;

7382 
__IO
 
uöt32_t
 
	mSIG1
;

7383 
__IO
 
uöt32_t
 
	mDVFSSIG0
;

7384 
__IO
 
uöt32_t
 
	mDVFSGPC0
;

7385 
__IO
 
uöt32_t
 
	mDVFSGPC1
;

7386 
__IO
 
uöt32_t
 
	mDVFSGPBT
;

7387 
__IO
 
uöt32_t
 
	mDVFSEMAC
;

7388 
__IO
 
uöt32_t
 
	mCNTR
;

7389 
__I
 
uöt32_t
 
	mDVFSLTR0_0
;

7390 
__I
 
uöt32_t
 
	mDVFSLTR0_1
;

7391 
__I
 
uöt32_t
 
	mDVFSLTR1_0
;

7392 
__I
 
uöt32_t
 
	mDVFSLTR1_1
;

7393 
__IO
 
uöt32_t
 
	mDVFSPT0
;

7394 
__IO
 
uöt32_t
 
	mDVFSPT1
;

7395 
__IO
 
uöt32_t
 
	mDVFSPT2
;

7396 
__IO
 
uöt32_t
 
	mDVFSPT3
;

7397 } 
	tDVFSC_Ty≥
, *
	tDVFSC_MemM≠På
;

7409 
	#DVFSC_THRS_REG
(
ba£
Ë((ba£)->
THRS
)

	)

7410 
	#DVFSC_COUN_REG
(
ba£
Ë((ba£)->
COUN
)

	)

7411 
	#DVFSC_SIG1_REG
(
ba£
Ë((ba£)->
SIG1
)

	)

7412 
	#DVFSC_DVFSSIG0_REG
(
ba£
Ë((ba£)->
DVFSSIG0
)

	)

7413 
	#DVFSC_DVFSGPC0_REG
(
ba£
Ë((ba£)->
DVFSGPC0
)

	)

7414 
	#DVFSC_DVFSGPC1_REG
(
ba£
Ë((ba£)->
DVFSGPC1
)

	)

7415 
	#DVFSC_DVFSGPBT_REG
(
ba£
Ë((ba£)->
DVFSGPBT
)

	)

7416 
	#DVFSC_DVFSEMAC_REG
(
ba£
Ë((ba£)->
DVFSEMAC
)

	)

7417 
	#DVFSC_CNTR_REG
(
ba£
Ë((ba£)->
CNTR
)

	)

7418 
	#DVFSC_DVFSLTR0_0_REG
(
ba£
Ë((ba£)->
DVFSLTR0_0
)

	)

7419 
	#DVFSC_DVFSLTR0_1_REG
(
ba£
Ë((ba£)->
DVFSLTR0_1
)

	)

7420 
	#DVFSC_DVFSLTR1_0_REG
(
ba£
Ë((ba£)->
DVFSLTR1_0
)

	)

7421 
	#DVFSC_DVFSLTR1_1_REG
(
ba£
Ë((ba£)->
DVFSLTR1_1
)

	)

7422 
	#DVFSC_DVFSPT0_REG
(
ba£
Ë((ba£)->
DVFSPT0
)

	)

7423 
	#DVFSC_DVFSPT1_REG
(
ba£
Ë((ba£)->
DVFSPT1
)

	)

7424 
	#DVFSC_DVFSPT2_REG
(
ba£
Ë((ba£)->
DVFSPT2
)

	)

7425 
	#DVFSC_DVFSPT3_REG
(
ba£
Ë((ba£)->
DVFSPT3
)

	)

7440 
	#DVFSC_THRS_PNCTHR_MASK
 0x3Fu

	)

7441 
	#DVFSC_THRS_PNCTHR_SHIFT
 0

	)

7442 
	#DVFSC_THRS_PNCTHR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_THRS_PNCTHR_SHIFT
))&
DVFSC_THRS_PNCTHR_MASK
)

	)

7443 
	#DVFSC_THRS_DWTHR_MASK
 0x3F0000u

	)

7444 
	#DVFSC_THRS_DWTHR_SHIFT
 16

	)

7445 
	#DVFSC_THRS_DWTHR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_THRS_DWTHR_SHIFT
))&
DVFSC_THRS_DWTHR_MASK
)

	)

7446 
	#DVFSC_THRS_UPTHR_MASK
 0xFC00000u

	)

7447 
	#DVFSC_THRS_UPTHR_SHIFT
 22

	)

7448 
	#DVFSC_THRS_UPTHR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_THRS_UPTHR_SHIFT
))&
DVFSC_THRS_UPTHR_MASK
)

	)

7450 
	#DVFSC_COUN_UPCNT_MASK
 0xFFu

	)

7451 
	#DVFSC_COUN_UPCNT_SHIFT
 0

	)

7452 
	#DVFSC_COUN_UPCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_COUN_UPCNT_SHIFT
))&
DVFSC_COUN_UPCNT_MASK
)

	)

7453 
	#DVFSC_COUN_DN_CNT_MASK
 0xFF0000u

	)

7454 
	#DVFSC_COUN_DN_CNT_SHIFT
 16

	)

7455 
	#DVFSC_COUN_DN_CNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_COUN_DN_CNT_SHIFT
))&
DVFSC_COUN_DN_CNT_MASK
)

	)

7457 
	#DVFSC_SIG1_WSW6_MASK
 0x1Cu

	)

7458 
	#DVFSC_SIG1_WSW6_SHIFT
 2

	)

7459 
	#DVFSC_SIG1_WSW6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_SIG1_WSW6_SHIFT
))&
DVFSC_SIG1_WSW6_MASK
)

	)

7460 
	#DVFSC_SIG1_WSW7_MASK
 0xE0u

	)

7461 
	#DVFSC_SIG1_WSW7_SHIFT
 5

	)

7462 
	#DVFSC_SIG1_WSW7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_SIG1_WSW7_SHIFT
))&
DVFSC_SIG1_WSW7_MASK
)

	)

7463 
	#DVFSC_SIG1_WSW8_MASK
 0x700u

	)

7464 
	#DVFSC_SIG1_WSW8_SHIFT
 8

	)

7465 
	#DVFSC_SIG1_WSW8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_SIG1_WSW8_SHIFT
))&
DVFSC_SIG1_WSW8_MASK
)

	)

7466 
	#DVFSC_SIG1_WSW9_MASK
 0x3800u

	)

7467 
	#DVFSC_SIG1_WSW9_SHIFT
 11

	)

7468 
	#DVFSC_SIG1_WSW9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_SIG1_WSW9_SHIFT
))&
DVFSC_SIG1_WSW9_MASK
)

	)

7469 
	#DVFSC_SIG1_WSW10_MASK
 0x1C000u

	)

7470 
	#DVFSC_SIG1_WSW10_SHIFT
 14

	)

7471 
	#DVFSC_SIG1_WSW10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_SIG1_WSW10_SHIFT
))&
DVFSC_SIG1_WSW10_MASK
)

	)

7472 
	#DVFSC_SIG1_WSW11_MASK
 0xE0000u

	)

7473 
	#DVFSC_SIG1_WSW11_SHIFT
 17

	)

7474 
	#DVFSC_SIG1_WSW11
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_SIG1_WSW11_SHIFT
))&
DVFSC_SIG1_WSW11_MASK
)

	)

7475 
	#DVFSC_SIG1_WSW12_MASK
 0x700000u

	)

7476 
	#DVFSC_SIG1_WSW12_SHIFT
 20

	)

7477 
	#DVFSC_SIG1_WSW12
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_SIG1_WSW12_SHIFT
))&
DVFSC_SIG1_WSW12_MASK
)

	)

7478 
	#DVFSC_SIG1_WSW13_MASK
 0x3800000u

	)

7479 
	#DVFSC_SIG1_WSW13_SHIFT
 23

	)

7480 
	#DVFSC_SIG1_WSW13
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_SIG1_WSW13_SHIFT
))&
DVFSC_SIG1_WSW13_MASK
)

	)

7481 
	#DVFSC_SIG1_WSW14_MASK
 0x1C000000u

	)

7482 
	#DVFSC_SIG1_WSW14_SHIFT
 26

	)

7483 
	#DVFSC_SIG1_WSW14
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_SIG1_WSW14_SHIFT
))&
DVFSC_SIG1_WSW14_MASK
)

	)

7484 
	#DVFSC_SIG1_WSW15_MASK
 0xE0000000u

	)

7485 
	#DVFSC_SIG1_WSW15_SHIFT
 29

	)

7486 
	#DVFSC_SIG1_WSW15
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_SIG1_WSW15_SHIFT
))&
DVFSC_SIG1_WSW15_MASK
)

	)

7488 
	#DVFSC_DVFSSIG0_WSW0_MASK
 0x3Fu

	)

7489 
	#DVFSC_DVFSSIG0_WSW0_SHIFT
 0

	)

7490 
	#DVFSC_DVFSSIG0_WSW0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSSIG0_WSW0_SHIFT
))&
DVFSC_DVFSSIG0_WSW0_MASK
)

	)

7491 
	#DVFSC_DVFSSIG0_WSW1_MASK
 0xFC0u

	)

7492 
	#DVFSC_DVFSSIG0_WSW1_SHIFT
 6

	)

7493 
	#DVFSC_DVFSSIG0_WSW1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSSIG0_WSW1_SHIFT
))&
DVFSC_DVFSSIG0_WSW1_MASK
)

	)

7494 
	#DVFSC_DVFSSIG0_WSW2_MASK
 0x700000u

	)

7495 
	#DVFSC_DVFSSIG0_WSW2_SHIFT
 20

	)

7496 
	#DVFSC_DVFSSIG0_WSW2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSSIG0_WSW2_SHIFT
))&
DVFSC_DVFSSIG0_WSW2_MASK
)

	)

7497 
	#DVFSC_DVFSSIG0_WSW3_MASK
 0x3800000u

	)

7498 
	#DVFSC_DVFSSIG0_WSW3_SHIFT
 23

	)

7499 
	#DVFSC_DVFSSIG0_WSW3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSSIG0_WSW3_SHIFT
))&
DVFSC_DVFSSIG0_WSW3_MASK
)

	)

7500 
	#DVFSC_DVFSSIG0_WSW4_MASK
 0x1C000000u

	)

7501 
	#DVFSC_DVFSSIG0_WSW4_SHIFT
 26

	)

7502 
	#DVFSC_DVFSSIG0_WSW4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSSIG0_WSW4_SHIFT
))&
DVFSC_DVFSSIG0_WSW4_MASK
)

	)

7503 
	#DVFSC_DVFSSIG0_WSW5_MASK
 0xE0000000u

	)

7504 
	#DVFSC_DVFSSIG0_WSW5_SHIFT
 29

	)

7505 
	#DVFSC_DVFSSIG0_WSW5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSSIG0_WSW5_SHIFT
))&
DVFSC_DVFSSIG0_WSW5_MASK
)

	)

7507 
	#DVFSC_DVFSGPC0_GPBC0_MASK
 0x1FFFFu

	)

7508 
	#DVFSC_DVFSGPC0_GPBC0_SHIFT
 0

	)

7509 
	#DVFSC_DVFSGPC0_GPBC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSGPC0_GPBC0_SHIFT
))&
DVFSC_DVFSGPC0_GPBC0_MASK
)

	)

7510 
	#DVFSC_DVFSGPC0_C0ACT_MASK
 0x40000000u

	)

7511 
	#DVFSC_DVFSGPC0_C0ACT_SHIFT
 30

	)

7512 
	#DVFSC_DVFSGPC0_C0STRT_MASK
 0x80000000u

	)

7513 
	#DVFSC_DVFSGPC0_C0STRT_SHIFT
 31

	)

7515 
	#DVFSC_DVFSGPC1_GPBC1_MASK
 0x1FFFFu

	)

7516 
	#DVFSC_DVFSGPC1_GPBC1_SHIFT
 0

	)

7517 
	#DVFSC_DVFSGPC1_GPBC1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSGPC1_GPBC1_SHIFT
))&
DVFSC_DVFSGPC1_GPBC1_MASK
)

	)

7518 
	#DVFSC_DVFSGPC1_C1ACT_MASK
 0x40000000u

	)

7519 
	#DVFSC_DVFSGPC1_C1ACT_SHIFT
 30

	)

7520 
	#DVFSC_DVFSGPC1_C1STRT_MASK
 0x80000000u

	)

7521 
	#DVFSC_DVFSGPC1_C1STRT_SHIFT
 31

	)

7523 
	#DVFSC_DVFSGPBT_GPB0_MASK
 0x1u

	)

7524 
	#DVFSC_DVFSGPBT_GPB0_SHIFT
 0

	)

7525 
	#DVFSC_DVFSGPBT_GPB1_MASK
 0x2u

	)

7526 
	#DVFSC_DVFSGPBT_GPB1_SHIFT
 1

	)

7527 
	#DVFSC_DVFSGPBT_GPB2_MASK
 0x4u

	)

7528 
	#DVFSC_DVFSGPBT_GPB2_SHIFT
 2

	)

7529 
	#DVFSC_DVFSGPBT_GPB3_MASK
 0x8u

	)

7530 
	#DVFSC_DVFSGPBT_GPB3_SHIFT
 3

	)

7531 
	#DVFSC_DVFSGPBT_GPB4_MASK
 0x10u

	)

7532 
	#DVFSC_DVFSGPBT_GPB4_SHIFT
 4

	)

7533 
	#DVFSC_DVFSGPBT_GPB5_MASK
 0x20u

	)

7534 
	#DVFSC_DVFSGPBT_GPB5_SHIFT
 5

	)

7535 
	#DVFSC_DVFSGPBT_GPB6_MASK
 0x40u

	)

7536 
	#DVFSC_DVFSGPBT_GPB6_SHIFT
 6

	)

7537 
	#DVFSC_DVFSGPBT_GPB7_MASK
 0x80u

	)

7538 
	#DVFSC_DVFSGPBT_GPB7_SHIFT
 7

	)

7539 
	#DVFSC_DVFSGPBT_GPB8_MASK
 0x100u

	)

7540 
	#DVFSC_DVFSGPBT_GPB8_SHIFT
 8

	)

7541 
	#DVFSC_DVFSGPBT_GPB9_MASK
 0x200u

	)

7542 
	#DVFSC_DVFSGPBT_GPB9_SHIFT
 9

	)

7543 
	#DVFSC_DVFSGPBT_GPB10_MASK
 0x400u

	)

7544 
	#DVFSC_DVFSGPBT_GPB10_SHIFT
 10

	)

7545 
	#DVFSC_DVFSGPBT_GPB11_MASK
 0x800u

	)

7546 
	#DVFSC_DVFSGPBT_GPB11_SHIFT
 11

	)

7547 
	#DVFSC_DVFSGPBT_GPB12_MASK
 0x1000u

	)

7548 
	#DVFSC_DVFSGPBT_GPB12_SHIFT
 12

	)

7549 
	#DVFSC_DVFSGPBT_GPB13_MASK
 0x2000u

	)

7550 
	#DVFSC_DVFSGPBT_GPB13_SHIFT
 13

	)

7551 
	#DVFSC_DVFSGPBT_GPB14_MASK
 0x4000u

	)

7552 
	#DVFSC_DVFSGPBT_GPB14_SHIFT
 14

	)

7553 
	#DVFSC_DVFSGPBT_GPB15_MASK
 0x8000u

	)

7554 
	#DVFSC_DVFSGPBT_GPB15_SHIFT
 15

	)

7556 
	#DVFSC_DVFSEMAC_EMAC_MASK
 0x1FFu

	)

7557 
	#DVFSC_DVFSEMAC_EMAC_SHIFT
 0

	)

7558 
	#DVFSC_DVFSEMAC_EMAC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSEMAC_EMAC_SHIFT
))&
DVFSC_DVFSEMAC_EMAC_MASK
)

	)

7559 
	#DVFSC_DVFSEMAC_DVFEN0_MASK
 0x200u

	)

7560 
	#DVFSC_DVFSEMAC_DVFEN0_SHIFT
 9

	)

7561 
	#DVFSC_DVFSEMAC_FSVAI0_MASK
 0x30000u

	)

7562 
	#DVFSC_DVFSEMAC_FSVAI0_SHIFT
 16

	)

7563 
	#DVFSC_DVFSEMAC_FSVAI0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSEMAC_FSVAI0_SHIFT
))&
DVFSC_DVFSEMAC_FSVAI0_MASK
)

	)

7564 
	#DVFSC_DVFSEMAC_WFIM0_MASK
 0x1000000u

	)

7565 
	#DVFSC_DVFSEMAC_WFIM0_SHIFT
 24

	)

7567 
	#DVFSC_CNTR_LTBRSR_MASK
 0x18u

	)

7568 
	#DVFSC_CNTR_LTBRSR_SHIFT
 3

	)

7569 
	#DVFSC_CNTR_LTBRSR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_CNTR_LTBRSR_SHIFT
))&
DVFSC_CNTR_LTBRSR_MASK
)

	)

7570 
	#DVFSC_CNTR_LTBRSH_MASK
 0x20u

	)

7571 
	#DVFSC_CNTR_LTBRSH_SHIFT
 5

	)

7572 
	#DVFSC_CNTR_PFUS_MASK
 0x1C0u

	)

7573 
	#DVFSC_CNTR_PFUS_SHIFT
 6

	)

7574 
	#DVFSC_CNTR_PFUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_CNTR_PFUS_SHIFT
))&
DVFSC_CNTR_PFUS_MASK
)

	)

7575 
	#DVFSC_CNTR_PFUE_MASK
 0x200u

	)

7576 
	#DVFSC_CNTR_PFUE_SHIFT
 9

	)

7577 
	#DVFSC_CNTR_DIV_RATIO_MASK
 0x1F800u

	)

7578 
	#DVFSC_CNTR_DIV_RATIO_SHIFT
 11

	)

7579 
	#DVFSC_CNTR_DIV_RATIO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_CNTR_DIV_RATIO_SHIFT
))&
DVFSC_CNTR_DIV_RATIO_MASK
)

	)

7580 
	#DVFSC_CNTR_MINF_MASK
 0x20000u

	)

7581 
	#DVFSC_CNTR_MINF_SHIFT
 17

	)

7582 
	#DVFSC_CNTR_MAXF_MASK
 0x40000u

	)

7583 
	#DVFSC_CNTR_MAXF_SHIFT
 18

	)

7584 
	#DVFSC_CNTR_FSVAI_MASK
 0x300000u

	)

7585 
	#DVFSC_CNTR_FSVAI_SHIFT
 20

	)

7586 
	#DVFSC_CNTR_FSVAI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_CNTR_FSVAI_SHIFT
))&
DVFSC_CNTR_FSVAI_MASK
)

	)

7587 
	#DVFSC_CNTR_FSVAIM_MASK
 0x400000u

	)

7588 
	#DVFSC_CNTR_FSVAIM_SHIFT
 22

	)

7589 
	#DVFSC_CNTR_PIRQS_MASK
 0x800000u

	)

7590 
	#DVFSC_CNTR_PIRQS_SHIFT
 23

	)

7591 
	#DVFSC_CNTR_DVFIS_MASK
 0x1000000u

	)

7592 
	#DVFSC_CNTR_DVFIS_SHIFT
 24

	)

7593 
	#DVFSC_CNTR_LBFL0_MASK
 0x2000000u

	)

7594 
	#DVFSC_CNTR_LBFL0_SHIFT
 25

	)

7595 
	#DVFSC_CNTR_LBFL1_MASK
 0x4000000u

	)

7596 
	#DVFSC_CNTR_LBFL1_SHIFT
 26

	)

7597 
	#DVFSC_CNTR_LBMI_MASK
 0x8000000u

	)

7598 
	#DVFSC_CNTR_LBMI_SHIFT
 27

	)

7599 
	#DVFSC_CNTR_DVFEV_MASK
 0x10000000u

	)

7600 
	#DVFSC_CNTR_DVFEV_SHIFT
 28

	)

7601 
	#DVFSC_CNTR_DIV3CK_MASK
 0xE0000000u

	)

7602 
	#DVFSC_CNTR_DIV3CK_SHIFT
 29

	)

7603 
	#DVFSC_CNTR_DIV3CK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_CNTR_DIV3CK_SHIFT
))&
DVFSC_CNTR_DIV3CK_MASK
)

	)

7605 
	#DVFSC_DVFSLTR0_0_LTS0_0_MASK
 0xFu

	)

7606 
	#DVFSC_DVFSLTR0_0_LTS0_0_SHIFT
 0

	)

7607 
	#DVFSC_DVFSLTR0_0_LTS0_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR0_0_LTS0_0_SHIFT
))&
DVFSC_DVFSLTR0_0_LTS0_0_MASK
)

	)

7608 
	#DVFSC_DVFSLTR0_0_LTS0_1_MASK
 0xF0u

	)

7609 
	#DVFSC_DVFSLTR0_0_LTS0_1_SHIFT
 4

	)

7610 
	#DVFSC_DVFSLTR0_0_LTS0_1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR0_0_LTS0_1_SHIFT
))&
DVFSC_DVFSLTR0_0_LTS0_1_MASK
)

	)

7611 
	#DVFSC_DVFSLTR0_0_LTS0_2_MASK
 0xF00u

	)

7612 
	#DVFSC_DVFSLTR0_0_LTS0_2_SHIFT
 8

	)

7613 
	#DVFSC_DVFSLTR0_0_LTS0_2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR0_0_LTS0_2_SHIFT
))&
DVFSC_DVFSLTR0_0_LTS0_2_MASK
)

	)

7614 
	#DVFSC_DVFSLTR0_0_LTS0_3_MASK
 0xF000u

	)

7615 
	#DVFSC_DVFSLTR0_0_LTS0_3_SHIFT
 12

	)

7616 
	#DVFSC_DVFSLTR0_0_LTS0_3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR0_0_LTS0_3_SHIFT
))&
DVFSC_DVFSLTR0_0_LTS0_3_MASK
)

	)

7617 
	#DVFSC_DVFSLTR0_0_LTS0_4_MASK
 0xF0000u

	)

7618 
	#DVFSC_DVFSLTR0_0_LTS0_4_SHIFT
 16

	)

7619 
	#DVFSC_DVFSLTR0_0_LTS0_4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR0_0_LTS0_4_SHIFT
))&
DVFSC_DVFSLTR0_0_LTS0_4_MASK
)

	)

7620 
	#DVFSC_DVFSLTR0_0_LTS0_5_MASK
 0xF00000u

	)

7621 
	#DVFSC_DVFSLTR0_0_LTS0_5_SHIFT
 20

	)

7622 
	#DVFSC_DVFSLTR0_0_LTS0_5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR0_0_LTS0_5_SHIFT
))&
DVFSC_DVFSLTR0_0_LTS0_5_MASK
)

	)

7623 
	#DVFSC_DVFSLTR0_0_LTS0_6_MASK
 0xF000000u

	)

7624 
	#DVFSC_DVFSLTR0_0_LTS0_6_SHIFT
 24

	)

7625 
	#DVFSC_DVFSLTR0_0_LTS0_6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR0_0_LTS0_6_SHIFT
))&
DVFSC_DVFSLTR0_0_LTS0_6_MASK
)

	)

7626 
	#DVFSC_DVFSLTR0_0_LTS0_7_MASK
 0xF0000000u

	)

7627 
	#DVFSC_DVFSLTR0_0_LTS0_7_SHIFT
 28

	)

7628 
	#DVFSC_DVFSLTR0_0_LTS0_7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR0_0_LTS0_7_SHIFT
))&
DVFSC_DVFSLTR0_0_LTS0_7_MASK
)

	)

7630 
	#DVFSC_DVFSLTR0_1_LTS0_8_MASK
 0xFu

	)

7631 
	#DVFSC_DVFSLTR0_1_LTS0_8_SHIFT
 0

	)

7632 
	#DVFSC_DVFSLTR0_1_LTS0_8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR0_1_LTS0_8_SHIFT
))&
DVFSC_DVFSLTR0_1_LTS0_8_MASK
)

	)

7633 
	#DVFSC_DVFSLTR0_1_LTS0_9_MASK
 0xF0u

	)

7634 
	#DVFSC_DVFSLTR0_1_LTS0_9_SHIFT
 4

	)

7635 
	#DVFSC_DVFSLTR0_1_LTS0_9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR0_1_LTS0_9_SHIFT
))&
DVFSC_DVFSLTR0_1_LTS0_9_MASK
)

	)

7636 
	#DVFSC_DVFSLTR0_1_LTS0_10_MASK
 0xF00u

	)

7637 
	#DVFSC_DVFSLTR0_1_LTS0_10_SHIFT
 8

	)

7638 
	#DVFSC_DVFSLTR0_1_LTS0_10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR0_1_LTS0_10_SHIFT
))&
DVFSC_DVFSLTR0_1_LTS0_10_MASK
)

	)

7639 
	#DVFSC_DVFSLTR0_1_LTS0_11_MASK
 0xF000u

	)

7640 
	#DVFSC_DVFSLTR0_1_LTS0_11_SHIFT
 12

	)

7641 
	#DVFSC_DVFSLTR0_1_LTS0_11
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR0_1_LTS0_11_SHIFT
))&
DVFSC_DVFSLTR0_1_LTS0_11_MASK
)

	)

7642 
	#DVFSC_DVFSLTR0_1_LTS0_12_MASK
 0xF0000u

	)

7643 
	#DVFSC_DVFSLTR0_1_LTS0_12_SHIFT
 16

	)

7644 
	#DVFSC_DVFSLTR0_1_LTS0_12
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR0_1_LTS0_12_SHIFT
))&
DVFSC_DVFSLTR0_1_LTS0_12_MASK
)

	)

7645 
	#DVFSC_DVFSLTR0_1_LTS0_13_MASK
 0xF00000u

	)

7646 
	#DVFSC_DVFSLTR0_1_LTS0_13_SHIFT
 20

	)

7647 
	#DVFSC_DVFSLTR0_1_LTS0_13
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR0_1_LTS0_13_SHIFT
))&
DVFSC_DVFSLTR0_1_LTS0_13_MASK
)

	)

7648 
	#DVFSC_DVFSLTR0_1_LTS0_14_MASK
 0xF000000u

	)

7649 
	#DVFSC_DVFSLTR0_1_LTS0_14_SHIFT
 24

	)

7650 
	#DVFSC_DVFSLTR0_1_LTS0_14
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR0_1_LTS0_14_SHIFT
))&
DVFSC_DVFSLTR0_1_LTS0_14_MASK
)

	)

7651 
	#DVFSC_DVFSLTR0_1_LTS0_15_MASK
 0xF0000000u

	)

7652 
	#DVFSC_DVFSLTR0_1_LTS0_15_SHIFT
 28

	)

7653 
	#DVFSC_DVFSLTR0_1_LTS0_15
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR0_1_LTS0_15_SHIFT
))&
DVFSC_DVFSLTR0_1_LTS0_15_MASK
)

	)

7655 
	#DVFSC_DVFSLTR1_0_LTS1_0_MASK
 0xFu

	)

7656 
	#DVFSC_DVFSLTR1_0_LTS1_0_SHIFT
 0

	)

7657 
	#DVFSC_DVFSLTR1_0_LTS1_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR1_0_LTS1_0_SHIFT
))&
DVFSC_DVFSLTR1_0_LTS1_0_MASK
)

	)

7658 
	#DVFSC_DVFSLTR1_0_LTS1_1_MASK
 0xF0u

	)

7659 
	#DVFSC_DVFSLTR1_0_LTS1_1_SHIFT
 4

	)

7660 
	#DVFSC_DVFSLTR1_0_LTS1_1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR1_0_LTS1_1_SHIFT
))&
DVFSC_DVFSLTR1_0_LTS1_1_MASK
)

	)

7661 
	#DVFSC_DVFSLTR1_0_LTS1_2_MASK
 0xF00u

	)

7662 
	#DVFSC_DVFSLTR1_0_LTS1_2_SHIFT
 8

	)

7663 
	#DVFSC_DVFSLTR1_0_LTS1_2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR1_0_LTS1_2_SHIFT
))&
DVFSC_DVFSLTR1_0_LTS1_2_MASK
)

	)

7664 
	#DVFSC_DVFSLTR1_0_LTS1_3_MASK
 0xF000u

	)

7665 
	#DVFSC_DVFSLTR1_0_LTS1_3_SHIFT
 12

	)

7666 
	#DVFSC_DVFSLTR1_0_LTS1_3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR1_0_LTS1_3_SHIFT
))&
DVFSC_DVFSLTR1_0_LTS1_3_MASK
)

	)

7667 
	#DVFSC_DVFSLTR1_0_LTS1_4_MASK
 0xF0000u

	)

7668 
	#DVFSC_DVFSLTR1_0_LTS1_4_SHIFT
 16

	)

7669 
	#DVFSC_DVFSLTR1_0_LTS1_4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR1_0_LTS1_4_SHIFT
))&
DVFSC_DVFSLTR1_0_LTS1_4_MASK
)

	)

7670 
	#DVFSC_DVFSLTR1_0_LTS1_5_MASK
 0xF00000u

	)

7671 
	#DVFSC_DVFSLTR1_0_LTS1_5_SHIFT
 20

	)

7672 
	#DVFSC_DVFSLTR1_0_LTS1_5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR1_0_LTS1_5_SHIFT
))&
DVFSC_DVFSLTR1_0_LTS1_5_MASK
)

	)

7673 
	#DVFSC_DVFSLTR1_0_LTS1_6_MASK
 0xF000000u

	)

7674 
	#DVFSC_DVFSLTR1_0_LTS1_6_SHIFT
 24

	)

7675 
	#DVFSC_DVFSLTR1_0_LTS1_6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR1_0_LTS1_6_SHIFT
))&
DVFSC_DVFSLTR1_0_LTS1_6_MASK
)

	)

7676 
	#DVFSC_DVFSLTR1_0_LTS1_7_MASK
 0xF0000000u

	)

7677 
	#DVFSC_DVFSLTR1_0_LTS1_7_SHIFT
 28

	)

7678 
	#DVFSC_DVFSLTR1_0_LTS1_7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR1_0_LTS1_7_SHIFT
))&
DVFSC_DVFSLTR1_0_LTS1_7_MASK
)

	)

7680 
	#DVFSC_DVFSLTR1_1_LTS1_8_MASK
 0xFu

	)

7681 
	#DVFSC_DVFSLTR1_1_LTS1_8_SHIFT
 0

	)

7682 
	#DVFSC_DVFSLTR1_1_LTS1_8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR1_1_LTS1_8_SHIFT
))&
DVFSC_DVFSLTR1_1_LTS1_8_MASK
)

	)

7683 
	#DVFSC_DVFSLTR1_1_LTS1_9_MASK
 0xF0u

	)

7684 
	#DVFSC_DVFSLTR1_1_LTS1_9_SHIFT
 4

	)

7685 
	#DVFSC_DVFSLTR1_1_LTS1_9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR1_1_LTS1_9_SHIFT
))&
DVFSC_DVFSLTR1_1_LTS1_9_MASK
)

	)

7686 
	#DVFSC_DVFSLTR1_1_LTS1_10_MASK
 0xF00u

	)

7687 
	#DVFSC_DVFSLTR1_1_LTS1_10_SHIFT
 8

	)

7688 
	#DVFSC_DVFSLTR1_1_LTS1_10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR1_1_LTS1_10_SHIFT
))&
DVFSC_DVFSLTR1_1_LTS1_10_MASK
)

	)

7689 
	#DVFSC_DVFSLTR1_1_LTS1_11_MASK
 0xF000u

	)

7690 
	#DVFSC_DVFSLTR1_1_LTS1_11_SHIFT
 12

	)

7691 
	#DVFSC_DVFSLTR1_1_LTS1_11
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR1_1_LTS1_11_SHIFT
))&
DVFSC_DVFSLTR1_1_LTS1_11_MASK
)

	)

7692 
	#DVFSC_DVFSLTR1_1_LTS1_12_MASK
 0xF0000u

	)

7693 
	#DVFSC_DVFSLTR1_1_LTS1_12_SHIFT
 16

	)

7694 
	#DVFSC_DVFSLTR1_1_LTS1_12
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR1_1_LTS1_12_SHIFT
))&
DVFSC_DVFSLTR1_1_LTS1_12_MASK
)

	)

7695 
	#DVFSC_DVFSLTR1_1_LTS1_13_MASK
 0xF00000u

	)

7696 
	#DVFSC_DVFSLTR1_1_LTS1_13_SHIFT
 20

	)

7697 
	#DVFSC_DVFSLTR1_1_LTS1_13
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR1_1_LTS1_13_SHIFT
))&
DVFSC_DVFSLTR1_1_LTS1_13_MASK
)

	)

7698 
	#DVFSC_DVFSLTR1_1_LTS1_14_MASK
 0xF000000u

	)

7699 
	#DVFSC_DVFSLTR1_1_LTS1_14_SHIFT
 24

	)

7700 
	#DVFSC_DVFSLTR1_1_LTS1_14
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR1_1_LTS1_14_SHIFT
))&
DVFSC_DVFSLTR1_1_LTS1_14_MASK
)

	)

7701 
	#DVFSC_DVFSLTR1_1_LTS1_15_MASK
 0xF0000000u

	)

7702 
	#DVFSC_DVFSLTR1_1_LTS1_15_SHIFT
 28

	)

7703 
	#DVFSC_DVFSLTR1_1_LTS1_15
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSLTR1_1_LTS1_15_SHIFT
))&
DVFSC_DVFSLTR1_1_LTS1_15_MASK
)

	)

7705 
	#DVFSC_DVFSPT0_FPTN0_MASK
 0x1FFFFu

	)

7706 
	#DVFSC_DVFSPT0_FPTN0_SHIFT
 0

	)

7707 
	#DVFSC_DVFSPT0_FPTN0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSPT0_FPTN0_SHIFT
))&
DVFSC_DVFSPT0_FPTN0_MASK
)

	)

7708 
	#DVFSC_DVFSPT0_PT0A_MASK
 0x20000u

	)

7709 
	#DVFSC_DVFSPT0_PT0A_SHIFT
 17

	)

7711 
	#DVFSC_DVFSPT1_FPTN1_MASK
 0x1FFFFu

	)

7712 
	#DVFSC_DVFSPT1_FPTN1_SHIFT
 0

	)

7713 
	#DVFSC_DVFSPT1_FPTN1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSPT1_FPTN1_SHIFT
))&
DVFSC_DVFSPT1_FPTN1_MASK
)

	)

7714 
	#DVFSC_DVFSPT1_PT1A_MASK
 0x20000u

	)

7715 
	#DVFSC_DVFSPT1_PT1A_SHIFT
 17

	)

7717 
	#DVFSC_DVFSPT2_FPTN2_MASK
 0x1FFFFu

	)

7718 
	#DVFSC_DVFSPT2_FPTN2_SHIFT
 0

	)

7719 
	#DVFSC_DVFSPT2_FPTN2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSPT2_FPTN2_SHIFT
))&
DVFSC_DVFSPT2_FPTN2_MASK
)

	)

7720 
	#DVFSC_DVFSPT2_PT2A_MASK
 0x20000u

	)

7721 
	#DVFSC_DVFSPT2_PT2A_SHIFT
 17

	)

7722 
	#DVFSC_DVFSPT2_P2THR_MASK
 0xFC000000u

	)

7723 
	#DVFSC_DVFSPT2_P2THR_SHIFT
 26

	)

7724 
	#DVFSC_DVFSPT2_P2THR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSPT2_P2THR_SHIFT
))&
DVFSC_DVFSPT2_P2THR_MASK
)

	)

7726 
	#DVFSC_DVFSPT3_FPTN3_MASK
 0x1FFFFu

	)

7727 
	#DVFSC_DVFSPT3_FPTN3_SHIFT
 0

	)

7728 
	#DVFSC_DVFSPT3_FPTN3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
DVFSC_DVFSPT3_FPTN3_SHIFT
))&
DVFSC_DVFSPT3_FPTN3_MASK
)

	)

7729 
	#DVFSC_DVFSPT3_PT3A_MASK
 0x20000u

	)

7730 
	#DVFSC_DVFSPT3_PT3A_SHIFT
 17

	)

7738 
	#DVFSC_BASE
 (0x420DC180u)

	)

7740 
	#DVFSC
 ((
DVFSC_Ty≥
 *)
DVFSC_BASE
)

	)

7741 
	#DVFSC_BASE_PTR
 (
DVFSC
)

	)

7743 
	#DVFSC_BASE_ADDRS
 { 
DVFSC_BASE
 }

	)

7745 
	#DVFSC_BASE_PTRS
 { 
DVFSC
 }

	)

7758 
	#DVFSC_THRS
 
	`DVFSC_THRS_REG
(
DVFSC_BASE_PTR
)

	)

7759 
	#DVFSC_COUN
 
	`DVFSC_COUN_REG
(
DVFSC_BASE_PTR
)

	)

7760 
	#DVFSC_SIG1
 
	`DVFSC_SIG1_REG
(
DVFSC_BASE_PTR
)

	)

7761 
	#DVFSC_DVFSSIG0
 
	`DVFSC_DVFSSIG0_REG
(
DVFSC_BASE_PTR
)

	)

7762 
	#DVFSC_DVFSGPC0
 
	`DVFSC_DVFSGPC0_REG
(
DVFSC_BASE_PTR
)

	)

7763 
	#DVFSC_DVFSGPC1
 
	`DVFSC_DVFSGPC1_REG
(
DVFSC_BASE_PTR
)

	)

7764 
	#DVFSC_DVFSGPBT
 
	`DVFSC_DVFSGPBT_REG
(
DVFSC_BASE_PTR
)

	)

7765 
	#DVFSC_DVFSEMAC
 
	`DVFSC_DVFSEMAC_REG
(
DVFSC_BASE_PTR
)

	)

7766 
	#DVFSC_CNTR
 
	`DVFSC_CNTR_REG
(
DVFSC_BASE_PTR
)

	)

7767 
	#DVFSC_DVFSLTR0_0
 
	`DVFSC_DVFSLTR0_0_REG
(
DVFSC_BASE_PTR
)

	)

7768 
	#DVFSC_DVFSLTR0_1
 
	`DVFSC_DVFSLTR0_1_REG
(
DVFSC_BASE_PTR
)

	)

7769 
	#DVFSC_DVFSLTR1_0
 
	`DVFSC_DVFSLTR1_0_REG
(
DVFSC_BASE_PTR
)

	)

7770 
	#DVFSC_DVFSLTR1_1
 
	`DVFSC_DVFSLTR1_1_REG
(
DVFSC_BASE_PTR
)

	)

7771 
	#DVFSC_DVFSPT0
 
	`DVFSC_DVFSPT0_REG
(
DVFSC_BASE_PTR
)

	)

7772 
	#DVFSC_DVFSPT1
 
	`DVFSC_DVFSPT1_REG
(
DVFSC_BASE_PTR
)

	)

7773 
	#DVFSC_DVFSPT2
 
	`DVFSC_DVFSPT2_REG
(
DVFSC_BASE_PTR
)

	)

7774 
	#DVFSC_DVFSPT3
 
	`DVFSC_DVFSPT3_REG
(
DVFSC_BASE_PTR
)

	)

7795 
__I
 
uöt32_t
 
	mRXDATA
;

7796 
__O
 
uöt32_t
 
	mTXDATA
;

7797 
__IO
 
uöt32_t
 
	mCONREG
;

7798 
__IO
 
uöt32_t
 
	mCONFIGREG
;

7799 
__IO
 
uöt32_t
 
	mINTREG
;

7800 
__IO
 
uöt32_t
 
	mDMAREG
;

7801 
__IO
 
uöt32_t
 
	mSTATREG
;

7802 
__IO
 
uöt32_t
 
	mPERIODREG
;

7803 
__IO
 
uöt32_t
 
	mTESTREG
;

7804 
uöt8_t
 
	mRESERVED_0
[28];

7805 
__O
 
uöt32_t
 
	mMSGDATA
;

7806 } 
	tECSPI_Ty≥
, *
	tECSPI_MemM≠På
;

7818 
	#ECSPI_RXDATA_REG
(
ba£
Ë((ba£)->
RXDATA
)

	)

7819 
	#ECSPI_TXDATA_REG
(
ba£
Ë((ba£)->
TXDATA
)

	)

7820 
	#ECSPI_CONREG_REG
(
ba£
Ë((ba£)->
CONREG
)

	)

7821 
	#ECSPI_CONFIGREG_REG
(
ba£
Ë((ba£)->
CONFIGREG
)

	)

7822 
	#ECSPI_INTREG_REG
(
ba£
Ë((ba£)->
INTREG
)

	)

7823 
	#ECSPI_DMAREG_REG
(
ba£
Ë((ba£)->
DMAREG
)

	)

7824 
	#ECSPI_STATREG_REG
(
ba£
Ë((ba£)->
STATREG
)

	)

7825 
	#ECSPI_PERIODREG_REG
(
ba£
Ë((ba£)->
PERIODREG
)

	)

7826 
	#ECSPI_TESTREG_REG
(
ba£
Ë((ba£)->
TESTREG
)

	)

7827 
	#ECSPI_MSGDATA_REG
(
ba£
Ë((ba£)->
MSGDATA
)

	)

7843 
	#ECSPI_RXDATA_ECSPI_RXDATA_MASK
 0xFFFFFFFFu

	)

7844 
	#ECSPI_RXDATA_ECSPI_RXDATA_SHIFT
 0

	)

7845 
	#ECSPI_RXDATA_ECSPI_RXDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_RXDATA_ECSPI_RXDATA_SHIFT
))&
ECSPI_RXDATA_ECSPI_RXDATA_MASK
)

	)

7847 
	#ECSPI_TXDATA_ECSPI_TXDATA_MASK
 0xFFFFFFFFu

	)

7848 
	#ECSPI_TXDATA_ECSPI_TXDATA_SHIFT
 0

	)

7849 
	#ECSPI_TXDATA_ECSPI_TXDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_TXDATA_ECSPI_TXDATA_SHIFT
))&
ECSPI_TXDATA_ECSPI_TXDATA_MASK
)

	)

7851 
	#ECSPI_CONREG_EN_MASK
 0x1u

	)

7852 
	#ECSPI_CONREG_EN_SHIFT
 0

	)

7853 
	#ECSPI_CONREG_HT_MASK
 0x2u

	)

7854 
	#ECSPI_CONREG_HT_SHIFT
 1

	)

7855 
	#ECSPI_CONREG_XCH_MASK
 0x4u

	)

7856 
	#ECSPI_CONREG_XCH_SHIFT
 2

	)

7857 
	#ECSPI_CONREG_SMC_MASK
 0x8u

	)

7858 
	#ECSPI_CONREG_SMC_SHIFT
 3

	)

7859 
	#ECSPI_CONREG_CHANNEL_MODE_MASK
 0xF0u

	)

7860 
	#ECSPI_CONREG_CHANNEL_MODE_SHIFT
 4

	)

7861 
	#ECSPI_CONREG_CHANNEL_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_CONREG_CHANNEL_MODE_SHIFT
))&
ECSPI_CONREG_CHANNEL_MODE_MASK
)

	)

7862 
	#ECSPI_CONREG_POST_DIVIDER_MASK
 0xF00u

	)

7863 
	#ECSPI_CONREG_POST_DIVIDER_SHIFT
 8

	)

7864 
	#ECSPI_CONREG_POST_DIVIDER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_CONREG_POST_DIVIDER_SHIFT
))&
ECSPI_CONREG_POST_DIVIDER_MASK
)

	)

7865 
	#ECSPI_CONREG_PRE_DIVIDER_MASK
 0xF000u

	)

7866 
	#ECSPI_CONREG_PRE_DIVIDER_SHIFT
 12

	)

7867 
	#ECSPI_CONREG_PRE_DIVIDER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_CONREG_PRE_DIVIDER_SHIFT
))&
ECSPI_CONREG_PRE_DIVIDER_MASK
)

	)

7868 
	#ECSPI_CONREG_DRCTL_MASK
 0x30000u

	)

7869 
	#ECSPI_CONREG_DRCTL_SHIFT
 16

	)

7870 
	#ECSPI_CONREG_DRCTL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_CONREG_DRCTL_SHIFT
))&
ECSPI_CONREG_DRCTL_MASK
)

	)

7871 
	#ECSPI_CONREG_CHANNEL_SELECT_MASK
 0xC0000u

	)

7872 
	#ECSPI_CONREG_CHANNEL_SELECT_SHIFT
 18

	)

7873 
	#ECSPI_CONREG_CHANNEL_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_CONREG_CHANNEL_SELECT_SHIFT
))&
ECSPI_CONREG_CHANNEL_SELECT_MASK
)

	)

7874 
	#ECSPI_CONREG_BURST_LENGTH_MASK
 0xFFF00000u

	)

7875 
	#ECSPI_CONREG_BURST_LENGTH_SHIFT
 20

	)

7876 
	#ECSPI_CONREG_BURST_LENGTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_CONREG_BURST_LENGTH_SHIFT
))&
ECSPI_CONREG_BURST_LENGTH_MASK
)

	)

7878 
	#ECSPI_CONFIGREG_SCLK_PHA_MASK
 0xFu

	)

7879 
	#ECSPI_CONFIGREG_SCLK_PHA_SHIFT
 0

	)

7880 
	#ECSPI_CONFIGREG_SCLK_PHA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_CONFIGREG_SCLK_PHA_SHIFT
))&
ECSPI_CONFIGREG_SCLK_PHA_MASK
)

	)

7881 
	#ECSPI_CONFIGREG_SCLK_POL_MASK
 0xF0u

	)

7882 
	#ECSPI_CONFIGREG_SCLK_POL_SHIFT
 4

	)

7883 
	#ECSPI_CONFIGREG_SCLK_POL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_CONFIGREG_SCLK_POL_SHIFT
))&
ECSPI_CONFIGREG_SCLK_POL_MASK
)

	)

7884 
	#ECSPI_CONFIGREG_SS_CTL_MASK
 0xF00u

	)

7885 
	#ECSPI_CONFIGREG_SS_CTL_SHIFT
 8

	)

7886 
	#ECSPI_CONFIGREG_SS_CTL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_CONFIGREG_SS_CTL_SHIFT
))&
ECSPI_CONFIGREG_SS_CTL_MASK
)

	)

7887 
	#ECSPI_CONFIGREG_SS_POL_MASK
 0xF000u

	)

7888 
	#ECSPI_CONFIGREG_SS_POL_SHIFT
 12

	)

7889 
	#ECSPI_CONFIGREG_SS_POL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_CONFIGREG_SS_POL_SHIFT
))&
ECSPI_CONFIGREG_SS_POL_MASK
)

	)

7890 
	#ECSPI_CONFIGREG_DATA_CTL_MASK
 0xF0000u

	)

7891 
	#ECSPI_CONFIGREG_DATA_CTL_SHIFT
 16

	)

7892 
	#ECSPI_CONFIGREG_DATA_CTL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_CONFIGREG_DATA_CTL_SHIFT
))&
ECSPI_CONFIGREG_DATA_CTL_MASK
)

	)

7893 
	#ECSPI_CONFIGREG_SCLK_CTL_MASK
 0xF00000u

	)

7894 
	#ECSPI_CONFIGREG_SCLK_CTL_SHIFT
 20

	)

7895 
	#ECSPI_CONFIGREG_SCLK_CTL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_CONFIGREG_SCLK_CTL_SHIFT
))&
ECSPI_CONFIGREG_SCLK_CTL_MASK
)

	)

7896 
	#ECSPI_CONFIGREG_HT_LENGTH_MASK
 0x1F000000u

	)

7897 
	#ECSPI_CONFIGREG_HT_LENGTH_SHIFT
 24

	)

7898 
	#ECSPI_CONFIGREG_HT_LENGTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_CONFIGREG_HT_LENGTH_SHIFT
))&
ECSPI_CONFIGREG_HT_LENGTH_MASK
)

	)

7900 
	#ECSPI_INTREG_TEEN_MASK
 0x1u

	)

7901 
	#ECSPI_INTREG_TEEN_SHIFT
 0

	)

7902 
	#ECSPI_INTREG_TDREN_MASK
 0x2u

	)

7903 
	#ECSPI_INTREG_TDREN_SHIFT
 1

	)

7904 
	#ECSPI_INTREG_TFEN_MASK
 0x4u

	)

7905 
	#ECSPI_INTREG_TFEN_SHIFT
 2

	)

7906 
	#ECSPI_INTREG_RREN_MASK
 0x8u

	)

7907 
	#ECSPI_INTREG_RREN_SHIFT
 3

	)

7908 
	#ECSPI_INTREG_RDREN_MASK
 0x10u

	)

7909 
	#ECSPI_INTREG_RDREN_SHIFT
 4

	)

7910 
	#ECSPI_INTREG_RFEN_MASK
 0x20u

	)

7911 
	#ECSPI_INTREG_RFEN_SHIFT
 5

	)

7912 
	#ECSPI_INTREG_ROEN_MASK
 0x40u

	)

7913 
	#ECSPI_INTREG_ROEN_SHIFT
 6

	)

7914 
	#ECSPI_INTREG_TCEN_MASK
 0x80u

	)

7915 
	#ECSPI_INTREG_TCEN_SHIFT
 7

	)

7917 
	#ECSPI_DMAREG_TX_THRESHOLD_MASK
 0x3Fu

	)

7918 
	#ECSPI_DMAREG_TX_THRESHOLD_SHIFT
 0

	)

7919 
	#ECSPI_DMAREG_TX_THRESHOLD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_DMAREG_TX_THRESHOLD_SHIFT
))&
ECSPI_DMAREG_TX_THRESHOLD_MASK
)

	)

7920 
	#ECSPI_DMAREG_TEDEN_MASK
 0x80u

	)

7921 
	#ECSPI_DMAREG_TEDEN_SHIFT
 7

	)

7922 
	#ECSPI_DMAREG_RX_THRESHOLD_MASK
 0x3F0000u

	)

7923 
	#ECSPI_DMAREG_RX_THRESHOLD_SHIFT
 16

	)

7924 
	#ECSPI_DMAREG_RX_THRESHOLD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_DMAREG_RX_THRESHOLD_SHIFT
))&
ECSPI_DMAREG_RX_THRESHOLD_MASK
)

	)

7925 
	#ECSPI_DMAREG_RXDEN_MASK
 0x800000u

	)

7926 
	#ECSPI_DMAREG_RXDEN_SHIFT
 23

	)

7927 
	#ECSPI_DMAREG_RX_DMA_LENGTH_MASK
 0x3F000000u

	)

7928 
	#ECSPI_DMAREG_RX_DMA_LENGTH_SHIFT
 24

	)

7929 
	#ECSPI_DMAREG_RX_DMA_LENGTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_DMAREG_RX_DMA_LENGTH_SHIFT
))&
ECSPI_DMAREG_RX_DMA_LENGTH_MASK
)

	)

7930 
	#ECSPI_DMAREG_RXTDEN_MASK
 0x80000000u

	)

7931 
	#ECSPI_DMAREG_RXTDEN_SHIFT
 31

	)

7933 
	#ECSPI_STATREG_TE_MASK
 0x1u

	)

7934 
	#ECSPI_STATREG_TE_SHIFT
 0

	)

7935 
	#ECSPI_STATREG_TDR_MASK
 0x2u

	)

7936 
	#ECSPI_STATREG_TDR_SHIFT
 1

	)

7937 
	#ECSPI_STATREG_TF_MASK
 0x4u

	)

7938 
	#ECSPI_STATREG_TF_SHIFT
 2

	)

7939 
	#ECSPI_STATREG_RR_MASK
 0x8u

	)

7940 
	#ECSPI_STATREG_RR_SHIFT
 3

	)

7941 
	#ECSPI_STATREG_RDR_MASK
 0x10u

	)

7942 
	#ECSPI_STATREG_RDR_SHIFT
 4

	)

7943 
	#ECSPI_STATREG_RF_MASK
 0x20u

	)

7944 
	#ECSPI_STATREG_RF_SHIFT
 5

	)

7945 
	#ECSPI_STATREG_RO_MASK
 0x40u

	)

7946 
	#ECSPI_STATREG_RO_SHIFT
 6

	)

7947 
	#ECSPI_STATREG_TC_MASK
 0x80u

	)

7948 
	#ECSPI_STATREG_TC_SHIFT
 7

	)

7950 
	#ECSPI_PERIODREG_SAMPLE_PERIOD_MASK
 0x7FFFu

	)

7951 
	#ECSPI_PERIODREG_SAMPLE_PERIOD_SHIFT
 0

	)

7952 
	#ECSPI_PERIODREG_SAMPLE_PERIOD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_PERIODREG_SAMPLE_PERIOD_SHIFT
))&
ECSPI_PERIODREG_SAMPLE_PERIOD_MASK
)

	)

7953 
	#ECSPI_PERIODREG_CSRC_MASK
 0x8000u

	)

7954 
	#ECSPI_PERIODREG_CSRC_SHIFT
 15

	)

7955 
	#ECSPI_PERIODREG_CSD_CTL_MASK
 0x3F0000u

	)

7956 
	#ECSPI_PERIODREG_CSD_CTL_SHIFT
 16

	)

7957 
	#ECSPI_PERIODREG_CSD_CTL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_PERIODREG_CSD_CTL_SHIFT
))&
ECSPI_PERIODREG_CSD_CTL_MASK
)

	)

7959 
	#ECSPI_TESTREG_TXCNT_MASK
 0x7Fu

	)

7960 
	#ECSPI_TESTREG_TXCNT_SHIFT
 0

	)

7961 
	#ECSPI_TESTREG_TXCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_TESTREG_TXCNT_SHIFT
))&
ECSPI_TESTREG_TXCNT_MASK
)

	)

7962 
	#ECSPI_TESTREG_RXCNT_MASK
 0x7F00u

	)

7963 
	#ECSPI_TESTREG_RXCNT_SHIFT
 8

	)

7964 
	#ECSPI_TESTREG_RXCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_TESTREG_RXCNT_SHIFT
))&
ECSPI_TESTREG_RXCNT_MASK
)

	)

7965 
	#ECSPI_TESTREG_LBC_MASK
 0x80000000u

	)

7966 
	#ECSPI_TESTREG_LBC_SHIFT
 31

	)

7968 
	#ECSPI_MSGDATA_ECSPI_MSGDATA_MASK
 0xFFFFFFFFu

	)

7969 
	#ECSPI_MSGDATA_ECSPI_MSGDATA_SHIFT
 0

	)

7970 
	#ECSPI_MSGDATA_ECSPI_MSGDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ECSPI_MSGDATA_ECSPI_MSGDATA_SHIFT
))&
ECSPI_MSGDATA_ECSPI_MSGDATA_MASK
)

	)

7978 
	#ECSPI1_BASE
 (0x42008000u)

	)

7980 
	#ECSPI1
 ((
ECSPI_Ty≥
 *)
ECSPI1_BASE
)

	)

7981 
	#ECSPI1_BASE_PTR
 (
ECSPI1
)

	)

7983 
	#ECSPI2_BASE
 (0x4200C000u)

	)

7985 
	#ECSPI2
 ((
ECSPI_Ty≥
 *)
ECSPI2_BASE
)

	)

7986 
	#ECSPI2_BASE_PTR
 (
ECSPI2
)

	)

7988 
	#ECSPI3_BASE
 (0x42010000u)

	)

7990 
	#ECSPI3
 ((
ECSPI_Ty≥
 *)
ECSPI3_BASE
)

	)

7991 
	#ECSPI3_BASE_PTR
 (
ECSPI3
)

	)

7993 
	#ECSPI4_BASE
 (0x42014000u)

	)

7995 
	#ECSPI4
 ((
ECSPI_Ty≥
 *)
ECSPI4_BASE
)

	)

7996 
	#ECSPI4_BASE_PTR
 (
ECSPI4
)

	)

7998 
	#ECSPI5_BASE
 (0x4228C000u)

	)

8000 
	#ECSPI5
 ((
ECSPI_Ty≥
 *)
ECSPI5_BASE
)

	)

8001 
	#ECSPI5_BASE_PTR
 (
ECSPI5
)

	)

8003 
	#ECSPI_BASE_ADDRS
 { 
ECSPI1_BASE
, 
ECSPI2_BASE
, 
ECSPI3_BASE
, 
ECSPI4_BASE
, 
ECSPI5_BASE
 }

	)

8005 
	#ECSPI_BASE_PTRS
 { 
ECSPI1
, 
ECSPI2
, 
ECSPI3
, 
ECSPI4
, 
ECSPI5
 }

	)

8007 
	#ECSPI_IRQS
 { 
eCSPI1_IRQn
, 
eCSPI2_IRQn
, 
eCSPI3_IRQn
, 
eCSPI4_IRQn
, 
eCSPI5_IRQn
 }

	)

8020 
	#ECSPI1_RXDATA
 
	`ECSPI_RXDATA_REG
(
ECSPI1_BASE_PTR
)

	)

8021 
	#ECSPI1_TXDATA
 
	`ECSPI_TXDATA_REG
(
ECSPI1_BASE_PTR
)

	)

8022 
	#ECSPI1_CONREG
 
	`ECSPI_CONREG_REG
(
ECSPI1_BASE_PTR
)

	)

8023 
	#ECSPI1_CONFIGREG
 
	`ECSPI_CONFIGREG_REG
(
ECSPI1_BASE_PTR
)

	)

8024 
	#ECSPI1_INTREG
 
	`ECSPI_INTREG_REG
(
ECSPI1_BASE_PTR
)

	)

8025 
	#ECSPI1_DMAREG
 
	`ECSPI_DMAREG_REG
(
ECSPI1_BASE_PTR
)

	)

8026 
	#ECSPI1_STATREG
 
	`ECSPI_STATREG_REG
(
ECSPI1_BASE_PTR
)

	)

8027 
	#ECSPI1_PERIODREG
 
	`ECSPI_PERIODREG_REG
(
ECSPI1_BASE_PTR
)

	)

8028 
	#ECSPI1_TESTREG
 
	`ECSPI_TESTREG_REG
(
ECSPI1_BASE_PTR
)

	)

8029 
	#ECSPI1_MSGDATA
 
	`ECSPI_MSGDATA_REG
(
ECSPI1_BASE_PTR
)

	)

8031 
	#ECSPI2_RXDATA
 
	`ECSPI_RXDATA_REG
(
ECSPI2_BASE_PTR
)

	)

8032 
	#ECSPI2_TXDATA
 
	`ECSPI_TXDATA_REG
(
ECSPI2_BASE_PTR
)

	)

8033 
	#ECSPI2_CONREG
 
	`ECSPI_CONREG_REG
(
ECSPI2_BASE_PTR
)

	)

8034 
	#ECSPI2_CONFIGREG
 
	`ECSPI_CONFIGREG_REG
(
ECSPI2_BASE_PTR
)

	)

8035 
	#ECSPI2_INTREG
 
	`ECSPI_INTREG_REG
(
ECSPI2_BASE_PTR
)

	)

8036 
	#ECSPI2_DMAREG
 
	`ECSPI_DMAREG_REG
(
ECSPI2_BASE_PTR
)

	)

8037 
	#ECSPI2_STATREG
 
	`ECSPI_STATREG_REG
(
ECSPI2_BASE_PTR
)

	)

8038 
	#ECSPI2_PERIODREG
 
	`ECSPI_PERIODREG_REG
(
ECSPI2_BASE_PTR
)

	)

8039 
	#ECSPI2_TESTREG
 
	`ECSPI_TESTREG_REG
(
ECSPI2_BASE_PTR
)

	)

8040 
	#ECSPI2_MSGDATA
 
	`ECSPI_MSGDATA_REG
(
ECSPI2_BASE_PTR
)

	)

8042 
	#ECSPI3_RXDATA
 
	`ECSPI_RXDATA_REG
(
ECSPI3_BASE_PTR
)

	)

8043 
	#ECSPI3_TXDATA
 
	`ECSPI_TXDATA_REG
(
ECSPI3_BASE_PTR
)

	)

8044 
	#ECSPI3_CONREG
 
	`ECSPI_CONREG_REG
(
ECSPI3_BASE_PTR
)

	)

8045 
	#ECSPI3_CONFIGREG
 
	`ECSPI_CONFIGREG_REG
(
ECSPI3_BASE_PTR
)

	)

8046 
	#ECSPI3_INTREG
 
	`ECSPI_INTREG_REG
(
ECSPI3_BASE_PTR
)

	)

8047 
	#ECSPI3_DMAREG
 
	`ECSPI_DMAREG_REG
(
ECSPI3_BASE_PTR
)

	)

8048 
	#ECSPI3_STATREG
 
	`ECSPI_STATREG_REG
(
ECSPI3_BASE_PTR
)

	)

8049 
	#ECSPI3_PERIODREG
 
	`ECSPI_PERIODREG_REG
(
ECSPI3_BASE_PTR
)

	)

8050 
	#ECSPI3_TESTREG
 
	`ECSPI_TESTREG_REG
(
ECSPI3_BASE_PTR
)

	)

8051 
	#ECSPI3_MSGDATA
 
	`ECSPI_MSGDATA_REG
(
ECSPI3_BASE_PTR
)

	)

8053 
	#ECSPI4_RXDATA
 
	`ECSPI_RXDATA_REG
(
ECSPI4_BASE_PTR
)

	)

8054 
	#ECSPI4_TXDATA
 
	`ECSPI_TXDATA_REG
(
ECSPI4_BASE_PTR
)

	)

8055 
	#ECSPI4_CONREG
 
	`ECSPI_CONREG_REG
(
ECSPI4_BASE_PTR
)

	)

8056 
	#ECSPI4_CONFIGREG
 
	`ECSPI_CONFIGREG_REG
(
ECSPI4_BASE_PTR
)

	)

8057 
	#ECSPI4_INTREG
 
	`ECSPI_INTREG_REG
(
ECSPI4_BASE_PTR
)

	)

8058 
	#ECSPI4_DMAREG
 
	`ECSPI_DMAREG_REG
(
ECSPI4_BASE_PTR
)

	)

8059 
	#ECSPI4_STATREG
 
	`ECSPI_STATREG_REG
(
ECSPI4_BASE_PTR
)

	)

8060 
	#ECSPI4_PERIODREG
 
	`ECSPI_PERIODREG_REG
(
ECSPI4_BASE_PTR
)

	)

8061 
	#ECSPI4_TESTREG
 
	`ECSPI_TESTREG_REG
(
ECSPI4_BASE_PTR
)

	)

8062 
	#ECSPI4_MSGDATA
 
	`ECSPI_MSGDATA_REG
(
ECSPI4_BASE_PTR
)

	)

8064 
	#ECSPI5_RXDATA
 
	`ECSPI_RXDATA_REG
(
ECSPI5_BASE_PTR
)

	)

8065 
	#ECSPI5_TXDATA
 
	`ECSPI_TXDATA_REG
(
ECSPI5_BASE_PTR
)

	)

8066 
	#ECSPI5_CONREG
 
	`ECSPI_CONREG_REG
(
ECSPI5_BASE_PTR
)

	)

8067 
	#ECSPI5_CONFIGREG
 
	`ECSPI_CONFIGREG_REG
(
ECSPI5_BASE_PTR
)

	)

8068 
	#ECSPI5_INTREG
 
	`ECSPI_INTREG_REG
(
ECSPI5_BASE_PTR
)

	)

8069 
	#ECSPI5_DMAREG
 
	`ECSPI_DMAREG_REG
(
ECSPI5_BASE_PTR
)

	)

8070 
	#ECSPI5_STATREG
 
	`ECSPI_STATREG_REG
(
ECSPI5_BASE_PTR
)

	)

8071 
	#ECSPI5_PERIODREG
 
	`ECSPI_PERIODREG_REG
(
ECSPI5_BASE_PTR
)

	)

8072 
	#ECSPI5_TESTREG
 
	`ECSPI_TESTREG_REG
(
ECSPI5_BASE_PTR
)

	)

8073 
	#ECSPI5_MSGDATA
 
	`ECSPI_MSGDATA_REG
(
ECSPI5_BASE_PTR
)

	)

8095 
__IO
 
uöt32_t
 
	mCSGCR1
;

8096 
__IO
 
uöt32_t
 
	mCSGCR2
;

8097 
__IO
 
uöt32_t
 
	mCSRCR1
;

8098 
__IO
 
uöt32_t
 
	mCSRCR2
;

8099 
__IO
 
uöt32_t
 
	mCSWCR1
;

8100 
__IO
 
uöt32_t
 
	mCSWCR2
;

8101 } 
	mCS
[6];

8102 
__IO
 
uöt32_t
 
	mWCR
;

8103 
__IO
 
uöt32_t
 
	mDCR
;

8104 
__I
 
uöt32_t
 
	mDSR
;

8105 
__IO
 
uöt32_t
 
	mWIAR
;

8106 
__IO
 
uöt32_t
 
	mEAR
;

8107 } 
	tEIM_Ty≥
, *
	tEIM_MemM≠På
;

8119 
	#EIM_CSGCR1_REG
(
ba£
,
ödex
Ë((ba£)->
CS
[ödex].
CSGCR1
)

	)

8120 
	#EIM_CSGCR2_REG
(
ba£
,
ödex
Ë((ba£)->
CS
[ödex].
CSGCR2
)

	)

8121 
	#EIM_CSRCR1_REG
(
ba£
,
ödex
Ë((ba£)->
CS
[ödex].
CSRCR1
)

	)

8122 
	#EIM_CSRCR2_REG
(
ba£
,
ödex
Ë((ba£)->
CS
[ödex].
CSRCR2
)

	)

8123 
	#EIM_CSWCR1_REG
(
ba£
,
ödex
Ë((ba£)->
CS
[ödex].
CSWCR1
)

	)

8124 
	#EIM_CSWCR2_REG
(
ba£
,
ödex
Ë((ba£)->
CS
[ödex].
CSWCR2
)

	)

8125 
	#EIM_WCR_REG
(
ba£
Ë((ba£)->
WCR
)

	)

8126 
	#EIM_DCR_REG
(
ba£
Ë((ba£)->
DCR
)

	)

8127 
	#EIM_DSR_REG
(
ba£
Ë((ba£)->
DSR
)

	)

8128 
	#EIM_WIAR_REG
(
ba£
Ë((ba£)->
WIAR
)

	)

8129 
	#EIM_EAR_REG
(
ba£
Ë((ba£)->
EAR
)

	)

8145 
	#EIM_CSGCR1_CSEN_MASK
 0x1u

	)

8146 
	#EIM_CSGCR1_CSEN_SHIFT
 0

	)

8147 
	#EIM_CSGCR1_SWR_MASK
 0x2u

	)

8148 
	#EIM_CSGCR1_SWR_SHIFT
 1

	)

8149 
	#EIM_CSGCR1_SRD_MASK
 0x4u

	)

8150 
	#EIM_CSGCR1_SRD_SHIFT
 2

	)

8151 
	#EIM_CSGCR1_MUM_MASK
 0x8u

	)

8152 
	#EIM_CSGCR1_MUM_SHIFT
 3

	)

8153 
	#EIM_CSGCR1_WFL_MASK
 0x10u

	)

8154 
	#EIM_CSGCR1_WFL_SHIFT
 4

	)

8155 
	#EIM_CSGCR1_RFL_MASK
 0x20u

	)

8156 
	#EIM_CSGCR1_RFL_SHIFT
 5

	)

8157 
	#EIM_CSGCR1_CRE_MASK
 0x40u

	)

8158 
	#EIM_CSGCR1_CRE_SHIFT
 6

	)

8159 
	#EIM_CSGCR1_CREP_MASK
 0x80u

	)

8160 
	#EIM_CSGCR1_CREP_SHIFT
 7

	)

8161 
	#EIM_CSGCR1_BL_MASK
 0x700u

	)

8162 
	#EIM_CSGCR1_BL_SHIFT
 8

	)

8163 
	#EIM_CSGCR1_BL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSGCR1_BL_SHIFT
))&
EIM_CSGCR1_BL_MASK
)

	)

8164 
	#EIM_CSGCR1_WC_MASK
 0x800u

	)

8165 
	#EIM_CSGCR1_WC_SHIFT
 11

	)

8166 
	#EIM_CSGCR1_BCD_MASK
 0x3000u

	)

8167 
	#EIM_CSGCR1_BCD_SHIFT
 12

	)

8168 
	#EIM_CSGCR1_BCD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSGCR1_BCD_SHIFT
))&
EIM_CSGCR1_BCD_MASK
)

	)

8169 
	#EIM_CSGCR1_BCS_MASK
 0xC000u

	)

8170 
	#EIM_CSGCR1_BCS_SHIFT
 14

	)

8171 
	#EIM_CSGCR1_BCS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSGCR1_BCS_SHIFT
))&
EIM_CSGCR1_BCS_MASK
)

	)

8172 
	#EIM_CSGCR1_DSZ_MASK
 0x70000u

	)

8173 
	#EIM_CSGCR1_DSZ_SHIFT
 16

	)

8174 
	#EIM_CSGCR1_DSZ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSGCR1_DSZ_SHIFT
))&
EIM_CSGCR1_DSZ_MASK
)

	)

8175 
	#EIM_CSGCR1_SP_MASK
 0x80000u

	)

8176 
	#EIM_CSGCR1_SP_SHIFT
 19

	)

8177 
	#EIM_CSGCR1_CSREC_MASK
 0x700000u

	)

8178 
	#EIM_CSGCR1_CSREC_SHIFT
 20

	)

8179 
	#EIM_CSGCR1_CSREC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSGCR1_CSREC_SHIFT
))&
EIM_CSGCR1_CSREC_MASK
)

	)

8180 
	#EIM_CSGCR1_AUS_MASK
 0x800000u

	)

8181 
	#EIM_CSGCR1_AUS_SHIFT
 23

	)

8182 
	#EIM_CSGCR1_GBC_MASK
 0x7000000u

	)

8183 
	#EIM_CSGCR1_GBC_SHIFT
 24

	)

8184 
	#EIM_CSGCR1_GBC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSGCR1_GBC_SHIFT
))&
EIM_CSGCR1_GBC_MASK
)

	)

8185 
	#EIM_CSGCR1_WP_MASK
 0x8000000u

	)

8186 
	#EIM_CSGCR1_WP_SHIFT
 27

	)

8187 
	#EIM_CSGCR1_PSZ_MASK
 0xF0000000u

	)

8188 
	#EIM_CSGCR1_PSZ_SHIFT
 28

	)

8189 
	#EIM_CSGCR1_PSZ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSGCR1_PSZ_SHIFT
))&
EIM_CSGCR1_PSZ_MASK
)

	)

8191 
	#EIM_CSGCR2_ADH_MASK
 0x3u

	)

8192 
	#EIM_CSGCR2_ADH_SHIFT
 0

	)

8193 
	#EIM_CSGCR2_ADH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSGCR2_ADH_SHIFT
))&
EIM_CSGCR2_ADH_MASK
)

	)

8194 
	#EIM_CSGCR2_DAPS_MASK
 0xF0u

	)

8195 
	#EIM_CSGCR2_DAPS_SHIFT
 4

	)

8196 
	#EIM_CSGCR2_DAPS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSGCR2_DAPS_SHIFT
))&
EIM_CSGCR2_DAPS_MASK
)

	)

8197 
	#EIM_CSGCR2_DAE_MASK
 0x100u

	)

8198 
	#EIM_CSGCR2_DAE_SHIFT
 8

	)

8199 
	#EIM_CSGCR2_DAP_MASK
 0x200u

	)

8200 
	#EIM_CSGCR2_DAP_SHIFT
 9

	)

8201 
	#EIM_CSGCR2_MUX16_BYP_GRANT_MASK
 0x1000u

	)

8202 
	#EIM_CSGCR2_MUX16_BYP_GRANT_SHIFT
 12

	)

8204 
	#EIM_CSRCR1_RCSN_MASK
 0x7u

	)

8205 
	#EIM_CSRCR1_RCSN_SHIFT
 0

	)

8206 
	#EIM_CSRCR1_RCSN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSRCR1_RCSN_SHIFT
))&
EIM_CSRCR1_RCSN_MASK
)

	)

8207 
	#EIM_CSRCR1_RCSA_MASK
 0x70u

	)

8208 
	#EIM_CSRCR1_RCSA_SHIFT
 4

	)

8209 
	#EIM_CSRCR1_RCSA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSRCR1_RCSA_SHIFT
))&
EIM_CSRCR1_RCSA_MASK
)

	)

8210 
	#EIM_CSRCR1_OEN_MASK
 0x700u

	)

8211 
	#EIM_CSRCR1_OEN_SHIFT
 8

	)

8212 
	#EIM_CSRCR1_OEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSRCR1_OEN_SHIFT
))&
EIM_CSRCR1_OEN_MASK
)

	)

8213 
	#EIM_CSRCR1_OEA_MASK
 0x7000u

	)

8214 
	#EIM_CSRCR1_OEA_SHIFT
 12

	)

8215 
	#EIM_CSRCR1_OEA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSRCR1_OEA_SHIFT
))&
EIM_CSRCR1_OEA_MASK
)

	)

8216 
	#EIM_CSRCR1_RADVN_MASK
 0x70000u

	)

8217 
	#EIM_CSRCR1_RADVN_SHIFT
 16

	)

8218 
	#EIM_CSRCR1_RADVN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSRCR1_RADVN_SHIFT
))&
EIM_CSRCR1_RADVN_MASK
)

	)

8219 
	#EIM_CSRCR1_RAL_MASK
 0x80000u

	)

8220 
	#EIM_CSRCR1_RAL_SHIFT
 19

	)

8221 
	#EIM_CSRCR1_RADVA_MASK
 0x700000u

	)

8222 
	#EIM_CSRCR1_RADVA_SHIFT
 20

	)

8223 
	#EIM_CSRCR1_RADVA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSRCR1_RADVA_SHIFT
))&
EIM_CSRCR1_RADVA_MASK
)

	)

8224 
	#EIM_CSRCR1_RWSC_MASK
 0x3F000000u

	)

8225 
	#EIM_CSRCR1_RWSC_SHIFT
 24

	)

8226 
	#EIM_CSRCR1_RWSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSRCR1_RWSC_SHIFT
))&
EIM_CSRCR1_RWSC_MASK
)

	)

8228 
	#EIM_CSRCR2_RBEN_MASK
 0x7u

	)

8229 
	#EIM_CSRCR2_RBEN_SHIFT
 0

	)

8230 
	#EIM_CSRCR2_RBEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSRCR2_RBEN_SHIFT
))&
EIM_CSRCR2_RBEN_MASK
)

	)

8231 
	#EIM_CSRCR2_RBE_MASK
 0x8u

	)

8232 
	#EIM_CSRCR2_RBE_SHIFT
 3

	)

8233 
	#EIM_CSRCR2_RBEA_MASK
 0x70u

	)

8234 
	#EIM_CSRCR2_RBEA_SHIFT
 4

	)

8235 
	#EIM_CSRCR2_RBEA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSRCR2_RBEA_SHIFT
))&
EIM_CSRCR2_RBEA_MASK
)

	)

8236 
	#EIM_CSRCR2_RL_MASK
 0x300u

	)

8237 
	#EIM_CSRCR2_RL_SHIFT
 8

	)

8238 
	#EIM_CSRCR2_RL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSRCR2_RL_SHIFT
))&
EIM_CSRCR2_RL_MASK
)

	)

8239 
	#EIM_CSRCR2_PAT_MASK
 0x7000u

	)

8240 
	#EIM_CSRCR2_PAT_SHIFT
 12

	)

8241 
	#EIM_CSRCR2_PAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSRCR2_PAT_SHIFT
))&
EIM_CSRCR2_PAT_MASK
)

	)

8242 
	#EIM_CSRCR2_APR_MASK
 0x8000u

	)

8243 
	#EIM_CSRCR2_APR_SHIFT
 15

	)

8245 
	#EIM_CSWCR1_WCSN_MASK
 0x7u

	)

8246 
	#EIM_CSWCR1_WCSN_SHIFT
 0

	)

8247 
	#EIM_CSWCR1_WCSN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSWCR1_WCSN_SHIFT
))&
EIM_CSWCR1_WCSN_MASK
)

	)

8248 
	#EIM_CSWCR1_WCSA_MASK
 0x38u

	)

8249 
	#EIM_CSWCR1_WCSA_SHIFT
 3

	)

8250 
	#EIM_CSWCR1_WCSA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSWCR1_WCSA_SHIFT
))&
EIM_CSWCR1_WCSA_MASK
)

	)

8251 
	#EIM_CSWCR1_WEN_MASK
 0x1C0u

	)

8252 
	#EIM_CSWCR1_WEN_SHIFT
 6

	)

8253 
	#EIM_CSWCR1_WEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSWCR1_WEN_SHIFT
))&
EIM_CSWCR1_WEN_MASK
)

	)

8254 
	#EIM_CSWCR1_WEA_MASK
 0xE00u

	)

8255 
	#EIM_CSWCR1_WEA_SHIFT
 9

	)

8256 
	#EIM_CSWCR1_WEA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSWCR1_WEA_SHIFT
))&
EIM_CSWCR1_WEA_MASK
)

	)

8257 
	#EIM_CSWCR1_WBEN_MASK
 0x7000u

	)

8258 
	#EIM_CSWCR1_WBEN_SHIFT
 12

	)

8259 
	#EIM_CSWCR1_WBEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSWCR1_WBEN_SHIFT
))&
EIM_CSWCR1_WBEN_MASK
)

	)

8260 
	#EIM_CSWCR1_WBEA_MASK
 0x38000u

	)

8261 
	#EIM_CSWCR1_WBEA_SHIFT
 15

	)

8262 
	#EIM_CSWCR1_WBEA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSWCR1_WBEA_SHIFT
))&
EIM_CSWCR1_WBEA_MASK
)

	)

8263 
	#EIM_CSWCR1_WADVN_MASK
 0x1C0000u

	)

8264 
	#EIM_CSWCR1_WADVN_SHIFT
 18

	)

8265 
	#EIM_CSWCR1_WADVN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSWCR1_WADVN_SHIFT
))&
EIM_CSWCR1_WADVN_MASK
)

	)

8266 
	#EIM_CSWCR1_WADVA_MASK
 0xE00000u

	)

8267 
	#EIM_CSWCR1_WADVA_SHIFT
 21

	)

8268 
	#EIM_CSWCR1_WADVA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSWCR1_WADVA_SHIFT
))&
EIM_CSWCR1_WADVA_MASK
)

	)

8269 
	#EIM_CSWCR1_WWSC_MASK
 0x3F000000u

	)

8270 
	#EIM_CSWCR1_WWSC_SHIFT
 24

	)

8271 
	#EIM_CSWCR1_WWSC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_CSWCR1_WWSC_SHIFT
))&
EIM_CSWCR1_WWSC_MASK
)

	)

8272 
	#EIM_CSWCR1_WBED_MASK
 0x40000000u

	)

8273 
	#EIM_CSWCR1_WBED_SHIFT
 30

	)

8274 
	#EIM_CSWCR1_WAL_MASK
 0x80000000u

	)

8275 
	#EIM_CSWCR1_WAL_SHIFT
 31

	)

8277 
	#EIM_CSWCR2_WBCDD_MASK
 0x1u

	)

8278 
	#EIM_CSWCR2_WBCDD_SHIFT
 0

	)

8280 
	#EIM_WCR_BCM_MASK
 0x1u

	)

8281 
	#EIM_WCR_BCM_SHIFT
 0

	)

8282 
	#EIM_WCR_GBCD_MASK
 0x6u

	)

8283 
	#EIM_WCR_GBCD_SHIFT
 1

	)

8284 
	#EIM_WCR_GBCD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_WCR_GBCD_SHIFT
))&
EIM_WCR_GBCD_MASK
)

	)

8285 
	#EIM_WCR_CONT_BCLK_SEL_MASK
 0x8u

	)

8286 
	#EIM_WCR_CONT_BCLK_SEL_SHIFT
 3

	)

8287 
	#EIM_WCR_INTEN_MASK
 0x10u

	)

8288 
	#EIM_WCR_INTEN_SHIFT
 4

	)

8289 
	#EIM_WCR_INTPOL_MASK
 0x20u

	)

8290 
	#EIM_WCR_INTPOL_SHIFT
 5

	)

8291 
	#EIM_WCR_WDOG_EN_MASK
 0x100u

	)

8292 
	#EIM_WCR_WDOG_EN_SHIFT
 8

	)

8293 
	#EIM_WCR_WDOG_LIMIT_MASK
 0x600u

	)

8294 
	#EIM_WCR_WDOG_LIMIT_SHIFT
 9

	)

8295 
	#EIM_WCR_WDOG_LIMIT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_WCR_WDOG_LIMIT_SHIFT
))&
EIM_WCR_WDOG_LIMIT_MASK
)

	)

8296 
	#EIM_WCR_FRUN_ACLK_EN_MASK
 0x800u

	)

8297 
	#EIM_WCR_FRUN_ACLK_EN_SHIFT
 11

	)

8299 
	#EIM_DCR_DLL_CTRL_ENABLE_MASK
 0x1u

	)

8300 
	#EIM_DCR_DLL_CTRL_ENABLE_SHIFT
 0

	)

8301 
	#EIM_DCR_DLL_CTRL_RESET_MASK
 0x2u

	)

8302 
	#EIM_DCR_DLL_CTRL_RESET_SHIFT
 1

	)

8303 
	#EIM_DCR_DLL_CTRL_SLV_FORCE_UPD_MASK
 0x4u

	)

8304 
	#EIM_DCR_DLL_CTRL_SLV_FORCE_UPD_SHIFT
 2

	)

8305 
	#EIM_DCR_DLL_CTRL_SLV_OFFSET_DEC_MASK
 0x8u

	)

8306 
	#EIM_DCR_DLL_CTRL_SLV_OFFSET_DEC_SHIFT
 3

	)

8307 
	#EIM_DCR_DLL_CTRL_SLV_OFFSET_MASK
 0x70u

	)

8308 
	#EIM_DCR_DLL_CTRL_SLV_OFFSET_SHIFT
 4

	)

8309 
	#EIM_DCR_DLL_CTRL_SLV_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_DCR_DLL_CTRL_SLV_OFFSET_SHIFT
))&
EIM_DCR_DLL_CTRL_SLV_OFFSET_MASK
)

	)

8310 
	#EIM_DCR_DLL_CTRL_GATE_UPDATE_MASK
 0x80u

	)

8311 
	#EIM_DCR_DLL_CTRL_GATE_UPDATE_SHIFT
 7

	)

8312 
	#EIM_DCR_DLL_CTRL_SLV_OVERRIDE_MASK
 0x100u

	)

8313 
	#EIM_DCR_DLL_CTRL_SLV_OVERRIDE_SHIFT
 8

	)

8314 
	#EIM_DCR_DLL_CTRL_SLV_OVERRIDE_VAL_MASK
 0xFE00u

	)

8315 
	#EIM_DCR_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT
 9

	)

8316 
	#EIM_DCR_DLL_CTRL_SLV_OVERRIDE_VAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_DCR_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT
))&
EIM_DCR_DLL_CTRL_SLV_OVERRIDE_VAL_MASK
)

	)

8317 
	#EIM_DCR_DLL_CTRL_REF_INITIAL_VAL_MASK
 0x7F0000u

	)

8318 
	#EIM_DCR_DLL_CTRL_REF_INITIAL_VAL_SHIFT
 16

	)

8319 
	#EIM_DCR_DLL_CTRL_REF_INITIAL_VAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_DCR_DLL_CTRL_REF_INITIAL_VAL_SHIFT
))&
EIM_DCR_DLL_CTRL_REF_INITIAL_VAL_MASK
)

	)

8320 
	#EIM_DCR_DLL_CTRL_SLV_UPDATE_INT_MASK
 0xF800000u

	)

8321 
	#EIM_DCR_DLL_CTRL_SLV_UPDATE_INT_SHIFT
 23

	)

8322 
	#EIM_DCR_DLL_CTRL_SLV_UPDATE_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_DCR_DLL_CTRL_SLV_UPDATE_INT_SHIFT
))&
EIM_DCR_DLL_CTRL_SLV_UPDATE_INT_MASK
)

	)

8323 
	#EIM_DCR_DLL_CTRL_REF_UPDATE_INT_MASK
 0xF0000000u

	)

8324 
	#EIM_DCR_DLL_CTRL_REF_UPDATE_INT_SHIFT
 28

	)

8325 
	#EIM_DCR_DLL_CTRL_REF_UPDATE_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_DCR_DLL_CTRL_REF_UPDATE_INT_SHIFT
))&
EIM_DCR_DLL_CTRL_REF_UPDATE_INT_MASK
)

	)

8327 
	#EIM_DSR_DLL_STS_SLV_LOCK_MASK
 0x1u

	)

8328 
	#EIM_DSR_DLL_STS_SLV_LOCK_SHIFT
 0

	)

8329 
	#EIM_DSR_DLL_STS_REF_LOCK_MASK
 0x2u

	)

8330 
	#EIM_DSR_DLL_STS_REF_LOCK_SHIFT
 1

	)

8331 
	#EIM_DSR_DLL_STS_SLV_SEL_MASK
 0x1FCu

	)

8332 
	#EIM_DSR_DLL_STS_SLV_SEL_SHIFT
 2

	)

8333 
	#EIM_DSR_DLL_STS_SLV_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_DSR_DLL_STS_SLV_SEL_SHIFT
))&
EIM_DSR_DLL_STS_SLV_SEL_MASK
)

	)

8334 
	#EIM_DSR_DLL_STS_REF_SEL_MASK
 0xFE00u

	)

8335 
	#EIM_DSR_DLL_STS_REF_SEL_SHIFT
 9

	)

8336 
	#EIM_DSR_DLL_STS_REF_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_DSR_DLL_STS_REF_SEL_SHIFT
))&
EIM_DSR_DLL_STS_REF_SEL_MASK
)

	)

8338 
	#EIM_WIAR_IPS_REQ_MASK
 0x1u

	)

8339 
	#EIM_WIAR_IPS_REQ_SHIFT
 0

	)

8340 
	#EIM_WIAR_IPS_ACK_MASK
 0x2u

	)

8341 
	#EIM_WIAR_IPS_ACK_SHIFT
 1

	)

8342 
	#EIM_WIAR_INT_MASK
 0x4u

	)

8343 
	#EIM_WIAR_INT_SHIFT
 2

	)

8344 
	#EIM_WIAR_ERRST_MASK
 0x8u

	)

8345 
	#EIM_WIAR_ERRST_SHIFT
 3

	)

8346 
	#EIM_WIAR_ACLK_EN_MASK
 0x10u

	)

8347 
	#EIM_WIAR_ACLK_EN_SHIFT
 4

	)

8349 
	#EIM_EAR_Eº‹_ADDR_MASK
 0xFFFFFFFFu

	)

8350 
	#EIM_EAR_Eº‹_ADDR_SHIFT
 0

	)

8351 
	#EIM_EAR_Eº‹_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EIM_EAR_Eº‹_ADDR_SHIFT
))&
EIM_EAR_Eº‹_ADDR_MASK
)

	)

8359 
	#EIM_BASE
 (0x421B8000u)

	)

8361 
	#EIM
 ((
EIM_Ty≥
 *)
EIM_BASE
)

	)

8362 
	#EIM_BASE_PTR
 (
EIM
)

	)

8364 
	#EIM_BASE_ADDRS
 { 
EIM_BASE
 }

	)

8366 
	#EIM_BASE_PTRS
 { 
EIM
 }

	)

8368 
	#EIM_IRQS
 { 
EIM_IRQn
 }

	)

8381 
	#EIM_CS0GCR1
 
	`EIM_CSGCR1_REG
(
EIM_BASE_PTR
,0)

	)

8382 
	#EIM_CS0GCR2
 
	`EIM_CSGCR2_REG
(
EIM_BASE_PTR
,0)

	)

8383 
	#EIM_CS0RCR1
 
	`EIM_CSRCR1_REG
(
EIM_BASE_PTR
,0)

	)

8384 
	#EIM_CS0RCR2
 
	`EIM_CSRCR2_REG
(
EIM_BASE_PTR
,0)

	)

8385 
	#EIM_CS0WCR1
 
	`EIM_CSWCR1_REG
(
EIM_BASE_PTR
,0)

	)

8386 
	#EIM_CS0WCR2
 
	`EIM_CSWCR2_REG
(
EIM_BASE_PTR
,0)

	)

8387 
	#EIM_CS1GCR1
 
	`EIM_CSGCR1_REG
(
EIM_BASE_PTR
,1)

	)

8388 
	#EIM_CS1GCR2
 
	`EIM_CSGCR2_REG
(
EIM_BASE_PTR
,1)

	)

8389 
	#EIM_CS1RCR1
 
	`EIM_CSRCR1_REG
(
EIM_BASE_PTR
,1)

	)

8390 
	#EIM_CS1RCR2
 
	`EIM_CSRCR2_REG
(
EIM_BASE_PTR
,1)

	)

8391 
	#EIM_CS1WCR1
 
	`EIM_CSWCR1_REG
(
EIM_BASE_PTR
,1)

	)

8392 
	#EIM_CS1WCR2
 
	`EIM_CSWCR2_REG
(
EIM_BASE_PTR
,1)

	)

8393 
	#EIM_CS2GCR1
 
	`EIM_CSGCR1_REG
(
EIM_BASE_PTR
,2)

	)

8394 
	#EIM_CS2GCR2
 
	`EIM_CSGCR2_REG
(
EIM_BASE_PTR
,2)

	)

8395 
	#EIM_CS2RCR1
 
	`EIM_CSRCR1_REG
(
EIM_BASE_PTR
,2)

	)

8396 
	#EIM_CS2RCR2
 
	`EIM_CSRCR2_REG
(
EIM_BASE_PTR
,2)

	)

8397 
	#EIM_CS2WCR1
 
	`EIM_CSWCR1_REG
(
EIM_BASE_PTR
,2)

	)

8398 
	#EIM_CS2WCR2
 
	`EIM_CSWCR2_REG
(
EIM_BASE_PTR
,2)

	)

8399 
	#EIM_CS3GCR1
 
	`EIM_CSGCR1_REG
(
EIM_BASE_PTR
,3)

	)

8400 
	#EIM_CS3GCR2
 
	`EIM_CSGCR2_REG
(
EIM_BASE_PTR
,3)

	)

8401 
	#EIM_CS3RCR1
 
	`EIM_CSRCR1_REG
(
EIM_BASE_PTR
,3)

	)

8402 
	#EIM_CS3RCR2
 
	`EIM_CSRCR2_REG
(
EIM_BASE_PTR
,3)

	)

8403 
	#EIM_CS3WCR1
 
	`EIM_CSWCR1_REG
(
EIM_BASE_PTR
,3)

	)

8404 
	#EIM_CS3WCR2
 
	`EIM_CSWCR2_REG
(
EIM_BASE_PTR
,3)

	)

8405 
	#EIM_CS4GCR1
 
	`EIM_CSGCR1_REG
(
EIM_BASE_PTR
,4)

	)

8406 
	#EIM_CS4GCR2
 
	`EIM_CSGCR2_REG
(
EIM_BASE_PTR
,4)

	)

8407 
	#EIM_CS4RCR1
 
	`EIM_CSRCR1_REG
(
EIM_BASE_PTR
,4)

	)

8408 
	#EIM_CS4RCR2
 
	`EIM_CSRCR2_REG
(
EIM_BASE_PTR
,4)

	)

8409 
	#EIM_CS4WCR1
 
	`EIM_CSWCR1_REG
(
EIM_BASE_PTR
,4)

	)

8410 
	#EIM_CS4WCR2
 
	`EIM_CSWCR2_REG
(
EIM_BASE_PTR
,4)

	)

8411 
	#EIM_CS5GCR1
 
	`EIM_CSGCR1_REG
(
EIM_BASE_PTR
,5)

	)

8412 
	#EIM_CS5GCR2
 
	`EIM_CSGCR2_REG
(
EIM_BASE_PTR
,5)

	)

8413 
	#EIM_CS5RCR1
 
	`EIM_CSRCR1_REG
(
EIM_BASE_PTR
,5)

	)

8414 
	#EIM_CS5RCR2
 
	`EIM_CSRCR2_REG
(
EIM_BASE_PTR
,5)

	)

8415 
	#EIM_CS5WCR1
 
	`EIM_CSWCR1_REG
(
EIM_BASE_PTR
,5)

	)

8416 
	#EIM_CS5WCR2
 
	`EIM_CSWCR2_REG
(
EIM_BASE_PTR
,5)

	)

8417 
	#EIM_WCR
 
	`EIM_WCR_REG
(
EIM_BASE_PTR
)

	)

8418 
	#EIM_DCR
 
	`EIM_DCR_REG
(
EIM_BASE_PTR
)

	)

8419 
	#EIM_DSR
 
	`EIM_DSR_REG
(
EIM_BASE_PTR
)

	)

8420 
	#EIM_WIAR
 
	`EIM_WIAR_REG
(
EIM_BASE_PTR
)

	)

8421 
	#EIM_EAR
 
	`EIM_EAR_REG
(
EIM_BASE_PTR
)

	)

8423 
	#EIM_CSGCR1
(
ödex
Ë
	`EIM_CSGCR1_REG
(
EIM_BASE_PTR
,ödex)

	)

8424 
	#EIM_CSGCR2
(
ödex
Ë
	`EIM_CSGCR2_REG
(
EIM_BASE_PTR
,ödex)

	)

8425 
	#EIM_CSRCR1
(
ödex
Ë
	`EIM_CSRCR1_REG
(
EIM_BASE_PTR
,ödex)

	)

8426 
	#EIM_CSRCR2
(
ödex
Ë
	`EIM_CSRCR2_REG
(
EIM_BASE_PTR
,ödex)

	)

8427 
	#EIM_CSWCR1
(
ödex
Ë
	`EIM_CSWCR1_REG
(
EIM_BASE_PTR
,ödex)

	)

8428 
	#EIM_CSWCR2
(
ödex
Ë
	`EIM_CSWCR2_REG
(
EIM_BASE_PTR
,ödex)

	)

8449 
uöt8_t
 
	mRESERVED_0
[4];

8450 
__IO
 
uöt32_t
 
	mEIR
;

8451 
__IO
 
uöt32_t
 
	mEIMR
;

8452 
uöt8_t
 
	mRESERVED_1
[4];

8453 
__IO
 
uöt32_t
 
	mRDAR
;

8454 
__IO
 
uöt32_t
 
	mTDAR
;

8455 
uöt8_t
 
	mRESERVED_2
[12];

8456 
__IO
 
uöt32_t
 
	mECR
;

8457 
uöt8_t
 
	mRESERVED_3
[24];

8458 
__IO
 
uöt32_t
 
	mMMFR
;

8459 
__IO
 
uöt32_t
 
	mMSCR
;

8460 
uöt8_t
 
	mRESERVED_4
[28];

8461 
__IO
 
uöt32_t
 
	mMIBC
;

8462 
uöt8_t
 
	mRESERVED_5
[28];

8463 
__IO
 
uöt32_t
 
	mRCR
;

8464 
uöt8_t
 
	mRESERVED_6
[60];

8465 
__IO
 
uöt32_t
 
	mTCR
;

8466 
uöt8_t
 
	mRESERVED_7
[28];

8467 
__IO
 
uöt32_t
 
	mPALR
;

8468 
__IO
 
uöt32_t
 
	mPAUR
;

8469 
__IO
 
uöt32_t
 
	mOPD
;

8470 
__IO
 
uöt32_t
 
	mTXIC
[3];

8471 
uöt8_t
 
	mRESERVED_8
[4];

8472 
__IO
 
uöt32_t
 
	mRXIC
[3];

8473 
uöt8_t
 
	mRESERVED_9
[12];

8474 
__IO
 
uöt32_t
 
	mIAUR
;

8475 
__IO
 
uöt32_t
 
	mIALR
;

8476 
__IO
 
uöt32_t
 
	mGAUR
;

8477 
__IO
 
uöt32_t
 
	mGALR
;

8478 
uöt8_t
 
	mRESERVED_10
[28];

8479 
__IO
 
uöt32_t
 
	mTFWR
;

8480 
uöt8_t
 
	mRESERVED_11
[24];

8481 
__IO
 
uöt32_t
 
	mRDSR1
;

8482 
__IO
 
uöt32_t
 
	mTDSR1
;

8483 
__IO
 
uöt32_t
 
	mMRBR1
;

8484 
__IO
 
uöt32_t
 
	mRDSR2
;

8485 
__IO
 
uöt32_t
 
	mTDSR2
;

8486 
__IO
 
uöt32_t
 
	mMRBR2
;

8487 
uöt8_t
 
	mRESERVED_12
[8];

8488 
__IO
 
uöt32_t
 
	mRDSR
;

8489 
__IO
 
uöt32_t
 
	mTDSR
;

8490 
__IO
 
uöt32_t
 
	mMRBR
;

8491 
uöt8_t
 
	mRESERVED_13
[4];

8492 
__IO
 
uöt32_t
 
	mRSFL
;

8493 
__IO
 
uöt32_t
 
	mRSEM
;

8494 
__IO
 
uöt32_t
 
	mRAEM
;

8495 
__IO
 
uöt32_t
 
	mRAFL
;

8496 
__IO
 
uöt32_t
 
	mTSEM
;

8497 
__IO
 
uöt32_t
 
	mTAEM
;

8498 
__IO
 
uöt32_t
 
	mTAFL
;

8499 
__IO
 
uöt32_t
 
	mTIPG
;

8500 
__IO
 
uöt32_t
 
	mFTRL
;

8501 
uöt8_t
 
	mRESERVED_14
[12];

8502 
__IO
 
uöt32_t
 
	mTACC
;

8503 
__IO
 
uöt32_t
 
	mRACC
;

8504 
__IO
 
uöt32_t
 
	mRCMR
[2];

8505 
uöt8_t
 
	mRESERVED_15
[8];

8506 
__IO
 
uöt32_t
 
	mDMACFG
[2];

8507 
__IO
 
uöt32_t
 
	mRDAR1
;

8508 
__IO
 
uöt32_t
 
	mTDAR1
;

8509 
__IO
 
uöt32_t
 
	mRDAR2
;

8510 
__IO
 
uöt32_t
 
	mTDAR2
;

8511 
__IO
 
uöt32_t
 
	mQOS
;

8512 
uöt8_t
 
	mRESERVED_16
[12];

8513 
__I
 
uöt32_t
 
	mRMON_T_DROP
;

8514 
__I
 
uöt32_t
 
	mRMON_T_PACKETS
;

8515 
__I
 
uöt32_t
 
	mRMON_T_BC_PKT
;

8516 
__I
 
uöt32_t
 
	mRMON_T_MC_PKT
;

8517 
__I
 
uöt32_t
 
	mRMON_T_CRC_ALIGN
;

8518 
__I
 
uöt32_t
 
	mRMON_T_UNDERSIZE
;

8519 
__I
 
uöt32_t
 
	mRMON_T_OVERSIZE
;

8520 
__I
 
uöt32_t
 
	mRMON_T_FRAG
;

8521 
__I
 
uöt32_t
 
	mRMON_T_JAB
;

8522 
__I
 
uöt32_t
 
	mRMON_T_COL
;

8523 
__I
 
uöt32_t
 
	mRMON_T_P64
;

8524 
__I
 
uöt32_t
 
	mRMON_T_P65TO127
;

8525 
__I
 
uöt32_t
 
	mRMON_T_P128TO255
;

8526 
__I
 
uöt32_t
 
	mRMON_T_P256TO511
;

8527 
__I
 
uöt32_t
 
	mRMON_T_P512TO1023
;

8528 
__I
 
uöt32_t
 
	mRMON_T_P1024TO2047
;

8529 
__I
 
uöt32_t
 
	mRMON_T_P_GTE2048
;

8530 
__I
 
uöt32_t
 
	mRMON_T_OCTETS
;

8531 
__I
 
uöt32_t
 
	mIEEE_T_DROP
;

8532 
__I
 
uöt32_t
 
	mIEEE_T_FRAME_OK
;

8533 
__I
 
uöt32_t
 
	mIEEE_T_1COL
;

8534 
__I
 
uöt32_t
 
	mIEEE_T_MCOL
;

8535 
__I
 
uöt32_t
 
	mIEEE_T_DEF
;

8536 
__I
 
uöt32_t
 
	mIEEE_T_LCOL
;

8537 
__I
 
uöt32_t
 
	mIEEE_T_EXCOL
;

8538 
__I
 
uöt32_t
 
	mIEEE_T_MACERR
;

8539 
__I
 
uöt32_t
 
	mIEEE_T_CSERR
;

8540 
__I
 
uöt32_t
 
	mIEEE_T_SQE
;

8541 
__I
 
uöt32_t
 
	mIEEE_T_FDXFC
;

8542 
__I
 
uöt32_t
 
	mIEEE_T_OCTETS_OK
;

8543 
uöt8_t
 
	mRESERVED_17
[12];

8544 
__I
 
uöt32_t
 
	mRMON_R_PACKETS
;

8545 
__I
 
uöt32_t
 
	mRMON_R_BC_PKT
;

8546 
__I
 
uöt32_t
 
	mRMON_R_MC_PKT
;

8547 
__I
 
uöt32_t
 
	mRMON_R_CRC_ALIGN
;

8548 
__I
 
uöt32_t
 
	mRMON_R_UNDERSIZE
;

8549 
__I
 
uöt32_t
 
	mRMON_R_OVERSIZE
;

8550 
__I
 
uöt32_t
 
	mRMON_R_FRAG
;

8551 
__I
 
uöt32_t
 
	mRMON_R_JAB
;

8552 
__I
 
uöt32_t
 
	mRMON_R_RESVD_0
;

8553 
__I
 
uöt32_t
 
	mRMON_R_P64
;

8554 
__I
 
uöt32_t
 
	mRMON_R_P65TO127
;

8555 
__I
 
uöt32_t
 
	mRMON_R_P128TO255
;

8556 
__I
 
uöt32_t
 
	mRMON_R_P256TO511
;

8557 
__I
 
uöt32_t
 
	mRMON_R_P512TO1023
;

8558 
__I
 
uöt32_t
 
	mRMON_R_P1024TO2047
;

8559 
__I
 
uöt32_t
 
	mRMON_R_P_GTE2048
;

8560 
__I
 
uöt32_t
 
	mRMON_R_OCTETS
;

8561 
__I
 
uöt32_t
 
	mIEEE_R_DROP
;

8562 
__I
 
uöt32_t
 
	mIEEE_R_FRAME_OK
;

8563 
__I
 
uöt32_t
 
	mIEEE_R_CRC
;

8564 
__I
 
uöt32_t
 
	mIEEE_R_ALIGN
;

8565 
__I
 
uöt32_t
 
	mIEEE_R_MACERR
;

8566 
__I
 
uöt32_t
 
	mIEEE_R_FDXFC
;

8567 
__I
 
uöt32_t
 
	mIEEE_R_OCTETS_OK
;

8568 
uöt8_t
 
	mRESERVED_18
[284];

8569 
__IO
 
uöt32_t
 
	mATCR
;

8570 
__IO
 
uöt32_t
 
	mATVR
;

8571 
__IO
 
uöt32_t
 
	mATOFF
;

8572 
__IO
 
uöt32_t
 
	mATPER
;

8573 
__IO
 
uöt32_t
 
	mATCOR
;

8574 
__IO
 
uöt32_t
 
	mATINC
;

8575 
__I
 
uöt32_t
 
	mATSTMP
;

8576 
uöt8_t
 
	mRESERVED_19
[488];

8577 
__IO
 
uöt32_t
 
	mTGSR
;

8579 
__IO
 
uöt32_t
 
	mTCSR
;

8580 
__IO
 
uöt32_t
 
	mTCCR
;

8581 } 
	mTC
[4];

8582 } 
	tENET_Ty≥
, *
	tENET_MemM≠På
;

8594 
	#ENET_EIR_REG
(
ba£
Ë((ba£)->
EIR
)

	)

8595 
	#ENET_EIMR_REG
(
ba£
Ë((ba£)->
EIMR
)

	)

8596 
	#ENET_RDAR_REG
(
ba£
Ë((ba£)->
RDAR
)

	)

8597 
	#ENET_TDAR_REG
(
ba£
Ë((ba£)->
TDAR
)

	)

8598 
	#ENET_ECR_REG
(
ba£
Ë((ba£)->
ECR
)

	)

8599 
	#ENET_MMFR_REG
(
ba£
Ë((ba£)->
MMFR
)

	)

8600 
	#ENET_MSCR_REG
(
ba£
Ë((ba£)->
MSCR
)

	)

8601 
	#ENET_MIBC_REG
(
ba£
Ë((ba£)->
MIBC
)

	)

8602 
	#ENET_RCR_REG
(
ba£
Ë((ba£)->
RCR
)

	)

8603 
	#ENET_TCR_REG
(
ba£
Ë((ba£)->
TCR
)

	)

8604 
	#ENET_PALR_REG
(
ba£
Ë((ba£)->
PALR
)

	)

8605 
	#ENET_PAUR_REG
(
ba£
Ë((ba£)->
PAUR
)

	)

8606 
	#ENET_OPD_REG
(
ba£
Ë((ba£)->
OPD
)

	)

8607 
	#ENET_TXIC_REG
(
ba£
,
ödex
Ë((ba£)->
TXIC
[ödex])

	)

8608 
	#ENET_RXIC_REG
(
ba£
,
ödex
Ë((ba£)->
RXIC
[ödex])

	)

8609 
	#ENET_IAUR_REG
(
ba£
Ë((ba£)->
IAUR
)

	)

8610 
	#ENET_IALR_REG
(
ba£
Ë((ba£)->
IALR
)

	)

8611 
	#ENET_GAUR_REG
(
ba£
Ë((ba£)->
GAUR
)

	)

8612 
	#ENET_GALR_REG
(
ba£
Ë((ba£)->
GALR
)

	)

8613 
	#ENET_TFWR_REG
(
ba£
Ë((ba£)->
TFWR
)

	)

8614 
	#ENET_RDSR1_REG
(
ba£
Ë((ba£)->
RDSR1
)

	)

8615 
	#ENET_TDSR1_REG
(
ba£
Ë((ba£)->
TDSR1
)

	)

8616 
	#ENET_MRBR1_REG
(
ba£
Ë((ba£)->
MRBR1
)

	)

8617 
	#ENET_RDSR2_REG
(
ba£
Ë((ba£)->
RDSR2
)

	)

8618 
	#ENET_TDSR2_REG
(
ba£
Ë((ba£)->
TDSR2
)

	)

8619 
	#ENET_MRBR2_REG
(
ba£
Ë((ba£)->
MRBR2
)

	)

8620 
	#ENET_RDSR_REG
(
ba£
Ë((ba£)->
RDSR
)

	)

8621 
	#ENET_TDSR_REG
(
ba£
Ë((ba£)->
TDSR
)

	)

8622 
	#ENET_MRBR_REG
(
ba£
Ë((ba£)->
MRBR
)

	)

8623 
	#ENET_RSFL_REG
(
ba£
Ë((ba£)->
RSFL
)

	)

8624 
	#ENET_RSEM_REG
(
ba£
Ë((ba£)->
RSEM
)

	)

8625 
	#ENET_RAEM_REG
(
ba£
Ë((ba£)->
RAEM
)

	)

8626 
	#ENET_RAFL_REG
(
ba£
Ë((ba£)->
RAFL
)

	)

8627 
	#ENET_TSEM_REG
(
ba£
Ë((ba£)->
TSEM
)

	)

8628 
	#ENET_TAEM_REG
(
ba£
Ë((ba£)->
TAEM
)

	)

8629 
	#ENET_TAFL_REG
(
ba£
Ë((ba£)->
TAFL
)

	)

8630 
	#ENET_TIPG_REG
(
ba£
Ë((ba£)->
TIPG
)

	)

8631 
	#ENET_FTRL_REG
(
ba£
Ë((ba£)->
FTRL
)

	)

8632 
	#ENET_TACC_REG
(
ba£
Ë((ba£)->
TACC
)

	)

8633 
	#ENET_RACC_REG
(
ba£
Ë((ba£)->
RACC
)

	)

8634 
	#ENET_RCMR_REG
(
ba£
,
ödex
Ë((ba£)->
RCMR
[ödex])

	)

8635 
	#ENET_DMACFG_REG
(
ba£
,
ödex
Ë((ba£)->
DMACFG
[ödex])

	)

8636 
	#ENET_RDAR1_REG
(
ba£
Ë((ba£)->
RDAR1
)

	)

8637 
	#ENET_TDAR1_REG
(
ba£
Ë((ba£)->
TDAR1
)

	)

8638 
	#ENET_RDAR2_REG
(
ba£
Ë((ba£)->
RDAR2
)

	)

8639 
	#ENET_TDAR2_REG
(
ba£
Ë((ba£)->
TDAR2
)

	)

8640 
	#ENET_QOS_REG
(
ba£
Ë((ba£)->
QOS
)

	)

8641 
	#ENET_RMON_T_DROP_REG
(
ba£
Ë((ba£)->
RMON_T_DROP
)

	)

8642 
	#ENET_RMON_T_PACKETS_REG
(
ba£
Ë((ba£)->
RMON_T_PACKETS
)

	)

8643 
	#ENET_RMON_T_BC_PKT_REG
(
ba£
Ë((ba£)->
RMON_T_BC_PKT
)

	)

8644 
	#ENET_RMON_T_MC_PKT_REG
(
ba£
Ë((ba£)->
RMON_T_MC_PKT
)

	)

8645 
	#ENET_RMON_T_CRC_ALIGN_REG
(
ba£
Ë((ba£)->
RMON_T_CRC_ALIGN
)

	)

8646 
	#ENET_RMON_T_UNDERSIZE_REG
(
ba£
Ë((ba£)->
RMON_T_UNDERSIZE
)

	)

8647 
	#ENET_RMON_T_OVERSIZE_REG
(
ba£
Ë((ba£)->
RMON_T_OVERSIZE
)

	)

8648 
	#ENET_RMON_T_FRAG_REG
(
ba£
Ë((ba£)->
RMON_T_FRAG
)

	)

8649 
	#ENET_RMON_T_JAB_REG
(
ba£
Ë((ba£)->
RMON_T_JAB
)

	)

8650 
	#ENET_RMON_T_COL_REG
(
ba£
Ë((ba£)->
RMON_T_COL
)

	)

8651 
	#ENET_RMON_T_P64_REG
(
ba£
Ë((ba£)->
RMON_T_P64
)

	)

8652 
	#ENET_RMON_T_P65TO127_REG
(
ba£
Ë((ba£)->
RMON_T_P65TO127
)

	)

8653 
	#ENET_RMON_T_P128TO255_REG
(
ba£
Ë((ba£)->
RMON_T_P128TO255
)

	)

8654 
	#ENET_RMON_T_P256TO511_REG
(
ba£
Ë((ba£)->
RMON_T_P256TO511
)

	)

8655 
	#ENET_RMON_T_P512TO1023_REG
(
ba£
Ë((ba£)->
RMON_T_P512TO1023
)

	)

8656 
	#ENET_RMON_T_P1024TO2047_REG
(
ba£
Ë((ba£)->
RMON_T_P1024TO2047
)

	)

8657 
	#ENET_RMON_T_P_GTE2048_REG
(
ba£
Ë((ba£)->
RMON_T_P_GTE2048
)

	)

8658 
	#ENET_RMON_T_OCTETS_REG
(
ba£
Ë((ba£)->
RMON_T_OCTETS
)

	)

8659 
	#ENET_IEEE_T_DROP_REG
(
ba£
Ë((ba£)->
IEEE_T_DROP
)

	)

8660 
	#ENET_IEEE_T_FRAME_OK_REG
(
ba£
Ë((ba£)->
IEEE_T_FRAME_OK
)

	)

8661 
	#ENET_IEEE_T_1COL_REG
(
ba£
Ë((ba£)->
IEEE_T_1COL
)

	)

8662 
	#ENET_IEEE_T_MCOL_REG
(
ba£
Ë((ba£)->
IEEE_T_MCOL
)

	)

8663 
	#ENET_IEEE_T_DEF_REG
(
ba£
Ë((ba£)->
IEEE_T_DEF
)

	)

8664 
	#ENET_IEEE_T_LCOL_REG
(
ba£
Ë((ba£)->
IEEE_T_LCOL
)

	)

8665 
	#ENET_IEEE_T_EXCOL_REG
(
ba£
Ë((ba£)->
IEEE_T_EXCOL
)

	)

8666 
	#ENET_IEEE_T_MACERR_REG
(
ba£
Ë((ba£)->
IEEE_T_MACERR
)

	)

8667 
	#ENET_IEEE_T_CSERR_REG
(
ba£
Ë((ba£)->
IEEE_T_CSERR
)

	)

8668 
	#ENET_IEEE_T_SQE_REG
(
ba£
Ë((ba£)->
IEEE_T_SQE
)

	)

8669 
	#ENET_IEEE_T_FDXFC_REG
(
ba£
Ë((ba£)->
IEEE_T_FDXFC
)

	)

8670 
	#ENET_IEEE_T_OCTETS_OK_REG
(
ba£
Ë((ba£)->
IEEE_T_OCTETS_OK
)

	)

8671 
	#ENET_RMON_R_PACKETS_REG
(
ba£
Ë((ba£)->
RMON_R_PACKETS
)

	)

8672 
	#ENET_RMON_R_BC_PKT_REG
(
ba£
Ë((ba£)->
RMON_R_BC_PKT
)

	)

8673 
	#ENET_RMON_R_MC_PKT_REG
(
ba£
Ë((ba£)->
RMON_R_MC_PKT
)

	)

8674 
	#ENET_RMON_R_CRC_ALIGN_REG
(
ba£
Ë((ba£)->
RMON_R_CRC_ALIGN
)

	)

8675 
	#ENET_RMON_R_UNDERSIZE_REG
(
ba£
Ë((ba£)->
RMON_R_UNDERSIZE
)

	)

8676 
	#ENET_RMON_R_OVERSIZE_REG
(
ba£
Ë((ba£)->
RMON_R_OVERSIZE
)

	)

8677 
	#ENET_RMON_R_FRAG_REG
(
ba£
Ë((ba£)->
RMON_R_FRAG
)

	)

8678 
	#ENET_RMON_R_JAB_REG
(
ba£
Ë((ba£)->
RMON_R_JAB
)

	)

8679 
	#ENET_RMON_R_RESVD_0_REG
(
ba£
Ë((ba£)->
RMON_R_RESVD_0
)

	)

8680 
	#ENET_RMON_R_P64_REG
(
ba£
Ë((ba£)->
RMON_R_P64
)

	)

8681 
	#ENET_RMON_R_P65TO127_REG
(
ba£
Ë((ba£)->
RMON_R_P65TO127
)

	)

8682 
	#ENET_RMON_R_P128TO255_REG
(
ba£
Ë((ba£)->
RMON_R_P128TO255
)

	)

8683 
	#ENET_RMON_R_P256TO511_REG
(
ba£
Ë((ba£)->
RMON_R_P256TO511
)

	)

8684 
	#ENET_RMON_R_P512TO1023_REG
(
ba£
Ë((ba£)->
RMON_R_P512TO1023
)

	)

8685 
	#ENET_RMON_R_P1024TO2047_REG
(
ba£
Ë((ba£)->
RMON_R_P1024TO2047
)

	)

8686 
	#ENET_RMON_R_P_GTE2048_REG
(
ba£
Ë((ba£)->
RMON_R_P_GTE2048
)

	)

8687 
	#ENET_RMON_R_OCTETS_REG
(
ba£
Ë((ba£)->
RMON_R_OCTETS
)

	)

8688 
	#ENET_IEEE_R_DROP_REG
(
ba£
Ë((ba£)->
IEEE_R_DROP
)

	)

8689 
	#ENET_IEEE_R_FRAME_OK_REG
(
ba£
Ë((ba£)->
IEEE_R_FRAME_OK
)

	)

8690 
	#ENET_IEEE_R_CRC_REG
(
ba£
Ë((ba£)->
IEEE_R_CRC
)

	)

8691 
	#ENET_IEEE_R_ALIGN_REG
(
ba£
Ë((ba£)->
IEEE_R_ALIGN
)

	)

8692 
	#ENET_IEEE_R_MACERR_REG
(
ba£
Ë((ba£)->
IEEE_R_MACERR
)

	)

8693 
	#ENET_IEEE_R_FDXFC_REG
(
ba£
Ë((ba£)->
IEEE_R_FDXFC
)

	)

8694 
	#ENET_IEEE_R_OCTETS_OK_REG
(
ba£
Ë((ba£)->
IEEE_R_OCTETS_OK
)

	)

8695 
	#ENET_ATCR_REG
(
ba£
Ë((ba£)->
ATCR
)

	)

8696 
	#ENET_ATVR_REG
(
ba£
Ë((ba£)->
ATVR
)

	)

8697 
	#ENET_ATOFF_REG
(
ba£
Ë((ba£)->
ATOFF
)

	)

8698 
	#ENET_ATPER_REG
(
ba£
Ë((ba£)->
ATPER
)

	)

8699 
	#ENET_ATCOR_REG
(
ba£
Ë((ba£)->
ATCOR
)

	)

8700 
	#ENET_ATINC_REG
(
ba£
Ë((ba£)->
ATINC
)

	)

8701 
	#ENET_ATSTMP_REG
(
ba£
Ë((ba£)->
ATSTMP
)

	)

8702 
	#ENET_TGSR_REG
(
ba£
Ë((ba£)->
TGSR
)

	)

8703 
	#ENET_TCSR_REG
(
ba£
,
ödex
Ë((ba£)->
TC
[ödex].
TCSR
)

	)

8704 
	#ENET_TCCR_REG
(
ba£
,
ödex
Ë((ba£)->
TC
[ödex].
TCCR
)

	)

8720 
	#ENET_EIR_RXB1_MASK
 0x1u

	)

8721 
	#ENET_EIR_RXB1_SHIFT
 0

	)

8722 
	#ENET_EIR_RXF1_MASK
 0x2u

	)

8723 
	#ENET_EIR_RXF1_SHIFT
 1

	)

8724 
	#ENET_EIR_TXB1_MASK
 0x4u

	)

8725 
	#ENET_EIR_TXB1_SHIFT
 2

	)

8726 
	#ENET_EIR_TXF1_MASK
 0x8u

	)

8727 
	#ENET_EIR_TXF1_SHIFT
 3

	)

8728 
	#ENET_EIR_RXB2_MASK
 0x10u

	)

8729 
	#ENET_EIR_RXB2_SHIFT
 4

	)

8730 
	#ENET_EIR_RXF2_MASK
 0x20u

	)

8731 
	#ENET_EIR_RXF2_SHIFT
 5

	)

8732 
	#ENET_EIR_TXB2_MASK
 0x40u

	)

8733 
	#ENET_EIR_TXB2_SHIFT
 6

	)

8734 
	#ENET_EIR_TXF2_MASK
 0x80u

	)

8735 
	#ENET_EIR_TXF2_SHIFT
 7

	)

8736 
	#ENET_EIR_RXFLUSH_0_MASK
 0x1000u

	)

8737 
	#ENET_EIR_RXFLUSH_0_SHIFT
 12

	)

8738 
	#ENET_EIR_RXFLUSH_1_MASK
 0x2000u

	)

8739 
	#ENET_EIR_RXFLUSH_1_SHIFT
 13

	)

8740 
	#ENET_EIR_RXFLUSH_2_MASK
 0x4000u

	)

8741 
	#ENET_EIR_RXFLUSH_2_SHIFT
 14

	)

8742 
	#ENET_EIR_TS_TIMER_MASK
 0x8000u

	)

8743 
	#ENET_EIR_TS_TIMER_SHIFT
 15

	)

8744 
	#ENET_EIR_TS_AVAIL_MASK
 0x10000u

	)

8745 
	#ENET_EIR_TS_AVAIL_SHIFT
 16

	)

8746 
	#ENET_EIR_WAKEUP_MASK
 0x20000u

	)

8747 
	#ENET_EIR_WAKEUP_SHIFT
 17

	)

8748 
	#ENET_EIR_PLR_MASK
 0x40000u

	)

8749 
	#ENET_EIR_PLR_SHIFT
 18

	)

8750 
	#ENET_EIR_UN_MASK
 0x80000u

	)

8751 
	#ENET_EIR_UN_SHIFT
 19

	)

8752 
	#ENET_EIR_RL_MASK
 0x100000u

	)

8753 
	#ENET_EIR_RL_SHIFT
 20

	)

8754 
	#ENET_EIR_LC_MASK
 0x200000u

	)

8755 
	#ENET_EIR_LC_SHIFT
 21

	)

8756 
	#ENET_EIR_EBERR_MASK
 0x400000u

	)

8757 
	#ENET_EIR_EBERR_SHIFT
 22

	)

8758 
	#ENET_EIR_MII_MASK
 0x800000u

	)

8759 
	#ENET_EIR_MII_SHIFT
 23

	)

8760 
	#ENET_EIR_RXB_MASK
 0x1000000u

	)

8761 
	#ENET_EIR_RXB_SHIFT
 24

	)

8762 
	#ENET_EIR_RXF_MASK
 0x2000000u

	)

8763 
	#ENET_EIR_RXF_SHIFT
 25

	)

8764 
	#ENET_EIR_TXB_MASK
 0x4000000u

	)

8765 
	#ENET_EIR_TXB_SHIFT
 26

	)

8766 
	#ENET_EIR_TXF_MASK
 0x8000000u

	)

8767 
	#ENET_EIR_TXF_SHIFT
 27

	)

8768 
	#ENET_EIR_GRA_MASK
 0x10000000u

	)

8769 
	#ENET_EIR_GRA_SHIFT
 28

	)

8770 
	#ENET_EIR_BABT_MASK
 0x20000000u

	)

8771 
	#ENET_EIR_BABT_SHIFT
 29

	)

8772 
	#ENET_EIR_BABR_MASK
 0x40000000u

	)

8773 
	#ENET_EIR_BABR_SHIFT
 30

	)

8775 
	#ENET_EIMR_RXB1_MASK
 0x1u

	)

8776 
	#ENET_EIMR_RXB1_SHIFT
 0

	)

8777 
	#ENET_EIMR_RXF1_MASK
 0x2u

	)

8778 
	#ENET_EIMR_RXF1_SHIFT
 1

	)

8779 
	#ENET_EIMR_TXB1_MASK
 0x4u

	)

8780 
	#ENET_EIMR_TXB1_SHIFT
 2

	)

8781 
	#ENET_EIMR_TXF1_MASK
 0x8u

	)

8782 
	#ENET_EIMR_TXF1_SHIFT
 3

	)

8783 
	#ENET_EIMR_RXB2_MASK
 0x10u

	)

8784 
	#ENET_EIMR_RXB2_SHIFT
 4

	)

8785 
	#ENET_EIMR_RXF2_MASK
 0x20u

	)

8786 
	#ENET_EIMR_RXF2_SHIFT
 5

	)

8787 
	#ENET_EIMR_TXB2_MASK
 0x40u

	)

8788 
	#ENET_EIMR_TXB2_SHIFT
 6

	)

8789 
	#ENET_EIMR_TXF2_MASK
 0x80u

	)

8790 
	#ENET_EIMR_TXF2_SHIFT
 7

	)

8791 
	#ENET_EIMR_RXFLUSH_0_MASK
 0x1000u

	)

8792 
	#ENET_EIMR_RXFLUSH_0_SHIFT
 12

	)

8793 
	#ENET_EIMR_RXFLUSH_1_MASK
 0x2000u

	)

8794 
	#ENET_EIMR_RXFLUSH_1_SHIFT
 13

	)

8795 
	#ENET_EIMR_RXFLUSH_2_MASK
 0x4000u

	)

8796 
	#ENET_EIMR_RXFLUSH_2_SHIFT
 14

	)

8797 
	#ENET_EIMR_TS_TIMER_MASK
 0x8000u

	)

8798 
	#ENET_EIMR_TS_TIMER_SHIFT
 15

	)

8799 
	#ENET_EIMR_TS_AVAIL_MASK
 0x10000u

	)

8800 
	#ENET_EIMR_TS_AVAIL_SHIFT
 16

	)

8801 
	#ENET_EIMR_WAKEUP_MASK
 0x20000u

	)

8802 
	#ENET_EIMR_WAKEUP_SHIFT
 17

	)

8803 
	#ENET_EIMR_PLR_MASK
 0x40000u

	)

8804 
	#ENET_EIMR_PLR_SHIFT
 18

	)

8805 
	#ENET_EIMR_UN_MASK
 0x80000u

	)

8806 
	#ENET_EIMR_UN_SHIFT
 19

	)

8807 
	#ENET_EIMR_RL_MASK
 0x100000u

	)

8808 
	#ENET_EIMR_RL_SHIFT
 20

	)

8809 
	#ENET_EIMR_LC_MASK
 0x200000u

	)

8810 
	#ENET_EIMR_LC_SHIFT
 21

	)

8811 
	#ENET_EIMR_EBERR_MASK
 0x400000u

	)

8812 
	#ENET_EIMR_EBERR_SHIFT
 22

	)

8813 
	#ENET_EIMR_MII_MASK
 0x800000u

	)

8814 
	#ENET_EIMR_MII_SHIFT
 23

	)

8815 
	#ENET_EIMR_RXB_MASK
 0x1000000u

	)

8816 
	#ENET_EIMR_RXB_SHIFT
 24

	)

8817 
	#ENET_EIMR_RXF_MASK
 0x2000000u

	)

8818 
	#ENET_EIMR_RXF_SHIFT
 25

	)

8819 
	#ENET_EIMR_TXB_MASK
 0x4000000u

	)

8820 
	#ENET_EIMR_TXB_SHIFT
 26

	)

8821 
	#ENET_EIMR_TXF_MASK
 0x8000000u

	)

8822 
	#ENET_EIMR_TXF_SHIFT
 27

	)

8823 
	#ENET_EIMR_GRA_MASK
 0x10000000u

	)

8824 
	#ENET_EIMR_GRA_SHIFT
 28

	)

8825 
	#ENET_EIMR_BABT_MASK
 0x20000000u

	)

8826 
	#ENET_EIMR_BABT_SHIFT
 29

	)

8827 
	#ENET_EIMR_BABR_MASK
 0x40000000u

	)

8828 
	#ENET_EIMR_BABR_SHIFT
 30

	)

8830 
	#ENET_RDAR_RDAR_MASK
 0x1000000u

	)

8831 
	#ENET_RDAR_RDAR_SHIFT
 24

	)

8833 
	#ENET_TDAR_TDAR_MASK
 0x1000000u

	)

8834 
	#ENET_TDAR_TDAR_SHIFT
 24

	)

8836 
	#ENET_ECR_RESET_MASK
 0x1u

	)

8837 
	#ENET_ECR_RESET_SHIFT
 0

	)

8838 
	#ENET_ECR_ETHEREN_MASK
 0x2u

	)

8839 
	#ENET_ECR_ETHEREN_SHIFT
 1

	)

8840 
	#ENET_ECR_MAGICEN_MASK
 0x4u

	)

8841 
	#ENET_ECR_MAGICEN_SHIFT
 2

	)

8842 
	#ENET_ECR_SLEEP_MASK
 0x8u

	)

8843 
	#ENET_ECR_SLEEP_SHIFT
 3

	)

8844 
	#ENET_ECR_EN1588_MASK
 0x10u

	)

8845 
	#ENET_ECR_EN1588_SHIFT
 4

	)

8846 
	#ENET_ECR_SPEED_MASK
 0x20u

	)

8847 
	#ENET_ECR_SPEED_SHIFT
 5

	)

8848 
	#ENET_ECR_DBGEN_MASK
 0x40u

	)

8849 
	#ENET_ECR_DBGEN_SHIFT
 6

	)

8850 
	#ENET_ECR_DBSWP_MASK
 0x100u

	)

8851 
	#ENET_ECR_DBSWP_SHIFT
 8

	)

8852 
	#ENET_ECR_SVLANEN_MASK
 0x200u

	)

8853 
	#ENET_ECR_SVLANEN_SHIFT
 9

	)

8854 
	#ENET_ECR_VLANUSE2ND_MASK
 0x400u

	)

8855 
	#ENET_ECR_VLANUSE2ND_SHIFT
 10

	)

8856 
	#ENET_ECR_SVLANDBL_MASK
 0x800u

	)

8857 
	#ENET_ECR_SVLANDBL_SHIFT
 11

	)

8859 
	#ENET_MMFR_DATA_MASK
 0xFFFFu

	)

8860 
	#ENET_MMFR_DATA_SHIFT
 0

	)

8861 
	#ENET_MMFR_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_MMFR_DATA_SHIFT
))&
ENET_MMFR_DATA_MASK
)

	)

8862 
	#ENET_MMFR_TA_MASK
 0x30000u

	)

8863 
	#ENET_MMFR_TA_SHIFT
 16

	)

8864 
	#ENET_MMFR_TA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_MMFR_TA_SHIFT
))&
ENET_MMFR_TA_MASK
)

	)

8865 
	#ENET_MMFR_RA_MASK
 0x7C0000u

	)

8866 
	#ENET_MMFR_RA_SHIFT
 18

	)

8867 
	#ENET_MMFR_RA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_MMFR_RA_SHIFT
))&
ENET_MMFR_RA_MASK
)

	)

8868 
	#ENET_MMFR_PA_MASK
 0xF800000u

	)

8869 
	#ENET_MMFR_PA_SHIFT
 23

	)

8870 
	#ENET_MMFR_PA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_MMFR_PA_SHIFT
))&
ENET_MMFR_PA_MASK
)

	)

8871 
	#ENET_MMFR_OP_MASK
 0x30000000u

	)

8872 
	#ENET_MMFR_OP_SHIFT
 28

	)

8873 
	#ENET_MMFR_OP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_MMFR_OP_SHIFT
))&
ENET_MMFR_OP_MASK
)

	)

8874 
	#ENET_MMFR_ST_MASK
 0xC0000000u

	)

8875 
	#ENET_MMFR_ST_SHIFT
 30

	)

8876 
	#ENET_MMFR_ST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_MMFR_ST_SHIFT
))&
ENET_MMFR_ST_MASK
)

	)

8878 
	#ENET_MSCR_MII_SPEED_MASK
 0x7Eu

	)

8879 
	#ENET_MSCR_MII_SPEED_SHIFT
 1

	)

8880 
	#ENET_MSCR_MII_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_MSCR_MII_SPEED_SHIFT
))&
ENET_MSCR_MII_SPEED_MASK
)

	)

8881 
	#ENET_MSCR_DIS_PRE_MASK
 0x80u

	)

8882 
	#ENET_MSCR_DIS_PRE_SHIFT
 7

	)

8883 
	#ENET_MSCR_HOLDTIME_MASK
 0x700u

	)

8884 
	#ENET_MSCR_HOLDTIME_SHIFT
 8

	)

8885 
	#ENET_MSCR_HOLDTIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_MSCR_HOLDTIME_SHIFT
))&
ENET_MSCR_HOLDTIME_MASK
)

	)

8887 
	#ENET_MIBC_MIB_CLEAR_MASK
 0x20000000u

	)

8888 
	#ENET_MIBC_MIB_CLEAR_SHIFT
 29

	)

8889 
	#ENET_MIBC_MIB_IDLE_MASK
 0x40000000u

	)

8890 
	#ENET_MIBC_MIB_IDLE_SHIFT
 30

	)

8891 
	#ENET_MIBC_MIB_DIS_MASK
 0x80000000u

	)

8892 
	#ENET_MIBC_MIB_DIS_SHIFT
 31

	)

8894 
	#ENET_RCR_LOOP_MASK
 0x1u

	)

8895 
	#ENET_RCR_LOOP_SHIFT
 0

	)

8896 
	#ENET_RCR_DRT_MASK
 0x2u

	)

8897 
	#ENET_RCR_DRT_SHIFT
 1

	)

8898 
	#ENET_RCR_MII_MODE_MASK
 0x4u

	)

8899 
	#ENET_RCR_MII_MODE_SHIFT
 2

	)

8900 
	#ENET_RCR_PROM_MASK
 0x8u

	)

8901 
	#ENET_RCR_PROM_SHIFT
 3

	)

8902 
	#ENET_RCR_BC_REJ_MASK
 0x10u

	)

8903 
	#ENET_RCR_BC_REJ_SHIFT
 4

	)

8904 
	#ENET_RCR_FCE_MASK
 0x20u

	)

8905 
	#ENET_RCR_FCE_SHIFT
 5

	)

8906 
	#ENET_RCR_RGMII_EN_MASK
 0x40u

	)

8907 
	#ENET_RCR_RGMII_EN_SHIFT
 6

	)

8908 
	#ENET_RCR_RMII_MODE_MASK
 0x100u

	)

8909 
	#ENET_RCR_RMII_MODE_SHIFT
 8

	)

8910 
	#ENET_RCR_RMII_10T_MASK
 0x200u

	)

8911 
	#ENET_RCR_RMII_10T_SHIFT
 9

	)

8912 
	#ENET_RCR_PADEN_MASK
 0x1000u

	)

8913 
	#ENET_RCR_PADEN_SHIFT
 12

	)

8914 
	#ENET_RCR_PAUFWD_MASK
 0x2000u

	)

8915 
	#ENET_RCR_PAUFWD_SHIFT
 13

	)

8916 
	#ENET_RCR_CRCFWD_MASK
 0x4000u

	)

8917 
	#ENET_RCR_CRCFWD_SHIFT
 14

	)

8918 
	#ENET_RCR_CFEN_MASK
 0x8000u

	)

8919 
	#ENET_RCR_CFEN_SHIFT
 15

	)

8920 
	#ENET_RCR_MAX_FL_MASK
 0x3FFF0000u

	)

8921 
	#ENET_RCR_MAX_FL_SHIFT
 16

	)

8922 
	#ENET_RCR_MAX_FL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RCR_MAX_FL_SHIFT
))&
ENET_RCR_MAX_FL_MASK
)

	)

8923 
	#ENET_RCR_NLC_MASK
 0x40000000u

	)

8924 
	#ENET_RCR_NLC_SHIFT
 30

	)

8925 
	#ENET_RCR_GRS_MASK
 0x80000000u

	)

8926 
	#ENET_RCR_GRS_SHIFT
 31

	)

8928 
	#ENET_TCR_GTS_MASK
 0x1u

	)

8929 
	#ENET_TCR_GTS_SHIFT
 0

	)

8930 
	#ENET_TCR_FDEN_MASK
 0x4u

	)

8931 
	#ENET_TCR_FDEN_SHIFT
 2

	)

8932 
	#ENET_TCR_TFC_PAUSE_MASK
 0x8u

	)

8933 
	#ENET_TCR_TFC_PAUSE_SHIFT
 3

	)

8934 
	#ENET_TCR_RFC_PAUSE_MASK
 0x10u

	)

8935 
	#ENET_TCR_RFC_PAUSE_SHIFT
 4

	)

8936 
	#ENET_TCR_ADDSEL_MASK
 0xE0u

	)

8937 
	#ENET_TCR_ADDSEL_SHIFT
 5

	)

8938 
	#ENET_TCR_ADDSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_TCR_ADDSEL_SHIFT
))&
ENET_TCR_ADDSEL_MASK
)

	)

8939 
	#ENET_TCR_ADDINS_MASK
 0x100u

	)

8940 
	#ENET_TCR_ADDINS_SHIFT
 8

	)

8941 
	#ENET_TCR_CRCFWD_MASK
 0x200u

	)

8942 
	#ENET_TCR_CRCFWD_SHIFT
 9

	)

8944 
	#ENET_PALR_PADDR1_MASK
 0xFFFFFFFFu

	)

8945 
	#ENET_PALR_PADDR1_SHIFT
 0

	)

8946 
	#ENET_PALR_PADDR1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_PALR_PADDR1_SHIFT
))&
ENET_PALR_PADDR1_MASK
)

	)

8948 
	#ENET_PAUR_TYPE_MASK
 0xFFFFu

	)

8949 
	#ENET_PAUR_TYPE_SHIFT
 0

	)

8950 
	#ENET_PAUR_TYPE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_PAUR_TYPE_SHIFT
))&
ENET_PAUR_TYPE_MASK
)

	)

8951 
	#ENET_PAUR_PADDR2_MASK
 0xFFFF0000u

	)

8952 
	#ENET_PAUR_PADDR2_SHIFT
 16

	)

8953 
	#ENET_PAUR_PADDR2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_PAUR_PADDR2_SHIFT
))&
ENET_PAUR_PADDR2_MASK
)

	)

8955 
	#ENET_OPD_PAUSE_DUR_MASK
 0xFFFFu

	)

8956 
	#ENET_OPD_PAUSE_DUR_SHIFT
 0

	)

8957 
	#ENET_OPD_PAUSE_DUR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_OPD_PAUSE_DUR_SHIFT
))&
ENET_OPD_PAUSE_DUR_MASK
)

	)

8958 
	#ENET_OPD_OPCODE_MASK
 0xFFFF0000u

	)

8959 
	#ENET_OPD_OPCODE_SHIFT
 16

	)

8960 
	#ENET_OPD_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_OPD_OPCODE_SHIFT
))&
ENET_OPD_OPCODE_MASK
)

	)

8962 
	#ENET_TXIC_ICTT_MASK
 0xFFFFu

	)

8963 
	#ENET_TXIC_ICTT_SHIFT
 0

	)

8964 
	#ENET_TXIC_ICTT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_TXIC_ICTT_SHIFT
))&
ENET_TXIC_ICTT_MASK
)

	)

8965 
	#ENET_TXIC_ICFT_MASK
 0xFF00000u

	)

8966 
	#ENET_TXIC_ICFT_SHIFT
 20

	)

8967 
	#ENET_TXIC_ICFT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_TXIC_ICFT_SHIFT
))&
ENET_TXIC_ICFT_MASK
)

	)

8968 
	#ENET_TXIC_ICCS_MASK
 0x40000000u

	)

8969 
	#ENET_TXIC_ICCS_SHIFT
 30

	)

8970 
	#ENET_TXIC_ICEN_MASK
 0x80000000u

	)

8971 
	#ENET_TXIC_ICEN_SHIFT
 31

	)

8973 
	#ENET_RXIC_ICTT_MASK
 0xFFFFu

	)

8974 
	#ENET_RXIC_ICTT_SHIFT
 0

	)

8975 
	#ENET_RXIC_ICTT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RXIC_ICTT_SHIFT
))&
ENET_RXIC_ICTT_MASK
)

	)

8976 
	#ENET_RXIC_ICFT_MASK
 0xFF00000u

	)

8977 
	#ENET_RXIC_ICFT_SHIFT
 20

	)

8978 
	#ENET_RXIC_ICFT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RXIC_ICFT_SHIFT
))&
ENET_RXIC_ICFT_MASK
)

	)

8979 
	#ENET_RXIC_ICCS_MASK
 0x40000000u

	)

8980 
	#ENET_RXIC_ICCS_SHIFT
 30

	)

8981 
	#ENET_RXIC_ICEN_MASK
 0x80000000u

	)

8982 
	#ENET_RXIC_ICEN_SHIFT
 31

	)

8984 
	#ENET_IAUR_IADDR1_MASK
 0xFFFFFFFFu

	)

8985 
	#ENET_IAUR_IADDR1_SHIFT
 0

	)

8986 
	#ENET_IAUR_IADDR1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IAUR_IADDR1_SHIFT
))&
ENET_IAUR_IADDR1_MASK
)

	)

8988 
	#ENET_IALR_IADDR2_MASK
 0xFFFFFFFFu

	)

8989 
	#ENET_IALR_IADDR2_SHIFT
 0

	)

8990 
	#ENET_IALR_IADDR2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IALR_IADDR2_SHIFT
))&
ENET_IALR_IADDR2_MASK
)

	)

8992 
	#ENET_GAUR_GADDR1_MASK
 0xFFFFFFFFu

	)

8993 
	#ENET_GAUR_GADDR1_SHIFT
 0

	)

8994 
	#ENET_GAUR_GADDR1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_GAUR_GADDR1_SHIFT
))&
ENET_GAUR_GADDR1_MASK
)

	)

8996 
	#ENET_GALR_GADDR2_MASK
 0xFFFFFFFFu

	)

8997 
	#ENET_GALR_GADDR2_SHIFT
 0

	)

8998 
	#ENET_GALR_GADDR2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_GALR_GADDR2_SHIFT
))&
ENET_GALR_GADDR2_MASK
)

	)

9000 
	#ENET_TFWR_TFWR_MASK
 0x3Fu

	)

9001 
	#ENET_TFWR_TFWR_SHIFT
 0

	)

9002 
	#ENET_TFWR_TFWR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_TFWR_TFWR_SHIFT
))&
ENET_TFWR_TFWR_MASK
)

	)

9003 
	#ENET_TFWR_STRFWD_MASK
 0x100u

	)

9004 
	#ENET_TFWR_STRFWD_SHIFT
 8

	)

9006 
	#ENET_RDSR1_R_DES_START_MASK
 0xFFFFFFF8u

	)

9007 
	#ENET_RDSR1_R_DES_START_SHIFT
 3

	)

9008 
	#ENET_RDSR1_R_DES_START
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RDSR1_R_DES_START_SHIFT
))&
ENET_RDSR1_R_DES_START_MASK
)

	)

9010 
	#ENET_TDSR1_X_DES_START_MASK
 0xFFFFFFF8u

	)

9011 
	#ENET_TDSR1_X_DES_START_SHIFT
 3

	)

9012 
	#ENET_TDSR1_X_DES_START
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_TDSR1_X_DES_START_SHIFT
))&
ENET_TDSR1_X_DES_START_MASK
)

	)

9014 
	#ENET_MRBR1_R_BUF_SIZE_MASK
 0x7F0u

	)

9015 
	#ENET_MRBR1_R_BUF_SIZE_SHIFT
 4

	)

9016 
	#ENET_MRBR1_R_BUF_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_MRBR1_R_BUF_SIZE_SHIFT
))&
ENET_MRBR1_R_BUF_SIZE_MASK
)

	)

9018 
	#ENET_RDSR2_R_DES_START_MASK
 0xFFFFFFF8u

	)

9019 
	#ENET_RDSR2_R_DES_START_SHIFT
 3

	)

9020 
	#ENET_RDSR2_R_DES_START
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RDSR2_R_DES_START_SHIFT
))&
ENET_RDSR2_R_DES_START_MASK
)

	)

9022 
	#ENET_TDSR2_X_DES_START_MASK
 0xFFFFFFF8u

	)

9023 
	#ENET_TDSR2_X_DES_START_SHIFT
 3

	)

9024 
	#ENET_TDSR2_X_DES_START
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_TDSR2_X_DES_START_SHIFT
))&
ENET_TDSR2_X_DES_START_MASK
)

	)

9026 
	#ENET_MRBR2_R_BUF_SIZE_MASK
 0x7F0u

	)

9027 
	#ENET_MRBR2_R_BUF_SIZE_SHIFT
 4

	)

9028 
	#ENET_MRBR2_R_BUF_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_MRBR2_R_BUF_SIZE_SHIFT
))&
ENET_MRBR2_R_BUF_SIZE_MASK
)

	)

9030 
	#ENET_RDSR_R_DES_START_MASK
 0xFFFFFFF8u

	)

9031 
	#ENET_RDSR_R_DES_START_SHIFT
 3

	)

9032 
	#ENET_RDSR_R_DES_START
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RDSR_R_DES_START_SHIFT
))&
ENET_RDSR_R_DES_START_MASK
)

	)

9034 
	#ENET_TDSR_X_DES_START_MASK
 0xFFFFFFF8u

	)

9035 
	#ENET_TDSR_X_DES_START_SHIFT
 3

	)

9036 
	#ENET_TDSR_X_DES_START
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_TDSR_X_DES_START_SHIFT
))&
ENET_TDSR_X_DES_START_MASK
)

	)

9038 
	#ENET_MRBR_R_BUF_SIZE_MASK
 0x7F0u

	)

9039 
	#ENET_MRBR_R_BUF_SIZE_SHIFT
 4

	)

9040 
	#ENET_MRBR_R_BUF_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_MRBR_R_BUF_SIZE_SHIFT
))&
ENET_MRBR_R_BUF_SIZE_MASK
)

	)

9042 
	#ENET_RSFL_RX_SECTION_FULL_MASK
 0x3FFu

	)

9043 
	#ENET_RSFL_RX_SECTION_FULL_SHIFT
 0

	)

9044 
	#ENET_RSFL_RX_SECTION_FULL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RSFL_RX_SECTION_FULL_SHIFT
))&
ENET_RSFL_RX_SECTION_FULL_MASK
)

	)

9046 
	#ENET_RSEM_RX_SECTION_EMPTY_MASK
 0x3FFu

	)

9047 
	#ENET_RSEM_RX_SECTION_EMPTY_SHIFT
 0

	)

9048 
	#ENET_RSEM_RX_SECTION_EMPTY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RSEM_RX_SECTION_EMPTY_SHIFT
))&
ENET_RSEM_RX_SECTION_EMPTY_MASK
)

	)

9049 
	#ENET_RSEM_STAT_SECTION_EMPTY_MASK
 0x1F0000u

	)

9050 
	#ENET_RSEM_STAT_SECTION_EMPTY_SHIFT
 16

	)

9051 
	#ENET_RSEM_STAT_SECTION_EMPTY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RSEM_STAT_SECTION_EMPTY_SHIFT
))&
ENET_RSEM_STAT_SECTION_EMPTY_MASK
)

	)

9053 
	#ENET_RAEM_RX_ALMOST_EMPTY_MASK
 0x3FFu

	)

9054 
	#ENET_RAEM_RX_ALMOST_EMPTY_SHIFT
 0

	)

9055 
	#ENET_RAEM_RX_ALMOST_EMPTY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RAEM_RX_ALMOST_EMPTY_SHIFT
))&
ENET_RAEM_RX_ALMOST_EMPTY_MASK
)

	)

9057 
	#ENET_RAFL_RX_ALMOST_FULL_MASK
 0x3FFu

	)

9058 
	#ENET_RAFL_RX_ALMOST_FULL_SHIFT
 0

	)

9059 
	#ENET_RAFL_RX_ALMOST_FULL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RAFL_RX_ALMOST_FULL_SHIFT
))&
ENET_RAFL_RX_ALMOST_FULL_MASK
)

	)

9061 
	#ENET_TSEM_TX_SECTION_EMPTY_MASK
 0x3FFu

	)

9062 
	#ENET_TSEM_TX_SECTION_EMPTY_SHIFT
 0

	)

9063 
	#ENET_TSEM_TX_SECTION_EMPTY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_TSEM_TX_SECTION_EMPTY_SHIFT
))&
ENET_TSEM_TX_SECTION_EMPTY_MASK
)

	)

9065 
	#ENET_TAEM_TX_ALMOST_EMPTY_MASK
 0x3FFu

	)

9066 
	#ENET_TAEM_TX_ALMOST_EMPTY_SHIFT
 0

	)

9067 
	#ENET_TAEM_TX_ALMOST_EMPTY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_TAEM_TX_ALMOST_EMPTY_SHIFT
))&
ENET_TAEM_TX_ALMOST_EMPTY_MASK
)

	)

9069 
	#ENET_TAFL_TX_ALMOST_FULL_MASK
 0x3FFu

	)

9070 
	#ENET_TAFL_TX_ALMOST_FULL_SHIFT
 0

	)

9071 
	#ENET_TAFL_TX_ALMOST_FULL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_TAFL_TX_ALMOST_FULL_SHIFT
))&
ENET_TAFL_TX_ALMOST_FULL_MASK
)

	)

9073 
	#ENET_TIPG_IPG_MASK
 0x1Fu

	)

9074 
	#ENET_TIPG_IPG_SHIFT
 0

	)

9075 
	#ENET_TIPG_IPG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_TIPG_IPG_SHIFT
))&
ENET_TIPG_IPG_MASK
)

	)

9077 
	#ENET_FTRL_TRUNC_FL_MASK
 0x3FFFu

	)

9078 
	#ENET_FTRL_TRUNC_FL_SHIFT
 0

	)

9079 
	#ENET_FTRL_TRUNC_FL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_FTRL_TRUNC_FL_SHIFT
))&
ENET_FTRL_TRUNC_FL_MASK
)

	)

9081 
	#ENET_TACC_SHIFT16_MASK
 0x1u

	)

9082 
	#ENET_TACC_SHIFT16_SHIFT
 0

	)

9083 
	#ENET_TACC_IPCHK_MASK
 0x8u

	)

9084 
	#ENET_TACC_IPCHK_SHIFT
 3

	)

9085 
	#ENET_TACC_PROCHK_MASK
 0x10u

	)

9086 
	#ENET_TACC_PROCHK_SHIFT
 4

	)

9088 
	#ENET_RACC_PADREM_MASK
 0x1u

	)

9089 
	#ENET_RACC_PADREM_SHIFT
 0

	)

9090 
	#ENET_RACC_IPDIS_MASK
 0x2u

	)

9091 
	#ENET_RACC_IPDIS_SHIFT
 1

	)

9092 
	#ENET_RACC_PRODIS_MASK
 0x4u

	)

9093 
	#ENET_RACC_PRODIS_SHIFT
 2

	)

9094 
	#ENET_RACC_LINEDIS_MASK
 0x40u

	)

9095 
	#ENET_RACC_LINEDIS_SHIFT
 6

	)

9096 
	#ENET_RACC_SHIFT16_MASK
 0x80u

	)

9097 
	#ENET_RACC_SHIFT16_SHIFT
 7

	)

9099 
	#ENET_RCMR_CMP0_MASK
 0x7u

	)

9100 
	#ENET_RCMR_CMP0_SHIFT
 0

	)

9101 
	#ENET_RCMR_CMP0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RCMR_CMP0_SHIFT
))&
ENET_RCMR_CMP0_MASK
)

	)

9102 
	#ENET_RCMR_CMP1_MASK
 0x70u

	)

9103 
	#ENET_RCMR_CMP1_SHIFT
 4

	)

9104 
	#ENET_RCMR_CMP1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RCMR_CMP1_SHIFT
))&
ENET_RCMR_CMP1_MASK
)

	)

9105 
	#ENET_RCMR_CMP2_MASK
 0x700u

	)

9106 
	#ENET_RCMR_CMP2_SHIFT
 8

	)

9107 
	#ENET_RCMR_CMP2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RCMR_CMP2_SHIFT
))&
ENET_RCMR_CMP2_MASK
)

	)

9108 
	#ENET_RCMR_CMP3_MASK
 0x7000u

	)

9109 
	#ENET_RCMR_CMP3_SHIFT
 12

	)

9110 
	#ENET_RCMR_CMP3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RCMR_CMP3_SHIFT
))&
ENET_RCMR_CMP3_MASK
)

	)

9111 
	#ENET_RCMR_MATCHEN_MASK
 0x10000u

	)

9112 
	#ENET_RCMR_MATCHEN_SHIFT
 16

	)

9114 
	#ENET_DMACFG_IDLE_SLOPE_MASK
 0xFFFFu

	)

9115 
	#ENET_DMACFG_IDLE_SLOPE_SHIFT
 0

	)

9116 
	#ENET_DMACFG_IDLE_SLOPE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_DMACFG_IDLE_SLOPE_SHIFT
))&
ENET_DMACFG_IDLE_SLOPE_MASK
)

	)

9117 
	#ENET_DMACFG_DMA_CLASS_EN_MASK
 0x10000u

	)

9118 
	#ENET_DMACFG_DMA_CLASS_EN_SHIFT
 16

	)

9119 
	#ENET_DMACFG_CALC_NOIPG_MASK
 0x20000u

	)

9120 
	#ENET_DMACFG_CALC_NOIPG_SHIFT
 17

	)

9122 
	#ENET_RDAR1_RDAR_MASK
 0x1000000u

	)

9123 
	#ENET_RDAR1_RDAR_SHIFT
 24

	)

9125 
	#ENET_TDAR1_TDAR_MASK
 0x1000000u

	)

9126 
	#ENET_TDAR1_TDAR_SHIFT
 24

	)

9128 
	#ENET_RDAR2_RDAR_MASK
 0x1000000u

	)

9129 
	#ENET_RDAR2_RDAR_SHIFT
 24

	)

9131 
	#ENET_TDAR2_TDAR_MASK
 0x1000000u

	)

9132 
	#ENET_TDAR2_TDAR_SHIFT
 24

	)

9134 
	#ENET_QOS_TX_SCHEME_MASK
 0x7u

	)

9135 
	#ENET_QOS_TX_SCHEME_SHIFT
 0

	)

9136 
	#ENET_QOS_TX_SCHEME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_QOS_TX_SCHEME_SHIFT
))&
ENET_QOS_TX_SCHEME_MASK
)

	)

9137 
	#ENET_QOS_RX_FLUSH0_MASK
 0x8u

	)

9138 
	#ENET_QOS_RX_FLUSH0_SHIFT
 3

	)

9139 
	#ENET_QOS_RX_FLUSH1_MASK
 0x10u

	)

9140 
	#ENET_QOS_RX_FLUSH1_SHIFT
 4

	)

9141 
	#ENET_QOS_RX_FLUSH2_MASK
 0x20u

	)

9142 
	#ENET_QOS_RX_FLUSH2_SHIFT
 5

	)

9144 
	#ENET_RMON_T_DROP_INCCNTF_MASK
 0xFFFFu

	)

9145 
	#ENET_RMON_T_DROP_INCCNTF_SHIFT
 0

	)

9146 
	#ENET_RMON_T_DROP_INCCNTF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_T_DROP_INCCNTF_SHIFT
))&
ENET_RMON_T_DROP_INCCNTF_MASK
)

	)

9148 
	#ENET_RMON_T_PACKETS_TXPKTS_MASK
 0xFFFFu

	)

9149 
	#ENET_RMON_T_PACKETS_TXPKTS_SHIFT
 0

	)

9150 
	#ENET_RMON_T_PACKETS_TXPKTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_T_PACKETS_TXPKTS_SHIFT
))&
ENET_RMON_T_PACKETS_TXPKTS_MASK
)

	)

9152 
	#ENET_RMON_T_BC_PKT_TXPKTS_MASK
 0xFFFFu

	)

9153 
	#ENET_RMON_T_BC_PKT_TXPKTS_SHIFT
 0

	)

9154 
	#ENET_RMON_T_BC_PKT_TXPKTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_T_BC_PKT_TXPKTS_SHIFT
))&
ENET_RMON_T_BC_PKT_TXPKTS_MASK
)

	)

9156 
	#ENET_RMON_T_MC_PKT_TXPKTS_MASK
 0xFFFFu

	)

9157 
	#ENET_RMON_T_MC_PKT_TXPKTS_SHIFT
 0

	)

9158 
	#ENET_RMON_T_MC_PKT_TXPKTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_T_MC_PKT_TXPKTS_SHIFT
))&
ENET_RMON_T_MC_PKT_TXPKTS_MASK
)

	)

9160 
	#ENET_RMON_T_CRC_ALIGN_TXPKTS_MASK
 0xFFFFu

	)

9161 
	#ENET_RMON_T_CRC_ALIGN_TXPKTS_SHIFT
 0

	)

9162 
	#ENET_RMON_T_CRC_ALIGN_TXPKTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_T_CRC_ALIGN_TXPKTS_SHIFT
))&
ENET_RMON_T_CRC_ALIGN_TXPKTS_MASK
)

	)

9164 
	#ENET_RMON_T_UNDERSIZE_TXPKTS_MASK
 0xFFFFu

	)

9165 
	#ENET_RMON_T_UNDERSIZE_TXPKTS_SHIFT
 0

	)

9166 
	#ENET_RMON_T_UNDERSIZE_TXPKTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_T_UNDERSIZE_TXPKTS_SHIFT
))&
ENET_RMON_T_UNDERSIZE_TXPKTS_MASK
)

	)

9168 
	#ENET_RMON_T_OVERSIZE_TXPKTS_MASK
 0xFFFFu

	)

9169 
	#ENET_RMON_T_OVERSIZE_TXPKTS_SHIFT
 0

	)

9170 
	#ENET_RMON_T_OVERSIZE_TXPKTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_T_OVERSIZE_TXPKTS_SHIFT
))&
ENET_RMON_T_OVERSIZE_TXPKTS_MASK
)

	)

9172 
	#ENET_RMON_T_FRAG_TXPKTS_MASK
 0xFFFFu

	)

9173 
	#ENET_RMON_T_FRAG_TXPKTS_SHIFT
 0

	)

9174 
	#ENET_RMON_T_FRAG_TXPKTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_T_FRAG_TXPKTS_SHIFT
))&
ENET_RMON_T_FRAG_TXPKTS_MASK
)

	)

9176 
	#ENET_RMON_T_JAB_TXPKTS_MASK
 0xFFFFu

	)

9177 
	#ENET_RMON_T_JAB_TXPKTS_SHIFT
 0

	)

9178 
	#ENET_RMON_T_JAB_TXPKTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_T_JAB_TXPKTS_SHIFT
))&
ENET_RMON_T_JAB_TXPKTS_MASK
)

	)

9180 
	#ENET_RMON_T_COL_TXPKTS_MASK
 0xFFFFu

	)

9181 
	#ENET_RMON_T_COL_TXPKTS_SHIFT
 0

	)

9182 
	#ENET_RMON_T_COL_TXPKTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_T_COL_TXPKTS_SHIFT
))&
ENET_RMON_T_COL_TXPKTS_MASK
)

	)

9184 
	#ENET_RMON_T_P64_TXPKTS_MASK
 0xFFFFu

	)

9185 
	#ENET_RMON_T_P64_TXPKTS_SHIFT
 0

	)

9186 
	#ENET_RMON_T_P64_TXPKTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_T_P64_TXPKTS_SHIFT
))&
ENET_RMON_T_P64_TXPKTS_MASK
)

	)

9188 
	#ENET_RMON_T_P65TO127_TXPKTS_MASK
 0xFFFFu

	)

9189 
	#ENET_RMON_T_P65TO127_TXPKTS_SHIFT
 0

	)

9190 
	#ENET_RMON_T_P65TO127_TXPKTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_T_P65TO127_TXPKTS_SHIFT
))&
ENET_RMON_T_P65TO127_TXPKTS_MASK
)

	)

9192 
	#ENET_RMON_T_P128TO255_TXPKTS_MASK
 0xFFFFu

	)

9193 
	#ENET_RMON_T_P128TO255_TXPKTS_SHIFT
 0

	)

9194 
	#ENET_RMON_T_P128TO255_TXPKTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_T_P128TO255_TXPKTS_SHIFT
))&
ENET_RMON_T_P128TO255_TXPKTS_MASK
)

	)

9196 
	#ENET_RMON_T_P256TO511_TXPKTS_MASK
 0xFFFFu

	)

9197 
	#ENET_RMON_T_P256TO511_TXPKTS_SHIFT
 0

	)

9198 
	#ENET_RMON_T_P256TO511_TXPKTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_T_P256TO511_TXPKTS_SHIFT
))&
ENET_RMON_T_P256TO511_TXPKTS_MASK
)

	)

9200 
	#ENET_RMON_T_P512TO1023_TXPKTS_MASK
 0xFFFFu

	)

9201 
	#ENET_RMON_T_P512TO1023_TXPKTS_SHIFT
 0

	)

9202 
	#ENET_RMON_T_P512TO1023_TXPKTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_T_P512TO1023_TXPKTS_SHIFT
))&
ENET_RMON_T_P512TO1023_TXPKTS_MASK
)

	)

9204 
	#ENET_RMON_T_P1024TO2047_TXPKTS_MASK
 0xFFFFu

	)

9205 
	#ENET_RMON_T_P1024TO2047_TXPKTS_SHIFT
 0

	)

9206 
	#ENET_RMON_T_P1024TO2047_TXPKTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_T_P1024TO2047_TXPKTS_SHIFT
))&
ENET_RMON_T_P1024TO2047_TXPKTS_MASK
)

	)

9208 
	#ENET_RMON_T_P_GTE2048_TXPKTS_MASK
 0xFFFFu

	)

9209 
	#ENET_RMON_T_P_GTE2048_TXPKTS_SHIFT
 0

	)

9210 
	#ENET_RMON_T_P_GTE2048_TXPKTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_T_P_GTE2048_TXPKTS_SHIFT
))&
ENET_RMON_T_P_GTE2048_TXPKTS_MASK
)

	)

9212 
	#ENET_RMON_T_OCTETS_TXOCTS_MASK
 0xFFFFFFFFu

	)

9213 
	#ENET_RMON_T_OCTETS_TXOCTS_SHIFT
 0

	)

9214 
	#ENET_RMON_T_OCTETS_TXOCTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_T_OCTETS_TXOCTS_SHIFT
))&
ENET_RMON_T_OCTETS_TXOCTS_MASK
)

	)

9216 
	#ENET_IEEE_T_DROP_COUNT_MASK
 0xFFFFu

	)

9217 
	#ENET_IEEE_T_DROP_COUNT_SHIFT
 0

	)

9218 
	#ENET_IEEE_T_DROP_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IEEE_T_DROP_COUNT_SHIFT
))&
ENET_IEEE_T_DROP_COUNT_MASK
)

	)

9220 
	#ENET_IEEE_T_FRAME_OK_COUNT_MASK
 0xFFFFu

	)

9221 
	#ENET_IEEE_T_FRAME_OK_COUNT_SHIFT
 0

	)

9222 
	#ENET_IEEE_T_FRAME_OK_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IEEE_T_FRAME_OK_COUNT_SHIFT
))&
ENET_IEEE_T_FRAME_OK_COUNT_MASK
)

	)

9224 
	#ENET_IEEE_T_1COL_COUNT_MASK
 0xFFFFu

	)

9225 
	#ENET_IEEE_T_1COL_COUNT_SHIFT
 0

	)

9226 
	#ENET_IEEE_T_1COL_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IEEE_T_1COL_COUNT_SHIFT
))&
ENET_IEEE_T_1COL_COUNT_MASK
)

	)

9228 
	#ENET_IEEE_T_MCOL_COUNT_MASK
 0xFFFFu

	)

9229 
	#ENET_IEEE_T_MCOL_COUNT_SHIFT
 0

	)

9230 
	#ENET_IEEE_T_MCOL_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IEEE_T_MCOL_COUNT_SHIFT
))&
ENET_IEEE_T_MCOL_COUNT_MASK
)

	)

9232 
	#ENET_IEEE_T_DEF_COUNT_MASK
 0xFFFFu

	)

9233 
	#ENET_IEEE_T_DEF_COUNT_SHIFT
 0

	)

9234 
	#ENET_IEEE_T_DEF_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IEEE_T_DEF_COUNT_SHIFT
))&
ENET_IEEE_T_DEF_COUNT_MASK
)

	)

9236 
	#ENET_IEEE_T_LCOL_COUNT_MASK
 0xFFFFu

	)

9237 
	#ENET_IEEE_T_LCOL_COUNT_SHIFT
 0

	)

9238 
	#ENET_IEEE_T_LCOL_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IEEE_T_LCOL_COUNT_SHIFT
))&
ENET_IEEE_T_LCOL_COUNT_MASK
)

	)

9240 
	#ENET_IEEE_T_EXCOL_COUNT_MASK
 0xFFFFu

	)

9241 
	#ENET_IEEE_T_EXCOL_COUNT_SHIFT
 0

	)

9242 
	#ENET_IEEE_T_EXCOL_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IEEE_T_EXCOL_COUNT_SHIFT
))&
ENET_IEEE_T_EXCOL_COUNT_MASK
)

	)

9244 
	#ENET_IEEE_T_MACERR_COUNT_MASK
 0xFFFFu

	)

9245 
	#ENET_IEEE_T_MACERR_COUNT_SHIFT
 0

	)

9246 
	#ENET_IEEE_T_MACERR_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IEEE_T_MACERR_COUNT_SHIFT
))&
ENET_IEEE_T_MACERR_COUNT_MASK
)

	)

9248 
	#ENET_IEEE_T_CSERR_COUNT_MASK
 0xFFFFu

	)

9249 
	#ENET_IEEE_T_CSERR_COUNT_SHIFT
 0

	)

9250 
	#ENET_IEEE_T_CSERR_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IEEE_T_CSERR_COUNT_SHIFT
))&
ENET_IEEE_T_CSERR_COUNT_MASK
)

	)

9252 
	#ENET_IEEE_T_SQE_COUNT_MASK
 0xFFFFu

	)

9253 
	#ENET_IEEE_T_SQE_COUNT_SHIFT
 0

	)

9254 
	#ENET_IEEE_T_SQE_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IEEE_T_SQE_COUNT_SHIFT
))&
ENET_IEEE_T_SQE_COUNT_MASK
)

	)

9256 
	#ENET_IEEE_T_FDXFC_COUNT_MASK
 0xFFFFu

	)

9257 
	#ENET_IEEE_T_FDXFC_COUNT_SHIFT
 0

	)

9258 
	#ENET_IEEE_T_FDXFC_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IEEE_T_FDXFC_COUNT_SHIFT
))&
ENET_IEEE_T_FDXFC_COUNT_MASK
)

	)

9260 
	#ENET_IEEE_T_OCTETS_OK_COUNT_MASK
 0xFFFFFFFFu

	)

9261 
	#ENET_IEEE_T_OCTETS_OK_COUNT_SHIFT
 0

	)

9262 
	#ENET_IEEE_T_OCTETS_OK_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IEEE_T_OCTETS_OK_COUNT_SHIFT
))&
ENET_IEEE_T_OCTETS_OK_COUNT_MASK
)

	)

9264 
	#ENET_RMON_R_PACKETS_COUNT_MASK
 0xFFFFu

	)

9265 
	#ENET_RMON_R_PACKETS_COUNT_SHIFT
 0

	)

9266 
	#ENET_RMON_R_PACKETS_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_R_PACKETS_COUNT_SHIFT
))&
ENET_RMON_R_PACKETS_COUNT_MASK
)

	)

9268 
	#ENET_RMON_R_BC_PKT_COUNT_MASK
 0xFFFFu

	)

9269 
	#ENET_RMON_R_BC_PKT_COUNT_SHIFT
 0

	)

9270 
	#ENET_RMON_R_BC_PKT_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_R_BC_PKT_COUNT_SHIFT
))&
ENET_RMON_R_BC_PKT_COUNT_MASK
)

	)

9272 
	#ENET_RMON_R_MC_PKT_COUNT_MASK
 0xFFFFu

	)

9273 
	#ENET_RMON_R_MC_PKT_COUNT_SHIFT
 0

	)

9274 
	#ENET_RMON_R_MC_PKT_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_R_MC_PKT_COUNT_SHIFT
))&
ENET_RMON_R_MC_PKT_COUNT_MASK
)

	)

9276 
	#ENET_RMON_R_CRC_ALIGN_COUNT_MASK
 0xFFFFu

	)

9277 
	#ENET_RMON_R_CRC_ALIGN_COUNT_SHIFT
 0

	)

9278 
	#ENET_RMON_R_CRC_ALIGN_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_R_CRC_ALIGN_COUNT_SHIFT
))&
ENET_RMON_R_CRC_ALIGN_COUNT_MASK
)

	)

9280 
	#ENET_RMON_R_UNDERSIZE_COUNT_MASK
 0xFFFFu

	)

9281 
	#ENET_RMON_R_UNDERSIZE_COUNT_SHIFT
 0

	)

9282 
	#ENET_RMON_R_UNDERSIZE_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_R_UNDERSIZE_COUNT_SHIFT
))&
ENET_RMON_R_UNDERSIZE_COUNT_MASK
)

	)

9284 
	#ENET_RMON_R_OVERSIZE_COUNT_MASK
 0xFFFFu

	)

9285 
	#ENET_RMON_R_OVERSIZE_COUNT_SHIFT
 0

	)

9286 
	#ENET_RMON_R_OVERSIZE_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_R_OVERSIZE_COUNT_SHIFT
))&
ENET_RMON_R_OVERSIZE_COUNT_MASK
)

	)

9288 
	#ENET_RMON_R_FRAG_COUNT_MASK
 0xFFFFu

	)

9289 
	#ENET_RMON_R_FRAG_COUNT_SHIFT
 0

	)

9290 
	#ENET_RMON_R_FRAG_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_R_FRAG_COUNT_SHIFT
))&
ENET_RMON_R_FRAG_COUNT_MASK
)

	)

9292 
	#ENET_RMON_R_JAB_COUNT_MASK
 0xFFFFu

	)

9293 
	#ENET_RMON_R_JAB_COUNT_SHIFT
 0

	)

9294 
	#ENET_RMON_R_JAB_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_R_JAB_COUNT_SHIFT
))&
ENET_RMON_R_JAB_COUNT_MASK
)

	)

9297 
	#ENET_RMON_R_P64_COUNT_MASK
 0xFFFFu

	)

9298 
	#ENET_RMON_R_P64_COUNT_SHIFT
 0

	)

9299 
	#ENET_RMON_R_P64_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_R_P64_COUNT_SHIFT
))&
ENET_RMON_R_P64_COUNT_MASK
)

	)

9301 
	#ENET_RMON_R_P65TO127_COUNT_MASK
 0xFFFFu

	)

9302 
	#ENET_RMON_R_P65TO127_COUNT_SHIFT
 0

	)

9303 
	#ENET_RMON_R_P65TO127_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_R_P65TO127_COUNT_SHIFT
))&
ENET_RMON_R_P65TO127_COUNT_MASK
)

	)

9305 
	#ENET_RMON_R_P128TO255_COUNT_MASK
 0xFFFFu

	)

9306 
	#ENET_RMON_R_P128TO255_COUNT_SHIFT
 0

	)

9307 
	#ENET_RMON_R_P128TO255_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_R_P128TO255_COUNT_SHIFT
))&
ENET_RMON_R_P128TO255_COUNT_MASK
)

	)

9309 
	#ENET_RMON_R_P256TO511_COUNT_MASK
 0xFFFFu

	)

9310 
	#ENET_RMON_R_P256TO511_COUNT_SHIFT
 0

	)

9311 
	#ENET_RMON_R_P256TO511_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_R_P256TO511_COUNT_SHIFT
))&
ENET_RMON_R_P256TO511_COUNT_MASK
)

	)

9313 
	#ENET_RMON_R_P512TO1023_COUNT_MASK
 0xFFFFu

	)

9314 
	#ENET_RMON_R_P512TO1023_COUNT_SHIFT
 0

	)

9315 
	#ENET_RMON_R_P512TO1023_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_R_P512TO1023_COUNT_SHIFT
))&
ENET_RMON_R_P512TO1023_COUNT_MASK
)

	)

9317 
	#ENET_RMON_R_P1024TO2047_COUNT_MASK
 0xFFFFu

	)

9318 
	#ENET_RMON_R_P1024TO2047_COUNT_SHIFT
 0

	)

9319 
	#ENET_RMON_R_P1024TO2047_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_R_P1024TO2047_COUNT_SHIFT
))&
ENET_RMON_R_P1024TO2047_COUNT_MASK
)

	)

9321 
	#ENET_RMON_R_P_GTE2048_COUNT_MASK
 0xFFFFu

	)

9322 
	#ENET_RMON_R_P_GTE2048_COUNT_SHIFT
 0

	)

9323 
	#ENET_RMON_R_P_GTE2048_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_R_P_GTE2048_COUNT_SHIFT
))&
ENET_RMON_R_P_GTE2048_COUNT_MASK
)

	)

9325 
	#ENET_RMON_R_OCTETS_COUNT_MASK
 0xFFFFFFFFu

	)

9326 
	#ENET_RMON_R_OCTETS_COUNT_SHIFT
 0

	)

9327 
	#ENET_RMON_R_OCTETS_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_RMON_R_OCTETS_COUNT_SHIFT
))&
ENET_RMON_R_OCTETS_COUNT_MASK
)

	)

9329 
	#ENET_IEEE_R_DROP_COUNT_MASK
 0xFFFFu

	)

9330 
	#ENET_IEEE_R_DROP_COUNT_SHIFT
 0

	)

9331 
	#ENET_IEEE_R_DROP_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IEEE_R_DROP_COUNT_SHIFT
))&
ENET_IEEE_R_DROP_COUNT_MASK
)

	)

9333 
	#ENET_IEEE_R_FRAME_OK_COUNT_MASK
 0xFFFFu

	)

9334 
	#ENET_IEEE_R_FRAME_OK_COUNT_SHIFT
 0

	)

9335 
	#ENET_IEEE_R_FRAME_OK_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IEEE_R_FRAME_OK_COUNT_SHIFT
))&
ENET_IEEE_R_FRAME_OK_COUNT_MASK
)

	)

9337 
	#ENET_IEEE_R_CRC_COUNT_MASK
 0xFFFFu

	)

9338 
	#ENET_IEEE_R_CRC_COUNT_SHIFT
 0

	)

9339 
	#ENET_IEEE_R_CRC_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IEEE_R_CRC_COUNT_SHIFT
))&
ENET_IEEE_R_CRC_COUNT_MASK
)

	)

9341 
	#ENET_IEEE_R_ALIGN_COUNT_MASK
 0xFFFFu

	)

9342 
	#ENET_IEEE_R_ALIGN_COUNT_SHIFT
 0

	)

9343 
	#ENET_IEEE_R_ALIGN_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IEEE_R_ALIGN_COUNT_SHIFT
))&
ENET_IEEE_R_ALIGN_COUNT_MASK
)

	)

9345 
	#ENET_IEEE_R_MACERR_COUNT_MASK
 0xFFFFu

	)

9346 
	#ENET_IEEE_R_MACERR_COUNT_SHIFT
 0

	)

9347 
	#ENET_IEEE_R_MACERR_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IEEE_R_MACERR_COUNT_SHIFT
))&
ENET_IEEE_R_MACERR_COUNT_MASK
)

	)

9349 
	#ENET_IEEE_R_FDXFC_COUNT_MASK
 0xFFFFu

	)

9350 
	#ENET_IEEE_R_FDXFC_COUNT_SHIFT
 0

	)

9351 
	#ENET_IEEE_R_FDXFC_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IEEE_R_FDXFC_COUNT_SHIFT
))&
ENET_IEEE_R_FDXFC_COUNT_MASK
)

	)

9353 
	#ENET_IEEE_R_OCTETS_OK_COUNT_MASK
 0xFFFFFFFFu

	)

9354 
	#ENET_IEEE_R_OCTETS_OK_COUNT_SHIFT
 0

	)

9355 
	#ENET_IEEE_R_OCTETS_OK_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_IEEE_R_OCTETS_OK_COUNT_SHIFT
))&
ENET_IEEE_R_OCTETS_OK_COUNT_MASK
)

	)

9357 
	#ENET_ATCR_EN_MASK
 0x1u

	)

9358 
	#ENET_ATCR_EN_SHIFT
 0

	)

9359 
	#ENET_ATCR_OFFEN_MASK
 0x4u

	)

9360 
	#ENET_ATCR_OFFEN_SHIFT
 2

	)

9361 
	#ENET_ATCR_OFFRST_MASK
 0x8u

	)

9362 
	#ENET_ATCR_OFFRST_SHIFT
 3

	)

9363 
	#ENET_ATCR_PEREN_MASK
 0x10u

	)

9364 
	#ENET_ATCR_PEREN_SHIFT
 4

	)

9365 
	#ENET_ATCR_PINPER_MASK
 0x80u

	)

9366 
	#ENET_ATCR_PINPER_SHIFT
 7

	)

9367 
	#ENET_ATCR_RESTART_MASK
 0x200u

	)

9368 
	#ENET_ATCR_RESTART_SHIFT
 9

	)

9369 
	#ENET_ATCR_CAPTURE_MASK
 0x800u

	)

9370 
	#ENET_ATCR_CAPTURE_SHIFT
 11

	)

9371 
	#ENET_ATCR_SLAVE_MASK
 0x2000u

	)

9372 
	#ENET_ATCR_SLAVE_SHIFT
 13

	)

9374 
	#ENET_ATVR_ATIME_MASK
 0xFFFFFFFFu

	)

9375 
	#ENET_ATVR_ATIME_SHIFT
 0

	)

9376 
	#ENET_ATVR_ATIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_ATVR_ATIME_SHIFT
))&
ENET_ATVR_ATIME_MASK
)

	)

9378 
	#ENET_ATOFF_OFFSET_MASK
 0xFFFFFFFFu

	)

9379 
	#ENET_ATOFF_OFFSET_SHIFT
 0

	)

9380 
	#ENET_ATOFF_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_ATOFF_OFFSET_SHIFT
))&
ENET_ATOFF_OFFSET_MASK
)

	)

9382 
	#ENET_ATPER_PERIOD_MASK
 0xFFFFFFFFu

	)

9383 
	#ENET_ATPER_PERIOD_SHIFT
 0

	)

9384 
	#ENET_ATPER_PERIOD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_ATPER_PERIOD_SHIFT
))&
ENET_ATPER_PERIOD_MASK
)

	)

9386 
	#ENET_ATCOR_COR_MASK
 0x7FFFFFFFu

	)

9387 
	#ENET_ATCOR_COR_SHIFT
 0

	)

9388 
	#ENET_ATCOR_COR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_ATCOR_COR_SHIFT
))&
ENET_ATCOR_COR_MASK
)

	)

9390 
	#ENET_ATINC_INC_MASK
 0x7Fu

	)

9391 
	#ENET_ATINC_INC_SHIFT
 0

	)

9392 
	#ENET_ATINC_INC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_ATINC_INC_SHIFT
))&
ENET_ATINC_INC_MASK
)

	)

9393 
	#ENET_ATINC_INC_CORR_MASK
 0x7F00u

	)

9394 
	#ENET_ATINC_INC_CORR_SHIFT
 8

	)

9395 
	#ENET_ATINC_INC_CORR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_ATINC_INC_CORR_SHIFT
))&
ENET_ATINC_INC_CORR_MASK
)

	)

9397 
	#ENET_ATSTMP_TIMESTAMP_MASK
 0xFFFFFFFFu

	)

9398 
	#ENET_ATSTMP_TIMESTAMP_SHIFT
 0

	)

9399 
	#ENET_ATSTMP_TIMESTAMP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_ATSTMP_TIMESTAMP_SHIFT
))&
ENET_ATSTMP_TIMESTAMP_MASK
)

	)

9401 
	#ENET_TGSR_TF0_MASK
 0x1u

	)

9402 
	#ENET_TGSR_TF0_SHIFT
 0

	)

9403 
	#ENET_TGSR_TF1_MASK
 0x2u

	)

9404 
	#ENET_TGSR_TF1_SHIFT
 1

	)

9405 
	#ENET_TGSR_TF2_MASK
 0x4u

	)

9406 
	#ENET_TGSR_TF2_SHIFT
 2

	)

9407 
	#ENET_TGSR_TF3_MASK
 0x8u

	)

9408 
	#ENET_TGSR_TF3_SHIFT
 3

	)

9410 
	#ENET_TCSR_TDRE_MASK
 0x1u

	)

9411 
	#ENET_TCSR_TDRE_SHIFT
 0

	)

9412 
	#ENET_TCSR_TMODE_MASK
 0x3Cu

	)

9413 
	#ENET_TCSR_TMODE_SHIFT
 2

	)

9414 
	#ENET_TCSR_TMODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_TCSR_TMODE_SHIFT
))&
ENET_TCSR_TMODE_MASK
)

	)

9415 
	#ENET_TCSR_TIE_MASK
 0x40u

	)

9416 
	#ENET_TCSR_TIE_SHIFT
 6

	)

9417 
	#ENET_TCSR_TF_MASK
 0x80u

	)

9418 
	#ENET_TCSR_TF_SHIFT
 7

	)

9420 
	#ENET_TCCR_TCC_MASK
 0xFFFFFFFFu

	)

9421 
	#ENET_TCCR_TCC_SHIFT
 0

	)

9422 
	#ENET_TCCR_TCC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ENET_TCCR_TCC_SHIFT
))&
ENET_TCCR_TCC_MASK
)

	)

9430 
	#ENET1_BASE
 (0x42188000u)

	)

9432 
	#ENET1
 ((
ENET_Ty≥
 *)
ENET1_BASE
)

	)

9433 
	#ENET1_BASE_PTR
 (
ENET1
)

	)

9435 
	#ENET2_BASE
 (0x421B4000u)

	)

9437 
	#ENET2
 ((
ENET_Ty≥
 *)
ENET2_BASE
)

	)

9438 
	#ENET2_BASE_PTR
 (
ENET2
)

	)

9440 
	#ENET_BASE_ADDRS
 { 
ENET1_BASE
, 
ENET2_BASE
 }

	)

9442 
	#ENET_BASE_PTRS
 { 
ENET1
, 
ENET2
 }

	)

9456 
	#ENET1_EIR
 
	`ENET_EIR_REG
(
ENET1_BASE_PTR
)

	)

9457 
	#ENET1_EIMR
 
	`ENET_EIMR_REG
(
ENET1_BASE_PTR
)

	)

9458 
	#ENET1_RDAR
 
	`ENET_RDAR_REG
(
ENET1_BASE_PTR
)

	)

9459 
	#ENET1_TDAR
 
	`ENET_TDAR_REG
(
ENET1_BASE_PTR
)

	)

9460 
	#ENET1_ECR
 
	`ENET_ECR_REG
(
ENET1_BASE_PTR
)

	)

9461 
	#ENET1_MMFR
 
	`ENET_MMFR_REG
(
ENET1_BASE_PTR
)

	)

9462 
	#ENET1_MSCR
 
	`ENET_MSCR_REG
(
ENET1_BASE_PTR
)

	)

9463 
	#ENET1_MIBC
 
	`ENET_MIBC_REG
(
ENET1_BASE_PTR
)

	)

9464 
	#ENET1_RCR
 
	`ENET_RCR_REG
(
ENET1_BASE_PTR
)

	)

9465 
	#ENET1_TCR
 
	`ENET_TCR_REG
(
ENET1_BASE_PTR
)

	)

9466 
	#ENET1_PALR
 
	`ENET_PALR_REG
(
ENET1_BASE_PTR
)

	)

9467 
	#ENET1_PAUR
 
	`ENET_PAUR_REG
(
ENET1_BASE_PTR
)

	)

9468 
	#ENET1_OPD
 
	`ENET_OPD_REG
(
ENET1_BASE_PTR
)

	)

9469 
	#ENET1_TXIC0
 
	`ENET_TXIC_REG
(
ENET1_BASE_PTR
,0)

	)

9470 
	#ENET1_TXIC1
 
	`ENET_TXIC_REG
(
ENET1_BASE_PTR
,1)

	)

9471 
	#ENET1_TXIC2
 
	`ENET_TXIC_REG
(
ENET1_BASE_PTR
,2)

	)

9472 
	#ENET1_RXIC0
 
	`ENET_RXIC_REG
(
ENET1_BASE_PTR
,0)

	)

9473 
	#ENET1_RXIC1
 
	`ENET_RXIC_REG
(
ENET1_BASE_PTR
,1)

	)

9474 
	#ENET1_RXIC2
 
	`ENET_RXIC_REG
(
ENET1_BASE_PTR
,2)

	)

9475 
	#ENET1_IAUR
 
	`ENET_IAUR_REG
(
ENET1_BASE_PTR
)

	)

9476 
	#ENET1_IALR
 
	`ENET_IALR_REG
(
ENET1_BASE_PTR
)

	)

9477 
	#ENET1_GAUR
 
	`ENET_GAUR_REG
(
ENET1_BASE_PTR
)

	)

9478 
	#ENET1_GALR
 
	`ENET_GALR_REG
(
ENET1_BASE_PTR
)

	)

9479 
	#ENET1_TFWR
 
	`ENET_TFWR_REG
(
ENET1_BASE_PTR
)

	)

9480 
	#ENET1_RDSR1
 
	`ENET_RDSR1_REG
(
ENET1_BASE_PTR
)

	)

9481 
	#ENET1_TDSR1
 
	`ENET_TDSR1_REG
(
ENET1_BASE_PTR
)

	)

9482 
	#ENET1_MRBR1
 
	`ENET_MRBR1_REG
(
ENET1_BASE_PTR
)

	)

9483 
	#ENET1_RDSR2
 
	`ENET_RDSR2_REG
(
ENET1_BASE_PTR
)

	)

9484 
	#ENET1_TDSR2
 
	`ENET_TDSR2_REG
(
ENET1_BASE_PTR
)

	)

9485 
	#ENET1_MRBR2
 
	`ENET_MRBR2_REG
(
ENET1_BASE_PTR
)

	)

9486 
	#ENET1_RDSR
 
	`ENET_RDSR_REG
(
ENET1_BASE_PTR
)

	)

9487 
	#ENET1_TDSR
 
	`ENET_TDSR_REG
(
ENET1_BASE_PTR
)

	)

9488 
	#ENET1_MRBR
 
	`ENET_MRBR_REG
(
ENET1_BASE_PTR
)

	)

9489 
	#ENET1_RSFL
 
	`ENET_RSFL_REG
(
ENET1_BASE_PTR
)

	)

9490 
	#ENET1_RSEM
 
	`ENET_RSEM_REG
(
ENET1_BASE_PTR
)

	)

9491 
	#ENET1_RAEM
 
	`ENET_RAEM_REG
(
ENET1_BASE_PTR
)

	)

9492 
	#ENET1_RAFL
 
	`ENET_RAFL_REG
(
ENET1_BASE_PTR
)

	)

9493 
	#ENET1_TSEM
 
	`ENET_TSEM_REG
(
ENET1_BASE_PTR
)

	)

9494 
	#ENET1_TAEM
 
	`ENET_TAEM_REG
(
ENET1_BASE_PTR
)

	)

9495 
	#ENET1_TAFL
 
	`ENET_TAFL_REG
(
ENET1_BASE_PTR
)

	)

9496 
	#ENET1_TIPG
 
	`ENET_TIPG_REG
(
ENET1_BASE_PTR
)

	)

9497 
	#ENET1_FTRL
 
	`ENET_FTRL_REG
(
ENET1_BASE_PTR
)

	)

9498 
	#ENET1_TACC
 
	`ENET_TACC_REG
(
ENET1_BASE_PTR
)

	)

9499 
	#ENET1_RACC
 
	`ENET_RACC_REG
(
ENET1_BASE_PTR
)

	)

9500 
	#ENET1_RCMR1
 
	`ENET_RCMR_REG
(
ENET1_BASE_PTR
,0)

	)

9501 
	#ENET1_RCMR2
 
	`ENET_RCMR_REG
(
ENET1_BASE_PTR
,1)

	)

9502 
	#ENET1_DMA1CFG
 
	`ENET_DMACFG_REG
(
ENET1_BASE_PTR
,0)

	)

9503 
	#ENET1_DMA2CFG
 
	`ENET_DMACFG_REG
(
ENET1_BASE_PTR
,1)

	)

9504 
	#ENET1_RDAR1
 
	`ENET_RDAR1_REG
(
ENET1_BASE_PTR
)

	)

9505 
	#ENET1_TDAR1
 
	`ENET_TDAR1_REG
(
ENET1_BASE_PTR
)

	)

9506 
	#ENET1_RDAR2
 
	`ENET_RDAR2_REG
(
ENET1_BASE_PTR
)

	)

9507 
	#ENET1_TDAR2
 
	`ENET_TDAR2_REG
(
ENET1_BASE_PTR
)

	)

9508 
	#ENET1_QOS
 
	`ENET_QOS_REG
(
ENET1_BASE_PTR
)

	)

9509 
	#ENET1_RMON_T_DROP
 
	`ENET_RMON_T_DROP_REG
(
ENET1_BASE_PTR
)

	)

9510 
	#ENET1_RMON_T_PACKETS
 
	`ENET_RMON_T_PACKETS_REG
(
ENET1_BASE_PTR
)

	)

9511 
	#ENET1_RMON_T_BC_PKT
 
	`ENET_RMON_T_BC_PKT_REG
(
ENET1_BASE_PTR
)

	)

9512 
	#ENET1_RMON_T_MC_PKT
 
	`ENET_RMON_T_MC_PKT_REG
(
ENET1_BASE_PTR
)

	)

9513 
	#ENET1_RMON_T_CRC_ALIGN
 
	`ENET_RMON_T_CRC_ALIGN_REG
(
ENET1_BASE_PTR
)

	)

9514 
	#ENET1_RMON_T_UNDERSIZE
 
	`ENET_RMON_T_UNDERSIZE_REG
(
ENET1_BASE_PTR
)

	)

9515 
	#ENET1_RMON_T_OVERSIZE
 
	`ENET_RMON_T_OVERSIZE_REG
(
ENET1_BASE_PTR
)

	)

9516 
	#ENET1_RMON_T_FRAG
 
	`ENET_RMON_T_FRAG_REG
(
ENET1_BASE_PTR
)

	)

9517 
	#ENET1_RMON_T_JAB
 
	`ENET_RMON_T_JAB_REG
(
ENET1_BASE_PTR
)

	)

9518 
	#ENET1_RMON_T_COL
 
	`ENET_RMON_T_COL_REG
(
ENET1_BASE_PTR
)

	)

9519 
	#ENET1_RMON_T_P64
 
	`ENET_RMON_T_P64_REG
(
ENET1_BASE_PTR
)

	)

9520 
	#ENET1_RMON_T_P65TO127
 
	`ENET_RMON_T_P65TO127_REG
(
ENET1_BASE_PTR
)

	)

9521 
	#ENET1_RMON_T_P128TO255
 
	`ENET_RMON_T_P128TO255_REG
(
ENET1_BASE_PTR
)

	)

9522 
	#ENET1_RMON_T_P256TO511
 
	`ENET_RMON_T_P256TO511_REG
(
ENET1_BASE_PTR
)

	)

9523 
	#ENET1_RMON_T_P512TO1023
 
	`ENET_RMON_T_P512TO1023_REG
(
ENET1_BASE_PTR
)

	)

9524 
	#ENET1_RMON_T_P1024TO2047
 
	`ENET_RMON_T_P1024TO2047_REG
(
ENET1_BASE_PTR
)

	)

9525 
	#ENET1_RMON_T_P_GTE2048
 
	`ENET_RMON_T_P_GTE2048_REG
(
ENET1_BASE_PTR
)

	)

9526 
	#ENET1_RMON_T_OCTETS
 
	`ENET_RMON_T_OCTETS_REG
(
ENET1_BASE_PTR
)

	)

9527 
	#ENET1_IEEE_T_DROP
 
	`ENET_IEEE_T_DROP_REG
(
ENET1_BASE_PTR
)

	)

9528 
	#ENET1_IEEE_T_FRAME_OK
 
	`ENET_IEEE_T_FRAME_OK_REG
(
ENET1_BASE_PTR
)

	)

9529 
	#ENET1_IEEE_T_1COL
 
	`ENET_IEEE_T_1COL_REG
(
ENET1_BASE_PTR
)

	)

9530 
	#ENET1_IEEE_T_MCOL
 
	`ENET_IEEE_T_MCOL_REG
(
ENET1_BASE_PTR
)

	)

9531 
	#ENET1_IEEE_T_DEF
 
	`ENET_IEEE_T_DEF_REG
(
ENET1_BASE_PTR
)

	)

9532 
	#ENET1_IEEE_T_LCOL
 
	`ENET_IEEE_T_LCOL_REG
(
ENET1_BASE_PTR
)

	)

9533 
	#ENET1_IEEE_T_EXCOL
 
	`ENET_IEEE_T_EXCOL_REG
(
ENET1_BASE_PTR
)

	)

9534 
	#ENET1_IEEE_T_MACERR
 
	`ENET_IEEE_T_MACERR_REG
(
ENET1_BASE_PTR
)

	)

9535 
	#ENET1_IEEE_T_CSERR
 
	`ENET_IEEE_T_CSERR_REG
(
ENET1_BASE_PTR
)

	)

9536 
	#ENET1_IEEE_T_SQE
 
	`ENET_IEEE_T_SQE_REG
(
ENET1_BASE_PTR
)

	)

9537 
	#ENET1_IEEE_T_FDXFC
 
	`ENET_IEEE_T_FDXFC_REG
(
ENET1_BASE_PTR
)

	)

9538 
	#ENET1_IEEE_T_OCTETS_OK
 
	`ENET_IEEE_T_OCTETS_OK_REG
(
ENET1_BASE_PTR
)

	)

9539 
	#ENET1_RMON_R_PACKETS
 
	`ENET_RMON_R_PACKETS_REG
(
ENET1_BASE_PTR
)

	)

9540 
	#ENET1_RMON_R_BC_PKT
 
	`ENET_RMON_R_BC_PKT_REG
(
ENET1_BASE_PTR
)

	)

9541 
	#ENET1_RMON_R_MC_PKT
 
	`ENET_RMON_R_MC_PKT_REG
(
ENET1_BASE_PTR
)

	)

9542 
	#ENET1_RMON_R_CRC_ALIGN
 
	`ENET_RMON_R_CRC_ALIGN_REG
(
ENET1_BASE_PTR
)

	)

9543 
	#ENET1_RMON_R_UNDERSIZE
 
	`ENET_RMON_R_UNDERSIZE_REG
(
ENET1_BASE_PTR
)

	)

9544 
	#ENET1_RMON_R_OVERSIZE
 
	`ENET_RMON_R_OVERSIZE_REG
(
ENET1_BASE_PTR
)

	)

9545 
	#ENET1_RMON_R_FRAG
 
	`ENET_RMON_R_FRAG_REG
(
ENET1_BASE_PTR
)

	)

9546 
	#ENET1_RMON_R_JAB
 
	`ENET_RMON_R_JAB_REG
(
ENET1_BASE_PTR
)

	)

9547 
	#ENET1_RMON_R_RESVD_0
 
	`ENET_RMON_R_RESVD_0_REG
(
ENET1_BASE_PTR
)

	)

9548 
	#ENET1_RMON_R_P64
 
	`ENET_RMON_R_P64_REG
(
ENET1_BASE_PTR
)

	)

9549 
	#ENET1_RMON_R_P65TO127
 
	`ENET_RMON_R_P65TO127_REG
(
ENET1_BASE_PTR
)

	)

9550 
	#ENET1_RMON_R_P128TO255
 
	`ENET_RMON_R_P128TO255_REG
(
ENET1_BASE_PTR
)

	)

9551 
	#ENET1_RMON_R_P256TO511
 
	`ENET_RMON_R_P256TO511_REG
(
ENET1_BASE_PTR
)

	)

9552 
	#ENET1_RMON_R_P512TO1023
 
	`ENET_RMON_R_P512TO1023_REG
(
ENET1_BASE_PTR
)

	)

9553 
	#ENET1_RMON_R_P1024TO2047
 
	`ENET_RMON_R_P1024TO2047_REG
(
ENET1_BASE_PTR
)

	)

9554 
	#ENET1_RMON_R_P_GTE2048
 
	`ENET_RMON_R_P_GTE2048_REG
(
ENET1_BASE_PTR
)

	)

9555 
	#ENET1_RMON_R_OCTETS
 
	`ENET_RMON_R_OCTETS_REG
(
ENET1_BASE_PTR
)

	)

9556 
	#ENET1_IEEE_R_DROP
 
	`ENET_IEEE_R_DROP_REG
(
ENET1_BASE_PTR
)

	)

9557 
	#ENET1_IEEE_R_FRAME_OK
 
	`ENET_IEEE_R_FRAME_OK_REG
(
ENET1_BASE_PTR
)

	)

9558 
	#ENET1_IEEE_R_CRC
 
	`ENET_IEEE_R_CRC_REG
(
ENET1_BASE_PTR
)

	)

9559 
	#ENET1_IEEE_R_ALIGN
 
	`ENET_IEEE_R_ALIGN_REG
(
ENET1_BASE_PTR
)

	)

9560 
	#ENET1_IEEE_R_MACERR
 
	`ENET_IEEE_R_MACERR_REG
(
ENET1_BASE_PTR
)

	)

9561 
	#ENET1_IEEE_R_FDXFC
 
	`ENET_IEEE_R_FDXFC_REG
(
ENET1_BASE_PTR
)

	)

9562 
	#ENET1_IEEE_R_OCTETS_OK
 
	`ENET_IEEE_R_OCTETS_OK_REG
(
ENET1_BASE_PTR
)

	)

9563 
	#ENET1_ATCR
 
	`ENET_ATCR_REG
(
ENET1_BASE_PTR
)

	)

9564 
	#ENET1_ATVR
 
	`ENET_ATVR_REG
(
ENET1_BASE_PTR
)

	)

9565 
	#ENET1_ATOFF
 
	`ENET_ATOFF_REG
(
ENET1_BASE_PTR
)

	)

9566 
	#ENET1_ATPER
 
	`ENET_ATPER_REG
(
ENET1_BASE_PTR
)

	)

9567 
	#ENET1_ATCOR
 
	`ENET_ATCOR_REG
(
ENET1_BASE_PTR
)

	)

9568 
	#ENET1_ATINC
 
	`ENET_ATINC_REG
(
ENET1_BASE_PTR
)

	)

9569 
	#ENET1_ATSTMP
 
	`ENET_ATSTMP_REG
(
ENET1_BASE_PTR
)

	)

9570 
	#ENET1_TGSR
 
	`ENET_TGSR_REG
(
ENET1_BASE_PTR
)

	)

9571 
	#ENET1_TCSR0
 
	`ENET_TCSR_REG
(
ENET1_BASE_PTR
,0)

	)

9572 
	#ENET1_TCCR0
 
	`ENET_TCCR_REG
(
ENET1_BASE_PTR
,0)

	)

9573 
	#ENET1_TCSR1
 
	`ENET_TCSR_REG
(
ENET1_BASE_PTR
,1)

	)

9574 
	#ENET1_TCCR1
 
	`ENET_TCCR_REG
(
ENET1_BASE_PTR
,1)

	)

9575 
	#ENET1_TCSR2
 
	`ENET_TCSR_REG
(
ENET1_BASE_PTR
,2)

	)

9576 
	#ENET1_TCCR2
 
	`ENET_TCCR_REG
(
ENET1_BASE_PTR
,2)

	)

9577 
	#ENET1_TCSR3
 
	`ENET_TCSR_REG
(
ENET1_BASE_PTR
,3)

	)

9578 
	#ENET1_TCCR3
 
	`ENET_TCCR_REG
(
ENET1_BASE_PTR
,3)

	)

9580 
	#ENET2_EIR
 
	`ENET_EIR_REG
(
ENET2_BASE_PTR
)

	)

9581 
	#ENET2_EIMR
 
	`ENET_EIMR_REG
(
ENET2_BASE_PTR
)

	)

9582 
	#ENET2_RDAR
 
	`ENET_RDAR_REG
(
ENET2_BASE_PTR
)

	)

9583 
	#ENET2_TDAR
 
	`ENET_TDAR_REG
(
ENET2_BASE_PTR
)

	)

9584 
	#ENET2_ECR
 
	`ENET_ECR_REG
(
ENET2_BASE_PTR
)

	)

9585 
	#ENET2_MMFR
 
	`ENET_MMFR_REG
(
ENET2_BASE_PTR
)

	)

9586 
	#ENET2_MSCR
 
	`ENET_MSCR_REG
(
ENET2_BASE_PTR
)

	)

9587 
	#ENET2_MIBC
 
	`ENET_MIBC_REG
(
ENET2_BASE_PTR
)

	)

9588 
	#ENET2_RCR
 
	`ENET_RCR_REG
(
ENET2_BASE_PTR
)

	)

9589 
	#ENET2_TCR
 
	`ENET_TCR_REG
(
ENET2_BASE_PTR
)

	)

9590 
	#ENET2_PALR
 
	`ENET_PALR_REG
(
ENET2_BASE_PTR
)

	)

9591 
	#ENET2_PAUR
 
	`ENET_PAUR_REG
(
ENET2_BASE_PTR
)

	)

9592 
	#ENET2_OPD
 
	`ENET_OPD_REG
(
ENET2_BASE_PTR
)

	)

9593 
	#ENET2_TXIC0
 
	`ENET_TXIC_REG
(
ENET2_BASE_PTR
,0)

	)

9594 
	#ENET2_TXIC1
 
	`ENET_TXIC_REG
(
ENET2_BASE_PTR
,1)

	)

9595 
	#ENET2_TXIC2
 
	`ENET_TXIC_REG
(
ENET2_BASE_PTR
,2)

	)

9596 
	#ENET2_RXIC0
 
	`ENET_RXIC_REG
(
ENET2_BASE_PTR
,0)

	)

9597 
	#ENET2_RXIC1
 
	`ENET_RXIC_REG
(
ENET2_BASE_PTR
,1)

	)

9598 
	#ENET2_RXIC2
 
	`ENET_RXIC_REG
(
ENET2_BASE_PTR
,2)

	)

9599 
	#ENET2_IAUR
 
	`ENET_IAUR_REG
(
ENET2_BASE_PTR
)

	)

9600 
	#ENET2_IALR
 
	`ENET_IALR_REG
(
ENET2_BASE_PTR
)

	)

9601 
	#ENET2_GAUR
 
	`ENET_GAUR_REG
(
ENET2_BASE_PTR
)

	)

9602 
	#ENET2_GALR
 
	`ENET_GALR_REG
(
ENET2_BASE_PTR
)

	)

9603 
	#ENET2_TFWR
 
	`ENET_TFWR_REG
(
ENET2_BASE_PTR
)

	)

9604 
	#ENET2_RDSR1
 
	`ENET_RDSR1_REG
(
ENET2_BASE_PTR
)

	)

9605 
	#ENET2_TDSR1
 
	`ENET_TDSR1_REG
(
ENET2_BASE_PTR
)

	)

9606 
	#ENET2_MRBR1
 
	`ENET_MRBR1_REG
(
ENET2_BASE_PTR
)

	)

9607 
	#ENET2_RDSR2
 
	`ENET_RDSR2_REG
(
ENET2_BASE_PTR
)

	)

9608 
	#ENET2_TDSR2
 
	`ENET_TDSR2_REG
(
ENET2_BASE_PTR
)

	)

9609 
	#ENET2_MRBR2
 
	`ENET_MRBR2_REG
(
ENET2_BASE_PTR
)

	)

9610 
	#ENET2_RDSR
 
	`ENET_RDSR_REG
(
ENET2_BASE_PTR
)

	)

9611 
	#ENET2_TDSR
 
	`ENET_TDSR_REG
(
ENET2_BASE_PTR
)

	)

9612 
	#ENET2_MRBR
 
	`ENET_MRBR_REG
(
ENET2_BASE_PTR
)

	)

9613 
	#ENET2_RSFL
 
	`ENET_RSFL_REG
(
ENET2_BASE_PTR
)

	)

9614 
	#ENET2_RSEM
 
	`ENET_RSEM_REG
(
ENET2_BASE_PTR
)

	)

9615 
	#ENET2_RAEM
 
	`ENET_RAEM_REG
(
ENET2_BASE_PTR
)

	)

9616 
	#ENET2_RAFL
 
	`ENET_RAFL_REG
(
ENET2_BASE_PTR
)

	)

9617 
	#ENET2_TSEM
 
	`ENET_TSEM_REG
(
ENET2_BASE_PTR
)

	)

9618 
	#ENET2_TAEM
 
	`ENET_TAEM_REG
(
ENET2_BASE_PTR
)

	)

9619 
	#ENET2_TAFL
 
	`ENET_TAFL_REG
(
ENET2_BASE_PTR
)

	)

9620 
	#ENET2_TIPG
 
	`ENET_TIPG_REG
(
ENET2_BASE_PTR
)

	)

9621 
	#ENET2_FTRL
 
	`ENET_FTRL_REG
(
ENET2_BASE_PTR
)

	)

9622 
	#ENET2_TACC
 
	`ENET_TACC_REG
(
ENET2_BASE_PTR
)

	)

9623 
	#ENET2_RACC
 
	`ENET_RACC_REG
(
ENET2_BASE_PTR
)

	)

9624 
	#ENET2_RCMR1
 
	`ENET_RCMR_REG
(
ENET2_BASE_PTR
,0)

	)

9625 
	#ENET2_RCMR2
 
	`ENET_RCMR_REG
(
ENET2_BASE_PTR
,1)

	)

9626 
	#ENET2_DMA1CFG
 
	`ENET_DMACFG_REG
(
ENET2_BASE_PTR
,0)

	)

9627 
	#ENET2_DMA2CFG
 
	`ENET_DMACFG_REG
(
ENET2_BASE_PTR
,1)

	)

9628 
	#ENET2_RDAR1
 
	`ENET_RDAR1_REG
(
ENET2_BASE_PTR
)

	)

9629 
	#ENET2_TDAR1
 
	`ENET_TDAR1_REG
(
ENET2_BASE_PTR
)

	)

9630 
	#ENET2_RDAR2
 
	`ENET_RDAR2_REG
(
ENET2_BASE_PTR
)

	)

9631 
	#ENET2_TDAR2
 
	`ENET_TDAR2_REG
(
ENET2_BASE_PTR
)

	)

9632 
	#ENET2_QOS
 
	`ENET_QOS_REG
(
ENET2_BASE_PTR
)

	)

9633 
	#ENET2_RMON_T_DROP
 
	`ENET_RMON_T_DROP_REG
(
ENET2_BASE_PTR
)

	)

9634 
	#ENET2_RMON_T_PACKETS
 
	`ENET_RMON_T_PACKETS_REG
(
ENET2_BASE_PTR
)

	)

9635 
	#ENET2_RMON_T_BC_PKT
 
	`ENET_RMON_T_BC_PKT_REG
(
ENET2_BASE_PTR
)

	)

9636 
	#ENET2_RMON_T_MC_PKT
 
	`ENET_RMON_T_MC_PKT_REG
(
ENET2_BASE_PTR
)

	)

9637 
	#ENET2_RMON_T_CRC_ALIGN
 
	`ENET_RMON_T_CRC_ALIGN_REG
(
ENET2_BASE_PTR
)

	)

9638 
	#ENET2_RMON_T_UNDERSIZE
 
	`ENET_RMON_T_UNDERSIZE_REG
(
ENET2_BASE_PTR
)

	)

9639 
	#ENET2_RMON_T_OVERSIZE
 
	`ENET_RMON_T_OVERSIZE_REG
(
ENET2_BASE_PTR
)

	)

9640 
	#ENET2_RMON_T_FRAG
 
	`ENET_RMON_T_FRAG_REG
(
ENET2_BASE_PTR
)

	)

9641 
	#ENET2_RMON_T_JAB
 
	`ENET_RMON_T_JAB_REG
(
ENET2_BASE_PTR
)

	)

9642 
	#ENET2_RMON_T_COL
 
	`ENET_RMON_T_COL_REG
(
ENET2_BASE_PTR
)

	)

9643 
	#ENET2_RMON_T_P64
 
	`ENET_RMON_T_P64_REG
(
ENET2_BASE_PTR
)

	)

9644 
	#ENET2_RMON_T_P65TO127
 
	`ENET_RMON_T_P65TO127_REG
(
ENET2_BASE_PTR
)

	)

9645 
	#ENET2_RMON_T_P128TO255
 
	`ENET_RMON_T_P128TO255_REG
(
ENET2_BASE_PTR
)

	)

9646 
	#ENET2_RMON_T_P256TO511
 
	`ENET_RMON_T_P256TO511_REG
(
ENET2_BASE_PTR
)

	)

9647 
	#ENET2_RMON_T_P512TO1023
 
	`ENET_RMON_T_P512TO1023_REG
(
ENET2_BASE_PTR
)

	)

9648 
	#ENET2_RMON_T_P1024TO2047
 
	`ENET_RMON_T_P1024TO2047_REG
(
ENET2_BASE_PTR
)

	)

9649 
	#ENET2_RMON_T_P_GTE2048
 
	`ENET_RMON_T_P_GTE2048_REG
(
ENET2_BASE_PTR
)

	)

9650 
	#ENET2_RMON_T_OCTETS
 
	`ENET_RMON_T_OCTETS_REG
(
ENET2_BASE_PTR
)

	)

9651 
	#ENET2_IEEE_T_DROP
 
	`ENET_IEEE_T_DROP_REG
(
ENET2_BASE_PTR
)

	)

9652 
	#ENET2_IEEE_T_FRAME_OK
 
	`ENET_IEEE_T_FRAME_OK_REG
(
ENET2_BASE_PTR
)

	)

9653 
	#ENET2_IEEE_T_1COL
 
	`ENET_IEEE_T_1COL_REG
(
ENET2_BASE_PTR
)

	)

9654 
	#ENET2_IEEE_T_MCOL
 
	`ENET_IEEE_T_MCOL_REG
(
ENET2_BASE_PTR
)

	)

9655 
	#ENET2_IEEE_T_DEF
 
	`ENET_IEEE_T_DEF_REG
(
ENET2_BASE_PTR
)

	)

9656 
	#ENET2_IEEE_T_LCOL
 
	`ENET_IEEE_T_LCOL_REG
(
ENET2_BASE_PTR
)

	)

9657 
	#ENET2_IEEE_T_EXCOL
 
	`ENET_IEEE_T_EXCOL_REG
(
ENET2_BASE_PTR
)

	)

9658 
	#ENET2_IEEE_T_MACERR
 
	`ENET_IEEE_T_MACERR_REG
(
ENET2_BASE_PTR
)

	)

9659 
	#ENET2_IEEE_T_CSERR
 
	`ENET_IEEE_T_CSERR_REG
(
ENET2_BASE_PTR
)

	)

9660 
	#ENET2_IEEE_T_SQE
 
	`ENET_IEEE_T_SQE_REG
(
ENET2_BASE_PTR
)

	)

9661 
	#ENET2_IEEE_T_FDXFC
 
	`ENET_IEEE_T_FDXFC_REG
(
ENET2_BASE_PTR
)

	)

9662 
	#ENET2_IEEE_T_OCTETS_OK
 
	`ENET_IEEE_T_OCTETS_OK_REG
(
ENET2_BASE_PTR
)

	)

9663 
	#ENET2_RMON_R_PACKETS
 
	`ENET_RMON_R_PACKETS_REG
(
ENET2_BASE_PTR
)

	)

9664 
	#ENET2_RMON_R_BC_PKT
 
	`ENET_RMON_R_BC_PKT_REG
(
ENET2_BASE_PTR
)

	)

9665 
	#ENET2_RMON_R_MC_PKT
 
	`ENET_RMON_R_MC_PKT_REG
(
ENET2_BASE_PTR
)

	)

9666 
	#ENET2_RMON_R_CRC_ALIGN
 
	`ENET_RMON_R_CRC_ALIGN_REG
(
ENET2_BASE_PTR
)

	)

9667 
	#ENET2_RMON_R_UNDERSIZE
 
	`ENET_RMON_R_UNDERSIZE_REG
(
ENET2_BASE_PTR
)

	)

9668 
	#ENET2_RMON_R_OVERSIZE
 
	`ENET_RMON_R_OVERSIZE_REG
(
ENET2_BASE_PTR
)

	)

9669 
	#ENET2_RMON_R_FRAG
 
	`ENET_RMON_R_FRAG_REG
(
ENET2_BASE_PTR
)

	)

9670 
	#ENET2_RMON_R_JAB
 
	`ENET_RMON_R_JAB_REG
(
ENET2_BASE_PTR
)

	)

9671 
	#ENET2_RMON_R_RESVD_0
 
	`ENET_RMON_R_RESVD_0_REG
(
ENET2_BASE_PTR
)

	)

9672 
	#ENET2_RMON_R_P64
 
	`ENET_RMON_R_P64_REG
(
ENET2_BASE_PTR
)

	)

9673 
	#ENET2_RMON_R_P65TO127
 
	`ENET_RMON_R_P65TO127_REG
(
ENET2_BASE_PTR
)

	)

9674 
	#ENET2_RMON_R_P128TO255
 
	`ENET_RMON_R_P128TO255_REG
(
ENET2_BASE_PTR
)

	)

9675 
	#ENET2_RMON_R_P256TO511
 
	`ENET_RMON_R_P256TO511_REG
(
ENET2_BASE_PTR
)

	)

9676 
	#ENET2_RMON_R_P512TO1023
 
	`ENET_RMON_R_P512TO1023_REG
(
ENET2_BASE_PTR
)

	)

9677 
	#ENET2_RMON_R_P1024TO2047
 
	`ENET_RMON_R_P1024TO2047_REG
(
ENET2_BASE_PTR
)

	)

9678 
	#ENET2_RMON_R_P_GTE2048
 
	`ENET_RMON_R_P_GTE2048_REG
(
ENET2_BASE_PTR
)

	)

9679 
	#ENET2_RMON_R_OCTETS
 
	`ENET_RMON_R_OCTETS_REG
(
ENET2_BASE_PTR
)

	)

9680 
	#ENET2_IEEE_R_DROP
 
	`ENET_IEEE_R_DROP_REG
(
ENET2_BASE_PTR
)

	)

9681 
	#ENET2_IEEE_R_FRAME_OK
 
	`ENET_IEEE_R_FRAME_OK_REG
(
ENET2_BASE_PTR
)

	)

9682 
	#ENET2_IEEE_R_CRC
 
	`ENET_IEEE_R_CRC_REG
(
ENET2_BASE_PTR
)

	)

9683 
	#ENET2_IEEE_R_ALIGN
 
	`ENET_IEEE_R_ALIGN_REG
(
ENET2_BASE_PTR
)

	)

9684 
	#ENET2_IEEE_R_MACERR
 
	`ENET_IEEE_R_MACERR_REG
(
ENET2_BASE_PTR
)

	)

9685 
	#ENET2_IEEE_R_FDXFC
 
	`ENET_IEEE_R_FDXFC_REG
(
ENET2_BASE_PTR
)

	)

9686 
	#ENET2_IEEE_R_OCTETS_OK
 
	`ENET_IEEE_R_OCTETS_OK_REG
(
ENET2_BASE_PTR
)

	)

9687 
	#ENET2_ATCR
 
	`ENET_ATCR_REG
(
ENET2_BASE_PTR
)

	)

9688 
	#ENET2_ATVR
 
	`ENET_ATVR_REG
(
ENET2_BASE_PTR
)

	)

9689 
	#ENET2_ATOFF
 
	`ENET_ATOFF_REG
(
ENET2_BASE_PTR
)

	)

9690 
	#ENET2_ATPER
 
	`ENET_ATPER_REG
(
ENET2_BASE_PTR
)

	)

9691 
	#ENET2_ATCOR
 
	`ENET_ATCOR_REG
(
ENET2_BASE_PTR
)

	)

9692 
	#ENET2_ATINC
 
	`ENET_ATINC_REG
(
ENET2_BASE_PTR
)

	)

9693 
	#ENET2_ATSTMP
 
	`ENET_ATSTMP_REG
(
ENET2_BASE_PTR
)

	)

9694 
	#ENET2_TGSR
 
	`ENET_TGSR_REG
(
ENET2_BASE_PTR
)

	)

9695 
	#ENET2_TCSR0
 
	`ENET_TCSR_REG
(
ENET2_BASE_PTR
,0)

	)

9696 
	#ENET2_TCCR0
 
	`ENET_TCCR_REG
(
ENET2_BASE_PTR
,0)

	)

9697 
	#ENET2_TCSR1
 
	`ENET_TCSR_REG
(
ENET2_BASE_PTR
,1)

	)

9698 
	#ENET2_TCCR1
 
	`ENET_TCCR_REG
(
ENET2_BASE_PTR
,1)

	)

9699 
	#ENET2_TCSR2
 
	`ENET_TCSR_REG
(
ENET2_BASE_PTR
,2)

	)

9700 
	#ENET2_TCCR2
 
	`ENET_TCCR_REG
(
ENET2_BASE_PTR
,2)

	)

9701 
	#ENET2_TCSR3
 
	`ENET_TCSR_REG
(
ENET2_BASE_PTR
,3)

	)

9702 
	#ENET2_TCCR3
 
	`ENET_TCCR_REG
(
ENET2_BASE_PTR
,3)

	)

9704 
	#ENET1_TXIC
(
ödex
Ë
	`ENET_TXIC_REG
(
ENET1_BASE_PTR
,ödex)

	)

9705 
	#ENET2_TXIC
(
ödex
Ë
	`ENET_TXIC_REG
(
ENET2_BASE_PTR
,ödex)

	)

9706 
	#ENET1_RXIC
(
ödex
Ë
	`ENET_RXIC_REG
(
ENET1_BASE_PTR
,ödex)

	)

9707 
	#ENET2_RXIC
(
ödex
Ë
	`ENET_RXIC_REG
(
ENET2_BASE_PTR
,ödex)

	)

9708 
	#ENET1_RCMR
(
ödex
Ë
	`ENET_RCMR_REG
(
ENET1_BASE_PTR
,ödex)

	)

9709 
	#ENET2_RCMR
(
ödex
Ë
	`ENET_RCMR_REG
(
ENET2_BASE_PTR
,ödex)

	)

9710 
	#ENET1_DMACFG
(
ödex
Ë
	`ENET_DMACFG_REG
(
ENET1_BASE_PTR
,ödex)

	)

9711 
	#ENET2_DMACFG
(
ödex
Ë
	`ENET_DMACFG_REG
(
ENET2_BASE_PTR
,ödex)

	)

9712 
	#ENET1_TCSR
(
ödex
Ë
	`ENET_TCSR_REG
(
ENET1_BASE_PTR
,ödex)

	)

9713 
	#ENET2_TCSR
(
ödex
Ë
	`ENET_TCSR_REG
(
ENET2_BASE_PTR
,ödex)

	)

9714 
	#ENET1_TCCR
(
ödex
Ë
	`ENET_TCCR_REG
(
ENET1_BASE_PTR
,ödex)

	)

9715 
	#ENET2_TCCR
(
ödex
Ë
	`ENET_TCCR_REG
(
ENET2_BASE_PTR
,ödex)

	)

9736 
__IO
 
uöt32_t
 
	mCR
;

9737 
__IO
 
uöt32_t
 
	mSR
;

9738 
__IO
 
uöt32_t
 
	mLR
;

9739 
__IO
 
uöt32_t
 
	mCMPR
;

9740 
__I
 
uöt32_t
 
	mCNR
;

9741 } 
	tEPIT_Ty≥
, *
	tEPIT_MemM≠På
;

9753 
	#EPIT_CR_REG
(
ba£
Ë((ba£)->
CR
)

	)

9754 
	#EPIT_SR_REG
(
ba£
Ë((ba£)->
SR
)

	)

9755 
	#EPIT_LR_REG
(
ba£
Ë((ba£)->
LR
)

	)

9756 
	#EPIT_CMPR_REG
(
ba£
Ë((ba£)->
CMPR
)

	)

9757 
	#EPIT_CNR_REG
(
ba£
Ë((ba£)->
CNR
)

	)

9772 
	#EPIT_CR_EN_MASK
 0x1u

	)

9773 
	#EPIT_CR_EN_SHIFT
 0

	)

9774 
	#EPIT_CR_ENMOD_MASK
 0x2u

	)

9775 
	#EPIT_CR_ENMOD_SHIFT
 1

	)

9776 
	#EPIT_CR_OCIEN_MASK
 0x4u

	)

9777 
	#EPIT_CR_OCIEN_SHIFT
 2

	)

9778 
	#EPIT_CR_RLD_MASK
 0x8u

	)

9779 
	#EPIT_CR_RLD_SHIFT
 3

	)

9780 
	#EPIT_CR_PRESCALAR_MASK
 0xFFF0u

	)

9781 
	#EPIT_CR_PRESCALAR_SHIFT
 4

	)

9782 
	#EPIT_CR_PRESCALAR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EPIT_CR_PRESCALAR_SHIFT
))&
EPIT_CR_PRESCALAR_MASK
)

	)

9783 
	#EPIT_CR_SWR_MASK
 0x10000u

	)

9784 
	#EPIT_CR_SWR_SHIFT
 16

	)

9785 
	#EPIT_CR_IOVW_MASK
 0x20000u

	)

9786 
	#EPIT_CR_IOVW_SHIFT
 17

	)

9787 
	#EPIT_CR_DBGEN_MASK
 0x40000u

	)

9788 
	#EPIT_CR_DBGEN_SHIFT
 18

	)

9789 
	#EPIT_CR_WAITEN_MASK
 0x80000u

	)

9790 
	#EPIT_CR_WAITEN_SHIFT
 19

	)

9791 
	#EPIT_CR_STOPEN_MASK
 0x200000u

	)

9792 
	#EPIT_CR_STOPEN_SHIFT
 21

	)

9793 
	#EPIT_CR_OM_MASK
 0xC00000u

	)

9794 
	#EPIT_CR_OM_SHIFT
 22

	)

9795 
	#EPIT_CR_OM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EPIT_CR_OM_SHIFT
))&
EPIT_CR_OM_MASK
)

	)

9796 
	#EPIT_CR_CLKSRC_MASK
 0x3000000u

	)

9797 
	#EPIT_CR_CLKSRC_SHIFT
 24

	)

9798 
	#EPIT_CR_CLKSRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EPIT_CR_CLKSRC_SHIFT
))&
EPIT_CR_CLKSRC_MASK
)

	)

9800 
	#EPIT_SR_OCIF_MASK
 0x1u

	)

9801 
	#EPIT_SR_OCIF_SHIFT
 0

	)

9803 
	#EPIT_LR_LOAD_MASK
 0xFFFFFFFFu

	)

9804 
	#EPIT_LR_LOAD_SHIFT
 0

	)

9805 
	#EPIT_LR_LOAD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EPIT_LR_LOAD_SHIFT
))&
EPIT_LR_LOAD_MASK
)

	)

9807 
	#EPIT_CMPR_COMPARE_MASK
 0xFFFFFFFFu

	)

9808 
	#EPIT_CMPR_COMPARE_SHIFT
 0

	)

9809 
	#EPIT_CMPR_COMPARE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EPIT_CMPR_COMPARE_SHIFT
))&
EPIT_CMPR_COMPARE_MASK
)

	)

9811 
	#EPIT_CNR_COUNT_MASK
 0xFFFFFFFFu

	)

9812 
	#EPIT_CNR_COUNT_SHIFT
 0

	)

9813 
	#EPIT_CNR_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
EPIT_CNR_COUNT_SHIFT
))&
EPIT_CNR_COUNT_MASK
)

	)

9821 
	#EPIT1_BASE
 (0x420D0000u)

	)

9823 
	#EPIT1
 ((
EPIT_Ty≥
 *)
EPIT1_BASE
)

	)

9824 
	#EPIT1_BASE_PTR
 (
EPIT1
)

	)

9826 
	#EPIT2_BASE
 (0x420D4000u)

	)

9828 
	#EPIT2
 ((
EPIT_Ty≥
 *)
EPIT2_BASE
)

	)

9829 
	#EPIT2_BASE_PTR
 (
EPIT2
)

	)

9831 
	#EPIT_BASE_ADDRS
 { 
EPIT1_BASE
, 
EPIT2_BASE
 }

	)

9833 
	#EPIT_BASE_PTRS
 { 
EPIT1
, 
EPIT2
 }

	)

9835 
	#EPIT_IRQS
 { 
EPIT1_IRQn
, 
EPIT2_IRQn
 }

	)

9848 
	#EPIT1_CR
 
	`EPIT_CR_REG
(
EPIT1_BASE_PTR
)

	)

9849 
	#EPIT1_SR
 
	`EPIT_SR_REG
(
EPIT1_BASE_PTR
)

	)

9850 
	#EPIT1_LR
 
	`EPIT_LR_REG
(
EPIT1_BASE_PTR
)

	)

9851 
	#EPIT1_CMPR
 
	`EPIT_CMPR_REG
(
EPIT1_BASE_PTR
)

	)

9852 
	#EPIT1_CNR
 
	`EPIT_CNR_REG
(
EPIT1_BASE_PTR
)

	)

9854 
	#EPIT2_CR
 
	`EPIT_CR_REG
(
EPIT2_BASE_PTR
)

	)

9855 
	#EPIT2_SR
 
	`EPIT_SR_REG
(
EPIT2_BASE_PTR
)

	)

9856 
	#EPIT2_LR
 
	`EPIT_LR_REG
(
EPIT2_BASE_PTR
)

	)

9857 
	#EPIT2_CMPR
 
	`EPIT_CMPR_REG
(
EPIT2_BASE_PTR
)

	)

9858 
	#EPIT2_CNR
 
	`EPIT_CNR_REG
(
EPIT2_BASE_PTR
)

	)

9879 
__O
 
uöt32_t
 
	mETDR
;

9880 
__I
 
uöt32_t
 
	mERDR
;

9881 
__IO
 
uöt32_t
 
	mECR
;

9882 
__I
 
uöt32_t
 
	mESR
;

9883 
__IO
 
uöt32_t
 
	mTFCR
;

9884 
__I
 
uöt32_t
 
	mTFSR
;

9885 
__IO
 
uöt32_t
 
	mRFCR
;

9886 
__I
 
uöt32_t
 
	mRFSR
;

9887 
uöt8_t
 
	mRESERVED_0
[96];

9888 
__O
 
uöt32_t
 
	mTX
[6];

9889 
__O
 
uöt32_t
 
	mTSR
;

9890 
uöt8_t
 
	mRESERVED_1
[4];

9891 
__I
 
uöt32_t
 
	mRX
[4];

9892 
uöt8_t
 
	mRESERVED_2
[28];

9893 
__I
 
uöt32_t
 
	mSAISR
;

9894 
__IO
 
uöt32_t
 
	mSAICR
;

9895 
__IO
 
uöt32_t
 
	mTCR
;

9896 
__IO
 
uöt32_t
 
	mTCCR
;

9897 
__IO
 
uöt32_t
 
	mRCR
;

9898 
__IO
 
uöt32_t
 
	mRCCR
;

9899 
__IO
 
uöt32_t
 
	mTSMA
;

9900 
__IO
 
uöt32_t
 
	mTSMB
;

9901 
__IO
 
uöt32_t
 
	mRSMA
;

9902 
__IO
 
uöt32_t
 
	mRSMB
;

9903 
uöt8_t
 
	mRESERVED_3
[4];

9904 
__IO
 
uöt32_t
 
	mPRRC
;

9905 
__IO
 
uöt32_t
 
	mPCRC
;

9906 } 
	tESAI_Ty≥
, *
	tESAI_MemM≠På
;

9918 
	#ESAI_ETDR_REG
(
ba£
Ë((ba£)->
ETDR
)

	)

9919 
	#ESAI_ERDR_REG
(
ba£
Ë((ba£)->
ERDR
)

	)

9920 
	#ESAI_ECR_REG
(
ba£
Ë((ba£)->
ECR
)

	)

9921 
	#ESAI_ESR_REG
(
ba£
Ë((ba£)->
ESR
)

	)

9922 
	#ESAI_TFCR_REG
(
ba£
Ë((ba£)->
TFCR
)

	)

9923 
	#ESAI_TFSR_REG
(
ba£
Ë((ba£)->
TFSR
)

	)

9924 
	#ESAI_RFCR_REG
(
ba£
Ë((ba£)->
RFCR
)

	)

9925 
	#ESAI_RFSR_REG
(
ba£
Ë((ba£)->
RFSR
)

	)

9926 
	#ESAI_TX_REG
(
ba£
,
ödex
Ë((ba£)->
TX
[ödex])

	)

9927 
	#ESAI_TSR_REG
(
ba£
Ë((ba£)->
TSR
)

	)

9928 
	#ESAI_RX_REG
(
ba£
,
ödex
Ë((ba£)->
RX
[ödex])

	)

9929 
	#ESAI_SAISR_REG
(
ba£
Ë((ba£)->
SAISR
)

	)

9930 
	#ESAI_SAICR_REG
(
ba£
Ë((ba£)->
SAICR
)

	)

9931 
	#ESAI_TCR_REG
(
ba£
Ë((ba£)->
TCR
)

	)

9932 
	#ESAI_TCCR_REG
(
ba£
Ë((ba£)->
TCCR
)

	)

9933 
	#ESAI_RCR_REG
(
ba£
Ë((ba£)->
RCR
)

	)

9934 
	#ESAI_RCCR_REG
(
ba£
Ë((ba£)->
RCCR
)

	)

9935 
	#ESAI_TSMA_REG
(
ba£
Ë((ba£)->
TSMA
)

	)

9936 
	#ESAI_TSMB_REG
(
ba£
Ë((ba£)->
TSMB
)

	)

9937 
	#ESAI_RSMA_REG
(
ba£
Ë((ba£)->
RSMA
)

	)

9938 
	#ESAI_RSMB_REG
(
ba£
Ë((ba£)->
RSMB
)

	)

9939 
	#ESAI_PRRC_REG
(
ba£
Ë((ba£)->
PRRC
)

	)

9940 
	#ESAI_PCRC_REG
(
ba£
Ë((ba£)->
PCRC
)

	)

9956 
	#ESAI_ETDR_ETDR_MASK
 0xFFFFFFFFu

	)

9957 
	#ESAI_ETDR_ETDR_SHIFT
 0

	)

9958 
	#ESAI_ETDR_ETDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_ETDR_ETDR_SHIFT
))&
ESAI_ETDR_ETDR_MASK
)

	)

9960 
	#ESAI_ERDR_ERDR_MASK
 0xFFFFFFFFu

	)

9961 
	#ESAI_ERDR_ERDR_SHIFT
 0

	)

9962 
	#ESAI_ERDR_ERDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_ERDR_ERDR_SHIFT
))&
ESAI_ERDR_ERDR_MASK
)

	)

9964 
	#ESAI_ECR_ESAIEN_MASK
 0x1u

	)

9965 
	#ESAI_ECR_ESAIEN_SHIFT
 0

	)

9966 
	#ESAI_ECR_ERST_MASK
 0x2u

	)

9967 
	#ESAI_ECR_ERST_SHIFT
 1

	)

9968 
	#ESAI_ECR_ERO_MASK
 0x10000u

	)

9969 
	#ESAI_ECR_ERO_SHIFT
 16

	)

9970 
	#ESAI_ECR_ERI_MASK
 0x20000u

	)

9971 
	#ESAI_ECR_ERI_SHIFT
 17

	)

9972 
	#ESAI_ECR_ETO_MASK
 0x40000u

	)

9973 
	#ESAI_ECR_ETO_SHIFT
 18

	)

9974 
	#ESAI_ECR_ETI_MASK
 0x80000u

	)

9975 
	#ESAI_ECR_ETI_SHIFT
 19

	)

9977 
	#ESAI_ESR_RD_MASK
 0x1u

	)

9978 
	#ESAI_ESR_RD_SHIFT
 0

	)

9979 
	#ESAI_ESR_RED_MASK
 0x2u

	)

9980 
	#ESAI_ESR_RED_SHIFT
 1

	)

9981 
	#ESAI_ESR_RDE_MASK
 0x4u

	)

9982 
	#ESAI_ESR_RDE_SHIFT
 2

	)

9983 
	#ESAI_ESR_RLS_MASK
 0x8u

	)

9984 
	#ESAI_ESR_RLS_SHIFT
 3

	)

9985 
	#ESAI_ESR_TD_MASK
 0x10u

	)

9986 
	#ESAI_ESR_TD_SHIFT
 4

	)

9987 
	#ESAI_ESR_TED_MASK
 0x20u

	)

9988 
	#ESAI_ESR_TED_SHIFT
 5

	)

9989 
	#ESAI_ESR_TDE_MASK
 0x40u

	)

9990 
	#ESAI_ESR_TDE_SHIFT
 6

	)

9991 
	#ESAI_ESR_TLS_MASK
 0x80u

	)

9992 
	#ESAI_ESR_TLS_SHIFT
 7

	)

9993 
	#ESAI_ESR_TFE_MASK
 0x100u

	)

9994 
	#ESAI_ESR_TFE_SHIFT
 8

	)

9995 
	#ESAI_ESR_RFF_MASK
 0x200u

	)

9996 
	#ESAI_ESR_RFF_SHIFT
 9

	)

9997 
	#ESAI_ESR_TINIT_MASK
 0x400u

	)

9998 
	#ESAI_ESR_TINIT_SHIFT
 10

	)

10000 
	#ESAI_TFCR_TFE_MASK
 0x1u

	)

10001 
	#ESAI_TFCR_TFE_SHIFT
 0

	)

10002 
	#ESAI_TFCR_TFR_MASK
 0x2u

	)

10003 
	#ESAI_TFCR_TFR_SHIFT
 1

	)

10004 
	#ESAI_TFCR_TE0_MASK
 0x4u

	)

10005 
	#ESAI_TFCR_TE0_SHIFT
 2

	)

10006 
	#ESAI_TFCR_TE1_MASK
 0x8u

	)

10007 
	#ESAI_TFCR_TE1_SHIFT
 3

	)

10008 
	#ESAI_TFCR_TE2_MASK
 0x10u

	)

10009 
	#ESAI_TFCR_TE2_SHIFT
 4

	)

10010 
	#ESAI_TFCR_TE3_MASK
 0x20u

	)

10011 
	#ESAI_TFCR_TE3_SHIFT
 5

	)

10012 
	#ESAI_TFCR_TE4_MASK
 0x40u

	)

10013 
	#ESAI_TFCR_TE4_SHIFT
 6

	)

10014 
	#ESAI_TFCR_TE5_MASK
 0x80u

	)

10015 
	#ESAI_TFCR_TE5_SHIFT
 7

	)

10016 
	#ESAI_TFCR_TFWM_MASK
 0xFF00u

	)

10017 
	#ESAI_TFCR_TFWM_SHIFT
 8

	)

10018 
	#ESAI_TFCR_TFWM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_TFCR_TFWM_SHIFT
))&
ESAI_TFCR_TFWM_MASK
)

	)

10019 
	#ESAI_TFCR_TWA_MASK
 0x70000u

	)

10020 
	#ESAI_TFCR_TWA_SHIFT
 16

	)

10021 
	#ESAI_TFCR_TWA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_TFCR_TWA_SHIFT
))&
ESAI_TFCR_TWA_MASK
)

	)

10022 
	#ESAI_TFCR_TIEN_MASK
 0x80000u

	)

10023 
	#ESAI_TFCR_TIEN_SHIFT
 19

	)

10025 
	#ESAI_TFSR_TFCNT_MASK
 0xFFu

	)

10026 
	#ESAI_TFSR_TFCNT_SHIFT
 0

	)

10027 
	#ESAI_TFSR_TFCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_TFSR_TFCNT_SHIFT
))&
ESAI_TFSR_TFCNT_MASK
)

	)

10028 
	#ESAI_TFSR_NTFI_MASK
 0x700u

	)

10029 
	#ESAI_TFSR_NTFI_SHIFT
 8

	)

10030 
	#ESAI_TFSR_NTFI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_TFSR_NTFI_SHIFT
))&
ESAI_TFSR_NTFI_MASK
)

	)

10031 
	#ESAI_TFSR_NTFO_MASK
 0x7000u

	)

10032 
	#ESAI_TFSR_NTFO_SHIFT
 12

	)

10033 
	#ESAI_TFSR_NTFO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_TFSR_NTFO_SHIFT
))&
ESAI_TFSR_NTFO_MASK
)

	)

10035 
	#ESAI_RFCR_RFE_MASK
 0x1u

	)

10036 
	#ESAI_RFCR_RFE_SHIFT
 0

	)

10037 
	#ESAI_RFCR_RFR_MASK
 0x2u

	)

10038 
	#ESAI_RFCR_RFR_SHIFT
 1

	)

10039 
	#ESAI_RFCR_RE0_MASK
 0x4u

	)

10040 
	#ESAI_RFCR_RE0_SHIFT
 2

	)

10041 
	#ESAI_RFCR_RE1_MASK
 0x8u

	)

10042 
	#ESAI_RFCR_RE1_SHIFT
 3

	)

10043 
	#ESAI_RFCR_RE2_MASK
 0x10u

	)

10044 
	#ESAI_RFCR_RE2_SHIFT
 4

	)

10045 
	#ESAI_RFCR_RE3_MASK
 0x20u

	)

10046 
	#ESAI_RFCR_RE3_SHIFT
 5

	)

10047 
	#ESAI_RFCR_RFWM_MASK
 0xFF00u

	)

10048 
	#ESAI_RFCR_RFWM_SHIFT
 8

	)

10049 
	#ESAI_RFCR_RFWM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_RFCR_RFWM_SHIFT
))&
ESAI_RFCR_RFWM_MASK
)

	)

10050 
	#ESAI_RFCR_RWA_MASK
 0x70000u

	)

10051 
	#ESAI_RFCR_RWA_SHIFT
 16

	)

10052 
	#ESAI_RFCR_RWA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_RFCR_RWA_SHIFT
))&
ESAI_RFCR_RWA_MASK
)

	)

10053 
	#ESAI_RFCR_REXT_MASK
 0x80000u

	)

10054 
	#ESAI_RFCR_REXT_SHIFT
 19

	)

10056 
	#ESAI_RFSR_RFCNT_MASK
 0xFFu

	)

10057 
	#ESAI_RFSR_RFCNT_SHIFT
 0

	)

10058 
	#ESAI_RFSR_RFCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_RFSR_RFCNT_SHIFT
))&
ESAI_RFSR_RFCNT_MASK
)

	)

10059 
	#ESAI_RFSR_NRFO_MASK
 0x300u

	)

10060 
	#ESAI_RFSR_NRFO_SHIFT
 8

	)

10061 
	#ESAI_RFSR_NRFO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_RFSR_NRFO_SHIFT
))&
ESAI_RFSR_NRFO_MASK
)

	)

10062 
	#ESAI_RFSR_NRFI_MASK
 0x3000u

	)

10063 
	#ESAI_RFSR_NRFI_SHIFT
 12

	)

10064 
	#ESAI_RFSR_NRFI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_RFSR_NRFI_SHIFT
))&
ESAI_RFSR_NRFI_MASK
)

	)

10066 
	#ESAI_TX_TXn_MASK
 0xFFFFFFu

	)

10067 
	#ESAI_TX_TXn_SHIFT
 0

	)

10068 
	#ESAI_TX_TXn
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_TX_TXn_SHIFT
))&
ESAI_TX_TXn_MASK
)

	)

10070 
	#ESAI_TSR_TSR_MASK
 0xFFFFFFu

	)

10071 
	#ESAI_TSR_TSR_SHIFT
 0

	)

10072 
	#ESAI_TSR_TSR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_TSR_TSR_SHIFT
))&
ESAI_TSR_TSR_MASK
)

	)

10074 
	#ESAI_RX_RXn_MASK
 0xFFFFFFu

	)

10075 
	#ESAI_RX_RXn_SHIFT
 0

	)

10076 
	#ESAI_RX_RXn
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_RX_RXn_SHIFT
))&
ESAI_RX_RXn_MASK
)

	)

10078 
	#ESAI_SAISR_IF0_MASK
 0x1u

	)

10079 
	#ESAI_SAISR_IF0_SHIFT
 0

	)

10080 
	#ESAI_SAISR_IF1_MASK
 0x2u

	)

10081 
	#ESAI_SAISR_IF1_SHIFT
 1

	)

10082 
	#ESAI_SAISR_IF2_MASK
 0x4u

	)

10083 
	#ESAI_SAISR_IF2_SHIFT
 2

	)

10084 
	#ESAI_SAISR_RFS_MASK
 0x40u

	)

10085 
	#ESAI_SAISR_RFS_SHIFT
 6

	)

10086 
	#ESAI_SAISR_ROE_MASK
 0x80u

	)

10087 
	#ESAI_SAISR_ROE_SHIFT
 7

	)

10088 
	#ESAI_SAISR_RDF_MASK
 0x100u

	)

10089 
	#ESAI_SAISR_RDF_SHIFT
 8

	)

10090 
	#ESAI_SAISR_REDF_MASK
 0x200u

	)

10091 
	#ESAI_SAISR_REDF_SHIFT
 9

	)

10092 
	#ESAI_SAISR_RODF_MASK
 0x400u

	)

10093 
	#ESAI_SAISR_RODF_SHIFT
 10

	)

10094 
	#ESAI_SAISR_TFS_MASK
 0x2000u

	)

10095 
	#ESAI_SAISR_TFS_SHIFT
 13

	)

10096 
	#ESAI_SAISR_TUE_MASK
 0x4000u

	)

10097 
	#ESAI_SAISR_TUE_SHIFT
 14

	)

10098 
	#ESAI_SAISR_TDE_MASK
 0x8000u

	)

10099 
	#ESAI_SAISR_TDE_SHIFT
 15

	)

10100 
	#ESAI_SAISR_TEDE_MASK
 0x10000u

	)

10101 
	#ESAI_SAISR_TEDE_SHIFT
 16

	)

10102 
	#ESAI_SAISR_TODFE_MASK
 0x20000u

	)

10103 
	#ESAI_SAISR_TODFE_SHIFT
 17

	)

10105 
	#ESAI_SAICR_OF0_MASK
 0x1u

	)

10106 
	#ESAI_SAICR_OF0_SHIFT
 0

	)

10107 
	#ESAI_SAICR_OF1_MASK
 0x2u

	)

10108 
	#ESAI_SAICR_OF1_SHIFT
 1

	)

10109 
	#ESAI_SAICR_OF2_MASK
 0x4u

	)

10110 
	#ESAI_SAICR_OF2_SHIFT
 2

	)

10111 
	#ESAI_SAICR_SYN_MASK
 0x40u

	)

10112 
	#ESAI_SAICR_SYN_SHIFT
 6

	)

10113 
	#ESAI_SAICR_TEBE_MASK
 0x80u

	)

10114 
	#ESAI_SAICR_TEBE_SHIFT
 7

	)

10115 
	#ESAI_SAICR_ALC_MASK
 0x100u

	)

10116 
	#ESAI_SAICR_ALC_SHIFT
 8

	)

10118 
	#ESAI_TCR_TE0_MASK
 0x1u

	)

10119 
	#ESAI_TCR_TE0_SHIFT
 0

	)

10120 
	#ESAI_TCR_TE1_MASK
 0x2u

	)

10121 
	#ESAI_TCR_TE1_SHIFT
 1

	)

10122 
	#ESAI_TCR_TE2_MASK
 0x4u

	)

10123 
	#ESAI_TCR_TE2_SHIFT
 2

	)

10124 
	#ESAI_TCR_TE3_MASK
 0x8u

	)

10125 
	#ESAI_TCR_TE3_SHIFT
 3

	)

10126 
	#ESAI_TCR_TE4_MASK
 0x10u

	)

10127 
	#ESAI_TCR_TE4_SHIFT
 4

	)

10128 
	#ESAI_TCR_TE5_MASK
 0x20u

	)

10129 
	#ESAI_TCR_TE5_SHIFT
 5

	)

10130 
	#ESAI_TCR_TSHFD_MASK
 0x40u

	)

10131 
	#ESAI_TCR_TSHFD_SHIFT
 6

	)

10132 
	#ESAI_TCR_TWA_MASK
 0x80u

	)

10133 
	#ESAI_TCR_TWA_SHIFT
 7

	)

10134 
	#ESAI_TCR_TMOD_MASK
 0x300u

	)

10135 
	#ESAI_TCR_TMOD_SHIFT
 8

	)

10136 
	#ESAI_TCR_TMOD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_TCR_TMOD_SHIFT
))&
ESAI_TCR_TMOD_MASK
)

	)

10137 
	#ESAI_TCR_TSWS_MASK
 0x7C00u

	)

10138 
	#ESAI_TCR_TSWS_SHIFT
 10

	)

10139 
	#ESAI_TCR_TSWS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_TCR_TSWS_SHIFT
))&
ESAI_TCR_TSWS_MASK
)

	)

10140 
	#ESAI_TCR_TFSL_MASK
 0x8000u

	)

10141 
	#ESAI_TCR_TFSL_SHIFT
 15

	)

10142 
	#ESAI_TCR_TFSR_MASK
 0x10000u

	)

10143 
	#ESAI_TCR_TFSR_SHIFT
 16

	)

10144 
	#ESAI_TCR_PADC_MASK
 0x20000u

	)

10145 
	#ESAI_TCR_PADC_SHIFT
 17

	)

10146 
	#ESAI_TCR_TPR_MASK
 0x80000u

	)

10147 
	#ESAI_TCR_TPR_SHIFT
 19

	)

10148 
	#ESAI_TCR_TEIE_MASK
 0x100000u

	)

10149 
	#ESAI_TCR_TEIE_SHIFT
 20

	)

10150 
	#ESAI_TCR_TEDIE_MASK
 0x200000u

	)

10151 
	#ESAI_TCR_TEDIE_SHIFT
 21

	)

10152 
	#ESAI_TCR_TIE_MASK
 0x400000u

	)

10153 
	#ESAI_TCR_TIE_SHIFT
 22

	)

10154 
	#ESAI_TCR_TLIE_MASK
 0x800000u

	)

10155 
	#ESAI_TCR_TLIE_SHIFT
 23

	)

10157 
	#ESAI_TCCR_TPM_MASK
 0xFFu

	)

10158 
	#ESAI_TCCR_TPM_SHIFT
 0

	)

10159 
	#ESAI_TCCR_TPM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_TCCR_TPM_SHIFT
))&
ESAI_TCCR_TPM_MASK
)

	)

10160 
	#ESAI_TCCR_TPSR_MASK
 0x100u

	)

10161 
	#ESAI_TCCR_TPSR_SHIFT
 8

	)

10162 
	#ESAI_TCCR_TDC_MASK
 0x3E00u

	)

10163 
	#ESAI_TCCR_TDC_SHIFT
 9

	)

10164 
	#ESAI_TCCR_TDC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_TCCR_TDC_SHIFT
))&
ESAI_TCCR_TDC_MASK
)

	)

10165 
	#ESAI_TCCR_TFP_MASK
 0x3C000u

	)

10166 
	#ESAI_TCCR_TFP_SHIFT
 14

	)

10167 
	#ESAI_TCCR_TFP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_TCCR_TFP_SHIFT
))&
ESAI_TCCR_TFP_MASK
)

	)

10168 
	#ESAI_TCCR_TCKP_MASK
 0x40000u

	)

10169 
	#ESAI_TCCR_TCKP_SHIFT
 18

	)

10170 
	#ESAI_TCCR_TFSP_MASK
 0x80000u

	)

10171 
	#ESAI_TCCR_TFSP_SHIFT
 19

	)

10172 
	#ESAI_TCCR_THCKP_MASK
 0x100000u

	)

10173 
	#ESAI_TCCR_THCKP_SHIFT
 20

	)

10174 
	#ESAI_TCCR_TCKD_MASK
 0x200000u

	)

10175 
	#ESAI_TCCR_TCKD_SHIFT
 21

	)

10176 
	#ESAI_TCCR_TFSD_MASK
 0x400000u

	)

10177 
	#ESAI_TCCR_TFSD_SHIFT
 22

	)

10178 
	#ESAI_TCCR_THCKD_MASK
 0x800000u

	)

10179 
	#ESAI_TCCR_THCKD_SHIFT
 23

	)

10181 
	#ESAI_RCR_RE0_MASK
 0x1u

	)

10182 
	#ESAI_RCR_RE0_SHIFT
 0

	)

10183 
	#ESAI_RCR_RE1_MASK
 0x2u

	)

10184 
	#ESAI_RCR_RE1_SHIFT
 1

	)

10185 
	#ESAI_RCR_RE2_MASK
 0x4u

	)

10186 
	#ESAI_RCR_RE2_SHIFT
 2

	)

10187 
	#ESAI_RCR_RE3_MASK
 0x8u

	)

10188 
	#ESAI_RCR_RE3_SHIFT
 3

	)

10189 
	#ESAI_RCR_RSHFD_MASK
 0x40u

	)

10190 
	#ESAI_RCR_RSHFD_SHIFT
 6

	)

10191 
	#ESAI_RCR_RWA_MASK
 0x80u

	)

10192 
	#ESAI_RCR_RWA_SHIFT
 7

	)

10193 
	#ESAI_RCR_RMOD_MASK
 0x300u

	)

10194 
	#ESAI_RCR_RMOD_SHIFT
 8

	)

10195 
	#ESAI_RCR_RMOD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_RCR_RMOD_SHIFT
))&
ESAI_RCR_RMOD_MASK
)

	)

10196 
	#ESAI_RCR_RSWS_MASK
 0x7C00u

	)

10197 
	#ESAI_RCR_RSWS_SHIFT
 10

	)

10198 
	#ESAI_RCR_RSWS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_RCR_RSWS_SHIFT
))&
ESAI_RCR_RSWS_MASK
)

	)

10199 
	#ESAI_RCR_RFSL_MASK
 0x8000u

	)

10200 
	#ESAI_RCR_RFSL_SHIFT
 15

	)

10201 
	#ESAI_RCR_RFSR_MASK
 0x10000u

	)

10202 
	#ESAI_RCR_RFSR_SHIFT
 16

	)

10203 
	#ESAI_RCR_RPR_MASK
 0x80000u

	)

10204 
	#ESAI_RCR_RPR_SHIFT
 19

	)

10205 
	#ESAI_RCR_REIE_MASK
 0x100000u

	)

10206 
	#ESAI_RCR_REIE_SHIFT
 20

	)

10207 
	#ESAI_RCR_REDIE_MASK
 0x200000u

	)

10208 
	#ESAI_RCR_REDIE_SHIFT
 21

	)

10209 
	#ESAI_RCR_RIE_MASK
 0x400000u

	)

10210 
	#ESAI_RCR_RIE_SHIFT
 22

	)

10211 
	#ESAI_RCR_RLIE_MASK
 0x800000u

	)

10212 
	#ESAI_RCR_RLIE_SHIFT
 23

	)

10214 
	#ESAI_RCCR_RPM_MASK
 0xFFu

	)

10215 
	#ESAI_RCCR_RPM_SHIFT
 0

	)

10216 
	#ESAI_RCCR_RPM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_RCCR_RPM_SHIFT
))&
ESAI_RCCR_RPM_MASK
)

	)

10217 
	#ESAI_RCCR_RPSR_MASK
 0x100u

	)

10218 
	#ESAI_RCCR_RPSR_SHIFT
 8

	)

10219 
	#ESAI_RCCR_RDC_MASK
 0x3E00u

	)

10220 
	#ESAI_RCCR_RDC_SHIFT
 9

	)

10221 
	#ESAI_RCCR_RDC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_RCCR_RDC_SHIFT
))&
ESAI_RCCR_RDC_MASK
)

	)

10222 
	#ESAI_RCCR_RFP_MASK
 0x3C000u

	)

10223 
	#ESAI_RCCR_RFP_SHIFT
 14

	)

10224 
	#ESAI_RCCR_RFP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_RCCR_RFP_SHIFT
))&
ESAI_RCCR_RFP_MASK
)

	)

10225 
	#ESAI_RCCR_RCKP_MASK
 0x40000u

	)

10226 
	#ESAI_RCCR_RCKP_SHIFT
 18

	)

10227 
	#ESAI_RCCR_RFSP_MASK
 0x80000u

	)

10228 
	#ESAI_RCCR_RFSP_SHIFT
 19

	)

10229 
	#ESAI_RCCR_RHCKP_MASK
 0x100000u

	)

10230 
	#ESAI_RCCR_RHCKP_SHIFT
 20

	)

10231 
	#ESAI_RCCR_RCKD_MASK
 0x200000u

	)

10232 
	#ESAI_RCCR_RCKD_SHIFT
 21

	)

10233 
	#ESAI_RCCR_RFSD_MASK
 0x400000u

	)

10234 
	#ESAI_RCCR_RFSD_SHIFT
 22

	)

10235 
	#ESAI_RCCR_RHCKD_MASK
 0x800000u

	)

10236 
	#ESAI_RCCR_RHCKD_SHIFT
 23

	)

10238 
	#ESAI_TSMA_TS_MASK
 0xFFFFu

	)

10239 
	#ESAI_TSMA_TS_SHIFT
 0

	)

10240 
	#ESAI_TSMA_TS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_TSMA_TS_SHIFT
))&
ESAI_TSMA_TS_MASK
)

	)

10242 
	#ESAI_TSMB_TS_MASK
 0xFFFFu

	)

10243 
	#ESAI_TSMB_TS_SHIFT
 0

	)

10244 
	#ESAI_TSMB_TS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_TSMB_TS_SHIFT
))&
ESAI_TSMB_TS_MASK
)

	)

10246 
	#ESAI_RSMA_RS_MASK
 0xFFFFu

	)

10247 
	#ESAI_RSMA_RS_SHIFT
 0

	)

10248 
	#ESAI_RSMA_RS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_RSMA_RS_SHIFT
))&
ESAI_RSMA_RS_MASK
)

	)

10250 
	#ESAI_RSMB_RS_MASK
 0xFFFFu

	)

10251 
	#ESAI_RSMB_RS_SHIFT
 0

	)

10252 
	#ESAI_RSMB_RS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_RSMB_RS_SHIFT
))&
ESAI_RSMB_RS_MASK
)

	)

10254 
	#ESAI_PRRC_PDC_MASK
 0xFFFu

	)

10255 
	#ESAI_PRRC_PDC_SHIFT
 0

	)

10256 
	#ESAI_PRRC_PDC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_PRRC_PDC_SHIFT
))&
ESAI_PRRC_PDC_MASK
)

	)

10258 
	#ESAI_PCRC_PC_MASK
 0xFFFu

	)

10259 
	#ESAI_PCRC_PC_SHIFT
 0

	)

10260 
	#ESAI_PCRC_PC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ESAI_PCRC_PC_SHIFT
))&
ESAI_PCRC_PC_MASK
)

	)

10268 
	#ESAI_BASE
 (0x42024000u)

	)

10270 
	#ESAI
 ((
ESAI_Ty≥
 *)
ESAI_BASE
)

	)

10271 
	#ESAI_BASE_PTR
 (
ESAI
)

	)

10273 
	#ESAI_BASE_ADDRS
 { 
ESAI_BASE
 }

	)

10275 
	#ESAI_BASE_PTRS
 { 
ESAI
 }

	)

10277 
	#ESAI_IRQS
 { 
ESAI_IRQn
 }

	)

10290 
	#ESAI_ETDR
 
	`ESAI_ETDR_REG
(
ESAI_BASE_PTR
)

	)

10291 
	#ESAI_ERDR
 
	`ESAI_ERDR_REG
(
ESAI_BASE_PTR
)

	)

10292 
	#ESAI_ECR
 
	`ESAI_ECR_REG
(
ESAI_BASE_PTR
)

	)

10293 
	#ESAI_ESR
 
	`ESAI_ESR_REG
(
ESAI_BASE_PTR
)

	)

10294 
	#ESAI_TFCR
 
	`ESAI_TFCR_REG
(
ESAI_BASE_PTR
)

	)

10295 
	#ESAI_TFSR
 
	`ESAI_TFSR_REG
(
ESAI_BASE_PTR
)

	)

10296 
	#ESAI_RFCR
 
	`ESAI_RFCR_REG
(
ESAI_BASE_PTR
)

	)

10297 
	#ESAI_RFSR
 
	`ESAI_RFSR_REG
(
ESAI_BASE_PTR
)

	)

10298 
	#ESAI_TX0
 
	`ESAI_TX_REG
(
ESAI_BASE_PTR
,0)

	)

10299 
	#ESAI_TX1
 
	`ESAI_TX_REG
(
ESAI_BASE_PTR
,1)

	)

10300 
	#ESAI_TX2
 
	`ESAI_TX_REG
(
ESAI_BASE_PTR
,2)

	)

10301 
	#ESAI_TX3
 
	`ESAI_TX_REG
(
ESAI_BASE_PTR
,3)

	)

10302 
	#ESAI_TX4
 
	`ESAI_TX_REG
(
ESAI_BASE_PTR
,4)

	)

10303 
	#ESAI_TX5
 
	`ESAI_TX_REG
(
ESAI_BASE_PTR
,5)

	)

10304 
	#ESAI_TSR
 
	`ESAI_TSR_REG
(
ESAI_BASE_PTR
)

	)

10305 
	#ESAI_RX0
 
	`ESAI_RX_REG
(
ESAI_BASE_PTR
,0)

	)

10306 
	#ESAI_RX1
 
	`ESAI_RX_REG
(
ESAI_BASE_PTR
,1)

	)

10307 
	#ESAI_RX2
 
	`ESAI_RX_REG
(
ESAI_BASE_PTR
,2)

	)

10308 
	#ESAI_RX3
 
	`ESAI_RX_REG
(
ESAI_BASE_PTR
,3)

	)

10309 
	#ESAI_SAISR
 
	`ESAI_SAISR_REG
(
ESAI_BASE_PTR
)

	)

10310 
	#ESAI_SAICR
 
	`ESAI_SAICR_REG
(
ESAI_BASE_PTR
)

	)

10311 
	#ESAI_TCR
 
	`ESAI_TCR_REG
(
ESAI_BASE_PTR
)

	)

10312 
	#ESAI_TCCR
 
	`ESAI_TCCR_REG
(
ESAI_BASE_PTR
)

	)

10313 
	#ESAI_RCR
 
	`ESAI_RCR_REG
(
ESAI_BASE_PTR
)

	)

10314 
	#ESAI_RCCR
 
	`ESAI_RCCR_REG
(
ESAI_BASE_PTR
)

	)

10315 
	#ESAI_TSMA
 
	`ESAI_TSMA_REG
(
ESAI_BASE_PTR
)

	)

10316 
	#ESAI_TSMB
 
	`ESAI_TSMB_REG
(
ESAI_BASE_PTR
)

	)

10317 
	#ESAI_RSMA
 
	`ESAI_RSMA_REG
(
ESAI_BASE_PTR
)

	)

10318 
	#ESAI_RSMB
 
	`ESAI_RSMB_REG
(
ESAI_BASE_PTR
)

	)

10319 
	#ESAI_PRRC
 
	`ESAI_PRRC_REG
(
ESAI_BASE_PTR
)

	)

10320 
	#ESAI_PCRC
 
	`ESAI_PCRC_REG
(
ESAI_BASE_PTR
)

	)

10322 
	#ESAI_TX
(
ödex
Ë
	`ESAI_TX_REG
(
ESAI_BASE_PTR
,ödex)

	)

10323 
	#ESAI_RX
(
ödex
Ë
	`ESAI_RX_REG
(
ESAI_BASE_PTR
,ödex)

	)

10344 
__IO
 
uöt32_t
 
	mCTRL
;

10345 
__IO
 
uöt32_t
 
	mCTRL_SET
;

10346 
__IO
 
uöt32_t
 
	mCTRL_CLR
;

10347 
__IO
 
uöt32_t
 
	mCTRL_TOG
;

10348 
__IO
 
uöt32_t
 
	mCONFIG0
;

10349 
__IO
 
uöt32_t
 
	mCONFIG0_SET
;

10350 
__IO
 
uöt32_t
 
	mCONFIG0_CLR
;

10351 
__IO
 
uöt32_t
 
	mCONFIG0_TOG
;

10352 
__IO
 
uöt32_t
 
	mCONFIG1
;

10353 
__IO
 
uöt32_t
 
	mCONFIG1_SET
;

10354 
__IO
 
uöt32_t
 
	mCONFIG1_CLR
;

10355 
__IO
 
uöt32_t
 
	mCONFIG1_TOG
;

10356 
__IO
 
uöt32_t
 
	mFB0
;

10357 
uöt8_t
 
	mRESERVED_0
[12];

10358 
__IO
 
uöt32_t
 
	mFB1
;

10359 
uöt8_t
 
	mRESERVED_1
[12];

10360 
__IO
 
uöt32_t
 
	mPXP_FB0
;

10361 
uöt8_t
 
	mRESERVED_2
[12];

10362 
__IO
 
uöt32_t
 
	mPXP_FB1
;

10363 
uöt8_t
 
	mRESERVED_3
[12];

10364 
__IO
 
uöt32_t
 
	mCH0_CTRL
;

10365 
__IO
 
uöt32_t
 
	mCH0_CTRL_SET
;

10366 
__IO
 
uöt32_t
 
	mCH0_CTRL_CLR
;

10367 
__IO
 
uöt32_t
 
	mCH0_CTRL_TOG
;

10368 
__IO
 
uöt32_t
 
	mCH0_ADDR0
;

10369 
__IO
 
uöt32_t
 
	mCH0_ADDR0_SET
;

10370 
__IO
 
uöt32_t
 
	mCH0_ADDR0_CLR
;

10371 
__IO
 
uöt32_t
 
	mCH0_ADDR0_TOG
;

10372 
__IO
 
uöt32_t
 
	mCH0_DATA0
;

10373 
uöt8_t
 
	mRESERVED_4
[12];

10374 
__IO
 
uöt32_t
 
	mCH0_ADDR1
;

10375 
__IO
 
uöt32_t
 
	mCH0_ADDR1_SET
;

10376 
__IO
 
uöt32_t
 
	mCH0_ADDR1_CLR
;

10377 
__IO
 
uöt32_t
 
	mCH0_ADDR1_TOG
;

10378 
__IO
 
uöt32_t
 
	mCH0_DATA1
;

10379 
uöt8_t
 
	mRESERVED_5
[12];

10380 
__IO
 
uöt32_t
 
	mCH0_ADDR2
;

10381 
__IO
 
uöt32_t
 
	mCH0_ADDR2_SET
;

10382 
__IO
 
uöt32_t
 
	mCH0_ADDR2_CLR
;

10383 
__IO
 
uöt32_t
 
	mCH0_ADDR2_TOG
;

10384 
__IO
 
uöt32_t
 
	mCH0_DATA2
;

10385 
uöt8_t
 
	mRESERVED_6
[12];

10386 
__IO
 
uöt32_t
 
	mCH0_ADDR3
;

10387 
__IO
 
uöt32_t
 
	mCH0_ADDR3_SET
;

10388 
__IO
 
uöt32_t
 
	mCH0_ADDR3_CLR
;

10389 
__IO
 
uöt32_t
 
	mCH0_ADDR3_TOG
;

10390 
__IO
 
uöt32_t
 
	mCH0_DATA3
;

10391 
uöt8_t
 
	mRESERVED_7
[12];

10392 
__IO
 
uöt32_t
 
	mCH1_CTRL
;

10393 
__IO
 
uöt32_t
 
	mCH1_CTRL_SET
;

10394 
__IO
 
uöt32_t
 
	mCH1_CTRL_CLR
;

10395 
__IO
 
uöt32_t
 
	mCH1_CTRL_TOG
;

10396 
__IO
 
uöt32_t
 
	mCH1_ADDR0
;

10397 
__IO
 
uöt32_t
 
	mCH1_ADDR0_SET
;

10398 
__IO
 
uöt32_t
 
	mCH1_ADDR0_CLR
;

10399 
__IO
 
uöt32_t
 
	mCH1_ADDR0_TOG
;

10400 
__IO
 
uöt32_t
 
	mCH1_DATA0
;

10401 
uöt8_t
 
	mRESERVED_8
[12];

10402 
__IO
 
uöt32_t
 
	mCH1_ADDR1
;

10403 
__IO
 
uöt32_t
 
	mCH1_ADDR1_SET
;

10404 
__IO
 
uöt32_t
 
	mCH1_ADDR1_CLR
;

10405 
__IO
 
uöt32_t
 
	mCH1_ADDR1_TOG
;

10406 
__IO
 
uöt32_t
 
	mCH1_DATA1
;

10407 
uöt8_t
 
	mRESERVED_9
[12];

10408 
__IO
 
uöt32_t
 
	mCH1_ADDR2
;

10409 
__IO
 
uöt32_t
 
	mCH1_ADDR2_SET
;

10410 
__IO
 
uöt32_t
 
	mCH1_ADDR2_CLR
;

10411 
__IO
 
uöt32_t
 
	mCH1_ADDR2_TOG
;

10412 
__IO
 
uöt32_t
 
	mCH1_DATA2
;

10413 
uöt8_t
 
	mRESERVED_10
[12];

10414 
__IO
 
uöt32_t
 
	mCH1_ADDR3
;

10415 
__IO
 
uöt32_t
 
	mCH1_ADDR3_SET
;

10416 
__IO
 
uöt32_t
 
	mCH1_ADDR3_CLR
;

10417 
__IO
 
uöt32_t
 
	mCH1_ADDR3_TOG
;

10418 
__IO
 
uöt32_t
 
	mCH1_DATA3
;

10419 
uöt8_t
 
	mRESERVED_11
[12];

10420 
__IO
 
uöt32_t
 
	mCH2_CTRL
;

10421 
__IO
 
uöt32_t
 
	mCH2_CTRL_SET
;

10422 
__IO
 
uöt32_t
 
	mCH2_CTRL_CLR
;

10423 
__IO
 
uöt32_t
 
	mCH2_CTRL_TOG
;

10424 
__IO
 
uöt32_t
 
	mCH2_ADDR0
;

10425 
__IO
 
uöt32_t
 
	mCH2_ADDR0_SET
;

10426 
__IO
 
uöt32_t
 
	mCH2_ADDR0_CLR
;

10427 
__IO
 
uöt32_t
 
	mCH2_ADDR0_TOG
;

10428 
__IO
 
uöt32_t
 
	mCH2_DATA0
;

10429 
uöt8_t
 
	mRESERVED_12
[12];

10430 
__IO
 
uöt32_t
 
	mCH2_ADDR1
;

10431 
__IO
 
uöt32_t
 
	mCH2_ADDR1_SET
;

10432 
__IO
 
uöt32_t
 
	mCH2_ADDR1_CLR
;

10433 
__IO
 
uöt32_t
 
	mCH2_ADDR1_TOG
;

10434 
__IO
 
uöt32_t
 
	mCH2_DATA1
;

10435 
uöt8_t
 
	mRESERVED_13
[12];

10436 
__IO
 
uöt32_t
 
	mCH2_ADDR2
;

10437 
__IO
 
uöt32_t
 
	mCH2_ADDR2_SET
;

10438 
__IO
 
uöt32_t
 
	mCH2_ADDR2_CLR
;

10439 
__IO
 
uöt32_t
 
	mCH2_ADDR2_TOG
;

10440 
__IO
 
uöt32_t
 
	mCH2_DATA2
;

10441 
uöt8_t
 
	mRESERVED_14
[12];

10442 
__IO
 
uöt32_t
 
	mCH2_ADDR3
;

10443 
__IO
 
uöt32_t
 
	mCH2_ADDR3_SET
;

10444 
__IO
 
uöt32_t
 
	mCH2_ADDR3_CLR
;

10445 
__IO
 
uöt32_t
 
	mCH2_ADDR3_TOG
;

10446 
__IO
 
uöt32_t
 
	mCH2_DATA3
;

10447 
uöt8_t
 
	mRESERVED_15
[12];

10448 
__IO
 
uöt32_t
 
	mCH3_CTRL
;

10449 
__IO
 
uöt32_t
 
	mCH3_CTRL_SET
;

10450 
__IO
 
uöt32_t
 
	mCH3_CTRL_CLR
;

10451 
__IO
 
uöt32_t
 
	mCH3_CTRL_TOG
;

10452 
__IO
 
uöt32_t
 
	mCH3_ADDR0
;

10453 
__IO
 
uöt32_t
 
	mCH3_ADDR0_SET
;

10454 
__IO
 
uöt32_t
 
	mCH3_ADDR0_CLR
;

10455 
__IO
 
uöt32_t
 
	mCH3_ADDR0_TOG
;

10456 
__IO
 
uöt32_t
 
	mCH3_DATA0
;

10457 
uöt8_t
 
	mRESERVED_16
[12];

10458 
__IO
 
uöt32_t
 
	mCH3_ADDR1
;

10459 
__IO
 
uöt32_t
 
	mCH3_ADDR1_SET
;

10460 
__IO
 
uöt32_t
 
	mCH3_ADDR1_CLR
;

10461 
__IO
 
uöt32_t
 
	mCH3_ADDR1_TOG
;

10462 
__IO
 
uöt32_t
 
	mCH3_DATA1
;

10463 
uöt8_t
 
	mRESERVED_17
[12];

10464 
__IO
 
uöt32_t
 
	mCH3_ADDR2
;

10465 
__IO
 
uöt32_t
 
	mCH3_ADDR2_SET
;

10466 
__IO
 
uöt32_t
 
	mCH3_ADDR2_CLR
;

10467 
__IO
 
uöt32_t
 
	mCH3_ADDR2_TOG
;

10468 
__IO
 
uöt32_t
 
	mCH3_DATA2
;

10469 
uöt8_t
 
	mRESERVED_18
[12];

10470 
__IO
 
uöt32_t
 
	mCH3_ADDR3
;

10471 
__IO
 
uöt32_t
 
	mCH3_ADDR3_SET
;

10472 
__IO
 
uöt32_t
 
	mCH3_ADDR3_CLR
;

10473 
__IO
 
uöt32_t
 
	mCH3_ADDR3_TOG
;

10474 
__IO
 
uöt32_t
 
	mCH3_DATA3
;

10475 
uöt8_t
 
	mRESERVED_19
[12];

10476 
__IO
 
uöt32_t
 
	mCH4_CTRL
;

10477 
__IO
 
uöt32_t
 
	mCH4_CTRL_SET
;

10478 
__IO
 
uöt32_t
 
	mCH4_CTRL_CLR
;

10479 
__IO
 
uöt32_t
 
	mCH4_CTRL_TOG
;

10480 
__IO
 
uöt32_t
 
	mCH4_ADDR0
;

10481 
__IO
 
uöt32_t
 
	mCH4_ADDR0_SET
;

10482 
__IO
 
uöt32_t
 
	mCH4_ADDR0_CLR
;

10483 
__IO
 
uöt32_t
 
	mCH4_ADDR0_TOG
;

10484 
__IO
 
uöt32_t
 
	mCH4_DATA0
;

10485 
uöt8_t
 
	mRESERVED_20
[12];

10486 
__IO
 
uöt32_t
 
	mCH4_ADDR1
;

10487 
__IO
 
uöt32_t
 
	mCH4_ADDR1_SET
;

10488 
__IO
 
uöt32_t
 
	mCH4_ADDR1_CLR
;

10489 
__IO
 
uöt32_t
 
	mCH4_ADDR1_TOG
;

10490 
__IO
 
uöt32_t
 
	mCH4_DATA1
;

10491 
uöt8_t
 
	mRESERVED_21
[12];

10492 
__IO
 
uöt32_t
 
	mCH4_ADDR2
;

10493 
__IO
 
uöt32_t
 
	mCH4_ADDR2_SET
;

10494 
__IO
 
uöt32_t
 
	mCH4_ADDR2_CLR
;

10495 
__IO
 
uöt32_t
 
	mCH4_ADDR2_TOG
;

10496 
__IO
 
uöt32_t
 
	mCH4_DATA2
;

10497 
uöt8_t
 
	mRESERVED_22
[12];

10498 
__IO
 
uöt32_t
 
	mCH4_ADDR3
;

10499 
__IO
 
uöt32_t
 
	mCH4_ADDR3_SET
;

10500 
__IO
 
uöt32_t
 
	mCH4_ADDR3_CLR
;

10501 
__IO
 
uöt32_t
 
	mCH4_ADDR3_TOG
;

10502 
__IO
 
uöt32_t
 
	mCH4_DATA3
;

10503 
uöt8_t
 
	mRESERVED_23
[12];

10504 
__IO
 
uöt32_t
 
	mCH5_CTRL
;

10505 
__IO
 
uöt32_t
 
	mCH5_CTRL_SET
;

10506 
__IO
 
uöt32_t
 
	mCH5_CTRL_CLR
;

10507 
__IO
 
uöt32_t
 
	mCH5_CTRL_TOG
;

10508 
__IO
 
uöt32_t
 
	mCH5_ADDR0
;

10509 
__IO
 
uöt32_t
 
	mCH5_ADDR0_SET
;

10510 
__IO
 
uöt32_t
 
	mCH5_ADDR0_CLR
;

10511 
__IO
 
uöt32_t
 
	mCH5_ADDR0_TOG
;

10512 
__IO
 
uöt32_t
 
	mCH5_DATA0
;

10513 
uöt8_t
 
	mRESERVED_24
[12];

10514 
__IO
 
uöt32_t
 
	mCH5_ADDR1
;

10515 
__IO
 
uöt32_t
 
	mCH5_ADDR1_SET
;

10516 
__IO
 
uöt32_t
 
	mCH5_ADDR1_CLR
;

10517 
__IO
 
uöt32_t
 
	mCH5_ADDR1_TOG
;

10518 
__IO
 
uöt32_t
 
	mCH5_DATA1
;

10519 
uöt8_t
 
	mRESERVED_25
[12];

10520 
__IO
 
uöt32_t
 
	mCH5_ADDR2
;

10521 
__IO
 
uöt32_t
 
	mCH5_ADDR2_SET
;

10522 
__IO
 
uöt32_t
 
	mCH5_ADDR2_CLR
;

10523 
__IO
 
uöt32_t
 
	mCH5_ADDR2_TOG
;

10524 
__IO
 
uöt32_t
 
	mCH5_DATA2
;

10525 
uöt8_t
 
	mRESERVED_26
[12];

10526 
__IO
 
uöt32_t
 
	mCH5_ADDR3
;

10527 
__IO
 
uöt32_t
 
	mCH5_ADDR3_SET
;

10528 
__IO
 
uöt32_t
 
	mCH5_ADDR3_CLR
;

10529 
__IO
 
uöt32_t
 
	mCH5_ADDR3_TOG
;

10530 
__IO
 
uöt32_t
 
	mCH5_DATA3
;

10531 
uöt8_t
 
	mRESERVED_27
[12];

10532 
__I
 
uöt32_t
 
	mDEBUG0
;

10533 
uöt8_t
 
	mRESERVED_28
[12];

10534 
__I
 
uöt32_t
 
	mDEBUG1
;

10535 
uöt8_t
 
	mRESERVED_29
[12];

10536 
__I
 
uöt32_t
 
	mVERSION
;

10537 } 
	tGIS_Ty≥
, *
	tGIS_MemM≠På
;

10549 
	#GIS_CTRL_REG
(
ba£
Ë((ba£)->
CTRL
)

	)

10550 
	#GIS_CTRL_SET_REG
(
ba£
Ë((ba£)->
CTRL_SET
)

	)

10551 
	#GIS_CTRL_CLR_REG
(
ba£
Ë((ba£)->
CTRL_CLR
)

	)

10552 
	#GIS_CTRL_TOG_REG
(
ba£
Ë((ba£)->
CTRL_TOG
)

	)

10553 
	#GIS_CONFIG0_REG
(
ba£
Ë((ba£)->
CONFIG0
)

	)

10554 
	#GIS_CONFIG0_SET_REG
(
ba£
Ë((ba£)->
CONFIG0_SET
)

	)

10555 
	#GIS_CONFIG0_CLR_REG
(
ba£
Ë((ba£)->
CONFIG0_CLR
)

	)

10556 
	#GIS_CONFIG0_TOG_REG
(
ba£
Ë((ba£)->
CONFIG0_TOG
)

	)

10557 
	#GIS_CONFIG1_REG
(
ba£
Ë((ba£)->
CONFIG1
)

	)

10558 
	#GIS_CONFIG1_SET_REG
(
ba£
Ë((ba£)->
CONFIG1_SET
)

	)

10559 
	#GIS_CONFIG1_CLR_REG
(
ba£
Ë((ba£)->
CONFIG1_CLR
)

	)

10560 
	#GIS_CONFIG1_TOG_REG
(
ba£
Ë((ba£)->
CONFIG1_TOG
)

	)

10561 
	#GIS_FB0_REG
(
ba£
Ë((ba£)->
FB0
)

	)

10562 
	#GIS_FB1_REG
(
ba£
Ë((ba£)->
FB1
)

	)

10563 
	#GIS_PXP_FB0_REG
(
ba£
Ë((ba£)->
PXP_FB0
)

	)

10564 
	#GIS_PXP_FB1_REG
(
ba£
Ë((ba£)->
PXP_FB1
)

	)

10565 
	#GIS_CH0_CTRL_REG
(
ba£
Ë((ba£)->
CH0_CTRL
)

	)

10566 
	#GIS_CH0_CTRL_SET_REG
(
ba£
Ë((ba£)->
CH0_CTRL_SET
)

	)

10567 
	#GIS_CH0_CTRL_CLR_REG
(
ba£
Ë((ba£)->
CH0_CTRL_CLR
)

	)

10568 
	#GIS_CH0_CTRL_TOG_REG
(
ba£
Ë((ba£)->
CH0_CTRL_TOG
)

	)

10569 
	#GIS_CH0_ADDR0_REG
(
ba£
Ë((ba£)->
CH0_ADDR0
)

	)

10570 
	#GIS_CH0_ADDR0_SET_REG
(
ba£
Ë((ba£)->
CH0_ADDR0_SET
)

	)

10571 
	#GIS_CH0_ADDR0_CLR_REG
(
ba£
Ë((ba£)->
CH0_ADDR0_CLR
)

	)

10572 
	#GIS_CH0_ADDR0_TOG_REG
(
ba£
Ë((ba£)->
CH0_ADDR0_TOG
)

	)

10573 
	#GIS_CH0_DATA0_REG
(
ba£
Ë((ba£)->
CH0_DATA0
)

	)

10574 
	#GIS_CH0_ADDR1_REG
(
ba£
Ë((ba£)->
CH0_ADDR1
)

	)

10575 
	#GIS_CH0_ADDR1_SET_REG
(
ba£
Ë((ba£)->
CH0_ADDR1_SET
)

	)

10576 
	#GIS_CH0_ADDR1_CLR_REG
(
ba£
Ë((ba£)->
CH0_ADDR1_CLR
)

	)

10577 
	#GIS_CH0_ADDR1_TOG_REG
(
ba£
Ë((ba£)->
CH0_ADDR1_TOG
)

	)

10578 
	#GIS_CH0_DATA1_REG
(
ba£
Ë((ba£)->
CH0_DATA1
)

	)

10579 
	#GIS_CH0_ADDR2_REG
(
ba£
Ë((ba£)->
CH0_ADDR2
)

	)

10580 
	#GIS_CH0_ADDR2_SET_REG
(
ba£
Ë((ba£)->
CH0_ADDR2_SET
)

	)

10581 
	#GIS_CH0_ADDR2_CLR_REG
(
ba£
Ë((ba£)->
CH0_ADDR2_CLR
)

	)

10582 
	#GIS_CH0_ADDR2_TOG_REG
(
ba£
Ë((ba£)->
CH0_ADDR2_TOG
)

	)

10583 
	#GIS_CH0_DATA2_REG
(
ba£
Ë((ba£)->
CH0_DATA2
)

	)

10584 
	#GIS_CH0_ADDR3_REG
(
ba£
Ë((ba£)->
CH0_ADDR3
)

	)

10585 
	#GIS_CH0_ADDR3_SET_REG
(
ba£
Ë((ba£)->
CH0_ADDR3_SET
)

	)

10586 
	#GIS_CH0_ADDR3_CLR_REG
(
ba£
Ë((ba£)->
CH0_ADDR3_CLR
)

	)

10587 
	#GIS_CH0_ADDR3_TOG_REG
(
ba£
Ë((ba£)->
CH0_ADDR3_TOG
)

	)

10588 
	#GIS_CH0_DATA3_REG
(
ba£
Ë((ba£)->
CH0_DATA3
)

	)

10589 
	#GIS_CH1_CTRL_REG
(
ba£
Ë((ba£)->
CH1_CTRL
)

	)

10590 
	#GIS_CH1_CTRL_SET_REG
(
ba£
Ë((ba£)->
CH1_CTRL_SET
)

	)

10591 
	#GIS_CH1_CTRL_CLR_REG
(
ba£
Ë((ba£)->
CH1_CTRL_CLR
)

	)

10592 
	#GIS_CH1_CTRL_TOG_REG
(
ba£
Ë((ba£)->
CH1_CTRL_TOG
)

	)

10593 
	#GIS_CH1_ADDR0_REG
(
ba£
Ë((ba£)->
CH1_ADDR0
)

	)

10594 
	#GIS_CH1_ADDR0_SET_REG
(
ba£
Ë((ba£)->
CH1_ADDR0_SET
)

	)

10595 
	#GIS_CH1_ADDR0_CLR_REG
(
ba£
Ë((ba£)->
CH1_ADDR0_CLR
)

	)

10596 
	#GIS_CH1_ADDR0_TOG_REG
(
ba£
Ë((ba£)->
CH1_ADDR0_TOG
)

	)

10597 
	#GIS_CH1_DATA0_REG
(
ba£
Ë((ba£)->
CH1_DATA0
)

	)

10598 
	#GIS_CH1_ADDR1_REG
(
ba£
Ë((ba£)->
CH1_ADDR1
)

	)

10599 
	#GIS_CH1_ADDR1_SET_REG
(
ba£
Ë((ba£)->
CH1_ADDR1_SET
)

	)

10600 
	#GIS_CH1_ADDR1_CLR_REG
(
ba£
Ë((ba£)->
CH1_ADDR1_CLR
)

	)

10601 
	#GIS_CH1_ADDR1_TOG_REG
(
ba£
Ë((ba£)->
CH1_ADDR1_TOG
)

	)

10602 
	#GIS_CH1_DATA1_REG
(
ba£
Ë((ba£)->
CH1_DATA1
)

	)

10603 
	#GIS_CH1_ADDR2_REG
(
ba£
Ë((ba£)->
CH1_ADDR2
)

	)

10604 
	#GIS_CH1_ADDR2_SET_REG
(
ba£
Ë((ba£)->
CH1_ADDR2_SET
)

	)

10605 
	#GIS_CH1_ADDR2_CLR_REG
(
ba£
Ë((ba£)->
CH1_ADDR2_CLR
)

	)

10606 
	#GIS_CH1_ADDR2_TOG_REG
(
ba£
Ë((ba£)->
CH1_ADDR2_TOG
)

	)

10607 
	#GIS_CH1_DATA2_REG
(
ba£
Ë((ba£)->
CH1_DATA2
)

	)

10608 
	#GIS_CH1_ADDR3_REG
(
ba£
Ë((ba£)->
CH1_ADDR3
)

	)

10609 
	#GIS_CH1_ADDR3_SET_REG
(
ba£
Ë((ba£)->
CH1_ADDR3_SET
)

	)

10610 
	#GIS_CH1_ADDR3_CLR_REG
(
ba£
Ë((ba£)->
CH1_ADDR3_CLR
)

	)

10611 
	#GIS_CH1_ADDR3_TOG_REG
(
ba£
Ë((ba£)->
CH1_ADDR3_TOG
)

	)

10612 
	#GIS_CH1_DATA3_REG
(
ba£
Ë((ba£)->
CH1_DATA3
)

	)

10613 
	#GIS_CH2_CTRL_REG
(
ba£
Ë((ba£)->
CH2_CTRL
)

	)

10614 
	#GIS_CH2_CTRL_SET_REG
(
ba£
Ë((ba£)->
CH2_CTRL_SET
)

	)

10615 
	#GIS_CH2_CTRL_CLR_REG
(
ba£
Ë((ba£)->
CH2_CTRL_CLR
)

	)

10616 
	#GIS_CH2_CTRL_TOG_REG
(
ba£
Ë((ba£)->
CH2_CTRL_TOG
)

	)

10617 
	#GIS_CH2_ADDR0_REG
(
ba£
Ë((ba£)->
CH2_ADDR0
)

	)

10618 
	#GIS_CH2_ADDR0_SET_REG
(
ba£
Ë((ba£)->
CH2_ADDR0_SET
)

	)

10619 
	#GIS_CH2_ADDR0_CLR_REG
(
ba£
Ë((ba£)->
CH2_ADDR0_CLR
)

	)

10620 
	#GIS_CH2_ADDR0_TOG_REG
(
ba£
Ë((ba£)->
CH2_ADDR0_TOG
)

	)

10621 
	#GIS_CH2_DATA0_REG
(
ba£
Ë((ba£)->
CH2_DATA0
)

	)

10622 
	#GIS_CH2_ADDR1_REG
(
ba£
Ë((ba£)->
CH2_ADDR1
)

	)

10623 
	#GIS_CH2_ADDR1_SET_REG
(
ba£
Ë((ba£)->
CH2_ADDR1_SET
)

	)

10624 
	#GIS_CH2_ADDR1_CLR_REG
(
ba£
Ë((ba£)->
CH2_ADDR1_CLR
)

	)

10625 
	#GIS_CH2_ADDR1_TOG_REG
(
ba£
Ë((ba£)->
CH2_ADDR1_TOG
)

	)

10626 
	#GIS_CH2_DATA1_REG
(
ba£
Ë((ba£)->
CH2_DATA1
)

	)

10627 
	#GIS_CH2_ADDR2_REG
(
ba£
Ë((ba£)->
CH2_ADDR2
)

	)

10628 
	#GIS_CH2_ADDR2_SET_REG
(
ba£
Ë((ba£)->
CH2_ADDR2_SET
)

	)

10629 
	#GIS_CH2_ADDR2_CLR_REG
(
ba£
Ë((ba£)->
CH2_ADDR2_CLR
)

	)

10630 
	#GIS_CH2_ADDR2_TOG_REG
(
ba£
Ë((ba£)->
CH2_ADDR2_TOG
)

	)

10631 
	#GIS_CH2_DATA2_REG
(
ba£
Ë((ba£)->
CH2_DATA2
)

	)

10632 
	#GIS_CH2_ADDR3_REG
(
ba£
Ë((ba£)->
CH2_ADDR3
)

	)

10633 
	#GIS_CH2_ADDR3_SET_REG
(
ba£
Ë((ba£)->
CH2_ADDR3_SET
)

	)

10634 
	#GIS_CH2_ADDR3_CLR_REG
(
ba£
Ë((ba£)->
CH2_ADDR3_CLR
)

	)

10635 
	#GIS_CH2_ADDR3_TOG_REG
(
ba£
Ë((ba£)->
CH2_ADDR3_TOG
)

	)

10636 
	#GIS_CH2_DATA3_REG
(
ba£
Ë((ba£)->
CH2_DATA3
)

	)

10637 
	#GIS_CH3_CTRL_REG
(
ba£
Ë((ba£)->
CH3_CTRL
)

	)

10638 
	#GIS_CH3_CTRL_SET_REG
(
ba£
Ë((ba£)->
CH3_CTRL_SET
)

	)

10639 
	#GIS_CH3_CTRL_CLR_REG
(
ba£
Ë((ba£)->
CH3_CTRL_CLR
)

	)

10640 
	#GIS_CH3_CTRL_TOG_REG
(
ba£
Ë((ba£)->
CH3_CTRL_TOG
)

	)

10641 
	#GIS_CH3_ADDR0_REG
(
ba£
Ë((ba£)->
CH3_ADDR0
)

	)

10642 
	#GIS_CH3_ADDR0_SET_REG
(
ba£
Ë((ba£)->
CH3_ADDR0_SET
)

	)

10643 
	#GIS_CH3_ADDR0_CLR_REG
(
ba£
Ë((ba£)->
CH3_ADDR0_CLR
)

	)

10644 
	#GIS_CH3_ADDR0_TOG_REG
(
ba£
Ë((ba£)->
CH3_ADDR0_TOG
)

	)

10645 
	#GIS_CH3_DATA0_REG
(
ba£
Ë((ba£)->
CH3_DATA0
)

	)

10646 
	#GIS_CH3_ADDR1_REG
(
ba£
Ë((ba£)->
CH3_ADDR1
)

	)

10647 
	#GIS_CH3_ADDR1_SET_REG
(
ba£
Ë((ba£)->
CH3_ADDR1_SET
)

	)

10648 
	#GIS_CH3_ADDR1_CLR_REG
(
ba£
Ë((ba£)->
CH3_ADDR1_CLR
)

	)

10649 
	#GIS_CH3_ADDR1_TOG_REG
(
ba£
Ë((ba£)->
CH3_ADDR1_TOG
)

	)

10650 
	#GIS_CH3_DATA1_REG
(
ba£
Ë((ba£)->
CH3_DATA1
)

	)

10651 
	#GIS_CH3_ADDR2_REG
(
ba£
Ë((ba£)->
CH3_ADDR2
)

	)

10652 
	#GIS_CH3_ADDR2_SET_REG
(
ba£
Ë((ba£)->
CH3_ADDR2_SET
)

	)

10653 
	#GIS_CH3_ADDR2_CLR_REG
(
ba£
Ë((ba£)->
CH3_ADDR2_CLR
)

	)

10654 
	#GIS_CH3_ADDR2_TOG_REG
(
ba£
Ë((ba£)->
CH3_ADDR2_TOG
)

	)

10655 
	#GIS_CH3_DATA2_REG
(
ba£
Ë((ba£)->
CH3_DATA2
)

	)

10656 
	#GIS_CH3_ADDR3_REG
(
ba£
Ë((ba£)->
CH3_ADDR3
)

	)

10657 
	#GIS_CH3_ADDR3_SET_REG
(
ba£
Ë((ba£)->
CH3_ADDR3_SET
)

	)

10658 
	#GIS_CH3_ADDR3_CLR_REG
(
ba£
Ë((ba£)->
CH3_ADDR3_CLR
)

	)

10659 
	#GIS_CH3_ADDR3_TOG_REG
(
ba£
Ë((ba£)->
CH3_ADDR3_TOG
)

	)

10660 
	#GIS_CH3_DATA3_REG
(
ba£
Ë((ba£)->
CH3_DATA3
)

	)

10661 
	#GIS_CH4_CTRL_REG
(
ba£
Ë((ba£)->
CH4_CTRL
)

	)

10662 
	#GIS_CH4_CTRL_SET_REG
(
ba£
Ë((ba£)->
CH4_CTRL_SET
)

	)

10663 
	#GIS_CH4_CTRL_CLR_REG
(
ba£
Ë((ba£)->
CH4_CTRL_CLR
)

	)

10664 
	#GIS_CH4_CTRL_TOG_REG
(
ba£
Ë((ba£)->
CH4_CTRL_TOG
)

	)

10665 
	#GIS_CH4_ADDR0_REG
(
ba£
Ë((ba£)->
CH4_ADDR0
)

	)

10666 
	#GIS_CH4_ADDR0_SET_REG
(
ba£
Ë((ba£)->
CH4_ADDR0_SET
)

	)

10667 
	#GIS_CH4_ADDR0_CLR_REG
(
ba£
Ë((ba£)->
CH4_ADDR0_CLR
)

	)

10668 
	#GIS_CH4_ADDR0_TOG_REG
(
ba£
Ë((ba£)->
CH4_ADDR0_TOG
)

	)

10669 
	#GIS_CH4_DATA0_REG
(
ba£
Ë((ba£)->
CH4_DATA0
)

	)

10670 
	#GIS_CH4_ADDR1_REG
(
ba£
Ë((ba£)->
CH4_ADDR1
)

	)

10671 
	#GIS_CH4_ADDR1_SET_REG
(
ba£
Ë((ba£)->
CH4_ADDR1_SET
)

	)

10672 
	#GIS_CH4_ADDR1_CLR_REG
(
ba£
Ë((ba£)->
CH4_ADDR1_CLR
)

	)

10673 
	#GIS_CH4_ADDR1_TOG_REG
(
ba£
Ë((ba£)->
CH4_ADDR1_TOG
)

	)

10674 
	#GIS_CH4_DATA1_REG
(
ba£
Ë((ba£)->
CH4_DATA1
)

	)

10675 
	#GIS_CH4_ADDR2_REG
(
ba£
Ë((ba£)->
CH4_ADDR2
)

	)

10676 
	#GIS_CH4_ADDR2_SET_REG
(
ba£
Ë((ba£)->
CH4_ADDR2_SET
)

	)

10677 
	#GIS_CH4_ADDR2_CLR_REG
(
ba£
Ë((ba£)->
CH4_ADDR2_CLR
)

	)

10678 
	#GIS_CH4_ADDR2_TOG_REG
(
ba£
Ë((ba£)->
CH4_ADDR2_TOG
)

	)

10679 
	#GIS_CH4_DATA2_REG
(
ba£
Ë((ba£)->
CH4_DATA2
)

	)

10680 
	#GIS_CH4_ADDR3_REG
(
ba£
Ë((ba£)->
CH4_ADDR3
)

	)

10681 
	#GIS_CH4_ADDR3_SET_REG
(
ba£
Ë((ba£)->
CH4_ADDR3_SET
)

	)

10682 
	#GIS_CH4_ADDR3_CLR_REG
(
ba£
Ë((ba£)->
CH4_ADDR3_CLR
)

	)

10683 
	#GIS_CH4_ADDR3_TOG_REG
(
ba£
Ë((ba£)->
CH4_ADDR3_TOG
)

	)

10684 
	#GIS_CH4_DATA3_REG
(
ba£
Ë((ba£)->
CH4_DATA3
)

	)

10685 
	#GIS_CH5_CTRL_REG
(
ba£
Ë((ba£)->
CH5_CTRL
)

	)

10686 
	#GIS_CH5_CTRL_SET_REG
(
ba£
Ë((ba£)->
CH5_CTRL_SET
)

	)

10687 
	#GIS_CH5_CTRL_CLR_REG
(
ba£
Ë((ba£)->
CH5_CTRL_CLR
)

	)

10688 
	#GIS_CH5_CTRL_TOG_REG
(
ba£
Ë((ba£)->
CH5_CTRL_TOG
)

	)

10689 
	#GIS_CH5_ADDR0_REG
(
ba£
Ë((ba£)->
CH5_ADDR0
)

	)

10690 
	#GIS_CH5_ADDR0_SET_REG
(
ba£
Ë((ba£)->
CH5_ADDR0_SET
)

	)

10691 
	#GIS_CH5_ADDR0_CLR_REG
(
ba£
Ë((ba£)->
CH5_ADDR0_CLR
)

	)

10692 
	#GIS_CH5_ADDR0_TOG_REG
(
ba£
Ë((ba£)->
CH5_ADDR0_TOG
)

	)

10693 
	#GIS_CH5_DATA0_REG
(
ba£
Ë((ba£)->
CH5_DATA0
)

	)

10694 
	#GIS_CH5_ADDR1_REG
(
ba£
Ë((ba£)->
CH5_ADDR1
)

	)

10695 
	#GIS_CH5_ADDR1_SET_REG
(
ba£
Ë((ba£)->
CH5_ADDR1_SET
)

	)

10696 
	#GIS_CH5_ADDR1_CLR_REG
(
ba£
Ë((ba£)->
CH5_ADDR1_CLR
)

	)

10697 
	#GIS_CH5_ADDR1_TOG_REG
(
ba£
Ë((ba£)->
CH5_ADDR1_TOG
)

	)

10698 
	#GIS_CH5_DATA1_REG
(
ba£
Ë((ba£)->
CH5_DATA1
)

	)

10699 
	#GIS_CH5_ADDR2_REG
(
ba£
Ë((ba£)->
CH5_ADDR2
)

	)

10700 
	#GIS_CH5_ADDR2_SET_REG
(
ba£
Ë((ba£)->
CH5_ADDR2_SET
)

	)

10701 
	#GIS_CH5_ADDR2_CLR_REG
(
ba£
Ë((ba£)->
CH5_ADDR2_CLR
)

	)

10702 
	#GIS_CH5_ADDR2_TOG_REG
(
ba£
Ë((ba£)->
CH5_ADDR2_TOG
)

	)

10703 
	#GIS_CH5_DATA2_REG
(
ba£
Ë((ba£)->
CH5_DATA2
)

	)

10704 
	#GIS_CH5_ADDR3_REG
(
ba£
Ë((ba£)->
CH5_ADDR3
)

	)

10705 
	#GIS_CH5_ADDR3_SET_REG
(
ba£
Ë((ba£)->
CH5_ADDR3_SET
)

	)

10706 
	#GIS_CH5_ADDR3_CLR_REG
(
ba£
Ë((ba£)->
CH5_ADDR3_CLR
)

	)

10707 
	#GIS_CH5_ADDR3_TOG_REG
(
ba£
Ë((ba£)->
CH5_ADDR3_TOG
)

	)

10708 
	#GIS_CH5_DATA3_REG
(
ba£
Ë((ba£)->
CH5_DATA3
)

	)

10709 
	#GIS_DEBUG0_REG
(
ba£
Ë((ba£)->
DEBUG0
)

	)

10710 
	#GIS_DEBUG1_REG
(
ba£
Ë((ba£)->
DEBUG1
)

	)

10711 
	#GIS_VERSION_REG
(
ba£
Ë((ba£)->
VERSION
)

	)

10727 
	#GIS_CTRL_ENABLE_MASK
 0x1u

	)

10728 
	#GIS_CTRL_ENABLE_SHIFT
 0

	)

10729 
	#GIS_CTRL_FB_START_MASK
 0x2u

	)

10730 
	#GIS_CTRL_FB_START_SHIFT
 1

	)

10731 
	#GIS_CTRL_LCDIF_SEL_MASK
 0x4u

	)

10732 
	#GIS_CTRL_LCDIF_SEL_SHIFT
 2

	)

10733 
	#GIS_CTRL_CSI_SEL_MASK
 0x8u

	)

10734 
	#GIS_CTRL_CSI_SEL_SHIFT
 3

	)

10735 
	#GIS_CTRL_CSI0_IRQ_POLARITY_MASK
 0x10u

	)

10736 
	#GIS_CTRL_CSI0_IRQ_POLARITY_SHIFT
 4

	)

10737 
	#GIS_CTRL_CSI1_IRQ_POLARITY_MASK
 0x20u

	)

10738 
	#GIS_CTRL_CSI1_IRQ_POLARITY_SHIFT
 5

	)

10739 
	#GIS_CTRL_PXP_IRQ_POLARITY_MASK
 0x40u

	)

10740 
	#GIS_CTRL_PXP_IRQ_POLARITY_SHIFT
 6

	)

10741 
	#GIS_CTRL_LCDIF0_IRQ_POLARITY_MASK
 0x80u

	)

10742 
	#GIS_CTRL_LCDIF0_IRQ_POLARITY_SHIFT
 7

	)

10743 
	#GIS_CTRL_LCDIF1_IRQ_POLARITY_MASK
 0x100u

	)

10744 
	#GIS_CTRL_LCDIF1_IRQ_POLARITY_SHIFT
 8

	)

10745 
	#GIS_CTRL_CLKGATE_MASK
 0x40000000u

	)

10746 
	#GIS_CTRL_CLKGATE_SHIFT
 30

	)

10747 
	#GIS_CTRL_SFTRST_MASK
 0x80000000u

	)

10748 
	#GIS_CTRL_SFTRST_SHIFT
 31

	)

10750 
	#GIS_CTRL_SET_ENABLE_MASK
 0x1u

	)

10751 
	#GIS_CTRL_SET_ENABLE_SHIFT
 0

	)

10752 
	#GIS_CTRL_SET_FB_START_MASK
 0x2u

	)

10753 
	#GIS_CTRL_SET_FB_START_SHIFT
 1

	)

10754 
	#GIS_CTRL_SET_LCDIF_SEL_MASK
 0x4u

	)

10755 
	#GIS_CTRL_SET_LCDIF_SEL_SHIFT
 2

	)

10756 
	#GIS_CTRL_SET_CSI_SEL_MASK
 0x8u

	)

10757 
	#GIS_CTRL_SET_CSI_SEL_SHIFT
 3

	)

10758 
	#GIS_CTRL_SET_CSI0_IRQ_POLARITY_MASK
 0x10u

	)

10759 
	#GIS_CTRL_SET_CSI0_IRQ_POLARITY_SHIFT
 4

	)

10760 
	#GIS_CTRL_SET_CSI1_IRQ_POLARITY_MASK
 0x20u

	)

10761 
	#GIS_CTRL_SET_CSI1_IRQ_POLARITY_SHIFT
 5

	)

10762 
	#GIS_CTRL_SET_PXP_IRQ_POLARITY_MASK
 0x40u

	)

10763 
	#GIS_CTRL_SET_PXP_IRQ_POLARITY_SHIFT
 6

	)

10764 
	#GIS_CTRL_SET_LCDIF0_IRQ_POLARITY_MASK
 0x80u

	)

10765 
	#GIS_CTRL_SET_LCDIF0_IRQ_POLARITY_SHIFT
 7

	)

10766 
	#GIS_CTRL_SET_LCDIF1_IRQ_POLARITY_MASK
 0x100u

	)

10767 
	#GIS_CTRL_SET_LCDIF1_IRQ_POLARITY_SHIFT
 8

	)

10768 
	#GIS_CTRL_SET_CLKGATE_MASK
 0x40000000u

	)

10769 
	#GIS_CTRL_SET_CLKGATE_SHIFT
 30

	)

10770 
	#GIS_CTRL_SET_SFTRST_MASK
 0x80000000u

	)

10771 
	#GIS_CTRL_SET_SFTRST_SHIFT
 31

	)

10773 
	#GIS_CTRL_CLR_ENABLE_MASK
 0x1u

	)

10774 
	#GIS_CTRL_CLR_ENABLE_SHIFT
 0

	)

10775 
	#GIS_CTRL_CLR_FB_START_MASK
 0x2u

	)

10776 
	#GIS_CTRL_CLR_FB_START_SHIFT
 1

	)

10777 
	#GIS_CTRL_CLR_LCDIF_SEL_MASK
 0x4u

	)

10778 
	#GIS_CTRL_CLR_LCDIF_SEL_SHIFT
 2

	)

10779 
	#GIS_CTRL_CLR_CSI_SEL_MASK
 0x8u

	)

10780 
	#GIS_CTRL_CLR_CSI_SEL_SHIFT
 3

	)

10781 
	#GIS_CTRL_CLR_CSI0_IRQ_POLARITY_MASK
 0x10u

	)

10782 
	#GIS_CTRL_CLR_CSI0_IRQ_POLARITY_SHIFT
 4

	)

10783 
	#GIS_CTRL_CLR_CSI1_IRQ_POLARITY_MASK
 0x20u

	)

10784 
	#GIS_CTRL_CLR_CSI1_IRQ_POLARITY_SHIFT
 5

	)

10785 
	#GIS_CTRL_CLR_PXP_IRQ_POLARITY_MASK
 0x40u

	)

10786 
	#GIS_CTRL_CLR_PXP_IRQ_POLARITY_SHIFT
 6

	)

10787 
	#GIS_CTRL_CLR_LCDIF0_IRQ_POLARITY_MASK
 0x80u

	)

10788 
	#GIS_CTRL_CLR_LCDIF0_IRQ_POLARITY_SHIFT
 7

	)

10789 
	#GIS_CTRL_CLR_LCDIF1_IRQ_POLARITY_MASK
 0x100u

	)

10790 
	#GIS_CTRL_CLR_LCDIF1_IRQ_POLARITY_SHIFT
 8

	)

10791 
	#GIS_CTRL_CLR_CLKGATE_MASK
 0x40000000u

	)

10792 
	#GIS_CTRL_CLR_CLKGATE_SHIFT
 30

	)

10793 
	#GIS_CTRL_CLR_SFTRST_MASK
 0x80000000u

	)

10794 
	#GIS_CTRL_CLR_SFTRST_SHIFT
 31

	)

10796 
	#GIS_CTRL_TOG_ENABLE_MASK
 0x1u

	)

10797 
	#GIS_CTRL_TOG_ENABLE_SHIFT
 0

	)

10798 
	#GIS_CTRL_TOG_FB_START_MASK
 0x2u

	)

10799 
	#GIS_CTRL_TOG_FB_START_SHIFT
 1

	)

10800 
	#GIS_CTRL_TOG_LCDIF_SEL_MASK
 0x4u

	)

10801 
	#GIS_CTRL_TOG_LCDIF_SEL_SHIFT
 2

	)

10802 
	#GIS_CTRL_TOG_CSI_SEL_MASK
 0x8u

	)

10803 
	#GIS_CTRL_TOG_CSI_SEL_SHIFT
 3

	)

10804 
	#GIS_CTRL_TOG_CSI0_IRQ_POLARITY_MASK
 0x10u

	)

10805 
	#GIS_CTRL_TOG_CSI0_IRQ_POLARITY_SHIFT
 4

	)

10806 
	#GIS_CTRL_TOG_CSI1_IRQ_POLARITY_MASK
 0x20u

	)

10807 
	#GIS_CTRL_TOG_CSI1_IRQ_POLARITY_SHIFT
 5

	)

10808 
	#GIS_CTRL_TOG_PXP_IRQ_POLARITY_MASK
 0x40u

	)

10809 
	#GIS_CTRL_TOG_PXP_IRQ_POLARITY_SHIFT
 6

	)

10810 
	#GIS_CTRL_TOG_LCDIF0_IRQ_POLARITY_MASK
 0x80u

	)

10811 
	#GIS_CTRL_TOG_LCDIF0_IRQ_POLARITY_SHIFT
 7

	)

10812 
	#GIS_CTRL_TOG_LCDIF1_IRQ_POLARITY_MASK
 0x100u

	)

10813 
	#GIS_CTRL_TOG_LCDIF1_IRQ_POLARITY_SHIFT
 8

	)

10814 
	#GIS_CTRL_TOG_CLKGATE_MASK
 0x40000000u

	)

10815 
	#GIS_CTRL_TOG_CLKGATE_SHIFT
 30

	)

10816 
	#GIS_CTRL_TOG_SFTRST_MASK
 0x80000000u

	)

10817 
	#GIS_CTRL_TOG_SFTRST_SHIFT
 31

	)

10819 
	#GIS_CONFIG0_CH0_MAPPING_MASK
 0x7u

	)

10820 
	#GIS_CONFIG0_CH0_MAPPING_SHIFT
 0

	)

10821 
	#GIS_CONFIG0_CH0_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_CH0_MAPPING_SHIFT
))&
GIS_CONFIG0_CH0_MAPPING_MASK
)

	)

10822 
	#GIS_CONFIG0_CH0_NUM_MASK
 0x38u

	)

10823 
	#GIS_CONFIG0_CH0_NUM_SHIFT
 3

	)

10824 
	#GIS_CONFIG0_CH0_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_CH0_NUM_SHIFT
))&
GIS_CONFIG0_CH0_NUM_MASK
)

	)

10825 
	#GIS_CONFIG0_CH1_MAPPING_MASK
 0x700u

	)

10826 
	#GIS_CONFIG0_CH1_MAPPING_SHIFT
 8

	)

10827 
	#GIS_CONFIG0_CH1_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_CH1_MAPPING_SHIFT
))&
GIS_CONFIG0_CH1_MAPPING_MASK
)

	)

10828 
	#GIS_CONFIG0_CH1_NUM_MASK
 0x3800u

	)

10829 
	#GIS_CONFIG0_CH1_NUM_SHIFT
 11

	)

10830 
	#GIS_CONFIG0_CH1_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_CH1_NUM_SHIFT
))&
GIS_CONFIG0_CH1_NUM_MASK
)

	)

10831 
	#GIS_CONFIG0_CH2_MAPPING_MASK
 0x70000u

	)

10832 
	#GIS_CONFIG0_CH2_MAPPING_SHIFT
 16

	)

10833 
	#GIS_CONFIG0_CH2_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_CH2_MAPPING_SHIFT
))&
GIS_CONFIG0_CH2_MAPPING_MASK
)

	)

10834 
	#GIS_CONFIG0_CH2_NUM_MASK
 0x380000u

	)

10835 
	#GIS_CONFIG0_CH2_NUM_SHIFT
 19

	)

10836 
	#GIS_CONFIG0_CH2_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_CH2_NUM_SHIFT
))&
GIS_CONFIG0_CH2_NUM_MASK
)

	)

10837 
	#GIS_CONFIG0_CH3_MAPPING_MASK
 0x7000000u

	)

10838 
	#GIS_CONFIG0_CH3_MAPPING_SHIFT
 24

	)

10839 
	#GIS_CONFIG0_CH3_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_CH3_MAPPING_SHIFT
))&
GIS_CONFIG0_CH3_MAPPING_MASK
)

	)

10840 
	#GIS_CONFIG0_CH3_NUM_MASK
 0x38000000u

	)

10841 
	#GIS_CONFIG0_CH3_NUM_SHIFT
 27

	)

10842 
	#GIS_CONFIG0_CH3_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_CH3_NUM_SHIFT
))&
GIS_CONFIG0_CH3_NUM_MASK
)

	)

10844 
	#GIS_CONFIG0_SET_CH0_MAPPING_MASK
 0x7u

	)

10845 
	#GIS_CONFIG0_SET_CH0_MAPPING_SHIFT
 0

	)

10846 
	#GIS_CONFIG0_SET_CH0_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_SET_CH0_MAPPING_SHIFT
))&
GIS_CONFIG0_SET_CH0_MAPPING_MASK
)

	)

10847 
	#GIS_CONFIG0_SET_CH0_NUM_MASK
 0x38u

	)

10848 
	#GIS_CONFIG0_SET_CH0_NUM_SHIFT
 3

	)

10849 
	#GIS_CONFIG0_SET_CH0_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_SET_CH0_NUM_SHIFT
))&
GIS_CONFIG0_SET_CH0_NUM_MASK
)

	)

10850 
	#GIS_CONFIG0_SET_CH1_MAPPING_MASK
 0x700u

	)

10851 
	#GIS_CONFIG0_SET_CH1_MAPPING_SHIFT
 8

	)

10852 
	#GIS_CONFIG0_SET_CH1_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_SET_CH1_MAPPING_SHIFT
))&
GIS_CONFIG0_SET_CH1_MAPPING_MASK
)

	)

10853 
	#GIS_CONFIG0_SET_CH1_NUM_MASK
 0x3800u

	)

10854 
	#GIS_CONFIG0_SET_CH1_NUM_SHIFT
 11

	)

10855 
	#GIS_CONFIG0_SET_CH1_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_SET_CH1_NUM_SHIFT
))&
GIS_CONFIG0_SET_CH1_NUM_MASK
)

	)

10856 
	#GIS_CONFIG0_SET_CH2_MAPPING_MASK
 0x70000u

	)

10857 
	#GIS_CONFIG0_SET_CH2_MAPPING_SHIFT
 16

	)

10858 
	#GIS_CONFIG0_SET_CH2_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_SET_CH2_MAPPING_SHIFT
))&
GIS_CONFIG0_SET_CH2_MAPPING_MASK
)

	)

10859 
	#GIS_CONFIG0_SET_CH2_NUM_MASK
 0x380000u

	)

10860 
	#GIS_CONFIG0_SET_CH2_NUM_SHIFT
 19

	)

10861 
	#GIS_CONFIG0_SET_CH2_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_SET_CH2_NUM_SHIFT
))&
GIS_CONFIG0_SET_CH2_NUM_MASK
)

	)

10862 
	#GIS_CONFIG0_SET_CH3_MAPPING_MASK
 0x7000000u

	)

10863 
	#GIS_CONFIG0_SET_CH3_MAPPING_SHIFT
 24

	)

10864 
	#GIS_CONFIG0_SET_CH3_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_SET_CH3_MAPPING_SHIFT
))&
GIS_CONFIG0_SET_CH3_MAPPING_MASK
)

	)

10865 
	#GIS_CONFIG0_SET_CH3_NUM_MASK
 0x38000000u

	)

10866 
	#GIS_CONFIG0_SET_CH3_NUM_SHIFT
 27

	)

10867 
	#GIS_CONFIG0_SET_CH3_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_SET_CH3_NUM_SHIFT
))&
GIS_CONFIG0_SET_CH3_NUM_MASK
)

	)

10869 
	#GIS_CONFIG0_CLR_CH0_MAPPING_MASK
 0x7u

	)

10870 
	#GIS_CONFIG0_CLR_CH0_MAPPING_SHIFT
 0

	)

10871 
	#GIS_CONFIG0_CLR_CH0_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_CLR_CH0_MAPPING_SHIFT
))&
GIS_CONFIG0_CLR_CH0_MAPPING_MASK
)

	)

10872 
	#GIS_CONFIG0_CLR_CH0_NUM_MASK
 0x38u

	)

10873 
	#GIS_CONFIG0_CLR_CH0_NUM_SHIFT
 3

	)

10874 
	#GIS_CONFIG0_CLR_CH0_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_CLR_CH0_NUM_SHIFT
))&
GIS_CONFIG0_CLR_CH0_NUM_MASK
)

	)

10875 
	#GIS_CONFIG0_CLR_CH1_MAPPING_MASK
 0x700u

	)

10876 
	#GIS_CONFIG0_CLR_CH1_MAPPING_SHIFT
 8

	)

10877 
	#GIS_CONFIG0_CLR_CH1_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_CLR_CH1_MAPPING_SHIFT
))&
GIS_CONFIG0_CLR_CH1_MAPPING_MASK
)

	)

10878 
	#GIS_CONFIG0_CLR_CH1_NUM_MASK
 0x3800u

	)

10879 
	#GIS_CONFIG0_CLR_CH1_NUM_SHIFT
 11

	)

10880 
	#GIS_CONFIG0_CLR_CH1_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_CLR_CH1_NUM_SHIFT
))&
GIS_CONFIG0_CLR_CH1_NUM_MASK
)

	)

10881 
	#GIS_CONFIG0_CLR_CH2_MAPPING_MASK
 0x70000u

	)

10882 
	#GIS_CONFIG0_CLR_CH2_MAPPING_SHIFT
 16

	)

10883 
	#GIS_CONFIG0_CLR_CH2_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_CLR_CH2_MAPPING_SHIFT
))&
GIS_CONFIG0_CLR_CH2_MAPPING_MASK
)

	)

10884 
	#GIS_CONFIG0_CLR_CH2_NUM_MASK
 0x380000u

	)

10885 
	#GIS_CONFIG0_CLR_CH2_NUM_SHIFT
 19

	)

10886 
	#GIS_CONFIG0_CLR_CH2_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_CLR_CH2_NUM_SHIFT
))&
GIS_CONFIG0_CLR_CH2_NUM_MASK
)

	)

10887 
	#GIS_CONFIG0_CLR_CH3_MAPPING_MASK
 0x7000000u

	)

10888 
	#GIS_CONFIG0_CLR_CH3_MAPPING_SHIFT
 24

	)

10889 
	#GIS_CONFIG0_CLR_CH3_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_CLR_CH3_MAPPING_SHIFT
))&
GIS_CONFIG0_CLR_CH3_MAPPING_MASK
)

	)

10890 
	#GIS_CONFIG0_CLR_CH3_NUM_MASK
 0x38000000u

	)

10891 
	#GIS_CONFIG0_CLR_CH3_NUM_SHIFT
 27

	)

10892 
	#GIS_CONFIG0_CLR_CH3_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_CLR_CH3_NUM_SHIFT
))&
GIS_CONFIG0_CLR_CH3_NUM_MASK
)

	)

10894 
	#GIS_CONFIG0_TOG_CH0_MAPPING_MASK
 0x7u

	)

10895 
	#GIS_CONFIG0_TOG_CH0_MAPPING_SHIFT
 0

	)

10896 
	#GIS_CONFIG0_TOG_CH0_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_TOG_CH0_MAPPING_SHIFT
))&
GIS_CONFIG0_TOG_CH0_MAPPING_MASK
)

	)

10897 
	#GIS_CONFIG0_TOG_CH0_NUM_MASK
 0x38u

	)

10898 
	#GIS_CONFIG0_TOG_CH0_NUM_SHIFT
 3

	)

10899 
	#GIS_CONFIG0_TOG_CH0_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_TOG_CH0_NUM_SHIFT
))&
GIS_CONFIG0_TOG_CH0_NUM_MASK
)

	)

10900 
	#GIS_CONFIG0_TOG_CH1_MAPPING_MASK
 0x700u

	)

10901 
	#GIS_CONFIG0_TOG_CH1_MAPPING_SHIFT
 8

	)

10902 
	#GIS_CONFIG0_TOG_CH1_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_TOG_CH1_MAPPING_SHIFT
))&
GIS_CONFIG0_TOG_CH1_MAPPING_MASK
)

	)

10903 
	#GIS_CONFIG0_TOG_CH1_NUM_MASK
 0x3800u

	)

10904 
	#GIS_CONFIG0_TOG_CH1_NUM_SHIFT
 11

	)

10905 
	#GIS_CONFIG0_TOG_CH1_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_TOG_CH1_NUM_SHIFT
))&
GIS_CONFIG0_TOG_CH1_NUM_MASK
)

	)

10906 
	#GIS_CONFIG0_TOG_CH2_MAPPING_MASK
 0x70000u

	)

10907 
	#GIS_CONFIG0_TOG_CH2_MAPPING_SHIFT
 16

	)

10908 
	#GIS_CONFIG0_TOG_CH2_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_TOG_CH2_MAPPING_SHIFT
))&
GIS_CONFIG0_TOG_CH2_MAPPING_MASK
)

	)

10909 
	#GIS_CONFIG0_TOG_CH2_NUM_MASK
 0x380000u

	)

10910 
	#GIS_CONFIG0_TOG_CH2_NUM_SHIFT
 19

	)

10911 
	#GIS_CONFIG0_TOG_CH2_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_TOG_CH2_NUM_SHIFT
))&
GIS_CONFIG0_TOG_CH2_NUM_MASK
)

	)

10912 
	#GIS_CONFIG0_TOG_CH3_MAPPING_MASK
 0x7000000u

	)

10913 
	#GIS_CONFIG0_TOG_CH3_MAPPING_SHIFT
 24

	)

10914 
	#GIS_CONFIG0_TOG_CH3_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_TOG_CH3_MAPPING_SHIFT
))&
GIS_CONFIG0_TOG_CH3_MAPPING_MASK
)

	)

10915 
	#GIS_CONFIG0_TOG_CH3_NUM_MASK
 0x38000000u

	)

10916 
	#GIS_CONFIG0_TOG_CH3_NUM_SHIFT
 27

	)

10917 
	#GIS_CONFIG0_TOG_CH3_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG0_TOG_CH3_NUM_SHIFT
))&
GIS_CONFIG0_TOG_CH3_NUM_MASK
)

	)

10919 
	#GIS_CONFIG1_CH4_MAPPING_MASK
 0x7u

	)

10920 
	#GIS_CONFIG1_CH4_MAPPING_SHIFT
 0

	)

10921 
	#GIS_CONFIG1_CH4_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG1_CH4_MAPPING_SHIFT
))&
GIS_CONFIG1_CH4_MAPPING_MASK
)

	)

10922 
	#GIS_CONFIG1_CH4_NUM_MASK
 0x38u

	)

10923 
	#GIS_CONFIG1_CH4_NUM_SHIFT
 3

	)

10924 
	#GIS_CONFIG1_CH4_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG1_CH4_NUM_SHIFT
))&
GIS_CONFIG1_CH4_NUM_MASK
)

	)

10925 
	#GIS_CONFIG1_CH5_MAPPING_MASK
 0x700u

	)

10926 
	#GIS_CONFIG1_CH5_MAPPING_SHIFT
 8

	)

10927 
	#GIS_CONFIG1_CH5_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG1_CH5_MAPPING_SHIFT
))&
GIS_CONFIG1_CH5_MAPPING_MASK
)

	)

10928 
	#GIS_CONFIG1_CH5_NUM_MASK
 0x3800u

	)

10929 
	#GIS_CONFIG1_CH5_NUM_SHIFT
 11

	)

10930 
	#GIS_CONFIG1_CH5_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG1_CH5_NUM_SHIFT
))&
GIS_CONFIG1_CH5_NUM_MASK
)

	)

10932 
	#GIS_CONFIG1_SET_CH4_MAPPING_MASK
 0x7u

	)

10933 
	#GIS_CONFIG1_SET_CH4_MAPPING_SHIFT
 0

	)

10934 
	#GIS_CONFIG1_SET_CH4_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG1_SET_CH4_MAPPING_SHIFT
))&
GIS_CONFIG1_SET_CH4_MAPPING_MASK
)

	)

10935 
	#GIS_CONFIG1_SET_CH4_NUM_MASK
 0x38u

	)

10936 
	#GIS_CONFIG1_SET_CH4_NUM_SHIFT
 3

	)

10937 
	#GIS_CONFIG1_SET_CH4_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG1_SET_CH4_NUM_SHIFT
))&
GIS_CONFIG1_SET_CH4_NUM_MASK
)

	)

10938 
	#GIS_CONFIG1_SET_CH5_MAPPING_MASK
 0x700u

	)

10939 
	#GIS_CONFIG1_SET_CH5_MAPPING_SHIFT
 8

	)

10940 
	#GIS_CONFIG1_SET_CH5_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG1_SET_CH5_MAPPING_SHIFT
))&
GIS_CONFIG1_SET_CH5_MAPPING_MASK
)

	)

10941 
	#GIS_CONFIG1_SET_CH5_NUM_MASK
 0x3800u

	)

10942 
	#GIS_CONFIG1_SET_CH5_NUM_SHIFT
 11

	)

10943 
	#GIS_CONFIG1_SET_CH5_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG1_SET_CH5_NUM_SHIFT
))&
GIS_CONFIG1_SET_CH5_NUM_MASK
)

	)

10945 
	#GIS_CONFIG1_CLR_CH4_MAPPING_MASK
 0x7u

	)

10946 
	#GIS_CONFIG1_CLR_CH4_MAPPING_SHIFT
 0

	)

10947 
	#GIS_CONFIG1_CLR_CH4_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG1_CLR_CH4_MAPPING_SHIFT
))&
GIS_CONFIG1_CLR_CH4_MAPPING_MASK
)

	)

10948 
	#GIS_CONFIG1_CLR_CH4_NUM_MASK
 0x38u

	)

10949 
	#GIS_CONFIG1_CLR_CH4_NUM_SHIFT
 3

	)

10950 
	#GIS_CONFIG1_CLR_CH4_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG1_CLR_CH4_NUM_SHIFT
))&
GIS_CONFIG1_CLR_CH4_NUM_MASK
)

	)

10951 
	#GIS_CONFIG1_CLR_CH5_MAPPING_MASK
 0x700u

	)

10952 
	#GIS_CONFIG1_CLR_CH5_MAPPING_SHIFT
 8

	)

10953 
	#GIS_CONFIG1_CLR_CH5_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG1_CLR_CH5_MAPPING_SHIFT
))&
GIS_CONFIG1_CLR_CH5_MAPPING_MASK
)

	)

10954 
	#GIS_CONFIG1_CLR_CH5_NUM_MASK
 0x3800u

	)

10955 
	#GIS_CONFIG1_CLR_CH5_NUM_SHIFT
 11

	)

10956 
	#GIS_CONFIG1_CLR_CH5_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG1_CLR_CH5_NUM_SHIFT
))&
GIS_CONFIG1_CLR_CH5_NUM_MASK
)

	)

10958 
	#GIS_CONFIG1_TOG_CH4_MAPPING_MASK
 0x7u

	)

10959 
	#GIS_CONFIG1_TOG_CH4_MAPPING_SHIFT
 0

	)

10960 
	#GIS_CONFIG1_TOG_CH4_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG1_TOG_CH4_MAPPING_SHIFT
))&
GIS_CONFIG1_TOG_CH4_MAPPING_MASK
)

	)

10961 
	#GIS_CONFIG1_TOG_CH4_NUM_MASK
 0x38u

	)

10962 
	#GIS_CONFIG1_TOG_CH4_NUM_SHIFT
 3

	)

10963 
	#GIS_CONFIG1_TOG_CH4_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG1_TOG_CH4_NUM_SHIFT
))&
GIS_CONFIG1_TOG_CH4_NUM_MASK
)

	)

10964 
	#GIS_CONFIG1_TOG_CH5_MAPPING_MASK
 0x700u

	)

10965 
	#GIS_CONFIG1_TOG_CH5_MAPPING_SHIFT
 8

	)

10966 
	#GIS_CONFIG1_TOG_CH5_MAPPING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG1_TOG_CH5_MAPPING_SHIFT
))&
GIS_CONFIG1_TOG_CH5_MAPPING_MASK
)

	)

10967 
	#GIS_CONFIG1_TOG_CH5_NUM_MASK
 0x3800u

	)

10968 
	#GIS_CONFIG1_TOG_CH5_NUM_SHIFT
 11

	)

10969 
	#GIS_CONFIG1_TOG_CH5_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CONFIG1_TOG_CH5_NUM_SHIFT
))&
GIS_CONFIG1_TOG_CH5_NUM_MASK
)

	)

10971 
	#GIS_FB0_ADDR_MASK
 0xFFFFFFFFu

	)

10972 
	#GIS_FB0_ADDR_SHIFT
 0

	)

10973 
	#GIS_FB0_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_FB0_ADDR_SHIFT
))&
GIS_FB0_ADDR_MASK
)

	)

10975 
	#GIS_FB1_ADDR_MASK
 0xFFFFFFFFu

	)

10976 
	#GIS_FB1_ADDR_SHIFT
 0

	)

10977 
	#GIS_FB1_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_FB1_ADDR_SHIFT
))&
GIS_FB1_ADDR_MASK
)

	)

10979 
	#GIS_PXP_FB0_ADDR_MASK
 0xFFFFFFFFu

	)

10980 
	#GIS_PXP_FB0_ADDR_SHIFT
 0

	)

10981 
	#GIS_PXP_FB0_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_PXP_FB0_ADDR_SHIFT
))&
GIS_PXP_FB0_ADDR_MASK
)

	)

10983 
	#GIS_PXP_FB1_ADDR_MASK
 0xFFFFFFFFu

	)

10984 
	#GIS_PXP_FB1_ADDR_SHIFT
 0

	)

10985 
	#GIS_PXP_FB1_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_PXP_FB1_ADDR_SHIFT
))&
GIS_PXP_FB1_ADDR_MASK
)

	)

10987 
	#GIS_CH0_CTRL_CMD0_OPCODE_MASK
 0xFu

	)

10988 
	#GIS_CH0_CTRL_CMD0_OPCODE_SHIFT
 0

	)

10989 
	#GIS_CH0_CTRL_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_CMD0_OPCODE_SHIFT
))&
GIS_CH0_CTRL_CMD0_OPCODE_MASK
)

	)

10990 
	#GIS_CH0_CTRL_CMD0_ALU_MASK
 0x70u

	)

10991 
	#GIS_CH0_CTRL_CMD0_ALU_SHIFT
 4

	)

10992 
	#GIS_CH0_CTRL_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_CMD0_ALU_SHIFT
))&
GIS_CH0_CTRL_CMD0_ALU_MASK
)

	)

10993 
	#GIS_CH0_CTRL_CMD0_ACC_NEG_MASK
 0x80u

	)

10994 
	#GIS_CH0_CTRL_CMD0_ACC_NEG_SHIFT
 7

	)

10995 
	#GIS_CH0_CTRL_CMD1_OPCODE_MASK
 0xF00u

	)

10996 
	#GIS_CH0_CTRL_CMD1_OPCODE_SHIFT
 8

	)

10997 
	#GIS_CH0_CTRL_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_CMD1_OPCODE_SHIFT
))&
GIS_CH0_CTRL_CMD1_OPCODE_MASK
)

	)

10998 
	#GIS_CH0_CTRL_CMD1_ALU_MASK
 0x7000u

	)

10999 
	#GIS_CH0_CTRL_CMD1_ALU_SHIFT
 12

	)

11000 
	#GIS_CH0_CTRL_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_CMD1_ALU_SHIFT
))&
GIS_CH0_CTRL_CMD1_ALU_MASK
)

	)

11001 
	#GIS_CH0_CTRL_CMD1_ACC_NEG_MASK
 0x8000u

	)

11002 
	#GIS_CH0_CTRL_CMD1_ACC_NEG_SHIFT
 15

	)

11003 
	#GIS_CH0_CTRL_CMD2_OPCODE_MASK
 0xF0000u

	)

11004 
	#GIS_CH0_CTRL_CMD2_OPCODE_SHIFT
 16

	)

11005 
	#GIS_CH0_CTRL_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_CMD2_OPCODE_SHIFT
))&
GIS_CH0_CTRL_CMD2_OPCODE_MASK
)

	)

11006 
	#GIS_CH0_CTRL_CMD2_ALU_MASK
 0x700000u

	)

11007 
	#GIS_CH0_CTRL_CMD2_ALU_SHIFT
 20

	)

11008 
	#GIS_CH0_CTRL_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_CMD2_ALU_SHIFT
))&
GIS_CH0_CTRL_CMD2_ALU_MASK
)

	)

11009 
	#GIS_CH0_CTRL_CMD2_ACC_NEG_MASK
 0x800000u

	)

11010 
	#GIS_CH0_CTRL_CMD2_ACC_NEG_SHIFT
 23

	)

11011 
	#GIS_CH0_CTRL_CMD3_OPCODE_MASK
 0xF000000u

	)

11012 
	#GIS_CH0_CTRL_CMD3_OPCODE_SHIFT
 24

	)

11013 
	#GIS_CH0_CTRL_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_CMD3_OPCODE_SHIFT
))&
GIS_CH0_CTRL_CMD3_OPCODE_MASK
)

	)

11014 
	#GIS_CH0_CTRL_CMD3_ALU_MASK
 0x70000000u

	)

11015 
	#GIS_CH0_CTRL_CMD3_ALU_SHIFT
 28

	)

11016 
	#GIS_CH0_CTRL_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_CMD3_ALU_SHIFT
))&
GIS_CH0_CTRL_CMD3_ALU_MASK
)

	)

11017 
	#GIS_CH0_CTRL_CMD3_ACC_NEG_MASK
 0x80000000u

	)

11018 
	#GIS_CH0_CTRL_CMD3_ACC_NEG_SHIFT
 31

	)

11020 
	#GIS_CH0_CTRL_SET_CMD0_OPCODE_MASK
 0xFu

	)

11021 
	#GIS_CH0_CTRL_SET_CMD0_OPCODE_SHIFT
 0

	)

11022 
	#GIS_CH0_CTRL_SET_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_SET_CMD0_OPCODE_SHIFT
))&
GIS_CH0_CTRL_SET_CMD0_OPCODE_MASK
)

	)

11023 
	#GIS_CH0_CTRL_SET_CMD0_ALU_MASK
 0x70u

	)

11024 
	#GIS_CH0_CTRL_SET_CMD0_ALU_SHIFT
 4

	)

11025 
	#GIS_CH0_CTRL_SET_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_SET_CMD0_ALU_SHIFT
))&
GIS_CH0_CTRL_SET_CMD0_ALU_MASK
)

	)

11026 
	#GIS_CH0_CTRL_SET_CMD0_ACC_NEG_MASK
 0x80u

	)

11027 
	#GIS_CH0_CTRL_SET_CMD0_ACC_NEG_SHIFT
 7

	)

11028 
	#GIS_CH0_CTRL_SET_CMD1_OPCODE_MASK
 0xF00u

	)

11029 
	#GIS_CH0_CTRL_SET_CMD1_OPCODE_SHIFT
 8

	)

11030 
	#GIS_CH0_CTRL_SET_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_SET_CMD1_OPCODE_SHIFT
))&
GIS_CH0_CTRL_SET_CMD1_OPCODE_MASK
)

	)

11031 
	#GIS_CH0_CTRL_SET_CMD1_ALU_MASK
 0x7000u

	)

11032 
	#GIS_CH0_CTRL_SET_CMD1_ALU_SHIFT
 12

	)

11033 
	#GIS_CH0_CTRL_SET_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_SET_CMD1_ALU_SHIFT
))&
GIS_CH0_CTRL_SET_CMD1_ALU_MASK
)

	)

11034 
	#GIS_CH0_CTRL_SET_CMD1_ACC_NEG_MASK
 0x8000u

	)

11035 
	#GIS_CH0_CTRL_SET_CMD1_ACC_NEG_SHIFT
 15

	)

11036 
	#GIS_CH0_CTRL_SET_CMD2_OPCODE_MASK
 0xF0000u

	)

11037 
	#GIS_CH0_CTRL_SET_CMD2_OPCODE_SHIFT
 16

	)

11038 
	#GIS_CH0_CTRL_SET_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_SET_CMD2_OPCODE_SHIFT
))&
GIS_CH0_CTRL_SET_CMD2_OPCODE_MASK
)

	)

11039 
	#GIS_CH0_CTRL_SET_CMD2_ALU_MASK
 0x700000u

	)

11040 
	#GIS_CH0_CTRL_SET_CMD2_ALU_SHIFT
 20

	)

11041 
	#GIS_CH0_CTRL_SET_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_SET_CMD2_ALU_SHIFT
))&
GIS_CH0_CTRL_SET_CMD2_ALU_MASK
)

	)

11042 
	#GIS_CH0_CTRL_SET_CMD2_ACC_NEG_MASK
 0x800000u

	)

11043 
	#GIS_CH0_CTRL_SET_CMD2_ACC_NEG_SHIFT
 23

	)

11044 
	#GIS_CH0_CTRL_SET_CMD3_OPCODE_MASK
 0xF000000u

	)

11045 
	#GIS_CH0_CTRL_SET_CMD3_OPCODE_SHIFT
 24

	)

11046 
	#GIS_CH0_CTRL_SET_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_SET_CMD3_OPCODE_SHIFT
))&
GIS_CH0_CTRL_SET_CMD3_OPCODE_MASK
)

	)

11047 
	#GIS_CH0_CTRL_SET_CMD3_ALU_MASK
 0x70000000u

	)

11048 
	#GIS_CH0_CTRL_SET_CMD3_ALU_SHIFT
 28

	)

11049 
	#GIS_CH0_CTRL_SET_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_SET_CMD3_ALU_SHIFT
))&
GIS_CH0_CTRL_SET_CMD3_ALU_MASK
)

	)

11050 
	#GIS_CH0_CTRL_SET_CMD3_ACC_NEG_MASK
 0x80000000u

	)

11051 
	#GIS_CH0_CTRL_SET_CMD3_ACC_NEG_SHIFT
 31

	)

11053 
	#GIS_CH0_CTRL_CLR_CMD0_OPCODE_MASK
 0xFu

	)

11054 
	#GIS_CH0_CTRL_CLR_CMD0_OPCODE_SHIFT
 0

	)

11055 
	#GIS_CH0_CTRL_CLR_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_CLR_CMD0_OPCODE_SHIFT
))&
GIS_CH0_CTRL_CLR_CMD0_OPCODE_MASK
)

	)

11056 
	#GIS_CH0_CTRL_CLR_CMD0_ALU_MASK
 0x70u

	)

11057 
	#GIS_CH0_CTRL_CLR_CMD0_ALU_SHIFT
 4

	)

11058 
	#GIS_CH0_CTRL_CLR_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_CLR_CMD0_ALU_SHIFT
))&
GIS_CH0_CTRL_CLR_CMD0_ALU_MASK
)

	)

11059 
	#GIS_CH0_CTRL_CLR_CMD0_ACC_NEG_MASK
 0x80u

	)

11060 
	#GIS_CH0_CTRL_CLR_CMD0_ACC_NEG_SHIFT
 7

	)

11061 
	#GIS_CH0_CTRL_CLR_CMD1_OPCODE_MASK
 0xF00u

	)

11062 
	#GIS_CH0_CTRL_CLR_CMD1_OPCODE_SHIFT
 8

	)

11063 
	#GIS_CH0_CTRL_CLR_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_CLR_CMD1_OPCODE_SHIFT
))&
GIS_CH0_CTRL_CLR_CMD1_OPCODE_MASK
)

	)

11064 
	#GIS_CH0_CTRL_CLR_CMD1_ALU_MASK
 0x7000u

	)

11065 
	#GIS_CH0_CTRL_CLR_CMD1_ALU_SHIFT
 12

	)

11066 
	#GIS_CH0_CTRL_CLR_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_CLR_CMD1_ALU_SHIFT
))&
GIS_CH0_CTRL_CLR_CMD1_ALU_MASK
)

	)

11067 
	#GIS_CH0_CTRL_CLR_CMD1_ACC_NEG_MASK
 0x8000u

	)

11068 
	#GIS_CH0_CTRL_CLR_CMD1_ACC_NEG_SHIFT
 15

	)

11069 
	#GIS_CH0_CTRL_CLR_CMD2_OPCODE_MASK
 0xF0000u

	)

11070 
	#GIS_CH0_CTRL_CLR_CMD2_OPCODE_SHIFT
 16

	)

11071 
	#GIS_CH0_CTRL_CLR_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_CLR_CMD2_OPCODE_SHIFT
))&
GIS_CH0_CTRL_CLR_CMD2_OPCODE_MASK
)

	)

11072 
	#GIS_CH0_CTRL_CLR_CMD2_ALU_MASK
 0x700000u

	)

11073 
	#GIS_CH0_CTRL_CLR_CMD2_ALU_SHIFT
 20

	)

11074 
	#GIS_CH0_CTRL_CLR_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_CLR_CMD2_ALU_SHIFT
))&
GIS_CH0_CTRL_CLR_CMD2_ALU_MASK
)

	)

11075 
	#GIS_CH0_CTRL_CLR_CMD2_ACC_NEG_MASK
 0x800000u

	)

11076 
	#GIS_CH0_CTRL_CLR_CMD2_ACC_NEG_SHIFT
 23

	)

11077 
	#GIS_CH0_CTRL_CLR_CMD3_OPCODE_MASK
 0xF000000u

	)

11078 
	#GIS_CH0_CTRL_CLR_CMD3_OPCODE_SHIFT
 24

	)

11079 
	#GIS_CH0_CTRL_CLR_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_CLR_CMD3_OPCODE_SHIFT
))&
GIS_CH0_CTRL_CLR_CMD3_OPCODE_MASK
)

	)

11080 
	#GIS_CH0_CTRL_CLR_CMD3_ALU_MASK
 0x70000000u

	)

11081 
	#GIS_CH0_CTRL_CLR_CMD3_ALU_SHIFT
 28

	)

11082 
	#GIS_CH0_CTRL_CLR_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_CLR_CMD3_ALU_SHIFT
))&
GIS_CH0_CTRL_CLR_CMD3_ALU_MASK
)

	)

11083 
	#GIS_CH0_CTRL_CLR_CMD3_ACC_NEG_MASK
 0x80000000u

	)

11084 
	#GIS_CH0_CTRL_CLR_CMD3_ACC_NEG_SHIFT
 31

	)

11086 
	#GIS_CH0_CTRL_TOG_CMD0_OPCODE_MASK
 0xFu

	)

11087 
	#GIS_CH0_CTRL_TOG_CMD0_OPCODE_SHIFT
 0

	)

11088 
	#GIS_CH0_CTRL_TOG_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_TOG_CMD0_OPCODE_SHIFT
))&
GIS_CH0_CTRL_TOG_CMD0_OPCODE_MASK
)

	)

11089 
	#GIS_CH0_CTRL_TOG_CMD0_ALU_MASK
 0x70u

	)

11090 
	#GIS_CH0_CTRL_TOG_CMD0_ALU_SHIFT
 4

	)

11091 
	#GIS_CH0_CTRL_TOG_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_TOG_CMD0_ALU_SHIFT
))&
GIS_CH0_CTRL_TOG_CMD0_ALU_MASK
)

	)

11092 
	#GIS_CH0_CTRL_TOG_CMD0_ACC_NEG_MASK
 0x80u

	)

11093 
	#GIS_CH0_CTRL_TOG_CMD0_ACC_NEG_SHIFT
 7

	)

11094 
	#GIS_CH0_CTRL_TOG_CMD1_OPCODE_MASK
 0xF00u

	)

11095 
	#GIS_CH0_CTRL_TOG_CMD1_OPCODE_SHIFT
 8

	)

11096 
	#GIS_CH0_CTRL_TOG_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_TOG_CMD1_OPCODE_SHIFT
))&
GIS_CH0_CTRL_TOG_CMD1_OPCODE_MASK
)

	)

11097 
	#GIS_CH0_CTRL_TOG_CMD1_ALU_MASK
 0x7000u

	)

11098 
	#GIS_CH0_CTRL_TOG_CMD1_ALU_SHIFT
 12

	)

11099 
	#GIS_CH0_CTRL_TOG_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_TOG_CMD1_ALU_SHIFT
))&
GIS_CH0_CTRL_TOG_CMD1_ALU_MASK
)

	)

11100 
	#GIS_CH0_CTRL_TOG_CMD1_ACC_NEG_MASK
 0x8000u

	)

11101 
	#GIS_CH0_CTRL_TOG_CMD1_ACC_NEG_SHIFT
 15

	)

11102 
	#GIS_CH0_CTRL_TOG_CMD2_OPCODE_MASK
 0xF0000u

	)

11103 
	#GIS_CH0_CTRL_TOG_CMD2_OPCODE_SHIFT
 16

	)

11104 
	#GIS_CH0_CTRL_TOG_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_TOG_CMD2_OPCODE_SHIFT
))&
GIS_CH0_CTRL_TOG_CMD2_OPCODE_MASK
)

	)

11105 
	#GIS_CH0_CTRL_TOG_CMD2_ALU_MASK
 0x700000u

	)

11106 
	#GIS_CH0_CTRL_TOG_CMD2_ALU_SHIFT
 20

	)

11107 
	#GIS_CH0_CTRL_TOG_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_TOG_CMD2_ALU_SHIFT
))&
GIS_CH0_CTRL_TOG_CMD2_ALU_MASK
)

	)

11108 
	#GIS_CH0_CTRL_TOG_CMD2_ACC_NEG_MASK
 0x800000u

	)

11109 
	#GIS_CH0_CTRL_TOG_CMD2_ACC_NEG_SHIFT
 23

	)

11110 
	#GIS_CH0_CTRL_TOG_CMD3_OPCODE_MASK
 0xF000000u

	)

11111 
	#GIS_CH0_CTRL_TOG_CMD3_OPCODE_SHIFT
 24

	)

11112 
	#GIS_CH0_CTRL_TOG_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_TOG_CMD3_OPCODE_SHIFT
))&
GIS_CH0_CTRL_TOG_CMD3_OPCODE_MASK
)

	)

11113 
	#GIS_CH0_CTRL_TOG_CMD3_ALU_MASK
 0x70000000u

	)

11114 
	#GIS_CH0_CTRL_TOG_CMD3_ALU_SHIFT
 28

	)

11115 
	#GIS_CH0_CTRL_TOG_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_CTRL_TOG_CMD3_ALU_SHIFT
))&
GIS_CH0_CTRL_TOG_CMD3_ALU_MASK
)

	)

11116 
	#GIS_CH0_CTRL_TOG_CMD3_ACC_NEG_MASK
 0x80000000u

	)

11117 
	#GIS_CH0_CTRL_TOG_CMD3_ACC_NEG_SHIFT
 31

	)

11119 
	#GIS_CH0_ADDR0_ADDR_MASK
 0x7FFFFFFu

	)

11120 
	#GIS_CH0_ADDR0_ADDR_SHIFT
 0

	)

11121 
	#GIS_CH0_ADDR0_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_ADDR0_ADDR_SHIFT
))&
GIS_CH0_ADDR0_ADDR_MASK
)

	)

11122 
	#GIS_CH0_ADDR0_CSI0_SEL_MASK
 0x8000000u

	)

11123 
	#GIS_CH0_ADDR0_CSI0_SEL_SHIFT
 27

	)

11124 
	#GIS_CH0_ADDR0_CSI1_SEL_MASK
 0x10000000u

	)

11125 
	#GIS_CH0_ADDR0_CSI1_SEL_SHIFT
 28

	)

11126 
	#GIS_CH0_ADDR0_PXP_SEL_MASK
 0x20000000u

	)

11127 
	#GIS_CH0_ADDR0_PXP_SEL_SHIFT
 29

	)

11128 
	#GIS_CH0_ADDR0_LCDIF0_SEL_MASK
 0x40000000u

	)

11129 
	#GIS_CH0_ADDR0_LCDIF0_SEL_SHIFT
 30

	)

11130 
	#GIS_CH0_ADDR0_LCDIF1_SEL_MASK
 0x80000000u

	)

11131 
	#GIS_CH0_ADDR0_LCDIF1_SEL_SHIFT
 31

	)

11133 
	#GIS_CH0_ADDR0_SET_ADDR_MASK
 0x7FFFFFFu

	)

11134 
	#GIS_CH0_ADDR0_SET_ADDR_SHIFT
 0

	)

11135 
	#GIS_CH0_ADDR0_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_ADDR0_SET_ADDR_SHIFT
))&
GIS_CH0_ADDR0_SET_ADDR_MASK
)

	)

11136 
	#GIS_CH0_ADDR0_SET_CSI0_SEL_MASK
 0x8000000u

	)

11137 
	#GIS_CH0_ADDR0_SET_CSI0_SEL_SHIFT
 27

	)

11138 
	#GIS_CH0_ADDR0_SET_CSI1_SEL_MASK
 0x10000000u

	)

11139 
	#GIS_CH0_ADDR0_SET_CSI1_SEL_SHIFT
 28

	)

11140 
	#GIS_CH0_ADDR0_SET_PXP_SEL_MASK
 0x20000000u

	)

11141 
	#GIS_CH0_ADDR0_SET_PXP_SEL_SHIFT
 29

	)

11142 
	#GIS_CH0_ADDR0_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

11143 
	#GIS_CH0_ADDR0_SET_LCDIF0_SEL_SHIFT
 30

	)

11144 
	#GIS_CH0_ADDR0_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

11145 
	#GIS_CH0_ADDR0_SET_LCDIF1_SEL_SHIFT
 31

	)

11147 
	#GIS_CH0_ADDR0_CLR_ADDR_MASK
 0x7FFFFFFu

	)

11148 
	#GIS_CH0_ADDR0_CLR_ADDR_SHIFT
 0

	)

11149 
	#GIS_CH0_ADDR0_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_ADDR0_CLR_ADDR_SHIFT
))&
GIS_CH0_ADDR0_CLR_ADDR_MASK
)

	)

11150 
	#GIS_CH0_ADDR0_CLR_CSI0_SEL_MASK
 0x8000000u

	)

11151 
	#GIS_CH0_ADDR0_CLR_CSI0_SEL_SHIFT
 27

	)

11152 
	#GIS_CH0_ADDR0_CLR_CSI1_SEL_MASK
 0x10000000u

	)

11153 
	#GIS_CH0_ADDR0_CLR_CSI1_SEL_SHIFT
 28

	)

11154 
	#GIS_CH0_ADDR0_CLR_PXP_SEL_MASK
 0x20000000u

	)

11155 
	#GIS_CH0_ADDR0_CLR_PXP_SEL_SHIFT
 29

	)

11156 
	#GIS_CH0_ADDR0_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

11157 
	#GIS_CH0_ADDR0_CLR_LCDIF0_SEL_SHIFT
 30

	)

11158 
	#GIS_CH0_ADDR0_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

11159 
	#GIS_CH0_ADDR0_CLR_LCDIF1_SEL_SHIFT
 31

	)

11161 
	#GIS_CH0_ADDR0_TOG_ADDR_MASK
 0x7FFFFFFu

	)

11162 
	#GIS_CH0_ADDR0_TOG_ADDR_SHIFT
 0

	)

11163 
	#GIS_CH0_ADDR0_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_ADDR0_TOG_ADDR_SHIFT
))&
GIS_CH0_ADDR0_TOG_ADDR_MASK
)

	)

11164 
	#GIS_CH0_ADDR0_TOG_CSI0_SEL_MASK
 0x8000000u

	)

11165 
	#GIS_CH0_ADDR0_TOG_CSI0_SEL_SHIFT
 27

	)

11166 
	#GIS_CH0_ADDR0_TOG_CSI1_SEL_MASK
 0x10000000u

	)

11167 
	#GIS_CH0_ADDR0_TOG_CSI1_SEL_SHIFT
 28

	)

11168 
	#GIS_CH0_ADDR0_TOG_PXP_SEL_MASK
 0x20000000u

	)

11169 
	#GIS_CH0_ADDR0_TOG_PXP_SEL_SHIFT
 29

	)

11170 
	#GIS_CH0_ADDR0_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

11171 
	#GIS_CH0_ADDR0_TOG_LCDIF0_SEL_SHIFT
 30

	)

11172 
	#GIS_CH0_ADDR0_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

11173 
	#GIS_CH0_ADDR0_TOG_LCDIF1_SEL_SHIFT
 31

	)

11175 
	#GIS_CH0_DATA0_DATA_MASK
 0xFFFFFFFFu

	)

11176 
	#GIS_CH0_DATA0_DATA_SHIFT
 0

	)

11177 
	#GIS_CH0_DATA0_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_DATA0_DATA_SHIFT
))&
GIS_CH0_DATA0_DATA_MASK
)

	)

11179 
	#GIS_CH0_ADDR1_ADDR_MASK
 0x7FFFFFFu

	)

11180 
	#GIS_CH0_ADDR1_ADDR_SHIFT
 0

	)

11181 
	#GIS_CH0_ADDR1_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_ADDR1_ADDR_SHIFT
))&
GIS_CH0_ADDR1_ADDR_MASK
)

	)

11182 
	#GIS_CH0_ADDR1_CSI0_SEL_MASK
 0x8000000u

	)

11183 
	#GIS_CH0_ADDR1_CSI0_SEL_SHIFT
 27

	)

11184 
	#GIS_CH0_ADDR1_CSI1_SEL_MASK
 0x10000000u

	)

11185 
	#GIS_CH0_ADDR1_CSI1_SEL_SHIFT
 28

	)

11186 
	#GIS_CH0_ADDR1_PXP_SEL_MASK
 0x20000000u

	)

11187 
	#GIS_CH0_ADDR1_PXP_SEL_SHIFT
 29

	)

11188 
	#GIS_CH0_ADDR1_LCDIF0_SEL_MASK
 0x40000000u

	)

11189 
	#GIS_CH0_ADDR1_LCDIF0_SEL_SHIFT
 30

	)

11190 
	#GIS_CH0_ADDR1_LCDIF1_SEL_MASK
 0x80000000u

	)

11191 
	#GIS_CH0_ADDR1_LCDIF1_SEL_SHIFT
 31

	)

11193 
	#GIS_CH0_ADDR1_SET_ADDR_MASK
 0x7FFFFFFu

	)

11194 
	#GIS_CH0_ADDR1_SET_ADDR_SHIFT
 0

	)

11195 
	#GIS_CH0_ADDR1_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_ADDR1_SET_ADDR_SHIFT
))&
GIS_CH0_ADDR1_SET_ADDR_MASK
)

	)

11196 
	#GIS_CH0_ADDR1_SET_CSI0_SEL_MASK
 0x8000000u

	)

11197 
	#GIS_CH0_ADDR1_SET_CSI0_SEL_SHIFT
 27

	)

11198 
	#GIS_CH0_ADDR1_SET_CSI1_SEL_MASK
 0x10000000u

	)

11199 
	#GIS_CH0_ADDR1_SET_CSI1_SEL_SHIFT
 28

	)

11200 
	#GIS_CH0_ADDR1_SET_PXP_SEL_MASK
 0x20000000u

	)

11201 
	#GIS_CH0_ADDR1_SET_PXP_SEL_SHIFT
 29

	)

11202 
	#GIS_CH0_ADDR1_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

11203 
	#GIS_CH0_ADDR1_SET_LCDIF0_SEL_SHIFT
 30

	)

11204 
	#GIS_CH0_ADDR1_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

11205 
	#GIS_CH0_ADDR1_SET_LCDIF1_SEL_SHIFT
 31

	)

11207 
	#GIS_CH0_ADDR1_CLR_ADDR_MASK
 0x7FFFFFFu

	)

11208 
	#GIS_CH0_ADDR1_CLR_ADDR_SHIFT
 0

	)

11209 
	#GIS_CH0_ADDR1_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_ADDR1_CLR_ADDR_SHIFT
))&
GIS_CH0_ADDR1_CLR_ADDR_MASK
)

	)

11210 
	#GIS_CH0_ADDR1_CLR_CSI0_SEL_MASK
 0x8000000u

	)

11211 
	#GIS_CH0_ADDR1_CLR_CSI0_SEL_SHIFT
 27

	)

11212 
	#GIS_CH0_ADDR1_CLR_CSI1_SEL_MASK
 0x10000000u

	)

11213 
	#GIS_CH0_ADDR1_CLR_CSI1_SEL_SHIFT
 28

	)

11214 
	#GIS_CH0_ADDR1_CLR_PXP_SEL_MASK
 0x20000000u

	)

11215 
	#GIS_CH0_ADDR1_CLR_PXP_SEL_SHIFT
 29

	)

11216 
	#GIS_CH0_ADDR1_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

11217 
	#GIS_CH0_ADDR1_CLR_LCDIF0_SEL_SHIFT
 30

	)

11218 
	#GIS_CH0_ADDR1_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

11219 
	#GIS_CH0_ADDR1_CLR_LCDIF1_SEL_SHIFT
 31

	)

11221 
	#GIS_CH0_ADDR1_TOG_ADDR_MASK
 0x7FFFFFFu

	)

11222 
	#GIS_CH0_ADDR1_TOG_ADDR_SHIFT
 0

	)

11223 
	#GIS_CH0_ADDR1_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_ADDR1_TOG_ADDR_SHIFT
))&
GIS_CH0_ADDR1_TOG_ADDR_MASK
)

	)

11224 
	#GIS_CH0_ADDR1_TOG_CSI0_SEL_MASK
 0x8000000u

	)

11225 
	#GIS_CH0_ADDR1_TOG_CSI0_SEL_SHIFT
 27

	)

11226 
	#GIS_CH0_ADDR1_TOG_CSI1_SEL_MASK
 0x10000000u

	)

11227 
	#GIS_CH0_ADDR1_TOG_CSI1_SEL_SHIFT
 28

	)

11228 
	#GIS_CH0_ADDR1_TOG_PXP_SEL_MASK
 0x20000000u

	)

11229 
	#GIS_CH0_ADDR1_TOG_PXP_SEL_SHIFT
 29

	)

11230 
	#GIS_CH0_ADDR1_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

11231 
	#GIS_CH0_ADDR1_TOG_LCDIF0_SEL_SHIFT
 30

	)

11232 
	#GIS_CH0_ADDR1_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

11233 
	#GIS_CH0_ADDR1_TOG_LCDIF1_SEL_SHIFT
 31

	)

11235 
	#GIS_CH0_DATA1_DATA_MASK
 0xFFFFFFFFu

	)

11236 
	#GIS_CH0_DATA1_DATA_SHIFT
 0

	)

11237 
	#GIS_CH0_DATA1_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_DATA1_DATA_SHIFT
))&
GIS_CH0_DATA1_DATA_MASK
)

	)

11239 
	#GIS_CH0_ADDR2_ADDR_MASK
 0x7FFFFFFu

	)

11240 
	#GIS_CH0_ADDR2_ADDR_SHIFT
 0

	)

11241 
	#GIS_CH0_ADDR2_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_ADDR2_ADDR_SHIFT
))&
GIS_CH0_ADDR2_ADDR_MASK
)

	)

11242 
	#GIS_CH0_ADDR2_CSI0_SEL_MASK
 0x8000000u

	)

11243 
	#GIS_CH0_ADDR2_CSI0_SEL_SHIFT
 27

	)

11244 
	#GIS_CH0_ADDR2_CSI1_SEL_MASK
 0x10000000u

	)

11245 
	#GIS_CH0_ADDR2_CSI1_SEL_SHIFT
 28

	)

11246 
	#GIS_CH0_ADDR2_PXP_SEL_MASK
 0x20000000u

	)

11247 
	#GIS_CH0_ADDR2_PXP_SEL_SHIFT
 29

	)

11248 
	#GIS_CH0_ADDR2_LCDIF0_SEL_MASK
 0x40000000u

	)

11249 
	#GIS_CH0_ADDR2_LCDIF0_SEL_SHIFT
 30

	)

11250 
	#GIS_CH0_ADDR2_LCDIF1_SEL_MASK
 0x80000000u

	)

11251 
	#GIS_CH0_ADDR2_LCDIF1_SEL_SHIFT
 31

	)

11253 
	#GIS_CH0_ADDR2_SET_ADDR_MASK
 0x7FFFFFFu

	)

11254 
	#GIS_CH0_ADDR2_SET_ADDR_SHIFT
 0

	)

11255 
	#GIS_CH0_ADDR2_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_ADDR2_SET_ADDR_SHIFT
))&
GIS_CH0_ADDR2_SET_ADDR_MASK
)

	)

11256 
	#GIS_CH0_ADDR2_SET_CSI0_SEL_MASK
 0x8000000u

	)

11257 
	#GIS_CH0_ADDR2_SET_CSI0_SEL_SHIFT
 27

	)

11258 
	#GIS_CH0_ADDR2_SET_CSI1_SEL_MASK
 0x10000000u

	)

11259 
	#GIS_CH0_ADDR2_SET_CSI1_SEL_SHIFT
 28

	)

11260 
	#GIS_CH0_ADDR2_SET_PXP_SEL_MASK
 0x20000000u

	)

11261 
	#GIS_CH0_ADDR2_SET_PXP_SEL_SHIFT
 29

	)

11262 
	#GIS_CH0_ADDR2_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

11263 
	#GIS_CH0_ADDR2_SET_LCDIF0_SEL_SHIFT
 30

	)

11264 
	#GIS_CH0_ADDR2_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

11265 
	#GIS_CH0_ADDR2_SET_LCDIF1_SEL_SHIFT
 31

	)

11267 
	#GIS_CH0_ADDR2_CLR_ADDR_MASK
 0x7FFFFFFu

	)

11268 
	#GIS_CH0_ADDR2_CLR_ADDR_SHIFT
 0

	)

11269 
	#GIS_CH0_ADDR2_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_ADDR2_CLR_ADDR_SHIFT
))&
GIS_CH0_ADDR2_CLR_ADDR_MASK
)

	)

11270 
	#GIS_CH0_ADDR2_CLR_CSI0_SEL_MASK
 0x8000000u

	)

11271 
	#GIS_CH0_ADDR2_CLR_CSI0_SEL_SHIFT
 27

	)

11272 
	#GIS_CH0_ADDR2_CLR_CSI1_SEL_MASK
 0x10000000u

	)

11273 
	#GIS_CH0_ADDR2_CLR_CSI1_SEL_SHIFT
 28

	)

11274 
	#GIS_CH0_ADDR2_CLR_PXP_SEL_MASK
 0x20000000u

	)

11275 
	#GIS_CH0_ADDR2_CLR_PXP_SEL_SHIFT
 29

	)

11276 
	#GIS_CH0_ADDR2_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

11277 
	#GIS_CH0_ADDR2_CLR_LCDIF0_SEL_SHIFT
 30

	)

11278 
	#GIS_CH0_ADDR2_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

11279 
	#GIS_CH0_ADDR2_CLR_LCDIF1_SEL_SHIFT
 31

	)

11281 
	#GIS_CH0_ADDR2_TOG_ADDR_MASK
 0x7FFFFFFu

	)

11282 
	#GIS_CH0_ADDR2_TOG_ADDR_SHIFT
 0

	)

11283 
	#GIS_CH0_ADDR2_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_ADDR2_TOG_ADDR_SHIFT
))&
GIS_CH0_ADDR2_TOG_ADDR_MASK
)

	)

11284 
	#GIS_CH0_ADDR2_TOG_CSI0_SEL_MASK
 0x8000000u

	)

11285 
	#GIS_CH0_ADDR2_TOG_CSI0_SEL_SHIFT
 27

	)

11286 
	#GIS_CH0_ADDR2_TOG_CSI1_SEL_MASK
 0x10000000u

	)

11287 
	#GIS_CH0_ADDR2_TOG_CSI1_SEL_SHIFT
 28

	)

11288 
	#GIS_CH0_ADDR2_TOG_PXP_SEL_MASK
 0x20000000u

	)

11289 
	#GIS_CH0_ADDR2_TOG_PXP_SEL_SHIFT
 29

	)

11290 
	#GIS_CH0_ADDR2_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

11291 
	#GIS_CH0_ADDR2_TOG_LCDIF0_SEL_SHIFT
 30

	)

11292 
	#GIS_CH0_ADDR2_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

11293 
	#GIS_CH0_ADDR2_TOG_LCDIF1_SEL_SHIFT
 31

	)

11295 
	#GIS_CH0_DATA2_DATA_MASK
 0xFFFFFFFFu

	)

11296 
	#GIS_CH0_DATA2_DATA_SHIFT
 0

	)

11297 
	#GIS_CH0_DATA2_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_DATA2_DATA_SHIFT
))&
GIS_CH0_DATA2_DATA_MASK
)

	)

11299 
	#GIS_CH0_ADDR3_ADDR_MASK
 0x7FFFFFFu

	)

11300 
	#GIS_CH0_ADDR3_ADDR_SHIFT
 0

	)

11301 
	#GIS_CH0_ADDR3_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_ADDR3_ADDR_SHIFT
))&
GIS_CH0_ADDR3_ADDR_MASK
)

	)

11302 
	#GIS_CH0_ADDR3_CSI0_SEL_MASK
 0x8000000u

	)

11303 
	#GIS_CH0_ADDR3_CSI0_SEL_SHIFT
 27

	)

11304 
	#GIS_CH0_ADDR3_CSI1_SEL_MASK
 0x10000000u

	)

11305 
	#GIS_CH0_ADDR3_CSI1_SEL_SHIFT
 28

	)

11306 
	#GIS_CH0_ADDR3_PXP_SEL_MASK
 0x20000000u

	)

11307 
	#GIS_CH0_ADDR3_PXP_SEL_SHIFT
 29

	)

11308 
	#GIS_CH0_ADDR3_LCDIF0_SEL_MASK
 0x40000000u

	)

11309 
	#GIS_CH0_ADDR3_LCDIF0_SEL_SHIFT
 30

	)

11310 
	#GIS_CH0_ADDR3_LCDIF1_SEL_MASK
 0x80000000u

	)

11311 
	#GIS_CH0_ADDR3_LCDIF1_SEL_SHIFT
 31

	)

11313 
	#GIS_CH0_ADDR3_SET_ADDR_MASK
 0x7FFFFFFu

	)

11314 
	#GIS_CH0_ADDR3_SET_ADDR_SHIFT
 0

	)

11315 
	#GIS_CH0_ADDR3_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_ADDR3_SET_ADDR_SHIFT
))&
GIS_CH0_ADDR3_SET_ADDR_MASK
)

	)

11316 
	#GIS_CH0_ADDR3_SET_CSI0_SEL_MASK
 0x8000000u

	)

11317 
	#GIS_CH0_ADDR3_SET_CSI0_SEL_SHIFT
 27

	)

11318 
	#GIS_CH0_ADDR3_SET_CSI1_SEL_MASK
 0x10000000u

	)

11319 
	#GIS_CH0_ADDR3_SET_CSI1_SEL_SHIFT
 28

	)

11320 
	#GIS_CH0_ADDR3_SET_PXP_SEL_MASK
 0x20000000u

	)

11321 
	#GIS_CH0_ADDR3_SET_PXP_SEL_SHIFT
 29

	)

11322 
	#GIS_CH0_ADDR3_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

11323 
	#GIS_CH0_ADDR3_SET_LCDIF0_SEL_SHIFT
 30

	)

11324 
	#GIS_CH0_ADDR3_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

11325 
	#GIS_CH0_ADDR3_SET_LCDIF1_SEL_SHIFT
 31

	)

11327 
	#GIS_CH0_ADDR3_CLR_ADDR_MASK
 0x7FFFFFFu

	)

11328 
	#GIS_CH0_ADDR3_CLR_ADDR_SHIFT
 0

	)

11329 
	#GIS_CH0_ADDR3_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_ADDR3_CLR_ADDR_SHIFT
))&
GIS_CH0_ADDR3_CLR_ADDR_MASK
)

	)

11330 
	#GIS_CH0_ADDR3_CLR_CSI0_SEL_MASK
 0x8000000u

	)

11331 
	#GIS_CH0_ADDR3_CLR_CSI0_SEL_SHIFT
 27

	)

11332 
	#GIS_CH0_ADDR3_CLR_CSI1_SEL_MASK
 0x10000000u

	)

11333 
	#GIS_CH0_ADDR3_CLR_CSI1_SEL_SHIFT
 28

	)

11334 
	#GIS_CH0_ADDR3_CLR_PXP_SEL_MASK
 0x20000000u

	)

11335 
	#GIS_CH0_ADDR3_CLR_PXP_SEL_SHIFT
 29

	)

11336 
	#GIS_CH0_ADDR3_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

11337 
	#GIS_CH0_ADDR3_CLR_LCDIF0_SEL_SHIFT
 30

	)

11338 
	#GIS_CH0_ADDR3_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

11339 
	#GIS_CH0_ADDR3_CLR_LCDIF1_SEL_SHIFT
 31

	)

11341 
	#GIS_CH0_ADDR3_TOG_ADDR_MASK
 0x7FFFFFFu

	)

11342 
	#GIS_CH0_ADDR3_TOG_ADDR_SHIFT
 0

	)

11343 
	#GIS_CH0_ADDR3_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_ADDR3_TOG_ADDR_SHIFT
))&
GIS_CH0_ADDR3_TOG_ADDR_MASK
)

	)

11344 
	#GIS_CH0_ADDR3_TOG_CSI0_SEL_MASK
 0x8000000u

	)

11345 
	#GIS_CH0_ADDR3_TOG_CSI0_SEL_SHIFT
 27

	)

11346 
	#GIS_CH0_ADDR3_TOG_CSI1_SEL_MASK
 0x10000000u

	)

11347 
	#GIS_CH0_ADDR3_TOG_CSI1_SEL_SHIFT
 28

	)

11348 
	#GIS_CH0_ADDR3_TOG_PXP_SEL_MASK
 0x20000000u

	)

11349 
	#GIS_CH0_ADDR3_TOG_PXP_SEL_SHIFT
 29

	)

11350 
	#GIS_CH0_ADDR3_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

11351 
	#GIS_CH0_ADDR3_TOG_LCDIF0_SEL_SHIFT
 30

	)

11352 
	#GIS_CH0_ADDR3_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

11353 
	#GIS_CH0_ADDR3_TOG_LCDIF1_SEL_SHIFT
 31

	)

11355 
	#GIS_CH0_DATA3_DATA_MASK
 0xFFFFFFFFu

	)

11356 
	#GIS_CH0_DATA3_DATA_SHIFT
 0

	)

11357 
	#GIS_CH0_DATA3_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH0_DATA3_DATA_SHIFT
))&
GIS_CH0_DATA3_DATA_MASK
)

	)

11359 
	#GIS_CH1_CTRL_CMD0_OPCODE_MASK
 0xFu

	)

11360 
	#GIS_CH1_CTRL_CMD0_OPCODE_SHIFT
 0

	)

11361 
	#GIS_CH1_CTRL_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_CMD0_OPCODE_SHIFT
))&
GIS_CH1_CTRL_CMD0_OPCODE_MASK
)

	)

11362 
	#GIS_CH1_CTRL_CMD0_ALU_MASK
 0x70u

	)

11363 
	#GIS_CH1_CTRL_CMD0_ALU_SHIFT
 4

	)

11364 
	#GIS_CH1_CTRL_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_CMD0_ALU_SHIFT
))&
GIS_CH1_CTRL_CMD0_ALU_MASK
)

	)

11365 
	#GIS_CH1_CTRL_CMD0_ACC_NEG_MASK
 0x80u

	)

11366 
	#GIS_CH1_CTRL_CMD0_ACC_NEG_SHIFT
 7

	)

11367 
	#GIS_CH1_CTRL_CMD1_OPCODE_MASK
 0xF00u

	)

11368 
	#GIS_CH1_CTRL_CMD1_OPCODE_SHIFT
 8

	)

11369 
	#GIS_CH1_CTRL_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_CMD1_OPCODE_SHIFT
))&
GIS_CH1_CTRL_CMD1_OPCODE_MASK
)

	)

11370 
	#GIS_CH1_CTRL_CMD1_ALU_MASK
 0x7000u

	)

11371 
	#GIS_CH1_CTRL_CMD1_ALU_SHIFT
 12

	)

11372 
	#GIS_CH1_CTRL_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_CMD1_ALU_SHIFT
))&
GIS_CH1_CTRL_CMD1_ALU_MASK
)

	)

11373 
	#GIS_CH1_CTRL_CMD1_ACC_NEG_MASK
 0x8000u

	)

11374 
	#GIS_CH1_CTRL_CMD1_ACC_NEG_SHIFT
 15

	)

11375 
	#GIS_CH1_CTRL_CMD2_OPCODE_MASK
 0xF0000u

	)

11376 
	#GIS_CH1_CTRL_CMD2_OPCODE_SHIFT
 16

	)

11377 
	#GIS_CH1_CTRL_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_CMD2_OPCODE_SHIFT
))&
GIS_CH1_CTRL_CMD2_OPCODE_MASK
)

	)

11378 
	#GIS_CH1_CTRL_CMD2_ALU_MASK
 0x700000u

	)

11379 
	#GIS_CH1_CTRL_CMD2_ALU_SHIFT
 20

	)

11380 
	#GIS_CH1_CTRL_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_CMD2_ALU_SHIFT
))&
GIS_CH1_CTRL_CMD2_ALU_MASK
)

	)

11381 
	#GIS_CH1_CTRL_CMD2_ACC_NEG_MASK
 0x800000u

	)

11382 
	#GIS_CH1_CTRL_CMD2_ACC_NEG_SHIFT
 23

	)

11383 
	#GIS_CH1_CTRL_CMD3_OPCODE_MASK
 0xF000000u

	)

11384 
	#GIS_CH1_CTRL_CMD3_OPCODE_SHIFT
 24

	)

11385 
	#GIS_CH1_CTRL_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_CMD3_OPCODE_SHIFT
))&
GIS_CH1_CTRL_CMD3_OPCODE_MASK
)

	)

11386 
	#GIS_CH1_CTRL_CMD3_ALU_MASK
 0x70000000u

	)

11387 
	#GIS_CH1_CTRL_CMD3_ALU_SHIFT
 28

	)

11388 
	#GIS_CH1_CTRL_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_CMD3_ALU_SHIFT
))&
GIS_CH1_CTRL_CMD3_ALU_MASK
)

	)

11389 
	#GIS_CH1_CTRL_CMD3_ACC_NEG_MASK
 0x80000000u

	)

11390 
	#GIS_CH1_CTRL_CMD3_ACC_NEG_SHIFT
 31

	)

11392 
	#GIS_CH1_CTRL_SET_CMD0_OPCODE_MASK
 0xFu

	)

11393 
	#GIS_CH1_CTRL_SET_CMD0_OPCODE_SHIFT
 0

	)

11394 
	#GIS_CH1_CTRL_SET_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_SET_CMD0_OPCODE_SHIFT
))&
GIS_CH1_CTRL_SET_CMD0_OPCODE_MASK
)

	)

11395 
	#GIS_CH1_CTRL_SET_CMD0_ALU_MASK
 0x70u

	)

11396 
	#GIS_CH1_CTRL_SET_CMD0_ALU_SHIFT
 4

	)

11397 
	#GIS_CH1_CTRL_SET_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_SET_CMD0_ALU_SHIFT
))&
GIS_CH1_CTRL_SET_CMD0_ALU_MASK
)

	)

11398 
	#GIS_CH1_CTRL_SET_CMD0_ACC_NEG_MASK
 0x80u

	)

11399 
	#GIS_CH1_CTRL_SET_CMD0_ACC_NEG_SHIFT
 7

	)

11400 
	#GIS_CH1_CTRL_SET_CMD1_OPCODE_MASK
 0xF00u

	)

11401 
	#GIS_CH1_CTRL_SET_CMD1_OPCODE_SHIFT
 8

	)

11402 
	#GIS_CH1_CTRL_SET_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_SET_CMD1_OPCODE_SHIFT
))&
GIS_CH1_CTRL_SET_CMD1_OPCODE_MASK
)

	)

11403 
	#GIS_CH1_CTRL_SET_CMD1_ALU_MASK
 0x7000u

	)

11404 
	#GIS_CH1_CTRL_SET_CMD1_ALU_SHIFT
 12

	)

11405 
	#GIS_CH1_CTRL_SET_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_SET_CMD1_ALU_SHIFT
))&
GIS_CH1_CTRL_SET_CMD1_ALU_MASK
)

	)

11406 
	#GIS_CH1_CTRL_SET_CMD1_ACC_NEG_MASK
 0x8000u

	)

11407 
	#GIS_CH1_CTRL_SET_CMD1_ACC_NEG_SHIFT
 15

	)

11408 
	#GIS_CH1_CTRL_SET_CMD2_OPCODE_MASK
 0xF0000u

	)

11409 
	#GIS_CH1_CTRL_SET_CMD2_OPCODE_SHIFT
 16

	)

11410 
	#GIS_CH1_CTRL_SET_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_SET_CMD2_OPCODE_SHIFT
))&
GIS_CH1_CTRL_SET_CMD2_OPCODE_MASK
)

	)

11411 
	#GIS_CH1_CTRL_SET_CMD2_ALU_MASK
 0x700000u

	)

11412 
	#GIS_CH1_CTRL_SET_CMD2_ALU_SHIFT
 20

	)

11413 
	#GIS_CH1_CTRL_SET_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_SET_CMD2_ALU_SHIFT
))&
GIS_CH1_CTRL_SET_CMD2_ALU_MASK
)

	)

11414 
	#GIS_CH1_CTRL_SET_CMD2_ACC_NEG_MASK
 0x800000u

	)

11415 
	#GIS_CH1_CTRL_SET_CMD2_ACC_NEG_SHIFT
 23

	)

11416 
	#GIS_CH1_CTRL_SET_CMD3_OPCODE_MASK
 0xF000000u

	)

11417 
	#GIS_CH1_CTRL_SET_CMD3_OPCODE_SHIFT
 24

	)

11418 
	#GIS_CH1_CTRL_SET_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_SET_CMD3_OPCODE_SHIFT
))&
GIS_CH1_CTRL_SET_CMD3_OPCODE_MASK
)

	)

11419 
	#GIS_CH1_CTRL_SET_CMD3_ALU_MASK
 0x70000000u

	)

11420 
	#GIS_CH1_CTRL_SET_CMD3_ALU_SHIFT
 28

	)

11421 
	#GIS_CH1_CTRL_SET_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_SET_CMD3_ALU_SHIFT
))&
GIS_CH1_CTRL_SET_CMD3_ALU_MASK
)

	)

11422 
	#GIS_CH1_CTRL_SET_CMD3_ACC_NEG_MASK
 0x80000000u

	)

11423 
	#GIS_CH1_CTRL_SET_CMD3_ACC_NEG_SHIFT
 31

	)

11425 
	#GIS_CH1_CTRL_CLR_CMD0_OPCODE_MASK
 0xFu

	)

11426 
	#GIS_CH1_CTRL_CLR_CMD0_OPCODE_SHIFT
 0

	)

11427 
	#GIS_CH1_CTRL_CLR_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_CLR_CMD0_OPCODE_SHIFT
))&
GIS_CH1_CTRL_CLR_CMD0_OPCODE_MASK
)

	)

11428 
	#GIS_CH1_CTRL_CLR_CMD0_ALU_MASK
 0x70u

	)

11429 
	#GIS_CH1_CTRL_CLR_CMD0_ALU_SHIFT
 4

	)

11430 
	#GIS_CH1_CTRL_CLR_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_CLR_CMD0_ALU_SHIFT
))&
GIS_CH1_CTRL_CLR_CMD0_ALU_MASK
)

	)

11431 
	#GIS_CH1_CTRL_CLR_CMD0_ACC_NEG_MASK
 0x80u

	)

11432 
	#GIS_CH1_CTRL_CLR_CMD0_ACC_NEG_SHIFT
 7

	)

11433 
	#GIS_CH1_CTRL_CLR_CMD1_OPCODE_MASK
 0xF00u

	)

11434 
	#GIS_CH1_CTRL_CLR_CMD1_OPCODE_SHIFT
 8

	)

11435 
	#GIS_CH1_CTRL_CLR_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_CLR_CMD1_OPCODE_SHIFT
))&
GIS_CH1_CTRL_CLR_CMD1_OPCODE_MASK
)

	)

11436 
	#GIS_CH1_CTRL_CLR_CMD1_ALU_MASK
 0x7000u

	)

11437 
	#GIS_CH1_CTRL_CLR_CMD1_ALU_SHIFT
 12

	)

11438 
	#GIS_CH1_CTRL_CLR_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_CLR_CMD1_ALU_SHIFT
))&
GIS_CH1_CTRL_CLR_CMD1_ALU_MASK
)

	)

11439 
	#GIS_CH1_CTRL_CLR_CMD1_ACC_NEG_MASK
 0x8000u

	)

11440 
	#GIS_CH1_CTRL_CLR_CMD1_ACC_NEG_SHIFT
 15

	)

11441 
	#GIS_CH1_CTRL_CLR_CMD2_OPCODE_MASK
 0xF0000u

	)

11442 
	#GIS_CH1_CTRL_CLR_CMD2_OPCODE_SHIFT
 16

	)

11443 
	#GIS_CH1_CTRL_CLR_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_CLR_CMD2_OPCODE_SHIFT
))&
GIS_CH1_CTRL_CLR_CMD2_OPCODE_MASK
)

	)

11444 
	#GIS_CH1_CTRL_CLR_CMD2_ALU_MASK
 0x700000u

	)

11445 
	#GIS_CH1_CTRL_CLR_CMD2_ALU_SHIFT
 20

	)

11446 
	#GIS_CH1_CTRL_CLR_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_CLR_CMD2_ALU_SHIFT
))&
GIS_CH1_CTRL_CLR_CMD2_ALU_MASK
)

	)

11447 
	#GIS_CH1_CTRL_CLR_CMD2_ACC_NEG_MASK
 0x800000u

	)

11448 
	#GIS_CH1_CTRL_CLR_CMD2_ACC_NEG_SHIFT
 23

	)

11449 
	#GIS_CH1_CTRL_CLR_CMD3_OPCODE_MASK
 0xF000000u

	)

11450 
	#GIS_CH1_CTRL_CLR_CMD3_OPCODE_SHIFT
 24

	)

11451 
	#GIS_CH1_CTRL_CLR_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_CLR_CMD3_OPCODE_SHIFT
))&
GIS_CH1_CTRL_CLR_CMD3_OPCODE_MASK
)

	)

11452 
	#GIS_CH1_CTRL_CLR_CMD3_ALU_MASK
 0x70000000u

	)

11453 
	#GIS_CH1_CTRL_CLR_CMD3_ALU_SHIFT
 28

	)

11454 
	#GIS_CH1_CTRL_CLR_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_CLR_CMD3_ALU_SHIFT
))&
GIS_CH1_CTRL_CLR_CMD3_ALU_MASK
)

	)

11455 
	#GIS_CH1_CTRL_CLR_CMD3_ACC_NEG_MASK
 0x80000000u

	)

11456 
	#GIS_CH1_CTRL_CLR_CMD3_ACC_NEG_SHIFT
 31

	)

11458 
	#GIS_CH1_CTRL_TOG_CMD0_OPCODE_MASK
 0xFu

	)

11459 
	#GIS_CH1_CTRL_TOG_CMD0_OPCODE_SHIFT
 0

	)

11460 
	#GIS_CH1_CTRL_TOG_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_TOG_CMD0_OPCODE_SHIFT
))&
GIS_CH1_CTRL_TOG_CMD0_OPCODE_MASK
)

	)

11461 
	#GIS_CH1_CTRL_TOG_CMD0_ALU_MASK
 0x70u

	)

11462 
	#GIS_CH1_CTRL_TOG_CMD0_ALU_SHIFT
 4

	)

11463 
	#GIS_CH1_CTRL_TOG_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_TOG_CMD0_ALU_SHIFT
))&
GIS_CH1_CTRL_TOG_CMD0_ALU_MASK
)

	)

11464 
	#GIS_CH1_CTRL_TOG_CMD0_ACC_NEG_MASK
 0x80u

	)

11465 
	#GIS_CH1_CTRL_TOG_CMD0_ACC_NEG_SHIFT
 7

	)

11466 
	#GIS_CH1_CTRL_TOG_CMD1_OPCODE_MASK
 0xF00u

	)

11467 
	#GIS_CH1_CTRL_TOG_CMD1_OPCODE_SHIFT
 8

	)

11468 
	#GIS_CH1_CTRL_TOG_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_TOG_CMD1_OPCODE_SHIFT
))&
GIS_CH1_CTRL_TOG_CMD1_OPCODE_MASK
)

	)

11469 
	#GIS_CH1_CTRL_TOG_CMD1_ALU_MASK
 0x7000u

	)

11470 
	#GIS_CH1_CTRL_TOG_CMD1_ALU_SHIFT
 12

	)

11471 
	#GIS_CH1_CTRL_TOG_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_TOG_CMD1_ALU_SHIFT
))&
GIS_CH1_CTRL_TOG_CMD1_ALU_MASK
)

	)

11472 
	#GIS_CH1_CTRL_TOG_CMD1_ACC_NEG_MASK
 0x8000u

	)

11473 
	#GIS_CH1_CTRL_TOG_CMD1_ACC_NEG_SHIFT
 15

	)

11474 
	#GIS_CH1_CTRL_TOG_CMD2_OPCODE_MASK
 0xF0000u

	)

11475 
	#GIS_CH1_CTRL_TOG_CMD2_OPCODE_SHIFT
 16

	)

11476 
	#GIS_CH1_CTRL_TOG_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_TOG_CMD2_OPCODE_SHIFT
))&
GIS_CH1_CTRL_TOG_CMD2_OPCODE_MASK
)

	)

11477 
	#GIS_CH1_CTRL_TOG_CMD2_ALU_MASK
 0x700000u

	)

11478 
	#GIS_CH1_CTRL_TOG_CMD2_ALU_SHIFT
 20

	)

11479 
	#GIS_CH1_CTRL_TOG_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_TOG_CMD2_ALU_SHIFT
))&
GIS_CH1_CTRL_TOG_CMD2_ALU_MASK
)

	)

11480 
	#GIS_CH1_CTRL_TOG_CMD2_ACC_NEG_MASK
 0x800000u

	)

11481 
	#GIS_CH1_CTRL_TOG_CMD2_ACC_NEG_SHIFT
 23

	)

11482 
	#GIS_CH1_CTRL_TOG_CMD3_OPCODE_MASK
 0xF000000u

	)

11483 
	#GIS_CH1_CTRL_TOG_CMD3_OPCODE_SHIFT
 24

	)

11484 
	#GIS_CH1_CTRL_TOG_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_TOG_CMD3_OPCODE_SHIFT
))&
GIS_CH1_CTRL_TOG_CMD3_OPCODE_MASK
)

	)

11485 
	#GIS_CH1_CTRL_TOG_CMD3_ALU_MASK
 0x70000000u

	)

11486 
	#GIS_CH1_CTRL_TOG_CMD3_ALU_SHIFT
 28

	)

11487 
	#GIS_CH1_CTRL_TOG_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_CTRL_TOG_CMD3_ALU_SHIFT
))&
GIS_CH1_CTRL_TOG_CMD3_ALU_MASK
)

	)

11488 
	#GIS_CH1_CTRL_TOG_CMD3_ACC_NEG_MASK
 0x80000000u

	)

11489 
	#GIS_CH1_CTRL_TOG_CMD3_ACC_NEG_SHIFT
 31

	)

11491 
	#GIS_CH1_ADDR0_ADDR_MASK
 0x7FFFFFFu

	)

11492 
	#GIS_CH1_ADDR0_ADDR_SHIFT
 0

	)

11493 
	#GIS_CH1_ADDR0_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_ADDR0_ADDR_SHIFT
))&
GIS_CH1_ADDR0_ADDR_MASK
)

	)

11494 
	#GIS_CH1_ADDR0_CSI0_SEL_MASK
 0x8000000u

	)

11495 
	#GIS_CH1_ADDR0_CSI0_SEL_SHIFT
 27

	)

11496 
	#GIS_CH1_ADDR0_CSI1_SEL_MASK
 0x10000000u

	)

11497 
	#GIS_CH1_ADDR0_CSI1_SEL_SHIFT
 28

	)

11498 
	#GIS_CH1_ADDR0_PXP_SEL_MASK
 0x20000000u

	)

11499 
	#GIS_CH1_ADDR0_PXP_SEL_SHIFT
 29

	)

11500 
	#GIS_CH1_ADDR0_LCDIF0_SEL_MASK
 0x40000000u

	)

11501 
	#GIS_CH1_ADDR0_LCDIF0_SEL_SHIFT
 30

	)

11502 
	#GIS_CH1_ADDR0_LCDIF1_SEL_MASK
 0x80000000u

	)

11503 
	#GIS_CH1_ADDR0_LCDIF1_SEL_SHIFT
 31

	)

11505 
	#GIS_CH1_ADDR0_SET_ADDR_MASK
 0x7FFFFFFu

	)

11506 
	#GIS_CH1_ADDR0_SET_ADDR_SHIFT
 0

	)

11507 
	#GIS_CH1_ADDR0_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_ADDR0_SET_ADDR_SHIFT
))&
GIS_CH1_ADDR0_SET_ADDR_MASK
)

	)

11508 
	#GIS_CH1_ADDR0_SET_CSI0_SEL_MASK
 0x8000000u

	)

11509 
	#GIS_CH1_ADDR0_SET_CSI0_SEL_SHIFT
 27

	)

11510 
	#GIS_CH1_ADDR0_SET_CSI1_SEL_MASK
 0x10000000u

	)

11511 
	#GIS_CH1_ADDR0_SET_CSI1_SEL_SHIFT
 28

	)

11512 
	#GIS_CH1_ADDR0_SET_PXP_SEL_MASK
 0x20000000u

	)

11513 
	#GIS_CH1_ADDR0_SET_PXP_SEL_SHIFT
 29

	)

11514 
	#GIS_CH1_ADDR0_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

11515 
	#GIS_CH1_ADDR0_SET_LCDIF0_SEL_SHIFT
 30

	)

11516 
	#GIS_CH1_ADDR0_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

11517 
	#GIS_CH1_ADDR0_SET_LCDIF1_SEL_SHIFT
 31

	)

11519 
	#GIS_CH1_ADDR0_CLR_ADDR_MASK
 0x7FFFFFFu

	)

11520 
	#GIS_CH1_ADDR0_CLR_ADDR_SHIFT
 0

	)

11521 
	#GIS_CH1_ADDR0_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_ADDR0_CLR_ADDR_SHIFT
))&
GIS_CH1_ADDR0_CLR_ADDR_MASK
)

	)

11522 
	#GIS_CH1_ADDR0_CLR_CSI0_SEL_MASK
 0x8000000u

	)

11523 
	#GIS_CH1_ADDR0_CLR_CSI0_SEL_SHIFT
 27

	)

11524 
	#GIS_CH1_ADDR0_CLR_CSI1_SEL_MASK
 0x10000000u

	)

11525 
	#GIS_CH1_ADDR0_CLR_CSI1_SEL_SHIFT
 28

	)

11526 
	#GIS_CH1_ADDR0_CLR_PXP_SEL_MASK
 0x20000000u

	)

11527 
	#GIS_CH1_ADDR0_CLR_PXP_SEL_SHIFT
 29

	)

11528 
	#GIS_CH1_ADDR0_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

11529 
	#GIS_CH1_ADDR0_CLR_LCDIF0_SEL_SHIFT
 30

	)

11530 
	#GIS_CH1_ADDR0_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

11531 
	#GIS_CH1_ADDR0_CLR_LCDIF1_SEL_SHIFT
 31

	)

11533 
	#GIS_CH1_ADDR0_TOG_ADDR_MASK
 0x7FFFFFFu

	)

11534 
	#GIS_CH1_ADDR0_TOG_ADDR_SHIFT
 0

	)

11535 
	#GIS_CH1_ADDR0_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_ADDR0_TOG_ADDR_SHIFT
))&
GIS_CH1_ADDR0_TOG_ADDR_MASK
)

	)

11536 
	#GIS_CH1_ADDR0_TOG_CSI0_SEL_MASK
 0x8000000u

	)

11537 
	#GIS_CH1_ADDR0_TOG_CSI0_SEL_SHIFT
 27

	)

11538 
	#GIS_CH1_ADDR0_TOG_CSI1_SEL_MASK
 0x10000000u

	)

11539 
	#GIS_CH1_ADDR0_TOG_CSI1_SEL_SHIFT
 28

	)

11540 
	#GIS_CH1_ADDR0_TOG_PXP_SEL_MASK
 0x20000000u

	)

11541 
	#GIS_CH1_ADDR0_TOG_PXP_SEL_SHIFT
 29

	)

11542 
	#GIS_CH1_ADDR0_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

11543 
	#GIS_CH1_ADDR0_TOG_LCDIF0_SEL_SHIFT
 30

	)

11544 
	#GIS_CH1_ADDR0_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

11545 
	#GIS_CH1_ADDR0_TOG_LCDIF1_SEL_SHIFT
 31

	)

11547 
	#GIS_CH1_DATA0_DATA_MASK
 0xFFFFFFFFu

	)

11548 
	#GIS_CH1_DATA0_DATA_SHIFT
 0

	)

11549 
	#GIS_CH1_DATA0_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_DATA0_DATA_SHIFT
))&
GIS_CH1_DATA0_DATA_MASK
)

	)

11551 
	#GIS_CH1_ADDR1_ADDR_MASK
 0x7FFFFFFu

	)

11552 
	#GIS_CH1_ADDR1_ADDR_SHIFT
 0

	)

11553 
	#GIS_CH1_ADDR1_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_ADDR1_ADDR_SHIFT
))&
GIS_CH1_ADDR1_ADDR_MASK
)

	)

11554 
	#GIS_CH1_ADDR1_CSI0_SEL_MASK
 0x8000000u

	)

11555 
	#GIS_CH1_ADDR1_CSI0_SEL_SHIFT
 27

	)

11556 
	#GIS_CH1_ADDR1_CSI1_SEL_MASK
 0x10000000u

	)

11557 
	#GIS_CH1_ADDR1_CSI1_SEL_SHIFT
 28

	)

11558 
	#GIS_CH1_ADDR1_PXP_SEL_MASK
 0x20000000u

	)

11559 
	#GIS_CH1_ADDR1_PXP_SEL_SHIFT
 29

	)

11560 
	#GIS_CH1_ADDR1_LCDIF0_SEL_MASK
 0x40000000u

	)

11561 
	#GIS_CH1_ADDR1_LCDIF0_SEL_SHIFT
 30

	)

11562 
	#GIS_CH1_ADDR1_LCDIF1_SEL_MASK
 0x80000000u

	)

11563 
	#GIS_CH1_ADDR1_LCDIF1_SEL_SHIFT
 31

	)

11565 
	#GIS_CH1_ADDR1_SET_ADDR_MASK
 0x7FFFFFFu

	)

11566 
	#GIS_CH1_ADDR1_SET_ADDR_SHIFT
 0

	)

11567 
	#GIS_CH1_ADDR1_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_ADDR1_SET_ADDR_SHIFT
))&
GIS_CH1_ADDR1_SET_ADDR_MASK
)

	)

11568 
	#GIS_CH1_ADDR1_SET_CSI0_SEL_MASK
 0x8000000u

	)

11569 
	#GIS_CH1_ADDR1_SET_CSI0_SEL_SHIFT
 27

	)

11570 
	#GIS_CH1_ADDR1_SET_CSI1_SEL_MASK
 0x10000000u

	)

11571 
	#GIS_CH1_ADDR1_SET_CSI1_SEL_SHIFT
 28

	)

11572 
	#GIS_CH1_ADDR1_SET_PXP_SEL_MASK
 0x20000000u

	)

11573 
	#GIS_CH1_ADDR1_SET_PXP_SEL_SHIFT
 29

	)

11574 
	#GIS_CH1_ADDR1_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

11575 
	#GIS_CH1_ADDR1_SET_LCDIF0_SEL_SHIFT
 30

	)

11576 
	#GIS_CH1_ADDR1_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

11577 
	#GIS_CH1_ADDR1_SET_LCDIF1_SEL_SHIFT
 31

	)

11579 
	#GIS_CH1_ADDR1_CLR_ADDR_MASK
 0x7FFFFFFu

	)

11580 
	#GIS_CH1_ADDR1_CLR_ADDR_SHIFT
 0

	)

11581 
	#GIS_CH1_ADDR1_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_ADDR1_CLR_ADDR_SHIFT
))&
GIS_CH1_ADDR1_CLR_ADDR_MASK
)

	)

11582 
	#GIS_CH1_ADDR1_CLR_CSI0_SEL_MASK
 0x8000000u

	)

11583 
	#GIS_CH1_ADDR1_CLR_CSI0_SEL_SHIFT
 27

	)

11584 
	#GIS_CH1_ADDR1_CLR_CSI1_SEL_MASK
 0x10000000u

	)

11585 
	#GIS_CH1_ADDR1_CLR_CSI1_SEL_SHIFT
 28

	)

11586 
	#GIS_CH1_ADDR1_CLR_PXP_SEL_MASK
 0x20000000u

	)

11587 
	#GIS_CH1_ADDR1_CLR_PXP_SEL_SHIFT
 29

	)

11588 
	#GIS_CH1_ADDR1_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

11589 
	#GIS_CH1_ADDR1_CLR_LCDIF0_SEL_SHIFT
 30

	)

11590 
	#GIS_CH1_ADDR1_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

11591 
	#GIS_CH1_ADDR1_CLR_LCDIF1_SEL_SHIFT
 31

	)

11593 
	#GIS_CH1_ADDR1_TOG_ADDR_MASK
 0x7FFFFFFu

	)

11594 
	#GIS_CH1_ADDR1_TOG_ADDR_SHIFT
 0

	)

11595 
	#GIS_CH1_ADDR1_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_ADDR1_TOG_ADDR_SHIFT
))&
GIS_CH1_ADDR1_TOG_ADDR_MASK
)

	)

11596 
	#GIS_CH1_ADDR1_TOG_CSI0_SEL_MASK
 0x8000000u

	)

11597 
	#GIS_CH1_ADDR1_TOG_CSI0_SEL_SHIFT
 27

	)

11598 
	#GIS_CH1_ADDR1_TOG_CSI1_SEL_MASK
 0x10000000u

	)

11599 
	#GIS_CH1_ADDR1_TOG_CSI1_SEL_SHIFT
 28

	)

11600 
	#GIS_CH1_ADDR1_TOG_PXP_SEL_MASK
 0x20000000u

	)

11601 
	#GIS_CH1_ADDR1_TOG_PXP_SEL_SHIFT
 29

	)

11602 
	#GIS_CH1_ADDR1_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

11603 
	#GIS_CH1_ADDR1_TOG_LCDIF0_SEL_SHIFT
 30

	)

11604 
	#GIS_CH1_ADDR1_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

11605 
	#GIS_CH1_ADDR1_TOG_LCDIF1_SEL_SHIFT
 31

	)

11607 
	#GIS_CH1_DATA1_DATA_MASK
 0xFFFFFFFFu

	)

11608 
	#GIS_CH1_DATA1_DATA_SHIFT
 0

	)

11609 
	#GIS_CH1_DATA1_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_DATA1_DATA_SHIFT
))&
GIS_CH1_DATA1_DATA_MASK
)

	)

11611 
	#GIS_CH1_ADDR2_ADDR_MASK
 0x7FFFFFFu

	)

11612 
	#GIS_CH1_ADDR2_ADDR_SHIFT
 0

	)

11613 
	#GIS_CH1_ADDR2_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_ADDR2_ADDR_SHIFT
))&
GIS_CH1_ADDR2_ADDR_MASK
)

	)

11614 
	#GIS_CH1_ADDR2_CSI0_SEL_MASK
 0x8000000u

	)

11615 
	#GIS_CH1_ADDR2_CSI0_SEL_SHIFT
 27

	)

11616 
	#GIS_CH1_ADDR2_CSI1_SEL_MASK
 0x10000000u

	)

11617 
	#GIS_CH1_ADDR2_CSI1_SEL_SHIFT
 28

	)

11618 
	#GIS_CH1_ADDR2_PXP_SEL_MASK
 0x20000000u

	)

11619 
	#GIS_CH1_ADDR2_PXP_SEL_SHIFT
 29

	)

11620 
	#GIS_CH1_ADDR2_LCDIF0_SEL_MASK
 0x40000000u

	)

11621 
	#GIS_CH1_ADDR2_LCDIF0_SEL_SHIFT
 30

	)

11622 
	#GIS_CH1_ADDR2_LCDIF1_SEL_MASK
 0x80000000u

	)

11623 
	#GIS_CH1_ADDR2_LCDIF1_SEL_SHIFT
 31

	)

11625 
	#GIS_CH1_ADDR2_SET_ADDR_MASK
 0x7FFFFFFu

	)

11626 
	#GIS_CH1_ADDR2_SET_ADDR_SHIFT
 0

	)

11627 
	#GIS_CH1_ADDR2_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_ADDR2_SET_ADDR_SHIFT
))&
GIS_CH1_ADDR2_SET_ADDR_MASK
)

	)

11628 
	#GIS_CH1_ADDR2_SET_CSI0_SEL_MASK
 0x8000000u

	)

11629 
	#GIS_CH1_ADDR2_SET_CSI0_SEL_SHIFT
 27

	)

11630 
	#GIS_CH1_ADDR2_SET_CSI1_SEL_MASK
 0x10000000u

	)

11631 
	#GIS_CH1_ADDR2_SET_CSI1_SEL_SHIFT
 28

	)

11632 
	#GIS_CH1_ADDR2_SET_PXP_SEL_MASK
 0x20000000u

	)

11633 
	#GIS_CH1_ADDR2_SET_PXP_SEL_SHIFT
 29

	)

11634 
	#GIS_CH1_ADDR2_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

11635 
	#GIS_CH1_ADDR2_SET_LCDIF0_SEL_SHIFT
 30

	)

11636 
	#GIS_CH1_ADDR2_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

11637 
	#GIS_CH1_ADDR2_SET_LCDIF1_SEL_SHIFT
 31

	)

11639 
	#GIS_CH1_ADDR2_CLR_ADDR_MASK
 0x7FFFFFFu

	)

11640 
	#GIS_CH1_ADDR2_CLR_ADDR_SHIFT
 0

	)

11641 
	#GIS_CH1_ADDR2_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_ADDR2_CLR_ADDR_SHIFT
))&
GIS_CH1_ADDR2_CLR_ADDR_MASK
)

	)

11642 
	#GIS_CH1_ADDR2_CLR_CSI0_SEL_MASK
 0x8000000u

	)

11643 
	#GIS_CH1_ADDR2_CLR_CSI0_SEL_SHIFT
 27

	)

11644 
	#GIS_CH1_ADDR2_CLR_CSI1_SEL_MASK
 0x10000000u

	)

11645 
	#GIS_CH1_ADDR2_CLR_CSI1_SEL_SHIFT
 28

	)

11646 
	#GIS_CH1_ADDR2_CLR_PXP_SEL_MASK
 0x20000000u

	)

11647 
	#GIS_CH1_ADDR2_CLR_PXP_SEL_SHIFT
 29

	)

11648 
	#GIS_CH1_ADDR2_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

11649 
	#GIS_CH1_ADDR2_CLR_LCDIF0_SEL_SHIFT
 30

	)

11650 
	#GIS_CH1_ADDR2_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

11651 
	#GIS_CH1_ADDR2_CLR_LCDIF1_SEL_SHIFT
 31

	)

11653 
	#GIS_CH1_ADDR2_TOG_ADDR_MASK
 0x7FFFFFFu

	)

11654 
	#GIS_CH1_ADDR2_TOG_ADDR_SHIFT
 0

	)

11655 
	#GIS_CH1_ADDR2_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_ADDR2_TOG_ADDR_SHIFT
))&
GIS_CH1_ADDR2_TOG_ADDR_MASK
)

	)

11656 
	#GIS_CH1_ADDR2_TOG_CSI0_SEL_MASK
 0x8000000u

	)

11657 
	#GIS_CH1_ADDR2_TOG_CSI0_SEL_SHIFT
 27

	)

11658 
	#GIS_CH1_ADDR2_TOG_CSI1_SEL_MASK
 0x10000000u

	)

11659 
	#GIS_CH1_ADDR2_TOG_CSI1_SEL_SHIFT
 28

	)

11660 
	#GIS_CH1_ADDR2_TOG_PXP_SEL_MASK
 0x20000000u

	)

11661 
	#GIS_CH1_ADDR2_TOG_PXP_SEL_SHIFT
 29

	)

11662 
	#GIS_CH1_ADDR2_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

11663 
	#GIS_CH1_ADDR2_TOG_LCDIF0_SEL_SHIFT
 30

	)

11664 
	#GIS_CH1_ADDR2_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

11665 
	#GIS_CH1_ADDR2_TOG_LCDIF1_SEL_SHIFT
 31

	)

11667 
	#GIS_CH1_DATA2_DATA_MASK
 0xFFFFFFFFu

	)

11668 
	#GIS_CH1_DATA2_DATA_SHIFT
 0

	)

11669 
	#GIS_CH1_DATA2_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_DATA2_DATA_SHIFT
))&
GIS_CH1_DATA2_DATA_MASK
)

	)

11671 
	#GIS_CH1_ADDR3_ADDR_MASK
 0x7FFFFFFu

	)

11672 
	#GIS_CH1_ADDR3_ADDR_SHIFT
 0

	)

11673 
	#GIS_CH1_ADDR3_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_ADDR3_ADDR_SHIFT
))&
GIS_CH1_ADDR3_ADDR_MASK
)

	)

11674 
	#GIS_CH1_ADDR3_CSI0_SEL_MASK
 0x8000000u

	)

11675 
	#GIS_CH1_ADDR3_CSI0_SEL_SHIFT
 27

	)

11676 
	#GIS_CH1_ADDR3_CSI1_SEL_MASK
 0x10000000u

	)

11677 
	#GIS_CH1_ADDR3_CSI1_SEL_SHIFT
 28

	)

11678 
	#GIS_CH1_ADDR3_PXP_SEL_MASK
 0x20000000u

	)

11679 
	#GIS_CH1_ADDR3_PXP_SEL_SHIFT
 29

	)

11680 
	#GIS_CH1_ADDR3_LCDIF0_SEL_MASK
 0x40000000u

	)

11681 
	#GIS_CH1_ADDR3_LCDIF0_SEL_SHIFT
 30

	)

11682 
	#GIS_CH1_ADDR3_LCDIF1_SEL_MASK
 0x80000000u

	)

11683 
	#GIS_CH1_ADDR3_LCDIF1_SEL_SHIFT
 31

	)

11685 
	#GIS_CH1_ADDR3_SET_ADDR_MASK
 0x7FFFFFFu

	)

11686 
	#GIS_CH1_ADDR3_SET_ADDR_SHIFT
 0

	)

11687 
	#GIS_CH1_ADDR3_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_ADDR3_SET_ADDR_SHIFT
))&
GIS_CH1_ADDR3_SET_ADDR_MASK
)

	)

11688 
	#GIS_CH1_ADDR3_SET_CSI0_SEL_MASK
 0x8000000u

	)

11689 
	#GIS_CH1_ADDR3_SET_CSI0_SEL_SHIFT
 27

	)

11690 
	#GIS_CH1_ADDR3_SET_CSI1_SEL_MASK
 0x10000000u

	)

11691 
	#GIS_CH1_ADDR3_SET_CSI1_SEL_SHIFT
 28

	)

11692 
	#GIS_CH1_ADDR3_SET_PXP_SEL_MASK
 0x20000000u

	)

11693 
	#GIS_CH1_ADDR3_SET_PXP_SEL_SHIFT
 29

	)

11694 
	#GIS_CH1_ADDR3_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

11695 
	#GIS_CH1_ADDR3_SET_LCDIF0_SEL_SHIFT
 30

	)

11696 
	#GIS_CH1_ADDR3_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

11697 
	#GIS_CH1_ADDR3_SET_LCDIF1_SEL_SHIFT
 31

	)

11699 
	#GIS_CH1_ADDR3_CLR_ADDR_MASK
 0x7FFFFFFu

	)

11700 
	#GIS_CH1_ADDR3_CLR_ADDR_SHIFT
 0

	)

11701 
	#GIS_CH1_ADDR3_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_ADDR3_CLR_ADDR_SHIFT
))&
GIS_CH1_ADDR3_CLR_ADDR_MASK
)

	)

11702 
	#GIS_CH1_ADDR3_CLR_CSI0_SEL_MASK
 0x8000000u

	)

11703 
	#GIS_CH1_ADDR3_CLR_CSI0_SEL_SHIFT
 27

	)

11704 
	#GIS_CH1_ADDR3_CLR_CSI1_SEL_MASK
 0x10000000u

	)

11705 
	#GIS_CH1_ADDR3_CLR_CSI1_SEL_SHIFT
 28

	)

11706 
	#GIS_CH1_ADDR3_CLR_PXP_SEL_MASK
 0x20000000u

	)

11707 
	#GIS_CH1_ADDR3_CLR_PXP_SEL_SHIFT
 29

	)

11708 
	#GIS_CH1_ADDR3_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

11709 
	#GIS_CH1_ADDR3_CLR_LCDIF0_SEL_SHIFT
 30

	)

11710 
	#GIS_CH1_ADDR3_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

11711 
	#GIS_CH1_ADDR3_CLR_LCDIF1_SEL_SHIFT
 31

	)

11713 
	#GIS_CH1_ADDR3_TOG_ADDR_MASK
 0x7FFFFFFu

	)

11714 
	#GIS_CH1_ADDR3_TOG_ADDR_SHIFT
 0

	)

11715 
	#GIS_CH1_ADDR3_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_ADDR3_TOG_ADDR_SHIFT
))&
GIS_CH1_ADDR3_TOG_ADDR_MASK
)

	)

11716 
	#GIS_CH1_ADDR3_TOG_CSI0_SEL_MASK
 0x8000000u

	)

11717 
	#GIS_CH1_ADDR3_TOG_CSI0_SEL_SHIFT
 27

	)

11718 
	#GIS_CH1_ADDR3_TOG_CSI1_SEL_MASK
 0x10000000u

	)

11719 
	#GIS_CH1_ADDR3_TOG_CSI1_SEL_SHIFT
 28

	)

11720 
	#GIS_CH1_ADDR3_TOG_PXP_SEL_MASK
 0x20000000u

	)

11721 
	#GIS_CH1_ADDR3_TOG_PXP_SEL_SHIFT
 29

	)

11722 
	#GIS_CH1_ADDR3_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

11723 
	#GIS_CH1_ADDR3_TOG_LCDIF0_SEL_SHIFT
 30

	)

11724 
	#GIS_CH1_ADDR3_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

11725 
	#GIS_CH1_ADDR3_TOG_LCDIF1_SEL_SHIFT
 31

	)

11727 
	#GIS_CH1_DATA3_DATA_MASK
 0xFFFFFFFFu

	)

11728 
	#GIS_CH1_DATA3_DATA_SHIFT
 0

	)

11729 
	#GIS_CH1_DATA3_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH1_DATA3_DATA_SHIFT
))&
GIS_CH1_DATA3_DATA_MASK
)

	)

11731 
	#GIS_CH2_CTRL_CMD0_OPCODE_MASK
 0xFu

	)

11732 
	#GIS_CH2_CTRL_CMD0_OPCODE_SHIFT
 0

	)

11733 
	#GIS_CH2_CTRL_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_CMD0_OPCODE_SHIFT
))&
GIS_CH2_CTRL_CMD0_OPCODE_MASK
)

	)

11734 
	#GIS_CH2_CTRL_CMD0_ALU_MASK
 0x70u

	)

11735 
	#GIS_CH2_CTRL_CMD0_ALU_SHIFT
 4

	)

11736 
	#GIS_CH2_CTRL_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_CMD0_ALU_SHIFT
))&
GIS_CH2_CTRL_CMD0_ALU_MASK
)

	)

11737 
	#GIS_CH2_CTRL_CMD0_ACC_NEG_MASK
 0x80u

	)

11738 
	#GIS_CH2_CTRL_CMD0_ACC_NEG_SHIFT
 7

	)

11739 
	#GIS_CH2_CTRL_CMD1_OPCODE_MASK
 0xF00u

	)

11740 
	#GIS_CH2_CTRL_CMD1_OPCODE_SHIFT
 8

	)

11741 
	#GIS_CH2_CTRL_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_CMD1_OPCODE_SHIFT
))&
GIS_CH2_CTRL_CMD1_OPCODE_MASK
)

	)

11742 
	#GIS_CH2_CTRL_CMD1_ALU_MASK
 0x7000u

	)

11743 
	#GIS_CH2_CTRL_CMD1_ALU_SHIFT
 12

	)

11744 
	#GIS_CH2_CTRL_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_CMD1_ALU_SHIFT
))&
GIS_CH2_CTRL_CMD1_ALU_MASK
)

	)

11745 
	#GIS_CH2_CTRL_CMD1_ACC_NEG_MASK
 0x8000u

	)

11746 
	#GIS_CH2_CTRL_CMD1_ACC_NEG_SHIFT
 15

	)

11747 
	#GIS_CH2_CTRL_CMD2_OPCODE_MASK
 0xF0000u

	)

11748 
	#GIS_CH2_CTRL_CMD2_OPCODE_SHIFT
 16

	)

11749 
	#GIS_CH2_CTRL_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_CMD2_OPCODE_SHIFT
))&
GIS_CH2_CTRL_CMD2_OPCODE_MASK
)

	)

11750 
	#GIS_CH2_CTRL_CMD2_ALU_MASK
 0x700000u

	)

11751 
	#GIS_CH2_CTRL_CMD2_ALU_SHIFT
 20

	)

11752 
	#GIS_CH2_CTRL_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_CMD2_ALU_SHIFT
))&
GIS_CH2_CTRL_CMD2_ALU_MASK
)

	)

11753 
	#GIS_CH2_CTRL_CMD2_ACC_NEG_MASK
 0x800000u

	)

11754 
	#GIS_CH2_CTRL_CMD2_ACC_NEG_SHIFT
 23

	)

11755 
	#GIS_CH2_CTRL_CMD3_OPCODE_MASK
 0xF000000u

	)

11756 
	#GIS_CH2_CTRL_CMD3_OPCODE_SHIFT
 24

	)

11757 
	#GIS_CH2_CTRL_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_CMD3_OPCODE_SHIFT
))&
GIS_CH2_CTRL_CMD3_OPCODE_MASK
)

	)

11758 
	#GIS_CH2_CTRL_CMD3_ALU_MASK
 0x70000000u

	)

11759 
	#GIS_CH2_CTRL_CMD3_ALU_SHIFT
 28

	)

11760 
	#GIS_CH2_CTRL_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_CMD3_ALU_SHIFT
))&
GIS_CH2_CTRL_CMD3_ALU_MASK
)

	)

11761 
	#GIS_CH2_CTRL_CMD3_ACC_NEG_MASK
 0x80000000u

	)

11762 
	#GIS_CH2_CTRL_CMD3_ACC_NEG_SHIFT
 31

	)

11764 
	#GIS_CH2_CTRL_SET_CMD0_OPCODE_MASK
 0xFu

	)

11765 
	#GIS_CH2_CTRL_SET_CMD0_OPCODE_SHIFT
 0

	)

11766 
	#GIS_CH2_CTRL_SET_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_SET_CMD0_OPCODE_SHIFT
))&
GIS_CH2_CTRL_SET_CMD0_OPCODE_MASK
)

	)

11767 
	#GIS_CH2_CTRL_SET_CMD0_ALU_MASK
 0x70u

	)

11768 
	#GIS_CH2_CTRL_SET_CMD0_ALU_SHIFT
 4

	)

11769 
	#GIS_CH2_CTRL_SET_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_SET_CMD0_ALU_SHIFT
))&
GIS_CH2_CTRL_SET_CMD0_ALU_MASK
)

	)

11770 
	#GIS_CH2_CTRL_SET_CMD0_ACC_NEG_MASK
 0x80u

	)

11771 
	#GIS_CH2_CTRL_SET_CMD0_ACC_NEG_SHIFT
 7

	)

11772 
	#GIS_CH2_CTRL_SET_CMD1_OPCODE_MASK
 0xF00u

	)

11773 
	#GIS_CH2_CTRL_SET_CMD1_OPCODE_SHIFT
 8

	)

11774 
	#GIS_CH2_CTRL_SET_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_SET_CMD1_OPCODE_SHIFT
))&
GIS_CH2_CTRL_SET_CMD1_OPCODE_MASK
)

	)

11775 
	#GIS_CH2_CTRL_SET_CMD1_ALU_MASK
 0x7000u

	)

11776 
	#GIS_CH2_CTRL_SET_CMD1_ALU_SHIFT
 12

	)

11777 
	#GIS_CH2_CTRL_SET_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_SET_CMD1_ALU_SHIFT
))&
GIS_CH2_CTRL_SET_CMD1_ALU_MASK
)

	)

11778 
	#GIS_CH2_CTRL_SET_CMD1_ACC_NEG_MASK
 0x8000u

	)

11779 
	#GIS_CH2_CTRL_SET_CMD1_ACC_NEG_SHIFT
 15

	)

11780 
	#GIS_CH2_CTRL_SET_CMD2_OPCODE_MASK
 0xF0000u

	)

11781 
	#GIS_CH2_CTRL_SET_CMD2_OPCODE_SHIFT
 16

	)

11782 
	#GIS_CH2_CTRL_SET_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_SET_CMD2_OPCODE_SHIFT
))&
GIS_CH2_CTRL_SET_CMD2_OPCODE_MASK
)

	)

11783 
	#GIS_CH2_CTRL_SET_CMD2_ALU_MASK
 0x700000u

	)

11784 
	#GIS_CH2_CTRL_SET_CMD2_ALU_SHIFT
 20

	)

11785 
	#GIS_CH2_CTRL_SET_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_SET_CMD2_ALU_SHIFT
))&
GIS_CH2_CTRL_SET_CMD2_ALU_MASK
)

	)

11786 
	#GIS_CH2_CTRL_SET_CMD2_ACC_NEG_MASK
 0x800000u

	)

11787 
	#GIS_CH2_CTRL_SET_CMD2_ACC_NEG_SHIFT
 23

	)

11788 
	#GIS_CH2_CTRL_SET_CMD3_OPCODE_MASK
 0xF000000u

	)

11789 
	#GIS_CH2_CTRL_SET_CMD3_OPCODE_SHIFT
 24

	)

11790 
	#GIS_CH2_CTRL_SET_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_SET_CMD3_OPCODE_SHIFT
))&
GIS_CH2_CTRL_SET_CMD3_OPCODE_MASK
)

	)

11791 
	#GIS_CH2_CTRL_SET_CMD3_ALU_MASK
 0x70000000u

	)

11792 
	#GIS_CH2_CTRL_SET_CMD3_ALU_SHIFT
 28

	)

11793 
	#GIS_CH2_CTRL_SET_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_SET_CMD3_ALU_SHIFT
))&
GIS_CH2_CTRL_SET_CMD3_ALU_MASK
)

	)

11794 
	#GIS_CH2_CTRL_SET_CMD3_ACC_NEG_MASK
 0x80000000u

	)

11795 
	#GIS_CH2_CTRL_SET_CMD3_ACC_NEG_SHIFT
 31

	)

11797 
	#GIS_CH2_CTRL_CLR_CMD0_OPCODE_MASK
 0xFu

	)

11798 
	#GIS_CH2_CTRL_CLR_CMD0_OPCODE_SHIFT
 0

	)

11799 
	#GIS_CH2_CTRL_CLR_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_CLR_CMD0_OPCODE_SHIFT
))&
GIS_CH2_CTRL_CLR_CMD0_OPCODE_MASK
)

	)

11800 
	#GIS_CH2_CTRL_CLR_CMD0_ALU_MASK
 0x70u

	)

11801 
	#GIS_CH2_CTRL_CLR_CMD0_ALU_SHIFT
 4

	)

11802 
	#GIS_CH2_CTRL_CLR_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_CLR_CMD0_ALU_SHIFT
))&
GIS_CH2_CTRL_CLR_CMD0_ALU_MASK
)

	)

11803 
	#GIS_CH2_CTRL_CLR_CMD0_ACC_NEG_MASK
 0x80u

	)

11804 
	#GIS_CH2_CTRL_CLR_CMD0_ACC_NEG_SHIFT
 7

	)

11805 
	#GIS_CH2_CTRL_CLR_CMD1_OPCODE_MASK
 0xF00u

	)

11806 
	#GIS_CH2_CTRL_CLR_CMD1_OPCODE_SHIFT
 8

	)

11807 
	#GIS_CH2_CTRL_CLR_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_CLR_CMD1_OPCODE_SHIFT
))&
GIS_CH2_CTRL_CLR_CMD1_OPCODE_MASK
)

	)

11808 
	#GIS_CH2_CTRL_CLR_CMD1_ALU_MASK
 0x7000u

	)

11809 
	#GIS_CH2_CTRL_CLR_CMD1_ALU_SHIFT
 12

	)

11810 
	#GIS_CH2_CTRL_CLR_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_CLR_CMD1_ALU_SHIFT
))&
GIS_CH2_CTRL_CLR_CMD1_ALU_MASK
)

	)

11811 
	#GIS_CH2_CTRL_CLR_CMD1_ACC_NEG_MASK
 0x8000u

	)

11812 
	#GIS_CH2_CTRL_CLR_CMD1_ACC_NEG_SHIFT
 15

	)

11813 
	#GIS_CH2_CTRL_CLR_CMD2_OPCODE_MASK
 0xF0000u

	)

11814 
	#GIS_CH2_CTRL_CLR_CMD2_OPCODE_SHIFT
 16

	)

11815 
	#GIS_CH2_CTRL_CLR_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_CLR_CMD2_OPCODE_SHIFT
))&
GIS_CH2_CTRL_CLR_CMD2_OPCODE_MASK
)

	)

11816 
	#GIS_CH2_CTRL_CLR_CMD2_ALU_MASK
 0x700000u

	)

11817 
	#GIS_CH2_CTRL_CLR_CMD2_ALU_SHIFT
 20

	)

11818 
	#GIS_CH2_CTRL_CLR_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_CLR_CMD2_ALU_SHIFT
))&
GIS_CH2_CTRL_CLR_CMD2_ALU_MASK
)

	)

11819 
	#GIS_CH2_CTRL_CLR_CMD2_ACC_NEG_MASK
 0x800000u

	)

11820 
	#GIS_CH2_CTRL_CLR_CMD2_ACC_NEG_SHIFT
 23

	)

11821 
	#GIS_CH2_CTRL_CLR_CMD3_OPCODE_MASK
 0xF000000u

	)

11822 
	#GIS_CH2_CTRL_CLR_CMD3_OPCODE_SHIFT
 24

	)

11823 
	#GIS_CH2_CTRL_CLR_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_CLR_CMD3_OPCODE_SHIFT
))&
GIS_CH2_CTRL_CLR_CMD3_OPCODE_MASK
)

	)

11824 
	#GIS_CH2_CTRL_CLR_CMD3_ALU_MASK
 0x70000000u

	)

11825 
	#GIS_CH2_CTRL_CLR_CMD3_ALU_SHIFT
 28

	)

11826 
	#GIS_CH2_CTRL_CLR_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_CLR_CMD3_ALU_SHIFT
))&
GIS_CH2_CTRL_CLR_CMD3_ALU_MASK
)

	)

11827 
	#GIS_CH2_CTRL_CLR_CMD3_ACC_NEG_MASK
 0x80000000u

	)

11828 
	#GIS_CH2_CTRL_CLR_CMD3_ACC_NEG_SHIFT
 31

	)

11830 
	#GIS_CH2_CTRL_TOG_CMD0_OPCODE_MASK
 0xFu

	)

11831 
	#GIS_CH2_CTRL_TOG_CMD0_OPCODE_SHIFT
 0

	)

11832 
	#GIS_CH2_CTRL_TOG_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_TOG_CMD0_OPCODE_SHIFT
))&
GIS_CH2_CTRL_TOG_CMD0_OPCODE_MASK
)

	)

11833 
	#GIS_CH2_CTRL_TOG_CMD0_ALU_MASK
 0x70u

	)

11834 
	#GIS_CH2_CTRL_TOG_CMD0_ALU_SHIFT
 4

	)

11835 
	#GIS_CH2_CTRL_TOG_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_TOG_CMD0_ALU_SHIFT
))&
GIS_CH2_CTRL_TOG_CMD0_ALU_MASK
)

	)

11836 
	#GIS_CH2_CTRL_TOG_CMD0_ACC_NEG_MASK
 0x80u

	)

11837 
	#GIS_CH2_CTRL_TOG_CMD0_ACC_NEG_SHIFT
 7

	)

11838 
	#GIS_CH2_CTRL_TOG_CMD1_OPCODE_MASK
 0xF00u

	)

11839 
	#GIS_CH2_CTRL_TOG_CMD1_OPCODE_SHIFT
 8

	)

11840 
	#GIS_CH2_CTRL_TOG_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_TOG_CMD1_OPCODE_SHIFT
))&
GIS_CH2_CTRL_TOG_CMD1_OPCODE_MASK
)

	)

11841 
	#GIS_CH2_CTRL_TOG_CMD1_ALU_MASK
 0x7000u

	)

11842 
	#GIS_CH2_CTRL_TOG_CMD1_ALU_SHIFT
 12

	)

11843 
	#GIS_CH2_CTRL_TOG_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_TOG_CMD1_ALU_SHIFT
))&
GIS_CH2_CTRL_TOG_CMD1_ALU_MASK
)

	)

11844 
	#GIS_CH2_CTRL_TOG_CMD1_ACC_NEG_MASK
 0x8000u

	)

11845 
	#GIS_CH2_CTRL_TOG_CMD1_ACC_NEG_SHIFT
 15

	)

11846 
	#GIS_CH2_CTRL_TOG_CMD2_OPCODE_MASK
 0xF0000u

	)

11847 
	#GIS_CH2_CTRL_TOG_CMD2_OPCODE_SHIFT
 16

	)

11848 
	#GIS_CH2_CTRL_TOG_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_TOG_CMD2_OPCODE_SHIFT
))&
GIS_CH2_CTRL_TOG_CMD2_OPCODE_MASK
)

	)

11849 
	#GIS_CH2_CTRL_TOG_CMD2_ALU_MASK
 0x700000u

	)

11850 
	#GIS_CH2_CTRL_TOG_CMD2_ALU_SHIFT
 20

	)

11851 
	#GIS_CH2_CTRL_TOG_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_TOG_CMD2_ALU_SHIFT
))&
GIS_CH2_CTRL_TOG_CMD2_ALU_MASK
)

	)

11852 
	#GIS_CH2_CTRL_TOG_CMD2_ACC_NEG_MASK
 0x800000u

	)

11853 
	#GIS_CH2_CTRL_TOG_CMD2_ACC_NEG_SHIFT
 23

	)

11854 
	#GIS_CH2_CTRL_TOG_CMD3_OPCODE_MASK
 0xF000000u

	)

11855 
	#GIS_CH2_CTRL_TOG_CMD3_OPCODE_SHIFT
 24

	)

11856 
	#GIS_CH2_CTRL_TOG_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_TOG_CMD3_OPCODE_SHIFT
))&
GIS_CH2_CTRL_TOG_CMD3_OPCODE_MASK
)

	)

11857 
	#GIS_CH2_CTRL_TOG_CMD3_ALU_MASK
 0x70000000u

	)

11858 
	#GIS_CH2_CTRL_TOG_CMD3_ALU_SHIFT
 28

	)

11859 
	#GIS_CH2_CTRL_TOG_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_CTRL_TOG_CMD3_ALU_SHIFT
))&
GIS_CH2_CTRL_TOG_CMD3_ALU_MASK
)

	)

11860 
	#GIS_CH2_CTRL_TOG_CMD3_ACC_NEG_MASK
 0x80000000u

	)

11861 
	#GIS_CH2_CTRL_TOG_CMD3_ACC_NEG_SHIFT
 31

	)

11863 
	#GIS_CH2_ADDR0_ADDR_MASK
 0x7FFFFFFu

	)

11864 
	#GIS_CH2_ADDR0_ADDR_SHIFT
 0

	)

11865 
	#GIS_CH2_ADDR0_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_ADDR0_ADDR_SHIFT
))&
GIS_CH2_ADDR0_ADDR_MASK
)

	)

11866 
	#GIS_CH2_ADDR0_CSI0_SEL_MASK
 0x8000000u

	)

11867 
	#GIS_CH2_ADDR0_CSI0_SEL_SHIFT
 27

	)

11868 
	#GIS_CH2_ADDR0_CSI1_SEL_MASK
 0x10000000u

	)

11869 
	#GIS_CH2_ADDR0_CSI1_SEL_SHIFT
 28

	)

11870 
	#GIS_CH2_ADDR0_PXP_SEL_MASK
 0x20000000u

	)

11871 
	#GIS_CH2_ADDR0_PXP_SEL_SHIFT
 29

	)

11872 
	#GIS_CH2_ADDR0_LCDIF0_SEL_MASK
 0x40000000u

	)

11873 
	#GIS_CH2_ADDR0_LCDIF0_SEL_SHIFT
 30

	)

11874 
	#GIS_CH2_ADDR0_LCDIF1_SEL_MASK
 0x80000000u

	)

11875 
	#GIS_CH2_ADDR0_LCDIF1_SEL_SHIFT
 31

	)

11877 
	#GIS_CH2_ADDR0_SET_ADDR_MASK
 0x7FFFFFFu

	)

11878 
	#GIS_CH2_ADDR0_SET_ADDR_SHIFT
 0

	)

11879 
	#GIS_CH2_ADDR0_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_ADDR0_SET_ADDR_SHIFT
))&
GIS_CH2_ADDR0_SET_ADDR_MASK
)

	)

11880 
	#GIS_CH2_ADDR0_SET_CSI0_SEL_MASK
 0x8000000u

	)

11881 
	#GIS_CH2_ADDR0_SET_CSI0_SEL_SHIFT
 27

	)

11882 
	#GIS_CH2_ADDR0_SET_CSI1_SEL_MASK
 0x10000000u

	)

11883 
	#GIS_CH2_ADDR0_SET_CSI1_SEL_SHIFT
 28

	)

11884 
	#GIS_CH2_ADDR0_SET_PXP_SEL_MASK
 0x20000000u

	)

11885 
	#GIS_CH2_ADDR0_SET_PXP_SEL_SHIFT
 29

	)

11886 
	#GIS_CH2_ADDR0_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

11887 
	#GIS_CH2_ADDR0_SET_LCDIF0_SEL_SHIFT
 30

	)

11888 
	#GIS_CH2_ADDR0_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

11889 
	#GIS_CH2_ADDR0_SET_LCDIF1_SEL_SHIFT
 31

	)

11891 
	#GIS_CH2_ADDR0_CLR_ADDR_MASK
 0x7FFFFFFu

	)

11892 
	#GIS_CH2_ADDR0_CLR_ADDR_SHIFT
 0

	)

11893 
	#GIS_CH2_ADDR0_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_ADDR0_CLR_ADDR_SHIFT
))&
GIS_CH2_ADDR0_CLR_ADDR_MASK
)

	)

11894 
	#GIS_CH2_ADDR0_CLR_CSI0_SEL_MASK
 0x8000000u

	)

11895 
	#GIS_CH2_ADDR0_CLR_CSI0_SEL_SHIFT
 27

	)

11896 
	#GIS_CH2_ADDR0_CLR_CSI1_SEL_MASK
 0x10000000u

	)

11897 
	#GIS_CH2_ADDR0_CLR_CSI1_SEL_SHIFT
 28

	)

11898 
	#GIS_CH2_ADDR0_CLR_PXP_SEL_MASK
 0x20000000u

	)

11899 
	#GIS_CH2_ADDR0_CLR_PXP_SEL_SHIFT
 29

	)

11900 
	#GIS_CH2_ADDR0_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

11901 
	#GIS_CH2_ADDR0_CLR_LCDIF0_SEL_SHIFT
 30

	)

11902 
	#GIS_CH2_ADDR0_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

11903 
	#GIS_CH2_ADDR0_CLR_LCDIF1_SEL_SHIFT
 31

	)

11905 
	#GIS_CH2_ADDR0_TOG_ADDR_MASK
 0x7FFFFFFu

	)

11906 
	#GIS_CH2_ADDR0_TOG_ADDR_SHIFT
 0

	)

11907 
	#GIS_CH2_ADDR0_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_ADDR0_TOG_ADDR_SHIFT
))&
GIS_CH2_ADDR0_TOG_ADDR_MASK
)

	)

11908 
	#GIS_CH2_ADDR0_TOG_CSI0_SEL_MASK
 0x8000000u

	)

11909 
	#GIS_CH2_ADDR0_TOG_CSI0_SEL_SHIFT
 27

	)

11910 
	#GIS_CH2_ADDR0_TOG_CSI1_SEL_MASK
 0x10000000u

	)

11911 
	#GIS_CH2_ADDR0_TOG_CSI1_SEL_SHIFT
 28

	)

11912 
	#GIS_CH2_ADDR0_TOG_PXP_SEL_MASK
 0x20000000u

	)

11913 
	#GIS_CH2_ADDR0_TOG_PXP_SEL_SHIFT
 29

	)

11914 
	#GIS_CH2_ADDR0_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

11915 
	#GIS_CH2_ADDR0_TOG_LCDIF0_SEL_SHIFT
 30

	)

11916 
	#GIS_CH2_ADDR0_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

11917 
	#GIS_CH2_ADDR0_TOG_LCDIF1_SEL_SHIFT
 31

	)

11919 
	#GIS_CH2_DATA0_DATA_MASK
 0xFFFFFFFFu

	)

11920 
	#GIS_CH2_DATA0_DATA_SHIFT
 0

	)

11921 
	#GIS_CH2_DATA0_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_DATA0_DATA_SHIFT
))&
GIS_CH2_DATA0_DATA_MASK
)

	)

11923 
	#GIS_CH2_ADDR1_ADDR_MASK
 0x7FFFFFFu

	)

11924 
	#GIS_CH2_ADDR1_ADDR_SHIFT
 0

	)

11925 
	#GIS_CH2_ADDR1_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_ADDR1_ADDR_SHIFT
))&
GIS_CH2_ADDR1_ADDR_MASK
)

	)

11926 
	#GIS_CH2_ADDR1_CSI0_SEL_MASK
 0x8000000u

	)

11927 
	#GIS_CH2_ADDR1_CSI0_SEL_SHIFT
 27

	)

11928 
	#GIS_CH2_ADDR1_CSI1_SEL_MASK
 0x10000000u

	)

11929 
	#GIS_CH2_ADDR1_CSI1_SEL_SHIFT
 28

	)

11930 
	#GIS_CH2_ADDR1_PXP_SEL_MASK
 0x20000000u

	)

11931 
	#GIS_CH2_ADDR1_PXP_SEL_SHIFT
 29

	)

11932 
	#GIS_CH2_ADDR1_LCDIF0_SEL_MASK
 0x40000000u

	)

11933 
	#GIS_CH2_ADDR1_LCDIF0_SEL_SHIFT
 30

	)

11934 
	#GIS_CH2_ADDR1_LCDIF1_SEL_MASK
 0x80000000u

	)

11935 
	#GIS_CH2_ADDR1_LCDIF1_SEL_SHIFT
 31

	)

11937 
	#GIS_CH2_ADDR1_SET_ADDR_MASK
 0x7FFFFFFu

	)

11938 
	#GIS_CH2_ADDR1_SET_ADDR_SHIFT
 0

	)

11939 
	#GIS_CH2_ADDR1_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_ADDR1_SET_ADDR_SHIFT
))&
GIS_CH2_ADDR1_SET_ADDR_MASK
)

	)

11940 
	#GIS_CH2_ADDR1_SET_CSI0_SEL_MASK
 0x8000000u

	)

11941 
	#GIS_CH2_ADDR1_SET_CSI0_SEL_SHIFT
 27

	)

11942 
	#GIS_CH2_ADDR1_SET_CSI1_SEL_MASK
 0x10000000u

	)

11943 
	#GIS_CH2_ADDR1_SET_CSI1_SEL_SHIFT
 28

	)

11944 
	#GIS_CH2_ADDR1_SET_PXP_SEL_MASK
 0x20000000u

	)

11945 
	#GIS_CH2_ADDR1_SET_PXP_SEL_SHIFT
 29

	)

11946 
	#GIS_CH2_ADDR1_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

11947 
	#GIS_CH2_ADDR1_SET_LCDIF0_SEL_SHIFT
 30

	)

11948 
	#GIS_CH2_ADDR1_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

11949 
	#GIS_CH2_ADDR1_SET_LCDIF1_SEL_SHIFT
 31

	)

11951 
	#GIS_CH2_ADDR1_CLR_ADDR_MASK
 0x7FFFFFFu

	)

11952 
	#GIS_CH2_ADDR1_CLR_ADDR_SHIFT
 0

	)

11953 
	#GIS_CH2_ADDR1_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_ADDR1_CLR_ADDR_SHIFT
))&
GIS_CH2_ADDR1_CLR_ADDR_MASK
)

	)

11954 
	#GIS_CH2_ADDR1_CLR_CSI0_SEL_MASK
 0x8000000u

	)

11955 
	#GIS_CH2_ADDR1_CLR_CSI0_SEL_SHIFT
 27

	)

11956 
	#GIS_CH2_ADDR1_CLR_CSI1_SEL_MASK
 0x10000000u

	)

11957 
	#GIS_CH2_ADDR1_CLR_CSI1_SEL_SHIFT
 28

	)

11958 
	#GIS_CH2_ADDR1_CLR_PXP_SEL_MASK
 0x20000000u

	)

11959 
	#GIS_CH2_ADDR1_CLR_PXP_SEL_SHIFT
 29

	)

11960 
	#GIS_CH2_ADDR1_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

11961 
	#GIS_CH2_ADDR1_CLR_LCDIF0_SEL_SHIFT
 30

	)

11962 
	#GIS_CH2_ADDR1_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

11963 
	#GIS_CH2_ADDR1_CLR_LCDIF1_SEL_SHIFT
 31

	)

11965 
	#GIS_CH2_ADDR1_TOG_ADDR_MASK
 0x7FFFFFFu

	)

11966 
	#GIS_CH2_ADDR1_TOG_ADDR_SHIFT
 0

	)

11967 
	#GIS_CH2_ADDR1_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_ADDR1_TOG_ADDR_SHIFT
))&
GIS_CH2_ADDR1_TOG_ADDR_MASK
)

	)

11968 
	#GIS_CH2_ADDR1_TOG_CSI0_SEL_MASK
 0x8000000u

	)

11969 
	#GIS_CH2_ADDR1_TOG_CSI0_SEL_SHIFT
 27

	)

11970 
	#GIS_CH2_ADDR1_TOG_CSI1_SEL_MASK
 0x10000000u

	)

11971 
	#GIS_CH2_ADDR1_TOG_CSI1_SEL_SHIFT
 28

	)

11972 
	#GIS_CH2_ADDR1_TOG_PXP_SEL_MASK
 0x20000000u

	)

11973 
	#GIS_CH2_ADDR1_TOG_PXP_SEL_SHIFT
 29

	)

11974 
	#GIS_CH2_ADDR1_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

11975 
	#GIS_CH2_ADDR1_TOG_LCDIF0_SEL_SHIFT
 30

	)

11976 
	#GIS_CH2_ADDR1_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

11977 
	#GIS_CH2_ADDR1_TOG_LCDIF1_SEL_SHIFT
 31

	)

11979 
	#GIS_CH2_DATA1_DATA_MASK
 0xFFFFFFFFu

	)

11980 
	#GIS_CH2_DATA1_DATA_SHIFT
 0

	)

11981 
	#GIS_CH2_DATA1_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_DATA1_DATA_SHIFT
))&
GIS_CH2_DATA1_DATA_MASK
)

	)

11983 
	#GIS_CH2_ADDR2_ADDR_MASK
 0x7FFFFFFu

	)

11984 
	#GIS_CH2_ADDR2_ADDR_SHIFT
 0

	)

11985 
	#GIS_CH2_ADDR2_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_ADDR2_ADDR_SHIFT
))&
GIS_CH2_ADDR2_ADDR_MASK
)

	)

11986 
	#GIS_CH2_ADDR2_CSI0_SEL_MASK
 0x8000000u

	)

11987 
	#GIS_CH2_ADDR2_CSI0_SEL_SHIFT
 27

	)

11988 
	#GIS_CH2_ADDR2_CSI1_SEL_MASK
 0x10000000u

	)

11989 
	#GIS_CH2_ADDR2_CSI1_SEL_SHIFT
 28

	)

11990 
	#GIS_CH2_ADDR2_PXP_SEL_MASK
 0x20000000u

	)

11991 
	#GIS_CH2_ADDR2_PXP_SEL_SHIFT
 29

	)

11992 
	#GIS_CH2_ADDR2_LCDIF0_SEL_MASK
 0x40000000u

	)

11993 
	#GIS_CH2_ADDR2_LCDIF0_SEL_SHIFT
 30

	)

11994 
	#GIS_CH2_ADDR2_LCDIF1_SEL_MASK
 0x80000000u

	)

11995 
	#GIS_CH2_ADDR2_LCDIF1_SEL_SHIFT
 31

	)

11997 
	#GIS_CH2_ADDR2_SET_ADDR_MASK
 0x7FFFFFFu

	)

11998 
	#GIS_CH2_ADDR2_SET_ADDR_SHIFT
 0

	)

11999 
	#GIS_CH2_ADDR2_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_ADDR2_SET_ADDR_SHIFT
))&
GIS_CH2_ADDR2_SET_ADDR_MASK
)

	)

12000 
	#GIS_CH2_ADDR2_SET_CSI0_SEL_MASK
 0x8000000u

	)

12001 
	#GIS_CH2_ADDR2_SET_CSI0_SEL_SHIFT
 27

	)

12002 
	#GIS_CH2_ADDR2_SET_CSI1_SEL_MASK
 0x10000000u

	)

12003 
	#GIS_CH2_ADDR2_SET_CSI1_SEL_SHIFT
 28

	)

12004 
	#GIS_CH2_ADDR2_SET_PXP_SEL_MASK
 0x20000000u

	)

12005 
	#GIS_CH2_ADDR2_SET_PXP_SEL_SHIFT
 29

	)

12006 
	#GIS_CH2_ADDR2_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

12007 
	#GIS_CH2_ADDR2_SET_LCDIF0_SEL_SHIFT
 30

	)

12008 
	#GIS_CH2_ADDR2_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

12009 
	#GIS_CH2_ADDR2_SET_LCDIF1_SEL_SHIFT
 31

	)

12011 
	#GIS_CH2_ADDR2_CLR_ADDR_MASK
 0x7FFFFFFu

	)

12012 
	#GIS_CH2_ADDR2_CLR_ADDR_SHIFT
 0

	)

12013 
	#GIS_CH2_ADDR2_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_ADDR2_CLR_ADDR_SHIFT
))&
GIS_CH2_ADDR2_CLR_ADDR_MASK
)

	)

12014 
	#GIS_CH2_ADDR2_CLR_CSI0_SEL_MASK
 0x8000000u

	)

12015 
	#GIS_CH2_ADDR2_CLR_CSI0_SEL_SHIFT
 27

	)

12016 
	#GIS_CH2_ADDR2_CLR_CSI1_SEL_MASK
 0x10000000u

	)

12017 
	#GIS_CH2_ADDR2_CLR_CSI1_SEL_SHIFT
 28

	)

12018 
	#GIS_CH2_ADDR2_CLR_PXP_SEL_MASK
 0x20000000u

	)

12019 
	#GIS_CH2_ADDR2_CLR_PXP_SEL_SHIFT
 29

	)

12020 
	#GIS_CH2_ADDR2_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

12021 
	#GIS_CH2_ADDR2_CLR_LCDIF0_SEL_SHIFT
 30

	)

12022 
	#GIS_CH2_ADDR2_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

12023 
	#GIS_CH2_ADDR2_CLR_LCDIF1_SEL_SHIFT
 31

	)

12025 
	#GIS_CH2_ADDR2_TOG_ADDR_MASK
 0x7FFFFFFu

	)

12026 
	#GIS_CH2_ADDR2_TOG_ADDR_SHIFT
 0

	)

12027 
	#GIS_CH2_ADDR2_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_ADDR2_TOG_ADDR_SHIFT
))&
GIS_CH2_ADDR2_TOG_ADDR_MASK
)

	)

12028 
	#GIS_CH2_ADDR2_TOG_CSI0_SEL_MASK
 0x8000000u

	)

12029 
	#GIS_CH2_ADDR2_TOG_CSI0_SEL_SHIFT
 27

	)

12030 
	#GIS_CH2_ADDR2_TOG_CSI1_SEL_MASK
 0x10000000u

	)

12031 
	#GIS_CH2_ADDR2_TOG_CSI1_SEL_SHIFT
 28

	)

12032 
	#GIS_CH2_ADDR2_TOG_PXP_SEL_MASK
 0x20000000u

	)

12033 
	#GIS_CH2_ADDR2_TOG_PXP_SEL_SHIFT
 29

	)

12034 
	#GIS_CH2_ADDR2_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

12035 
	#GIS_CH2_ADDR2_TOG_LCDIF0_SEL_SHIFT
 30

	)

12036 
	#GIS_CH2_ADDR2_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

12037 
	#GIS_CH2_ADDR2_TOG_LCDIF1_SEL_SHIFT
 31

	)

12039 
	#GIS_CH2_DATA2_DATA_MASK
 0xFFFFFFFFu

	)

12040 
	#GIS_CH2_DATA2_DATA_SHIFT
 0

	)

12041 
	#GIS_CH2_DATA2_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_DATA2_DATA_SHIFT
))&
GIS_CH2_DATA2_DATA_MASK
)

	)

12043 
	#GIS_CH2_ADDR3_ADDR_MASK
 0x7FFFFFFu

	)

12044 
	#GIS_CH2_ADDR3_ADDR_SHIFT
 0

	)

12045 
	#GIS_CH2_ADDR3_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_ADDR3_ADDR_SHIFT
))&
GIS_CH2_ADDR3_ADDR_MASK
)

	)

12046 
	#GIS_CH2_ADDR3_CSI0_SEL_MASK
 0x8000000u

	)

12047 
	#GIS_CH2_ADDR3_CSI0_SEL_SHIFT
 27

	)

12048 
	#GIS_CH2_ADDR3_CSI1_SEL_MASK
 0x10000000u

	)

12049 
	#GIS_CH2_ADDR3_CSI1_SEL_SHIFT
 28

	)

12050 
	#GIS_CH2_ADDR3_PXP_SEL_MASK
 0x20000000u

	)

12051 
	#GIS_CH2_ADDR3_PXP_SEL_SHIFT
 29

	)

12052 
	#GIS_CH2_ADDR3_LCDIF0_SEL_MASK
 0x40000000u

	)

12053 
	#GIS_CH2_ADDR3_LCDIF0_SEL_SHIFT
 30

	)

12054 
	#GIS_CH2_ADDR3_LCDIF1_SEL_MASK
 0x80000000u

	)

12055 
	#GIS_CH2_ADDR3_LCDIF1_SEL_SHIFT
 31

	)

12057 
	#GIS_CH2_ADDR3_SET_ADDR_MASK
 0x7FFFFFFu

	)

12058 
	#GIS_CH2_ADDR3_SET_ADDR_SHIFT
 0

	)

12059 
	#GIS_CH2_ADDR3_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_ADDR3_SET_ADDR_SHIFT
))&
GIS_CH2_ADDR3_SET_ADDR_MASK
)

	)

12060 
	#GIS_CH2_ADDR3_SET_CSI0_SEL_MASK
 0x8000000u

	)

12061 
	#GIS_CH2_ADDR3_SET_CSI0_SEL_SHIFT
 27

	)

12062 
	#GIS_CH2_ADDR3_SET_CSI1_SEL_MASK
 0x10000000u

	)

12063 
	#GIS_CH2_ADDR3_SET_CSI1_SEL_SHIFT
 28

	)

12064 
	#GIS_CH2_ADDR3_SET_PXP_SEL_MASK
 0x20000000u

	)

12065 
	#GIS_CH2_ADDR3_SET_PXP_SEL_SHIFT
 29

	)

12066 
	#GIS_CH2_ADDR3_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

12067 
	#GIS_CH2_ADDR3_SET_LCDIF0_SEL_SHIFT
 30

	)

12068 
	#GIS_CH2_ADDR3_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

12069 
	#GIS_CH2_ADDR3_SET_LCDIF1_SEL_SHIFT
 31

	)

12071 
	#GIS_CH2_ADDR3_CLR_ADDR_MASK
 0x7FFFFFFu

	)

12072 
	#GIS_CH2_ADDR3_CLR_ADDR_SHIFT
 0

	)

12073 
	#GIS_CH2_ADDR3_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_ADDR3_CLR_ADDR_SHIFT
))&
GIS_CH2_ADDR3_CLR_ADDR_MASK
)

	)

12074 
	#GIS_CH2_ADDR3_CLR_CSI0_SEL_MASK
 0x8000000u

	)

12075 
	#GIS_CH2_ADDR3_CLR_CSI0_SEL_SHIFT
 27

	)

12076 
	#GIS_CH2_ADDR3_CLR_CSI1_SEL_MASK
 0x10000000u

	)

12077 
	#GIS_CH2_ADDR3_CLR_CSI1_SEL_SHIFT
 28

	)

12078 
	#GIS_CH2_ADDR3_CLR_PXP_SEL_MASK
 0x20000000u

	)

12079 
	#GIS_CH2_ADDR3_CLR_PXP_SEL_SHIFT
 29

	)

12080 
	#GIS_CH2_ADDR3_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

12081 
	#GIS_CH2_ADDR3_CLR_LCDIF0_SEL_SHIFT
 30

	)

12082 
	#GIS_CH2_ADDR3_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

12083 
	#GIS_CH2_ADDR3_CLR_LCDIF1_SEL_SHIFT
 31

	)

12085 
	#GIS_CH2_ADDR3_TOG_ADDR_MASK
 0x7FFFFFFu

	)

12086 
	#GIS_CH2_ADDR3_TOG_ADDR_SHIFT
 0

	)

12087 
	#GIS_CH2_ADDR3_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_ADDR3_TOG_ADDR_SHIFT
))&
GIS_CH2_ADDR3_TOG_ADDR_MASK
)

	)

12088 
	#GIS_CH2_ADDR3_TOG_CSI0_SEL_MASK
 0x8000000u

	)

12089 
	#GIS_CH2_ADDR3_TOG_CSI0_SEL_SHIFT
 27

	)

12090 
	#GIS_CH2_ADDR3_TOG_CSI1_SEL_MASK
 0x10000000u

	)

12091 
	#GIS_CH2_ADDR3_TOG_CSI1_SEL_SHIFT
 28

	)

12092 
	#GIS_CH2_ADDR3_TOG_PXP_SEL_MASK
 0x20000000u

	)

12093 
	#GIS_CH2_ADDR3_TOG_PXP_SEL_SHIFT
 29

	)

12094 
	#GIS_CH2_ADDR3_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

12095 
	#GIS_CH2_ADDR3_TOG_LCDIF0_SEL_SHIFT
 30

	)

12096 
	#GIS_CH2_ADDR3_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

12097 
	#GIS_CH2_ADDR3_TOG_LCDIF1_SEL_SHIFT
 31

	)

12099 
	#GIS_CH2_DATA3_DATA_MASK
 0xFFFFFFFFu

	)

12100 
	#GIS_CH2_DATA3_DATA_SHIFT
 0

	)

12101 
	#GIS_CH2_DATA3_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH2_DATA3_DATA_SHIFT
))&
GIS_CH2_DATA3_DATA_MASK
)

	)

12103 
	#GIS_CH3_CTRL_CMD0_OPCODE_MASK
 0xFu

	)

12104 
	#GIS_CH3_CTRL_CMD0_OPCODE_SHIFT
 0

	)

12105 
	#GIS_CH3_CTRL_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_CMD0_OPCODE_SHIFT
))&
GIS_CH3_CTRL_CMD0_OPCODE_MASK
)

	)

12106 
	#GIS_CH3_CTRL_CMD0_ALU_MASK
 0x70u

	)

12107 
	#GIS_CH3_CTRL_CMD0_ALU_SHIFT
 4

	)

12108 
	#GIS_CH3_CTRL_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_CMD0_ALU_SHIFT
))&
GIS_CH3_CTRL_CMD0_ALU_MASK
)

	)

12109 
	#GIS_CH3_CTRL_CMD0_ACC_NEG_MASK
 0x80u

	)

12110 
	#GIS_CH3_CTRL_CMD0_ACC_NEG_SHIFT
 7

	)

12111 
	#GIS_CH3_CTRL_CMD1_OPCODE_MASK
 0xF00u

	)

12112 
	#GIS_CH3_CTRL_CMD1_OPCODE_SHIFT
 8

	)

12113 
	#GIS_CH3_CTRL_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_CMD1_OPCODE_SHIFT
))&
GIS_CH3_CTRL_CMD1_OPCODE_MASK
)

	)

12114 
	#GIS_CH3_CTRL_CMD1_ALU_MASK
 0x7000u

	)

12115 
	#GIS_CH3_CTRL_CMD1_ALU_SHIFT
 12

	)

12116 
	#GIS_CH3_CTRL_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_CMD1_ALU_SHIFT
))&
GIS_CH3_CTRL_CMD1_ALU_MASK
)

	)

12117 
	#GIS_CH3_CTRL_CMD1_ACC_NEG_MASK
 0x8000u

	)

12118 
	#GIS_CH3_CTRL_CMD1_ACC_NEG_SHIFT
 15

	)

12119 
	#GIS_CH3_CTRL_CMD2_OPCODE_MASK
 0xF0000u

	)

12120 
	#GIS_CH3_CTRL_CMD2_OPCODE_SHIFT
 16

	)

12121 
	#GIS_CH3_CTRL_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_CMD2_OPCODE_SHIFT
))&
GIS_CH3_CTRL_CMD2_OPCODE_MASK
)

	)

12122 
	#GIS_CH3_CTRL_CMD2_ALU_MASK
 0x700000u

	)

12123 
	#GIS_CH3_CTRL_CMD2_ALU_SHIFT
 20

	)

12124 
	#GIS_CH3_CTRL_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_CMD2_ALU_SHIFT
))&
GIS_CH3_CTRL_CMD2_ALU_MASK
)

	)

12125 
	#GIS_CH3_CTRL_CMD2_ACC_NEG_MASK
 0x800000u

	)

12126 
	#GIS_CH3_CTRL_CMD2_ACC_NEG_SHIFT
 23

	)

12127 
	#GIS_CH3_CTRL_CMD3_OPCODE_MASK
 0xF000000u

	)

12128 
	#GIS_CH3_CTRL_CMD3_OPCODE_SHIFT
 24

	)

12129 
	#GIS_CH3_CTRL_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_CMD3_OPCODE_SHIFT
))&
GIS_CH3_CTRL_CMD3_OPCODE_MASK
)

	)

12130 
	#GIS_CH3_CTRL_CMD3_ALU_MASK
 0x70000000u

	)

12131 
	#GIS_CH3_CTRL_CMD3_ALU_SHIFT
 28

	)

12132 
	#GIS_CH3_CTRL_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_CMD3_ALU_SHIFT
))&
GIS_CH3_CTRL_CMD3_ALU_MASK
)

	)

12133 
	#GIS_CH3_CTRL_CMD3_ACC_NEG_MASK
 0x80000000u

	)

12134 
	#GIS_CH3_CTRL_CMD3_ACC_NEG_SHIFT
 31

	)

12136 
	#GIS_CH3_CTRL_SET_CMD0_OPCODE_MASK
 0xFu

	)

12137 
	#GIS_CH3_CTRL_SET_CMD0_OPCODE_SHIFT
 0

	)

12138 
	#GIS_CH3_CTRL_SET_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_SET_CMD0_OPCODE_SHIFT
))&
GIS_CH3_CTRL_SET_CMD0_OPCODE_MASK
)

	)

12139 
	#GIS_CH3_CTRL_SET_CMD0_ALU_MASK
 0x70u

	)

12140 
	#GIS_CH3_CTRL_SET_CMD0_ALU_SHIFT
 4

	)

12141 
	#GIS_CH3_CTRL_SET_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_SET_CMD0_ALU_SHIFT
))&
GIS_CH3_CTRL_SET_CMD0_ALU_MASK
)

	)

12142 
	#GIS_CH3_CTRL_SET_CMD0_ACC_NEG_MASK
 0x80u

	)

12143 
	#GIS_CH3_CTRL_SET_CMD0_ACC_NEG_SHIFT
 7

	)

12144 
	#GIS_CH3_CTRL_SET_CMD1_OPCODE_MASK
 0xF00u

	)

12145 
	#GIS_CH3_CTRL_SET_CMD1_OPCODE_SHIFT
 8

	)

12146 
	#GIS_CH3_CTRL_SET_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_SET_CMD1_OPCODE_SHIFT
))&
GIS_CH3_CTRL_SET_CMD1_OPCODE_MASK
)

	)

12147 
	#GIS_CH3_CTRL_SET_CMD1_ALU_MASK
 0x7000u

	)

12148 
	#GIS_CH3_CTRL_SET_CMD1_ALU_SHIFT
 12

	)

12149 
	#GIS_CH3_CTRL_SET_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_SET_CMD1_ALU_SHIFT
))&
GIS_CH3_CTRL_SET_CMD1_ALU_MASK
)

	)

12150 
	#GIS_CH3_CTRL_SET_CMD1_ACC_NEG_MASK
 0x8000u

	)

12151 
	#GIS_CH3_CTRL_SET_CMD1_ACC_NEG_SHIFT
 15

	)

12152 
	#GIS_CH3_CTRL_SET_CMD2_OPCODE_MASK
 0xF0000u

	)

12153 
	#GIS_CH3_CTRL_SET_CMD2_OPCODE_SHIFT
 16

	)

12154 
	#GIS_CH3_CTRL_SET_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_SET_CMD2_OPCODE_SHIFT
))&
GIS_CH3_CTRL_SET_CMD2_OPCODE_MASK
)

	)

12155 
	#GIS_CH3_CTRL_SET_CMD2_ALU_MASK
 0x700000u

	)

12156 
	#GIS_CH3_CTRL_SET_CMD2_ALU_SHIFT
 20

	)

12157 
	#GIS_CH3_CTRL_SET_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_SET_CMD2_ALU_SHIFT
))&
GIS_CH3_CTRL_SET_CMD2_ALU_MASK
)

	)

12158 
	#GIS_CH3_CTRL_SET_CMD2_ACC_NEG_MASK
 0x800000u

	)

12159 
	#GIS_CH3_CTRL_SET_CMD2_ACC_NEG_SHIFT
 23

	)

12160 
	#GIS_CH3_CTRL_SET_CMD3_OPCODE_MASK
 0xF000000u

	)

12161 
	#GIS_CH3_CTRL_SET_CMD3_OPCODE_SHIFT
 24

	)

12162 
	#GIS_CH3_CTRL_SET_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_SET_CMD3_OPCODE_SHIFT
))&
GIS_CH3_CTRL_SET_CMD3_OPCODE_MASK
)

	)

12163 
	#GIS_CH3_CTRL_SET_CMD3_ALU_MASK
 0x70000000u

	)

12164 
	#GIS_CH3_CTRL_SET_CMD3_ALU_SHIFT
 28

	)

12165 
	#GIS_CH3_CTRL_SET_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_SET_CMD3_ALU_SHIFT
))&
GIS_CH3_CTRL_SET_CMD3_ALU_MASK
)

	)

12166 
	#GIS_CH3_CTRL_SET_CMD3_ACC_NEG_MASK
 0x80000000u

	)

12167 
	#GIS_CH3_CTRL_SET_CMD3_ACC_NEG_SHIFT
 31

	)

12169 
	#GIS_CH3_CTRL_CLR_CMD0_OPCODE_MASK
 0xFu

	)

12170 
	#GIS_CH3_CTRL_CLR_CMD0_OPCODE_SHIFT
 0

	)

12171 
	#GIS_CH3_CTRL_CLR_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_CLR_CMD0_OPCODE_SHIFT
))&
GIS_CH3_CTRL_CLR_CMD0_OPCODE_MASK
)

	)

12172 
	#GIS_CH3_CTRL_CLR_CMD0_ALU_MASK
 0x70u

	)

12173 
	#GIS_CH3_CTRL_CLR_CMD0_ALU_SHIFT
 4

	)

12174 
	#GIS_CH3_CTRL_CLR_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_CLR_CMD0_ALU_SHIFT
))&
GIS_CH3_CTRL_CLR_CMD0_ALU_MASK
)

	)

12175 
	#GIS_CH3_CTRL_CLR_CMD0_ACC_NEG_MASK
 0x80u

	)

12176 
	#GIS_CH3_CTRL_CLR_CMD0_ACC_NEG_SHIFT
 7

	)

12177 
	#GIS_CH3_CTRL_CLR_CMD1_OPCODE_MASK
 0xF00u

	)

12178 
	#GIS_CH3_CTRL_CLR_CMD1_OPCODE_SHIFT
 8

	)

12179 
	#GIS_CH3_CTRL_CLR_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_CLR_CMD1_OPCODE_SHIFT
))&
GIS_CH3_CTRL_CLR_CMD1_OPCODE_MASK
)

	)

12180 
	#GIS_CH3_CTRL_CLR_CMD1_ALU_MASK
 0x7000u

	)

12181 
	#GIS_CH3_CTRL_CLR_CMD1_ALU_SHIFT
 12

	)

12182 
	#GIS_CH3_CTRL_CLR_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_CLR_CMD1_ALU_SHIFT
))&
GIS_CH3_CTRL_CLR_CMD1_ALU_MASK
)

	)

12183 
	#GIS_CH3_CTRL_CLR_CMD1_ACC_NEG_MASK
 0x8000u

	)

12184 
	#GIS_CH3_CTRL_CLR_CMD1_ACC_NEG_SHIFT
 15

	)

12185 
	#GIS_CH3_CTRL_CLR_CMD2_OPCODE_MASK
 0xF0000u

	)

12186 
	#GIS_CH3_CTRL_CLR_CMD2_OPCODE_SHIFT
 16

	)

12187 
	#GIS_CH3_CTRL_CLR_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_CLR_CMD2_OPCODE_SHIFT
))&
GIS_CH3_CTRL_CLR_CMD2_OPCODE_MASK
)

	)

12188 
	#GIS_CH3_CTRL_CLR_CMD2_ALU_MASK
 0x700000u

	)

12189 
	#GIS_CH3_CTRL_CLR_CMD2_ALU_SHIFT
 20

	)

12190 
	#GIS_CH3_CTRL_CLR_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_CLR_CMD2_ALU_SHIFT
))&
GIS_CH3_CTRL_CLR_CMD2_ALU_MASK
)

	)

12191 
	#GIS_CH3_CTRL_CLR_CMD2_ACC_NEG_MASK
 0x800000u

	)

12192 
	#GIS_CH3_CTRL_CLR_CMD2_ACC_NEG_SHIFT
 23

	)

12193 
	#GIS_CH3_CTRL_CLR_CMD3_OPCODE_MASK
 0xF000000u

	)

12194 
	#GIS_CH3_CTRL_CLR_CMD3_OPCODE_SHIFT
 24

	)

12195 
	#GIS_CH3_CTRL_CLR_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_CLR_CMD3_OPCODE_SHIFT
))&
GIS_CH3_CTRL_CLR_CMD3_OPCODE_MASK
)

	)

12196 
	#GIS_CH3_CTRL_CLR_CMD3_ALU_MASK
 0x70000000u

	)

12197 
	#GIS_CH3_CTRL_CLR_CMD3_ALU_SHIFT
 28

	)

12198 
	#GIS_CH3_CTRL_CLR_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_CLR_CMD3_ALU_SHIFT
))&
GIS_CH3_CTRL_CLR_CMD3_ALU_MASK
)

	)

12199 
	#GIS_CH3_CTRL_CLR_CMD3_ACC_NEG_MASK
 0x80000000u

	)

12200 
	#GIS_CH3_CTRL_CLR_CMD3_ACC_NEG_SHIFT
 31

	)

12202 
	#GIS_CH3_CTRL_TOG_CMD0_OPCODE_MASK
 0xFu

	)

12203 
	#GIS_CH3_CTRL_TOG_CMD0_OPCODE_SHIFT
 0

	)

12204 
	#GIS_CH3_CTRL_TOG_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_TOG_CMD0_OPCODE_SHIFT
))&
GIS_CH3_CTRL_TOG_CMD0_OPCODE_MASK
)

	)

12205 
	#GIS_CH3_CTRL_TOG_CMD0_ALU_MASK
 0x70u

	)

12206 
	#GIS_CH3_CTRL_TOG_CMD0_ALU_SHIFT
 4

	)

12207 
	#GIS_CH3_CTRL_TOG_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_TOG_CMD0_ALU_SHIFT
))&
GIS_CH3_CTRL_TOG_CMD0_ALU_MASK
)

	)

12208 
	#GIS_CH3_CTRL_TOG_CMD0_ACC_NEG_MASK
 0x80u

	)

12209 
	#GIS_CH3_CTRL_TOG_CMD0_ACC_NEG_SHIFT
 7

	)

12210 
	#GIS_CH3_CTRL_TOG_CMD1_OPCODE_MASK
 0xF00u

	)

12211 
	#GIS_CH3_CTRL_TOG_CMD1_OPCODE_SHIFT
 8

	)

12212 
	#GIS_CH3_CTRL_TOG_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_TOG_CMD1_OPCODE_SHIFT
))&
GIS_CH3_CTRL_TOG_CMD1_OPCODE_MASK
)

	)

12213 
	#GIS_CH3_CTRL_TOG_CMD1_ALU_MASK
 0x7000u

	)

12214 
	#GIS_CH3_CTRL_TOG_CMD1_ALU_SHIFT
 12

	)

12215 
	#GIS_CH3_CTRL_TOG_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_TOG_CMD1_ALU_SHIFT
))&
GIS_CH3_CTRL_TOG_CMD1_ALU_MASK
)

	)

12216 
	#GIS_CH3_CTRL_TOG_CMD1_ACC_NEG_MASK
 0x8000u

	)

12217 
	#GIS_CH3_CTRL_TOG_CMD1_ACC_NEG_SHIFT
 15

	)

12218 
	#GIS_CH3_CTRL_TOG_CMD2_OPCODE_MASK
 0xF0000u

	)

12219 
	#GIS_CH3_CTRL_TOG_CMD2_OPCODE_SHIFT
 16

	)

12220 
	#GIS_CH3_CTRL_TOG_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_TOG_CMD2_OPCODE_SHIFT
))&
GIS_CH3_CTRL_TOG_CMD2_OPCODE_MASK
)

	)

12221 
	#GIS_CH3_CTRL_TOG_CMD2_ALU_MASK
 0x700000u

	)

12222 
	#GIS_CH3_CTRL_TOG_CMD2_ALU_SHIFT
 20

	)

12223 
	#GIS_CH3_CTRL_TOG_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_TOG_CMD2_ALU_SHIFT
))&
GIS_CH3_CTRL_TOG_CMD2_ALU_MASK
)

	)

12224 
	#GIS_CH3_CTRL_TOG_CMD2_ACC_NEG_MASK
 0x800000u

	)

12225 
	#GIS_CH3_CTRL_TOG_CMD2_ACC_NEG_SHIFT
 23

	)

12226 
	#GIS_CH3_CTRL_TOG_CMD3_OPCODE_MASK
 0xF000000u

	)

12227 
	#GIS_CH3_CTRL_TOG_CMD3_OPCODE_SHIFT
 24

	)

12228 
	#GIS_CH3_CTRL_TOG_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_TOG_CMD3_OPCODE_SHIFT
))&
GIS_CH3_CTRL_TOG_CMD3_OPCODE_MASK
)

	)

12229 
	#GIS_CH3_CTRL_TOG_CMD3_ALU_MASK
 0x70000000u

	)

12230 
	#GIS_CH3_CTRL_TOG_CMD3_ALU_SHIFT
 28

	)

12231 
	#GIS_CH3_CTRL_TOG_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_CTRL_TOG_CMD3_ALU_SHIFT
))&
GIS_CH3_CTRL_TOG_CMD3_ALU_MASK
)

	)

12232 
	#GIS_CH3_CTRL_TOG_CMD3_ACC_NEG_MASK
 0x80000000u

	)

12233 
	#GIS_CH3_CTRL_TOG_CMD3_ACC_NEG_SHIFT
 31

	)

12235 
	#GIS_CH3_ADDR0_ADDR_MASK
 0x7FFFFFFu

	)

12236 
	#GIS_CH3_ADDR0_ADDR_SHIFT
 0

	)

12237 
	#GIS_CH3_ADDR0_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_ADDR0_ADDR_SHIFT
))&
GIS_CH3_ADDR0_ADDR_MASK
)

	)

12238 
	#GIS_CH3_ADDR0_CSI0_SEL_MASK
 0x8000000u

	)

12239 
	#GIS_CH3_ADDR0_CSI0_SEL_SHIFT
 27

	)

12240 
	#GIS_CH3_ADDR0_CSI1_SEL_MASK
 0x10000000u

	)

12241 
	#GIS_CH3_ADDR0_CSI1_SEL_SHIFT
 28

	)

12242 
	#GIS_CH3_ADDR0_PXP_SEL_MASK
 0x20000000u

	)

12243 
	#GIS_CH3_ADDR0_PXP_SEL_SHIFT
 29

	)

12244 
	#GIS_CH3_ADDR0_LCDIF0_SEL_MASK
 0x40000000u

	)

12245 
	#GIS_CH3_ADDR0_LCDIF0_SEL_SHIFT
 30

	)

12246 
	#GIS_CH3_ADDR0_LCDIF1_SEL_MASK
 0x80000000u

	)

12247 
	#GIS_CH3_ADDR0_LCDIF1_SEL_SHIFT
 31

	)

12249 
	#GIS_CH3_ADDR0_SET_ADDR_MASK
 0x7FFFFFFu

	)

12250 
	#GIS_CH3_ADDR0_SET_ADDR_SHIFT
 0

	)

12251 
	#GIS_CH3_ADDR0_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_ADDR0_SET_ADDR_SHIFT
))&
GIS_CH3_ADDR0_SET_ADDR_MASK
)

	)

12252 
	#GIS_CH3_ADDR0_SET_CSI0_SEL_MASK
 0x8000000u

	)

12253 
	#GIS_CH3_ADDR0_SET_CSI0_SEL_SHIFT
 27

	)

12254 
	#GIS_CH3_ADDR0_SET_CSI1_SEL_MASK
 0x10000000u

	)

12255 
	#GIS_CH3_ADDR0_SET_CSI1_SEL_SHIFT
 28

	)

12256 
	#GIS_CH3_ADDR0_SET_PXP_SEL_MASK
 0x20000000u

	)

12257 
	#GIS_CH3_ADDR0_SET_PXP_SEL_SHIFT
 29

	)

12258 
	#GIS_CH3_ADDR0_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

12259 
	#GIS_CH3_ADDR0_SET_LCDIF0_SEL_SHIFT
 30

	)

12260 
	#GIS_CH3_ADDR0_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

12261 
	#GIS_CH3_ADDR0_SET_LCDIF1_SEL_SHIFT
 31

	)

12263 
	#GIS_CH3_ADDR0_CLR_ADDR_MASK
 0x7FFFFFFu

	)

12264 
	#GIS_CH3_ADDR0_CLR_ADDR_SHIFT
 0

	)

12265 
	#GIS_CH3_ADDR0_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_ADDR0_CLR_ADDR_SHIFT
))&
GIS_CH3_ADDR0_CLR_ADDR_MASK
)

	)

12266 
	#GIS_CH3_ADDR0_CLR_CSI0_SEL_MASK
 0x8000000u

	)

12267 
	#GIS_CH3_ADDR0_CLR_CSI0_SEL_SHIFT
 27

	)

12268 
	#GIS_CH3_ADDR0_CLR_CSI1_SEL_MASK
 0x10000000u

	)

12269 
	#GIS_CH3_ADDR0_CLR_CSI1_SEL_SHIFT
 28

	)

12270 
	#GIS_CH3_ADDR0_CLR_PXP_SEL_MASK
 0x20000000u

	)

12271 
	#GIS_CH3_ADDR0_CLR_PXP_SEL_SHIFT
 29

	)

12272 
	#GIS_CH3_ADDR0_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

12273 
	#GIS_CH3_ADDR0_CLR_LCDIF0_SEL_SHIFT
 30

	)

12274 
	#GIS_CH3_ADDR0_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

12275 
	#GIS_CH3_ADDR0_CLR_LCDIF1_SEL_SHIFT
 31

	)

12277 
	#GIS_CH3_ADDR0_TOG_ADDR_MASK
 0x7FFFFFFu

	)

12278 
	#GIS_CH3_ADDR0_TOG_ADDR_SHIFT
 0

	)

12279 
	#GIS_CH3_ADDR0_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_ADDR0_TOG_ADDR_SHIFT
))&
GIS_CH3_ADDR0_TOG_ADDR_MASK
)

	)

12280 
	#GIS_CH3_ADDR0_TOG_CSI0_SEL_MASK
 0x8000000u

	)

12281 
	#GIS_CH3_ADDR0_TOG_CSI0_SEL_SHIFT
 27

	)

12282 
	#GIS_CH3_ADDR0_TOG_CSI1_SEL_MASK
 0x10000000u

	)

12283 
	#GIS_CH3_ADDR0_TOG_CSI1_SEL_SHIFT
 28

	)

12284 
	#GIS_CH3_ADDR0_TOG_PXP_SEL_MASK
 0x20000000u

	)

12285 
	#GIS_CH3_ADDR0_TOG_PXP_SEL_SHIFT
 29

	)

12286 
	#GIS_CH3_ADDR0_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

12287 
	#GIS_CH3_ADDR0_TOG_LCDIF0_SEL_SHIFT
 30

	)

12288 
	#GIS_CH3_ADDR0_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

12289 
	#GIS_CH3_ADDR0_TOG_LCDIF1_SEL_SHIFT
 31

	)

12291 
	#GIS_CH3_DATA0_DATA_MASK
 0xFFFFFFFFu

	)

12292 
	#GIS_CH3_DATA0_DATA_SHIFT
 0

	)

12293 
	#GIS_CH3_DATA0_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_DATA0_DATA_SHIFT
))&
GIS_CH3_DATA0_DATA_MASK
)

	)

12295 
	#GIS_CH3_ADDR1_ADDR_MASK
 0x7FFFFFFu

	)

12296 
	#GIS_CH3_ADDR1_ADDR_SHIFT
 0

	)

12297 
	#GIS_CH3_ADDR1_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_ADDR1_ADDR_SHIFT
))&
GIS_CH3_ADDR1_ADDR_MASK
)

	)

12298 
	#GIS_CH3_ADDR1_CSI0_SEL_MASK
 0x8000000u

	)

12299 
	#GIS_CH3_ADDR1_CSI0_SEL_SHIFT
 27

	)

12300 
	#GIS_CH3_ADDR1_CSI1_SEL_MASK
 0x10000000u

	)

12301 
	#GIS_CH3_ADDR1_CSI1_SEL_SHIFT
 28

	)

12302 
	#GIS_CH3_ADDR1_PXP_SEL_MASK
 0x20000000u

	)

12303 
	#GIS_CH3_ADDR1_PXP_SEL_SHIFT
 29

	)

12304 
	#GIS_CH3_ADDR1_LCDIF0_SEL_MASK
 0x40000000u

	)

12305 
	#GIS_CH3_ADDR1_LCDIF0_SEL_SHIFT
 30

	)

12306 
	#GIS_CH3_ADDR1_LCDIF1_SEL_MASK
 0x80000000u

	)

12307 
	#GIS_CH3_ADDR1_LCDIF1_SEL_SHIFT
 31

	)

12309 
	#GIS_CH3_ADDR1_SET_ADDR_MASK
 0x7FFFFFFu

	)

12310 
	#GIS_CH3_ADDR1_SET_ADDR_SHIFT
 0

	)

12311 
	#GIS_CH3_ADDR1_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_ADDR1_SET_ADDR_SHIFT
))&
GIS_CH3_ADDR1_SET_ADDR_MASK
)

	)

12312 
	#GIS_CH3_ADDR1_SET_CSI0_SEL_MASK
 0x8000000u

	)

12313 
	#GIS_CH3_ADDR1_SET_CSI0_SEL_SHIFT
 27

	)

12314 
	#GIS_CH3_ADDR1_SET_CSI1_SEL_MASK
 0x10000000u

	)

12315 
	#GIS_CH3_ADDR1_SET_CSI1_SEL_SHIFT
 28

	)

12316 
	#GIS_CH3_ADDR1_SET_PXP_SEL_MASK
 0x20000000u

	)

12317 
	#GIS_CH3_ADDR1_SET_PXP_SEL_SHIFT
 29

	)

12318 
	#GIS_CH3_ADDR1_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

12319 
	#GIS_CH3_ADDR1_SET_LCDIF0_SEL_SHIFT
 30

	)

12320 
	#GIS_CH3_ADDR1_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

12321 
	#GIS_CH3_ADDR1_SET_LCDIF1_SEL_SHIFT
 31

	)

12323 
	#GIS_CH3_ADDR1_CLR_ADDR_MASK
 0x7FFFFFFu

	)

12324 
	#GIS_CH3_ADDR1_CLR_ADDR_SHIFT
 0

	)

12325 
	#GIS_CH3_ADDR1_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_ADDR1_CLR_ADDR_SHIFT
))&
GIS_CH3_ADDR1_CLR_ADDR_MASK
)

	)

12326 
	#GIS_CH3_ADDR1_CLR_CSI0_SEL_MASK
 0x8000000u

	)

12327 
	#GIS_CH3_ADDR1_CLR_CSI0_SEL_SHIFT
 27

	)

12328 
	#GIS_CH3_ADDR1_CLR_CSI1_SEL_MASK
 0x10000000u

	)

12329 
	#GIS_CH3_ADDR1_CLR_CSI1_SEL_SHIFT
 28

	)

12330 
	#GIS_CH3_ADDR1_CLR_PXP_SEL_MASK
 0x20000000u

	)

12331 
	#GIS_CH3_ADDR1_CLR_PXP_SEL_SHIFT
 29

	)

12332 
	#GIS_CH3_ADDR1_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

12333 
	#GIS_CH3_ADDR1_CLR_LCDIF0_SEL_SHIFT
 30

	)

12334 
	#GIS_CH3_ADDR1_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

12335 
	#GIS_CH3_ADDR1_CLR_LCDIF1_SEL_SHIFT
 31

	)

12337 
	#GIS_CH3_ADDR1_TOG_ADDR_MASK
 0x7FFFFFFu

	)

12338 
	#GIS_CH3_ADDR1_TOG_ADDR_SHIFT
 0

	)

12339 
	#GIS_CH3_ADDR1_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_ADDR1_TOG_ADDR_SHIFT
))&
GIS_CH3_ADDR1_TOG_ADDR_MASK
)

	)

12340 
	#GIS_CH3_ADDR1_TOG_CSI0_SEL_MASK
 0x8000000u

	)

12341 
	#GIS_CH3_ADDR1_TOG_CSI0_SEL_SHIFT
 27

	)

12342 
	#GIS_CH3_ADDR1_TOG_CSI1_SEL_MASK
 0x10000000u

	)

12343 
	#GIS_CH3_ADDR1_TOG_CSI1_SEL_SHIFT
 28

	)

12344 
	#GIS_CH3_ADDR1_TOG_PXP_SEL_MASK
 0x20000000u

	)

12345 
	#GIS_CH3_ADDR1_TOG_PXP_SEL_SHIFT
 29

	)

12346 
	#GIS_CH3_ADDR1_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

12347 
	#GIS_CH3_ADDR1_TOG_LCDIF0_SEL_SHIFT
 30

	)

12348 
	#GIS_CH3_ADDR1_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

12349 
	#GIS_CH3_ADDR1_TOG_LCDIF1_SEL_SHIFT
 31

	)

12351 
	#GIS_CH3_DATA1_DATA_MASK
 0xFFFFFFFFu

	)

12352 
	#GIS_CH3_DATA1_DATA_SHIFT
 0

	)

12353 
	#GIS_CH3_DATA1_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_DATA1_DATA_SHIFT
))&
GIS_CH3_DATA1_DATA_MASK
)

	)

12355 
	#GIS_CH3_ADDR2_ADDR_MASK
 0x7FFFFFFu

	)

12356 
	#GIS_CH3_ADDR2_ADDR_SHIFT
 0

	)

12357 
	#GIS_CH3_ADDR2_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_ADDR2_ADDR_SHIFT
))&
GIS_CH3_ADDR2_ADDR_MASK
)

	)

12358 
	#GIS_CH3_ADDR2_CSI0_SEL_MASK
 0x8000000u

	)

12359 
	#GIS_CH3_ADDR2_CSI0_SEL_SHIFT
 27

	)

12360 
	#GIS_CH3_ADDR2_CSI1_SEL_MASK
 0x10000000u

	)

12361 
	#GIS_CH3_ADDR2_CSI1_SEL_SHIFT
 28

	)

12362 
	#GIS_CH3_ADDR2_PXP_SEL_MASK
 0x20000000u

	)

12363 
	#GIS_CH3_ADDR2_PXP_SEL_SHIFT
 29

	)

12364 
	#GIS_CH3_ADDR2_LCDIF0_SEL_MASK
 0x40000000u

	)

12365 
	#GIS_CH3_ADDR2_LCDIF0_SEL_SHIFT
 30

	)

12366 
	#GIS_CH3_ADDR2_LCDIF1_SEL_MASK
 0x80000000u

	)

12367 
	#GIS_CH3_ADDR2_LCDIF1_SEL_SHIFT
 31

	)

12369 
	#GIS_CH3_ADDR2_SET_ADDR_MASK
 0x7FFFFFFu

	)

12370 
	#GIS_CH3_ADDR2_SET_ADDR_SHIFT
 0

	)

12371 
	#GIS_CH3_ADDR2_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_ADDR2_SET_ADDR_SHIFT
))&
GIS_CH3_ADDR2_SET_ADDR_MASK
)

	)

12372 
	#GIS_CH3_ADDR2_SET_CSI0_SEL_MASK
 0x8000000u

	)

12373 
	#GIS_CH3_ADDR2_SET_CSI0_SEL_SHIFT
 27

	)

12374 
	#GIS_CH3_ADDR2_SET_CSI1_SEL_MASK
 0x10000000u

	)

12375 
	#GIS_CH3_ADDR2_SET_CSI1_SEL_SHIFT
 28

	)

12376 
	#GIS_CH3_ADDR2_SET_PXP_SEL_MASK
 0x20000000u

	)

12377 
	#GIS_CH3_ADDR2_SET_PXP_SEL_SHIFT
 29

	)

12378 
	#GIS_CH3_ADDR2_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

12379 
	#GIS_CH3_ADDR2_SET_LCDIF0_SEL_SHIFT
 30

	)

12380 
	#GIS_CH3_ADDR2_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

12381 
	#GIS_CH3_ADDR2_SET_LCDIF1_SEL_SHIFT
 31

	)

12383 
	#GIS_CH3_ADDR2_CLR_ADDR_MASK
 0x7FFFFFFu

	)

12384 
	#GIS_CH3_ADDR2_CLR_ADDR_SHIFT
 0

	)

12385 
	#GIS_CH3_ADDR2_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_ADDR2_CLR_ADDR_SHIFT
))&
GIS_CH3_ADDR2_CLR_ADDR_MASK
)

	)

12386 
	#GIS_CH3_ADDR2_CLR_CSI0_SEL_MASK
 0x8000000u

	)

12387 
	#GIS_CH3_ADDR2_CLR_CSI0_SEL_SHIFT
 27

	)

12388 
	#GIS_CH3_ADDR2_CLR_CSI1_SEL_MASK
 0x10000000u

	)

12389 
	#GIS_CH3_ADDR2_CLR_CSI1_SEL_SHIFT
 28

	)

12390 
	#GIS_CH3_ADDR2_CLR_PXP_SEL_MASK
 0x20000000u

	)

12391 
	#GIS_CH3_ADDR2_CLR_PXP_SEL_SHIFT
 29

	)

12392 
	#GIS_CH3_ADDR2_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

12393 
	#GIS_CH3_ADDR2_CLR_LCDIF0_SEL_SHIFT
 30

	)

12394 
	#GIS_CH3_ADDR2_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

12395 
	#GIS_CH3_ADDR2_CLR_LCDIF1_SEL_SHIFT
 31

	)

12397 
	#GIS_CH3_ADDR2_TOG_ADDR_MASK
 0x7FFFFFFu

	)

12398 
	#GIS_CH3_ADDR2_TOG_ADDR_SHIFT
 0

	)

12399 
	#GIS_CH3_ADDR2_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_ADDR2_TOG_ADDR_SHIFT
))&
GIS_CH3_ADDR2_TOG_ADDR_MASK
)

	)

12400 
	#GIS_CH3_ADDR2_TOG_CSI0_SEL_MASK
 0x8000000u

	)

12401 
	#GIS_CH3_ADDR2_TOG_CSI0_SEL_SHIFT
 27

	)

12402 
	#GIS_CH3_ADDR2_TOG_CSI1_SEL_MASK
 0x10000000u

	)

12403 
	#GIS_CH3_ADDR2_TOG_CSI1_SEL_SHIFT
 28

	)

12404 
	#GIS_CH3_ADDR2_TOG_PXP_SEL_MASK
 0x20000000u

	)

12405 
	#GIS_CH3_ADDR2_TOG_PXP_SEL_SHIFT
 29

	)

12406 
	#GIS_CH3_ADDR2_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

12407 
	#GIS_CH3_ADDR2_TOG_LCDIF0_SEL_SHIFT
 30

	)

12408 
	#GIS_CH3_ADDR2_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

12409 
	#GIS_CH3_ADDR2_TOG_LCDIF1_SEL_SHIFT
 31

	)

12411 
	#GIS_CH3_DATA2_DATA_MASK
 0xFFFFFFFFu

	)

12412 
	#GIS_CH3_DATA2_DATA_SHIFT
 0

	)

12413 
	#GIS_CH3_DATA2_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_DATA2_DATA_SHIFT
))&
GIS_CH3_DATA2_DATA_MASK
)

	)

12415 
	#GIS_CH3_ADDR3_ADDR_MASK
 0x7FFFFFFu

	)

12416 
	#GIS_CH3_ADDR3_ADDR_SHIFT
 0

	)

12417 
	#GIS_CH3_ADDR3_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_ADDR3_ADDR_SHIFT
))&
GIS_CH3_ADDR3_ADDR_MASK
)

	)

12418 
	#GIS_CH3_ADDR3_CSI0_SEL_MASK
 0x8000000u

	)

12419 
	#GIS_CH3_ADDR3_CSI0_SEL_SHIFT
 27

	)

12420 
	#GIS_CH3_ADDR3_CSI1_SEL_MASK
 0x10000000u

	)

12421 
	#GIS_CH3_ADDR3_CSI1_SEL_SHIFT
 28

	)

12422 
	#GIS_CH3_ADDR3_PXP_SEL_MASK
 0x20000000u

	)

12423 
	#GIS_CH3_ADDR3_PXP_SEL_SHIFT
 29

	)

12424 
	#GIS_CH3_ADDR3_LCDIF0_SEL_MASK
 0x40000000u

	)

12425 
	#GIS_CH3_ADDR3_LCDIF0_SEL_SHIFT
 30

	)

12426 
	#GIS_CH3_ADDR3_LCDIF1_SEL_MASK
 0x80000000u

	)

12427 
	#GIS_CH3_ADDR3_LCDIF1_SEL_SHIFT
 31

	)

12429 
	#GIS_CH3_ADDR3_SET_ADDR_MASK
 0x7FFFFFFu

	)

12430 
	#GIS_CH3_ADDR3_SET_ADDR_SHIFT
 0

	)

12431 
	#GIS_CH3_ADDR3_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_ADDR3_SET_ADDR_SHIFT
))&
GIS_CH3_ADDR3_SET_ADDR_MASK
)

	)

12432 
	#GIS_CH3_ADDR3_SET_CSI0_SEL_MASK
 0x8000000u

	)

12433 
	#GIS_CH3_ADDR3_SET_CSI0_SEL_SHIFT
 27

	)

12434 
	#GIS_CH3_ADDR3_SET_CSI1_SEL_MASK
 0x10000000u

	)

12435 
	#GIS_CH3_ADDR3_SET_CSI1_SEL_SHIFT
 28

	)

12436 
	#GIS_CH3_ADDR3_SET_PXP_SEL_MASK
 0x20000000u

	)

12437 
	#GIS_CH3_ADDR3_SET_PXP_SEL_SHIFT
 29

	)

12438 
	#GIS_CH3_ADDR3_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

12439 
	#GIS_CH3_ADDR3_SET_LCDIF0_SEL_SHIFT
 30

	)

12440 
	#GIS_CH3_ADDR3_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

12441 
	#GIS_CH3_ADDR3_SET_LCDIF1_SEL_SHIFT
 31

	)

12443 
	#GIS_CH3_ADDR3_CLR_ADDR_MASK
 0x7FFFFFFu

	)

12444 
	#GIS_CH3_ADDR3_CLR_ADDR_SHIFT
 0

	)

12445 
	#GIS_CH3_ADDR3_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_ADDR3_CLR_ADDR_SHIFT
))&
GIS_CH3_ADDR3_CLR_ADDR_MASK
)

	)

12446 
	#GIS_CH3_ADDR3_CLR_CSI0_SEL_MASK
 0x8000000u

	)

12447 
	#GIS_CH3_ADDR3_CLR_CSI0_SEL_SHIFT
 27

	)

12448 
	#GIS_CH3_ADDR3_CLR_CSI1_SEL_MASK
 0x10000000u

	)

12449 
	#GIS_CH3_ADDR3_CLR_CSI1_SEL_SHIFT
 28

	)

12450 
	#GIS_CH3_ADDR3_CLR_PXP_SEL_MASK
 0x20000000u

	)

12451 
	#GIS_CH3_ADDR3_CLR_PXP_SEL_SHIFT
 29

	)

12452 
	#GIS_CH3_ADDR3_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

12453 
	#GIS_CH3_ADDR3_CLR_LCDIF0_SEL_SHIFT
 30

	)

12454 
	#GIS_CH3_ADDR3_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

12455 
	#GIS_CH3_ADDR3_CLR_LCDIF1_SEL_SHIFT
 31

	)

12457 
	#GIS_CH3_ADDR3_TOG_ADDR_MASK
 0x7FFFFFFu

	)

12458 
	#GIS_CH3_ADDR3_TOG_ADDR_SHIFT
 0

	)

12459 
	#GIS_CH3_ADDR3_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_ADDR3_TOG_ADDR_SHIFT
))&
GIS_CH3_ADDR3_TOG_ADDR_MASK
)

	)

12460 
	#GIS_CH3_ADDR3_TOG_CSI0_SEL_MASK
 0x8000000u

	)

12461 
	#GIS_CH3_ADDR3_TOG_CSI0_SEL_SHIFT
 27

	)

12462 
	#GIS_CH3_ADDR3_TOG_CSI1_SEL_MASK
 0x10000000u

	)

12463 
	#GIS_CH3_ADDR3_TOG_CSI1_SEL_SHIFT
 28

	)

12464 
	#GIS_CH3_ADDR3_TOG_PXP_SEL_MASK
 0x20000000u

	)

12465 
	#GIS_CH3_ADDR3_TOG_PXP_SEL_SHIFT
 29

	)

12466 
	#GIS_CH3_ADDR3_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

12467 
	#GIS_CH3_ADDR3_TOG_LCDIF0_SEL_SHIFT
 30

	)

12468 
	#GIS_CH3_ADDR3_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

12469 
	#GIS_CH3_ADDR3_TOG_LCDIF1_SEL_SHIFT
 31

	)

12471 
	#GIS_CH3_DATA3_DATA_MASK
 0xFFFFFFFFu

	)

12472 
	#GIS_CH3_DATA3_DATA_SHIFT
 0

	)

12473 
	#GIS_CH3_DATA3_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH3_DATA3_DATA_SHIFT
))&
GIS_CH3_DATA3_DATA_MASK
)

	)

12475 
	#GIS_CH4_CTRL_CMD0_OPCODE_MASK
 0xFu

	)

12476 
	#GIS_CH4_CTRL_CMD0_OPCODE_SHIFT
 0

	)

12477 
	#GIS_CH4_CTRL_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_CMD0_OPCODE_SHIFT
))&
GIS_CH4_CTRL_CMD0_OPCODE_MASK
)

	)

12478 
	#GIS_CH4_CTRL_CMD0_ALU_MASK
 0x70u

	)

12479 
	#GIS_CH4_CTRL_CMD0_ALU_SHIFT
 4

	)

12480 
	#GIS_CH4_CTRL_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_CMD0_ALU_SHIFT
))&
GIS_CH4_CTRL_CMD0_ALU_MASK
)

	)

12481 
	#GIS_CH4_CTRL_CMD0_ACC_NEG_MASK
 0x80u

	)

12482 
	#GIS_CH4_CTRL_CMD0_ACC_NEG_SHIFT
 7

	)

12483 
	#GIS_CH4_CTRL_CMD1_OPCODE_MASK
 0xF00u

	)

12484 
	#GIS_CH4_CTRL_CMD1_OPCODE_SHIFT
 8

	)

12485 
	#GIS_CH4_CTRL_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_CMD1_OPCODE_SHIFT
))&
GIS_CH4_CTRL_CMD1_OPCODE_MASK
)

	)

12486 
	#GIS_CH4_CTRL_CMD1_ALU_MASK
 0x7000u

	)

12487 
	#GIS_CH4_CTRL_CMD1_ALU_SHIFT
 12

	)

12488 
	#GIS_CH4_CTRL_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_CMD1_ALU_SHIFT
))&
GIS_CH4_CTRL_CMD1_ALU_MASK
)

	)

12489 
	#GIS_CH4_CTRL_CMD1_ACC_NEG_MASK
 0x8000u

	)

12490 
	#GIS_CH4_CTRL_CMD1_ACC_NEG_SHIFT
 15

	)

12491 
	#GIS_CH4_CTRL_CMD2_OPCODE_MASK
 0xF0000u

	)

12492 
	#GIS_CH4_CTRL_CMD2_OPCODE_SHIFT
 16

	)

12493 
	#GIS_CH4_CTRL_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_CMD2_OPCODE_SHIFT
))&
GIS_CH4_CTRL_CMD2_OPCODE_MASK
)

	)

12494 
	#GIS_CH4_CTRL_CMD2_ALU_MASK
 0x700000u

	)

12495 
	#GIS_CH4_CTRL_CMD2_ALU_SHIFT
 20

	)

12496 
	#GIS_CH4_CTRL_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_CMD2_ALU_SHIFT
))&
GIS_CH4_CTRL_CMD2_ALU_MASK
)

	)

12497 
	#GIS_CH4_CTRL_CMD2_ACC_NEG_MASK
 0x800000u

	)

12498 
	#GIS_CH4_CTRL_CMD2_ACC_NEG_SHIFT
 23

	)

12499 
	#GIS_CH4_CTRL_CMD3_OPCODE_MASK
 0xF000000u

	)

12500 
	#GIS_CH4_CTRL_CMD3_OPCODE_SHIFT
 24

	)

12501 
	#GIS_CH4_CTRL_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_CMD3_OPCODE_SHIFT
))&
GIS_CH4_CTRL_CMD3_OPCODE_MASK
)

	)

12502 
	#GIS_CH4_CTRL_CMD3_ALU_MASK
 0x70000000u

	)

12503 
	#GIS_CH4_CTRL_CMD3_ALU_SHIFT
 28

	)

12504 
	#GIS_CH4_CTRL_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_CMD3_ALU_SHIFT
))&
GIS_CH4_CTRL_CMD3_ALU_MASK
)

	)

12505 
	#GIS_CH4_CTRL_CMD3_ACC_NEG_MASK
 0x80000000u

	)

12506 
	#GIS_CH4_CTRL_CMD3_ACC_NEG_SHIFT
 31

	)

12508 
	#GIS_CH4_CTRL_SET_CMD0_OPCODE_MASK
 0xFu

	)

12509 
	#GIS_CH4_CTRL_SET_CMD0_OPCODE_SHIFT
 0

	)

12510 
	#GIS_CH4_CTRL_SET_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_SET_CMD0_OPCODE_SHIFT
))&
GIS_CH4_CTRL_SET_CMD0_OPCODE_MASK
)

	)

12511 
	#GIS_CH4_CTRL_SET_CMD0_ALU_MASK
 0x70u

	)

12512 
	#GIS_CH4_CTRL_SET_CMD0_ALU_SHIFT
 4

	)

12513 
	#GIS_CH4_CTRL_SET_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_SET_CMD0_ALU_SHIFT
))&
GIS_CH4_CTRL_SET_CMD0_ALU_MASK
)

	)

12514 
	#GIS_CH4_CTRL_SET_CMD0_ACC_NEG_MASK
 0x80u

	)

12515 
	#GIS_CH4_CTRL_SET_CMD0_ACC_NEG_SHIFT
 7

	)

12516 
	#GIS_CH4_CTRL_SET_CMD1_OPCODE_MASK
 0xF00u

	)

12517 
	#GIS_CH4_CTRL_SET_CMD1_OPCODE_SHIFT
 8

	)

12518 
	#GIS_CH4_CTRL_SET_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_SET_CMD1_OPCODE_SHIFT
))&
GIS_CH4_CTRL_SET_CMD1_OPCODE_MASK
)

	)

12519 
	#GIS_CH4_CTRL_SET_CMD1_ALU_MASK
 0x7000u

	)

12520 
	#GIS_CH4_CTRL_SET_CMD1_ALU_SHIFT
 12

	)

12521 
	#GIS_CH4_CTRL_SET_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_SET_CMD1_ALU_SHIFT
))&
GIS_CH4_CTRL_SET_CMD1_ALU_MASK
)

	)

12522 
	#GIS_CH4_CTRL_SET_CMD1_ACC_NEG_MASK
 0x8000u

	)

12523 
	#GIS_CH4_CTRL_SET_CMD1_ACC_NEG_SHIFT
 15

	)

12524 
	#GIS_CH4_CTRL_SET_CMD2_OPCODE_MASK
 0xF0000u

	)

12525 
	#GIS_CH4_CTRL_SET_CMD2_OPCODE_SHIFT
 16

	)

12526 
	#GIS_CH4_CTRL_SET_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_SET_CMD2_OPCODE_SHIFT
))&
GIS_CH4_CTRL_SET_CMD2_OPCODE_MASK
)

	)

12527 
	#GIS_CH4_CTRL_SET_CMD2_ALU_MASK
 0x700000u

	)

12528 
	#GIS_CH4_CTRL_SET_CMD2_ALU_SHIFT
 20

	)

12529 
	#GIS_CH4_CTRL_SET_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_SET_CMD2_ALU_SHIFT
))&
GIS_CH4_CTRL_SET_CMD2_ALU_MASK
)

	)

12530 
	#GIS_CH4_CTRL_SET_CMD2_ACC_NEG_MASK
 0x800000u

	)

12531 
	#GIS_CH4_CTRL_SET_CMD2_ACC_NEG_SHIFT
 23

	)

12532 
	#GIS_CH4_CTRL_SET_CMD3_OPCODE_MASK
 0xF000000u

	)

12533 
	#GIS_CH4_CTRL_SET_CMD3_OPCODE_SHIFT
 24

	)

12534 
	#GIS_CH4_CTRL_SET_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_SET_CMD3_OPCODE_SHIFT
))&
GIS_CH4_CTRL_SET_CMD3_OPCODE_MASK
)

	)

12535 
	#GIS_CH4_CTRL_SET_CMD3_ALU_MASK
 0x70000000u

	)

12536 
	#GIS_CH4_CTRL_SET_CMD3_ALU_SHIFT
 28

	)

12537 
	#GIS_CH4_CTRL_SET_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_SET_CMD3_ALU_SHIFT
))&
GIS_CH4_CTRL_SET_CMD3_ALU_MASK
)

	)

12538 
	#GIS_CH4_CTRL_SET_CMD3_ACC_NEG_MASK
 0x80000000u

	)

12539 
	#GIS_CH4_CTRL_SET_CMD3_ACC_NEG_SHIFT
 31

	)

12541 
	#GIS_CH4_CTRL_CLR_CMD0_OPCODE_MASK
 0xFu

	)

12542 
	#GIS_CH4_CTRL_CLR_CMD0_OPCODE_SHIFT
 0

	)

12543 
	#GIS_CH4_CTRL_CLR_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_CLR_CMD0_OPCODE_SHIFT
))&
GIS_CH4_CTRL_CLR_CMD0_OPCODE_MASK
)

	)

12544 
	#GIS_CH4_CTRL_CLR_CMD0_ALU_MASK
 0x70u

	)

12545 
	#GIS_CH4_CTRL_CLR_CMD0_ALU_SHIFT
 4

	)

12546 
	#GIS_CH4_CTRL_CLR_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_CLR_CMD0_ALU_SHIFT
))&
GIS_CH4_CTRL_CLR_CMD0_ALU_MASK
)

	)

12547 
	#GIS_CH4_CTRL_CLR_CMD0_ACC_NEG_MASK
 0x80u

	)

12548 
	#GIS_CH4_CTRL_CLR_CMD0_ACC_NEG_SHIFT
 7

	)

12549 
	#GIS_CH4_CTRL_CLR_CMD1_OPCODE_MASK
 0xF00u

	)

12550 
	#GIS_CH4_CTRL_CLR_CMD1_OPCODE_SHIFT
 8

	)

12551 
	#GIS_CH4_CTRL_CLR_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_CLR_CMD1_OPCODE_SHIFT
))&
GIS_CH4_CTRL_CLR_CMD1_OPCODE_MASK
)

	)

12552 
	#GIS_CH4_CTRL_CLR_CMD1_ALU_MASK
 0x7000u

	)

12553 
	#GIS_CH4_CTRL_CLR_CMD1_ALU_SHIFT
 12

	)

12554 
	#GIS_CH4_CTRL_CLR_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_CLR_CMD1_ALU_SHIFT
))&
GIS_CH4_CTRL_CLR_CMD1_ALU_MASK
)

	)

12555 
	#GIS_CH4_CTRL_CLR_CMD1_ACC_NEG_MASK
 0x8000u

	)

12556 
	#GIS_CH4_CTRL_CLR_CMD1_ACC_NEG_SHIFT
 15

	)

12557 
	#GIS_CH4_CTRL_CLR_CMD2_OPCODE_MASK
 0xF0000u

	)

12558 
	#GIS_CH4_CTRL_CLR_CMD2_OPCODE_SHIFT
 16

	)

12559 
	#GIS_CH4_CTRL_CLR_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_CLR_CMD2_OPCODE_SHIFT
))&
GIS_CH4_CTRL_CLR_CMD2_OPCODE_MASK
)

	)

12560 
	#GIS_CH4_CTRL_CLR_CMD2_ALU_MASK
 0x700000u

	)

12561 
	#GIS_CH4_CTRL_CLR_CMD2_ALU_SHIFT
 20

	)

12562 
	#GIS_CH4_CTRL_CLR_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_CLR_CMD2_ALU_SHIFT
))&
GIS_CH4_CTRL_CLR_CMD2_ALU_MASK
)

	)

12563 
	#GIS_CH4_CTRL_CLR_CMD2_ACC_NEG_MASK
 0x800000u

	)

12564 
	#GIS_CH4_CTRL_CLR_CMD2_ACC_NEG_SHIFT
 23

	)

12565 
	#GIS_CH4_CTRL_CLR_CMD3_OPCODE_MASK
 0xF000000u

	)

12566 
	#GIS_CH4_CTRL_CLR_CMD3_OPCODE_SHIFT
 24

	)

12567 
	#GIS_CH4_CTRL_CLR_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_CLR_CMD3_OPCODE_SHIFT
))&
GIS_CH4_CTRL_CLR_CMD3_OPCODE_MASK
)

	)

12568 
	#GIS_CH4_CTRL_CLR_CMD3_ALU_MASK
 0x70000000u

	)

12569 
	#GIS_CH4_CTRL_CLR_CMD3_ALU_SHIFT
 28

	)

12570 
	#GIS_CH4_CTRL_CLR_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_CLR_CMD3_ALU_SHIFT
))&
GIS_CH4_CTRL_CLR_CMD3_ALU_MASK
)

	)

12571 
	#GIS_CH4_CTRL_CLR_CMD3_ACC_NEG_MASK
 0x80000000u

	)

12572 
	#GIS_CH4_CTRL_CLR_CMD3_ACC_NEG_SHIFT
 31

	)

12574 
	#GIS_CH4_CTRL_TOG_CMD0_OPCODE_MASK
 0xFu

	)

12575 
	#GIS_CH4_CTRL_TOG_CMD0_OPCODE_SHIFT
 0

	)

12576 
	#GIS_CH4_CTRL_TOG_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_TOG_CMD0_OPCODE_SHIFT
))&
GIS_CH4_CTRL_TOG_CMD0_OPCODE_MASK
)

	)

12577 
	#GIS_CH4_CTRL_TOG_CMD0_ALU_MASK
 0x70u

	)

12578 
	#GIS_CH4_CTRL_TOG_CMD0_ALU_SHIFT
 4

	)

12579 
	#GIS_CH4_CTRL_TOG_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_TOG_CMD0_ALU_SHIFT
))&
GIS_CH4_CTRL_TOG_CMD0_ALU_MASK
)

	)

12580 
	#GIS_CH4_CTRL_TOG_CMD0_ACC_NEG_MASK
 0x80u

	)

12581 
	#GIS_CH4_CTRL_TOG_CMD0_ACC_NEG_SHIFT
 7

	)

12582 
	#GIS_CH4_CTRL_TOG_CMD1_OPCODE_MASK
 0xF00u

	)

12583 
	#GIS_CH4_CTRL_TOG_CMD1_OPCODE_SHIFT
 8

	)

12584 
	#GIS_CH4_CTRL_TOG_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_TOG_CMD1_OPCODE_SHIFT
))&
GIS_CH4_CTRL_TOG_CMD1_OPCODE_MASK
)

	)

12585 
	#GIS_CH4_CTRL_TOG_CMD1_ALU_MASK
 0x7000u

	)

12586 
	#GIS_CH4_CTRL_TOG_CMD1_ALU_SHIFT
 12

	)

12587 
	#GIS_CH4_CTRL_TOG_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_TOG_CMD1_ALU_SHIFT
))&
GIS_CH4_CTRL_TOG_CMD1_ALU_MASK
)

	)

12588 
	#GIS_CH4_CTRL_TOG_CMD1_ACC_NEG_MASK
 0x8000u

	)

12589 
	#GIS_CH4_CTRL_TOG_CMD1_ACC_NEG_SHIFT
 15

	)

12590 
	#GIS_CH4_CTRL_TOG_CMD2_OPCODE_MASK
 0xF0000u

	)

12591 
	#GIS_CH4_CTRL_TOG_CMD2_OPCODE_SHIFT
 16

	)

12592 
	#GIS_CH4_CTRL_TOG_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_TOG_CMD2_OPCODE_SHIFT
))&
GIS_CH4_CTRL_TOG_CMD2_OPCODE_MASK
)

	)

12593 
	#GIS_CH4_CTRL_TOG_CMD2_ALU_MASK
 0x700000u

	)

12594 
	#GIS_CH4_CTRL_TOG_CMD2_ALU_SHIFT
 20

	)

12595 
	#GIS_CH4_CTRL_TOG_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_TOG_CMD2_ALU_SHIFT
))&
GIS_CH4_CTRL_TOG_CMD2_ALU_MASK
)

	)

12596 
	#GIS_CH4_CTRL_TOG_CMD2_ACC_NEG_MASK
 0x800000u

	)

12597 
	#GIS_CH4_CTRL_TOG_CMD2_ACC_NEG_SHIFT
 23

	)

12598 
	#GIS_CH4_CTRL_TOG_CMD3_OPCODE_MASK
 0xF000000u

	)

12599 
	#GIS_CH4_CTRL_TOG_CMD3_OPCODE_SHIFT
 24

	)

12600 
	#GIS_CH4_CTRL_TOG_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_TOG_CMD3_OPCODE_SHIFT
))&
GIS_CH4_CTRL_TOG_CMD3_OPCODE_MASK
)

	)

12601 
	#GIS_CH4_CTRL_TOG_CMD3_ALU_MASK
 0x70000000u

	)

12602 
	#GIS_CH4_CTRL_TOG_CMD3_ALU_SHIFT
 28

	)

12603 
	#GIS_CH4_CTRL_TOG_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_CTRL_TOG_CMD3_ALU_SHIFT
))&
GIS_CH4_CTRL_TOG_CMD3_ALU_MASK
)

	)

12604 
	#GIS_CH4_CTRL_TOG_CMD3_ACC_NEG_MASK
 0x80000000u

	)

12605 
	#GIS_CH4_CTRL_TOG_CMD3_ACC_NEG_SHIFT
 31

	)

12607 
	#GIS_CH4_ADDR0_ADDR_MASK
 0x7FFFFFFu

	)

12608 
	#GIS_CH4_ADDR0_ADDR_SHIFT
 0

	)

12609 
	#GIS_CH4_ADDR0_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_ADDR0_ADDR_SHIFT
))&
GIS_CH4_ADDR0_ADDR_MASK
)

	)

12610 
	#GIS_CH4_ADDR0_CSI0_SEL_MASK
 0x8000000u

	)

12611 
	#GIS_CH4_ADDR0_CSI0_SEL_SHIFT
 27

	)

12612 
	#GIS_CH4_ADDR0_CSI1_SEL_MASK
 0x10000000u

	)

12613 
	#GIS_CH4_ADDR0_CSI1_SEL_SHIFT
 28

	)

12614 
	#GIS_CH4_ADDR0_PXP_SEL_MASK
 0x20000000u

	)

12615 
	#GIS_CH4_ADDR0_PXP_SEL_SHIFT
 29

	)

12616 
	#GIS_CH4_ADDR0_LCDIF0_SEL_MASK
 0x40000000u

	)

12617 
	#GIS_CH4_ADDR0_LCDIF0_SEL_SHIFT
 30

	)

12618 
	#GIS_CH4_ADDR0_LCDIF1_SEL_MASK
 0x80000000u

	)

12619 
	#GIS_CH4_ADDR0_LCDIF1_SEL_SHIFT
 31

	)

12621 
	#GIS_CH4_ADDR0_SET_ADDR_MASK
 0x7FFFFFFu

	)

12622 
	#GIS_CH4_ADDR0_SET_ADDR_SHIFT
 0

	)

12623 
	#GIS_CH4_ADDR0_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_ADDR0_SET_ADDR_SHIFT
))&
GIS_CH4_ADDR0_SET_ADDR_MASK
)

	)

12624 
	#GIS_CH4_ADDR0_SET_CSI0_SEL_MASK
 0x8000000u

	)

12625 
	#GIS_CH4_ADDR0_SET_CSI0_SEL_SHIFT
 27

	)

12626 
	#GIS_CH4_ADDR0_SET_CSI1_SEL_MASK
 0x10000000u

	)

12627 
	#GIS_CH4_ADDR0_SET_CSI1_SEL_SHIFT
 28

	)

12628 
	#GIS_CH4_ADDR0_SET_PXP_SEL_MASK
 0x20000000u

	)

12629 
	#GIS_CH4_ADDR0_SET_PXP_SEL_SHIFT
 29

	)

12630 
	#GIS_CH4_ADDR0_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

12631 
	#GIS_CH4_ADDR0_SET_LCDIF0_SEL_SHIFT
 30

	)

12632 
	#GIS_CH4_ADDR0_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

12633 
	#GIS_CH4_ADDR0_SET_LCDIF1_SEL_SHIFT
 31

	)

12635 
	#GIS_CH4_ADDR0_CLR_ADDR_MASK
 0x7FFFFFFu

	)

12636 
	#GIS_CH4_ADDR0_CLR_ADDR_SHIFT
 0

	)

12637 
	#GIS_CH4_ADDR0_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_ADDR0_CLR_ADDR_SHIFT
))&
GIS_CH4_ADDR0_CLR_ADDR_MASK
)

	)

12638 
	#GIS_CH4_ADDR0_CLR_CSI0_SEL_MASK
 0x8000000u

	)

12639 
	#GIS_CH4_ADDR0_CLR_CSI0_SEL_SHIFT
 27

	)

12640 
	#GIS_CH4_ADDR0_CLR_CSI1_SEL_MASK
 0x10000000u

	)

12641 
	#GIS_CH4_ADDR0_CLR_CSI1_SEL_SHIFT
 28

	)

12642 
	#GIS_CH4_ADDR0_CLR_PXP_SEL_MASK
 0x20000000u

	)

12643 
	#GIS_CH4_ADDR0_CLR_PXP_SEL_SHIFT
 29

	)

12644 
	#GIS_CH4_ADDR0_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

12645 
	#GIS_CH4_ADDR0_CLR_LCDIF0_SEL_SHIFT
 30

	)

12646 
	#GIS_CH4_ADDR0_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

12647 
	#GIS_CH4_ADDR0_CLR_LCDIF1_SEL_SHIFT
 31

	)

12649 
	#GIS_CH4_ADDR0_TOG_ADDR_MASK
 0x7FFFFFFu

	)

12650 
	#GIS_CH4_ADDR0_TOG_ADDR_SHIFT
 0

	)

12651 
	#GIS_CH4_ADDR0_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_ADDR0_TOG_ADDR_SHIFT
))&
GIS_CH4_ADDR0_TOG_ADDR_MASK
)

	)

12652 
	#GIS_CH4_ADDR0_TOG_CSI0_SEL_MASK
 0x8000000u

	)

12653 
	#GIS_CH4_ADDR0_TOG_CSI0_SEL_SHIFT
 27

	)

12654 
	#GIS_CH4_ADDR0_TOG_CSI1_SEL_MASK
 0x10000000u

	)

12655 
	#GIS_CH4_ADDR0_TOG_CSI1_SEL_SHIFT
 28

	)

12656 
	#GIS_CH4_ADDR0_TOG_PXP_SEL_MASK
 0x20000000u

	)

12657 
	#GIS_CH4_ADDR0_TOG_PXP_SEL_SHIFT
 29

	)

12658 
	#GIS_CH4_ADDR0_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

12659 
	#GIS_CH4_ADDR0_TOG_LCDIF0_SEL_SHIFT
 30

	)

12660 
	#GIS_CH4_ADDR0_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

12661 
	#GIS_CH4_ADDR0_TOG_LCDIF1_SEL_SHIFT
 31

	)

12663 
	#GIS_CH4_DATA0_DATA_MASK
 0xFFFFFFFFu

	)

12664 
	#GIS_CH4_DATA0_DATA_SHIFT
 0

	)

12665 
	#GIS_CH4_DATA0_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_DATA0_DATA_SHIFT
))&
GIS_CH4_DATA0_DATA_MASK
)

	)

12667 
	#GIS_CH4_ADDR1_ADDR_MASK
 0x7FFFFFFu

	)

12668 
	#GIS_CH4_ADDR1_ADDR_SHIFT
 0

	)

12669 
	#GIS_CH4_ADDR1_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_ADDR1_ADDR_SHIFT
))&
GIS_CH4_ADDR1_ADDR_MASK
)

	)

12670 
	#GIS_CH4_ADDR1_CSI0_SEL_MASK
 0x8000000u

	)

12671 
	#GIS_CH4_ADDR1_CSI0_SEL_SHIFT
 27

	)

12672 
	#GIS_CH4_ADDR1_CSI1_SEL_MASK
 0x10000000u

	)

12673 
	#GIS_CH4_ADDR1_CSI1_SEL_SHIFT
 28

	)

12674 
	#GIS_CH4_ADDR1_PXP_SEL_MASK
 0x20000000u

	)

12675 
	#GIS_CH4_ADDR1_PXP_SEL_SHIFT
 29

	)

12676 
	#GIS_CH4_ADDR1_LCDIF0_SEL_MASK
 0x40000000u

	)

12677 
	#GIS_CH4_ADDR1_LCDIF0_SEL_SHIFT
 30

	)

12678 
	#GIS_CH4_ADDR1_LCDIF1_SEL_MASK
 0x80000000u

	)

12679 
	#GIS_CH4_ADDR1_LCDIF1_SEL_SHIFT
 31

	)

12681 
	#GIS_CH4_ADDR1_SET_ADDR_MASK
 0x7FFFFFFu

	)

12682 
	#GIS_CH4_ADDR1_SET_ADDR_SHIFT
 0

	)

12683 
	#GIS_CH4_ADDR1_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_ADDR1_SET_ADDR_SHIFT
))&
GIS_CH4_ADDR1_SET_ADDR_MASK
)

	)

12684 
	#GIS_CH4_ADDR1_SET_CSI0_SEL_MASK
 0x8000000u

	)

12685 
	#GIS_CH4_ADDR1_SET_CSI0_SEL_SHIFT
 27

	)

12686 
	#GIS_CH4_ADDR1_SET_CSI1_SEL_MASK
 0x10000000u

	)

12687 
	#GIS_CH4_ADDR1_SET_CSI1_SEL_SHIFT
 28

	)

12688 
	#GIS_CH4_ADDR1_SET_PXP_SEL_MASK
 0x20000000u

	)

12689 
	#GIS_CH4_ADDR1_SET_PXP_SEL_SHIFT
 29

	)

12690 
	#GIS_CH4_ADDR1_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

12691 
	#GIS_CH4_ADDR1_SET_LCDIF0_SEL_SHIFT
 30

	)

12692 
	#GIS_CH4_ADDR1_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

12693 
	#GIS_CH4_ADDR1_SET_LCDIF1_SEL_SHIFT
 31

	)

12695 
	#GIS_CH4_ADDR1_CLR_ADDR_MASK
 0x7FFFFFFu

	)

12696 
	#GIS_CH4_ADDR1_CLR_ADDR_SHIFT
 0

	)

12697 
	#GIS_CH4_ADDR1_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_ADDR1_CLR_ADDR_SHIFT
))&
GIS_CH4_ADDR1_CLR_ADDR_MASK
)

	)

12698 
	#GIS_CH4_ADDR1_CLR_CSI0_SEL_MASK
 0x8000000u

	)

12699 
	#GIS_CH4_ADDR1_CLR_CSI0_SEL_SHIFT
 27

	)

12700 
	#GIS_CH4_ADDR1_CLR_CSI1_SEL_MASK
 0x10000000u

	)

12701 
	#GIS_CH4_ADDR1_CLR_CSI1_SEL_SHIFT
 28

	)

12702 
	#GIS_CH4_ADDR1_CLR_PXP_SEL_MASK
 0x20000000u

	)

12703 
	#GIS_CH4_ADDR1_CLR_PXP_SEL_SHIFT
 29

	)

12704 
	#GIS_CH4_ADDR1_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

12705 
	#GIS_CH4_ADDR1_CLR_LCDIF0_SEL_SHIFT
 30

	)

12706 
	#GIS_CH4_ADDR1_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

12707 
	#GIS_CH4_ADDR1_CLR_LCDIF1_SEL_SHIFT
 31

	)

12709 
	#GIS_CH4_ADDR1_TOG_ADDR_MASK
 0x7FFFFFFu

	)

12710 
	#GIS_CH4_ADDR1_TOG_ADDR_SHIFT
 0

	)

12711 
	#GIS_CH4_ADDR1_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_ADDR1_TOG_ADDR_SHIFT
))&
GIS_CH4_ADDR1_TOG_ADDR_MASK
)

	)

12712 
	#GIS_CH4_ADDR1_TOG_CSI0_SEL_MASK
 0x8000000u

	)

12713 
	#GIS_CH4_ADDR1_TOG_CSI0_SEL_SHIFT
 27

	)

12714 
	#GIS_CH4_ADDR1_TOG_CSI1_SEL_MASK
 0x10000000u

	)

12715 
	#GIS_CH4_ADDR1_TOG_CSI1_SEL_SHIFT
 28

	)

12716 
	#GIS_CH4_ADDR1_TOG_PXP_SEL_MASK
 0x20000000u

	)

12717 
	#GIS_CH4_ADDR1_TOG_PXP_SEL_SHIFT
 29

	)

12718 
	#GIS_CH4_ADDR1_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

12719 
	#GIS_CH4_ADDR1_TOG_LCDIF0_SEL_SHIFT
 30

	)

12720 
	#GIS_CH4_ADDR1_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

12721 
	#GIS_CH4_ADDR1_TOG_LCDIF1_SEL_SHIFT
 31

	)

12723 
	#GIS_CH4_DATA1_DATA_MASK
 0xFFFFFFFFu

	)

12724 
	#GIS_CH4_DATA1_DATA_SHIFT
 0

	)

12725 
	#GIS_CH4_DATA1_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_DATA1_DATA_SHIFT
))&
GIS_CH4_DATA1_DATA_MASK
)

	)

12727 
	#GIS_CH4_ADDR2_ADDR_MASK
 0x7FFFFFFu

	)

12728 
	#GIS_CH4_ADDR2_ADDR_SHIFT
 0

	)

12729 
	#GIS_CH4_ADDR2_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_ADDR2_ADDR_SHIFT
))&
GIS_CH4_ADDR2_ADDR_MASK
)

	)

12730 
	#GIS_CH4_ADDR2_CSI0_SEL_MASK
 0x8000000u

	)

12731 
	#GIS_CH4_ADDR2_CSI0_SEL_SHIFT
 27

	)

12732 
	#GIS_CH4_ADDR2_CSI1_SEL_MASK
 0x10000000u

	)

12733 
	#GIS_CH4_ADDR2_CSI1_SEL_SHIFT
 28

	)

12734 
	#GIS_CH4_ADDR2_PXP_SEL_MASK
 0x20000000u

	)

12735 
	#GIS_CH4_ADDR2_PXP_SEL_SHIFT
 29

	)

12736 
	#GIS_CH4_ADDR2_LCDIF0_SEL_MASK
 0x40000000u

	)

12737 
	#GIS_CH4_ADDR2_LCDIF0_SEL_SHIFT
 30

	)

12738 
	#GIS_CH4_ADDR2_LCDIF1_SEL_MASK
 0x80000000u

	)

12739 
	#GIS_CH4_ADDR2_LCDIF1_SEL_SHIFT
 31

	)

12741 
	#GIS_CH4_ADDR2_SET_ADDR_MASK
 0x7FFFFFFu

	)

12742 
	#GIS_CH4_ADDR2_SET_ADDR_SHIFT
 0

	)

12743 
	#GIS_CH4_ADDR2_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_ADDR2_SET_ADDR_SHIFT
))&
GIS_CH4_ADDR2_SET_ADDR_MASK
)

	)

12744 
	#GIS_CH4_ADDR2_SET_CSI0_SEL_MASK
 0x8000000u

	)

12745 
	#GIS_CH4_ADDR2_SET_CSI0_SEL_SHIFT
 27

	)

12746 
	#GIS_CH4_ADDR2_SET_CSI1_SEL_MASK
 0x10000000u

	)

12747 
	#GIS_CH4_ADDR2_SET_CSI1_SEL_SHIFT
 28

	)

12748 
	#GIS_CH4_ADDR2_SET_PXP_SEL_MASK
 0x20000000u

	)

12749 
	#GIS_CH4_ADDR2_SET_PXP_SEL_SHIFT
 29

	)

12750 
	#GIS_CH4_ADDR2_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

12751 
	#GIS_CH4_ADDR2_SET_LCDIF0_SEL_SHIFT
 30

	)

12752 
	#GIS_CH4_ADDR2_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

12753 
	#GIS_CH4_ADDR2_SET_LCDIF1_SEL_SHIFT
 31

	)

12755 
	#GIS_CH4_ADDR2_CLR_ADDR_MASK
 0x7FFFFFFu

	)

12756 
	#GIS_CH4_ADDR2_CLR_ADDR_SHIFT
 0

	)

12757 
	#GIS_CH4_ADDR2_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_ADDR2_CLR_ADDR_SHIFT
))&
GIS_CH4_ADDR2_CLR_ADDR_MASK
)

	)

12758 
	#GIS_CH4_ADDR2_CLR_CSI0_SEL_MASK
 0x8000000u

	)

12759 
	#GIS_CH4_ADDR2_CLR_CSI0_SEL_SHIFT
 27

	)

12760 
	#GIS_CH4_ADDR2_CLR_CSI1_SEL_MASK
 0x10000000u

	)

12761 
	#GIS_CH4_ADDR2_CLR_CSI1_SEL_SHIFT
 28

	)

12762 
	#GIS_CH4_ADDR2_CLR_PXP_SEL_MASK
 0x20000000u

	)

12763 
	#GIS_CH4_ADDR2_CLR_PXP_SEL_SHIFT
 29

	)

12764 
	#GIS_CH4_ADDR2_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

12765 
	#GIS_CH4_ADDR2_CLR_LCDIF0_SEL_SHIFT
 30

	)

12766 
	#GIS_CH4_ADDR2_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

12767 
	#GIS_CH4_ADDR2_CLR_LCDIF1_SEL_SHIFT
 31

	)

12769 
	#GIS_CH4_ADDR2_TOG_ADDR_MASK
 0x7FFFFFFu

	)

12770 
	#GIS_CH4_ADDR2_TOG_ADDR_SHIFT
 0

	)

12771 
	#GIS_CH4_ADDR2_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_ADDR2_TOG_ADDR_SHIFT
))&
GIS_CH4_ADDR2_TOG_ADDR_MASK
)

	)

12772 
	#GIS_CH4_ADDR2_TOG_CSI0_SEL_MASK
 0x8000000u

	)

12773 
	#GIS_CH4_ADDR2_TOG_CSI0_SEL_SHIFT
 27

	)

12774 
	#GIS_CH4_ADDR2_TOG_CSI1_SEL_MASK
 0x10000000u

	)

12775 
	#GIS_CH4_ADDR2_TOG_CSI1_SEL_SHIFT
 28

	)

12776 
	#GIS_CH4_ADDR2_TOG_PXP_SEL_MASK
 0x20000000u

	)

12777 
	#GIS_CH4_ADDR2_TOG_PXP_SEL_SHIFT
 29

	)

12778 
	#GIS_CH4_ADDR2_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

12779 
	#GIS_CH4_ADDR2_TOG_LCDIF0_SEL_SHIFT
 30

	)

12780 
	#GIS_CH4_ADDR2_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

12781 
	#GIS_CH4_ADDR2_TOG_LCDIF1_SEL_SHIFT
 31

	)

12783 
	#GIS_CH4_DATA2_DATA_MASK
 0xFFFFFFFFu

	)

12784 
	#GIS_CH4_DATA2_DATA_SHIFT
 0

	)

12785 
	#GIS_CH4_DATA2_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_DATA2_DATA_SHIFT
))&
GIS_CH4_DATA2_DATA_MASK
)

	)

12787 
	#GIS_CH4_ADDR3_ADDR_MASK
 0x7FFFFFFu

	)

12788 
	#GIS_CH4_ADDR3_ADDR_SHIFT
 0

	)

12789 
	#GIS_CH4_ADDR3_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_ADDR3_ADDR_SHIFT
))&
GIS_CH4_ADDR3_ADDR_MASK
)

	)

12790 
	#GIS_CH4_ADDR3_CSI0_SEL_MASK
 0x8000000u

	)

12791 
	#GIS_CH4_ADDR3_CSI0_SEL_SHIFT
 27

	)

12792 
	#GIS_CH4_ADDR3_CSI1_SEL_MASK
 0x10000000u

	)

12793 
	#GIS_CH4_ADDR3_CSI1_SEL_SHIFT
 28

	)

12794 
	#GIS_CH4_ADDR3_PXP_SEL_MASK
 0x20000000u

	)

12795 
	#GIS_CH4_ADDR3_PXP_SEL_SHIFT
 29

	)

12796 
	#GIS_CH4_ADDR3_LCDIF0_SEL_MASK
 0x40000000u

	)

12797 
	#GIS_CH4_ADDR3_LCDIF0_SEL_SHIFT
 30

	)

12798 
	#GIS_CH4_ADDR3_LCDIF1_SEL_MASK
 0x80000000u

	)

12799 
	#GIS_CH4_ADDR3_LCDIF1_SEL_SHIFT
 31

	)

12801 
	#GIS_CH4_ADDR3_SET_ADDR_MASK
 0x7FFFFFFu

	)

12802 
	#GIS_CH4_ADDR3_SET_ADDR_SHIFT
 0

	)

12803 
	#GIS_CH4_ADDR3_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_ADDR3_SET_ADDR_SHIFT
))&
GIS_CH4_ADDR3_SET_ADDR_MASK
)

	)

12804 
	#GIS_CH4_ADDR3_SET_CSI0_SEL_MASK
 0x8000000u

	)

12805 
	#GIS_CH4_ADDR3_SET_CSI0_SEL_SHIFT
 27

	)

12806 
	#GIS_CH4_ADDR3_SET_CSI1_SEL_MASK
 0x10000000u

	)

12807 
	#GIS_CH4_ADDR3_SET_CSI1_SEL_SHIFT
 28

	)

12808 
	#GIS_CH4_ADDR3_SET_PXP_SEL_MASK
 0x20000000u

	)

12809 
	#GIS_CH4_ADDR3_SET_PXP_SEL_SHIFT
 29

	)

12810 
	#GIS_CH4_ADDR3_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

12811 
	#GIS_CH4_ADDR3_SET_LCDIF0_SEL_SHIFT
 30

	)

12812 
	#GIS_CH4_ADDR3_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

12813 
	#GIS_CH4_ADDR3_SET_LCDIF1_SEL_SHIFT
 31

	)

12815 
	#GIS_CH4_ADDR3_CLR_ADDR_MASK
 0x7FFFFFFu

	)

12816 
	#GIS_CH4_ADDR3_CLR_ADDR_SHIFT
 0

	)

12817 
	#GIS_CH4_ADDR3_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_ADDR3_CLR_ADDR_SHIFT
))&
GIS_CH4_ADDR3_CLR_ADDR_MASK
)

	)

12818 
	#GIS_CH4_ADDR3_CLR_CSI0_SEL_MASK
 0x8000000u

	)

12819 
	#GIS_CH4_ADDR3_CLR_CSI0_SEL_SHIFT
 27

	)

12820 
	#GIS_CH4_ADDR3_CLR_CSI1_SEL_MASK
 0x10000000u

	)

12821 
	#GIS_CH4_ADDR3_CLR_CSI1_SEL_SHIFT
 28

	)

12822 
	#GIS_CH4_ADDR3_CLR_PXP_SEL_MASK
 0x20000000u

	)

12823 
	#GIS_CH4_ADDR3_CLR_PXP_SEL_SHIFT
 29

	)

12824 
	#GIS_CH4_ADDR3_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

12825 
	#GIS_CH4_ADDR3_CLR_LCDIF0_SEL_SHIFT
 30

	)

12826 
	#GIS_CH4_ADDR3_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

12827 
	#GIS_CH4_ADDR3_CLR_LCDIF1_SEL_SHIFT
 31

	)

12829 
	#GIS_CH4_ADDR3_TOG_ADDR_MASK
 0x7FFFFFFu

	)

12830 
	#GIS_CH4_ADDR3_TOG_ADDR_SHIFT
 0

	)

12831 
	#GIS_CH4_ADDR3_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_ADDR3_TOG_ADDR_SHIFT
))&
GIS_CH4_ADDR3_TOG_ADDR_MASK
)

	)

12832 
	#GIS_CH4_ADDR3_TOG_CSI0_SEL_MASK
 0x8000000u

	)

12833 
	#GIS_CH4_ADDR3_TOG_CSI0_SEL_SHIFT
 27

	)

12834 
	#GIS_CH4_ADDR3_TOG_CSI1_SEL_MASK
 0x10000000u

	)

12835 
	#GIS_CH4_ADDR3_TOG_CSI1_SEL_SHIFT
 28

	)

12836 
	#GIS_CH4_ADDR3_TOG_PXP_SEL_MASK
 0x20000000u

	)

12837 
	#GIS_CH4_ADDR3_TOG_PXP_SEL_SHIFT
 29

	)

12838 
	#GIS_CH4_ADDR3_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

12839 
	#GIS_CH4_ADDR3_TOG_LCDIF0_SEL_SHIFT
 30

	)

12840 
	#GIS_CH4_ADDR3_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

12841 
	#GIS_CH4_ADDR3_TOG_LCDIF1_SEL_SHIFT
 31

	)

12843 
	#GIS_CH4_DATA3_DATA_MASK
 0xFFFFFFFFu

	)

12844 
	#GIS_CH4_DATA3_DATA_SHIFT
 0

	)

12845 
	#GIS_CH4_DATA3_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH4_DATA3_DATA_SHIFT
))&
GIS_CH4_DATA3_DATA_MASK
)

	)

12847 
	#GIS_CH5_CTRL_CMD0_OPCODE_MASK
 0xFu

	)

12848 
	#GIS_CH5_CTRL_CMD0_OPCODE_SHIFT
 0

	)

12849 
	#GIS_CH5_CTRL_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_CMD0_OPCODE_SHIFT
))&
GIS_CH5_CTRL_CMD0_OPCODE_MASK
)

	)

12850 
	#GIS_CH5_CTRL_CMD0_ALU_MASK
 0x70u

	)

12851 
	#GIS_CH5_CTRL_CMD0_ALU_SHIFT
 4

	)

12852 
	#GIS_CH5_CTRL_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_CMD0_ALU_SHIFT
))&
GIS_CH5_CTRL_CMD0_ALU_MASK
)

	)

12853 
	#GIS_CH5_CTRL_CMD0_ACC_NEG_MASK
 0x80u

	)

12854 
	#GIS_CH5_CTRL_CMD0_ACC_NEG_SHIFT
 7

	)

12855 
	#GIS_CH5_CTRL_CMD1_OPCODE_MASK
 0xF00u

	)

12856 
	#GIS_CH5_CTRL_CMD1_OPCODE_SHIFT
 8

	)

12857 
	#GIS_CH5_CTRL_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_CMD1_OPCODE_SHIFT
))&
GIS_CH5_CTRL_CMD1_OPCODE_MASK
)

	)

12858 
	#GIS_CH5_CTRL_CMD1_ALU_MASK
 0x7000u

	)

12859 
	#GIS_CH5_CTRL_CMD1_ALU_SHIFT
 12

	)

12860 
	#GIS_CH5_CTRL_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_CMD1_ALU_SHIFT
))&
GIS_CH5_CTRL_CMD1_ALU_MASK
)

	)

12861 
	#GIS_CH5_CTRL_CMD1_ACC_NEG_MASK
 0x8000u

	)

12862 
	#GIS_CH5_CTRL_CMD1_ACC_NEG_SHIFT
 15

	)

12863 
	#GIS_CH5_CTRL_CMD2_OPCODE_MASK
 0xF0000u

	)

12864 
	#GIS_CH5_CTRL_CMD2_OPCODE_SHIFT
 16

	)

12865 
	#GIS_CH5_CTRL_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_CMD2_OPCODE_SHIFT
))&
GIS_CH5_CTRL_CMD2_OPCODE_MASK
)

	)

12866 
	#GIS_CH5_CTRL_CMD2_ALU_MASK
 0x700000u

	)

12867 
	#GIS_CH5_CTRL_CMD2_ALU_SHIFT
 20

	)

12868 
	#GIS_CH5_CTRL_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_CMD2_ALU_SHIFT
))&
GIS_CH5_CTRL_CMD2_ALU_MASK
)

	)

12869 
	#GIS_CH5_CTRL_CMD2_ACC_NEG_MASK
 0x800000u

	)

12870 
	#GIS_CH5_CTRL_CMD2_ACC_NEG_SHIFT
 23

	)

12871 
	#GIS_CH5_CTRL_CMD3_OPCODE_MASK
 0xF000000u

	)

12872 
	#GIS_CH5_CTRL_CMD3_OPCODE_SHIFT
 24

	)

12873 
	#GIS_CH5_CTRL_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_CMD3_OPCODE_SHIFT
))&
GIS_CH5_CTRL_CMD3_OPCODE_MASK
)

	)

12874 
	#GIS_CH5_CTRL_CMD3_ALU_MASK
 0x70000000u

	)

12875 
	#GIS_CH5_CTRL_CMD3_ALU_SHIFT
 28

	)

12876 
	#GIS_CH5_CTRL_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_CMD3_ALU_SHIFT
))&
GIS_CH5_CTRL_CMD3_ALU_MASK
)

	)

12877 
	#GIS_CH5_CTRL_CMD3_ACC_NEG_MASK
 0x80000000u

	)

12878 
	#GIS_CH5_CTRL_CMD3_ACC_NEG_SHIFT
 31

	)

12880 
	#GIS_CH5_CTRL_SET_CMD0_OPCODE_MASK
 0xFu

	)

12881 
	#GIS_CH5_CTRL_SET_CMD0_OPCODE_SHIFT
 0

	)

12882 
	#GIS_CH5_CTRL_SET_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_SET_CMD0_OPCODE_SHIFT
))&
GIS_CH5_CTRL_SET_CMD0_OPCODE_MASK
)

	)

12883 
	#GIS_CH5_CTRL_SET_CMD0_ALU_MASK
 0x70u

	)

12884 
	#GIS_CH5_CTRL_SET_CMD0_ALU_SHIFT
 4

	)

12885 
	#GIS_CH5_CTRL_SET_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_SET_CMD0_ALU_SHIFT
))&
GIS_CH5_CTRL_SET_CMD0_ALU_MASK
)

	)

12886 
	#GIS_CH5_CTRL_SET_CMD0_ACC_NEG_MASK
 0x80u

	)

12887 
	#GIS_CH5_CTRL_SET_CMD0_ACC_NEG_SHIFT
 7

	)

12888 
	#GIS_CH5_CTRL_SET_CMD1_OPCODE_MASK
 0xF00u

	)

12889 
	#GIS_CH5_CTRL_SET_CMD1_OPCODE_SHIFT
 8

	)

12890 
	#GIS_CH5_CTRL_SET_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_SET_CMD1_OPCODE_SHIFT
))&
GIS_CH5_CTRL_SET_CMD1_OPCODE_MASK
)

	)

12891 
	#GIS_CH5_CTRL_SET_CMD1_ALU_MASK
 0x7000u

	)

12892 
	#GIS_CH5_CTRL_SET_CMD1_ALU_SHIFT
 12

	)

12893 
	#GIS_CH5_CTRL_SET_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_SET_CMD1_ALU_SHIFT
))&
GIS_CH5_CTRL_SET_CMD1_ALU_MASK
)

	)

12894 
	#GIS_CH5_CTRL_SET_CMD1_ACC_NEG_MASK
 0x8000u

	)

12895 
	#GIS_CH5_CTRL_SET_CMD1_ACC_NEG_SHIFT
 15

	)

12896 
	#GIS_CH5_CTRL_SET_CMD2_OPCODE_MASK
 0xF0000u

	)

12897 
	#GIS_CH5_CTRL_SET_CMD2_OPCODE_SHIFT
 16

	)

12898 
	#GIS_CH5_CTRL_SET_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_SET_CMD2_OPCODE_SHIFT
))&
GIS_CH5_CTRL_SET_CMD2_OPCODE_MASK
)

	)

12899 
	#GIS_CH5_CTRL_SET_CMD2_ALU_MASK
 0x700000u

	)

12900 
	#GIS_CH5_CTRL_SET_CMD2_ALU_SHIFT
 20

	)

12901 
	#GIS_CH5_CTRL_SET_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_SET_CMD2_ALU_SHIFT
))&
GIS_CH5_CTRL_SET_CMD2_ALU_MASK
)

	)

12902 
	#GIS_CH5_CTRL_SET_CMD2_ACC_NEG_MASK
 0x800000u

	)

12903 
	#GIS_CH5_CTRL_SET_CMD2_ACC_NEG_SHIFT
 23

	)

12904 
	#GIS_CH5_CTRL_SET_CMD3_OPCODE_MASK
 0xF000000u

	)

12905 
	#GIS_CH5_CTRL_SET_CMD3_OPCODE_SHIFT
 24

	)

12906 
	#GIS_CH5_CTRL_SET_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_SET_CMD3_OPCODE_SHIFT
))&
GIS_CH5_CTRL_SET_CMD3_OPCODE_MASK
)

	)

12907 
	#GIS_CH5_CTRL_SET_CMD3_ALU_MASK
 0x70000000u

	)

12908 
	#GIS_CH5_CTRL_SET_CMD3_ALU_SHIFT
 28

	)

12909 
	#GIS_CH5_CTRL_SET_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_SET_CMD3_ALU_SHIFT
))&
GIS_CH5_CTRL_SET_CMD3_ALU_MASK
)

	)

12910 
	#GIS_CH5_CTRL_SET_CMD3_ACC_NEG_MASK
 0x80000000u

	)

12911 
	#GIS_CH5_CTRL_SET_CMD3_ACC_NEG_SHIFT
 31

	)

12913 
	#GIS_CH5_CTRL_CLR_CMD0_OPCODE_MASK
 0xFu

	)

12914 
	#GIS_CH5_CTRL_CLR_CMD0_OPCODE_SHIFT
 0

	)

12915 
	#GIS_CH5_CTRL_CLR_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_CLR_CMD0_OPCODE_SHIFT
))&
GIS_CH5_CTRL_CLR_CMD0_OPCODE_MASK
)

	)

12916 
	#GIS_CH5_CTRL_CLR_CMD0_ALU_MASK
 0x70u

	)

12917 
	#GIS_CH5_CTRL_CLR_CMD0_ALU_SHIFT
 4

	)

12918 
	#GIS_CH5_CTRL_CLR_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_CLR_CMD0_ALU_SHIFT
))&
GIS_CH5_CTRL_CLR_CMD0_ALU_MASK
)

	)

12919 
	#GIS_CH5_CTRL_CLR_CMD0_ACC_NEG_MASK
 0x80u

	)

12920 
	#GIS_CH5_CTRL_CLR_CMD0_ACC_NEG_SHIFT
 7

	)

12921 
	#GIS_CH5_CTRL_CLR_CMD1_OPCODE_MASK
 0xF00u

	)

12922 
	#GIS_CH5_CTRL_CLR_CMD1_OPCODE_SHIFT
 8

	)

12923 
	#GIS_CH5_CTRL_CLR_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_CLR_CMD1_OPCODE_SHIFT
))&
GIS_CH5_CTRL_CLR_CMD1_OPCODE_MASK
)

	)

12924 
	#GIS_CH5_CTRL_CLR_CMD1_ALU_MASK
 0x7000u

	)

12925 
	#GIS_CH5_CTRL_CLR_CMD1_ALU_SHIFT
 12

	)

12926 
	#GIS_CH5_CTRL_CLR_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_CLR_CMD1_ALU_SHIFT
))&
GIS_CH5_CTRL_CLR_CMD1_ALU_MASK
)

	)

12927 
	#GIS_CH5_CTRL_CLR_CMD1_ACC_NEG_MASK
 0x8000u

	)

12928 
	#GIS_CH5_CTRL_CLR_CMD1_ACC_NEG_SHIFT
 15

	)

12929 
	#GIS_CH5_CTRL_CLR_CMD2_OPCODE_MASK
 0xF0000u

	)

12930 
	#GIS_CH5_CTRL_CLR_CMD2_OPCODE_SHIFT
 16

	)

12931 
	#GIS_CH5_CTRL_CLR_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_CLR_CMD2_OPCODE_SHIFT
))&
GIS_CH5_CTRL_CLR_CMD2_OPCODE_MASK
)

	)

12932 
	#GIS_CH5_CTRL_CLR_CMD2_ALU_MASK
 0x700000u

	)

12933 
	#GIS_CH5_CTRL_CLR_CMD2_ALU_SHIFT
 20

	)

12934 
	#GIS_CH5_CTRL_CLR_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_CLR_CMD2_ALU_SHIFT
))&
GIS_CH5_CTRL_CLR_CMD2_ALU_MASK
)

	)

12935 
	#GIS_CH5_CTRL_CLR_CMD2_ACC_NEG_MASK
 0x800000u

	)

12936 
	#GIS_CH5_CTRL_CLR_CMD2_ACC_NEG_SHIFT
 23

	)

12937 
	#GIS_CH5_CTRL_CLR_CMD3_OPCODE_MASK
 0xF000000u

	)

12938 
	#GIS_CH5_CTRL_CLR_CMD3_OPCODE_SHIFT
 24

	)

12939 
	#GIS_CH5_CTRL_CLR_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_CLR_CMD3_OPCODE_SHIFT
))&
GIS_CH5_CTRL_CLR_CMD3_OPCODE_MASK
)

	)

12940 
	#GIS_CH5_CTRL_CLR_CMD3_ALU_MASK
 0x70000000u

	)

12941 
	#GIS_CH5_CTRL_CLR_CMD3_ALU_SHIFT
 28

	)

12942 
	#GIS_CH5_CTRL_CLR_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_CLR_CMD3_ALU_SHIFT
))&
GIS_CH5_CTRL_CLR_CMD3_ALU_MASK
)

	)

12943 
	#GIS_CH5_CTRL_CLR_CMD3_ACC_NEG_MASK
 0x80000000u

	)

12944 
	#GIS_CH5_CTRL_CLR_CMD3_ACC_NEG_SHIFT
 31

	)

12946 
	#GIS_CH5_CTRL_TOG_CMD0_OPCODE_MASK
 0xFu

	)

12947 
	#GIS_CH5_CTRL_TOG_CMD0_OPCODE_SHIFT
 0

	)

12948 
	#GIS_CH5_CTRL_TOG_CMD0_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_TOG_CMD0_OPCODE_SHIFT
))&
GIS_CH5_CTRL_TOG_CMD0_OPCODE_MASK
)

	)

12949 
	#GIS_CH5_CTRL_TOG_CMD0_ALU_MASK
 0x70u

	)

12950 
	#GIS_CH5_CTRL_TOG_CMD0_ALU_SHIFT
 4

	)

12951 
	#GIS_CH5_CTRL_TOG_CMD0_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_TOG_CMD0_ALU_SHIFT
))&
GIS_CH5_CTRL_TOG_CMD0_ALU_MASK
)

	)

12952 
	#GIS_CH5_CTRL_TOG_CMD0_ACC_NEG_MASK
 0x80u

	)

12953 
	#GIS_CH5_CTRL_TOG_CMD0_ACC_NEG_SHIFT
 7

	)

12954 
	#GIS_CH5_CTRL_TOG_CMD1_OPCODE_MASK
 0xF00u

	)

12955 
	#GIS_CH5_CTRL_TOG_CMD1_OPCODE_SHIFT
 8

	)

12956 
	#GIS_CH5_CTRL_TOG_CMD1_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_TOG_CMD1_OPCODE_SHIFT
))&
GIS_CH5_CTRL_TOG_CMD1_OPCODE_MASK
)

	)

12957 
	#GIS_CH5_CTRL_TOG_CMD1_ALU_MASK
 0x7000u

	)

12958 
	#GIS_CH5_CTRL_TOG_CMD1_ALU_SHIFT
 12

	)

12959 
	#GIS_CH5_CTRL_TOG_CMD1_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_TOG_CMD1_ALU_SHIFT
))&
GIS_CH5_CTRL_TOG_CMD1_ALU_MASK
)

	)

12960 
	#GIS_CH5_CTRL_TOG_CMD1_ACC_NEG_MASK
 0x8000u

	)

12961 
	#GIS_CH5_CTRL_TOG_CMD1_ACC_NEG_SHIFT
 15

	)

12962 
	#GIS_CH5_CTRL_TOG_CMD2_OPCODE_MASK
 0xF0000u

	)

12963 
	#GIS_CH5_CTRL_TOG_CMD2_OPCODE_SHIFT
 16

	)

12964 
	#GIS_CH5_CTRL_TOG_CMD2_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_TOG_CMD2_OPCODE_SHIFT
))&
GIS_CH5_CTRL_TOG_CMD2_OPCODE_MASK
)

	)

12965 
	#GIS_CH5_CTRL_TOG_CMD2_ALU_MASK
 0x700000u

	)

12966 
	#GIS_CH5_CTRL_TOG_CMD2_ALU_SHIFT
 20

	)

12967 
	#GIS_CH5_CTRL_TOG_CMD2_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_TOG_CMD2_ALU_SHIFT
))&
GIS_CH5_CTRL_TOG_CMD2_ALU_MASK
)

	)

12968 
	#GIS_CH5_CTRL_TOG_CMD2_ACC_NEG_MASK
 0x800000u

	)

12969 
	#GIS_CH5_CTRL_TOG_CMD2_ACC_NEG_SHIFT
 23

	)

12970 
	#GIS_CH5_CTRL_TOG_CMD3_OPCODE_MASK
 0xF000000u

	)

12971 
	#GIS_CH5_CTRL_TOG_CMD3_OPCODE_SHIFT
 24

	)

12972 
	#GIS_CH5_CTRL_TOG_CMD3_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_TOG_CMD3_OPCODE_SHIFT
))&
GIS_CH5_CTRL_TOG_CMD3_OPCODE_MASK
)

	)

12973 
	#GIS_CH5_CTRL_TOG_CMD3_ALU_MASK
 0x70000000u

	)

12974 
	#GIS_CH5_CTRL_TOG_CMD3_ALU_SHIFT
 28

	)

12975 
	#GIS_CH5_CTRL_TOG_CMD3_ALU
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_CTRL_TOG_CMD3_ALU_SHIFT
))&
GIS_CH5_CTRL_TOG_CMD3_ALU_MASK
)

	)

12976 
	#GIS_CH5_CTRL_TOG_CMD3_ACC_NEG_MASK
 0x80000000u

	)

12977 
	#GIS_CH5_CTRL_TOG_CMD3_ACC_NEG_SHIFT
 31

	)

12979 
	#GIS_CH5_ADDR0_ADDR_MASK
 0x7FFFFFFu

	)

12980 
	#GIS_CH5_ADDR0_ADDR_SHIFT
 0

	)

12981 
	#GIS_CH5_ADDR0_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_ADDR0_ADDR_SHIFT
))&
GIS_CH5_ADDR0_ADDR_MASK
)

	)

12982 
	#GIS_CH5_ADDR0_CSI0_SEL_MASK
 0x8000000u

	)

12983 
	#GIS_CH5_ADDR0_CSI0_SEL_SHIFT
 27

	)

12984 
	#GIS_CH5_ADDR0_CSI1_SEL_MASK
 0x10000000u

	)

12985 
	#GIS_CH5_ADDR0_CSI1_SEL_SHIFT
 28

	)

12986 
	#GIS_CH5_ADDR0_PXP_SEL_MASK
 0x20000000u

	)

12987 
	#GIS_CH5_ADDR0_PXP_SEL_SHIFT
 29

	)

12988 
	#GIS_CH5_ADDR0_LCDIF0_SEL_MASK
 0x40000000u

	)

12989 
	#GIS_CH5_ADDR0_LCDIF0_SEL_SHIFT
 30

	)

12990 
	#GIS_CH5_ADDR0_LCDIF1_SEL_MASK
 0x80000000u

	)

12991 
	#GIS_CH5_ADDR0_LCDIF1_SEL_SHIFT
 31

	)

12993 
	#GIS_CH5_ADDR0_SET_ADDR_MASK
 0x7FFFFFFu

	)

12994 
	#GIS_CH5_ADDR0_SET_ADDR_SHIFT
 0

	)

12995 
	#GIS_CH5_ADDR0_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_ADDR0_SET_ADDR_SHIFT
))&
GIS_CH5_ADDR0_SET_ADDR_MASK
)

	)

12996 
	#GIS_CH5_ADDR0_SET_CSI0_SEL_MASK
 0x8000000u

	)

12997 
	#GIS_CH5_ADDR0_SET_CSI0_SEL_SHIFT
 27

	)

12998 
	#GIS_CH5_ADDR0_SET_CSI1_SEL_MASK
 0x10000000u

	)

12999 
	#GIS_CH5_ADDR0_SET_CSI1_SEL_SHIFT
 28

	)

13000 
	#GIS_CH5_ADDR0_SET_PXP_SEL_MASK
 0x20000000u

	)

13001 
	#GIS_CH5_ADDR0_SET_PXP_SEL_SHIFT
 29

	)

13002 
	#GIS_CH5_ADDR0_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

13003 
	#GIS_CH5_ADDR0_SET_LCDIF0_SEL_SHIFT
 30

	)

13004 
	#GIS_CH5_ADDR0_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

13005 
	#GIS_CH5_ADDR0_SET_LCDIF1_SEL_SHIFT
 31

	)

13007 
	#GIS_CH5_ADDR0_CLR_ADDR_MASK
 0x7FFFFFFu

	)

13008 
	#GIS_CH5_ADDR0_CLR_ADDR_SHIFT
 0

	)

13009 
	#GIS_CH5_ADDR0_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_ADDR0_CLR_ADDR_SHIFT
))&
GIS_CH5_ADDR0_CLR_ADDR_MASK
)

	)

13010 
	#GIS_CH5_ADDR0_CLR_CSI0_SEL_MASK
 0x8000000u

	)

13011 
	#GIS_CH5_ADDR0_CLR_CSI0_SEL_SHIFT
 27

	)

13012 
	#GIS_CH5_ADDR0_CLR_CSI1_SEL_MASK
 0x10000000u

	)

13013 
	#GIS_CH5_ADDR0_CLR_CSI1_SEL_SHIFT
 28

	)

13014 
	#GIS_CH5_ADDR0_CLR_PXP_SEL_MASK
 0x20000000u

	)

13015 
	#GIS_CH5_ADDR0_CLR_PXP_SEL_SHIFT
 29

	)

13016 
	#GIS_CH5_ADDR0_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

13017 
	#GIS_CH5_ADDR0_CLR_LCDIF0_SEL_SHIFT
 30

	)

13018 
	#GIS_CH5_ADDR0_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

13019 
	#GIS_CH5_ADDR0_CLR_LCDIF1_SEL_SHIFT
 31

	)

13021 
	#GIS_CH5_ADDR0_TOG_ADDR_MASK
 0x7FFFFFFu

	)

13022 
	#GIS_CH5_ADDR0_TOG_ADDR_SHIFT
 0

	)

13023 
	#GIS_CH5_ADDR0_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_ADDR0_TOG_ADDR_SHIFT
))&
GIS_CH5_ADDR0_TOG_ADDR_MASK
)

	)

13024 
	#GIS_CH5_ADDR0_TOG_CSI0_SEL_MASK
 0x8000000u

	)

13025 
	#GIS_CH5_ADDR0_TOG_CSI0_SEL_SHIFT
 27

	)

13026 
	#GIS_CH5_ADDR0_TOG_CSI1_SEL_MASK
 0x10000000u

	)

13027 
	#GIS_CH5_ADDR0_TOG_CSI1_SEL_SHIFT
 28

	)

13028 
	#GIS_CH5_ADDR0_TOG_PXP_SEL_MASK
 0x20000000u

	)

13029 
	#GIS_CH5_ADDR0_TOG_PXP_SEL_SHIFT
 29

	)

13030 
	#GIS_CH5_ADDR0_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

13031 
	#GIS_CH5_ADDR0_TOG_LCDIF0_SEL_SHIFT
 30

	)

13032 
	#GIS_CH5_ADDR0_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

13033 
	#GIS_CH5_ADDR0_TOG_LCDIF1_SEL_SHIFT
 31

	)

13035 
	#GIS_CH5_DATA0_DATA_MASK
 0xFFFFFFFFu

	)

13036 
	#GIS_CH5_DATA0_DATA_SHIFT
 0

	)

13037 
	#GIS_CH5_DATA0_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_DATA0_DATA_SHIFT
))&
GIS_CH5_DATA0_DATA_MASK
)

	)

13039 
	#GIS_CH5_ADDR1_ADDR_MASK
 0x7FFFFFFu

	)

13040 
	#GIS_CH5_ADDR1_ADDR_SHIFT
 0

	)

13041 
	#GIS_CH5_ADDR1_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_ADDR1_ADDR_SHIFT
))&
GIS_CH5_ADDR1_ADDR_MASK
)

	)

13042 
	#GIS_CH5_ADDR1_CSI0_SEL_MASK
 0x8000000u

	)

13043 
	#GIS_CH5_ADDR1_CSI0_SEL_SHIFT
 27

	)

13044 
	#GIS_CH5_ADDR1_CSI1_SEL_MASK
 0x10000000u

	)

13045 
	#GIS_CH5_ADDR1_CSI1_SEL_SHIFT
 28

	)

13046 
	#GIS_CH5_ADDR1_PXP_SEL_MASK
 0x20000000u

	)

13047 
	#GIS_CH5_ADDR1_PXP_SEL_SHIFT
 29

	)

13048 
	#GIS_CH5_ADDR1_LCDIF0_SEL_MASK
 0x40000000u

	)

13049 
	#GIS_CH5_ADDR1_LCDIF0_SEL_SHIFT
 30

	)

13050 
	#GIS_CH5_ADDR1_LCDIF1_SEL_MASK
 0x80000000u

	)

13051 
	#GIS_CH5_ADDR1_LCDIF1_SEL_SHIFT
 31

	)

13053 
	#GIS_CH5_ADDR1_SET_ADDR_MASK
 0x7FFFFFFu

	)

13054 
	#GIS_CH5_ADDR1_SET_ADDR_SHIFT
 0

	)

13055 
	#GIS_CH5_ADDR1_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_ADDR1_SET_ADDR_SHIFT
))&
GIS_CH5_ADDR1_SET_ADDR_MASK
)

	)

13056 
	#GIS_CH5_ADDR1_SET_CSI0_SEL_MASK
 0x8000000u

	)

13057 
	#GIS_CH5_ADDR1_SET_CSI0_SEL_SHIFT
 27

	)

13058 
	#GIS_CH5_ADDR1_SET_CSI1_SEL_MASK
 0x10000000u

	)

13059 
	#GIS_CH5_ADDR1_SET_CSI1_SEL_SHIFT
 28

	)

13060 
	#GIS_CH5_ADDR1_SET_PXP_SEL_MASK
 0x20000000u

	)

13061 
	#GIS_CH5_ADDR1_SET_PXP_SEL_SHIFT
 29

	)

13062 
	#GIS_CH5_ADDR1_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

13063 
	#GIS_CH5_ADDR1_SET_LCDIF0_SEL_SHIFT
 30

	)

13064 
	#GIS_CH5_ADDR1_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

13065 
	#GIS_CH5_ADDR1_SET_LCDIF1_SEL_SHIFT
 31

	)

13067 
	#GIS_CH5_ADDR1_CLR_ADDR_MASK
 0x7FFFFFFu

	)

13068 
	#GIS_CH5_ADDR1_CLR_ADDR_SHIFT
 0

	)

13069 
	#GIS_CH5_ADDR1_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_ADDR1_CLR_ADDR_SHIFT
))&
GIS_CH5_ADDR1_CLR_ADDR_MASK
)

	)

13070 
	#GIS_CH5_ADDR1_CLR_CSI0_SEL_MASK
 0x8000000u

	)

13071 
	#GIS_CH5_ADDR1_CLR_CSI0_SEL_SHIFT
 27

	)

13072 
	#GIS_CH5_ADDR1_CLR_CSI1_SEL_MASK
 0x10000000u

	)

13073 
	#GIS_CH5_ADDR1_CLR_CSI1_SEL_SHIFT
 28

	)

13074 
	#GIS_CH5_ADDR1_CLR_PXP_SEL_MASK
 0x20000000u

	)

13075 
	#GIS_CH5_ADDR1_CLR_PXP_SEL_SHIFT
 29

	)

13076 
	#GIS_CH5_ADDR1_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

13077 
	#GIS_CH5_ADDR1_CLR_LCDIF0_SEL_SHIFT
 30

	)

13078 
	#GIS_CH5_ADDR1_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

13079 
	#GIS_CH5_ADDR1_CLR_LCDIF1_SEL_SHIFT
 31

	)

13081 
	#GIS_CH5_ADDR1_TOG_ADDR_MASK
 0x7FFFFFFu

	)

13082 
	#GIS_CH5_ADDR1_TOG_ADDR_SHIFT
 0

	)

13083 
	#GIS_CH5_ADDR1_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_ADDR1_TOG_ADDR_SHIFT
))&
GIS_CH5_ADDR1_TOG_ADDR_MASK
)

	)

13084 
	#GIS_CH5_ADDR1_TOG_CSI0_SEL_MASK
 0x8000000u

	)

13085 
	#GIS_CH5_ADDR1_TOG_CSI0_SEL_SHIFT
 27

	)

13086 
	#GIS_CH5_ADDR1_TOG_CSI1_SEL_MASK
 0x10000000u

	)

13087 
	#GIS_CH5_ADDR1_TOG_CSI1_SEL_SHIFT
 28

	)

13088 
	#GIS_CH5_ADDR1_TOG_PXP_SEL_MASK
 0x20000000u

	)

13089 
	#GIS_CH5_ADDR1_TOG_PXP_SEL_SHIFT
 29

	)

13090 
	#GIS_CH5_ADDR1_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

13091 
	#GIS_CH5_ADDR1_TOG_LCDIF0_SEL_SHIFT
 30

	)

13092 
	#GIS_CH5_ADDR1_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

13093 
	#GIS_CH5_ADDR1_TOG_LCDIF1_SEL_SHIFT
 31

	)

13095 
	#GIS_CH5_DATA1_DATA_MASK
 0xFFFFFFFFu

	)

13096 
	#GIS_CH5_DATA1_DATA_SHIFT
 0

	)

13097 
	#GIS_CH5_DATA1_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_DATA1_DATA_SHIFT
))&
GIS_CH5_DATA1_DATA_MASK
)

	)

13099 
	#GIS_CH5_ADDR2_ADDR_MASK
 0x7FFFFFFu

	)

13100 
	#GIS_CH5_ADDR2_ADDR_SHIFT
 0

	)

13101 
	#GIS_CH5_ADDR2_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_ADDR2_ADDR_SHIFT
))&
GIS_CH5_ADDR2_ADDR_MASK
)

	)

13102 
	#GIS_CH5_ADDR2_CSI0_SEL_MASK
 0x8000000u

	)

13103 
	#GIS_CH5_ADDR2_CSI0_SEL_SHIFT
 27

	)

13104 
	#GIS_CH5_ADDR2_CSI1_SEL_MASK
 0x10000000u

	)

13105 
	#GIS_CH5_ADDR2_CSI1_SEL_SHIFT
 28

	)

13106 
	#GIS_CH5_ADDR2_PXP_SEL_MASK
 0x20000000u

	)

13107 
	#GIS_CH5_ADDR2_PXP_SEL_SHIFT
 29

	)

13108 
	#GIS_CH5_ADDR2_LCDIF0_SEL_MASK
 0x40000000u

	)

13109 
	#GIS_CH5_ADDR2_LCDIF0_SEL_SHIFT
 30

	)

13110 
	#GIS_CH5_ADDR2_LCDIF1_SEL_MASK
 0x80000000u

	)

13111 
	#GIS_CH5_ADDR2_LCDIF1_SEL_SHIFT
 31

	)

13113 
	#GIS_CH5_ADDR2_SET_ADDR_MASK
 0x7FFFFFFu

	)

13114 
	#GIS_CH5_ADDR2_SET_ADDR_SHIFT
 0

	)

13115 
	#GIS_CH5_ADDR2_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_ADDR2_SET_ADDR_SHIFT
))&
GIS_CH5_ADDR2_SET_ADDR_MASK
)

	)

13116 
	#GIS_CH5_ADDR2_SET_CSI0_SEL_MASK
 0x8000000u

	)

13117 
	#GIS_CH5_ADDR2_SET_CSI0_SEL_SHIFT
 27

	)

13118 
	#GIS_CH5_ADDR2_SET_CSI1_SEL_MASK
 0x10000000u

	)

13119 
	#GIS_CH5_ADDR2_SET_CSI1_SEL_SHIFT
 28

	)

13120 
	#GIS_CH5_ADDR2_SET_PXP_SEL_MASK
 0x20000000u

	)

13121 
	#GIS_CH5_ADDR2_SET_PXP_SEL_SHIFT
 29

	)

13122 
	#GIS_CH5_ADDR2_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

13123 
	#GIS_CH5_ADDR2_SET_LCDIF0_SEL_SHIFT
 30

	)

13124 
	#GIS_CH5_ADDR2_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

13125 
	#GIS_CH5_ADDR2_SET_LCDIF1_SEL_SHIFT
 31

	)

13127 
	#GIS_CH5_ADDR2_CLR_ADDR_MASK
 0x7FFFFFFu

	)

13128 
	#GIS_CH5_ADDR2_CLR_ADDR_SHIFT
 0

	)

13129 
	#GIS_CH5_ADDR2_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_ADDR2_CLR_ADDR_SHIFT
))&
GIS_CH5_ADDR2_CLR_ADDR_MASK
)

	)

13130 
	#GIS_CH5_ADDR2_CLR_CSI0_SEL_MASK
 0x8000000u

	)

13131 
	#GIS_CH5_ADDR2_CLR_CSI0_SEL_SHIFT
 27

	)

13132 
	#GIS_CH5_ADDR2_CLR_CSI1_SEL_MASK
 0x10000000u

	)

13133 
	#GIS_CH5_ADDR2_CLR_CSI1_SEL_SHIFT
 28

	)

13134 
	#GIS_CH5_ADDR2_CLR_PXP_SEL_MASK
 0x20000000u

	)

13135 
	#GIS_CH5_ADDR2_CLR_PXP_SEL_SHIFT
 29

	)

13136 
	#GIS_CH5_ADDR2_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

13137 
	#GIS_CH5_ADDR2_CLR_LCDIF0_SEL_SHIFT
 30

	)

13138 
	#GIS_CH5_ADDR2_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

13139 
	#GIS_CH5_ADDR2_CLR_LCDIF1_SEL_SHIFT
 31

	)

13141 
	#GIS_CH5_ADDR2_TOG_ADDR_MASK
 0x7FFFFFFu

	)

13142 
	#GIS_CH5_ADDR2_TOG_ADDR_SHIFT
 0

	)

13143 
	#GIS_CH5_ADDR2_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_ADDR2_TOG_ADDR_SHIFT
))&
GIS_CH5_ADDR2_TOG_ADDR_MASK
)

	)

13144 
	#GIS_CH5_ADDR2_TOG_CSI0_SEL_MASK
 0x8000000u

	)

13145 
	#GIS_CH5_ADDR2_TOG_CSI0_SEL_SHIFT
 27

	)

13146 
	#GIS_CH5_ADDR2_TOG_CSI1_SEL_MASK
 0x10000000u

	)

13147 
	#GIS_CH5_ADDR2_TOG_CSI1_SEL_SHIFT
 28

	)

13148 
	#GIS_CH5_ADDR2_TOG_PXP_SEL_MASK
 0x20000000u

	)

13149 
	#GIS_CH5_ADDR2_TOG_PXP_SEL_SHIFT
 29

	)

13150 
	#GIS_CH5_ADDR2_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

13151 
	#GIS_CH5_ADDR2_TOG_LCDIF0_SEL_SHIFT
 30

	)

13152 
	#GIS_CH5_ADDR2_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

13153 
	#GIS_CH5_ADDR2_TOG_LCDIF1_SEL_SHIFT
 31

	)

13155 
	#GIS_CH5_DATA2_DATA_MASK
 0xFFFFFFFFu

	)

13156 
	#GIS_CH5_DATA2_DATA_SHIFT
 0

	)

13157 
	#GIS_CH5_DATA2_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_DATA2_DATA_SHIFT
))&
GIS_CH5_DATA2_DATA_MASK
)

	)

13159 
	#GIS_CH5_ADDR3_ADDR_MASK
 0x7FFFFFFu

	)

13160 
	#GIS_CH5_ADDR3_ADDR_SHIFT
 0

	)

13161 
	#GIS_CH5_ADDR3_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_ADDR3_ADDR_SHIFT
))&
GIS_CH5_ADDR3_ADDR_MASK
)

	)

13162 
	#GIS_CH5_ADDR3_CSI0_SEL_MASK
 0x8000000u

	)

13163 
	#GIS_CH5_ADDR3_CSI0_SEL_SHIFT
 27

	)

13164 
	#GIS_CH5_ADDR3_CSI1_SEL_MASK
 0x10000000u

	)

13165 
	#GIS_CH5_ADDR3_CSI1_SEL_SHIFT
 28

	)

13166 
	#GIS_CH5_ADDR3_PXP_SEL_MASK
 0x20000000u

	)

13167 
	#GIS_CH5_ADDR3_PXP_SEL_SHIFT
 29

	)

13168 
	#GIS_CH5_ADDR3_LCDIF0_SEL_MASK
 0x40000000u

	)

13169 
	#GIS_CH5_ADDR3_LCDIF0_SEL_SHIFT
 30

	)

13170 
	#GIS_CH5_ADDR3_LCDIF1_SEL_MASK
 0x80000000u

	)

13171 
	#GIS_CH5_ADDR3_LCDIF1_SEL_SHIFT
 31

	)

13173 
	#GIS_CH5_ADDR3_SET_ADDR_MASK
 0x7FFFFFFu

	)

13174 
	#GIS_CH5_ADDR3_SET_ADDR_SHIFT
 0

	)

13175 
	#GIS_CH5_ADDR3_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_ADDR3_SET_ADDR_SHIFT
))&
GIS_CH5_ADDR3_SET_ADDR_MASK
)

	)

13176 
	#GIS_CH5_ADDR3_SET_CSI0_SEL_MASK
 0x8000000u

	)

13177 
	#GIS_CH5_ADDR3_SET_CSI0_SEL_SHIFT
 27

	)

13178 
	#GIS_CH5_ADDR3_SET_CSI1_SEL_MASK
 0x10000000u

	)

13179 
	#GIS_CH5_ADDR3_SET_CSI1_SEL_SHIFT
 28

	)

13180 
	#GIS_CH5_ADDR3_SET_PXP_SEL_MASK
 0x20000000u

	)

13181 
	#GIS_CH5_ADDR3_SET_PXP_SEL_SHIFT
 29

	)

13182 
	#GIS_CH5_ADDR3_SET_LCDIF0_SEL_MASK
 0x40000000u

	)

13183 
	#GIS_CH5_ADDR3_SET_LCDIF0_SEL_SHIFT
 30

	)

13184 
	#GIS_CH5_ADDR3_SET_LCDIF1_SEL_MASK
 0x80000000u

	)

13185 
	#GIS_CH5_ADDR3_SET_LCDIF1_SEL_SHIFT
 31

	)

13187 
	#GIS_CH5_ADDR3_CLR_ADDR_MASK
 0x7FFFFFFu

	)

13188 
	#GIS_CH5_ADDR3_CLR_ADDR_SHIFT
 0

	)

13189 
	#GIS_CH5_ADDR3_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_ADDR3_CLR_ADDR_SHIFT
))&
GIS_CH5_ADDR3_CLR_ADDR_MASK
)

	)

13190 
	#GIS_CH5_ADDR3_CLR_CSI0_SEL_MASK
 0x8000000u

	)

13191 
	#GIS_CH5_ADDR3_CLR_CSI0_SEL_SHIFT
 27

	)

13192 
	#GIS_CH5_ADDR3_CLR_CSI1_SEL_MASK
 0x10000000u

	)

13193 
	#GIS_CH5_ADDR3_CLR_CSI1_SEL_SHIFT
 28

	)

13194 
	#GIS_CH5_ADDR3_CLR_PXP_SEL_MASK
 0x20000000u

	)

13195 
	#GIS_CH5_ADDR3_CLR_PXP_SEL_SHIFT
 29

	)

13196 
	#GIS_CH5_ADDR3_CLR_LCDIF0_SEL_MASK
 0x40000000u

	)

13197 
	#GIS_CH5_ADDR3_CLR_LCDIF0_SEL_SHIFT
 30

	)

13198 
	#GIS_CH5_ADDR3_CLR_LCDIF1_SEL_MASK
 0x80000000u

	)

13199 
	#GIS_CH5_ADDR3_CLR_LCDIF1_SEL_SHIFT
 31

	)

13201 
	#GIS_CH5_ADDR3_TOG_ADDR_MASK
 0x7FFFFFFu

	)

13202 
	#GIS_CH5_ADDR3_TOG_ADDR_SHIFT
 0

	)

13203 
	#GIS_CH5_ADDR3_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_ADDR3_TOG_ADDR_SHIFT
))&
GIS_CH5_ADDR3_TOG_ADDR_MASK
)

	)

13204 
	#GIS_CH5_ADDR3_TOG_CSI0_SEL_MASK
 0x8000000u

	)

13205 
	#GIS_CH5_ADDR3_TOG_CSI0_SEL_SHIFT
 27

	)

13206 
	#GIS_CH5_ADDR3_TOG_CSI1_SEL_MASK
 0x10000000u

	)

13207 
	#GIS_CH5_ADDR3_TOG_CSI1_SEL_SHIFT
 28

	)

13208 
	#GIS_CH5_ADDR3_TOG_PXP_SEL_MASK
 0x20000000u

	)

13209 
	#GIS_CH5_ADDR3_TOG_PXP_SEL_SHIFT
 29

	)

13210 
	#GIS_CH5_ADDR3_TOG_LCDIF0_SEL_MASK
 0x40000000u

	)

13211 
	#GIS_CH5_ADDR3_TOG_LCDIF0_SEL_SHIFT
 30

	)

13212 
	#GIS_CH5_ADDR3_TOG_LCDIF1_SEL_MASK
 0x80000000u

	)

13213 
	#GIS_CH5_ADDR3_TOG_LCDIF1_SEL_SHIFT
 31

	)

13215 
	#GIS_CH5_DATA3_DATA_MASK
 0xFFFFFFFFu

	)

13216 
	#GIS_CH5_DATA3_DATA_SHIFT
 0

	)

13217 
	#GIS_CH5_DATA3_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_CH5_DATA3_DATA_SHIFT
))&
GIS_CH5_DATA3_DATA_MASK
)

	)

13219 
	#GIS_DEBUG0_CMD_STATE_MASK
 0xFFu

	)

13220 
	#GIS_DEBUG0_CMD_STATE_SHIFT
 0

	)

13221 
	#GIS_DEBUG0_CMD_STATE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_DEBUG0_CMD_STATE_SHIFT
))&
GIS_DEBUG0_CMD_STATE_MASK
)

	)

13222 
	#GIS_DEBUG0_MAIN_STATE_MASK
 0x3F00u

	)

13223 
	#GIS_DEBUG0_MAIN_STATE_SHIFT
 8

	)

13224 
	#GIS_DEBUG0_MAIN_STATE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_DEBUG0_MAIN_STATE_SHIFT
))&
GIS_DEBUG0_MAIN_STATE_MASK
)

	)

13225 
	#GIS_DEBUG0_CHANNEL_CUR_MASK
 0x3C000u

	)

13226 
	#GIS_DEBUG0_CHANNEL_CUR_SHIFT
 14

	)

13227 
	#GIS_DEBUG0_CHANNEL_CUR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_DEBUG0_CHANNEL_CUR_SHIFT
))&
GIS_DEBUG0_CHANNEL_CUR_MASK
)

	)

13228 
	#GIS_DEBUG0_CMD_COUNTER_MASK
 0x1C0000u

	)

13229 
	#GIS_DEBUG0_CMD_COUNTER_SHIFT
 18

	)

13230 
	#GIS_DEBUG0_CMD_COUNTER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_DEBUG0_CMD_COUNTER_SHIFT
))&
GIS_DEBUG0_CMD_COUNTER_MASK
)

	)

13231 
	#GIS_DEBUG0_CMD_OPCODE_MASK
 0x1E00000u

	)

13232 
	#GIS_DEBUG0_CMD_OPCODE_SHIFT
 21

	)

13233 
	#GIS_DEBUG0_CMD_OPCODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_DEBUG0_CMD_OPCODE_SHIFT
))&
GIS_DEBUG0_CMD_OPCODE_MASK
)

	)

13234 
	#GIS_DEBUG0_PXP_BUSY_MASK
 0x2000000u

	)

13235 
	#GIS_DEBUG0_PXP_BUSY_SHIFT
 25

	)

13236 
	#GIS_DEBUG0_PXP_IRQ_MASK
 0x4000000u

	)

13237 
	#GIS_DEBUG0_PXP_IRQ_SHIFT
 26

	)

13238 
	#GIS_DEBUG0_CSI_IRQ_MASK
 0x8000000u

	)

13239 
	#GIS_DEBUG0_CSI_IRQ_SHIFT
 27

	)

13240 
	#GIS_DEBUG0_CSI_FB_REG_MASK
 0x30000000u

	)

13241 
	#GIS_DEBUG0_CSI_FB_REG_SHIFT
 28

	)

13242 
	#GIS_DEBUG0_CSI_FB_REG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_DEBUG0_CSI_FB_REG_SHIFT
))&
GIS_DEBUG0_CSI_FB_REG_MASK
)

	)

13244 
	#GIS_DEBUG1_CSI_FB_MASK
 0xFFu

	)

13245 
	#GIS_DEBUG1_CSI_FB_SHIFT
 0

	)

13246 
	#GIS_DEBUG1_CSI_FB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_DEBUG1_CSI_FB_SHIFT
))&
GIS_DEBUG1_CSI_FB_MASK
)

	)

13247 
	#GIS_DEBUG1_PXP_OUT_FB_MASK
 0xFF00u

	)

13248 
	#GIS_DEBUG1_PXP_OUT_FB_SHIFT
 8

	)

13249 
	#GIS_DEBUG1_PXP_OUT_FB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_DEBUG1_PXP_OUT_FB_SHIFT
))&
GIS_DEBUG1_PXP_OUT_FB_MASK
)

	)

13250 
	#GIS_DEBUG1_PXP_IN_FB_MASK
 0x30000u

	)

13251 
	#GIS_DEBUG1_PXP_IN_FB_SHIFT
 16

	)

13252 
	#GIS_DEBUG1_PXP_IN_FB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_DEBUG1_PXP_IN_FB_SHIFT
))&
GIS_DEBUG1_PXP_IN_FB_MASK
)

	)

13253 
	#GIS_DEBUG1_LCDIF_FB_MASK
 0xC0000u

	)

13254 
	#GIS_DEBUG1_LCDIF_FB_SHIFT
 18

	)

13255 
	#GIS_DEBUG1_LCDIF_FB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_DEBUG1_LCDIF_FB_SHIFT
))&
GIS_DEBUG1_LCDIF_FB_MASK
)

	)

13257 
	#GIS_VERSION_STEP_MASK
 0xFFFFu

	)

13258 
	#GIS_VERSION_STEP_SHIFT
 0

	)

13259 
	#GIS_VERSION_STEP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_VERSION_STEP_SHIFT
))&
GIS_VERSION_STEP_MASK
)

	)

13260 
	#GIS_VERSION_MINOR_MASK
 0xFF0000u

	)

13261 
	#GIS_VERSION_MINOR_SHIFT
 16

	)

13262 
	#GIS_VERSION_MINOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_VERSION_MINOR_SHIFT
))&
GIS_VERSION_MINOR_MASK
)

	)

13263 
	#GIS_VERSION_MAJOR_MASK
 0xFF000000u

	)

13264 
	#GIS_VERSION_MAJOR_SHIFT
 24

	)

13265 
	#GIS_VERSION_MAJOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GIS_VERSION_MAJOR_SHIFT
))&
GIS_VERSION_MAJOR_MASK
)

	)

13273 
	#GIS_BASE
 (0x42204000u)

	)

13275 
	#GIS
 ((
GIS_Ty≥
 *)
GIS_BASE
)

	)

13276 
	#GIS_BASE_PTR
 (
GIS
)

	)

13278 
	#GIS_BASE_ADDRS
 { 
GIS_BASE
 }

	)

13280 
	#GIS_BASE_PTRS
 { 
GIS
 }

	)

13293 
	#GIS_CTRL
 
	`GIS_CTRL_REG
(
GIS_BASE_PTR
)

	)

13294 
	#GIS_CTRL_SET
 
	`GIS_CTRL_SET_REG
(
GIS_BASE_PTR
)

	)

13295 
	#GIS_CTRL_CLR
 
	`GIS_CTRL_CLR_REG
(
GIS_BASE_PTR
)

	)

13296 
	#GIS_CTRL_TOG
 
	`GIS_CTRL_TOG_REG
(
GIS_BASE_PTR
)

	)

13297 
	#GIS_CONFIG0
 
	`GIS_CONFIG0_REG
(
GIS_BASE_PTR
)

	)

13298 
	#GIS_CONFIG0_SET
 
	`GIS_CONFIG0_SET_REG
(
GIS_BASE_PTR
)

	)

13299 
	#GIS_CONFIG0_CLR
 
	`GIS_CONFIG0_CLR_REG
(
GIS_BASE_PTR
)

	)

13300 
	#GIS_CONFIG0_TOG
 
	`GIS_CONFIG0_TOG_REG
(
GIS_BASE_PTR
)

	)

13301 
	#GIS_CONFIG1
 
	`GIS_CONFIG1_REG
(
GIS_BASE_PTR
)

	)

13302 
	#GIS_CONFIG1_SET
 
	`GIS_CONFIG1_SET_REG
(
GIS_BASE_PTR
)

	)

13303 
	#GIS_CONFIG1_CLR
 
	`GIS_CONFIG1_CLR_REG
(
GIS_BASE_PTR
)

	)

13304 
	#GIS_CONFIG1_TOG
 
	`GIS_CONFIG1_TOG_REG
(
GIS_BASE_PTR
)

	)

13305 
	#GIS_FB0
 
	`GIS_FB0_REG
(
GIS_BASE_PTR
)

	)

13306 
	#GIS_FB1
 
	`GIS_FB1_REG
(
GIS_BASE_PTR
)

	)

13307 
	#GIS_PXP_FB0
 
	`GIS_PXP_FB0_REG
(
GIS_BASE_PTR
)

	)

13308 
	#GIS_PXP_FB1
 
	`GIS_PXP_FB1_REG
(
GIS_BASE_PTR
)

	)

13309 
	#GIS_CH0_CTRL
 
	`GIS_CH0_CTRL_REG
(
GIS_BASE_PTR
)

	)

13310 
	#GIS_CH0_CTRL_SET
 
	`GIS_CH0_CTRL_SET_REG
(
GIS_BASE_PTR
)

	)

13311 
	#GIS_CH0_CTRL_CLR
 
	`GIS_CH0_CTRL_CLR_REG
(
GIS_BASE_PTR
)

	)

13312 
	#GIS_CH0_CTRL_TOG
 
	`GIS_CH0_CTRL_TOG_REG
(
GIS_BASE_PTR
)

	)

13313 
	#GIS_CH0_ADDR0
 
	`GIS_CH0_ADDR0_REG
(
GIS_BASE_PTR
)

	)

13314 
	#GIS_CH0_ADDR0_SET
 
	`GIS_CH0_ADDR0_SET_REG
(
GIS_BASE_PTR
)

	)

13315 
	#GIS_CH0_ADDR0_CLR
 
	`GIS_CH0_ADDR0_CLR_REG
(
GIS_BASE_PTR
)

	)

13316 
	#GIS_CH0_ADDR0_TOG
 
	`GIS_CH0_ADDR0_TOG_REG
(
GIS_BASE_PTR
)

	)

13317 
	#GIS_CH0_DATA0
 
	`GIS_CH0_DATA0_REG
(
GIS_BASE_PTR
)

	)

13318 
	#GIS_CH0_ADDR1
 
	`GIS_CH0_ADDR1_REG
(
GIS_BASE_PTR
)

	)

13319 
	#GIS_CH0_ADDR1_SET
 
	`GIS_CH0_ADDR1_SET_REG
(
GIS_BASE_PTR
)

	)

13320 
	#GIS_CH0_ADDR1_CLR
 
	`GIS_CH0_ADDR1_CLR_REG
(
GIS_BASE_PTR
)

	)

13321 
	#GIS_CH0_ADDR1_TOG
 
	`GIS_CH0_ADDR1_TOG_REG
(
GIS_BASE_PTR
)

	)

13322 
	#GIS_CH0_DATA1
 
	`GIS_CH0_DATA1_REG
(
GIS_BASE_PTR
)

	)

13323 
	#GIS_CH0_ADDR2
 
	`GIS_CH0_ADDR2_REG
(
GIS_BASE_PTR
)

	)

13324 
	#GIS_CH0_ADDR2_SET
 
	`GIS_CH0_ADDR2_SET_REG
(
GIS_BASE_PTR
)

	)

13325 
	#GIS_CH0_ADDR2_CLR
 
	`GIS_CH0_ADDR2_CLR_REG
(
GIS_BASE_PTR
)

	)

13326 
	#GIS_CH0_ADDR2_TOG
 
	`GIS_CH0_ADDR2_TOG_REG
(
GIS_BASE_PTR
)

	)

13327 
	#GIS_CH0_DATA2
 
	`GIS_CH0_DATA2_REG
(
GIS_BASE_PTR
)

	)

13328 
	#GIS_CH0_ADDR3
 
	`GIS_CH0_ADDR3_REG
(
GIS_BASE_PTR
)

	)

13329 
	#GIS_CH0_ADDR3_SET
 
	`GIS_CH0_ADDR3_SET_REG
(
GIS_BASE_PTR
)

	)

13330 
	#GIS_CH0_ADDR3_CLR
 
	`GIS_CH0_ADDR3_CLR_REG
(
GIS_BASE_PTR
)

	)

13331 
	#GIS_CH0_ADDR3_TOG
 
	`GIS_CH0_ADDR3_TOG_REG
(
GIS_BASE_PTR
)

	)

13332 
	#GIS_CH0_DATA3
 
	`GIS_CH0_DATA3_REG
(
GIS_BASE_PTR
)

	)

13333 
	#GIS_CH1_CTRL
 
	`GIS_CH1_CTRL_REG
(
GIS_BASE_PTR
)

	)

13334 
	#GIS_CH1_CTRL_SET
 
	`GIS_CH1_CTRL_SET_REG
(
GIS_BASE_PTR
)

	)

13335 
	#GIS_CH1_CTRL_CLR
 
	`GIS_CH1_CTRL_CLR_REG
(
GIS_BASE_PTR
)

	)

13336 
	#GIS_CH1_CTRL_TOG
 
	`GIS_CH1_CTRL_TOG_REG
(
GIS_BASE_PTR
)

	)

13337 
	#GIS_CH1_ADDR0
 
	`GIS_CH1_ADDR0_REG
(
GIS_BASE_PTR
)

	)

13338 
	#GIS_CH1_ADDR0_SET
 
	`GIS_CH1_ADDR0_SET_REG
(
GIS_BASE_PTR
)

	)

13339 
	#GIS_CH1_ADDR0_CLR
 
	`GIS_CH1_ADDR0_CLR_REG
(
GIS_BASE_PTR
)

	)

13340 
	#GIS_CH1_ADDR0_TOG
 
	`GIS_CH1_ADDR0_TOG_REG
(
GIS_BASE_PTR
)

	)

13341 
	#GIS_CH1_DATA0
 
	`GIS_CH1_DATA0_REG
(
GIS_BASE_PTR
)

	)

13342 
	#GIS_CH1_ADDR1
 
	`GIS_CH1_ADDR1_REG
(
GIS_BASE_PTR
)

	)

13343 
	#GIS_CH1_ADDR1_SET
 
	`GIS_CH1_ADDR1_SET_REG
(
GIS_BASE_PTR
)

	)

13344 
	#GIS_CH1_ADDR1_CLR
 
	`GIS_CH1_ADDR1_CLR_REG
(
GIS_BASE_PTR
)

	)

13345 
	#GIS_CH1_ADDR1_TOG
 
	`GIS_CH1_ADDR1_TOG_REG
(
GIS_BASE_PTR
)

	)

13346 
	#GIS_CH1_DATA1
 
	`GIS_CH1_DATA1_REG
(
GIS_BASE_PTR
)

	)

13347 
	#GIS_CH1_ADDR2
 
	`GIS_CH1_ADDR2_REG
(
GIS_BASE_PTR
)

	)

13348 
	#GIS_CH1_ADDR2_SET
 
	`GIS_CH1_ADDR2_SET_REG
(
GIS_BASE_PTR
)

	)

13349 
	#GIS_CH1_ADDR2_CLR
 
	`GIS_CH1_ADDR2_CLR_REG
(
GIS_BASE_PTR
)

	)

13350 
	#GIS_CH1_ADDR2_TOG
 
	`GIS_CH1_ADDR2_TOG_REG
(
GIS_BASE_PTR
)

	)

13351 
	#GIS_CH1_DATA2
 
	`GIS_CH1_DATA2_REG
(
GIS_BASE_PTR
)

	)

13352 
	#GIS_CH1_ADDR3
 
	`GIS_CH1_ADDR3_REG
(
GIS_BASE_PTR
)

	)

13353 
	#GIS_CH1_ADDR3_SET
 
	`GIS_CH1_ADDR3_SET_REG
(
GIS_BASE_PTR
)

	)

13354 
	#GIS_CH1_ADDR3_CLR
 
	`GIS_CH1_ADDR3_CLR_REG
(
GIS_BASE_PTR
)

	)

13355 
	#GIS_CH1_ADDR3_TOG
 
	`GIS_CH1_ADDR3_TOG_REG
(
GIS_BASE_PTR
)

	)

13356 
	#GIS_CH1_DATA3
 
	`GIS_CH1_DATA3_REG
(
GIS_BASE_PTR
)

	)

13357 
	#GIS_CH2_CTRL
 
	`GIS_CH2_CTRL_REG
(
GIS_BASE_PTR
)

	)

13358 
	#GIS_CH2_CTRL_SET
 
	`GIS_CH2_CTRL_SET_REG
(
GIS_BASE_PTR
)

	)

13359 
	#GIS_CH2_CTRL_CLR
 
	`GIS_CH2_CTRL_CLR_REG
(
GIS_BASE_PTR
)

	)

13360 
	#GIS_CH2_CTRL_TOG
 
	`GIS_CH2_CTRL_TOG_REG
(
GIS_BASE_PTR
)

	)

13361 
	#GIS_CH2_ADDR0
 
	`GIS_CH2_ADDR0_REG
(
GIS_BASE_PTR
)

	)

13362 
	#GIS_CH2_ADDR0_SET
 
	`GIS_CH2_ADDR0_SET_REG
(
GIS_BASE_PTR
)

	)

13363 
	#GIS_CH2_ADDR0_CLR
 
	`GIS_CH2_ADDR0_CLR_REG
(
GIS_BASE_PTR
)

	)

13364 
	#GIS_CH2_ADDR0_TOG
 
	`GIS_CH2_ADDR0_TOG_REG
(
GIS_BASE_PTR
)

	)

13365 
	#GIS_CH2_DATA0
 
	`GIS_CH2_DATA0_REG
(
GIS_BASE_PTR
)

	)

13366 
	#GIS_CH2_ADDR1
 
	`GIS_CH2_ADDR1_REG
(
GIS_BASE_PTR
)

	)

13367 
	#GIS_CH2_ADDR1_SET
 
	`GIS_CH2_ADDR1_SET_REG
(
GIS_BASE_PTR
)

	)

13368 
	#GIS_CH2_ADDR1_CLR
 
	`GIS_CH2_ADDR1_CLR_REG
(
GIS_BASE_PTR
)

	)

13369 
	#GIS_CH2_ADDR1_TOG
 
	`GIS_CH2_ADDR1_TOG_REG
(
GIS_BASE_PTR
)

	)

13370 
	#GIS_CH2_DATA1
 
	`GIS_CH2_DATA1_REG
(
GIS_BASE_PTR
)

	)

13371 
	#GIS_CH2_ADDR2
 
	`GIS_CH2_ADDR2_REG
(
GIS_BASE_PTR
)

	)

13372 
	#GIS_CH2_ADDR2_SET
 
	`GIS_CH2_ADDR2_SET_REG
(
GIS_BASE_PTR
)

	)

13373 
	#GIS_CH2_ADDR2_CLR
 
	`GIS_CH2_ADDR2_CLR_REG
(
GIS_BASE_PTR
)

	)

13374 
	#GIS_CH2_ADDR2_TOG
 
	`GIS_CH2_ADDR2_TOG_REG
(
GIS_BASE_PTR
)

	)

13375 
	#GIS_CH2_DATA2
 
	`GIS_CH2_DATA2_REG
(
GIS_BASE_PTR
)

	)

13376 
	#GIS_CH2_ADDR3
 
	`GIS_CH2_ADDR3_REG
(
GIS_BASE_PTR
)

	)

13377 
	#GIS_CH2_ADDR3_SET
 
	`GIS_CH2_ADDR3_SET_REG
(
GIS_BASE_PTR
)

	)

13378 
	#GIS_CH2_ADDR3_CLR
 
	`GIS_CH2_ADDR3_CLR_REG
(
GIS_BASE_PTR
)

	)

13379 
	#GIS_CH2_ADDR3_TOG
 
	`GIS_CH2_ADDR3_TOG_REG
(
GIS_BASE_PTR
)

	)

13380 
	#GIS_CH2_DATA3
 
	`GIS_CH2_DATA3_REG
(
GIS_BASE_PTR
)

	)

13381 
	#GIS_CH3_CTRL
 
	`GIS_CH3_CTRL_REG
(
GIS_BASE_PTR
)

	)

13382 
	#GIS_CH3_CTRL_SET
 
	`GIS_CH3_CTRL_SET_REG
(
GIS_BASE_PTR
)

	)

13383 
	#GIS_CH3_CTRL_CLR
 
	`GIS_CH3_CTRL_CLR_REG
(
GIS_BASE_PTR
)

	)

13384 
	#GIS_CH3_CTRL_TOG
 
	`GIS_CH3_CTRL_TOG_REG
(
GIS_BASE_PTR
)

	)

13385 
	#GIS_CH3_ADDR0
 
	`GIS_CH3_ADDR0_REG
(
GIS_BASE_PTR
)

	)

13386 
	#GIS_CH3_ADDR0_SET
 
	`GIS_CH3_ADDR0_SET_REG
(
GIS_BASE_PTR
)

	)

13387 
	#GIS_CH3_ADDR0_CLR
 
	`GIS_CH3_ADDR0_CLR_REG
(
GIS_BASE_PTR
)

	)

13388 
	#GIS_CH3_ADDR0_TOG
 
	`GIS_CH3_ADDR0_TOG_REG
(
GIS_BASE_PTR
)

	)

13389 
	#GIS_CH3_DATA0
 
	`GIS_CH3_DATA0_REG
(
GIS_BASE_PTR
)

	)

13390 
	#GIS_CH3_ADDR1
 
	`GIS_CH3_ADDR1_REG
(
GIS_BASE_PTR
)

	)

13391 
	#GIS_CH3_ADDR1_SET
 
	`GIS_CH3_ADDR1_SET_REG
(
GIS_BASE_PTR
)

	)

13392 
	#GIS_CH3_ADDR1_CLR
 
	`GIS_CH3_ADDR1_CLR_REG
(
GIS_BASE_PTR
)

	)

13393 
	#GIS_CH3_ADDR1_TOG
 
	`GIS_CH3_ADDR1_TOG_REG
(
GIS_BASE_PTR
)

	)

13394 
	#GIS_CH3_DATA1
 
	`GIS_CH3_DATA1_REG
(
GIS_BASE_PTR
)

	)

13395 
	#GIS_CH3_ADDR2
 
	`GIS_CH3_ADDR2_REG
(
GIS_BASE_PTR
)

	)

13396 
	#GIS_CH3_ADDR2_SET
 
	`GIS_CH3_ADDR2_SET_REG
(
GIS_BASE_PTR
)

	)

13397 
	#GIS_CH3_ADDR2_CLR
 
	`GIS_CH3_ADDR2_CLR_REG
(
GIS_BASE_PTR
)

	)

13398 
	#GIS_CH3_ADDR2_TOG
 
	`GIS_CH3_ADDR2_TOG_REG
(
GIS_BASE_PTR
)

	)

13399 
	#GIS_CH3_DATA2
 
	`GIS_CH3_DATA2_REG
(
GIS_BASE_PTR
)

	)

13400 
	#GIS_CH3_ADDR3
 
	`GIS_CH3_ADDR3_REG
(
GIS_BASE_PTR
)

	)

13401 
	#GIS_CH3_ADDR3_SET
 
	`GIS_CH3_ADDR3_SET_REG
(
GIS_BASE_PTR
)

	)

13402 
	#GIS_CH3_ADDR3_CLR
 
	`GIS_CH3_ADDR3_CLR_REG
(
GIS_BASE_PTR
)

	)

13403 
	#GIS_CH3_ADDR3_TOG
 
	`GIS_CH3_ADDR3_TOG_REG
(
GIS_BASE_PTR
)

	)

13404 
	#GIS_CH3_DATA3
 
	`GIS_CH3_DATA3_REG
(
GIS_BASE_PTR
)

	)

13405 
	#GIS_CH4_CTRL
 
	`GIS_CH4_CTRL_REG
(
GIS_BASE_PTR
)

	)

13406 
	#GIS_CH4_CTRL_SET
 
	`GIS_CH4_CTRL_SET_REG
(
GIS_BASE_PTR
)

	)

13407 
	#GIS_CH4_CTRL_CLR
 
	`GIS_CH4_CTRL_CLR_REG
(
GIS_BASE_PTR
)

	)

13408 
	#GIS_CH4_CTRL_TOG
 
	`GIS_CH4_CTRL_TOG_REG
(
GIS_BASE_PTR
)

	)

13409 
	#GIS_CH4_ADDR0
 
	`GIS_CH4_ADDR0_REG
(
GIS_BASE_PTR
)

	)

13410 
	#GIS_CH4_ADDR0_SET
 
	`GIS_CH4_ADDR0_SET_REG
(
GIS_BASE_PTR
)

	)

13411 
	#GIS_CH4_ADDR0_CLR
 
	`GIS_CH4_ADDR0_CLR_REG
(
GIS_BASE_PTR
)

	)

13412 
	#GIS_CH4_ADDR0_TOG
 
	`GIS_CH4_ADDR0_TOG_REG
(
GIS_BASE_PTR
)

	)

13413 
	#GIS_CH4_DATA0
 
	`GIS_CH4_DATA0_REG
(
GIS_BASE_PTR
)

	)

13414 
	#GIS_CH4_ADDR1
 
	`GIS_CH4_ADDR1_REG
(
GIS_BASE_PTR
)

	)

13415 
	#GIS_CH4_ADDR1_SET
 
	`GIS_CH4_ADDR1_SET_REG
(
GIS_BASE_PTR
)

	)

13416 
	#GIS_CH4_ADDR1_CLR
 
	`GIS_CH4_ADDR1_CLR_REG
(
GIS_BASE_PTR
)

	)

13417 
	#GIS_CH4_ADDR1_TOG
 
	`GIS_CH4_ADDR1_TOG_REG
(
GIS_BASE_PTR
)

	)

13418 
	#GIS_CH4_DATA1
 
	`GIS_CH4_DATA1_REG
(
GIS_BASE_PTR
)

	)

13419 
	#GIS_CH4_ADDR2
 
	`GIS_CH4_ADDR2_REG
(
GIS_BASE_PTR
)

	)

13420 
	#GIS_CH4_ADDR2_SET
 
	`GIS_CH4_ADDR2_SET_REG
(
GIS_BASE_PTR
)

	)

13421 
	#GIS_CH4_ADDR2_CLR
 
	`GIS_CH4_ADDR2_CLR_REG
(
GIS_BASE_PTR
)

	)

13422 
	#GIS_CH4_ADDR2_TOG
 
	`GIS_CH4_ADDR2_TOG_REG
(
GIS_BASE_PTR
)

	)

13423 
	#GIS_CH4_DATA2
 
	`GIS_CH4_DATA2_REG
(
GIS_BASE_PTR
)

	)

13424 
	#GIS_CH4_ADDR3
 
	`GIS_CH4_ADDR3_REG
(
GIS_BASE_PTR
)

	)

13425 
	#GIS_CH4_ADDR3_SET
 
	`GIS_CH4_ADDR3_SET_REG
(
GIS_BASE_PTR
)

	)

13426 
	#GIS_CH4_ADDR3_CLR
 
	`GIS_CH4_ADDR3_CLR_REG
(
GIS_BASE_PTR
)

	)

13427 
	#GIS_CH4_ADDR3_TOG
 
	`GIS_CH4_ADDR3_TOG_REG
(
GIS_BASE_PTR
)

	)

13428 
	#GIS_CH4_DATA3
 
	`GIS_CH4_DATA3_REG
(
GIS_BASE_PTR
)

	)

13429 
	#GIS_CH5_CTRL
 
	`GIS_CH5_CTRL_REG
(
GIS_BASE_PTR
)

	)

13430 
	#GIS_CH5_CTRL_SET
 
	`GIS_CH5_CTRL_SET_REG
(
GIS_BASE_PTR
)

	)

13431 
	#GIS_CH5_CTRL_CLR
 
	`GIS_CH5_CTRL_CLR_REG
(
GIS_BASE_PTR
)

	)

13432 
	#GIS_CH5_CTRL_TOG
 
	`GIS_CH5_CTRL_TOG_REG
(
GIS_BASE_PTR
)

	)

13433 
	#GIS_CH5_ADDR0
 
	`GIS_CH5_ADDR0_REG
(
GIS_BASE_PTR
)

	)

13434 
	#GIS_CH5_ADDR0_SET
 
	`GIS_CH5_ADDR0_SET_REG
(
GIS_BASE_PTR
)

	)

13435 
	#GIS_CH5_ADDR0_CLR
 
	`GIS_CH5_ADDR0_CLR_REG
(
GIS_BASE_PTR
)

	)

13436 
	#GIS_CH5_ADDR0_TOG
 
	`GIS_CH5_ADDR0_TOG_REG
(
GIS_BASE_PTR
)

	)

13437 
	#GIS_CH5_DATA0
 
	`GIS_CH5_DATA0_REG
(
GIS_BASE_PTR
)

	)

13438 
	#GIS_CH5_ADDR1
 
	`GIS_CH5_ADDR1_REG
(
GIS_BASE_PTR
)

	)

13439 
	#GIS_CH5_ADDR1_SET
 
	`GIS_CH5_ADDR1_SET_REG
(
GIS_BASE_PTR
)

	)

13440 
	#GIS_CH5_ADDR1_CLR
 
	`GIS_CH5_ADDR1_CLR_REG
(
GIS_BASE_PTR
)

	)

13441 
	#GIS_CH5_ADDR1_TOG
 
	`GIS_CH5_ADDR1_TOG_REG
(
GIS_BASE_PTR
)

	)

13442 
	#GIS_CH5_DATA1
 
	`GIS_CH5_DATA1_REG
(
GIS_BASE_PTR
)

	)

13443 
	#GIS_CH5_ADDR2
 
	`GIS_CH5_ADDR2_REG
(
GIS_BASE_PTR
)

	)

13444 
	#GIS_CH5_ADDR2_SET
 
	`GIS_CH5_ADDR2_SET_REG
(
GIS_BASE_PTR
)

	)

13445 
	#GIS_CH5_ADDR2_CLR
 
	`GIS_CH5_ADDR2_CLR_REG
(
GIS_BASE_PTR
)

	)

13446 
	#GIS_CH5_ADDR2_TOG
 
	`GIS_CH5_ADDR2_TOG_REG
(
GIS_BASE_PTR
)

	)

13447 
	#GIS_CH5_DATA2
 
	`GIS_CH5_DATA2_REG
(
GIS_BASE_PTR
)

	)

13448 
	#GIS_CH5_ADDR3
 
	`GIS_CH5_ADDR3_REG
(
GIS_BASE_PTR
)

	)

13449 
	#GIS_CH5_ADDR3_SET
 
	`GIS_CH5_ADDR3_SET_REG
(
GIS_BASE_PTR
)

	)

13450 
	#GIS_CH5_ADDR3_CLR
 
	`GIS_CH5_ADDR3_CLR_REG
(
GIS_BASE_PTR
)

	)

13451 
	#GIS_CH5_ADDR3_TOG
 
	`GIS_CH5_ADDR3_TOG_REG
(
GIS_BASE_PTR
)

	)

13452 
	#GIS_CH5_DATA3
 
	`GIS_CH5_DATA3_REG
(
GIS_BASE_PTR
)

	)

13453 
	#GIS_DEBUG0
 
	`GIS_DEBUG0_REG
(
GIS_BASE_PTR
)

	)

13454 
	#GIS_DEBUG1
 
	`GIS_DEBUG1_REG
(
GIS_BASE_PTR
)

	)

13455 
	#GIS_VERSION
 
	`GIS_VERSION_REG
(
GIS_BASE_PTR
)

	)

13476 
__IO
 
uöt32_t
 
	mCNTR
;

13477 
__IO
 
uöt32_t
 
	mPGR
;

13478 
__IO
 
uöt32_t
 
	mIMR1
;

13479 
__IO
 
uöt32_t
 
	mIMR2
;

13480 
__IO
 
uöt32_t
 
	mIMR3
;

13481 
__IO
 
uöt32_t
 
	mIMR4
;

13482 
__I
 
uöt32_t
 
	mISR1
;

13483 
__I
 
uöt32_t
 
	mISR2
;

13484 
__I
 
uöt32_t
 
	mISR3
;

13485 
__I
 
uöt32_t
 
	mISR4
;

13486 
__I
 
uöt32_t
 
	mA9_LPSR
;

13487 
__I
 
uöt32_t
 
	mM4_LPSR
;

13488 
__I
 
uöt32_t
 
	mDR
;

13489 } 
	tGPC_Ty≥
, *
	tGPC_MemM≠På
;

13501 
	#GPC_CNTR_REG
(
ba£
Ë((ba£)->
CNTR
)

	)

13502 
	#GPC_PGR_REG
(
ba£
Ë((ba£)->
PGR
)

	)

13503 
	#GPC_IMR1_REG
(
ba£
Ë((ba£)->
IMR1
)

	)

13504 
	#GPC_IMR2_REG
(
ba£
Ë((ba£)->
IMR2
)

	)

13505 
	#GPC_IMR3_REG
(
ba£
Ë((ba£)->
IMR3
)

	)

13506 
	#GPC_IMR4_REG
(
ba£
Ë((ba£)->
IMR4
)

	)

13507 
	#GPC_ISR1_REG
(
ba£
Ë((ba£)->
ISR1
)

	)

13508 
	#GPC_ISR2_REG
(
ba£
Ë((ba£)->
ISR2
)

	)

13509 
	#GPC_ISR3_REG
(
ba£
Ë((ba£)->
ISR3
)

	)

13510 
	#GPC_ISR4_REG
(
ba£
Ë((ba£)->
ISR4
)

	)

13511 
	#GPC_A9_LPSR_REG
(
ba£
Ë((ba£)->
A9_LPSR
)

	)

13512 
	#GPC_M4_LPSR_REG
(
ba£
Ë((ba£)->
M4_LPSR
)

	)

13513 
	#GPC_DR_REG
(
ba£
Ë((ba£)->
DR
)

	)

13529 
	#GPC_CNTR_gpu_vpu_pdn_ªq_MASK
 0x1u

	)

13530 
	#GPC_CNTR_gpu_vpu_pdn_ªq_SHIFT
 0

	)

13531 
	#GPC_CNTR_gpu_vpu_pup_ªq_MASK
 0x2u

	)

13532 
	#GPC_CNTR_gpu_vpu_pup_ªq_SHIFT
 1

	)

13533 
	#GPC_CNTR_MEGA_PDN_REQ_MASK
 0x4u

	)

13534 
	#GPC_CNTR_MEGA_PDN_REQ_SHIFT
 2

	)

13535 
	#GPC_CNTR_MEGA_PUP_REQ_MASK
 0x8u

	)

13536 
	#GPC_CNTR_MEGA_PUP_REQ_SHIFT
 3

	)

13537 
	#GPC_CNTR_DISPLAY_PDN_REQ_MASK
 0x10u

	)

13538 
	#GPC_CNTR_DISPLAY_PDN_REQ_SHIFT
 4

	)

13539 
	#GPC_CNTR_DISPLAY_PUP_REQ_MASK
 0x20u

	)

13540 
	#GPC_CNTR_DISPLAY_PUP_REQ_SHIFT
 5

	)

13541 
	#GPC_CNTR_PCIE_PHY_PDN_REQ_MASK
 0x40u

	)

13542 
	#GPC_CNTR_PCIE_PHY_PDN_REQ_SHIFT
 6

	)

13543 
	#GPC_CNTR_PCIE_PHY_PUP_REQ_MASK
 0x80u

	)

13544 
	#GPC_CNTR_PCIE_PHY_PUP_REQ_SHIFT
 7

	)

13545 
	#GPC_CNTR_DVFS0CR_MASK
 0x10000u

	)

13546 
	#GPC_CNTR_DVFS0CR_SHIFT
 16

	)

13547 
	#GPC_CNTR_VADC_ANALOG_OFF_MASK
 0x20000u

	)

13548 
	#GPC_CNTR_VADC_ANALOG_OFF_SHIFT
 17

	)

13549 
	#GPC_CNTR_VADC_EXT_PWD_N_MASK
 0x40000u

	)

13550 
	#GPC_CNTR_VADC_EXT_PWD_N_SHIFT
 18

	)

13551 
	#GPC_CNTR_GPCIRQM_MASK
 0x200000u

	)

13552 
	#GPC_CNTR_GPCIRQM_SHIFT
 21

	)

13553 
	#GPC_CNTR_L2_PGE_MASK
 0x400000u

	)

13554 
	#GPC_CNTR_L2_PGE_SHIFT
 22

	)

13556 
	#GPC_PGR_DRCIC_MASK
 0x60000000u

	)

13557 
	#GPC_PGR_DRCIC_SHIFT
 29

	)

13558 
	#GPC_PGR_DRCIC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPC_PGR_DRCIC_SHIFT
))&
GPC_PGR_DRCIC_MASK
)

	)

13560 
	#GPC_IMR1_IMR1_MASK
 0xFFFFFFFFu

	)

13561 
	#GPC_IMR1_IMR1_SHIFT
 0

	)

13562 
	#GPC_IMR1_IMR1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPC_IMR1_IMR1_SHIFT
))&
GPC_IMR1_IMR1_MASK
)

	)

13564 
	#GPC_IMR2_IMR2_MASK
 0xFFFFFFFFu

	)

13565 
	#GPC_IMR2_IMR2_SHIFT
 0

	)

13566 
	#GPC_IMR2_IMR2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPC_IMR2_IMR2_SHIFT
))&
GPC_IMR2_IMR2_MASK
)

	)

13568 
	#GPC_IMR3_IMR3_MASK
 0xFFFFFFFFu

	)

13569 
	#GPC_IMR3_IMR3_SHIFT
 0

	)

13570 
	#GPC_IMR3_IMR3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPC_IMR3_IMR3_SHIFT
))&
GPC_IMR3_IMR3_MASK
)

	)

13572 
	#GPC_IMR4_IMR4_MASK
 0xFFFFFFFFu

	)

13573 
	#GPC_IMR4_IMR4_SHIFT
 0

	)

13574 
	#GPC_IMR4_IMR4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPC_IMR4_IMR4_SHIFT
))&
GPC_IMR4_IMR4_MASK
)

	)

13576 
	#GPC_ISR1_ISR1_MASK
 0xFFFFFFFFu

	)

13577 
	#GPC_ISR1_ISR1_SHIFT
 0

	)

13578 
	#GPC_ISR1_ISR1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPC_ISR1_ISR1_SHIFT
))&
GPC_ISR1_ISR1_MASK
)

	)

13580 
	#GPC_ISR2_ISR2_MASK
 0xFFFFFFFFu

	)

13581 
	#GPC_ISR2_ISR2_SHIFT
 0

	)

13582 
	#GPC_ISR2_ISR2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPC_ISR2_ISR2_SHIFT
))&
GPC_ISR2_ISR2_MASK
)

	)

13584 
	#GPC_ISR3_ISR3_MASK
 0xFFFFFFFFu

	)

13585 
	#GPC_ISR3_ISR3_SHIFT
 0

	)

13586 
	#GPC_ISR3_ISR3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPC_ISR3_ISR3_SHIFT
))&
GPC_ISR3_ISR3_MASK
)

	)

13588 
	#GPC_ISR4_ISR4_MASK
 0xFFFFFFFFu

	)

13589 
	#GPC_ISR4_ISR4_SHIFT
 0

	)

13590 
	#GPC_ISR4_ISR4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPC_ISR4_ISR4_SHIFT
))&
GPC_ISR4_ISR4_MASK
)

	)

13592 
	#GPC_A9_LPSR_A9_STANDBY_WFI_MASK
 0x1u

	)

13593 
	#GPC_A9_LPSR_A9_STANDBY_WFI_SHIFT
 0

	)

13594 
	#GPC_A9_LPSR_A9_SCU_IDLE_MASK
 0x10u

	)

13595 
	#GPC_A9_LPSR_A9_SCU_IDLE_SHIFT
 4

	)

13596 
	#GPC_A9_LPSR_A9_L2CC_IDLE_MASK
 0x20u

	)

13597 
	#GPC_A9_LPSR_A9_L2CC_IDLE_SHIFT
 5

	)

13598 
	#GPC_A9_LPSR_A9_CLK_ENABLE_MASK
 0x40u

	)

13599 
	#GPC_A9_LPSR_A9_CLK_ENABLE_SHIFT
 6

	)

13600 
	#GPC_A9_LPSR_SYSTEM_IN_WAIT_MODE_MASK
 0x80u

	)

13601 
	#GPC_A9_LPSR_SYSTEM_IN_WAIT_MODE_SHIFT
 7

	)

13602 
	#GPC_A9_LPSR_SYSTEM_IN_STOP_MODE_MASK
 0x100u

	)

13603 
	#GPC_A9_LPSR_SYSTEM_IN_STOP_MODE_SHIFT
 8

	)

13604 
	#GPC_A9_LPSR_A9_DBG_ACK_MASK
 0x200u

	)

13605 
	#GPC_A9_LPSR_A9_DBG_ACK_SHIFT
 9

	)

13606 
	#GPC_A9_LPSR_A9_RST_MASK
 0x400u

	)

13607 
	#GPC_A9_LPSR_A9_RST_SHIFT
 10

	)

13609 
	#GPC_M4_LPSR_M4_SLEEP_HOLD_REQ_B_MASK
 0x1u

	)

13610 
	#GPC_M4_LPSR_M4_SLEEP_HOLD_REQ_B_SHIFT
 0

	)

13611 
	#GPC_M4_LPSR_M4_SLEEP_HOLD_ACK_B_MASK
 0x2u

	)

13612 
	#GPC_M4_LPSR_M4_SLEEP_HOLD_ACK_B_SHIFT
 1

	)

13613 
	#GPC_M4_LPSR_M4_GATE_HCLK_MASK
 0x4u

	)

13614 
	#GPC_M4_LPSR_M4_GATE_HCLK_SHIFT
 2

	)

13615 
	#GPC_M4_LPSR_M4_SLEEP_DEEP_MASK
 0x8u

	)

13616 
	#GPC_M4_LPSR_M4_SLEEP_DEEP_SHIFT
 3

	)

13617 
	#GPC_M4_LPSR_M4_SLEEPING_MASK
 0x10u

	)

13618 
	#GPC_M4_LPSR_M4_SLEEPING_SHIFT
 4

	)

13619 
	#GPC_M4_LPSR_M4_LOCKUP_MASK
 0x20u

	)

13620 
	#GPC_M4_LPSR_M4_LOCKUP_SHIFT
 5

	)

13621 
	#GPC_M4_LPSR_M4_HALTED_MASK
 0x40u

	)

13622 
	#GPC_M4_LPSR_M4_HALTED_SHIFT
 6

	)

13623 
	#GPC_M4_LPSR_M4_PLATFORM_RESET_B_MASK
 0x80u

	)

13624 
	#GPC_M4_LPSR_M4_PLATFORM_RESET_B_SHIFT
 7

	)

13625 
	#GPC_M4_LPSR_M4_CORE_RESET_B_MASK
 0x100u

	)

13626 
	#GPC_M4_LPSR_M4_CORE_RESET_B_SHIFT
 8

	)

13628 
	#GPC_DR_PCIE_PHY_RESET_B_MASK
 0x1u

	)

13629 
	#GPC_DR_PCIE_PHY_RESET_B_SHIFT
 0

	)

13630 
	#GPC_DR_PCIE_PHY_ISO_MASK
 0x2u

	)

13631 
	#GPC_DR_PCIE_PHY_ISO_SHIFT
 1

	)

13632 
	#GPC_DR_MEGA_RESET_B_MASK
 0x4u

	)

13633 
	#GPC_DR_MEGA_RESET_B_SHIFT
 2

	)

13634 
	#GPC_DR_MEGA_SWITCH_B_MASK
 0x8u

	)

13635 
	#GPC_DR_MEGA_SWITCH_B_SHIFT
 3

	)

13636 
	#GPC_DR_MEGA_ISO_MASK
 0x10u

	)

13637 
	#GPC_DR_MEGA_ISO_SHIFT
 4

	)

13638 
	#GPC_DR_GPC_PUP_ACK_MASK
 0x20u

	)

13639 
	#GPC_DR_GPC_PUP_ACK_SHIFT
 5

	)

13640 
	#GPC_DR_GPC_PDN_ACK_MASK
 0x40u

	)

13641 
	#GPC_DR_GPC_PDN_ACK_SHIFT
 6

	)

13642 
	#GPC_DR_GPC_DISP_RESET_B_MASK
 0x80u

	)

13643 
	#GPC_DR_GPC_DISP_RESET_B_SHIFT
 7

	)

13644 
	#GPC_DR_GPC_DISP_SWITCH_B_MASK
 0x100u

	)

13645 
	#GPC_DR_GPC_DISP_SWITCH_B_SHIFT
 8

	)

13646 
	#GPC_DR_GPC_DISP_ISO_MASK
 0x200u

	)

13647 
	#GPC_DR_GPC_DISP_ISO_SHIFT
 9

	)

13648 
	#GPC_DR_GPC_GPU_RESET_B_MASK
 0x400u

	)

13649 
	#GPC_DR_GPC_GPU_RESET_B_SHIFT
 10

	)

13650 
	#GPC_DR_GPC_GPU_SWITCH_B_MASK
 0x800u

	)

13651 
	#GPC_DR_GPC_GPU_SWITCH_B_SHIFT
 11

	)

13652 
	#GPC_DR_GPC_GPU_ISO_MASK
 0x1000u

	)

13653 
	#GPC_DR_GPC_GPU_ISO_SHIFT
 12

	)

13654 
	#GPC_DR_GPC_L2SOC_ISO_MASK
 0x2000u

	)

13655 
	#GPC_DR_GPC_L2SOC_ISO_SHIFT
 13

	)

13656 
	#GPC_DR_GPC_L2CPU_ISO_MASK
 0x4000u

	)

13657 
	#GPC_DR_GPC_L2CPU_ISO_SHIFT
 14

	)

13658 
	#GPC_DR_GPC_L2_SWITCH_B_MASK
 0x8000u

	)

13659 
	#GPC_DR_GPC_L2_SWITCH_B_SHIFT
 15

	)

13660 
	#GPC_DR_GPC_CPU_RESET_B_MASK
 0x10000u

	)

13661 
	#GPC_DR_GPC_CPU_RESET_B_SHIFT
 16

	)

13662 
	#GPC_DR_GPC_CPU_SWITCH_B_MASK
 0x20000u

	)

13663 
	#GPC_DR_GPC_CPU_SWITCH_B_SHIFT
 17

	)

13664 
	#GPC_DR_GPC_CPU_ISO_MASK
 0x40000u

	)

13665 
	#GPC_DR_GPC_CPU_ISO_SHIFT
 18

	)

13666 
	#GPC_DR_IPG_STOP_MASK
 0x80000u

	)

13667 
	#GPC_DR_IPG_STOP_SHIFT
 19

	)

13668 
	#GPC_DR_IPG_WAIT_MASK
 0x100000u

	)

13669 
	#GPC_DR_IPG_WAIT_SHIFT
 20

	)

13677 
	#GPC_BASE
 (0x420DC000u)

	)

13679 
	#GPC
 ((
GPC_Ty≥
 *)
GPC_BASE
)

	)

13680 
	#GPC_BASE_PTR
 (
GPC
)

	)

13682 
	#GPC_BASE_ADDRS
 { 
GPC_BASE
 }

	)

13684 
	#GPC_BASE_PTRS
 { 
GPC
 }

	)

13686 
	#GPC_IRQS
 { 
GPC_IRQn
 }

	)

13699 
	#GPC_CNTR
 
	`GPC_CNTR_REG
(
GPC_BASE_PTR
)

	)

13700 
	#GPC_PGR
 
	`GPC_PGR_REG
(
GPC_BASE_PTR
)

	)

13701 
	#GPC_IMR1
 
	`GPC_IMR1_REG
(
GPC_BASE_PTR
)

	)

13702 
	#GPC_IMR2
 
	`GPC_IMR2_REG
(
GPC_BASE_PTR
)

	)

13703 
	#GPC_IMR3
 
	`GPC_IMR3_REG
(
GPC_BASE_PTR
)

	)

13704 
	#GPC_IMR4
 
	`GPC_IMR4_REG
(
GPC_BASE_PTR
)

	)

13705 
	#GPC_ISR1
 
	`GPC_ISR1_REG
(
GPC_BASE_PTR
)

	)

13706 
	#GPC_ISR2
 
	`GPC_ISR2_REG
(
GPC_BASE_PTR
)

	)

13707 
	#GPC_ISR3
 
	`GPC_ISR3_REG
(
GPC_BASE_PTR
)

	)

13708 
	#GPC_ISR4
 
	`GPC_ISR4_REG
(
GPC_BASE_PTR
)

	)

13709 
	#GPC_A9_LPSR
 
	`GPC_A9_LPSR_REG
(
GPC_BASE_PTR
)

	)

13710 
	#GPC_M4_LPSR
 
	`GPC_M4_LPSR_REG
(
GPC_BASE_PTR
)

	)

13711 
	#GPC_DR
 
	`GPC_DR_REG
(
GPC_BASE_PTR
)

	)

13732 
__IO
 
uöt32_t
 
	mDR
;

13733 
__IO
 
uöt32_t
 
	mGDIR
;

13734 
__I
 
uöt32_t
 
	mPSR
;

13735 
__IO
 
uöt32_t
 
	mICR1
;

13736 
__IO
 
uöt32_t
 
	mICR2
;

13737 
__IO
 
uöt32_t
 
	mIMR
;

13738 
__IO
 
uöt32_t
 
	mISR
;

13739 
__IO
 
uöt32_t
 
	mEDGE_SEL
;

13740 } 
	tGPIO_Ty≥
, *
	tGPIO_MemM≠På
;

13752 
	#GPIO_DR_REG
(
ba£
Ë((ba£)->
DR
)

	)

13753 
	#GPIO_GDIR_REG
(
ba£
Ë((ba£)->
GDIR
)

	)

13754 
	#GPIO_PSR_REG
(
ba£
Ë((ba£)->
PSR
)

	)

13755 
	#GPIO_ICR1_REG
(
ba£
Ë((ba£)->
ICR1
)

	)

13756 
	#GPIO_ICR2_REG
(
ba£
Ë((ba£)->
ICR2
)

	)

13757 
	#GPIO_IMR_REG
(
ba£
Ë((ba£)->
IMR
)

	)

13758 
	#GPIO_ISR_REG
(
ba£
Ë((ba£)->
ISR
)

	)

13759 
	#GPIO_EDGE_SEL_REG
(
ba£
Ë((ba£)->
EDGE_SEL
)

	)

13775 
	#GPIO_DR_DR_MASK
 0xFFFFFFFFu

	)

13776 
	#GPIO_DR_DR_SHIFT
 0

	)

13777 
	#GPIO_DR_DR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_DR_DR_SHIFT
))&
GPIO_DR_DR_MASK
)

	)

13779 
	#GPIO_GDIR_GDIR_MASK
 0xFFFFFFFFu

	)

13780 
	#GPIO_GDIR_GDIR_SHIFT
 0

	)

13781 
	#GPIO_GDIR_GDIR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_GDIR_GDIR_SHIFT
))&
GPIO_GDIR_GDIR_MASK
)

	)

13783 
	#GPIO_PSR_PSR_MASK
 0xFFFFFFFFu

	)

13784 
	#GPIO_PSR_PSR_SHIFT
 0

	)

13785 
	#GPIO_PSR_PSR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_PSR_PSR_SHIFT
))&
GPIO_PSR_PSR_MASK
)

	)

13787 
	#GPIO_ICR1_ICR0_MASK
 0x3u

	)

13788 
	#GPIO_ICR1_ICR0_SHIFT
 0

	)

13789 
	#GPIO_ICR1_ICR0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR1_ICR0_SHIFT
))&
GPIO_ICR1_ICR0_MASK
)

	)

13790 
	#GPIO_ICR1_ICR1_MASK
 0xCu

	)

13791 
	#GPIO_ICR1_ICR1_SHIFT
 2

	)

13792 
	#GPIO_ICR1_ICR1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR1_ICR1_SHIFT
))&
GPIO_ICR1_ICR1_MASK
)

	)

13793 
	#GPIO_ICR1_ICR2_MASK
 0x30u

	)

13794 
	#GPIO_ICR1_ICR2_SHIFT
 4

	)

13795 
	#GPIO_ICR1_ICR2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR1_ICR2_SHIFT
))&
GPIO_ICR1_ICR2_MASK
)

	)

13796 
	#GPIO_ICR1_ICR3_MASK
 0xC0u

	)

13797 
	#GPIO_ICR1_ICR3_SHIFT
 6

	)

13798 
	#GPIO_ICR1_ICR3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR1_ICR3_SHIFT
))&
GPIO_ICR1_ICR3_MASK
)

	)

13799 
	#GPIO_ICR1_ICR4_MASK
 0x300u

	)

13800 
	#GPIO_ICR1_ICR4_SHIFT
 8

	)

13801 
	#GPIO_ICR1_ICR4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR1_ICR4_SHIFT
))&
GPIO_ICR1_ICR4_MASK
)

	)

13802 
	#GPIO_ICR1_ICR5_MASK
 0xC00u

	)

13803 
	#GPIO_ICR1_ICR5_SHIFT
 10

	)

13804 
	#GPIO_ICR1_ICR5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR1_ICR5_SHIFT
))&
GPIO_ICR1_ICR5_MASK
)

	)

13805 
	#GPIO_ICR1_ICR6_MASK
 0x3000u

	)

13806 
	#GPIO_ICR1_ICR6_SHIFT
 12

	)

13807 
	#GPIO_ICR1_ICR6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR1_ICR6_SHIFT
))&
GPIO_ICR1_ICR6_MASK
)

	)

13808 
	#GPIO_ICR1_ICR7_MASK
 0xC000u

	)

13809 
	#GPIO_ICR1_ICR7_SHIFT
 14

	)

13810 
	#GPIO_ICR1_ICR7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR1_ICR7_SHIFT
))&
GPIO_ICR1_ICR7_MASK
)

	)

13811 
	#GPIO_ICR1_ICR8_MASK
 0x30000u

	)

13812 
	#GPIO_ICR1_ICR8_SHIFT
 16

	)

13813 
	#GPIO_ICR1_ICR8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR1_ICR8_SHIFT
))&
GPIO_ICR1_ICR8_MASK
)

	)

13814 
	#GPIO_ICR1_ICR9_MASK
 0xC0000u

	)

13815 
	#GPIO_ICR1_ICR9_SHIFT
 18

	)

13816 
	#GPIO_ICR1_ICR9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR1_ICR9_SHIFT
))&
GPIO_ICR1_ICR9_MASK
)

	)

13817 
	#GPIO_ICR1_ICR10_MASK
 0x300000u

	)

13818 
	#GPIO_ICR1_ICR10_SHIFT
 20

	)

13819 
	#GPIO_ICR1_ICR10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR1_ICR10_SHIFT
))&
GPIO_ICR1_ICR10_MASK
)

	)

13820 
	#GPIO_ICR1_ICR11_MASK
 0xC00000u

	)

13821 
	#GPIO_ICR1_ICR11_SHIFT
 22

	)

13822 
	#GPIO_ICR1_ICR11
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR1_ICR11_SHIFT
))&
GPIO_ICR1_ICR11_MASK
)

	)

13823 
	#GPIO_ICR1_ICR12_MASK
 0x3000000u

	)

13824 
	#GPIO_ICR1_ICR12_SHIFT
 24

	)

13825 
	#GPIO_ICR1_ICR12
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR1_ICR12_SHIFT
))&
GPIO_ICR1_ICR12_MASK
)

	)

13826 
	#GPIO_ICR1_ICR13_MASK
 0xC000000u

	)

13827 
	#GPIO_ICR1_ICR13_SHIFT
 26

	)

13828 
	#GPIO_ICR1_ICR13
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR1_ICR13_SHIFT
))&
GPIO_ICR1_ICR13_MASK
)

	)

13829 
	#GPIO_ICR1_ICR14_MASK
 0x30000000u

	)

13830 
	#GPIO_ICR1_ICR14_SHIFT
 28

	)

13831 
	#GPIO_ICR1_ICR14
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR1_ICR14_SHIFT
))&
GPIO_ICR1_ICR14_MASK
)

	)

13832 
	#GPIO_ICR1_ICR15_MASK
 0xC0000000u

	)

13833 
	#GPIO_ICR1_ICR15_SHIFT
 30

	)

13834 
	#GPIO_ICR1_ICR15
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR1_ICR15_SHIFT
))&
GPIO_ICR1_ICR15_MASK
)

	)

13836 
	#GPIO_ICR2_ICR16_MASK
 0x3u

	)

13837 
	#GPIO_ICR2_ICR16_SHIFT
 0

	)

13838 
	#GPIO_ICR2_ICR16
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR2_ICR16_SHIFT
))&
GPIO_ICR2_ICR16_MASK
)

	)

13839 
	#GPIO_ICR2_ICR17_MASK
 0xCu

	)

13840 
	#GPIO_ICR2_ICR17_SHIFT
 2

	)

13841 
	#GPIO_ICR2_ICR17
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR2_ICR17_SHIFT
))&
GPIO_ICR2_ICR17_MASK
)

	)

13842 
	#GPIO_ICR2_ICR18_MASK
 0x30u

	)

13843 
	#GPIO_ICR2_ICR18_SHIFT
 4

	)

13844 
	#GPIO_ICR2_ICR18
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR2_ICR18_SHIFT
))&
GPIO_ICR2_ICR18_MASK
)

	)

13845 
	#GPIO_ICR2_ICR19_MASK
 0xC0u

	)

13846 
	#GPIO_ICR2_ICR19_SHIFT
 6

	)

13847 
	#GPIO_ICR2_ICR19
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR2_ICR19_SHIFT
))&
GPIO_ICR2_ICR19_MASK
)

	)

13848 
	#GPIO_ICR2_ICR20_MASK
 0x300u

	)

13849 
	#GPIO_ICR2_ICR20_SHIFT
 8

	)

13850 
	#GPIO_ICR2_ICR20
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR2_ICR20_SHIFT
))&
GPIO_ICR2_ICR20_MASK
)

	)

13851 
	#GPIO_ICR2_ICR21_MASK
 0xC00u

	)

13852 
	#GPIO_ICR2_ICR21_SHIFT
 10

	)

13853 
	#GPIO_ICR2_ICR21
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR2_ICR21_SHIFT
))&
GPIO_ICR2_ICR21_MASK
)

	)

13854 
	#GPIO_ICR2_ICR22_MASK
 0x3000u

	)

13855 
	#GPIO_ICR2_ICR22_SHIFT
 12

	)

13856 
	#GPIO_ICR2_ICR22
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR2_ICR22_SHIFT
))&
GPIO_ICR2_ICR22_MASK
)

	)

13857 
	#GPIO_ICR2_ICR23_MASK
 0xC000u

	)

13858 
	#GPIO_ICR2_ICR23_SHIFT
 14

	)

13859 
	#GPIO_ICR2_ICR23
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR2_ICR23_SHIFT
))&
GPIO_ICR2_ICR23_MASK
)

	)

13860 
	#GPIO_ICR2_ICR24_MASK
 0x30000u

	)

13861 
	#GPIO_ICR2_ICR24_SHIFT
 16

	)

13862 
	#GPIO_ICR2_ICR24
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR2_ICR24_SHIFT
))&
GPIO_ICR2_ICR24_MASK
)

	)

13863 
	#GPIO_ICR2_ICR25_MASK
 0xC0000u

	)

13864 
	#GPIO_ICR2_ICR25_SHIFT
 18

	)

13865 
	#GPIO_ICR2_ICR25
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR2_ICR25_SHIFT
))&
GPIO_ICR2_ICR25_MASK
)

	)

13866 
	#GPIO_ICR2_ICR26_MASK
 0x300000u

	)

13867 
	#GPIO_ICR2_ICR26_SHIFT
 20

	)

13868 
	#GPIO_ICR2_ICR26
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR2_ICR26_SHIFT
))&
GPIO_ICR2_ICR26_MASK
)

	)

13869 
	#GPIO_ICR2_ICR27_MASK
 0xC00000u

	)

13870 
	#GPIO_ICR2_ICR27_SHIFT
 22

	)

13871 
	#GPIO_ICR2_ICR27
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR2_ICR27_SHIFT
))&
GPIO_ICR2_ICR27_MASK
)

	)

13872 
	#GPIO_ICR2_ICR28_MASK
 0x3000000u

	)

13873 
	#GPIO_ICR2_ICR28_SHIFT
 24

	)

13874 
	#GPIO_ICR2_ICR28
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR2_ICR28_SHIFT
))&
GPIO_ICR2_ICR28_MASK
)

	)

13875 
	#GPIO_ICR2_ICR29_MASK
 0xC000000u

	)

13876 
	#GPIO_ICR2_ICR29_SHIFT
 26

	)

13877 
	#GPIO_ICR2_ICR29
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR2_ICR29_SHIFT
))&
GPIO_ICR2_ICR29_MASK
)

	)

13878 
	#GPIO_ICR2_ICR30_MASK
 0x30000000u

	)

13879 
	#GPIO_ICR2_ICR30_SHIFT
 28

	)

13880 
	#GPIO_ICR2_ICR30
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR2_ICR30_SHIFT
))&
GPIO_ICR2_ICR30_MASK
)

	)

13881 
	#GPIO_ICR2_ICR31_MASK
 0xC0000000u

	)

13882 
	#GPIO_ICR2_ICR31_SHIFT
 30

	)

13883 
	#GPIO_ICR2_ICR31
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ICR2_ICR31_SHIFT
))&
GPIO_ICR2_ICR31_MASK
)

	)

13885 
	#GPIO_IMR_IMR_MASK
 0xFFFFFFFFu

	)

13886 
	#GPIO_IMR_IMR_SHIFT
 0

	)

13887 
	#GPIO_IMR_IMR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_IMR_IMR_SHIFT
))&
GPIO_IMR_IMR_MASK
)

	)

13889 
	#GPIO_ISR_ISR_MASK
 0xFFFFFFFFu

	)

13890 
	#GPIO_ISR_ISR_SHIFT
 0

	)

13891 
	#GPIO_ISR_ISR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_ISR_ISR_SHIFT
))&
GPIO_ISR_ISR_MASK
)

	)

13893 
	#GPIO_EDGE_SEL_GPIO_EDGE_SEL_MASK
 0xFFFFFFFFu

	)

13894 
	#GPIO_EDGE_SEL_GPIO_EDGE_SEL_SHIFT
 0

	)

13895 
	#GPIO_EDGE_SEL_GPIO_EDGE_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPIO_EDGE_SEL_GPIO_EDGE_SEL_SHIFT
))&
GPIO_EDGE_SEL_GPIO_EDGE_SEL_MASK
)

	)

13903 
	#GPIO1_BASE
 (0x4209C000u)

	)

13905 
	#GPIO1
 ((
GPIO_Ty≥
 *)
GPIO1_BASE
)

	)

13906 
	#GPIO1_BASE_PTR
 (
GPIO1
)

	)

13908 
	#GPIO2_BASE
 (0x420A0000u)

	)

13910 
	#GPIO2
 ((
GPIO_Ty≥
 *)
GPIO2_BASE
)

	)

13911 
	#GPIO2_BASE_PTR
 (
GPIO2
)

	)

13913 
	#GPIO3_BASE
 (0x420A4000u)

	)

13915 
	#GPIO3
 ((
GPIO_Ty≥
 *)
GPIO3_BASE
)

	)

13916 
	#GPIO3_BASE_PTR
 (
GPIO3
)

	)

13918 
	#GPIO4_BASE
 (0x420A8000u)

	)

13920 
	#GPIO4
 ((
GPIO_Ty≥
 *)
GPIO4_BASE
)

	)

13921 
	#GPIO4_BASE_PTR
 (
GPIO4
)

	)

13923 
	#GPIO5_BASE
 (0x420AC000u)

	)

13925 
	#GPIO5
 ((
GPIO_Ty≥
 *)
GPIO5_BASE
)

	)

13926 
	#GPIO5_BASE_PTR
 (
GPIO5
)

	)

13928 
	#GPIO6_BASE
 (0x420B0000u)

	)

13930 
	#GPIO6
 ((
GPIO_Ty≥
 *)
GPIO6_BASE
)

	)

13931 
	#GPIO6_BASE_PTR
 (
GPIO6
)

	)

13933 
	#GPIO7_BASE
 (0x420B4000u)

	)

13935 
	#GPIO7
 ((
GPIO_Ty≥
 *)
GPIO7_BASE
)

	)

13936 
	#GPIO7_BASE_PTR
 (
GPIO7
)

	)

13938 
	#GPIO_BASE_ADDRS
 { 
GPIO1_BASE
, 
GPIO2_BASE
, 
GPIO3_BASE
, 
GPIO4_BASE
, 
GPIO5_BASE
, 
GPIO6_BASE
, 
GPIO7_BASE
 }

	)

13940 
	#GPIO_BASE_PTRS
 { 
GPIO1
, 
GPIO2
, 
GPIO3
, 
GPIO4
, 
GPIO5
, 
GPIO6
, 
GPIO7
 }

	)

13953 
	#GPIO1_DR
 
	`GPIO_DR_REG
(
GPIO1_BASE_PTR
)

	)

13954 
	#GPIO1_GDIR
 
	`GPIO_GDIR_REG
(
GPIO1_BASE_PTR
)

	)

13955 
	#GPIO1_PSR
 
	`GPIO_PSR_REG
(
GPIO1_BASE_PTR
)

	)

13956 
	#GPIO1_ICR1
 
	`GPIO_ICR1_REG
(
GPIO1_BASE_PTR
)

	)

13957 
	#GPIO1_ICR2
 
	`GPIO_ICR2_REG
(
GPIO1_BASE_PTR
)

	)

13958 
	#GPIO1_IMR
 
	`GPIO_IMR_REG
(
GPIO1_BASE_PTR
)

	)

13959 
	#GPIO1_ISR
 
	`GPIO_ISR_REG
(
GPIO1_BASE_PTR
)

	)

13960 
	#GPIO1_EDGE_SEL
 
	`GPIO_EDGE_SEL_REG
(
GPIO1_BASE_PTR
)

	)

13962 
	#GPIO2_DR
 
	`GPIO_DR_REG
(
GPIO2_BASE_PTR
)

	)

13963 
	#GPIO2_GDIR
 
	`GPIO_GDIR_REG
(
GPIO2_BASE_PTR
)

	)

13964 
	#GPIO2_PSR
 
	`GPIO_PSR_REG
(
GPIO2_BASE_PTR
)

	)

13965 
	#GPIO2_ICR1
 
	`GPIO_ICR1_REG
(
GPIO2_BASE_PTR
)

	)

13966 
	#GPIO2_ICR2
 
	`GPIO_ICR2_REG
(
GPIO2_BASE_PTR
)

	)

13967 
	#GPIO2_IMR
 
	`GPIO_IMR_REG
(
GPIO2_BASE_PTR
)

	)

13968 
	#GPIO2_ISR
 
	`GPIO_ISR_REG
(
GPIO2_BASE_PTR
)

	)

13969 
	#GPIO2_EDGE_SEL
 
	`GPIO_EDGE_SEL_REG
(
GPIO2_BASE_PTR
)

	)

13971 
	#GPIO3_DR
 
	`GPIO_DR_REG
(
GPIO3_BASE_PTR
)

	)

13972 
	#GPIO3_GDIR
 
	`GPIO_GDIR_REG
(
GPIO3_BASE_PTR
)

	)

13973 
	#GPIO3_PSR
 
	`GPIO_PSR_REG
(
GPIO3_BASE_PTR
)

	)

13974 
	#GPIO3_ICR1
 
	`GPIO_ICR1_REG
(
GPIO3_BASE_PTR
)

	)

13975 
	#GPIO3_ICR2
 
	`GPIO_ICR2_REG
(
GPIO3_BASE_PTR
)

	)

13976 
	#GPIO3_IMR
 
	`GPIO_IMR_REG
(
GPIO3_BASE_PTR
)

	)

13977 
	#GPIO3_ISR
 
	`GPIO_ISR_REG
(
GPIO3_BASE_PTR
)

	)

13978 
	#GPIO3_EDGE_SEL
 
	`GPIO_EDGE_SEL_REG
(
GPIO3_BASE_PTR
)

	)

13980 
	#GPIO4_DR
 
	`GPIO_DR_REG
(
GPIO4_BASE_PTR
)

	)

13981 
	#GPIO4_GDIR
 
	`GPIO_GDIR_REG
(
GPIO4_BASE_PTR
)

	)

13982 
	#GPIO4_PSR
 
	`GPIO_PSR_REG
(
GPIO4_BASE_PTR
)

	)

13983 
	#GPIO4_ICR1
 
	`GPIO_ICR1_REG
(
GPIO4_BASE_PTR
)

	)

13984 
	#GPIO4_ICR2
 
	`GPIO_ICR2_REG
(
GPIO4_BASE_PTR
)

	)

13985 
	#GPIO4_IMR
 
	`GPIO_IMR_REG
(
GPIO4_BASE_PTR
)

	)

13986 
	#GPIO4_ISR
 
	`GPIO_ISR_REG
(
GPIO4_BASE_PTR
)

	)

13987 
	#GPIO4_EDGE_SEL
 
	`GPIO_EDGE_SEL_REG
(
GPIO4_BASE_PTR
)

	)

13989 
	#GPIO5_DR
 
	`GPIO_DR_REG
(
GPIO5_BASE_PTR
)

	)

13990 
	#GPIO5_GDIR
 
	`GPIO_GDIR_REG
(
GPIO5_BASE_PTR
)

	)

13991 
	#GPIO5_PSR
 
	`GPIO_PSR_REG
(
GPIO5_BASE_PTR
)

	)

13992 
	#GPIO5_ICR1
 
	`GPIO_ICR1_REG
(
GPIO5_BASE_PTR
)

	)

13993 
	#GPIO5_ICR2
 
	`GPIO_ICR2_REG
(
GPIO5_BASE_PTR
)

	)

13994 
	#GPIO5_IMR
 
	`GPIO_IMR_REG
(
GPIO5_BASE_PTR
)

	)

13995 
	#GPIO5_ISR
 
	`GPIO_ISR_REG
(
GPIO5_BASE_PTR
)

	)

13996 
	#GPIO5_EDGE_SEL
 
	`GPIO_EDGE_SEL_REG
(
GPIO5_BASE_PTR
)

	)

13998 
	#GPIO6_DR
 
	`GPIO_DR_REG
(
GPIO6_BASE_PTR
)

	)

13999 
	#GPIO6_GDIR
 
	`GPIO_GDIR_REG
(
GPIO6_BASE_PTR
)

	)

14000 
	#GPIO6_PSR
 
	`GPIO_PSR_REG
(
GPIO6_BASE_PTR
)

	)

14001 
	#GPIO6_ICR1
 
	`GPIO_ICR1_REG
(
GPIO6_BASE_PTR
)

	)

14002 
	#GPIO6_ICR2
 
	`GPIO_ICR2_REG
(
GPIO6_BASE_PTR
)

	)

14003 
	#GPIO6_IMR
 
	`GPIO_IMR_REG
(
GPIO6_BASE_PTR
)

	)

14004 
	#GPIO6_ISR
 
	`GPIO_ISR_REG
(
GPIO6_BASE_PTR
)

	)

14005 
	#GPIO6_EDGE_SEL
 
	`GPIO_EDGE_SEL_REG
(
GPIO6_BASE_PTR
)

	)

14007 
	#GPIO7_DR
 
	`GPIO_DR_REG
(
GPIO7_BASE_PTR
)

	)

14008 
	#GPIO7_GDIR
 
	`GPIO_GDIR_REG
(
GPIO7_BASE_PTR
)

	)

14009 
	#GPIO7_PSR
 
	`GPIO_PSR_REG
(
GPIO7_BASE_PTR
)

	)

14010 
	#GPIO7_ICR1
 
	`GPIO_ICR1_REG
(
GPIO7_BASE_PTR
)

	)

14011 
	#GPIO7_ICR2
 
	`GPIO_ICR2_REG
(
GPIO7_BASE_PTR
)

	)

14012 
	#GPIO7_IMR
 
	`GPIO_IMR_REG
(
GPIO7_BASE_PTR
)

	)

14013 
	#GPIO7_ISR
 
	`GPIO_ISR_REG
(
GPIO7_BASE_PTR
)

	)

14014 
	#GPIO7_EDGE_SEL
 
	`GPIO_EDGE_SEL_REG
(
GPIO7_BASE_PTR
)

	)

14035 
__IO
 
uöt32_t
 
	mCTRL0
;

14036 
__IO
 
uöt32_t
 
	mCTRL0_SET
;

14037 
__IO
 
uöt32_t
 
	mCTRL0_CLR
;

14038 
__IO
 
uöt32_t
 
	mCTRL0_TOG
;

14039 
__IO
 
uöt32_t
 
	mCOMPARE
;

14040 
uöt8_t
 
	mRESERVED_0
[12];

14041 
__IO
 
uöt32_t
 
	mECCCTRL
;

14042 
__IO
 
uöt32_t
 
	mECCCTRL_SET
;

14043 
__IO
 
uöt32_t
 
	mECCCTRL_CLR
;

14044 
__IO
 
uöt32_t
 
	mECCCTRL_TOG
;

14045 
__IO
 
uöt32_t
 
	mECCCOUNT
;

14046 
uöt8_t
 
	mRESERVED_1
[12];

14047 
__IO
 
uöt32_t
 
	mPAYLOAD
;

14048 
uöt8_t
 
	mRESERVED_2
[12];

14049 
__IO
 
uöt32_t
 
	mAUXILIARY
;

14050 
uöt8_t
 
	mRESERVED_3
[12];

14051 
__IO
 
uöt32_t
 
	mCTRL1
;

14052 
__IO
 
uöt32_t
 
	mCTRL1_SET
;

14053 
__IO
 
uöt32_t
 
	mCTRL1_CLR
;

14054 
__IO
 
uöt32_t
 
	mCTRL1_TOG
;

14055 
__IO
 
uöt32_t
 
	mTIMING0
;

14056 
uöt8_t
 
	mRESERVED_4
[12];

14057 
__IO
 
uöt32_t
 
	mTIMING1
;

14058 
uöt8_t
 
	mRESERVED_5
[12];

14059 
__IO
 
uöt32_t
 
	mTIMING2
;

14060 
uöt8_t
 
	mRESERVED_6
[12];

14061 
__IO
 
uöt32_t
 
	mDATA
;

14062 
uöt8_t
 
	mRESERVED_7
[12];

14063 
__I
 
uöt32_t
 
	mSTAT
;

14064 
uöt8_t
 
	mRESERVED_8
[12];

14065 
__I
 
uöt32_t
 
	mDEBUG
;

14066 
uöt8_t
 
	mRESERVED_9
[12];

14067 
__I
 
uöt32_t
 
	mVERSION
;

14068 
uöt8_t
 
	mRESERVED_10
[12];

14069 
__IO
 
uöt32_t
 
	mDEBUG2
;

14070 
uöt8_t
 
	mRESERVED_11
[12];

14071 
__I
 
uöt32_t
 
	mDEBUG3
;

14072 
uöt8_t
 
	mRESERVED_12
[12];

14073 
__IO
 
uöt32_t
 
	mREAD_DDR_DLL_CTRL
;

14074 
uöt8_t
 
	mRESERVED_13
[12];

14075 
__IO
 
uöt32_t
 
	mWRITE_DDR_DLL_CTRL
;

14076 
uöt8_t
 
	mRESERVED_14
[12];

14077 
__I
 
uöt32_t
 
	mREAD_DDR_DLL_STS
;

14078 
uöt8_t
 
	mRESERVED_15
[12];

14079 
__I
 
uöt32_t
 
	mWRITE_DDR_DLL_STS
;

14080 } 
	tGPMI_Ty≥
, *
	tGPMI_MemM≠På
;

14092 
	#GPMI_CTRL0_REG
(
ba£
Ë((ba£)->
CTRL0
)

	)

14093 
	#GPMI_CTRL0_SET_REG
(
ba£
Ë((ba£)->
CTRL0_SET
)

	)

14094 
	#GPMI_CTRL0_CLR_REG
(
ba£
Ë((ba£)->
CTRL0_CLR
)

	)

14095 
	#GPMI_CTRL0_TOG_REG
(
ba£
Ë((ba£)->
CTRL0_TOG
)

	)

14096 
	#GPMI_COMPARE_REG
(
ba£
Ë((ba£)->
COMPARE
)

	)

14097 
	#GPMI_ECCCTRL_REG
(
ba£
Ë((ba£)->
ECCCTRL
)

	)

14098 
	#GPMI_ECCCTRL_SET_REG
(
ba£
Ë((ba£)->
ECCCTRL_SET
)

	)

14099 
	#GPMI_ECCCTRL_CLR_REG
(
ba£
Ë((ba£)->
ECCCTRL_CLR
)

	)

14100 
	#GPMI_ECCCTRL_TOG_REG
(
ba£
Ë((ba£)->
ECCCTRL_TOG
)

	)

14101 
	#GPMI_ECCCOUNT_REG
(
ba£
Ë((ba£)->
ECCCOUNT
)

	)

14102 
	#GPMI_PAYLOAD_REG
(
ba£
Ë((ba£)->
PAYLOAD
)

	)

14103 
	#GPMI_AUXILIARY_REG
(
ba£
Ë((ba£)->
AUXILIARY
)

	)

14104 
	#GPMI_CTRL1_REG
(
ba£
Ë((ba£)->
CTRL1
)

	)

14105 
	#GPMI_CTRL1_SET_REG
(
ba£
Ë((ba£)->
CTRL1_SET
)

	)

14106 
	#GPMI_CTRL1_CLR_REG
(
ba£
Ë((ba£)->
CTRL1_CLR
)

	)

14107 
	#GPMI_CTRL1_TOG_REG
(
ba£
Ë((ba£)->
CTRL1_TOG
)

	)

14108 
	#GPMI_TIMING0_REG
(
ba£
Ë((ba£)->
TIMING0
)

	)

14109 
	#GPMI_TIMING1_REG
(
ba£
Ë((ba£)->
TIMING1
)

	)

14110 
	#GPMI_TIMING2_REG
(
ba£
Ë((ba£)->
TIMING2
)

	)

14111 
	#GPMI_DATA_REG
(
ba£
Ë((ba£)->
DATA
)

	)

14112 
	#GPMI_STAT_REG
(
ba£
Ë((ba£)->
STAT
)

	)

14113 
	#GPMI_DEBUG_REG
(
ba£
Ë((ba£)->
DEBUG
)

	)

14114 
	#GPMI_VERSION_REG
(
ba£
Ë((ba£)->
VERSION
)

	)

14115 
	#GPMI_DEBUG2_REG
(
ba£
Ë((ba£)->
DEBUG2
)

	)

14116 
	#GPMI_DEBUG3_REG
(
ba£
Ë((ba£)->
DEBUG3
)

	)

14117 
	#GPMI_READ_DDR_DLL_CTRL_REG
(
ba£
Ë((ba£)->
READ_DDR_DLL_CTRL
)

	)

14118 
	#GPMI_WRITE_DDR_DLL_CTRL_REG
(
ba£
Ë((ba£)->
WRITE_DDR_DLL_CTRL
)

	)

14119 
	#GPMI_READ_DDR_DLL_STS_REG
(
ba£
Ë((ba£)->
READ_DDR_DLL_STS
)

	)

14120 
	#GPMI_WRITE_DDR_DLL_STS_REG
(
ba£
Ë((ba£)->
WRITE_DDR_DLL_STS
)

	)

14136 
	#GPMI_CTRL0_XFER_COUNT_MASK
 0xFFFFu

	)

14137 
	#GPMI_CTRL0_XFER_COUNT_SHIFT
 0

	)

14138 
	#GPMI_CTRL0_XFER_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL0_XFER_COUNT_SHIFT
))&
GPMI_CTRL0_XFER_COUNT_MASK
)

	)

14139 
	#GPMI_CTRL0_ADDRESS_INCREMENT_MASK
 0x10000u

	)

14140 
	#GPMI_CTRL0_ADDRESS_INCREMENT_SHIFT
 16

	)

14141 
	#GPMI_CTRL0_ADDRESS_MASK
 0xE0000u

	)

14142 
	#GPMI_CTRL0_ADDRESS_SHIFT
 17

	)

14143 
	#GPMI_CTRL0_ADDRESS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL0_ADDRESS_SHIFT
))&
GPMI_CTRL0_ADDRESS_MASK
)

	)

14144 
	#GPMI_CTRL0_CS_MASK
 0x700000u

	)

14145 
	#GPMI_CTRL0_CS_SHIFT
 20

	)

14146 
	#GPMI_CTRL0_CS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL0_CS_SHIFT
))&
GPMI_CTRL0_CS_MASK
)

	)

14147 
	#GPMI_CTRL0_WORD_LENGTH_MASK
 0x800000u

	)

14148 
	#GPMI_CTRL0_WORD_LENGTH_SHIFT
 23

	)

14149 
	#GPMI_CTRL0_COMMAND_MODE_MASK
 0x3000000u

	)

14150 
	#GPMI_CTRL0_COMMAND_MODE_SHIFT
 24

	)

14151 
	#GPMI_CTRL0_COMMAND_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL0_COMMAND_MODE_SHIFT
))&
GPMI_CTRL0_COMMAND_MODE_MASK
)

	)

14152 
	#GPMI_CTRL0_UDMA_MASK
 0x4000000u

	)

14153 
	#GPMI_CTRL0_UDMA_SHIFT
 26

	)

14154 
	#GPMI_CTRL0_LOCK_CS_MASK
 0x8000000u

	)

14155 
	#GPMI_CTRL0_LOCK_CS_SHIFT
 27

	)

14156 
	#GPMI_CTRL0_DEV_IRQ_EN_MASK
 0x10000000u

	)

14157 
	#GPMI_CTRL0_DEV_IRQ_EN_SHIFT
 28

	)

14158 
	#GPMI_CTRL0_RUN_MASK
 0x20000000u

	)

14159 
	#GPMI_CTRL0_RUN_SHIFT
 29

	)

14160 
	#GPMI_CTRL0_CLKGATE_MASK
 0x40000000u

	)

14161 
	#GPMI_CTRL0_CLKGATE_SHIFT
 30

	)

14162 
	#GPMI_CTRL0_SFTRST_MASK
 0x80000000u

	)

14163 
	#GPMI_CTRL0_SFTRST_SHIFT
 31

	)

14165 
	#GPMI_CTRL0_SET_XFER_COUNT_MASK
 0xFFFFu

	)

14166 
	#GPMI_CTRL0_SET_XFER_COUNT_SHIFT
 0

	)

14167 
	#GPMI_CTRL0_SET_XFER_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL0_SET_XFER_COUNT_SHIFT
))&
GPMI_CTRL0_SET_XFER_COUNT_MASK
)

	)

14168 
	#GPMI_CTRL0_SET_ADDRESS_INCREMENT_MASK
 0x10000u

	)

14169 
	#GPMI_CTRL0_SET_ADDRESS_INCREMENT_SHIFT
 16

	)

14170 
	#GPMI_CTRL0_SET_ADDRESS_MASK
 0xE0000u

	)

14171 
	#GPMI_CTRL0_SET_ADDRESS_SHIFT
 17

	)

14172 
	#GPMI_CTRL0_SET_ADDRESS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL0_SET_ADDRESS_SHIFT
))&
GPMI_CTRL0_SET_ADDRESS_MASK
)

	)

14173 
	#GPMI_CTRL0_SET_CS_MASK
 0x700000u

	)

14174 
	#GPMI_CTRL0_SET_CS_SHIFT
 20

	)

14175 
	#GPMI_CTRL0_SET_CS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL0_SET_CS_SHIFT
))&
GPMI_CTRL0_SET_CS_MASK
)

	)

14176 
	#GPMI_CTRL0_SET_WORD_LENGTH_MASK
 0x800000u

	)

14177 
	#GPMI_CTRL0_SET_WORD_LENGTH_SHIFT
 23

	)

14178 
	#GPMI_CTRL0_SET_COMMAND_MODE_MASK
 0x3000000u

	)

14179 
	#GPMI_CTRL0_SET_COMMAND_MODE_SHIFT
 24

	)

14180 
	#GPMI_CTRL0_SET_COMMAND_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL0_SET_COMMAND_MODE_SHIFT
))&
GPMI_CTRL0_SET_COMMAND_MODE_MASK
)

	)

14181 
	#GPMI_CTRL0_SET_UDMA_MASK
 0x4000000u

	)

14182 
	#GPMI_CTRL0_SET_UDMA_SHIFT
 26

	)

14183 
	#GPMI_CTRL0_SET_LOCK_CS_MASK
 0x8000000u

	)

14184 
	#GPMI_CTRL0_SET_LOCK_CS_SHIFT
 27

	)

14185 
	#GPMI_CTRL0_SET_DEV_IRQ_EN_MASK
 0x10000000u

	)

14186 
	#GPMI_CTRL0_SET_DEV_IRQ_EN_SHIFT
 28

	)

14187 
	#GPMI_CTRL0_SET_RUN_MASK
 0x20000000u

	)

14188 
	#GPMI_CTRL0_SET_RUN_SHIFT
 29

	)

14189 
	#GPMI_CTRL0_SET_CLKGATE_MASK
 0x40000000u

	)

14190 
	#GPMI_CTRL0_SET_CLKGATE_SHIFT
 30

	)

14191 
	#GPMI_CTRL0_SET_SFTRST_MASK
 0x80000000u

	)

14192 
	#GPMI_CTRL0_SET_SFTRST_SHIFT
 31

	)

14194 
	#GPMI_CTRL0_CLR_XFER_COUNT_MASK
 0xFFFFu

	)

14195 
	#GPMI_CTRL0_CLR_XFER_COUNT_SHIFT
 0

	)

14196 
	#GPMI_CTRL0_CLR_XFER_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL0_CLR_XFER_COUNT_SHIFT
))&
GPMI_CTRL0_CLR_XFER_COUNT_MASK
)

	)

14197 
	#GPMI_CTRL0_CLR_ADDRESS_INCREMENT_MASK
 0x10000u

	)

14198 
	#GPMI_CTRL0_CLR_ADDRESS_INCREMENT_SHIFT
 16

	)

14199 
	#GPMI_CTRL0_CLR_ADDRESS_MASK
 0xE0000u

	)

14200 
	#GPMI_CTRL0_CLR_ADDRESS_SHIFT
 17

	)

14201 
	#GPMI_CTRL0_CLR_ADDRESS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL0_CLR_ADDRESS_SHIFT
))&
GPMI_CTRL0_CLR_ADDRESS_MASK
)

	)

14202 
	#GPMI_CTRL0_CLR_CS_MASK
 0x700000u

	)

14203 
	#GPMI_CTRL0_CLR_CS_SHIFT
 20

	)

14204 
	#GPMI_CTRL0_CLR_CS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL0_CLR_CS_SHIFT
))&
GPMI_CTRL0_CLR_CS_MASK
)

	)

14205 
	#GPMI_CTRL0_CLR_WORD_LENGTH_MASK
 0x800000u

	)

14206 
	#GPMI_CTRL0_CLR_WORD_LENGTH_SHIFT
 23

	)

14207 
	#GPMI_CTRL0_CLR_COMMAND_MODE_MASK
 0x3000000u

	)

14208 
	#GPMI_CTRL0_CLR_COMMAND_MODE_SHIFT
 24

	)

14209 
	#GPMI_CTRL0_CLR_COMMAND_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL0_CLR_COMMAND_MODE_SHIFT
))&
GPMI_CTRL0_CLR_COMMAND_MODE_MASK
)

	)

14210 
	#GPMI_CTRL0_CLR_UDMA_MASK
 0x4000000u

	)

14211 
	#GPMI_CTRL0_CLR_UDMA_SHIFT
 26

	)

14212 
	#GPMI_CTRL0_CLR_LOCK_CS_MASK
 0x8000000u

	)

14213 
	#GPMI_CTRL0_CLR_LOCK_CS_SHIFT
 27

	)

14214 
	#GPMI_CTRL0_CLR_DEV_IRQ_EN_MASK
 0x10000000u

	)

14215 
	#GPMI_CTRL0_CLR_DEV_IRQ_EN_SHIFT
 28

	)

14216 
	#GPMI_CTRL0_CLR_RUN_MASK
 0x20000000u

	)

14217 
	#GPMI_CTRL0_CLR_RUN_SHIFT
 29

	)

14218 
	#GPMI_CTRL0_CLR_CLKGATE_MASK
 0x40000000u

	)

14219 
	#GPMI_CTRL0_CLR_CLKGATE_SHIFT
 30

	)

14220 
	#GPMI_CTRL0_CLR_SFTRST_MASK
 0x80000000u

	)

14221 
	#GPMI_CTRL0_CLR_SFTRST_SHIFT
 31

	)

14223 
	#GPMI_CTRL0_TOG_XFER_COUNT_MASK
 0xFFFFu

	)

14224 
	#GPMI_CTRL0_TOG_XFER_COUNT_SHIFT
 0

	)

14225 
	#GPMI_CTRL0_TOG_XFER_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL0_TOG_XFER_COUNT_SHIFT
))&
GPMI_CTRL0_TOG_XFER_COUNT_MASK
)

	)

14226 
	#GPMI_CTRL0_TOG_ADDRESS_INCREMENT_MASK
 0x10000u

	)

14227 
	#GPMI_CTRL0_TOG_ADDRESS_INCREMENT_SHIFT
 16

	)

14228 
	#GPMI_CTRL0_TOG_ADDRESS_MASK
 0xE0000u

	)

14229 
	#GPMI_CTRL0_TOG_ADDRESS_SHIFT
 17

	)

14230 
	#GPMI_CTRL0_TOG_ADDRESS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL0_TOG_ADDRESS_SHIFT
))&
GPMI_CTRL0_TOG_ADDRESS_MASK
)

	)

14231 
	#GPMI_CTRL0_TOG_CS_MASK
 0x700000u

	)

14232 
	#GPMI_CTRL0_TOG_CS_SHIFT
 20

	)

14233 
	#GPMI_CTRL0_TOG_CS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL0_TOG_CS_SHIFT
))&
GPMI_CTRL0_TOG_CS_MASK
)

	)

14234 
	#GPMI_CTRL0_TOG_WORD_LENGTH_MASK
 0x800000u

	)

14235 
	#GPMI_CTRL0_TOG_WORD_LENGTH_SHIFT
 23

	)

14236 
	#GPMI_CTRL0_TOG_COMMAND_MODE_MASK
 0x3000000u

	)

14237 
	#GPMI_CTRL0_TOG_COMMAND_MODE_SHIFT
 24

	)

14238 
	#GPMI_CTRL0_TOG_COMMAND_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL0_TOG_COMMAND_MODE_SHIFT
))&
GPMI_CTRL0_TOG_COMMAND_MODE_MASK
)

	)

14239 
	#GPMI_CTRL0_TOG_UDMA_MASK
 0x4000000u

	)

14240 
	#GPMI_CTRL0_TOG_UDMA_SHIFT
 26

	)

14241 
	#GPMI_CTRL0_TOG_LOCK_CS_MASK
 0x8000000u

	)

14242 
	#GPMI_CTRL0_TOG_LOCK_CS_SHIFT
 27

	)

14243 
	#GPMI_CTRL0_TOG_DEV_IRQ_EN_MASK
 0x10000000u

	)

14244 
	#GPMI_CTRL0_TOG_DEV_IRQ_EN_SHIFT
 28

	)

14245 
	#GPMI_CTRL0_TOG_RUN_MASK
 0x20000000u

	)

14246 
	#GPMI_CTRL0_TOG_RUN_SHIFT
 29

	)

14247 
	#GPMI_CTRL0_TOG_CLKGATE_MASK
 0x40000000u

	)

14248 
	#GPMI_CTRL0_TOG_CLKGATE_SHIFT
 30

	)

14249 
	#GPMI_CTRL0_TOG_SFTRST_MASK
 0x80000000u

	)

14250 
	#GPMI_CTRL0_TOG_SFTRST_SHIFT
 31

	)

14252 
	#GPMI_COMPARE_REFERENCE_MASK
 0xFFFFu

	)

14253 
	#GPMI_COMPARE_REFERENCE_SHIFT
 0

	)

14254 
	#GPMI_COMPARE_REFERENCE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_COMPARE_REFERENCE_SHIFT
))&
GPMI_COMPARE_REFERENCE_MASK
)

	)

14255 
	#GPMI_COMPARE_MASK_MASK
 0xFFFF0000u

	)

14256 
	#GPMI_COMPARE_MASK_SHIFT
 16

	)

14257 
	#GPMI_COMPARE_MASK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_COMPARE_MASK_SHIFT
))&
GPMI_COMPARE_MASK_MASK
)

	)

14259 
	#GPMI_ECCCTRL_BUFFER_MASK_MASK
 0x1FFu

	)

14260 
	#GPMI_ECCCTRL_BUFFER_MASK_SHIFT
 0

	)

14261 
	#GPMI_ECCCTRL_BUFFER_MASK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_ECCCTRL_BUFFER_MASK_SHIFT
))&
GPMI_ECCCTRL_BUFFER_MASK_MASK
)

	)

14262 
	#GPMI_ECCCTRL_RANDOMIZER_ENABLE_MASK
 0x800u

	)

14263 
	#GPMI_ECCCTRL_RANDOMIZER_ENABLE_SHIFT
 11

	)

14264 
	#GPMI_ECCCTRL_ENABLE_ECC_MASK
 0x1000u

	)

14265 
	#GPMI_ECCCTRL_ENABLE_ECC_SHIFT
 12

	)

14266 
	#GPMI_ECCCTRL_ECC_CMD_MASK
 0x6000u

	)

14267 
	#GPMI_ECCCTRL_ECC_CMD_SHIFT
 13

	)

14268 
	#GPMI_ECCCTRL_ECC_CMD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_ECCCTRL_ECC_CMD_SHIFT
))&
GPMI_ECCCTRL_ECC_CMD_MASK
)

	)

14269 
	#GPMI_ECCCTRL_RSVD2_MASK
 0x8000u

	)

14270 
	#GPMI_ECCCTRL_RSVD2_SHIFT
 15

	)

14271 
	#GPMI_ECCCTRL_HANDLE_MASK
 0xFFFF0000u

	)

14272 
	#GPMI_ECCCTRL_HANDLE_SHIFT
 16

	)

14273 
	#GPMI_ECCCTRL_HANDLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_ECCCTRL_HANDLE_SHIFT
))&
GPMI_ECCCTRL_HANDLE_MASK
)

	)

14275 
	#GPMI_ECCCTRL_SET_BUFFER_MASK_MASK
 0x1FFu

	)

14276 
	#GPMI_ECCCTRL_SET_BUFFER_MASK_SHIFT
 0

	)

14277 
	#GPMI_ECCCTRL_SET_BUFFER_MASK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_ECCCTRL_SET_BUFFER_MASK_SHIFT
))&
GPMI_ECCCTRL_SET_BUFFER_MASK_MASK
)

	)

14278 
	#GPMI_ECCCTRL_SET_RANDOMIZER_ENABLE_MASK
 0x800u

	)

14279 
	#GPMI_ECCCTRL_SET_RANDOMIZER_ENABLE_SHIFT
 11

	)

14280 
	#GPMI_ECCCTRL_SET_ENABLE_ECC_MASK
 0x1000u

	)

14281 
	#GPMI_ECCCTRL_SET_ENABLE_ECC_SHIFT
 12

	)

14282 
	#GPMI_ECCCTRL_SET_ECC_CMD_MASK
 0x6000u

	)

14283 
	#GPMI_ECCCTRL_SET_ECC_CMD_SHIFT
 13

	)

14284 
	#GPMI_ECCCTRL_SET_ECC_CMD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_ECCCTRL_SET_ECC_CMD_SHIFT
))&
GPMI_ECCCTRL_SET_ECC_CMD_MASK
)

	)

14285 
	#GPMI_ECCCTRL_SET_RSVD2_MASK
 0x8000u

	)

14286 
	#GPMI_ECCCTRL_SET_RSVD2_SHIFT
 15

	)

14287 
	#GPMI_ECCCTRL_SET_HANDLE_MASK
 0xFFFF0000u

	)

14288 
	#GPMI_ECCCTRL_SET_HANDLE_SHIFT
 16

	)

14289 
	#GPMI_ECCCTRL_SET_HANDLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_ECCCTRL_SET_HANDLE_SHIFT
))&
GPMI_ECCCTRL_SET_HANDLE_MASK
)

	)

14291 
	#GPMI_ECCCTRL_CLR_BUFFER_MASK_MASK
 0x1FFu

	)

14292 
	#GPMI_ECCCTRL_CLR_BUFFER_MASK_SHIFT
 0

	)

14293 
	#GPMI_ECCCTRL_CLR_BUFFER_MASK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_ECCCTRL_CLR_BUFFER_MASK_SHIFT
))&
GPMI_ECCCTRL_CLR_BUFFER_MASK_MASK
)

	)

14294 
	#GPMI_ECCCTRL_CLR_RANDOMIZER_ENABLE_MASK
 0x800u

	)

14295 
	#GPMI_ECCCTRL_CLR_RANDOMIZER_ENABLE_SHIFT
 11

	)

14296 
	#GPMI_ECCCTRL_CLR_ENABLE_ECC_MASK
 0x1000u

	)

14297 
	#GPMI_ECCCTRL_CLR_ENABLE_ECC_SHIFT
 12

	)

14298 
	#GPMI_ECCCTRL_CLR_ECC_CMD_MASK
 0x6000u

	)

14299 
	#GPMI_ECCCTRL_CLR_ECC_CMD_SHIFT
 13

	)

14300 
	#GPMI_ECCCTRL_CLR_ECC_CMD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_ECCCTRL_CLR_ECC_CMD_SHIFT
))&
GPMI_ECCCTRL_CLR_ECC_CMD_MASK
)

	)

14301 
	#GPMI_ECCCTRL_CLR_RSVD2_MASK
 0x8000u

	)

14302 
	#GPMI_ECCCTRL_CLR_RSVD2_SHIFT
 15

	)

14303 
	#GPMI_ECCCTRL_CLR_HANDLE_MASK
 0xFFFF0000u

	)

14304 
	#GPMI_ECCCTRL_CLR_HANDLE_SHIFT
 16

	)

14305 
	#GPMI_ECCCTRL_CLR_HANDLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_ECCCTRL_CLR_HANDLE_SHIFT
))&
GPMI_ECCCTRL_CLR_HANDLE_MASK
)

	)

14307 
	#GPMI_ECCCTRL_TOG_BUFFER_MASK_MASK
 0x1FFu

	)

14308 
	#GPMI_ECCCTRL_TOG_BUFFER_MASK_SHIFT
 0

	)

14309 
	#GPMI_ECCCTRL_TOG_BUFFER_MASK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_ECCCTRL_TOG_BUFFER_MASK_SHIFT
))&
GPMI_ECCCTRL_TOG_BUFFER_MASK_MASK
)

	)

14310 
	#GPMI_ECCCTRL_TOG_RANDOMIZER_ENABLE_MASK
 0x800u

	)

14311 
	#GPMI_ECCCTRL_TOG_RANDOMIZER_ENABLE_SHIFT
 11

	)

14312 
	#GPMI_ECCCTRL_TOG_ENABLE_ECC_MASK
 0x1000u

	)

14313 
	#GPMI_ECCCTRL_TOG_ENABLE_ECC_SHIFT
 12

	)

14314 
	#GPMI_ECCCTRL_TOG_ECC_CMD_MASK
 0x6000u

	)

14315 
	#GPMI_ECCCTRL_TOG_ECC_CMD_SHIFT
 13

	)

14316 
	#GPMI_ECCCTRL_TOG_ECC_CMD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_ECCCTRL_TOG_ECC_CMD_SHIFT
))&
GPMI_ECCCTRL_TOG_ECC_CMD_MASK
)

	)

14317 
	#GPMI_ECCCTRL_TOG_RSVD2_MASK
 0x8000u

	)

14318 
	#GPMI_ECCCTRL_TOG_RSVD2_SHIFT
 15

	)

14319 
	#GPMI_ECCCTRL_TOG_HANDLE_MASK
 0xFFFF0000u

	)

14320 
	#GPMI_ECCCTRL_TOG_HANDLE_SHIFT
 16

	)

14321 
	#GPMI_ECCCTRL_TOG_HANDLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_ECCCTRL_TOG_HANDLE_SHIFT
))&
GPMI_ECCCTRL_TOG_HANDLE_MASK
)

	)

14323 
	#GPMI_ECCCOUNT_COUNT_MASK
 0xFFFFu

	)

14324 
	#GPMI_ECCCOUNT_COUNT_SHIFT
 0

	)

14325 
	#GPMI_ECCCOUNT_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_ECCCOUNT_COUNT_SHIFT
))&
GPMI_ECCCOUNT_COUNT_MASK
)

	)

14326 
	#GPMI_ECCCOUNT_RANDOMIZER_PAGE_MASK
 0xFF0000u

	)

14327 
	#GPMI_ECCCOUNT_RANDOMIZER_PAGE_SHIFT
 16

	)

14328 
	#GPMI_ECCCOUNT_RANDOMIZER_PAGE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_ECCCOUNT_RANDOMIZER_PAGE_SHIFT
))&
GPMI_ECCCOUNT_RANDOMIZER_PAGE_MASK
)

	)

14330 
	#GPMI_PAYLOAD_RSVD0_MASK
 0x3u

	)

14331 
	#GPMI_PAYLOAD_RSVD0_SHIFT
 0

	)

14332 
	#GPMI_PAYLOAD_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_PAYLOAD_RSVD0_SHIFT
))&
GPMI_PAYLOAD_RSVD0_MASK
)

	)

14333 
	#GPMI_PAYLOAD_ADDRESS_MASK
 0xFFFFFFFCu

	)

14334 
	#GPMI_PAYLOAD_ADDRESS_SHIFT
 2

	)

14335 
	#GPMI_PAYLOAD_ADDRESS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_PAYLOAD_ADDRESS_SHIFT
))&
GPMI_PAYLOAD_ADDRESS_MASK
)

	)

14337 
	#GPMI_AUXILIARY_RSVD0_MASK
 0x3u

	)

14338 
	#GPMI_AUXILIARY_RSVD0_SHIFT
 0

	)

14339 
	#GPMI_AUXILIARY_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_AUXILIARY_RSVD0_SHIFT
))&
GPMI_AUXILIARY_RSVD0_MASK
)

	)

14340 
	#GPMI_AUXILIARY_ADDRESS_MASK
 0xFFFFFFFCu

	)

14341 
	#GPMI_AUXILIARY_ADDRESS_SHIFT
 2

	)

14342 
	#GPMI_AUXILIARY_ADDRESS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_AUXILIARY_ADDRESS_SHIFT
))&
GPMI_AUXILIARY_ADDRESS_MASK
)

	)

14344 
	#GPMI_CTRL1_GPMI_MODE_MASK
 0x1u

	)

14345 
	#GPMI_CTRL1_GPMI_MODE_SHIFT
 0

	)

14346 
	#GPMI_CTRL1_CAMERA_MODE_MASK
 0x2u

	)

14347 
	#GPMI_CTRL1_CAMERA_MODE_SHIFT
 1

	)

14348 
	#GPMI_CTRL1_ATA_IRQRDY_POLARITY_MASK
 0x4u

	)

14349 
	#GPMI_CTRL1_ATA_IRQRDY_POLARITY_SHIFT
 2

	)

14350 
	#GPMI_CTRL1_DEV_RESET_MASK
 0x8u

	)

14351 
	#GPMI_CTRL1_DEV_RESET_SHIFT
 3

	)

14352 
	#GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL_MASK
 0x70u

	)

14353 
	#GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT
 4

	)

14354 
	#GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT
))&
GPMI_CTRL1_ABORT_WAIT_FOR_READY_CHANNEL_MASK
)

	)

14355 
	#GPMI_CTRL1_ABORT_WAIT_REQUEST_MASK
 0x80u

	)

14356 
	#GPMI_CTRL1_ABORT_WAIT_REQUEST_SHIFT
 7

	)

14357 
	#GPMI_CTRL1_BURST_EN_MASK
 0x100u

	)

14358 
	#GPMI_CTRL1_BURST_EN_SHIFT
 8

	)

14359 
	#GPMI_CTRL1_TIMEOUT_IRQ_MASK
 0x200u

	)

14360 
	#GPMI_CTRL1_TIMEOUT_IRQ_SHIFT
 9

	)

14361 
	#GPMI_CTRL1_DEV_IRQ_MASK
 0x400u

	)

14362 
	#GPMI_CTRL1_DEV_IRQ_SHIFT
 10

	)

14363 
	#GPMI_CTRL1_DMA2ECC_MODE_MASK
 0x800u

	)

14364 
	#GPMI_CTRL1_DMA2ECC_MODE_SHIFT
 11

	)

14365 
	#GPMI_CTRL1_RDN_DELAY_MASK
 0xF000u

	)

14366 
	#GPMI_CTRL1_RDN_DELAY_SHIFT
 12

	)

14367 
	#GPMI_CTRL1_RDN_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL1_RDN_DELAY_SHIFT
))&
GPMI_CTRL1_RDN_DELAY_MASK
)

	)

14368 
	#GPMI_CTRL1_HALF_PERIOD_MASK
 0x10000u

	)

14369 
	#GPMI_CTRL1_HALF_PERIOD_SHIFT
 16

	)

14370 
	#GPMI_CTRL1_DLL_ENABLE_MASK
 0x20000u

	)

14371 
	#GPMI_CTRL1_DLL_ENABLE_SHIFT
 17

	)

14372 
	#GPMI_CTRL1_BCH_MODE_MASK
 0x40000u

	)

14373 
	#GPMI_CTRL1_BCH_MODE_SHIFT
 18

	)

14374 
	#GPMI_CTRL1_GANGED_RDYBUSY_MASK
 0x80000u

	)

14375 
	#GPMI_CTRL1_GANGED_RDYBUSY_SHIFT
 19

	)

14376 
	#GPMI_CTRL1_TIMEOUT_IRQ_EN_MASK
 0x100000u

	)

14377 
	#GPMI_CTRL1_TIMEOUT_IRQ_EN_SHIFT
 20

	)

14378 
	#GPMI_CTRL1_TEST_TRIGGER_MASK
 0x200000u

	)

14379 
	#GPMI_CTRL1_TEST_TRIGGER_SHIFT
 21

	)

14380 
	#GPMI_CTRL1_WRN_DLY_SEL_MASK
 0xC00000u

	)

14381 
	#GPMI_CTRL1_WRN_DLY_SEL_SHIFT
 22

	)

14382 
	#GPMI_CTRL1_WRN_DLY_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL1_WRN_DLY_SEL_SHIFT
))&
GPMI_CTRL1_WRN_DLY_SEL_MASK
)

	)

14383 
	#GPMI_CTRL1_DECOUPLE_CS_MASK
 0x1000000u

	)

14384 
	#GPMI_CTRL1_DECOUPLE_CS_SHIFT
 24

	)

14385 
	#GPMI_CTRL1_SSYNCMODE_MASK
 0x2000000u

	)

14386 
	#GPMI_CTRL1_SSYNCMODE_SHIFT
 25

	)

14387 
	#GPMI_CTRL1_UPDATE_CS_MASK
 0x4000000u

	)

14388 
	#GPMI_CTRL1_UPDATE_CS_SHIFT
 26

	)

14389 
	#GPMI_CTRL1_GPMI_CLK_DIV2_EN_MASK
 0x8000000u

	)

14390 
	#GPMI_CTRL1_GPMI_CLK_DIV2_EN_SHIFT
 27

	)

14391 
	#GPMI_CTRL1_TOGGLE_MODE_MASK
 0x10000000u

	)

14392 
	#GPMI_CTRL1_TOGGLE_MODE_SHIFT
 28

	)

14393 
	#GPMI_CTRL1_WRITE_CLK_STOP_MASK
 0x20000000u

	)

14394 
	#GPMI_CTRL1_WRITE_CLK_STOP_SHIFT
 29

	)

14395 
	#GPMI_CTRL1_SSYNC_CLK_STOP_MASK
 0x40000000u

	)

14396 
	#GPMI_CTRL1_SSYNC_CLK_STOP_SHIFT
 30

	)

14397 
	#GPMI_CTRL1_DEV_CLK_STOP_MASK
 0x80000000u

	)

14398 
	#GPMI_CTRL1_DEV_CLK_STOP_SHIFT
 31

	)

14400 
	#GPMI_CTRL1_SET_GPMI_MODE_MASK
 0x1u

	)

14401 
	#GPMI_CTRL1_SET_GPMI_MODE_SHIFT
 0

	)

14402 
	#GPMI_CTRL1_SET_CAMERA_MODE_MASK
 0x2u

	)

14403 
	#GPMI_CTRL1_SET_CAMERA_MODE_SHIFT
 1

	)

14404 
	#GPMI_CTRL1_SET_ATA_IRQRDY_POLARITY_MASK
 0x4u

	)

14405 
	#GPMI_CTRL1_SET_ATA_IRQRDY_POLARITY_SHIFT
 2

	)

14406 
	#GPMI_CTRL1_SET_DEV_RESET_MASK
 0x8u

	)

14407 
	#GPMI_CTRL1_SET_DEV_RESET_SHIFT
 3

	)

14408 
	#GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL_MASK
 0x70u

	)

14409 
	#GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT
 4

	)

14410 
	#GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT
))&
GPMI_CTRL1_SET_ABORT_WAIT_FOR_READY_CHANNEL_MASK
)

	)

14411 
	#GPMI_CTRL1_SET_ABORT_WAIT_REQUEST_MASK
 0x80u

	)

14412 
	#GPMI_CTRL1_SET_ABORT_WAIT_REQUEST_SHIFT
 7

	)

14413 
	#GPMI_CTRL1_SET_BURST_EN_MASK
 0x100u

	)

14414 
	#GPMI_CTRL1_SET_BURST_EN_SHIFT
 8

	)

14415 
	#GPMI_CTRL1_SET_TIMEOUT_IRQ_MASK
 0x200u

	)

14416 
	#GPMI_CTRL1_SET_TIMEOUT_IRQ_SHIFT
 9

	)

14417 
	#GPMI_CTRL1_SET_DEV_IRQ_MASK
 0x400u

	)

14418 
	#GPMI_CTRL1_SET_DEV_IRQ_SHIFT
 10

	)

14419 
	#GPMI_CTRL1_SET_DMA2ECC_MODE_MASK
 0x800u

	)

14420 
	#GPMI_CTRL1_SET_DMA2ECC_MODE_SHIFT
 11

	)

14421 
	#GPMI_CTRL1_SET_RDN_DELAY_MASK
 0xF000u

	)

14422 
	#GPMI_CTRL1_SET_RDN_DELAY_SHIFT
 12

	)

14423 
	#GPMI_CTRL1_SET_RDN_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL1_SET_RDN_DELAY_SHIFT
))&
GPMI_CTRL1_SET_RDN_DELAY_MASK
)

	)

14424 
	#GPMI_CTRL1_SET_HALF_PERIOD_MASK
 0x10000u

	)

14425 
	#GPMI_CTRL1_SET_HALF_PERIOD_SHIFT
 16

	)

14426 
	#GPMI_CTRL1_SET_DLL_ENABLE_MASK
 0x20000u

	)

14427 
	#GPMI_CTRL1_SET_DLL_ENABLE_SHIFT
 17

	)

14428 
	#GPMI_CTRL1_SET_BCH_MODE_MASK
 0x40000u

	)

14429 
	#GPMI_CTRL1_SET_BCH_MODE_SHIFT
 18

	)

14430 
	#GPMI_CTRL1_SET_GANGED_RDYBUSY_MASK
 0x80000u

	)

14431 
	#GPMI_CTRL1_SET_GANGED_RDYBUSY_SHIFT
 19

	)

14432 
	#GPMI_CTRL1_SET_TIMEOUT_IRQ_EN_MASK
 0x100000u

	)

14433 
	#GPMI_CTRL1_SET_TIMEOUT_IRQ_EN_SHIFT
 20

	)

14434 
	#GPMI_CTRL1_SET_TEST_TRIGGER_MASK
 0x200000u

	)

14435 
	#GPMI_CTRL1_SET_TEST_TRIGGER_SHIFT
 21

	)

14436 
	#GPMI_CTRL1_SET_WRN_DLY_SEL_MASK
 0xC00000u

	)

14437 
	#GPMI_CTRL1_SET_WRN_DLY_SEL_SHIFT
 22

	)

14438 
	#GPMI_CTRL1_SET_WRN_DLY_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL1_SET_WRN_DLY_SEL_SHIFT
))&
GPMI_CTRL1_SET_WRN_DLY_SEL_MASK
)

	)

14439 
	#GPMI_CTRL1_SET_DECOUPLE_CS_MASK
 0x1000000u

	)

14440 
	#GPMI_CTRL1_SET_DECOUPLE_CS_SHIFT
 24

	)

14441 
	#GPMI_CTRL1_SET_SSYNCMODE_MASK
 0x2000000u

	)

14442 
	#GPMI_CTRL1_SET_SSYNCMODE_SHIFT
 25

	)

14443 
	#GPMI_CTRL1_SET_UPDATE_CS_MASK
 0x4000000u

	)

14444 
	#GPMI_CTRL1_SET_UPDATE_CS_SHIFT
 26

	)

14445 
	#GPMI_CTRL1_SET_GPMI_CLK_DIV2_EN_MASK
 0x8000000u

	)

14446 
	#GPMI_CTRL1_SET_GPMI_CLK_DIV2_EN_SHIFT
 27

	)

14447 
	#GPMI_CTRL1_SET_TOGGLE_MODE_MASK
 0x10000000u

	)

14448 
	#GPMI_CTRL1_SET_TOGGLE_MODE_SHIFT
 28

	)

14449 
	#GPMI_CTRL1_SET_WRITE_CLK_STOP_MASK
 0x20000000u

	)

14450 
	#GPMI_CTRL1_SET_WRITE_CLK_STOP_SHIFT
 29

	)

14451 
	#GPMI_CTRL1_SET_SSYNC_CLK_STOP_MASK
 0x40000000u

	)

14452 
	#GPMI_CTRL1_SET_SSYNC_CLK_STOP_SHIFT
 30

	)

14453 
	#GPMI_CTRL1_SET_DEV_CLK_STOP_MASK
 0x80000000u

	)

14454 
	#GPMI_CTRL1_SET_DEV_CLK_STOP_SHIFT
 31

	)

14456 
	#GPMI_CTRL1_CLR_GPMI_MODE_MASK
 0x1u

	)

14457 
	#GPMI_CTRL1_CLR_GPMI_MODE_SHIFT
 0

	)

14458 
	#GPMI_CTRL1_CLR_CAMERA_MODE_MASK
 0x2u

	)

14459 
	#GPMI_CTRL1_CLR_CAMERA_MODE_SHIFT
 1

	)

14460 
	#GPMI_CTRL1_CLR_ATA_IRQRDY_POLARITY_MASK
 0x4u

	)

14461 
	#GPMI_CTRL1_CLR_ATA_IRQRDY_POLARITY_SHIFT
 2

	)

14462 
	#GPMI_CTRL1_CLR_DEV_RESET_MASK
 0x8u

	)

14463 
	#GPMI_CTRL1_CLR_DEV_RESET_SHIFT
 3

	)

14464 
	#GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL_MASK
 0x70u

	)

14465 
	#GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT
 4

	)

14466 
	#GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT
))&
GPMI_CTRL1_CLR_ABORT_WAIT_FOR_READY_CHANNEL_MASK
)

	)

14467 
	#GPMI_CTRL1_CLR_ABORT_WAIT_REQUEST_MASK
 0x80u

	)

14468 
	#GPMI_CTRL1_CLR_ABORT_WAIT_REQUEST_SHIFT
 7

	)

14469 
	#GPMI_CTRL1_CLR_BURST_EN_MASK
 0x100u

	)

14470 
	#GPMI_CTRL1_CLR_BURST_EN_SHIFT
 8

	)

14471 
	#GPMI_CTRL1_CLR_TIMEOUT_IRQ_MASK
 0x200u

	)

14472 
	#GPMI_CTRL1_CLR_TIMEOUT_IRQ_SHIFT
 9

	)

14473 
	#GPMI_CTRL1_CLR_DEV_IRQ_MASK
 0x400u

	)

14474 
	#GPMI_CTRL1_CLR_DEV_IRQ_SHIFT
 10

	)

14475 
	#GPMI_CTRL1_CLR_DMA2ECC_MODE_MASK
 0x800u

	)

14476 
	#GPMI_CTRL1_CLR_DMA2ECC_MODE_SHIFT
 11

	)

14477 
	#GPMI_CTRL1_CLR_RDN_DELAY_MASK
 0xF000u

	)

14478 
	#GPMI_CTRL1_CLR_RDN_DELAY_SHIFT
 12

	)

14479 
	#GPMI_CTRL1_CLR_RDN_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL1_CLR_RDN_DELAY_SHIFT
))&
GPMI_CTRL1_CLR_RDN_DELAY_MASK
)

	)

14480 
	#GPMI_CTRL1_CLR_HALF_PERIOD_MASK
 0x10000u

	)

14481 
	#GPMI_CTRL1_CLR_HALF_PERIOD_SHIFT
 16

	)

14482 
	#GPMI_CTRL1_CLR_DLL_ENABLE_MASK
 0x20000u

	)

14483 
	#GPMI_CTRL1_CLR_DLL_ENABLE_SHIFT
 17

	)

14484 
	#GPMI_CTRL1_CLR_BCH_MODE_MASK
 0x40000u

	)

14485 
	#GPMI_CTRL1_CLR_BCH_MODE_SHIFT
 18

	)

14486 
	#GPMI_CTRL1_CLR_GANGED_RDYBUSY_MASK
 0x80000u

	)

14487 
	#GPMI_CTRL1_CLR_GANGED_RDYBUSY_SHIFT
 19

	)

14488 
	#GPMI_CTRL1_CLR_TIMEOUT_IRQ_EN_MASK
 0x100000u

	)

14489 
	#GPMI_CTRL1_CLR_TIMEOUT_IRQ_EN_SHIFT
 20

	)

14490 
	#GPMI_CTRL1_CLR_TEST_TRIGGER_MASK
 0x200000u

	)

14491 
	#GPMI_CTRL1_CLR_TEST_TRIGGER_SHIFT
 21

	)

14492 
	#GPMI_CTRL1_CLR_WRN_DLY_SEL_MASK
 0xC00000u

	)

14493 
	#GPMI_CTRL1_CLR_WRN_DLY_SEL_SHIFT
 22

	)

14494 
	#GPMI_CTRL1_CLR_WRN_DLY_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL1_CLR_WRN_DLY_SEL_SHIFT
))&
GPMI_CTRL1_CLR_WRN_DLY_SEL_MASK
)

	)

14495 
	#GPMI_CTRL1_CLR_DECOUPLE_CS_MASK
 0x1000000u

	)

14496 
	#GPMI_CTRL1_CLR_DECOUPLE_CS_SHIFT
 24

	)

14497 
	#GPMI_CTRL1_CLR_SSYNCMODE_MASK
 0x2000000u

	)

14498 
	#GPMI_CTRL1_CLR_SSYNCMODE_SHIFT
 25

	)

14499 
	#GPMI_CTRL1_CLR_UPDATE_CS_MASK
 0x4000000u

	)

14500 
	#GPMI_CTRL1_CLR_UPDATE_CS_SHIFT
 26

	)

14501 
	#GPMI_CTRL1_CLR_GPMI_CLK_DIV2_EN_MASK
 0x8000000u

	)

14502 
	#GPMI_CTRL1_CLR_GPMI_CLK_DIV2_EN_SHIFT
 27

	)

14503 
	#GPMI_CTRL1_CLR_TOGGLE_MODE_MASK
 0x10000000u

	)

14504 
	#GPMI_CTRL1_CLR_TOGGLE_MODE_SHIFT
 28

	)

14505 
	#GPMI_CTRL1_CLR_WRITE_CLK_STOP_MASK
 0x20000000u

	)

14506 
	#GPMI_CTRL1_CLR_WRITE_CLK_STOP_SHIFT
 29

	)

14507 
	#GPMI_CTRL1_CLR_SSYNC_CLK_STOP_MASK
 0x40000000u

	)

14508 
	#GPMI_CTRL1_CLR_SSYNC_CLK_STOP_SHIFT
 30

	)

14509 
	#GPMI_CTRL1_CLR_DEV_CLK_STOP_MASK
 0x80000000u

	)

14510 
	#GPMI_CTRL1_CLR_DEV_CLK_STOP_SHIFT
 31

	)

14512 
	#GPMI_CTRL1_TOG_GPMI_MODE_MASK
 0x1u

	)

14513 
	#GPMI_CTRL1_TOG_GPMI_MODE_SHIFT
 0

	)

14514 
	#GPMI_CTRL1_TOG_CAMERA_MODE_MASK
 0x2u

	)

14515 
	#GPMI_CTRL1_TOG_CAMERA_MODE_SHIFT
 1

	)

14516 
	#GPMI_CTRL1_TOG_ATA_IRQRDY_POLARITY_MASK
 0x4u

	)

14517 
	#GPMI_CTRL1_TOG_ATA_IRQRDY_POLARITY_SHIFT
 2

	)

14518 
	#GPMI_CTRL1_TOG_DEV_RESET_MASK
 0x8u

	)

14519 
	#GPMI_CTRL1_TOG_DEV_RESET_SHIFT
 3

	)

14520 
	#GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL_MASK
 0x70u

	)

14521 
	#GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT
 4

	)

14522 
	#GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL_SHIFT
))&
GPMI_CTRL1_TOG_ABORT_WAIT_FOR_READY_CHANNEL_MASK
)

	)

14523 
	#GPMI_CTRL1_TOG_ABORT_WAIT_REQUEST_MASK
 0x80u

	)

14524 
	#GPMI_CTRL1_TOG_ABORT_WAIT_REQUEST_SHIFT
 7

	)

14525 
	#GPMI_CTRL1_TOG_BURST_EN_MASK
 0x100u

	)

14526 
	#GPMI_CTRL1_TOG_BURST_EN_SHIFT
 8

	)

14527 
	#GPMI_CTRL1_TOG_TIMEOUT_IRQ_MASK
 0x200u

	)

14528 
	#GPMI_CTRL1_TOG_TIMEOUT_IRQ_SHIFT
 9

	)

14529 
	#GPMI_CTRL1_TOG_DEV_IRQ_MASK
 0x400u

	)

14530 
	#GPMI_CTRL1_TOG_DEV_IRQ_SHIFT
 10

	)

14531 
	#GPMI_CTRL1_TOG_DMA2ECC_MODE_MASK
 0x800u

	)

14532 
	#GPMI_CTRL1_TOG_DMA2ECC_MODE_SHIFT
 11

	)

14533 
	#GPMI_CTRL1_TOG_RDN_DELAY_MASK
 0xF000u

	)

14534 
	#GPMI_CTRL1_TOG_RDN_DELAY_SHIFT
 12

	)

14535 
	#GPMI_CTRL1_TOG_RDN_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL1_TOG_RDN_DELAY_SHIFT
))&
GPMI_CTRL1_TOG_RDN_DELAY_MASK
)

	)

14536 
	#GPMI_CTRL1_TOG_HALF_PERIOD_MASK
 0x10000u

	)

14537 
	#GPMI_CTRL1_TOG_HALF_PERIOD_SHIFT
 16

	)

14538 
	#GPMI_CTRL1_TOG_DLL_ENABLE_MASK
 0x20000u

	)

14539 
	#GPMI_CTRL1_TOG_DLL_ENABLE_SHIFT
 17

	)

14540 
	#GPMI_CTRL1_TOG_BCH_MODE_MASK
 0x40000u

	)

14541 
	#GPMI_CTRL1_TOG_BCH_MODE_SHIFT
 18

	)

14542 
	#GPMI_CTRL1_TOG_GANGED_RDYBUSY_MASK
 0x80000u

	)

14543 
	#GPMI_CTRL1_TOG_GANGED_RDYBUSY_SHIFT
 19

	)

14544 
	#GPMI_CTRL1_TOG_TIMEOUT_IRQ_EN_MASK
 0x100000u

	)

14545 
	#GPMI_CTRL1_TOG_TIMEOUT_IRQ_EN_SHIFT
 20

	)

14546 
	#GPMI_CTRL1_TOG_TEST_TRIGGER_MASK
 0x200000u

	)

14547 
	#GPMI_CTRL1_TOG_TEST_TRIGGER_SHIFT
 21

	)

14548 
	#GPMI_CTRL1_TOG_WRN_DLY_SEL_MASK
 0xC00000u

	)

14549 
	#GPMI_CTRL1_TOG_WRN_DLY_SEL_SHIFT
 22

	)

14550 
	#GPMI_CTRL1_TOG_WRN_DLY_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_CTRL1_TOG_WRN_DLY_SEL_SHIFT
))&
GPMI_CTRL1_TOG_WRN_DLY_SEL_MASK
)

	)

14551 
	#GPMI_CTRL1_TOG_DECOUPLE_CS_MASK
 0x1000000u

	)

14552 
	#GPMI_CTRL1_TOG_DECOUPLE_CS_SHIFT
 24

	)

14553 
	#GPMI_CTRL1_TOG_SSYNCMODE_MASK
 0x2000000u

	)

14554 
	#GPMI_CTRL1_TOG_SSYNCMODE_SHIFT
 25

	)

14555 
	#GPMI_CTRL1_TOG_UPDATE_CS_MASK
 0x4000000u

	)

14556 
	#GPMI_CTRL1_TOG_UPDATE_CS_SHIFT
 26

	)

14557 
	#GPMI_CTRL1_TOG_GPMI_CLK_DIV2_EN_MASK
 0x8000000u

	)

14558 
	#GPMI_CTRL1_TOG_GPMI_CLK_DIV2_EN_SHIFT
 27

	)

14559 
	#GPMI_CTRL1_TOG_TOGGLE_MODE_MASK
 0x10000000u

	)

14560 
	#GPMI_CTRL1_TOG_TOGGLE_MODE_SHIFT
 28

	)

14561 
	#GPMI_CTRL1_TOG_WRITE_CLK_STOP_MASK
 0x20000000u

	)

14562 
	#GPMI_CTRL1_TOG_WRITE_CLK_STOP_SHIFT
 29

	)

14563 
	#GPMI_CTRL1_TOG_SSYNC_CLK_STOP_MASK
 0x40000000u

	)

14564 
	#GPMI_CTRL1_TOG_SSYNC_CLK_STOP_SHIFT
 30

	)

14565 
	#GPMI_CTRL1_TOG_DEV_CLK_STOP_MASK
 0x80000000u

	)

14566 
	#GPMI_CTRL1_TOG_DEV_CLK_STOP_SHIFT
 31

	)

14568 
	#GPMI_TIMING0_DATA_SETUP_MASK
 0xFFu

	)

14569 
	#GPMI_TIMING0_DATA_SETUP_SHIFT
 0

	)

14570 
	#GPMI_TIMING0_DATA_SETUP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_TIMING0_DATA_SETUP_SHIFT
))&
GPMI_TIMING0_DATA_SETUP_MASK
)

	)

14571 
	#GPMI_TIMING0_DATA_HOLD_MASK
 0xFF00u

	)

14572 
	#GPMI_TIMING0_DATA_HOLD_SHIFT
 8

	)

14573 
	#GPMI_TIMING0_DATA_HOLD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_TIMING0_DATA_HOLD_SHIFT
))&
GPMI_TIMING0_DATA_HOLD_MASK
)

	)

14574 
	#GPMI_TIMING0_ADDRESS_SETUP_MASK
 0xFF0000u

	)

14575 
	#GPMI_TIMING0_ADDRESS_SETUP_SHIFT
 16

	)

14576 
	#GPMI_TIMING0_ADDRESS_SETUP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_TIMING0_ADDRESS_SETUP_SHIFT
))&
GPMI_TIMING0_ADDRESS_SETUP_MASK
)

	)

14577 
	#GPMI_TIMING0_RSVD1_MASK
 0xFF000000u

	)

14578 
	#GPMI_TIMING0_RSVD1_SHIFT
 24

	)

14579 
	#GPMI_TIMING0_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_TIMING0_RSVD1_SHIFT
))&
GPMI_TIMING0_RSVD1_MASK
)

	)

14581 
	#GPMI_TIMING1_RSVD1_MASK
 0xFFFFu

	)

14582 
	#GPMI_TIMING1_RSVD1_SHIFT
 0

	)

14583 
	#GPMI_TIMING1_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_TIMING1_RSVD1_SHIFT
))&
GPMI_TIMING1_RSVD1_MASK
)

	)

14584 
	#GPMI_TIMING1_DEVICE_BUSY_TIMEOUT_MASK
 0xFFFF0000u

	)

14585 
	#GPMI_TIMING1_DEVICE_BUSY_TIMEOUT_SHIFT
 16

	)

14586 
	#GPMI_TIMING1_DEVICE_BUSY_TIMEOUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_TIMING1_DEVICE_BUSY_TIMEOUT_SHIFT
))&
GPMI_TIMING1_DEVICE_BUSY_TIMEOUT_MASK
)

	)

14588 
	#GPMI_TIMING2_DATA_PAUSE_MASK
 0xFu

	)

14589 
	#GPMI_TIMING2_DATA_PAUSE_SHIFT
 0

	)

14590 
	#GPMI_TIMING2_DATA_PAUSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_TIMING2_DATA_PAUSE_SHIFT
))&
GPMI_TIMING2_DATA_PAUSE_MASK
)

	)

14591 
	#GPMI_TIMING2_CMDADD_PAUSE_MASK
 0xF0u

	)

14592 
	#GPMI_TIMING2_CMDADD_PAUSE_SHIFT
 4

	)

14593 
	#GPMI_TIMING2_CMDADD_PAUSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_TIMING2_CMDADD_PAUSE_SHIFT
))&
GPMI_TIMING2_CMDADD_PAUSE_MASK
)

	)

14594 
	#GPMI_TIMING2_POSTAMBLE_DELAY_MASK
 0xF00u

	)

14595 
	#GPMI_TIMING2_POSTAMBLE_DELAY_SHIFT
 8

	)

14596 
	#GPMI_TIMING2_POSTAMBLE_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_TIMING2_POSTAMBLE_DELAY_SHIFT
))&
GPMI_TIMING2_POSTAMBLE_DELAY_MASK
)

	)

14597 
	#GPMI_TIMING2_PREAMBLE_DELAY_MASK
 0xF000u

	)

14598 
	#GPMI_TIMING2_PREAMBLE_DELAY_SHIFT
 12

	)

14599 
	#GPMI_TIMING2_PREAMBLE_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_TIMING2_PREAMBLE_DELAY_SHIFT
))&
GPMI_TIMING2_PREAMBLE_DELAY_MASK
)

	)

14600 
	#GPMI_TIMING2_CE_DELAY_MASK
 0x1F0000u

	)

14601 
	#GPMI_TIMING2_CE_DELAY_SHIFT
 16

	)

14602 
	#GPMI_TIMING2_CE_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_TIMING2_CE_DELAY_SHIFT
))&
GPMI_TIMING2_CE_DELAY_MASK
)

	)

14603 
	#GPMI_TIMING2_RSVD0_MASK
 0xE00000u

	)

14604 
	#GPMI_TIMING2_RSVD0_SHIFT
 21

	)

14605 
	#GPMI_TIMING2_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_TIMING2_RSVD0_SHIFT
))&
GPMI_TIMING2_RSVD0_MASK
)

	)

14606 
	#GPMI_TIMING2_READ_LATENCY_MASK
 0x7000000u

	)

14607 
	#GPMI_TIMING2_READ_LATENCY_SHIFT
 24

	)

14608 
	#GPMI_TIMING2_READ_LATENCY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_TIMING2_READ_LATENCY_SHIFT
))&
GPMI_TIMING2_READ_LATENCY_MASK
)

	)

14609 
	#GPMI_TIMING2_TCR_MASK
 0x18000000u

	)

14610 
	#GPMI_TIMING2_TCR_SHIFT
 27

	)

14611 
	#GPMI_TIMING2_TCR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_TIMING2_TCR_SHIFT
))&
GPMI_TIMING2_TCR_MASK
)

	)

14612 
	#GPMI_TIMING2_TRPSTH_MASK
 0xE0000000u

	)

14613 
	#GPMI_TIMING2_TRPSTH_SHIFT
 29

	)

14614 
	#GPMI_TIMING2_TRPSTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_TIMING2_TRPSTH_SHIFT
))&
GPMI_TIMING2_TRPSTH_MASK
)

	)

14616 
	#GPMI_DATA_DATA_MASK
 0xFFFFFFFFu

	)

14617 
	#GPMI_DATA_DATA_SHIFT
 0

	)

14618 
	#GPMI_DATA_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_DATA_DATA_SHIFT
))&
GPMI_DATA_DATA_MASK
)

	)

14620 
	#GPMI_STAT_PRESENT_MASK
 0x1u

	)

14621 
	#GPMI_STAT_PRESENT_SHIFT
 0

	)

14622 
	#GPMI_STAT_FIFO_FULL_MASK
 0x2u

	)

14623 
	#GPMI_STAT_FIFO_FULL_SHIFT
 1

	)

14624 
	#GPMI_STAT_FIFO_EMPTY_MASK
 0x4u

	)

14625 
	#GPMI_STAT_FIFO_EMPTY_SHIFT
 2

	)

14626 
	#GPMI_STAT_INVALID_BUFFER_MASK_MASK
 0x8u

	)

14627 
	#GPMI_STAT_INVALID_BUFFER_MASK_SHIFT
 3

	)

14628 
	#GPMI_STAT_ATA_IRQ_MASK
 0x10u

	)

14629 
	#GPMI_STAT_ATA_IRQ_SHIFT
 4

	)

14630 
	#GPMI_STAT_RSVD1_MASK
 0xE0u

	)

14631 
	#GPMI_STAT_RSVD1_SHIFT
 5

	)

14632 
	#GPMI_STAT_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_STAT_RSVD1_SHIFT
))&
GPMI_STAT_RSVD1_MASK
)

	)

14633 
	#GPMI_STAT_DEV0_ERROR_MASK
 0x100u

	)

14634 
	#GPMI_STAT_DEV0_ERROR_SHIFT
 8

	)

14635 
	#GPMI_STAT_DEV1_ERROR_MASK
 0x200u

	)

14636 
	#GPMI_STAT_DEV1_ERROR_SHIFT
 9

	)

14637 
	#GPMI_STAT_DEV2_ERROR_MASK
 0x400u

	)

14638 
	#GPMI_STAT_DEV2_ERROR_SHIFT
 10

	)

14639 
	#GPMI_STAT_DEV3_ERROR_MASK
 0x800u

	)

14640 
	#GPMI_STAT_DEV3_ERROR_SHIFT
 11

	)

14641 
	#GPMI_STAT_DEV4_ERROR_MASK
 0x1000u

	)

14642 
	#GPMI_STAT_DEV4_ERROR_SHIFT
 12

	)

14643 
	#GPMI_STAT_DEV5_ERROR_MASK
 0x2000u

	)

14644 
	#GPMI_STAT_DEV5_ERROR_SHIFT
 13

	)

14645 
	#GPMI_STAT_DEV6_ERROR_MASK
 0x4000u

	)

14646 
	#GPMI_STAT_DEV6_ERROR_SHIFT
 14

	)

14647 
	#GPMI_STAT_DEV7_ERROR_MASK
 0x8000u

	)

14648 
	#GPMI_STAT_DEV7_ERROR_SHIFT
 15

	)

14649 
	#GPMI_STAT_RDY_TIMEOUT_MASK
 0xFF0000u

	)

14650 
	#GPMI_STAT_RDY_TIMEOUT_SHIFT
 16

	)

14651 
	#GPMI_STAT_RDY_TIMEOUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_STAT_RDY_TIMEOUT_SHIFT
))&
GPMI_STAT_RDY_TIMEOUT_MASK
)

	)

14652 
	#GPMI_STAT_READY_BUSY_MASK
 0xFF000000u

	)

14653 
	#GPMI_STAT_READY_BUSY_SHIFT
 24

	)

14654 
	#GPMI_STAT_READY_BUSY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_STAT_READY_BUSY_SHIFT
))&
GPMI_STAT_READY_BUSY_MASK
)

	)

14656 
	#GPMI_DEBUG_CMD_END_MASK
 0xFFu

	)

14657 
	#GPMI_DEBUG_CMD_END_SHIFT
 0

	)

14658 
	#GPMI_DEBUG_CMD_END
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_DEBUG_CMD_END_SHIFT
))&
GPMI_DEBUG_CMD_END_MASK
)

	)

14659 
	#GPMI_DEBUG_DMAREQ_MASK
 0xFF00u

	)

14660 
	#GPMI_DEBUG_DMAREQ_SHIFT
 8

	)

14661 
	#GPMI_DEBUG_DMAREQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_DEBUG_DMAREQ_SHIFT
))&
GPMI_DEBUG_DMAREQ_MASK
)

	)

14662 
	#GPMI_DEBUG_DMA_SENSE_MASK
 0xFF0000u

	)

14663 
	#GPMI_DEBUG_DMA_SENSE_SHIFT
 16

	)

14664 
	#GPMI_DEBUG_DMA_SENSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_DEBUG_DMA_SENSE_SHIFT
))&
GPMI_DEBUG_DMA_SENSE_MASK
)

	)

14665 
	#GPMI_DEBUG_WAIT_FOR_READY_END_MASK
 0xFF000000u

	)

14666 
	#GPMI_DEBUG_WAIT_FOR_READY_END_SHIFT
 24

	)

14667 
	#GPMI_DEBUG_WAIT_FOR_READY_END
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_DEBUG_WAIT_FOR_READY_END_SHIFT
))&
GPMI_DEBUG_WAIT_FOR_READY_END_MASK
)

	)

14669 
	#GPMI_VERSION_STEP_MASK
 0xFFFFu

	)

14670 
	#GPMI_VERSION_STEP_SHIFT
 0

	)

14671 
	#GPMI_VERSION_STEP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_VERSION_STEP_SHIFT
))&
GPMI_VERSION_STEP_MASK
)

	)

14672 
	#GPMI_VERSION_MINOR_MASK
 0xFF0000u

	)

14673 
	#GPMI_VERSION_MINOR_SHIFT
 16

	)

14674 
	#GPMI_VERSION_MINOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_VERSION_MINOR_SHIFT
))&
GPMI_VERSION_MINOR_MASK
)

	)

14675 
	#GPMI_VERSION_MAJOR_MASK
 0xFF000000u

	)

14676 
	#GPMI_VERSION_MAJOR_SHIFT
 24

	)

14677 
	#GPMI_VERSION_MAJOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_VERSION_MAJOR_SHIFT
))&
GPMI_VERSION_MAJOR_MASK
)

	)

14679 
	#GPMI_DEBUG2_RDN_TAP_MASK
 0x3Fu

	)

14680 
	#GPMI_DEBUG2_RDN_TAP_SHIFT
 0

	)

14681 
	#GPMI_DEBUG2_RDN_TAP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_DEBUG2_RDN_TAP_SHIFT
))&
GPMI_DEBUG2_RDN_TAP_MASK
)

	)

14682 
	#GPMI_DEBUG2_UPDATE_WINDOW_MASK
 0x40u

	)

14683 
	#GPMI_DEBUG2_UPDATE_WINDOW_SHIFT
 6

	)

14684 
	#GPMI_DEBUG2_VIEW_DELAYED_RDN_MASK
 0x80u

	)

14685 
	#GPMI_DEBUG2_VIEW_DELAYED_RDN_SHIFT
 7

	)

14686 
	#GPMI_DEBUG2_SYND2GPMI_READY_MASK
 0x100u

	)

14687 
	#GPMI_DEBUG2_SYND2GPMI_READY_SHIFT
 8

	)

14688 
	#GPMI_DEBUG2_SYND2GPMI_VALID_MASK
 0x200u

	)

14689 
	#GPMI_DEBUG2_SYND2GPMI_VALID_SHIFT
 9

	)

14690 
	#GPMI_DEBUG2_GPMI2SYND_READY_MASK
 0x400u

	)

14691 
	#GPMI_DEBUG2_GPMI2SYND_READY_SHIFT
 10

	)

14692 
	#GPMI_DEBUG2_GPMI2SYND_VALID_MASK
 0x800u

	)

14693 
	#GPMI_DEBUG2_GPMI2SYND_VALID_SHIFT
 11

	)

14694 
	#GPMI_DEBUG2_SYND2GPMI_BE_MASK
 0xF000u

	)

14695 
	#GPMI_DEBUG2_SYND2GPMI_BE_SHIFT
 12

	)

14696 
	#GPMI_DEBUG2_SYND2GPMI_BE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_DEBUG2_SYND2GPMI_BE_SHIFT
))&
GPMI_DEBUG2_SYND2GPMI_BE_MASK
)

	)

14697 
	#GPMI_DEBUG2_MAIN_STATE_MASK
 0xF0000u

	)

14698 
	#GPMI_DEBUG2_MAIN_STATE_SHIFT
 16

	)

14699 
	#GPMI_DEBUG2_MAIN_STATE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_DEBUG2_MAIN_STATE_SHIFT
))&
GPMI_DEBUG2_MAIN_STATE_MASK
)

	)

14700 
	#GPMI_DEBUG2_PIN_STATE_MASK
 0x700000u

	)

14701 
	#GPMI_DEBUG2_PIN_STATE_SHIFT
 20

	)

14702 
	#GPMI_DEBUG2_PIN_STATE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_DEBUG2_PIN_STATE_SHIFT
))&
GPMI_DEBUG2_PIN_STATE_MASK
)

	)

14703 
	#GPMI_DEBUG2_BUSY_MASK
 0x800000u

	)

14704 
	#GPMI_DEBUG2_BUSY_SHIFT
 23

	)

14705 
	#GPMI_DEBUG2_UDMA_STATE_MASK
 0xF000000u

	)

14706 
	#GPMI_DEBUG2_UDMA_STATE_SHIFT
 24

	)

14707 
	#GPMI_DEBUG2_UDMA_STATE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_DEBUG2_UDMA_STATE_SHIFT
))&
GPMI_DEBUG2_UDMA_STATE_MASK
)

	)

14708 
	#GPMI_DEBUG2_RSVD1_MASK
 0xF0000000u

	)

14709 
	#GPMI_DEBUG2_RSVD1_SHIFT
 28

	)

14710 
	#GPMI_DEBUG2_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_DEBUG2_RSVD1_SHIFT
))&
GPMI_DEBUG2_RSVD1_MASK
)

	)

14712 
	#GPMI_DEBUG3_DEV_WORD_CNTR_MASK
 0xFFFFu

	)

14713 
	#GPMI_DEBUG3_DEV_WORD_CNTR_SHIFT
 0

	)

14714 
	#GPMI_DEBUG3_DEV_WORD_CNTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_DEBUG3_DEV_WORD_CNTR_SHIFT
))&
GPMI_DEBUG3_DEV_WORD_CNTR_MASK
)

	)

14715 
	#GPMI_DEBUG3_APB_WORD_CNTR_MASK
 0xFFFF0000u

	)

14716 
	#GPMI_DEBUG3_APB_WORD_CNTR_SHIFT
 16

	)

14717 
	#GPMI_DEBUG3_APB_WORD_CNTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_DEBUG3_APB_WORD_CNTR_SHIFT
))&
GPMI_DEBUG3_APB_WORD_CNTR_MASK
)

	)

14719 
	#GPMI_READ_DDR_DLL_CTRL_ENABLE_MASK
 0x1u

	)

14720 
	#GPMI_READ_DDR_DLL_CTRL_ENABLE_SHIFT
 0

	)

14721 
	#GPMI_READ_DDR_DLL_CTRL_RESET_MASK
 0x2u

	)

14722 
	#GPMI_READ_DDR_DLL_CTRL_RESET_SHIFT
 1

	)

14723 
	#GPMI_READ_DDR_DLL_CTRL_SLV_FORCE_UPD_MASK
 0x4u

	)

14724 
	#GPMI_READ_DDR_DLL_CTRL_SLV_FORCE_UPD_SHIFT
 2

	)

14725 
	#GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET_MASK
 0x78u

	)

14726 
	#GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET_SHIFT
 3

	)

14727 
	#GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET_SHIFT
))&
GPMI_READ_DDR_DLL_CTRL_SLV_DLY_TARGET_MASK
)

	)

14728 
	#GPMI_READ_DDR_DLL_CTRL_GATE_UPDATE_MASK
 0x80u

	)

14729 
	#GPMI_READ_DDR_DLL_CTRL_GATE_UPDATE_SHIFT
 7

	)

14730 
	#GPMI_READ_DDR_DLL_CTRL_REFCLK_ON_MASK
 0x100u

	)

14731 
	#GPMI_READ_DDR_DLL_CTRL_REFCLK_ON_SHIFT
 8

	)

14732 
	#GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_MASK
 0x200u

	)

14733 
	#GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_SHIFT
 9

	)

14734 
	#GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_MASK
 0x3FC00u

	)

14735 
	#GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT
 10

	)

14736 
	#GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT
))&
GPMI_READ_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_MASK
)

	)

14737 
	#GPMI_READ_DDR_DLL_CTRL_RSVD1_MASK
 0xC0000u

	)

14738 
	#GPMI_READ_DDR_DLL_CTRL_RSVD1_SHIFT
 18

	)

14739 
	#GPMI_READ_DDR_DLL_CTRL_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_READ_DDR_DLL_CTRL_RSVD1_SHIFT
))&
GPMI_READ_DDR_DLL_CTRL_RSVD1_MASK
)

	)

14740 
	#GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT_MASK
 0xFF00000u

	)

14741 
	#GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT_SHIFT
 20

	)

14742 
	#GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT_SHIFT
))&
GPMI_READ_DDR_DLL_CTRL_SLV_UPDATE_INT_MASK
)

	)

14743 
	#GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT_MASK
 0xF0000000u

	)

14744 
	#GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT_SHIFT
 28

	)

14745 
	#GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT_SHIFT
))&
GPMI_READ_DDR_DLL_CTRL_REF_UPDATE_INT_MASK
)

	)

14747 
	#GPMI_WRITE_DDR_DLL_CTRL_ENABLE_MASK
 0x1u

	)

14748 
	#GPMI_WRITE_DDR_DLL_CTRL_ENABLE_SHIFT
 0

	)

14749 
	#GPMI_WRITE_DDR_DLL_CTRL_RESET_MASK
 0x2u

	)

14750 
	#GPMI_WRITE_DDR_DLL_CTRL_RESET_SHIFT
 1

	)

14751 
	#GPMI_WRITE_DDR_DLL_CTRL_SLV_FORCE_UPD_MASK
 0x4u

	)

14752 
	#GPMI_WRITE_DDR_DLL_CTRL_SLV_FORCE_UPD_SHIFT
 2

	)

14753 
	#GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET_MASK
 0x78u

	)

14754 
	#GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET_SHIFT
 3

	)

14755 
	#GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET_SHIFT
))&
GPMI_WRITE_DDR_DLL_CTRL_SLV_DLY_TARGET_MASK
)

	)

14756 
	#GPMI_WRITE_DDR_DLL_CTRL_GATE_UPDATE_MASK
 0x80u

	)

14757 
	#GPMI_WRITE_DDR_DLL_CTRL_GATE_UPDATE_SHIFT
 7

	)

14758 
	#GPMI_WRITE_DDR_DLL_CTRL_REFCLK_ON_MASK
 0x100u

	)

14759 
	#GPMI_WRITE_DDR_DLL_CTRL_REFCLK_ON_SHIFT
 8

	)

14760 
	#GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_MASK
 0x200u

	)

14761 
	#GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_SHIFT
 9

	)

14762 
	#GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_MASK
 0x3FC00u

	)

14763 
	#GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT
 10

	)

14764 
	#GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT
))&
GPMI_WRITE_DDR_DLL_CTRL_SLV_OVERRIDE_VAL_MASK
)

	)

14765 
	#GPMI_WRITE_DDR_DLL_CTRL_RSVD1_MASK
 0xC0000u

	)

14766 
	#GPMI_WRITE_DDR_DLL_CTRL_RSVD1_SHIFT
 18

	)

14767 
	#GPMI_WRITE_DDR_DLL_CTRL_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_WRITE_DDR_DLL_CTRL_RSVD1_SHIFT
))&
GPMI_WRITE_DDR_DLL_CTRL_RSVD1_MASK
)

	)

14768 
	#GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT_MASK
 0xFF00000u

	)

14769 
	#GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT_SHIFT
 20

	)

14770 
	#GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT_SHIFT
))&
GPMI_WRITE_DDR_DLL_CTRL_SLV_UPDATE_INT_MASK
)

	)

14771 
	#GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT_MASK
 0xF0000000u

	)

14772 
	#GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT_SHIFT
 28

	)

14773 
	#GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT_SHIFT
))&
GPMI_WRITE_DDR_DLL_CTRL_REF_UPDATE_INT_MASK
)

	)

14775 
	#GPMI_READ_DDR_DLL_STS_SLV_LOCK_MASK
 0x1u

	)

14776 
	#GPMI_READ_DDR_DLL_STS_SLV_LOCK_SHIFT
 0

	)

14777 
	#GPMI_READ_DDR_DLL_STS_SLV_SEL_MASK
 0x1FEu

	)

14778 
	#GPMI_READ_DDR_DLL_STS_SLV_SEL_SHIFT
 1

	)

14779 
	#GPMI_READ_DDR_DLL_STS_SLV_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_READ_DDR_DLL_STS_SLV_SEL_SHIFT
))&
GPMI_READ_DDR_DLL_STS_SLV_SEL_MASK
)

	)

14780 
	#GPMI_READ_DDR_DLL_STS_RSVD0_MASK
 0xFE00u

	)

14781 
	#GPMI_READ_DDR_DLL_STS_RSVD0_SHIFT
 9

	)

14782 
	#GPMI_READ_DDR_DLL_STS_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_READ_DDR_DLL_STS_RSVD0_SHIFT
))&
GPMI_READ_DDR_DLL_STS_RSVD0_MASK
)

	)

14783 
	#GPMI_READ_DDR_DLL_STS_REF_LOCK_MASK
 0x10000u

	)

14784 
	#GPMI_READ_DDR_DLL_STS_REF_LOCK_SHIFT
 16

	)

14785 
	#GPMI_READ_DDR_DLL_STS_REF_SEL_MASK
 0x1FE0000u

	)

14786 
	#GPMI_READ_DDR_DLL_STS_REF_SEL_SHIFT
 17

	)

14787 
	#GPMI_READ_DDR_DLL_STS_REF_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_READ_DDR_DLL_STS_REF_SEL_SHIFT
))&
GPMI_READ_DDR_DLL_STS_REF_SEL_MASK
)

	)

14788 
	#GPMI_READ_DDR_DLL_STS_RSVD1_MASK
 0xFE000000u

	)

14789 
	#GPMI_READ_DDR_DLL_STS_RSVD1_SHIFT
 25

	)

14790 
	#GPMI_READ_DDR_DLL_STS_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_READ_DDR_DLL_STS_RSVD1_SHIFT
))&
GPMI_READ_DDR_DLL_STS_RSVD1_MASK
)

	)

14792 
	#GPMI_WRITE_DDR_DLL_STS_SLV_LOCK_MASK
 0x1u

	)

14793 
	#GPMI_WRITE_DDR_DLL_STS_SLV_LOCK_SHIFT
 0

	)

14794 
	#GPMI_WRITE_DDR_DLL_STS_SLV_SEL_MASK
 0x1FEu

	)

14795 
	#GPMI_WRITE_DDR_DLL_STS_SLV_SEL_SHIFT
 1

	)

14796 
	#GPMI_WRITE_DDR_DLL_STS_SLV_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_WRITE_DDR_DLL_STS_SLV_SEL_SHIFT
))&
GPMI_WRITE_DDR_DLL_STS_SLV_SEL_MASK
)

	)

14797 
	#GPMI_WRITE_DDR_DLL_STS_RSVD0_MASK
 0xFE00u

	)

14798 
	#GPMI_WRITE_DDR_DLL_STS_RSVD0_SHIFT
 9

	)

14799 
	#GPMI_WRITE_DDR_DLL_STS_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_WRITE_DDR_DLL_STS_RSVD0_SHIFT
))&
GPMI_WRITE_DDR_DLL_STS_RSVD0_MASK
)

	)

14800 
	#GPMI_WRITE_DDR_DLL_STS_REF_LOCK_MASK
 0x10000u

	)

14801 
	#GPMI_WRITE_DDR_DLL_STS_REF_LOCK_SHIFT
 16

	)

14802 
	#GPMI_WRITE_DDR_DLL_STS_REF_SEL_MASK
 0x1FE0000u

	)

14803 
	#GPMI_WRITE_DDR_DLL_STS_REF_SEL_SHIFT
 17

	)

14804 
	#GPMI_WRITE_DDR_DLL_STS_REF_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_WRITE_DDR_DLL_STS_REF_SEL_SHIFT
))&
GPMI_WRITE_DDR_DLL_STS_REF_SEL_MASK
)

	)

14805 
	#GPMI_WRITE_DDR_DLL_STS_RSVD1_MASK
 0xFE000000u

	)

14806 
	#GPMI_WRITE_DDR_DLL_STS_RSVD1_SHIFT
 25

	)

14807 
	#GPMI_WRITE_DDR_DLL_STS_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPMI_WRITE_DDR_DLL_STS_RSVD1_SHIFT
))&
GPMI_WRITE_DDR_DLL_STS_RSVD1_MASK
)

	)

14815 
	#GPMI_BASE
 (0x41806000u)

	)

14817 
	#GPMI
 ((
GPMI_Ty≥
 *)
GPMI_BASE
)

	)

14818 
	#GPMI_BASE_PTR
 (
GPMI
)

	)

14820 
	#GPMI_BASE_ADDRS
 { 
GPMI_BASE
 }

	)

14822 
	#GPMI_BASE_PTRS
 { 
GPMI
 }

	)

14824 
	#GPMI_IRQS
 { 
GPMI_IRQn
 }

	)

14837 
	#GPMI_CTRL0
 
	`GPMI_CTRL0_REG
(
GPMI_BASE_PTR
)

	)

14838 
	#GPMI_CTRL0_SET
 
	`GPMI_CTRL0_SET_REG
(
GPMI_BASE_PTR
)

	)

14839 
	#GPMI_CTRL0_CLR
 
	`GPMI_CTRL0_CLR_REG
(
GPMI_BASE_PTR
)

	)

14840 
	#GPMI_CTRL0_TOG
 
	`GPMI_CTRL0_TOG_REG
(
GPMI_BASE_PTR
)

	)

14841 
	#GPMI_COMPARE
 
	`GPMI_COMPARE_REG
(
GPMI_BASE_PTR
)

	)

14842 
	#GPMI_ECCCTRL
 
	`GPMI_ECCCTRL_REG
(
GPMI_BASE_PTR
)

	)

14843 
	#GPMI_ECCCTRL_SET
 
	`GPMI_ECCCTRL_SET_REG
(
GPMI_BASE_PTR
)

	)

14844 
	#GPMI_ECCCTRL_CLR
 
	`GPMI_ECCCTRL_CLR_REG
(
GPMI_BASE_PTR
)

	)

14845 
	#GPMI_ECCCTRL_TOG
 
	`GPMI_ECCCTRL_TOG_REG
(
GPMI_BASE_PTR
)

	)

14846 
	#GPMI_ECCCOUNT
 
	`GPMI_ECCCOUNT_REG
(
GPMI_BASE_PTR
)

	)

14847 
	#GPMI_PAYLOAD
 
	`GPMI_PAYLOAD_REG
(
GPMI_BASE_PTR
)

	)

14848 
	#GPMI_AUXILIARY
 
	`GPMI_AUXILIARY_REG
(
GPMI_BASE_PTR
)

	)

14849 
	#GPMI_CTRL1
 
	`GPMI_CTRL1_REG
(
GPMI_BASE_PTR
)

	)

14850 
	#GPMI_CTRL1_SET
 
	`GPMI_CTRL1_SET_REG
(
GPMI_BASE_PTR
)

	)

14851 
	#GPMI_CTRL1_CLR
 
	`GPMI_CTRL1_CLR_REG
(
GPMI_BASE_PTR
)

	)

14852 
	#GPMI_CTRL1_TOG
 
	`GPMI_CTRL1_TOG_REG
(
GPMI_BASE_PTR
)

	)

14853 
	#GPMI_TIMING0
 
	`GPMI_TIMING0_REG
(
GPMI_BASE_PTR
)

	)

14854 
	#GPMI_TIMING1
 
	`GPMI_TIMING1_REG
(
GPMI_BASE_PTR
)

	)

14855 
	#GPMI_TIMING2
 
	`GPMI_TIMING2_REG
(
GPMI_BASE_PTR
)

	)

14856 
	#GPMI_DATA
 
	`GPMI_DATA_REG
(
GPMI_BASE_PTR
)

	)

14857 
	#GPMI_STAT
 
	`GPMI_STAT_REG
(
GPMI_BASE_PTR
)

	)

14858 
	#GPMI_DEBUG
 
	`GPMI_DEBUG_REG
(
GPMI_BASE_PTR
)

	)

14859 
	#GPMI_VERSION
 
	`GPMI_VERSION_REG
(
GPMI_BASE_PTR
)

	)

14860 
	#GPMI_DEBUG2
 
	`GPMI_DEBUG2_REG
(
GPMI_BASE_PTR
)

	)

14861 
	#GPMI_DEBUG3
 
	`GPMI_DEBUG3_REG
(
GPMI_BASE_PTR
)

	)

14862 
	#GPMI_READ_DDR_DLL_CTRL
 
	`GPMI_READ_DDR_DLL_CTRL_REG
(
GPMI_BASE_PTR
)

	)

14863 
	#GPMI_WRITE_DDR_DLL_CTRL
 
	`GPMI_WRITE_DDR_DLL_CTRL_REG
(
GPMI_BASE_PTR
)

	)

14864 
	#GPMI_READ_DDR_DLL_STS
 
	`GPMI_READ_DDR_DLL_STS_REG
(
GPMI_BASE_PTR
)

	)

14865 
	#GPMI_WRITE_DDR_DLL_STS
 
	`GPMI_WRITE_DDR_DLL_STS_REG
(
GPMI_BASE_PTR
)

	)

14886 
__IO
 
uöt32_t
 
	mCR
;

14887 
__IO
 
uöt32_t
 
	mPR
;

14888 
__IO
 
uöt32_t
 
	mSR
;

14889 
__IO
 
uöt32_t
 
	mIR
;

14890 
__IO
 
uöt32_t
 
	mOCR1
;

14891 
__IO
 
uöt32_t
 
	mOCR2
;

14892 
__IO
 
uöt32_t
 
	mOCR3
;

14893 
__I
 
uöt32_t
 
	mICR1
;

14894 
__I
 
uöt32_t
 
	mICR2
;

14895 
__I
 
uöt32_t
 
	mCNT
;

14896 } 
	tGPT_Ty≥
, *
	tGPT_MemM≠På
;

14908 
	#GPT_CR_REG
(
ba£
Ë((ba£)->
CR
)

	)

14909 
	#GPT_PR_REG
(
ba£
Ë((ba£)->
PR
)

	)

14910 
	#GPT_SR_REG
(
ba£
Ë((ba£)->
SR
)

	)

14911 
	#GPT_IR_REG
(
ba£
Ë((ba£)->
IR
)

	)

14912 
	#GPT_OCR1_REG
(
ba£
Ë((ba£)->
OCR1
)

	)

14913 
	#GPT_OCR2_REG
(
ba£
Ë((ba£)->
OCR2
)

	)

14914 
	#GPT_OCR3_REG
(
ba£
Ë((ba£)->
OCR3
)

	)

14915 
	#GPT_ICR1_REG
(
ba£
Ë((ba£)->
ICR1
)

	)

14916 
	#GPT_ICR2_REG
(
ba£
Ë((ba£)->
ICR2
)

	)

14917 
	#GPT_CNT_REG
(
ba£
Ë((ba£)->
CNT
)

	)

14933 
	#GPT_CR_EN_MASK
 0x1u

	)

14934 
	#GPT_CR_EN_SHIFT
 0

	)

14935 
	#GPT_CR_ENMOD_MASK
 0x2u

	)

14936 
	#GPT_CR_ENMOD_SHIFT
 1

	)

14937 
	#GPT_CR_DBGEN_MASK
 0x4u

	)

14938 
	#GPT_CR_DBGEN_SHIFT
 2

	)

14939 
	#GPT_CR_WAITEN_MASK
 0x8u

	)

14940 
	#GPT_CR_WAITEN_SHIFT
 3

	)

14941 
	#GPT_CR_DOZEEN_MASK
 0x10u

	)

14942 
	#GPT_CR_DOZEEN_SHIFT
 4

	)

14943 
	#GPT_CR_STOPEN_MASK
 0x20u

	)

14944 
	#GPT_CR_STOPEN_SHIFT
 5

	)

14945 
	#GPT_CR_CLKSRC_MASK
 0x1C0u

	)

14946 
	#GPT_CR_CLKSRC_SHIFT
 6

	)

14947 
	#GPT_CR_CLKSRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPT_CR_CLKSRC_SHIFT
))&
GPT_CR_CLKSRC_MASK
)

	)

14948 
	#GPT_CR_FRR_MASK
 0x200u

	)

14949 
	#GPT_CR_FRR_SHIFT
 9

	)

14950 
	#GPT_CR_EN_24M_MASK
 0x400u

	)

14951 
	#GPT_CR_EN_24M_SHIFT
 10

	)

14952 
	#GPT_CR_SWR_MASK
 0x8000u

	)

14953 
	#GPT_CR_SWR_SHIFT
 15

	)

14954 
	#GPT_CR_IM1_MASK
 0x30000u

	)

14955 
	#GPT_CR_IM1_SHIFT
 16

	)

14956 
	#GPT_CR_IM1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPT_CR_IM1_SHIFT
))&
GPT_CR_IM1_MASK
)

	)

14957 
	#GPT_CR_IM2_MASK
 0xC0000u

	)

14958 
	#GPT_CR_IM2_SHIFT
 18

	)

14959 
	#GPT_CR_IM2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPT_CR_IM2_SHIFT
))&
GPT_CR_IM2_MASK
)

	)

14960 
	#GPT_CR_OM1_MASK
 0x700000u

	)

14961 
	#GPT_CR_OM1_SHIFT
 20

	)

14962 
	#GPT_CR_OM1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPT_CR_OM1_SHIFT
))&
GPT_CR_OM1_MASK
)

	)

14963 
	#GPT_CR_OM2_MASK
 0x3800000u

	)

14964 
	#GPT_CR_OM2_SHIFT
 23

	)

14965 
	#GPT_CR_OM2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPT_CR_OM2_SHIFT
))&
GPT_CR_OM2_MASK
)

	)

14966 
	#GPT_CR_OM3_MASK
 0x1C000000u

	)

14967 
	#GPT_CR_OM3_SHIFT
 26

	)

14968 
	#GPT_CR_OM3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPT_CR_OM3_SHIFT
))&
GPT_CR_OM3_MASK
)

	)

14969 
	#GPT_CR_FO1_MASK
 0x20000000u

	)

14970 
	#GPT_CR_FO1_SHIFT
 29

	)

14971 
	#GPT_CR_FO2_MASK
 0x40000000u

	)

14972 
	#GPT_CR_FO2_SHIFT
 30

	)

14973 
	#GPT_CR_FO3_MASK
 0x80000000u

	)

14974 
	#GPT_CR_FO3_SHIFT
 31

	)

14976 
	#GPT_PR_PRESCALER_MASK
 0xFFFu

	)

14977 
	#GPT_PR_PRESCALER_SHIFT
 0

	)

14978 
	#GPT_PR_PRESCALER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPT_PR_PRESCALER_SHIFT
))&
GPT_PR_PRESCALER_MASK
)

	)

14979 
	#GPT_PR_PRESCALER24M_MASK
 0xF000u

	)

14980 
	#GPT_PR_PRESCALER24M_SHIFT
 12

	)

14981 
	#GPT_PR_PRESCALER24M
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPT_PR_PRESCALER24M_SHIFT
))&
GPT_PR_PRESCALER24M_MASK
)

	)

14983 
	#GPT_SR_OF1_MASK
 0x1u

	)

14984 
	#GPT_SR_OF1_SHIFT
 0

	)

14985 
	#GPT_SR_OF2_MASK
 0x2u

	)

14986 
	#GPT_SR_OF2_SHIFT
 1

	)

14987 
	#GPT_SR_OF3_MASK
 0x4u

	)

14988 
	#GPT_SR_OF3_SHIFT
 2

	)

14989 
	#GPT_SR_IF1_MASK
 0x8u

	)

14990 
	#GPT_SR_IF1_SHIFT
 3

	)

14991 
	#GPT_SR_IF2_MASK
 0x10u

	)

14992 
	#GPT_SR_IF2_SHIFT
 4

	)

14993 
	#GPT_SR_ROV_MASK
 0x20u

	)

14994 
	#GPT_SR_ROV_SHIFT
 5

	)

14996 
	#GPT_IR_OF1IE_MASK
 0x1u

	)

14997 
	#GPT_IR_OF1IE_SHIFT
 0

	)

14998 
	#GPT_IR_OF2IE_MASK
 0x2u

	)

14999 
	#GPT_IR_OF2IE_SHIFT
 1

	)

15000 
	#GPT_IR_OF3IE_MASK
 0x4u

	)

15001 
	#GPT_IR_OF3IE_SHIFT
 2

	)

15002 
	#GPT_IR_IF1IE_MASK
 0x8u

	)

15003 
	#GPT_IR_IF1IE_SHIFT
 3

	)

15004 
	#GPT_IR_IF2IE_MASK
 0x10u

	)

15005 
	#GPT_IR_IF2IE_SHIFT
 4

	)

15006 
	#GPT_IR_ROVIE_MASK
 0x20u

	)

15007 
	#GPT_IR_ROVIE_SHIFT
 5

	)

15009 
	#GPT_OCR1_COMP_MASK
 0xFFFFFFFFu

	)

15010 
	#GPT_OCR1_COMP_SHIFT
 0

	)

15011 
	#GPT_OCR1_COMP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPT_OCR1_COMP_SHIFT
))&
GPT_OCR1_COMP_MASK
)

	)

15013 
	#GPT_OCR2_COMP_MASK
 0xFFFFFFFFu

	)

15014 
	#GPT_OCR2_COMP_SHIFT
 0

	)

15015 
	#GPT_OCR2_COMP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPT_OCR2_COMP_SHIFT
))&
GPT_OCR2_COMP_MASK
)

	)

15017 
	#GPT_OCR3_COMP_MASK
 0xFFFFFFFFu

	)

15018 
	#GPT_OCR3_COMP_SHIFT
 0

	)

15019 
	#GPT_OCR3_COMP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPT_OCR3_COMP_SHIFT
))&
GPT_OCR3_COMP_MASK
)

	)

15021 
	#GPT_ICR1_CAPT_MASK
 0xFFFFFFFFu

	)

15022 
	#GPT_ICR1_CAPT_SHIFT
 0

	)

15023 
	#GPT_ICR1_CAPT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPT_ICR1_CAPT_SHIFT
))&
GPT_ICR1_CAPT_MASK
)

	)

15025 
	#GPT_ICR2_CAPT_MASK
 0xFFFFFFFFu

	)

15026 
	#GPT_ICR2_CAPT_SHIFT
 0

	)

15027 
	#GPT_ICR2_CAPT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPT_ICR2_CAPT_SHIFT
))&
GPT_ICR2_CAPT_MASK
)

	)

15029 
	#GPT_CNT_COUNT_MASK
 0xFFFFFFFFu

	)

15030 
	#GPT_CNT_COUNT_SHIFT
 0

	)

15031 
	#GPT_CNT_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
GPT_CNT_COUNT_SHIFT
))&
GPT_CNT_COUNT_MASK
)

	)

15039 
	#GPT_BASE
 (0x42098000u)

	)

15041 
	#GPT
 ((
GPT_Ty≥
 *)
GPT_BASE
)

	)

15042 
	#GPT_BASE_PTR
 (
GPT
)

	)

15044 
	#GPT_BASE_ADDRS
 { 
GPT_BASE
 }

	)

15046 
	#GPT_BASE_PTRS
 { 
GPT
 }

	)

15048 
	#GPT_IRQS
 { 
GPT_IRQn
 }

	)

15061 
	#GPT_CR
 
	`GPT_CR_REG
(
GPT_BASE_PTR
)

	)

15062 
	#GPT_PR
 
	`GPT_PR_REG
(
GPT_BASE_PTR
)

	)

15063 
	#GPT_SR
 
	`GPT_SR_REG
(
GPT_BASE_PTR
)

	)

15064 
	#GPT_IR
 
	`GPT_IR_REG
(
GPT_BASE_PTR
)

	)

15065 
	#GPT_OCR1
 
	`GPT_OCR1_REG
(
GPT_BASE_PTR
)

	)

15066 
	#GPT_OCR2
 
	`GPT_OCR2_REG
(
GPT_BASE_PTR
)

	)

15067 
	#GPT_OCR3
 
	`GPT_OCR3_REG
(
GPT_BASE_PTR
)

	)

15068 
	#GPT_ICR1
 
	`GPT_ICR1_REG
(
GPT_BASE_PTR
)

	)

15069 
	#GPT_ICR2
 
	`GPT_ICR2_REG
(
GPT_BASE_PTR
)

	)

15070 
	#GPT_CNT
 
	`GPT_CNT_REG
(
GPT_BASE_PTR
)

	)

15091 
__IO
 
uöt16_t
 
	mIADR
;

15092 
uöt8_t
 
	mRESERVED_0
[2];

15093 
__IO
 
uöt16_t
 
	mIFDR
;

15094 
uöt8_t
 
	mRESERVED_1
[2];

15095 
__IO
 
uöt16_t
 
	mI2CR
;

15096 
uöt8_t
 
	mRESERVED_2
[2];

15097 
__IO
 
uöt16_t
 
	mI2SR
;

15098 
uöt8_t
 
	mRESERVED_3
[2];

15099 
__IO
 
uöt16_t
 
	mI2DR
;

15100 } 
	tI2C_Ty≥
, *
	tI2C_MemM≠På
;

15112 
	#I2C_IADR_REG
(
ba£
Ë((ba£)->
IADR
)

	)

15113 
	#I2C_IFDR_REG
(
ba£
Ë((ba£)->
IFDR
)

	)

15114 
	#I2C_I2CR_REG
(
ba£
Ë((ba£)->
I2CR
)

	)

15115 
	#I2C_I2SR_REG
(
ba£
Ë((ba£)->
I2SR
)

	)

15116 
	#I2C_I2DR_REG
(
ba£
Ë((ba£)->
I2DR
)

	)

15132 
	#I2C_IADR_ADR_MASK
 0xFEu

	)

15133 
	#I2C_IADR_ADR_SHIFT
 1

	)

15134 
	#I2C_IADR_ADR
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
I2C_IADR_ADR_SHIFT
))&
I2C_IADR_ADR_MASK
)

	)

15136 
	#I2C_IFDR_IC_MASK
 0x3Fu

	)

15137 
	#I2C_IFDR_IC_SHIFT
 0

	)

15138 
	#I2C_IFDR_IC
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
I2C_IFDR_IC_SHIFT
))&
I2C_IFDR_IC_MASK
)

	)

15140 
	#I2C_I2CR_RSTA_MASK
 0x4u

	)

15141 
	#I2C_I2CR_RSTA_SHIFT
 2

	)

15142 
	#I2C_I2CR_TXAK_MASK
 0x8u

	)

15143 
	#I2C_I2CR_TXAK_SHIFT
 3

	)

15144 
	#I2C_I2CR_MTX_MASK
 0x10u

	)

15145 
	#I2C_I2CR_MTX_SHIFT
 4

	)

15146 
	#I2C_I2CR_MSTA_MASK
 0x20u

	)

15147 
	#I2C_I2CR_MSTA_SHIFT
 5

	)

15148 
	#I2C_I2CR_IIEN_MASK
 0x40u

	)

15149 
	#I2C_I2CR_IIEN_SHIFT
 6

	)

15150 
	#I2C_I2CR_IEN_MASK
 0x80u

	)

15151 
	#I2C_I2CR_IEN_SHIFT
 7

	)

15153 
	#I2C_I2SR_RXAK_MASK
 0x1u

	)

15154 
	#I2C_I2SR_RXAK_SHIFT
 0

	)

15155 
	#I2C_I2SR_IIF_MASK
 0x2u

	)

15156 
	#I2C_I2SR_IIF_SHIFT
 1

	)

15157 
	#I2C_I2SR_SRW_MASK
 0x4u

	)

15158 
	#I2C_I2SR_SRW_SHIFT
 2

	)

15159 
	#I2C_I2SR_IAL_MASK
 0x10u

	)

15160 
	#I2C_I2SR_IAL_SHIFT
 4

	)

15161 
	#I2C_I2SR_IBB_MASK
 0x20u

	)

15162 
	#I2C_I2SR_IBB_SHIFT
 5

	)

15163 
	#I2C_I2SR_IAAS_MASK
 0x40u

	)

15164 
	#I2C_I2SR_IAAS_SHIFT
 6

	)

15165 
	#I2C_I2SR_ICF_MASK
 0x80u

	)

15166 
	#I2C_I2SR_ICF_SHIFT
 7

	)

15168 
	#I2C_I2DR_DATA_MASK
 0xFFu

	)

15169 
	#I2C_I2DR_DATA_SHIFT
 0

	)

15170 
	#I2C_I2DR_DATA
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
I2C_I2DR_DATA_SHIFT
))&
I2C_I2DR_DATA_MASK
)

	)

15178 
	#I2C1_BASE
 (0x421A0000u)

	)

15180 
	#I2C1
 ((
I2C_Ty≥
 *)
I2C1_BASE
)

	)

15181 
	#I2C1_BASE_PTR
 (
I2C1
)

	)

15183 
	#I2C2_BASE
 (0x421A4000u)

	)

15185 
	#I2C2
 ((
I2C_Ty≥
 *)
I2C2_BASE
)

	)

15186 
	#I2C2_BASE_PTR
 (
I2C2
)

	)

15188 
	#I2C3_BASE
 (0x421A8000u)

	)

15190 
	#I2C3
 ((
I2C_Ty≥
 *)
I2C3_BASE
)

	)

15191 
	#I2C3_BASE_PTR
 (
I2C3
)

	)

15193 
	#I2C4_BASE
 (0x421F8000u)

	)

15195 
	#I2C4
 ((
I2C_Ty≥
 *)
I2C4_BASE
)

	)

15196 
	#I2C4_BASE_PTR
 (
I2C4
)

	)

15198 
	#I2C_BASE_ADDRS
 { 
I2C1_BASE
, 
I2C2_BASE
, 
I2C3_BASE
, 
I2C4_BASE
 }

	)

15200 
	#I2C_BASE_PTRS
 { 
I2C1
, 
I2C2
, 
I2C3
, 
I2C4
 }

	)

15202 
	#I2C_IRQS
 { 
I2C1_IRQn
, 
I2C2_IRQn
, 
I2C3_IRQn
, 
I2C4_IRQn
 }

	)

15215 
	#I2C1_IADR
 
	`I2C_IADR_REG
(
I2C1_BASE_PTR
)

	)

15216 
	#I2C1_IFDR
 
	`I2C_IFDR_REG
(
I2C1_BASE_PTR
)

	)

15217 
	#I2C1_I2CR
 
	`I2C_I2CR_REG
(
I2C1_BASE_PTR
)

	)

15218 
	#I2C1_I2SR
 
	`I2C_I2SR_REG
(
I2C1_BASE_PTR
)

	)

15219 
	#I2C1_I2DR
 
	`I2C_I2DR_REG
(
I2C1_BASE_PTR
)

	)

15221 
	#I2C2_IADR
 
	`I2C_IADR_REG
(
I2C2_BASE_PTR
)

	)

15222 
	#I2C2_IFDR
 
	`I2C_IFDR_REG
(
I2C2_BASE_PTR
)

	)

15223 
	#I2C2_I2CR
 
	`I2C_I2CR_REG
(
I2C2_BASE_PTR
)

	)

15224 
	#I2C2_I2SR
 
	`I2C_I2SR_REG
(
I2C2_BASE_PTR
)

	)

15225 
	#I2C2_I2DR
 
	`I2C_I2DR_REG
(
I2C2_BASE_PTR
)

	)

15227 
	#I2C3_IADR
 
	`I2C_IADR_REG
(
I2C3_BASE_PTR
)

	)

15228 
	#I2C3_IFDR
 
	`I2C_IFDR_REG
(
I2C3_BASE_PTR
)

	)

15229 
	#I2C3_I2CR
 
	`I2C_I2CR_REG
(
I2C3_BASE_PTR
)

	)

15230 
	#I2C3_I2SR
 
	`I2C_I2SR_REG
(
I2C3_BASE_PTR
)

	)

15231 
	#I2C3_I2DR
 
	`I2C_I2DR_REG
(
I2C3_BASE_PTR
)

	)

15233 
	#I2C4_IADR
 
	`I2C_IADR_REG
(
I2C4_BASE_PTR
)

	)

15234 
	#I2C4_IFDR
 
	`I2C_IFDR_REG
(
I2C4_BASE_PTR
)

	)

15235 
	#I2C4_I2CR
 
	`I2C_I2CR_REG
(
I2C4_BASE_PTR
)

	)

15236 
	#I2C4_I2SR
 
	`I2C_I2SR_REG
(
I2C4_BASE_PTR
)

	)

15237 
	#I2C4_I2DR
 
	`I2C_I2DR_REG
(
I2C4_BASE_PTR
)

	)

15258 
__IO
 
uöt32_t
 
	mTCSR
;

15259 
__IO
 
uöt32_t
 
	mTCR1
;

15260 
__IO
 
uöt32_t
 
	mTCR2
;

15261 
__IO
 
uöt32_t
 
	mTCR3
;

15262 
__IO
 
uöt32_t
 
	mTCR4
;

15263 
__IO
 
uöt32_t
 
	mTCR5
;

15264 
uöt8_t
 
	mRESERVED_0
[8];

15265 
__O
 
uöt32_t
 
	mTDR
[1];

15266 
uöt8_t
 
	mRESERVED_1
[28];

15267 
__I
 
uöt32_t
 
	mTFR
[1];

15268 
uöt8_t
 
	mRESERVED_2
[28];

15269 
__IO
 
uöt32_t
 
	mTMR
;

15270 
uöt8_t
 
	mRESERVED_3
[28];

15271 
__IO
 
uöt32_t
 
	mRCSR
;

15272 
__IO
 
uöt32_t
 
	mRCR1
;

15273 
__IO
 
uöt32_t
 
	mRCR2
;

15274 
__IO
 
uöt32_t
 
	mRCR3
;

15275 
__IO
 
uöt32_t
 
	mRCR4
;

15276 
__IO
 
uöt32_t
 
	mRCR5
;

15277 
uöt8_t
 
	mRESERVED_4
[8];

15278 
__I
 
uöt32_t
 
	mRDR
[1];

15279 
uöt8_t
 
	mRESERVED_5
[28];

15280 
__I
 
uöt32_t
 
	mRFR
[1];

15281 
uöt8_t
 
	mRESERVED_6
[28];

15282 
__IO
 
uöt32_t
 
	mRMR
;

15283 } 
	tI2S_Ty≥
, *
	tI2S_MemM≠På
;

15295 
	#I2S_TCSR_REG
(
ba£
Ë((ba£)->
TCSR
)

	)

15296 
	#I2S_TCR1_REG
(
ba£
Ë((ba£)->
TCR1
)

	)

15297 
	#I2S_TCR2_REG
(
ba£
Ë((ba£)->
TCR2
)

	)

15298 
	#I2S_TCR3_REG
(
ba£
Ë((ba£)->
TCR3
)

	)

15299 
	#I2S_TCR4_REG
(
ba£
Ë((ba£)->
TCR4
)

	)

15300 
	#I2S_TCR5_REG
(
ba£
Ë((ba£)->
TCR5
)

	)

15301 
	#I2S_TDR_REG
(
ba£
,
ödex
Ë((ba£)->
TDR
[ödex])

	)

15302 
	#I2S_TFR_REG
(
ba£
,
ödex
Ë((ba£)->
TFR
[ödex])

	)

15303 
	#I2S_TMR_REG
(
ba£
Ë((ba£)->
TMR
)

	)

15304 
	#I2S_RCSR_REG
(
ba£
Ë((ba£)->
RCSR
)

	)

15305 
	#I2S_RCR1_REG
(
ba£
Ë((ba£)->
RCR1
)

	)

15306 
	#I2S_RCR2_REG
(
ba£
Ë((ba£)->
RCR2
)

	)

15307 
	#I2S_RCR3_REG
(
ba£
Ë((ba£)->
RCR3
)

	)

15308 
	#I2S_RCR4_REG
(
ba£
Ë((ba£)->
RCR4
)

	)

15309 
	#I2S_RCR5_REG
(
ba£
Ë((ba£)->
RCR5
)

	)

15310 
	#I2S_RDR_REG
(
ba£
,
ödex
Ë((ba£)->
RDR
[ödex])

	)

15311 
	#I2S_RFR_REG
(
ba£
,
ödex
Ë((ba£)->
RFR
[ödex])

	)

15312 
	#I2S_RMR_REG
(
ba£
Ë((ba£)->
RMR
)

	)

15328 
	#I2S_TCSR_FRDE_MASK
 0x1u

	)

15329 
	#I2S_TCSR_FRDE_SHIFT
 0

	)

15330 
	#I2S_TCSR_FWDE_MASK
 0x2u

	)

15331 
	#I2S_TCSR_FWDE_SHIFT
 1

	)

15332 
	#I2S_TCSR_FRIE_MASK
 0x100u

	)

15333 
	#I2S_TCSR_FRIE_SHIFT
 8

	)

15334 
	#I2S_TCSR_FWIE_MASK
 0x200u

	)

15335 
	#I2S_TCSR_FWIE_SHIFT
 9

	)

15336 
	#I2S_TCSR_FEIE_MASK
 0x400u

	)

15337 
	#I2S_TCSR_FEIE_SHIFT
 10

	)

15338 
	#I2S_TCSR_SEIE_MASK
 0x800u

	)

15339 
	#I2S_TCSR_SEIE_SHIFT
 11

	)

15340 
	#I2S_TCSR_WSIE_MASK
 0x1000u

	)

15341 
	#I2S_TCSR_WSIE_SHIFT
 12

	)

15342 
	#I2S_TCSR_FRF_MASK
 0x10000u

	)

15343 
	#I2S_TCSR_FRF_SHIFT
 16

	)

15344 
	#I2S_TCSR_FWF_MASK
 0x20000u

	)

15345 
	#I2S_TCSR_FWF_SHIFT
 17

	)

15346 
	#I2S_TCSR_FEF_MASK
 0x40000u

	)

15347 
	#I2S_TCSR_FEF_SHIFT
 18

	)

15348 
	#I2S_TCSR_SEF_MASK
 0x80000u

	)

15349 
	#I2S_TCSR_SEF_SHIFT
 19

	)

15350 
	#I2S_TCSR_WSF_MASK
 0x100000u

	)

15351 
	#I2S_TCSR_WSF_SHIFT
 20

	)

15352 
	#I2S_TCSR_SR_MASK
 0x1000000u

	)

15353 
	#I2S_TCSR_SR_SHIFT
 24

	)

15354 
	#I2S_TCSR_FR_MASK
 0x2000000u

	)

15355 
	#I2S_TCSR_FR_SHIFT
 25

	)

15356 
	#I2S_TCSR_BCE_MASK
 0x10000000u

	)

15357 
	#I2S_TCSR_BCE_SHIFT
 28

	)

15358 
	#I2S_TCSR_DBGE_MASK
 0x20000000u

	)

15359 
	#I2S_TCSR_DBGE_SHIFT
 29

	)

15360 
	#I2S_TCSR_STOPE_MASK
 0x40000000u

	)

15361 
	#I2S_TCSR_STOPE_SHIFT
 30

	)

15362 
	#I2S_TCSR_TE_MASK
 0x80000000u

	)

15363 
	#I2S_TCSR_TE_SHIFT
 31

	)

15365 
	#I2S_TCR1_TFW_MASK
 0x1Fu

	)

15366 
	#I2S_TCR1_TFW_SHIFT
 0

	)

15367 
	#I2S_TCR1_TFW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_TCR1_TFW_SHIFT
))&
I2S_TCR1_TFW_MASK
)

	)

15369 
	#I2S_TCR2_DIV_MASK
 0xFFu

	)

15370 
	#I2S_TCR2_DIV_SHIFT
 0

	)

15371 
	#I2S_TCR2_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_TCR2_DIV_SHIFT
))&
I2S_TCR2_DIV_MASK
)

	)

15372 
	#I2S_TCR2_BCD_MASK
 0x1000000u

	)

15373 
	#I2S_TCR2_BCD_SHIFT
 24

	)

15374 
	#I2S_TCR2_BCP_MASK
 0x2000000u

	)

15375 
	#I2S_TCR2_BCP_SHIFT
 25

	)

15376 
	#I2S_TCR2_MSEL_MASK
 0xC000000u

	)

15377 
	#I2S_TCR2_MSEL_SHIFT
 26

	)

15378 
	#I2S_TCR2_MSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_TCR2_MSEL_SHIFT
))&
I2S_TCR2_MSEL_MASK
)

	)

15379 
	#I2S_TCR2_BCI_MASK
 0x10000000u

	)

15380 
	#I2S_TCR2_BCI_SHIFT
 28

	)

15381 
	#I2S_TCR2_BCS_MASK
 0x20000000u

	)

15382 
	#I2S_TCR2_BCS_SHIFT
 29

	)

15383 
	#I2S_TCR2_SYNC_MASK
 0xC0000000u

	)

15384 
	#I2S_TCR2_SYNC_SHIFT
 30

	)

15385 
	#I2S_TCR2_SYNC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_TCR2_SYNC_SHIFT
))&
I2S_TCR2_SYNC_MASK
)

	)

15387 
	#I2S_TCR3_WDFL_MASK
 0x1Fu

	)

15388 
	#I2S_TCR3_WDFL_SHIFT
 0

	)

15389 
	#I2S_TCR3_WDFL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_TCR3_WDFL_SHIFT
))&
I2S_TCR3_WDFL_MASK
)

	)

15390 
	#I2S_TCR3_TCE_MASK
 0x10000u

	)

15391 
	#I2S_TCR3_TCE_SHIFT
 16

	)

15393 
	#I2S_TCR4_FSD_MASK
 0x1u

	)

15394 
	#I2S_TCR4_FSD_SHIFT
 0

	)

15395 
	#I2S_TCR4_FSP_MASK
 0x2u

	)

15396 
	#I2S_TCR4_FSP_SHIFT
 1

	)

15397 
	#I2S_TCR4_FSE_MASK
 0x8u

	)

15398 
	#I2S_TCR4_FSE_SHIFT
 3

	)

15399 
	#I2S_TCR4_MF_MASK
 0x10u

	)

15400 
	#I2S_TCR4_MF_SHIFT
 4

	)

15401 
	#I2S_TCR4_SYWD_MASK
 0x1F00u

	)

15402 
	#I2S_TCR4_SYWD_SHIFT
 8

	)

15403 
	#I2S_TCR4_SYWD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_TCR4_SYWD_SHIFT
))&
I2S_TCR4_SYWD_MASK
)

	)

15404 
	#I2S_TCR4_FRSZ_MASK
 0x1F0000u

	)

15405 
	#I2S_TCR4_FRSZ_SHIFT
 16

	)

15406 
	#I2S_TCR4_FRSZ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_TCR4_FRSZ_SHIFT
))&
I2S_TCR4_FRSZ_MASK
)

	)

15408 
	#I2S_TCR5_FBT_MASK
 0x1F00u

	)

15409 
	#I2S_TCR5_FBT_SHIFT
 8

	)

15410 
	#I2S_TCR5_FBT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_TCR5_FBT_SHIFT
))&
I2S_TCR5_FBT_MASK
)

	)

15411 
	#I2S_TCR5_W0W_MASK
 0x1F0000u

	)

15412 
	#I2S_TCR5_W0W_SHIFT
 16

	)

15413 
	#I2S_TCR5_W0W
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_TCR5_W0W_SHIFT
))&
I2S_TCR5_W0W_MASK
)

	)

15414 
	#I2S_TCR5_WNW_MASK
 0x1F000000u

	)

15415 
	#I2S_TCR5_WNW_SHIFT
 24

	)

15416 
	#I2S_TCR5_WNW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_TCR5_WNW_SHIFT
))&
I2S_TCR5_WNW_MASK
)

	)

15418 
	#I2S_TDR_TDR_MASK
 0xFFFFFFFFu

	)

15419 
	#I2S_TDR_TDR_SHIFT
 0

	)

15420 
	#I2S_TDR_TDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_TDR_TDR_SHIFT
))&
I2S_TDR_TDR_MASK
)

	)

15422 
	#I2S_TFR_RFP_MASK
 0x3Fu

	)

15423 
	#I2S_TFR_RFP_SHIFT
 0

	)

15424 
	#I2S_TFR_RFP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_TFR_RFP_SHIFT
))&
I2S_TFR_RFP_MASK
)

	)

15425 
	#I2S_TFR_WFP_MASK
 0x3F0000u

	)

15426 
	#I2S_TFR_WFP_SHIFT
 16

	)

15427 
	#I2S_TFR_WFP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_TFR_WFP_SHIFT
))&
I2S_TFR_WFP_MASK
)

	)

15429 
	#I2S_TMR_TWM_MASK
 0xFFFFFFFFu

	)

15430 
	#I2S_TMR_TWM_SHIFT
 0

	)

15431 
	#I2S_TMR_TWM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_TMR_TWM_SHIFT
))&
I2S_TMR_TWM_MASK
)

	)

15433 
	#I2S_RCSR_FRDE_MASK
 0x1u

	)

15434 
	#I2S_RCSR_FRDE_SHIFT
 0

	)

15435 
	#I2S_RCSR_FWDE_MASK
 0x2u

	)

15436 
	#I2S_RCSR_FWDE_SHIFT
 1

	)

15437 
	#I2S_RCSR_FRIE_MASK
 0x100u

	)

15438 
	#I2S_RCSR_FRIE_SHIFT
 8

	)

15439 
	#I2S_RCSR_FWIE_MASK
 0x200u

	)

15440 
	#I2S_RCSR_FWIE_SHIFT
 9

	)

15441 
	#I2S_RCSR_FEIE_MASK
 0x400u

	)

15442 
	#I2S_RCSR_FEIE_SHIFT
 10

	)

15443 
	#I2S_RCSR_SEIE_MASK
 0x800u

	)

15444 
	#I2S_RCSR_SEIE_SHIFT
 11

	)

15445 
	#I2S_RCSR_WSIE_MASK
 0x1000u

	)

15446 
	#I2S_RCSR_WSIE_SHIFT
 12

	)

15447 
	#I2S_RCSR_FRF_MASK
 0x10000u

	)

15448 
	#I2S_RCSR_FRF_SHIFT
 16

	)

15449 
	#I2S_RCSR_FWF_MASK
 0x20000u

	)

15450 
	#I2S_RCSR_FWF_SHIFT
 17

	)

15451 
	#I2S_RCSR_FEF_MASK
 0x40000u

	)

15452 
	#I2S_RCSR_FEF_SHIFT
 18

	)

15453 
	#I2S_RCSR_SEF_MASK
 0x80000u

	)

15454 
	#I2S_RCSR_SEF_SHIFT
 19

	)

15455 
	#I2S_RCSR_WSF_MASK
 0x100000u

	)

15456 
	#I2S_RCSR_WSF_SHIFT
 20

	)

15457 
	#I2S_RCSR_SR_MASK
 0x1000000u

	)

15458 
	#I2S_RCSR_SR_SHIFT
 24

	)

15459 
	#I2S_RCSR_FR_MASK
 0x2000000u

	)

15460 
	#I2S_RCSR_FR_SHIFT
 25

	)

15461 
	#I2S_RCSR_BCE_MASK
 0x10000000u

	)

15462 
	#I2S_RCSR_BCE_SHIFT
 28

	)

15463 
	#I2S_RCSR_DBGE_MASK
 0x20000000u

	)

15464 
	#I2S_RCSR_DBGE_SHIFT
 29

	)

15465 
	#I2S_RCSR_STOPE_MASK
 0x40000000u

	)

15466 
	#I2S_RCSR_STOPE_SHIFT
 30

	)

15467 
	#I2S_RCSR_RE_MASK
 0x80000000u

	)

15468 
	#I2S_RCSR_RE_SHIFT
 31

	)

15470 
	#I2S_RCR1_RFW_MASK
 0x1Fu

	)

15471 
	#I2S_RCR1_RFW_SHIFT
 0

	)

15472 
	#I2S_RCR1_RFW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_RCR1_RFW_SHIFT
))&
I2S_RCR1_RFW_MASK
)

	)

15474 
	#I2S_RCR2_DIV_MASK
 0xFFu

	)

15475 
	#I2S_RCR2_DIV_SHIFT
 0

	)

15476 
	#I2S_RCR2_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_RCR2_DIV_SHIFT
))&
I2S_RCR2_DIV_MASK
)

	)

15477 
	#I2S_RCR2_BCD_MASK
 0x1000000u

	)

15478 
	#I2S_RCR2_BCD_SHIFT
 24

	)

15479 
	#I2S_RCR2_BCP_MASK
 0x2000000u

	)

15480 
	#I2S_RCR2_BCP_SHIFT
 25

	)

15481 
	#I2S_RCR2_MSEL_MASK
 0xC000000u

	)

15482 
	#I2S_RCR2_MSEL_SHIFT
 26

	)

15483 
	#I2S_RCR2_MSEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_RCR2_MSEL_SHIFT
))&
I2S_RCR2_MSEL_MASK
)

	)

15484 
	#I2S_RCR2_BCI_MASK
 0x10000000u

	)

15485 
	#I2S_RCR2_BCI_SHIFT
 28

	)

15486 
	#I2S_RCR2_BCS_MASK
 0x20000000u

	)

15487 
	#I2S_RCR2_BCS_SHIFT
 29

	)

15488 
	#I2S_RCR2_SYNC_MASK
 0xC0000000u

	)

15489 
	#I2S_RCR2_SYNC_SHIFT
 30

	)

15490 
	#I2S_RCR2_SYNC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_RCR2_SYNC_SHIFT
))&
I2S_RCR2_SYNC_MASK
)

	)

15492 
	#I2S_RCR3_WDFL_MASK
 0x1Fu

	)

15493 
	#I2S_RCR3_WDFL_SHIFT
 0

	)

15494 
	#I2S_RCR3_WDFL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_RCR3_WDFL_SHIFT
))&
I2S_RCR3_WDFL_MASK
)

	)

15495 
	#I2S_RCR3_RCE_MASK
 0x10000u

	)

15496 
	#I2S_RCR3_RCE_SHIFT
 16

	)

15498 
	#I2S_RCR4_FSD_MASK
 0x1u

	)

15499 
	#I2S_RCR4_FSD_SHIFT
 0

	)

15500 
	#I2S_RCR4_FSP_MASK
 0x2u

	)

15501 
	#I2S_RCR4_FSP_SHIFT
 1

	)

15502 
	#I2S_RCR4_FSE_MASK
 0x8u

	)

15503 
	#I2S_RCR4_FSE_SHIFT
 3

	)

15504 
	#I2S_RCR4_MF_MASK
 0x10u

	)

15505 
	#I2S_RCR4_MF_SHIFT
 4

	)

15506 
	#I2S_RCR4_SYWD_MASK
 0x1F00u

	)

15507 
	#I2S_RCR4_SYWD_SHIFT
 8

	)

15508 
	#I2S_RCR4_SYWD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_RCR4_SYWD_SHIFT
))&
I2S_RCR4_SYWD_MASK
)

	)

15509 
	#I2S_RCR4_FRSZ_MASK
 0x1F0000u

	)

15510 
	#I2S_RCR4_FRSZ_SHIFT
 16

	)

15511 
	#I2S_RCR4_FRSZ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_RCR4_FRSZ_SHIFT
))&
I2S_RCR4_FRSZ_MASK
)

	)

15513 
	#I2S_RCR5_FBT_MASK
 0x1F00u

	)

15514 
	#I2S_RCR5_FBT_SHIFT
 8

	)

15515 
	#I2S_RCR5_FBT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_RCR5_FBT_SHIFT
))&
I2S_RCR5_FBT_MASK
)

	)

15516 
	#I2S_RCR5_W0W_MASK
 0x1F0000u

	)

15517 
	#I2S_RCR5_W0W_SHIFT
 16

	)

15518 
	#I2S_RCR5_W0W
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_RCR5_W0W_SHIFT
))&
I2S_RCR5_W0W_MASK
)

	)

15519 
	#I2S_RCR5_WNW_MASK
 0x1F000000u

	)

15520 
	#I2S_RCR5_WNW_SHIFT
 24

	)

15521 
	#I2S_RCR5_WNW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_RCR5_WNW_SHIFT
))&
I2S_RCR5_WNW_MASK
)

	)

15523 
	#I2S_RDR_RDR_MASK
 0xFFFFFFFFu

	)

15524 
	#I2S_RDR_RDR_SHIFT
 0

	)

15525 
	#I2S_RDR_RDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_RDR_RDR_SHIFT
))&
I2S_RDR_RDR_MASK
)

	)

15527 
	#I2S_RFR_RFP_MASK
 0x3Fu

	)

15528 
	#I2S_RFR_RFP_SHIFT
 0

	)

15529 
	#I2S_RFR_RFP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_RFR_RFP_SHIFT
))&
I2S_RFR_RFP_MASK
)

	)

15530 
	#I2S_RFR_WFP_MASK
 0x3F0000u

	)

15531 
	#I2S_RFR_WFP_SHIFT
 16

	)

15532 
	#I2S_RFR_WFP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_RFR_WFP_SHIFT
))&
I2S_RFR_WFP_MASK
)

	)

15534 
	#I2S_RMR_RWM_MASK
 0xFFFFFFFFu

	)

15535 
	#I2S_RMR_RWM_SHIFT
 0

	)

15536 
	#I2S_RMR_RWM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
I2S_RMR_RWM_SHIFT
))&
I2S_RMR_RWM_MASK
)

	)

15544 
	#I2S1_BASE
 (0x421D4000u)

	)

15546 
	#I2S1
 ((
I2S_Ty≥
 *)
I2S1_BASE
)

	)

15547 
	#I2S1_BASE_PTR
 (
I2S1
)

	)

15549 
	#I2S2_BASE
 (0x421DC000u)

	)

15551 
	#I2S2
 ((
I2S_Ty≥
 *)
I2S2_BASE
)

	)

15552 
	#I2S2_BASE_PTR
 (
I2S2
)

	)

15554 
	#I2S_BASE_ADDRS
 { 
I2S1_BASE
, 
I2S2_BASE
 }

	)

15556 
	#I2S_BASE_PTRS
 { 
I2S1
, 
I2S2
 }

	)

15558 
	#SAI_IRQS
 { 
SAI1_IRQn
, 
SAI2_IRQn
 }

	)

15571 
	#I2S1_TCSR
 
	`I2S_TCSR_REG
(
I2S1_BASE_PTR
)

	)

15572 
	#I2S1_TCR1
 
	`I2S_TCR1_REG
(
I2S1_BASE_PTR
)

	)

15573 
	#I2S1_TCR2
 
	`I2S_TCR2_REG
(
I2S1_BASE_PTR
)

	)

15574 
	#I2S1_TCR3
 
	`I2S_TCR3_REG
(
I2S1_BASE_PTR
)

	)

15575 
	#I2S1_TCR4
 
	`I2S_TCR4_REG
(
I2S1_BASE_PTR
)

	)

15576 
	#I2S1_TCR5
 
	`I2S_TCR5_REG
(
I2S1_BASE_PTR
)

	)

15577 
	#I2S1_TDR0
 
	`I2S_TDR_REG
(
I2S1_BASE_PTR
,0)

	)

15578 
	#I2S1_TFR0
 
	`I2S_TFR_REG
(
I2S1_BASE_PTR
,0)

	)

15579 
	#I2S1_TMR
 
	`I2S_TMR_REG
(
I2S1_BASE_PTR
)

	)

15580 
	#I2S1_RCSR
 
	`I2S_RCSR_REG
(
I2S1_BASE_PTR
)

	)

15581 
	#I2S1_RCR1
 
	`I2S_RCR1_REG
(
I2S1_BASE_PTR
)

	)

15582 
	#I2S1_RCR2
 
	`I2S_RCR2_REG
(
I2S1_BASE_PTR
)

	)

15583 
	#I2S1_RCR3
 
	`I2S_RCR3_REG
(
I2S1_BASE_PTR
)

	)

15584 
	#I2S1_RCR4
 
	`I2S_RCR4_REG
(
I2S1_BASE_PTR
)

	)

15585 
	#I2S1_RCR5
 
	`I2S_RCR5_REG
(
I2S1_BASE_PTR
)

	)

15586 
	#I2S1_RDR0
 
	`I2S_RDR_REG
(
I2S1_BASE_PTR
,0)

	)

15587 
	#I2S1_RFR0
 
	`I2S_RFR_REG
(
I2S1_BASE_PTR
,0)

	)

15588 
	#I2S1_RMR
 
	`I2S_RMR_REG
(
I2S1_BASE_PTR
)

	)

15590 
	#I2S2_TCSR
 
	`I2S_TCSR_REG
(
I2S2_BASE_PTR
)

	)

15591 
	#I2S2_TCR1
 
	`I2S_TCR1_REG
(
I2S2_BASE_PTR
)

	)

15592 
	#I2S2_TCR2
 
	`I2S_TCR2_REG
(
I2S2_BASE_PTR
)

	)

15593 
	#I2S2_TCR3
 
	`I2S_TCR3_REG
(
I2S2_BASE_PTR
)

	)

15594 
	#I2S2_TCR4
 
	`I2S_TCR4_REG
(
I2S2_BASE_PTR
)

	)

15595 
	#I2S2_TCR5
 
	`I2S_TCR5_REG
(
I2S2_BASE_PTR
)

	)

15596 
	#I2S2_TDR0
 
	`I2S_TDR_REG
(
I2S2_BASE_PTR
,0)

	)

15597 
	#I2S2_TFR0
 
	`I2S_TFR_REG
(
I2S2_BASE_PTR
,0)

	)

15598 
	#I2S2_TMR
 
	`I2S_TMR_REG
(
I2S2_BASE_PTR
)

	)

15599 
	#I2S2_RCSR
 
	`I2S_RCSR_REG
(
I2S2_BASE_PTR
)

	)

15600 
	#I2S2_RCR1
 
	`I2S_RCR1_REG
(
I2S2_BASE_PTR
)

	)

15601 
	#I2S2_RCR2
 
	`I2S_RCR2_REG
(
I2S2_BASE_PTR
)

	)

15602 
	#I2S2_RCR3
 
	`I2S_RCR3_REG
(
I2S2_BASE_PTR
)

	)

15603 
	#I2S2_RCR4
 
	`I2S_RCR4_REG
(
I2S2_BASE_PTR
)

	)

15604 
	#I2S2_RCR5
 
	`I2S_RCR5_REG
(
I2S2_BASE_PTR
)

	)

15605 
	#I2S2_RDR0
 
	`I2S_RDR_REG
(
I2S2_BASE_PTR
,0)

	)

15606 
	#I2S2_RFR0
 
	`I2S_RFR_REG
(
I2S2_BASE_PTR
,0)

	)

15607 
	#I2S2_RMR
 
	`I2S_RMR_REG
(
I2S2_BASE_PTR
)

	)

15609 
	#I2S1_TDR
(
ödex
Ë
	`I2S_TDR_REG
(
I2S1_BASE_PTR
,ödex)

	)

15610 
	#I2S2_TDR
(
ödex
Ë
	`I2S_TDR_REG
(
I2S2_BASE_PTR
,ödex)

	)

15611 
	#I2S1_TFR
(
ödex
Ë
	`I2S_TFR_REG
(
I2S1_BASE_PTR
,ödex)

	)

15612 
	#I2S2_TFR
(
ödex
Ë
	`I2S_TFR_REG
(
I2S2_BASE_PTR
,ödex)

	)

15613 
	#I2S1_RDR
(
ödex
Ë
	`I2S_RDR_REG
(
I2S1_BASE_PTR
,ödex)

	)

15614 
	#I2S2_RDR
(
ödex
Ë
	`I2S_RDR_REG
(
I2S2_BASE_PTR
,ödex)

	)

15615 
	#I2S1_RFR
(
ödex
Ë
	`I2S_RFR_REG
(
I2S1_BASE_PTR
,ödex)

	)

15616 
	#I2S2_RFR
(
ödex
Ë
	`I2S_RFR_REG
(
I2S2_BASE_PTR
,ödex)

	)

15637 
uöt8_t
 
	mRESERVED_0
[20];

15638 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_GPIO1_IO00
;

15639 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_GPIO1_IO01
;

15640 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_GPIO1_IO02
;

15641 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_GPIO1_IO03
;

15642 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_GPIO1_IO04
;

15643 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_GPIO1_IO05
;

15644 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_GPIO1_IO06
;

15645 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_GPIO1_IO07
;

15646 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_GPIO1_IO08
;

15647 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_GPIO1_IO09
;

15648 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_GPIO1_IO10
;

15649 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_GPIO1_IO11
;

15650 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_GPIO1_IO12
;

15651 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_GPIO1_IO13
;

15652 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_CSI_DATA00
;

15653 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_CSI_DATA01
;

15654 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_CSI_DATA02
;

15655 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_CSI_DATA03
;

15656 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_CSI_DATA04
;

15657 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_CSI_DATA05
;

15658 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_CSI_DATA06
;

15659 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_CSI_DATA07
;

15660 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_CSI_HSYNC
;

15661 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_CSI_MCLK
;

15662 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_CSI_PIXCLK
;

15663 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_CSI_VSYNC
;

15664 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_ENET1_COL
;

15665 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_ENET1_CRS
;

15666 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_ENET1_MDC
;

15667 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_ENET1_MDIO
;

15668 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_ENET1_RX_CLK
;

15669 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_ENET1_TX_CLK
;

15670 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_ENET2_COL
;

15671 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_ENET2_CRS
;

15672 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_ENET2_RX_CLK
;

15673 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_ENET2_TX_CLK
;

15674 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_KEY_COL0
;

15675 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_KEY_COL1
;

15676 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_KEY_COL2
;

15677 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_KEY_COL3
;

15678 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_KEY_COL4
;

15679 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_KEY_ROW0
;

15680 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_KEY_ROW1
;

15681 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_KEY_ROW2
;

15682 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_KEY_ROW3
;

15683 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_KEY_ROW4
;

15684 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_CLK
;

15685 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA00
;

15686 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA01
;

15687 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA02
;

15688 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA03
;

15689 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA04
;

15690 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA05
;

15691 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA06
;

15692 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA07
;

15693 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA08
;

15694 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA09
;

15695 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA10
;

15696 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA11
;

15697 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA12
;

15698 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA13
;

15699 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA14
;

15700 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA15
;

15701 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA16
;

15702 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA17
;

15703 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA18
;

15704 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA19
;

15705 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA20
;

15706 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA21
;

15707 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA22
;

15708 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_DATA23
;

15709 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_ENABLE
;

15710 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_HSYNC
;

15711 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_RESET
;

15712 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_LCD1_VSYNC
;

15713 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_NAND_ALE
;

15714 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_NAND_CE0_B
;

15715 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_NAND_CE1_B
;

15716 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_NAND_CLE
;

15717 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_NAND_DATA00
;

15718 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_NAND_DATA01
;

15719 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_NAND_DATA02
;

15720 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_NAND_DATA03
;

15721 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_NAND_DATA04
;

15722 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_NAND_DATA05
;

15723 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_NAND_DATA06
;

15724 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_NAND_DATA07
;

15725 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_NAND_RE_B
;

15726 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_NAND_READY_B
;

15727 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_NAND_WE_B
;

15728 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_NAND_WP_B
;

15729 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_QSPI1A_DATA0
;

15730 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_QSPI1A_DATA1
;

15731 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_QSPI1A_DATA2
;

15732 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_QSPI1A_DATA3
;

15733 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_QSPI1A_DQS
;

15734 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_QSPI1A_SCLK
;

15735 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_QSPI1A_SS0_B
;

15736 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_QSPI1A_SS1_B
;

15737 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_QSPI1B_DATA0
;

15738 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_QSPI1B_DATA1
;

15739 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_QSPI1B_DATA2
;

15740 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_QSPI1B_DATA3
;

15741 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_QSPI1B_DQS
;

15742 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_QSPI1B_SCLK
;

15743 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_QSPI1B_SS0_B
;

15744 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_QSPI1B_SS1_B
;

15745 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII1_RD0
;

15746 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII1_RD1
;

15747 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII1_RD2
;

15748 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII1_RD3
;

15749 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII1_RX_CTL
;

15750 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII1_RXC
;

15751 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII1_TD0
;

15752 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII1_TD1
;

15753 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII1_TD2
;

15754 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII1_TD3
;

15755 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII1_TX_CTL
;

15756 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII1_TXC
;

15757 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII2_RD0
;

15758 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII2_RD1
;

15759 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII2_RD2
;

15760 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII2_RD3
;

15761 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII2_RX_CTL
;

15762 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII2_RXC
;

15763 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII2_TD0
;

15764 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII2_TD1
;

15765 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII2_TD2
;

15766 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII2_TD3
;

15767 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII2_TX_CTL
;

15768 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_RGMII2_TXC
;

15769 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD1_CLK
;

15770 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD1_CMD
;

15771 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD1_DATA0
;

15772 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD1_DATA1
;

15773 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD1_DATA2
;

15774 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD1_DATA3
;

15775 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD2_CLK
;

15776 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD2_CMD
;

15777 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD2_DATA0
;

15778 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD2_DATA1
;

15779 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD2_DATA2
;

15780 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD2_DATA3
;

15781 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD3_CLK
;

15782 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD3_CMD
;

15783 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD3_DATA0
;

15784 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD3_DATA1
;

15785 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD3_DATA2
;

15786 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD3_DATA3
;

15787 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD3_DATA4
;

15788 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD3_DATA5
;

15789 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD3_DATA6
;

15790 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD3_DATA7
;

15791 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD4_CLK
;

15792 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD4_CMD
;

15793 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD4_DATA0
;

15794 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD4_DATA1
;

15795 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD4_DATA2
;

15796 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD4_DATA3
;

15797 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD4_DATA4
;

15798 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD4_DATA5
;

15799 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD4_DATA6
;

15800 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD4_DATA7
;

15801 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_SD4_RESET_B
;

15802 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_USB_H_DATA
;

15803 
__IO
 
uöt32_t
 
	mSW_MUX_CTL_PAD_USB_H_STROBE
;

15804 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_ADDR00
;

15805 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_ADDR01
;

15806 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_ADDR02
;

15807 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_ADDR03
;

15808 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_ADDR04
;

15809 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_ADDR05
;

15810 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_ADDR06
;

15811 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_ADDR07
;

15812 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_ADDR08
;

15813 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_ADDR09
;

15814 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_ADDR10
;

15815 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_ADDR11
;

15816 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_ADDR12
;

15817 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_ADDR13
;

15818 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_ADDR14
;

15819 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_ADDR15
;

15820 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_DQM0
;

15821 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_DQM1
;

15822 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_DQM2
;

15823 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_DQM3
;

15824 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_RAS_B
;

15825 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_CAS_B
;

15826 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_CS0_B
;

15827 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_CS1_B
;

15828 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_SDWE_B
;

15829 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_ODT0
;

15830 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_ODT1
;

15831 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_SDBA0
;

15832 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_SDBA1
;

15833 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_SDBA2
;

15834 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_SDCKE0
;

15835 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_SDCKE1
;

15836 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_SDCLK0_P
;

15837 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_SDQS0_P
;

15838 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_SDQS1_P
;

15839 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_SDQS2_P
;

15840 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_SDQS3_P
;

15841 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_DRAM_RESET
;

15842 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_JTAG_MOD
;

15843 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_JTAG_TCK
;

15844 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_JTAG_TDI
;

15845 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_JTAG_TDO
;

15846 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_JTAG_TMS
;

15847 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_JTAG_TRST_B
;

15848 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_GPIO1_IO00
;

15849 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_GPIO1_IO01
;

15850 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_GPIO1_IO02
;

15851 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_GPIO1_IO03
;

15852 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_GPIO1_IO04
;

15853 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_GPIO1_IO05
;

15854 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_GPIO1_IO06
;

15855 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_GPIO1_IO07
;

15856 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_GPIO1_IO08
;

15857 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_GPIO1_IO09
;

15858 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_GPIO1_IO10
;

15859 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_GPIO1_IO11
;

15860 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_GPIO1_IO12
;

15861 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_GPIO1_IO13
;

15862 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_CSI_DATA00
;

15863 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_CSI_DATA01
;

15864 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_CSI_DATA02
;

15865 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_CSI_DATA03
;

15866 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_CSI_DATA04
;

15867 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_CSI_DATA05
;

15868 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_CSI_DATA06
;

15869 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_CSI_DATA07
;

15870 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_CSI_HSYNC
;

15871 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_CSI_MCLK
;

15872 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_CSI_PIXCLK
;

15873 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_CSI_VSYNC
;

15874 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_ENET1_COL
;

15875 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_ENET1_CRS
;

15876 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_ENET1_MDC
;

15877 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_ENET1_MDIO
;

15878 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_ENET1_RX_CLK
;

15879 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_ENET1_TX_CLK
;

15880 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_ENET2_COL
;

15881 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_ENET2_CRS
;

15882 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_ENET2_RX_CLK
;

15883 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_ENET2_TX_CLK
;

15884 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_KEY_COL0
;

15885 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_KEY_COL1
;

15886 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_KEY_COL2
;

15887 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_KEY_COL3
;

15888 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_KEY_COL4
;

15889 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_KEY_ROW0
;

15890 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_KEY_ROW1
;

15891 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_KEY_ROW2
;

15892 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_KEY_ROW3
;

15893 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_KEY_ROW4
;

15894 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_CLK
;

15895 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA00
;

15896 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA01
;

15897 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA02
;

15898 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA03
;

15899 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA04
;

15900 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA05
;

15901 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA06
;

15902 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA07
;

15903 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA08
;

15904 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA09
;

15905 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA10
;

15906 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA11
;

15907 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA12
;

15908 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA13
;

15909 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA14
;

15910 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA15
;

15911 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA16
;

15912 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA17
;

15913 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA18
;

15914 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA19
;

15915 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA20
;

15916 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA21
;

15917 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA22
;

15918 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_DATA23
;

15919 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_ENABLE
;

15920 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_HSYNC
;

15921 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_RESET
;

15922 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_LCD1_VSYNC
;

15923 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_NAND_ALE
;

15924 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_NAND_CE0_B
;

15925 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_NAND_CE1_B
;

15926 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_NAND_CLE
;

15927 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_NAND_DATA00
;

15928 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_NAND_DATA01
;

15929 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_NAND_DATA02
;

15930 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_NAND_DATA03
;

15931 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_NAND_DATA04
;

15932 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_NAND_DATA05
;

15933 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_NAND_DATA06
;

15934 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_NAND_DATA07
;

15935 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_NAND_RE_B
;

15936 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_NAND_READY_B
;

15937 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_NAND_WE_B
;

15938 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_NAND_WP_B
;

15939 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_QSPI1A_DATA0
;

15940 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_QSPI1A_DATA1
;

15941 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_QSPI1A_DATA2
;

15942 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_QSPI1A_DATA3
;

15943 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_QSPI1A_DQS
;

15944 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_QSPI1A_SCLK
;

15945 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_QSPI1A_SS0_B
;

15946 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_QSPI1A_SS1_B
;

15947 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_QSPI1B_DATA0
;

15948 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_QSPI1B_DATA1
;

15949 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_QSPI1B_DATA2
;

15950 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_QSPI1B_DATA3
;

15951 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_QSPI1B_DQS
;

15952 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_QSPI1B_SCLK
;

15953 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_QSPI1B_SS0_B
;

15954 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_QSPI1B_SS1_B
;

15955 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII1_RD0
;

15956 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII1_RD1
;

15957 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII1_RD2
;

15958 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII1_RD3
;

15959 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII1_RX_CTL
;

15960 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII1_RXC
;

15961 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII1_TD0
;

15962 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII1_TD1
;

15963 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII1_TD2
;

15964 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII1_TD3
;

15965 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII1_TX_CTL
;

15966 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII1_TXC
;

15967 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII2_RD0
;

15968 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII2_RD1
;

15969 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII2_RD2
;

15970 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII2_RD3
;

15971 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII2_RX_CTL
;

15972 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII2_RXC
;

15973 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII2_TD0
;

15974 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII2_TD1
;

15975 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII2_TD2
;

15976 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII2_TD3
;

15977 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII2_TX_CTL
;

15978 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_RGMII2_TXC
;

15979 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD1_CLK
;

15980 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD1_CMD
;

15981 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD1_DATA0
;

15982 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD1_DATA1
;

15983 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD1_DATA2
;

15984 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD1_DATA3
;

15985 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD2_CLK
;

15986 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD2_CMD
;

15987 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD2_DATA0
;

15988 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD2_DATA1
;

15989 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD2_DATA2
;

15990 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD2_DATA3
;

15991 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD3_CLK
;

15992 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD3_CMD
;

15993 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD3_DATA0
;

15994 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD3_DATA1
;

15995 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD3_DATA2
;

15996 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD3_DATA3
;

15997 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD3_DATA4
;

15998 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD3_DATA5
;

15999 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD3_DATA6
;

16000 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD3_DATA7
;

16001 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD4_CLK
;

16002 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD4_CMD
;

16003 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD4_DATA0
;

16004 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD4_DATA1
;

16005 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD4_DATA2
;

16006 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD4_DATA3
;

16007 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD4_DATA4
;

16008 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD4_DATA5
;

16009 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD4_DATA6
;

16010 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD4_DATA7
;

16011 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_SD4_RESET_B
;

16012 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_USB_H_DATA
;

16013 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_PAD_USB_H_STROBE
;

16014 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_GRP_ADDDS
;

16015 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_GRP_DDRMODE_CTL
;

16016 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_GRP_DDRPKE
;

16017 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_GRP_DDRPK
;

16018 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_GRP_DDRHYS
;

16019 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_GRP_DDRMODE
;

16020 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_GRP_B0DS
;

16021 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_GRP_B1DS
;

16022 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_GRP_CTLDS
;

16023 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_GRP_DDR_TYPE
;

16024 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_GRP_B2DS
;

16025 
__IO
 
uöt32_t
 
	mSW_PAD_CTL_GRP_B3DS
;

16026 
__IO
 
uöt32_t
 
	mANATOP_USB_OTG_ID_SELECT_INPUT
;

16027 
__IO
 
uöt32_t
 
	mANATOP_USB_UH1_ID_SELECT_INPUT
;

16028 
__IO
 
uöt32_t
 
	mAUDMUX_P3_INPUT_DA_AMX_SELECT_INPUT
;

16029 
__IO
 
uöt32_t
 
	mAUDMUX_P3_INPUT_DB_AMX_SELECT_INPUT
;

16030 
__IO
 
uöt32_t
 
	mAUDMUX_P3_INPUT_RXCLK_AMX_SELECT_INPUT
;

16031 
__IO
 
uöt32_t
 
	mAUDMUX_P3_INPUT_RXFS_AMX_SELECT_INPUT
;

16032 
__IO
 
uöt32_t
 
	mAUDMUX_P3_INPUT_TXCLK_AMX_SELECT_INPUT
;

16033 
__IO
 
uöt32_t
 
	mAUDMUX_P3_INPUT_TXFS_AMX_SELECT_INPUT
;

16034 
__IO
 
uöt32_t
 
	mAUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT
;

16035 
__IO
 
uöt32_t
 
	mAUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT
;

16036 
__IO
 
uöt32_t
 
	mAUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT
;

16037 
__IO
 
uöt32_t
 
	mAUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT
;

16038 
__IO
 
uöt32_t
 
	mAUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT
;

16039 
__IO
 
uöt32_t
 
	mAUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT
;

16040 
__IO
 
uöt32_t
 
	mAUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT
;

16041 
__IO
 
uöt32_t
 
	mAUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT
;

16042 
__IO
 
uöt32_t
 
	mAUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT
;

16043 
__IO
 
uöt32_t
 
	mAUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT
;

16044 
__IO
 
uöt32_t
 
	mAUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT
;

16045 
__IO
 
uöt32_t
 
	mAUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT
;

16046 
__IO
 
uöt32_t
 
	mAUDMUX_P6_INPUT_DA_AMX_SELECT_INPUT
;

16047 
__IO
 
uöt32_t
 
	mAUDMUX_P6_INPUT_DB_AMX_SELECT_INPUT
;

16048 
__IO
 
uöt32_t
 
	mAUDMUX_P6_INPUT_RXCLK_AMX_SELECT_INPUT
;

16049 
__IO
 
uöt32_t
 
	mAUDMUX_P6_INPUT_RXFS_AMX_SELECT_INPUT
;

16050 
__IO
 
uöt32_t
 
	mAUDMUX_P6_INPUT_TXCLK_AMX_SELECT_INPUT
;

16051 
__IO
 
uöt32_t
 
	mAUDMUX_P6_INPUT_TXFS_AMX_SELECT_INPUT
;

16052 
__IO
 
uöt32_t
 
	mCAN1_IPP_IND_CANRX_SELECT_INPUT
;

16053 
__IO
 
uöt32_t
 
	mCAN2_IPP_IND_CANRX_SELECT_INPUT
;

16054 
uöt8_t
 
	mRESERVED_1
[8];

16055 
__IO
 
uöt32_t
 
	mCCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT
;

16056 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_0
;

16057 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_1
;

16058 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_2
;

16059 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_3
;

16060 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_4
;

16061 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_5
;

16062 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_6
;

16063 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_7
;

16064 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_8
;

16065 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_9
;

16066 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_11
;

16067 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_12
;

16068 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_13
;

16069 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_14
;

16070 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_15
;

16071 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_16
;

16072 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_17
;

16073 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_18
;

16074 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_19
;

16075 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_20
;

16076 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_21
;

16077 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_22
;

16078 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_23
;

16079 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_D_SELECT_INPUT_10
;

16080 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_HSYNC_SELECT_INPUT
;

16081 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_PIXCLK_SELECT_INPUT
;

16082 
__IO
 
uöt32_t
 
	mCSI1_IPP_CSI_VSYNC_SELECT_INPUT
;

16083 
__IO
 
uöt32_t
 
	mCSI1_TVDECODER_IN_FIELD_SELECT_INPUT
;

16084 
__IO
 
uöt32_t
 
	mECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT
;

16085 
__IO
 
uöt32_t
 
	mECSPI1_IPP_IND_MISO_SELECT_INPUT
;

16086 
__IO
 
uöt32_t
 
	mECSPI1_IPP_IND_MOSI_SELECT_INPUT
;

16087 
__IO
 
uöt32_t
 
	mECSPI1_IPP_IND_SS_B_SELECT_INPUT_0
;

16088 
__IO
 
uöt32_t
 
	mECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT
;

16089 
__IO
 
uöt32_t
 
	mECSPI2_IPP_IND_MISO_SELECT_INPUT
;

16090 
__IO
 
uöt32_t
 
	mECSPI2_IPP_IND_MOSI_SELECT_INPUT
;

16091 
__IO
 
uöt32_t
 
	mECSPI2_IPP_IND_SS_B_SELECT_INPUT_0
;

16092 
__IO
 
uöt32_t
 
	mECSPI3_IPP_CSPI_CLK_IN_SELECT_INPUT
;

16093 
__IO
 
uöt32_t
 
	mECSPI3_IPP_IND_MISO_SELECT_INPUT
;

16094 
__IO
 
uöt32_t
 
	mECSPI3_IPP_IND_MOSI_SELECT_INPUT
;

16095 
__IO
 
uöt32_t
 
	mECSPI3_IPP_IND_SS_B_SELECT_INPUT_0
;

16096 
__IO
 
uöt32_t
 
	mECSPI4_IPP_CSPI_CLK_IN_SELECT_INPUT
;

16097 
__IO
 
uöt32_t
 
	mECSPI4_IPP_IND_MISO_SELECT_INPUT
;

16098 
__IO
 
uöt32_t
 
	mECSPI4_IPP_IND_MOSI_SELECT_INPUT
;

16099 
__IO
 
uöt32_t
 
	mECSPI4_IPP_IND_SS_B_SELECT_INPUT_0
;

16100 
__IO
 
uöt32_t
 
	mECSPI5_IPP_CSPI_CLK_IN_SELECT_INPUT
;

16101 
__IO
 
uöt32_t
 
	mECSPI5_IPP_IND_MISO_SELECT_INPUT
;

16102 
__IO
 
uöt32_t
 
	mECSPI5_IPP_IND_MOSI_SELECT_INPUT
;

16103 
__IO
 
uöt32_t
 
	mECSPI5_IPP_IND_SS_B_SELECT_INPUT_0
;

16104 
__IO
 
uöt32_t
 
	mENET1_IPG_CLK_RMII_SELECT_INPUT
;

16105 
__IO
 
uöt32_t
 
	mENET1_IPP_IND_MAC0_MDIO_SELECT_INPUT
;

16106 
__IO
 
uöt32_t
 
	mENET1_IPP_IND_MAC0_RXCLK_SELECT_INPUT
;

16107 
__IO
 
uöt32_t
 
	mENET2_IPG_CLK_RMII_SELECT_INPUT
;

16108 
__IO
 
uöt32_t
 
	mENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT
;

16109 
__IO
 
uöt32_t
 
	mENET2_IPP_IND_MAC0_RXCLK_SELECT_INPUT
;

16110 
__IO
 
uöt32_t
 
	mESAI_IPP_IND_FSR_SELECT_INPUT
;

16111 
__IO
 
uöt32_t
 
	mESAI_IPP_IND_FST_SELECT_INPUT
;

16112 
__IO
 
uöt32_t
 
	mESAI_IPP_IND_HCKR_SELECT_INPUT
;

16113 
__IO
 
uöt32_t
 
	mESAI_IPP_IND_HCKT_SELECT_INPUT
;

16114 
__IO
 
uöt32_t
 
	mESAI_IPP_IND_SCKR_SELECT_INPUT
;

16115 
__IO
 
uöt32_t
 
	mESAI_IPP_IND_SCKT_SELECT_INPUT
;

16116 
__IO
 
uöt32_t
 
	mESAI_IPP_IND_SDO0_SELECT_INPUT
;

16117 
__IO
 
uöt32_t
 
	mESAI_IPP_IND_SDO1_SELECT_INPUT
;

16118 
__IO
 
uöt32_t
 
	mESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT
;

16119 
__IO
 
uöt32_t
 
	mESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT
;

16120 
__IO
 
uöt32_t
 
	mESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT
;

16121 
__IO
 
uöt32_t
 
	mESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT
;

16122 
__IO
 
uöt32_t
 
	mI2C1_IPP_SCL_IN_SELECT_INPUT
;

16123 
__IO
 
uöt32_t
 
	mI2C1_IPP_SDA_IN_SELECT_INPUT
;

16124 
__IO
 
uöt32_t
 
	mI2C2_IPP_SCL_IN_SELECT_INPUT
;

16125 
__IO
 
uöt32_t
 
	mI2C2_IPP_SDA_IN_SELECT_INPUT
;

16126 
__IO
 
uöt32_t
 
	mI2C3_IPP_SCL_IN_SELECT_INPUT
;

16127 
__IO
 
uöt32_t
 
	mI2C3_IPP_SDA_IN_SELECT_INPUT
;

16128 
__IO
 
uöt32_t
 
	mI2C4_IPP_SCL_IN_SELECT_INPUT
;

16129 
__IO
 
uöt32_t
 
	mI2C4_IPP_SDA_IN_SELECT_INPUT
;

16130 
__IO
 
uöt32_t
 
	mKPP_IPP_IND_COL_SELECT_INPUT_5
;

16131 
__IO
 
uöt32_t
 
	mKPP_IPP_IND_COL_SELECT_INPUT_6
;

16132 
__IO
 
uöt32_t
 
	mKPP_IPP_IND_COL_SELECT_INPUT_7
;

16133 
__IO
 
uöt32_t
 
	mKPP_IPP_IND_ROW_SELECT_INPUT_5
;

16134 
__IO
 
uöt32_t
 
	mKPP_IPP_IND_ROW_SELECT_INPUT_6
;

16135 
__IO
 
uöt32_t
 
	mKPP_IPP_IND_ROW_SELECT_INPUT_7
;

16136 
__IO
 
uöt32_t
 
	mLCD1_BUSY_SELECT_INPUT
;

16137 
__IO
 
uöt32_t
 
	mLCD2_BUSY_SELECT_INPUT
;

16138 
__IO
 
uöt32_t
 
	mMLB_MLB_CLK_IN_SELECT_INPUT
;

16139 
__IO
 
uöt32_t
 
	mMLB_MLB_DATA_IN_SELECT_INPUT
;

16140 
__IO
 
uöt32_t
 
	mMLB_MLB_SIG_IN_SELECT_INPUT
;

16141 
__IO
 
uöt32_t
 
	mSAI1_IPP_IND_SAI_RXBCLK_SELECT_INPUT
;

16142 
__IO
 
uöt32_t
 
	mSAI1_IPP_IND_SAI_RXDATA_SELECT_INPUT_0
;

16143 
__IO
 
uöt32_t
 
	mSAI1_IPP_IND_SAI_RXSYNC_SELECT_INPUT
;

16144 
__IO
 
uöt32_t
 
	mSAI1_IPP_IND_SAI_TXBCLK_SELECT_INPUT
;

16145 
__IO
 
uöt32_t
 
	mSAI1_IPP_IND_SAI_TXSYNC_SELECT_INPUT
;

16146 
__IO
 
uöt32_t
 
	mSAI2_IPP_IND_SAI_RXBCLK_SELECT_INPUT
;

16147 
__IO
 
uöt32_t
 
	mSAI2_IPP_IND_SAI_RXDATA_SELECT_INPUT_0
;

16148 
__IO
 
uöt32_t
 
	mSAI2_IPP_IND_SAI_RXSYNC_SELECT_INPUT
;

16149 
__IO
 
uöt32_t
 
	mSAI2_IPP_IND_SAI_TXBCLK_SELECT_INPUT
;

16150 
__IO
 
uöt32_t
 
	mSAI2_IPP_IND_SAI_TXSYNC_SELECT_INPUT
;

16151 
__IO
 
uöt32_t
 
	mSDMA_EVENTS_SELECT_INPUT_14
;

16152 
__IO
 
uöt32_t
 
	mSDMA_EVENTS_SELECT_INPUT_15
;

16153 
__IO
 
uöt32_t
 
	mSPDIF_SPDIF_IN1_SELECT_INPUT
;

16154 
__IO
 
uöt32_t
 
	mSPDIF_TX_CLK2_SELECT_INPUT
;

16155 
__IO
 
uöt32_t
 
	mUART1_IPP_UART_RTS_B_SELECT_INPUT
;

16156 
__IO
 
uöt32_t
 
	mUART1_IPP_UART_RXD_MUX_SELECT_INPUT
;

16157 
__IO
 
uöt32_t
 
	mUART2_IPP_UART_RTS_B_SELECT_INPUT
;

16158 
__IO
 
uöt32_t
 
	mUART2_IPP_UART_RXD_MUX_SELECT_INPUT
;

16159 
__IO
 
uöt32_t
 
	mUART3_IPP_UART_RTS_B_SELECT_INPUT
;

16160 
__IO
 
uöt32_t
 
	mUART3_IPP_UART_RXD_MUX_SELECT_INPUT
;

16161 
__IO
 
uöt32_t
 
	mUART4_IPP_UART_RTS_B_SELECT_INPUT
;

16162 
__IO
 
uöt32_t
 
	mUART4_IPP_UART_RXD_MUX_SELECT_INPUT
;

16163 
__IO
 
uöt32_t
 
	mUART5_IPP_UART_RTS_B_SELECT_INPUT
;

16164 
__IO
 
uöt32_t
 
	mUART5_IPP_UART_RXD_MUX_SELECT_INPUT
;

16165 
__IO
 
uöt32_t
 
	mUART6_IPP_UART_RTS_B_SELECT_INPUT
;

16166 
__IO
 
uöt32_t
 
	mUART6_IPP_UART_RXD_MUX_SELECT_INPUT
;

16167 
__IO
 
uöt32_t
 
	mUSB_IPP_IND_OTG2_OC_SELECT_INPUT
;

16168 
__IO
 
uöt32_t
 
	mUSB_IPP_IND_OTG_OC_SELECT_INPUT
;

16169 
__IO
 
uöt32_t
 
	mUSDHC1_IPP_CARD_DET_SELECT_INPUT
;

16170 
__IO
 
uöt32_t
 
	mUSDHC1_IPP_WP_ON_SELECT_INPUT
;

16171 
__IO
 
uöt32_t
 
	mUSDHC2_IPP_CARD_DET_SELECT_INPUT
;

16172 
__IO
 
uöt32_t
 
	mUSDHC2_IPP_WP_ON_SELECT_INPUT
;

16173 
__IO
 
uöt32_t
 
	mUSDHC4_IPP_CARD_DET_SELECT_INPUT
;

16174 
__IO
 
uöt32_t
 
	mUSDHC4_IPP_WP_ON_SELECT_INPUT
;

16175 } 
	tIOMUXC_Ty≥
, *
	tIOMUXC_MemM≠På
;

16187 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO00_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_GPIO1_IO00
)

	)

16188 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO01_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_GPIO1_IO01
)

	)

16189 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO02_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_GPIO1_IO02
)

	)

16190 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_GPIO1_IO03
)

	)

16191 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO04_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_GPIO1_IO04
)

	)

16192 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO05_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_GPIO1_IO05
)

	)

16193 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO06_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_GPIO1_IO06
)

	)

16194 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO07_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_GPIO1_IO07
)

	)

16195 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO08_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_GPIO1_IO08
)

	)

16196 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO09_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_GPIO1_IO09
)

	)

16197 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO10_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_GPIO1_IO10
)

	)

16198 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO11_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_GPIO1_IO11
)

	)

16199 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO12_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_GPIO1_IO12
)

	)

16200 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO13_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_GPIO1_IO13
)

	)

16201 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA00_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_CSI_DATA00
)

	)

16202 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA01_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_CSI_DATA01
)

	)

16203 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA02_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_CSI_DATA02
)

	)

16204 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA03_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_CSI_DATA03
)

	)

16205 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA04_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_CSI_DATA04
)

	)

16206 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA05_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_CSI_DATA05
)

	)

16207 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA06_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_CSI_DATA06
)

	)

16208 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA07_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_CSI_DATA07
)

	)

16209 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_HSYNC_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_CSI_HSYNC
)

	)

16210 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_MCLK_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_CSI_MCLK
)

	)

16211 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_PIXCLK_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_CSI_PIXCLK
)

	)

16212 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_VSYNC_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_CSI_VSYNC
)

	)

16213 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_COL_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_ENET1_COL
)

	)

16214 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_CRS_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_ENET1_CRS
)

	)

16215 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_MDC_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_ENET1_MDC
)

	)

16216 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_MDIO_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_ENET1_MDIO
)

	)

16217 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_RX_CLK_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_ENET1_RX_CLK
)

	)

16218 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_TX_CLK_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_ENET1_TX_CLK
)

	)

16219 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_COL_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_ENET2_COL
)

	)

16220 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_CRS_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_ENET2_CRS
)

	)

16221 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_RX_CLK_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_ENET2_RX_CLK
)

	)

16222 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_TX_CLK_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_ENET2_TX_CLK
)

	)

16223 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_KEY_COL0
)

	)

16224 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_KEY_COL1
)

	)

16225 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_KEY_COL2
)

	)

16226 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_KEY_COL3
)

	)

16227 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_KEY_COL4
)

	)

16228 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_KEY_ROW0
)

	)

16229 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_KEY_ROW1
)

	)

16230 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_KEY_ROW2
)

	)

16231 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_KEY_ROW3
)

	)

16232 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_KEY_ROW4
)

	)

16233 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_CLK_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_CLK
)

	)

16234 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA00_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA00
)

	)

16235 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA01_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA01
)

	)

16236 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA02_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA02
)

	)

16237 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA03_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA03
)

	)

16238 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA04_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA04
)

	)

16239 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA05_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA05
)

	)

16240 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA06_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA06
)

	)

16241 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA07_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA07
)

	)

16242 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA08_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA08
)

	)

16243 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA09_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA09
)

	)

16244 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA10_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA10
)

	)

16245 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA11_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA11
)

	)

16246 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA12_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA12
)

	)

16247 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA13_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA13
)

	)

16248 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA14_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA14
)

	)

16249 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA15_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA15
)

	)

16250 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA16_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA16
)

	)

16251 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA17_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA17
)

	)

16252 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA18_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA18
)

	)

16253 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA19_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA19
)

	)

16254 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA20_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA20
)

	)

16255 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA21_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA21
)

	)

16256 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA22_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA22
)

	)

16257 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA23_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_DATA23
)

	)

16258 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_ENABLE_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_ENABLE
)

	)

16259 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_HSYNC_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_HSYNC
)

	)

16260 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_RESET_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_RESET
)

	)

16261 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_VSYNC_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_LCD1_VSYNC
)

	)

16262 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_ALE_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_NAND_ALE
)

	)

16263 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CE0_B_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_NAND_CE0_B
)

	)

16264 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CE1_B_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_NAND_CE1_B
)

	)

16265 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CLE_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_NAND_CLE
)

	)

16266 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA00_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_NAND_DATA00
)

	)

16267 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA01_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_NAND_DATA01
)

	)

16268 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA02_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_NAND_DATA02
)

	)

16269 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA03_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_NAND_DATA03
)

	)

16270 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA04_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_NAND_DATA04
)

	)

16271 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA05_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_NAND_DATA05
)

	)

16272 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA06_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_NAND_DATA06
)

	)

16273 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA07_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_NAND_DATA07
)

	)

16274 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_RE_B_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_NAND_RE_B
)

	)

16275 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_READY_B_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_NAND_READY_B
)

	)

16276 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_WE_B_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_NAND_WE_B
)

	)

16277 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_WP_B_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_NAND_WP_B
)

	)

16278 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA0_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_QSPI1A_DATA0
)

	)

16279 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA1_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_QSPI1A_DATA1
)

	)

16280 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA2_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_QSPI1A_DATA2
)

	)

16281 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA3_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_QSPI1A_DATA3
)

	)

16282 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DQS_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_QSPI1A_DQS
)

	)

16283 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SCLK_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_QSPI1A_SCLK
)

	)

16284 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS0_B_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_QSPI1A_SS0_B
)

	)

16285 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS1_B_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_QSPI1A_SS1_B
)

	)

16286 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA0_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_QSPI1B_DATA0
)

	)

16287 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA1_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_QSPI1B_DATA1
)

	)

16288 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA2_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_QSPI1B_DATA2
)

	)

16289 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA3_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_QSPI1B_DATA3
)

	)

16290 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DQS_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_QSPI1B_DQS
)

	)

16291 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SCLK_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_QSPI1B_SCLK
)

	)

16292 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS0_B_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_QSPI1B_SS0_B
)

	)

16293 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS1_B_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_QSPI1B_SS1_B
)

	)

16294 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD0_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII1_RD0
)

	)

16295 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD1_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII1_RD1
)

	)

16296 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD2_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII1_RD2
)

	)

16297 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD3_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII1_RD3
)

	)

16298 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RX_CTL_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII1_RX_CTL
)

	)

16299 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RXC_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII1_RXC
)

	)

16300 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD0_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII1_TD0
)

	)

16301 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD1_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII1_TD1
)

	)

16302 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD2_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII1_TD2
)

	)

16303 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD3_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII1_TD3
)

	)

16304 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TX_CTL_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII1_TX_CTL
)

	)

16305 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TXC_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII1_TXC
)

	)

16306 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD0_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII2_RD0
)

	)

16307 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD1_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII2_RD1
)

	)

16308 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD2_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII2_RD2
)

	)

16309 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD3_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII2_RD3
)

	)

16310 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RX_CTL_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII2_RX_CTL
)

	)

16311 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RXC_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII2_RXC
)

	)

16312 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD0_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII2_TD0
)

	)

16313 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD1_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII2_TD1
)

	)

16314 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD2_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII2_TD2
)

	)

16315 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD3_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII2_TD3
)

	)

16316 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TX_CTL_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII2_TX_CTL
)

	)

16317 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TXC_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_RGMII2_TXC
)

	)

16318 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD1_CLK
)

	)

16319 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD1_CMD
)

	)

16320 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA0_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD1_DATA0
)

	)

16321 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA1_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD1_DATA1
)

	)

16322 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA2_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD1_DATA2
)

	)

16323 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA3_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD1_DATA3
)

	)

16324 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD2_CLK
)

	)

16325 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD2_CMD
)

	)

16326 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA0_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD2_DATA0
)

	)

16327 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA1_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD2_DATA1
)

	)

16328 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA2_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD2_DATA2
)

	)

16329 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA3_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD2_DATA3
)

	)

16330 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD3_CLK
)

	)

16331 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD3_CMD
)

	)

16332 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA0_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD3_DATA0
)

	)

16333 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA1_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD3_DATA1
)

	)

16334 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA2_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD3_DATA2
)

	)

16335 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA3_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD3_DATA3
)

	)

16336 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA4_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD3_DATA4
)

	)

16337 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA5_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD3_DATA5
)

	)

16338 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA6_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD3_DATA6
)

	)

16339 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA7_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD3_DATA7
)

	)

16340 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD4_CLK
)

	)

16341 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD4_CMD
)

	)

16342 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA0_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD4_DATA0
)

	)

16343 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA1_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD4_DATA1
)

	)

16344 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA2_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD4_DATA2
)

	)

16345 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA3_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD4_DATA3
)

	)

16346 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA4_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD4_DATA4
)

	)

16347 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA5_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD4_DATA5
)

	)

16348 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA6_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD4_DATA6
)

	)

16349 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA7_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD4_DATA7
)

	)

16350 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_RESET_B_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_SD4_RESET_B
)

	)

16351 
	#IOMUXC_SW_MUX_CTL_PAD_USB_H_DATA_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_USB_H_DATA
)

	)

16352 
	#IOMUXC_SW_MUX_CTL_PAD_USB_H_STROBE_REG
(
ba£
Ë((ba£)->
SW_MUX_CTL_PAD_USB_H_STROBE
)

	)

16353 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_ADDR00
)

	)

16354 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_ADDR01
)

	)

16355 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_ADDR02
)

	)

16356 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_ADDR03
)

	)

16357 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_ADDR04
)

	)

16358 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_ADDR05
)

	)

16359 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_ADDR06
)

	)

16360 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_ADDR07
)

	)

16361 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_ADDR08
)

	)

16362 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_ADDR09
)

	)

16363 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_ADDR10
)

	)

16364 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_ADDR11
)

	)

16365 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_ADDR12
)

	)

16366 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_ADDR13
)

	)

16367 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_ADDR14
)

	)

16368 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_ADDR15
)

	)

16369 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_DQM0
)

	)

16370 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_DQM1
)

	)

16371 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_DQM2
)

	)

16372 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_DQM3
)

	)

16373 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_RAS_B
)

	)

16374 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_CAS_B
)

	)

16375 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_CS0_B
)

	)

16376 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_CS1_B
)

	)

16377 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_SDWE_B
)

	)

16378 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_ODT0
)

	)

16379 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_ODT1
)

	)

16380 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_SDBA0
)

	)

16381 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_SDBA1
)

	)

16382 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_SDBA2
)

	)

16383 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_SDCKE0
)

	)

16384 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_SDCKE1
)

	)

16385 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_SDCLK0_P
)

	)

16386 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_SDQS0_P
)

	)

16387 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_SDQS1_P
)

	)

16388 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_SDQS2_P
)

	)

16389 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_SDQS3_P
)

	)

16390 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_DRAM_RESET
)

	)

16391 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_JTAG_MOD
)

	)

16392 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_JTAG_TCK
)

	)

16393 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_JTAG_TDI
)

	)

16394 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_JTAG_TDO
)

	)

16395 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_JTAG_TMS
)

	)

16396 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_JTAG_TRST_B
)

	)

16397 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_GPIO1_IO00
)

	)

16398 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_GPIO1_IO01
)

	)

16399 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_GPIO1_IO02
)

	)

16400 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_GPIO1_IO03
)

	)

16401 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_GPIO1_IO04
)

	)

16402 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_GPIO1_IO05
)

	)

16403 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_GPIO1_IO06
)

	)

16404 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_GPIO1_IO07
)

	)

16405 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_GPIO1_IO08
)

	)

16406 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_GPIO1_IO09
)

	)

16407 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_GPIO1_IO10
)

	)

16408 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_GPIO1_IO11
)

	)

16409 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_GPIO1_IO12
)

	)

16410 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_GPIO1_IO13
)

	)

16411 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_CSI_DATA00
)

	)

16412 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_CSI_DATA01
)

	)

16413 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_CSI_DATA02
)

	)

16414 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_CSI_DATA03
)

	)

16415 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_CSI_DATA04
)

	)

16416 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_CSI_DATA05
)

	)

16417 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_CSI_DATA06
)

	)

16418 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_CSI_DATA07
)

	)

16419 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_CSI_HSYNC
)

	)

16420 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_CSI_MCLK
)

	)

16421 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_CSI_PIXCLK
)

	)

16422 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_CSI_VSYNC
)

	)

16423 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_ENET1_COL
)

	)

16424 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_ENET1_CRS
)

	)

16425 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_ENET1_MDC
)

	)

16426 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_ENET1_MDIO
)

	)

16427 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_ENET1_RX_CLK
)

	)

16428 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_ENET1_TX_CLK
)

	)

16429 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_ENET2_COL
)

	)

16430 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_ENET2_CRS
)

	)

16431 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_ENET2_RX_CLK
)

	)

16432 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_ENET2_TX_CLK
)

	)

16433 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_KEY_COL0
)

	)

16434 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_KEY_COL1
)

	)

16435 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_KEY_COL2
)

	)

16436 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_KEY_COL3
)

	)

16437 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_KEY_COL4
)

	)

16438 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_KEY_ROW0
)

	)

16439 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_KEY_ROW1
)

	)

16440 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_KEY_ROW2
)

	)

16441 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_KEY_ROW3
)

	)

16442 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_KEY_ROW4
)

	)

16443 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_CLK
)

	)

16444 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA00
)

	)

16445 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA01
)

	)

16446 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA02
)

	)

16447 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA03
)

	)

16448 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA04
)

	)

16449 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA05
)

	)

16450 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA06
)

	)

16451 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA07
)

	)

16452 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA08
)

	)

16453 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA09
)

	)

16454 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA10
)

	)

16455 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA11
)

	)

16456 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA12
)

	)

16457 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA13
)

	)

16458 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA14
)

	)

16459 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA15
)

	)

16460 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA16
)

	)

16461 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA17
)

	)

16462 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA18
)

	)

16463 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA19
)

	)

16464 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA20
)

	)

16465 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA21
)

	)

16466 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA22
)

	)

16467 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_DATA23
)

	)

16468 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_ENABLE
)

	)

16469 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_HSYNC
)

	)

16470 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_RESET
)

	)

16471 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_LCD1_VSYNC
)

	)

16472 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_NAND_ALE
)

	)

16473 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_NAND_CE0_B
)

	)

16474 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_NAND_CE1_B
)

	)

16475 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_NAND_CLE
)

	)

16476 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_NAND_DATA00
)

	)

16477 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_NAND_DATA01
)

	)

16478 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_NAND_DATA02
)

	)

16479 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_NAND_DATA03
)

	)

16480 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_NAND_DATA04
)

	)

16481 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_NAND_DATA05
)

	)

16482 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_NAND_DATA06
)

	)

16483 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_NAND_DATA07
)

	)

16484 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_NAND_RE_B
)

	)

16485 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_NAND_READY_B
)

	)

16486 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_NAND_WE_B
)

	)

16487 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_NAND_WP_B
)

	)

16488 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_QSPI1A_DATA0
)

	)

16489 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_QSPI1A_DATA1
)

	)

16490 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_QSPI1A_DATA2
)

	)

16491 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_QSPI1A_DATA3
)

	)

16492 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_QSPI1A_DQS
)

	)

16493 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_QSPI1A_SCLK
)

	)

16494 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_QSPI1A_SS0_B
)

	)

16495 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_QSPI1A_SS1_B
)

	)

16496 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_QSPI1B_DATA0
)

	)

16497 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_QSPI1B_DATA1
)

	)

16498 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_QSPI1B_DATA2
)

	)

16499 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_QSPI1B_DATA3
)

	)

16500 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_QSPI1B_DQS
)

	)

16501 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_QSPI1B_SCLK
)

	)

16502 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_QSPI1B_SS0_B
)

	)

16503 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_QSPI1B_SS1_B
)

	)

16504 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII1_RD0
)

	)

16505 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII1_RD1
)

	)

16506 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII1_RD2
)

	)

16507 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII1_RD3
)

	)

16508 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII1_RX_CTL
)

	)

16509 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII1_RXC
)

	)

16510 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII1_TD0
)

	)

16511 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII1_TD1
)

	)

16512 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII1_TD2
)

	)

16513 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII1_TD3
)

	)

16514 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII1_TX_CTL
)

	)

16515 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII1_TXC
)

	)

16516 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII2_RD0
)

	)

16517 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII2_RD1
)

	)

16518 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII2_RD2
)

	)

16519 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII2_RD3
)

	)

16520 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII2_RX_CTL
)

	)

16521 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII2_RXC
)

	)

16522 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII2_TD0
)

	)

16523 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII2_TD1
)

	)

16524 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII2_TD2
)

	)

16525 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII2_TD3
)

	)

16526 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII2_TX_CTL
)

	)

16527 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_RGMII2_TXC
)

	)

16528 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD1_CLK
)

	)

16529 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD1_CMD
)

	)

16530 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD1_DATA0
)

	)

16531 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD1_DATA1
)

	)

16532 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD1_DATA2
)

	)

16533 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD1_DATA3
)

	)

16534 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD2_CLK
)

	)

16535 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD2_CMD
)

	)

16536 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD2_DATA0
)

	)

16537 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD2_DATA1
)

	)

16538 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD2_DATA2
)

	)

16539 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD2_DATA3
)

	)

16540 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD3_CLK
)

	)

16541 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD3_CMD
)

	)

16542 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD3_DATA0
)

	)

16543 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD3_DATA1
)

	)

16544 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD3_DATA2
)

	)

16545 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD3_DATA3
)

	)

16546 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD3_DATA4
)

	)

16547 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD3_DATA5
)

	)

16548 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD3_DATA6
)

	)

16549 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD3_DATA7
)

	)

16550 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD4_CLK
)

	)

16551 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD4_CMD
)

	)

16552 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD4_DATA0
)

	)

16553 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD4_DATA1
)

	)

16554 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD4_DATA2
)

	)

16555 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD4_DATA3
)

	)

16556 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD4_DATA4
)

	)

16557 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD4_DATA5
)

	)

16558 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD4_DATA6
)

	)

16559 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD4_DATA7
)

	)

16560 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_SD4_RESET_B
)

	)

16561 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_USB_H_DATA
)

	)

16562 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_PAD_USB_H_STROBE
)

	)

16563 
	#IOMUXC_SW_PAD_CTL_GRP_ADDDS_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_GRP_ADDDS
)

	)

16564 
	#IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_GRP_DDRMODE_CTL
)

	)

16565 
	#IOMUXC_SW_PAD_CTL_GRP_DDRPKE_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_GRP_DDRPKE
)

	)

16566 
	#IOMUXC_SW_PAD_CTL_GRP_DDRPK_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_GRP_DDRPK
)

	)

16567 
	#IOMUXC_SW_PAD_CTL_GRP_DDRHYS_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_GRP_DDRHYS
)

	)

16568 
	#IOMUXC_SW_PAD_CTL_GRP_DDRMODE_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_GRP_DDRMODE
)

	)

16569 
	#IOMUXC_SW_PAD_CTL_GRP_B0DS_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_GRP_B0DS
)

	)

16570 
	#IOMUXC_SW_PAD_CTL_GRP_B1DS_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_GRP_B1DS
)

	)

16571 
	#IOMUXC_SW_PAD_CTL_GRP_CTLDS_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_GRP_CTLDS
)

	)

16572 
	#IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_GRP_DDR_TYPE
)

	)

16573 
	#IOMUXC_SW_PAD_CTL_GRP_B2DS_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_GRP_B2DS
)

	)

16574 
	#IOMUXC_SW_PAD_CTL_GRP_B3DS_REG
(
ba£
Ë((ba£)->
SW_PAD_CTL_GRP_B3DS
)

	)

16575 
	#IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ANATOP_USB_OTG_ID_SELECT_INPUT
)

	)

16576 
	#IOMUXC_ANATOP_USB_UH1_ID_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ANATOP_USB_UH1_ID_SELECT_INPUT
)

	)

16577 
	#IOMUXC_AUDMUX_P3_INPUT_DA_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P3_INPUT_DA_AMX_SELECT_INPUT
)

	)

16578 
	#IOMUXC_AUDMUX_P3_INPUT_DB_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P3_INPUT_DB_AMX_SELECT_INPUT
)

	)

16579 
	#IOMUXC_AUDMUX_P3_INPUT_RXCLK_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P3_INPUT_RXCLK_AMX_SELECT_INPUT
)

	)

16580 
	#IOMUXC_AUDMUX_P3_INPUT_RXFS_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P3_INPUT_RXFS_AMX_SELECT_INPUT
)

	)

16581 
	#IOMUXC_AUDMUX_P3_INPUT_TXCLK_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P3_INPUT_TXCLK_AMX_SELECT_INPUT
)

	)

16582 
	#IOMUXC_AUDMUX_P3_INPUT_TXFS_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P3_INPUT_TXFS_AMX_SELECT_INPUT
)

	)

16583 
	#IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT
)

	)

16584 
	#IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT
)

	)

16585 
	#IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT
)

	)

16586 
	#IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT
)

	)

16587 
	#IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT
)

	)

16588 
	#IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT
)

	)

16589 
	#IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT
)

	)

16590 
	#IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT
)

	)

16591 
	#IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT
)

	)

16592 
	#IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT
)

	)

16593 
	#IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT
)

	)

16594 
	#IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT
)

	)

16595 
	#IOMUXC_AUDMUX_P6_INPUT_DA_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P6_INPUT_DA_AMX_SELECT_INPUT
)

	)

16596 
	#IOMUXC_AUDMUX_P6_INPUT_DB_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P6_INPUT_DB_AMX_SELECT_INPUT
)

	)

16597 
	#IOMUXC_AUDMUX_P6_INPUT_RXCLK_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P6_INPUT_RXCLK_AMX_SELECT_INPUT
)

	)

16598 
	#IOMUXC_AUDMUX_P6_INPUT_RXFS_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P6_INPUT_RXFS_AMX_SELECT_INPUT
)

	)

16599 
	#IOMUXC_AUDMUX_P6_INPUT_TXCLK_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P6_INPUT_TXCLK_AMX_SELECT_INPUT
)

	)

16600 
	#IOMUXC_AUDMUX_P6_INPUT_TXFS_AMX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
AUDMUX_P6_INPUT_TXFS_AMX_SELECT_INPUT
)

	)

16601 
	#IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
CAN1_IPP_IND_CANRX_SELECT_INPUT
)

	)

16602 
	#IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
CAN2_IPP_IND_CANRX_SELECT_INPUT
)

	)

16603 
	#IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT
)

	)

16604 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_0_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_0
)

	)

16605 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_1_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_1
)

	)

16606 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_2_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_2
)

	)

16607 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_3_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_3
)

	)

16608 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_4_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_4
)

	)

16609 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_5_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_5
)

	)

16610 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_6_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_6
)

	)

16611 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_7_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_7
)

	)

16612 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_8_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_8
)

	)

16613 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_9_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_9
)

	)

16614 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_11_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_11
)

	)

16615 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_12_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_12
)

	)

16616 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_13_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_13
)

	)

16617 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_14_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_14
)

	)

16618 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_15_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_15
)

	)

16619 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_16_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_16
)

	)

16620 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_17_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_17
)

	)

16621 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_18_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_18
)

	)

16622 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_19_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_19
)

	)

16623 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_20_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_20
)

	)

16624 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_21_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_21
)

	)

16625 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_22_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_22
)

	)

16626 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_23_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_23
)

	)

16627 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_10_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_D_SELECT_INPUT_10
)

	)

16628 
	#IOMUXC_CSI1_IPP_CSI_HSYNC_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_HSYNC_SELECT_INPUT
)

	)

16629 
	#IOMUXC_CSI1_IPP_CSI_PIXCLK_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_PIXCLK_SELECT_INPUT
)

	)

16630 
	#IOMUXC_CSI1_IPP_CSI_VSYNC_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
CSI1_IPP_CSI_VSYNC_SELECT_INPUT
)

	)

16631 
	#IOMUXC_CSI1_TVDECODER_IN_FIELD_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
CSI1_TVDECODER_IN_FIELD_SELECT_INPUT
)

	)

16632 
	#IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT
)

	)

16633 
	#IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ECSPI1_IPP_IND_MISO_SELECT_INPUT
)

	)

16634 
	#IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ECSPI1_IPP_IND_MOSI_SELECT_INPUT
)

	)

16635 
	#IOMUXC_ECSPI1_IPP_IND_SS_B_SELECT_INPUT_0_REG
(
ba£
Ë((ba£)->
ECSPI1_IPP_IND_SS_B_SELECT_INPUT_0
)

	)

16636 
	#IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT
)

	)

16637 
	#IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ECSPI2_IPP_IND_MISO_SELECT_INPUT
)

	)

16638 
	#IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ECSPI2_IPP_IND_MOSI_SELECT_INPUT
)

	)

16639 
	#IOMUXC_ECSPI2_IPP_IND_SS_B_SELECT_INPUT_0_REG
(
ba£
Ë((ba£)->
ECSPI2_IPP_IND_SS_B_SELECT_INPUT_0
)

	)

16640 
	#IOMUXC_ECSPI3_IPP_CSPI_CLK_IN_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ECSPI3_IPP_CSPI_CLK_IN_SELECT_INPUT
)

	)

16641 
	#IOMUXC_ECSPI3_IPP_IND_MISO_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ECSPI3_IPP_IND_MISO_SELECT_INPUT
)

	)

16642 
	#IOMUXC_ECSPI3_IPP_IND_MOSI_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ECSPI3_IPP_IND_MOSI_SELECT_INPUT
)

	)

16643 
	#IOMUXC_ECSPI3_IPP_IND_SS_B_SELECT_INPUT_0_REG
(
ba£
Ë((ba£)->
ECSPI3_IPP_IND_SS_B_SELECT_INPUT_0
)

	)

16644 
	#IOMUXC_ECSPI4_IPP_CSPI_CLK_IN_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ECSPI4_IPP_CSPI_CLK_IN_SELECT_INPUT
)

	)

16645 
	#IOMUXC_ECSPI4_IPP_IND_MISO_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ECSPI4_IPP_IND_MISO_SELECT_INPUT
)

	)

16646 
	#IOMUXC_ECSPI4_IPP_IND_MOSI_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ECSPI4_IPP_IND_MOSI_SELECT_INPUT
)

	)

16647 
	#IOMUXC_ECSPI4_IPP_IND_SS_B_SELECT_INPUT_0_REG
(
ba£
Ë((ba£)->
ECSPI4_IPP_IND_SS_B_SELECT_INPUT_0
)

	)

16648 
	#IOMUXC_ECSPI5_IPP_CSPI_CLK_IN_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ECSPI5_IPP_CSPI_CLK_IN_SELECT_INPUT
)

	)

16649 
	#IOMUXC_ECSPI5_IPP_IND_MISO_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ECSPI5_IPP_IND_MISO_SELECT_INPUT
)

	)

16650 
	#IOMUXC_ECSPI5_IPP_IND_MOSI_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ECSPI5_IPP_IND_MOSI_SELECT_INPUT
)

	)

16651 
	#IOMUXC_ECSPI5_IPP_IND_SS_B_SELECT_INPUT_0_REG
(
ba£
Ë((ba£)->
ECSPI5_IPP_IND_SS_B_SELECT_INPUT_0
)

	)

16652 
	#IOMUXC_ENET1_IPG_CLK_RMII_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ENET1_IPG_CLK_RMII_SELECT_INPUT
)

	)

16653 
	#IOMUXC_ENET1_IPP_IND_MAC0_MDIO_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ENET1_IPP_IND_MAC0_MDIO_SELECT_INPUT
)

	)

16654 
	#IOMUXC_ENET1_IPP_IND_MAC0_RXCLK_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ENET1_IPP_IND_MAC0_RXCLK_SELECT_INPUT
)

	)

16655 
	#IOMUXC_ENET2_IPG_CLK_RMII_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ENET2_IPG_CLK_RMII_SELECT_INPUT
)

	)

16656 
	#IOMUXC_ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT
)

	)

16657 
	#IOMUXC_ENET2_IPP_IND_MAC0_RXCLK_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ENET2_IPP_IND_MAC0_RXCLK_SELECT_INPUT
)

	)

16658 
	#IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ESAI_IPP_IND_FSR_SELECT_INPUT
)

	)

16659 
	#IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ESAI_IPP_IND_FST_SELECT_INPUT
)

	)

16660 
	#IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ESAI_IPP_IND_HCKR_SELECT_INPUT
)

	)

16661 
	#IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ESAI_IPP_IND_HCKT_SELECT_INPUT
)

	)

16662 
	#IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ESAI_IPP_IND_SCKR_SELECT_INPUT
)

	)

16663 
	#IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ESAI_IPP_IND_SCKT_SELECT_INPUT
)

	)

16664 
	#IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ESAI_IPP_IND_SDO0_SELECT_INPUT
)

	)

16665 
	#IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ESAI_IPP_IND_SDO1_SELECT_INPUT
)

	)

16666 
	#IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT
)

	)

16667 
	#IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT
)

	)

16668 
	#IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT
)

	)

16669 
	#IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT
)

	)

16670 
	#IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
I2C1_IPP_SCL_IN_SELECT_INPUT
)

	)

16671 
	#IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
I2C1_IPP_SDA_IN_SELECT_INPUT
)

	)

16672 
	#IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
I2C2_IPP_SCL_IN_SELECT_INPUT
)

	)

16673 
	#IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
I2C2_IPP_SDA_IN_SELECT_INPUT
)

	)

16674 
	#IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
I2C3_IPP_SCL_IN_SELECT_INPUT
)

	)

16675 
	#IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
I2C3_IPP_SDA_IN_SELECT_INPUT
)

	)

16676 
	#IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
I2C4_IPP_SCL_IN_SELECT_INPUT
)

	)

16677 
	#IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
I2C4_IPP_SDA_IN_SELECT_INPUT
)

	)

16678 
	#IOMUXC_KPP_IPP_IND_COL_SELECT_INPUT_5_REG
(
ba£
Ë((ba£)->
KPP_IPP_IND_COL_SELECT_INPUT_5
)

	)

16679 
	#IOMUXC_KPP_IPP_IND_COL_SELECT_INPUT_6_REG
(
ba£
Ë((ba£)->
KPP_IPP_IND_COL_SELECT_INPUT_6
)

	)

16680 
	#IOMUXC_KPP_IPP_IND_COL_SELECT_INPUT_7_REG
(
ba£
Ë((ba£)->
KPP_IPP_IND_COL_SELECT_INPUT_7
)

	)

16681 
	#IOMUXC_KPP_IPP_IND_ROW_SELECT_INPUT_5_REG
(
ba£
Ë((ba£)->
KPP_IPP_IND_ROW_SELECT_INPUT_5
)

	)

16682 
	#IOMUXC_KPP_IPP_IND_ROW_SELECT_INPUT_6_REG
(
ba£
Ë((ba£)->
KPP_IPP_IND_ROW_SELECT_INPUT_6
)

	)

16683 
	#IOMUXC_KPP_IPP_IND_ROW_SELECT_INPUT_7_REG
(
ba£
Ë((ba£)->
KPP_IPP_IND_ROW_SELECT_INPUT_7
)

	)

16684 
	#IOMUXC_LCD1_BUSY_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
LCD1_BUSY_SELECT_INPUT
)

	)

16685 
	#IOMUXC_LCD2_BUSY_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
LCD2_BUSY_SELECT_INPUT
)

	)

16686 
	#IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
MLB_MLB_CLK_IN_SELECT_INPUT
)

	)

16687 
	#IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
MLB_MLB_DATA_IN_SELECT_INPUT
)

	)

16688 
	#IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
MLB_MLB_SIG_IN_SELECT_INPUT
)

	)

16689 
	#IOMUXC_SAI1_IPP_IND_SAI_RXBCLK_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
SAI1_IPP_IND_SAI_RXBCLK_SELECT_INPUT
)

	)

16690 
	#IOMUXC_SAI1_IPP_IND_SAI_RXDATA_SELECT_INPUT_0_REG
(
ba£
Ë((ba£)->
SAI1_IPP_IND_SAI_RXDATA_SELECT_INPUT_0
)

	)

16691 
	#IOMUXC_SAI1_IPP_IND_SAI_RXSYNC_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
SAI1_IPP_IND_SAI_RXSYNC_SELECT_INPUT
)

	)

16692 
	#IOMUXC_SAI1_IPP_IND_SAI_TXBCLK_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
SAI1_IPP_IND_SAI_TXBCLK_SELECT_INPUT
)

	)

16693 
	#IOMUXC_SAI1_IPP_IND_SAI_TXSYNC_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
SAI1_IPP_IND_SAI_TXSYNC_SELECT_INPUT
)

	)

16694 
	#IOMUXC_SAI2_IPP_IND_SAI_RXBCLK_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
SAI2_IPP_IND_SAI_RXBCLK_SELECT_INPUT
)

	)

16695 
	#IOMUXC_SAI2_IPP_IND_SAI_RXDATA_SELECT_INPUT_0_REG
(
ba£
Ë((ba£)->
SAI2_IPP_IND_SAI_RXDATA_SELECT_INPUT_0
)

	)

16696 
	#IOMUXC_SAI2_IPP_IND_SAI_RXSYNC_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
SAI2_IPP_IND_SAI_RXSYNC_SELECT_INPUT
)

	)

16697 
	#IOMUXC_SAI2_IPP_IND_SAI_TXBCLK_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
SAI2_IPP_IND_SAI_TXBCLK_SELECT_INPUT
)

	)

16698 
	#IOMUXC_SAI2_IPP_IND_SAI_TXSYNC_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
SAI2_IPP_IND_SAI_TXSYNC_SELECT_INPUT
)

	)

16699 
	#IOMUXC_SDMA_EVENTS_SELECT_INPUT_14_REG
(
ba£
Ë((ba£)->
SDMA_EVENTS_SELECT_INPUT_14
)

	)

16700 
	#IOMUXC_SDMA_EVENTS_SELECT_INPUT_15_REG
(
ba£
Ë((ba£)->
SDMA_EVENTS_SELECT_INPUT_15
)

	)

16701 
	#IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
SPDIF_SPDIF_IN1_SELECT_INPUT
)

	)

16702 
	#IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
SPDIF_TX_CLK2_SELECT_INPUT
)

	)

16703 
	#IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
UART1_IPP_UART_RTS_B_SELECT_INPUT
)

	)

16704 
	#IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
UART1_IPP_UART_RXD_MUX_SELECT_INPUT
)

	)

16705 
	#IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
UART2_IPP_UART_RTS_B_SELECT_INPUT
)

	)

16706 
	#IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
UART2_IPP_UART_RXD_MUX_SELECT_INPUT
)

	)

16707 
	#IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
UART3_IPP_UART_RTS_B_SELECT_INPUT
)

	)

16708 
	#IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
UART3_IPP_UART_RXD_MUX_SELECT_INPUT
)

	)

16709 
	#IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
UART4_IPP_UART_RTS_B_SELECT_INPUT
)

	)

16710 
	#IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
UART4_IPP_UART_RXD_MUX_SELECT_INPUT
)

	)

16711 
	#IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
UART5_IPP_UART_RTS_B_SELECT_INPUT
)

	)

16712 
	#IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
UART5_IPP_UART_RXD_MUX_SELECT_INPUT
)

	)

16713 
	#IOMUXC_UART6_IPP_UART_RTS_B_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
UART6_IPP_UART_RTS_B_SELECT_INPUT
)

	)

16714 
	#IOMUXC_UART6_IPP_UART_RXD_MUX_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
UART6_IPP_UART_RXD_MUX_SELECT_INPUT
)

	)

16715 
	#IOMUXC_USB_IPP_IND_OTG2_OC_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
USB_IPP_IND_OTG2_OC_SELECT_INPUT
)

	)

16716 
	#IOMUXC_USB_IPP_IND_OTG_OC_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
USB_IPP_IND_OTG_OC_SELECT_INPUT
)

	)

16717 
	#IOMUXC_USDHC1_IPP_CARD_DET_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
USDHC1_IPP_CARD_DET_SELECT_INPUT
)

	)

16718 
	#IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
USDHC1_IPP_WP_ON_SELECT_INPUT
)

	)

16719 
	#IOMUXC_USDHC2_IPP_CARD_DET_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
USDHC2_IPP_CARD_DET_SELECT_INPUT
)

	)

16720 
	#IOMUXC_USDHC2_IPP_WP_ON_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
USDHC2_IPP_WP_ON_SELECT_INPUT
)

	)

16721 
	#IOMUXC_USDHC4_IPP_CARD_DET_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
USDHC4_IPP_CARD_DET_SELECT_INPUT
)

	)

16722 
	#IOMUXC_USDHC4_IPP_WP_ON_SELECT_INPUT_REG
(
ba£
Ë((ba£)->
USDHC4_IPP_WP_ON_SELECT_INPUT
)

	)

16738 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO00_MUX_MODE_MASK
 0x7u

	)

16739 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO00_MUX_MODE_SHIFT
 0

	)

16740 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO00_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO00_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO00_MUX_MODE_MASK
)

	)

16741 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO00_SION_MASK
 0x10u

	)

16742 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO00_SION_SHIFT
 4

	)

16744 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO01_MUX_MODE_MASK
 0x7u

	)

16745 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO01_MUX_MODE_SHIFT
 0

	)

16746 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO01_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO01_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO01_MUX_MODE_MASK
)

	)

16747 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO01_SION_MASK
 0x10u

	)

16748 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO01_SION_SHIFT
 4

	)

16750 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO02_MUX_MODE_MASK
 0x7u

	)

16751 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO02_MUX_MODE_SHIFT
 0

	)

16752 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO02_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO02_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO02_MUX_MODE_MASK
)

	)

16753 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO02_SION_MASK
 0x10u

	)

16754 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO02_SION_SHIFT
 4

	)

16756 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03_MUX_MODE_MASK
 0x7u

	)

16757 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03_MUX_MODE_SHIFT
 0

	)

16758 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03_MUX_MODE_MASK
)

	)

16759 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03_SION_MASK
 0x10u

	)

16760 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03_SION_SHIFT
 4

	)

16762 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO04_MUX_MODE_MASK
 0x7u

	)

16763 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO04_MUX_MODE_SHIFT
 0

	)

16764 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO04_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO04_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO04_MUX_MODE_MASK
)

	)

16765 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO04_SION_MASK
 0x10u

	)

16766 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO04_SION_SHIFT
 4

	)

16768 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO05_MUX_MODE_MASK
 0x7u

	)

16769 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO05_MUX_MODE_SHIFT
 0

	)

16770 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO05_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO05_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO05_MUX_MODE_MASK
)

	)

16771 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO05_SION_MASK
 0x10u

	)

16772 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO05_SION_SHIFT
 4

	)

16774 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO06_MUX_MODE_MASK
 0x7u

	)

16775 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO06_MUX_MODE_SHIFT
 0

	)

16776 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO06_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO06_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO06_MUX_MODE_MASK
)

	)

16777 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO06_SION_MASK
 0x10u

	)

16778 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO06_SION_SHIFT
 4

	)

16780 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO07_MUX_MODE_MASK
 0x7u

	)

16781 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO07_MUX_MODE_SHIFT
 0

	)

16782 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO07_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO07_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO07_MUX_MODE_MASK
)

	)

16783 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO07_SION_MASK
 0x10u

	)

16784 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO07_SION_SHIFT
 4

	)

16786 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO08_MUX_MODE_MASK
 0x7u

	)

16787 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO08_MUX_MODE_SHIFT
 0

	)

16788 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO08_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO08_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO08_MUX_MODE_MASK
)

	)

16789 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO08_SION_MASK
 0x10u

	)

16790 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO08_SION_SHIFT
 4

	)

16792 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO09_MUX_MODE_MASK
 0x7u

	)

16793 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO09_MUX_MODE_SHIFT
 0

	)

16794 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO09_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO09_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO09_MUX_MODE_MASK
)

	)

16795 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO09_SION_MASK
 0x10u

	)

16796 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO09_SION_SHIFT
 4

	)

16798 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO10_MUX_MODE_MASK
 0x7u

	)

16799 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO10_MUX_MODE_SHIFT
 0

	)

16800 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO10_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO10_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO10_MUX_MODE_MASK
)

	)

16801 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO10_SION_MASK
 0x10u

	)

16802 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO10_SION_SHIFT
 4

	)

16804 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO11_MUX_MODE_MASK
 0x7u

	)

16805 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO11_MUX_MODE_SHIFT
 0

	)

16806 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO11_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO11_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO11_MUX_MODE_MASK
)

	)

16807 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO11_SION_MASK
 0x10u

	)

16808 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO11_SION_SHIFT
 4

	)

16810 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO12_MUX_MODE_MASK
 0x7u

	)

16811 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO12_MUX_MODE_SHIFT
 0

	)

16812 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO12_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO12_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO12_MUX_MODE_MASK
)

	)

16813 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO12_SION_MASK
 0x10u

	)

16814 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO12_SION_SHIFT
 4

	)

16816 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO13_MUX_MODE_MASK
 0x7u

	)

16817 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO13_MUX_MODE_SHIFT
 0

	)

16818 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO13_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO13_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO13_MUX_MODE_MASK
)

	)

16819 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO13_SION_MASK
 0x10u

	)

16820 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO13_SION_SHIFT
 4

	)

16822 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA00_MUX_MODE_MASK
 0x7u

	)

16823 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA00_MUX_MODE_SHIFT
 0

	)

16824 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA00_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA00_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA00_MUX_MODE_MASK
)

	)

16825 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA00_SION_MASK
 0x10u

	)

16826 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA00_SION_SHIFT
 4

	)

16828 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA01_MUX_MODE_MASK
 0x7u

	)

16829 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA01_MUX_MODE_SHIFT
 0

	)

16830 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA01_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA01_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA01_MUX_MODE_MASK
)

	)

16831 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA01_SION_MASK
 0x10u

	)

16832 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA01_SION_SHIFT
 4

	)

16834 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA02_MUX_MODE_MASK
 0x7u

	)

16835 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA02_MUX_MODE_SHIFT
 0

	)

16836 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA02_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA02_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA02_MUX_MODE_MASK
)

	)

16837 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA02_SION_MASK
 0x10u

	)

16838 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA02_SION_SHIFT
 4

	)

16840 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA03_MUX_MODE_MASK
 0x7u

	)

16841 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA03_MUX_MODE_SHIFT
 0

	)

16842 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA03_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA03_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA03_MUX_MODE_MASK
)

	)

16843 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA03_SION_MASK
 0x10u

	)

16844 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA03_SION_SHIFT
 4

	)

16846 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA04_MUX_MODE_MASK
 0x7u

	)

16847 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA04_MUX_MODE_SHIFT
 0

	)

16848 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA04_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA04_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA04_MUX_MODE_MASK
)

	)

16849 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA04_SION_MASK
 0x10u

	)

16850 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA04_SION_SHIFT
 4

	)

16852 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA05_MUX_MODE_MASK
 0x7u

	)

16853 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA05_MUX_MODE_SHIFT
 0

	)

16854 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA05_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA05_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA05_MUX_MODE_MASK
)

	)

16855 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA05_SION_MASK
 0x10u

	)

16856 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA05_SION_SHIFT
 4

	)

16858 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA06_MUX_MODE_MASK
 0x7u

	)

16859 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA06_MUX_MODE_SHIFT
 0

	)

16860 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA06_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA06_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA06_MUX_MODE_MASK
)

	)

16861 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA06_SION_MASK
 0x10u

	)

16862 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA06_SION_SHIFT
 4

	)

16864 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA07_MUX_MODE_MASK
 0x7u

	)

16865 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA07_MUX_MODE_SHIFT
 0

	)

16866 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA07_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA07_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_CSI_DATA07_MUX_MODE_MASK
)

	)

16867 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA07_SION_MASK
 0x10u

	)

16868 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA07_SION_SHIFT
 4

	)

16870 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_HSYNC_MUX_MODE_MASK
 0x7u

	)

16871 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_HSYNC_MUX_MODE_SHIFT
 0

	)

16872 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_HSYNC_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_CSI_HSYNC_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_CSI_HSYNC_MUX_MODE_MASK
)

	)

16873 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_HSYNC_SION_MASK
 0x10u

	)

16874 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_HSYNC_SION_SHIFT
 4

	)

16876 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_MCLK_MUX_MODE_MASK
 0x7u

	)

16877 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_MCLK_MUX_MODE_SHIFT
 0

	)

16878 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_MCLK_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_CSI_MCLK_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_CSI_MCLK_MUX_MODE_MASK
)

	)

16879 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_MCLK_SION_MASK
 0x10u

	)

16880 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_MCLK_SION_SHIFT
 4

	)

16882 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_PIXCLK_MUX_MODE_MASK
 0x7u

	)

16883 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_PIXCLK_MUX_MODE_SHIFT
 0

	)

16884 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_PIXCLK_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_CSI_PIXCLK_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_CSI_PIXCLK_MUX_MODE_MASK
)

	)

16885 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_PIXCLK_SION_MASK
 0x10u

	)

16886 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_PIXCLK_SION_SHIFT
 4

	)

16888 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_VSYNC_MUX_MODE_MASK
 0x7u

	)

16889 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_VSYNC_MUX_MODE_SHIFT
 0

	)

16890 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_VSYNC_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_CSI_VSYNC_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_CSI_VSYNC_MUX_MODE_MASK
)

	)

16891 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_VSYNC_SION_MASK
 0x10u

	)

16892 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_VSYNC_SION_SHIFT
 4

	)

16894 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_COL_MUX_MODE_MASK
 0x7u

	)

16895 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_COL_MUX_MODE_SHIFT
 0

	)

16896 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_COL_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_ENET1_COL_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_ENET1_COL_MUX_MODE_MASK
)

	)

16897 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_COL_SION_MASK
 0x10u

	)

16898 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_COL_SION_SHIFT
 4

	)

16900 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_CRS_MUX_MODE_MASK
 0x7u

	)

16901 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_CRS_MUX_MODE_SHIFT
 0

	)

16902 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_CRS_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_ENET1_CRS_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_ENET1_CRS_MUX_MODE_MASK
)

	)

16903 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_CRS_SION_MASK
 0x10u

	)

16904 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_CRS_SION_SHIFT
 4

	)

16906 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_MDC_MUX_MODE_MASK
 0x7u

	)

16907 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_MDC_MUX_MODE_SHIFT
 0

	)

16908 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_MDC_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_ENET1_MDC_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_ENET1_MDC_MUX_MODE_MASK
)

	)

16909 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_MDC_SION_MASK
 0x10u

	)

16910 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_MDC_SION_SHIFT
 4

	)

16912 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_MDIO_MUX_MODE_MASK
 0x7u

	)

16913 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_MDIO_MUX_MODE_SHIFT
 0

	)

16914 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_MDIO_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_ENET1_MDIO_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_ENET1_MDIO_MUX_MODE_MASK
)

	)

16915 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_MDIO_SION_MASK
 0x10u

	)

16916 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_MDIO_SION_SHIFT
 4

	)

16918 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_RX_CLK_MUX_MODE_MASK
 0x7u

	)

16919 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_RX_CLK_MUX_MODE_SHIFT
 0

	)

16920 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_RX_CLK_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_ENET1_RX_CLK_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_ENET1_RX_CLK_MUX_MODE_MASK
)

	)

16921 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_RX_CLK_SION_MASK
 0x10u

	)

16922 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_RX_CLK_SION_SHIFT
 4

	)

16924 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_TX_CLK_MUX_MODE_MASK
 0x7u

	)

16925 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_TX_CLK_MUX_MODE_SHIFT
 0

	)

16926 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_TX_CLK_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_ENET1_TX_CLK_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_ENET1_TX_CLK_MUX_MODE_MASK
)

	)

16927 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_TX_CLK_SION_MASK
 0x10u

	)

16928 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_TX_CLK_SION_SHIFT
 4

	)

16930 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_COL_MUX_MODE_MASK
 0x7u

	)

16931 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_COL_MUX_MODE_SHIFT
 0

	)

16932 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_COL_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_ENET2_COL_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_ENET2_COL_MUX_MODE_MASK
)

	)

16933 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_COL_SION_MASK
 0x10u

	)

16934 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_COL_SION_SHIFT
 4

	)

16936 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_CRS_MUX_MODE_MASK
 0x7u

	)

16937 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_CRS_MUX_MODE_SHIFT
 0

	)

16938 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_CRS_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_ENET2_CRS_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_ENET2_CRS_MUX_MODE_MASK
)

	)

16939 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_CRS_SION_MASK
 0x10u

	)

16940 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_CRS_SION_SHIFT
 4

	)

16942 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_RX_CLK_MUX_MODE_MASK
 0x7u

	)

16943 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_RX_CLK_MUX_MODE_SHIFT
 0

	)

16944 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_RX_CLK_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_ENET2_RX_CLK_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_ENET2_RX_CLK_MUX_MODE_MASK
)

	)

16945 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_RX_CLK_SION_MASK
 0x10u

	)

16946 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_RX_CLK_SION_SHIFT
 4

	)

16948 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_TX_CLK_MUX_MODE_MASK
 0x7u

	)

16949 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_TX_CLK_MUX_MODE_SHIFT
 0

	)

16950 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_TX_CLK_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_ENET2_TX_CLK_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_ENET2_TX_CLK_MUX_MODE_MASK
)

	)

16951 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_TX_CLK_SION_MASK
 0x10u

	)

16952 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_TX_CLK_SION_SHIFT
 4

	)

16954 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_MUX_MODE_MASK
 0x7u

	)

16955 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_MUX_MODE_SHIFT
 0

	)

16956 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_MUX_MODE_MASK
)

	)

16957 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_SION_MASK
 0x10u

	)

16958 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_SION_SHIFT
 4

	)

16960 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_MUX_MODE_MASK
 0x7u

	)

16961 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_MUX_MODE_SHIFT
 0

	)

16962 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_MUX_MODE_MASK
)

	)

16963 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_SION_MASK
 0x10u

	)

16964 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_SION_SHIFT
 4

	)

16966 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_MUX_MODE_MASK
 0x7u

	)

16967 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_MUX_MODE_SHIFT
 0

	)

16968 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_MUX_MODE_MASK
)

	)

16969 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_SION_MASK
 0x10u

	)

16970 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_SION_SHIFT
 4

	)

16972 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_MUX_MODE_MASK
 0x7u

	)

16973 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_MUX_MODE_SHIFT
 0

	)

16974 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_MUX_MODE_MASK
)

	)

16975 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_SION_MASK
 0x10u

	)

16976 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_SION_SHIFT
 4

	)

16978 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_MUX_MODE_MASK
 0x7u

	)

16979 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_MUX_MODE_SHIFT
 0

	)

16980 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_MUX_MODE_MASK
)

	)

16981 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_SION_MASK
 0x10u

	)

16982 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_SION_SHIFT
 4

	)

16984 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_MUX_MODE_MASK
 0x7u

	)

16985 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_MUX_MODE_SHIFT
 0

	)

16986 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_MUX_MODE_MASK
)

	)

16987 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_SION_MASK
 0x10u

	)

16988 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_SION_SHIFT
 4

	)

16990 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_MUX_MODE_MASK
 0x7u

	)

16991 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_MUX_MODE_SHIFT
 0

	)

16992 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_MUX_MODE_MASK
)

	)

16993 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_SION_MASK
 0x10u

	)

16994 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_SION_SHIFT
 4

	)

16996 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_MUX_MODE_MASK
 0x7u

	)

16997 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_MUX_MODE_SHIFT
 0

	)

16998 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_MUX_MODE_MASK
)

	)

16999 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_SION_MASK
 0x10u

	)

17000 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_SION_SHIFT
 4

	)

17002 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_MUX_MODE_MASK
 0x7u

	)

17003 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_MUX_MODE_SHIFT
 0

	)

17004 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_MUX_MODE_MASK
)

	)

17005 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_SION_MASK
 0x10u

	)

17006 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_SION_SHIFT
 4

	)

17008 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_MUX_MODE_MASK
 0x7u

	)

17009 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_MUX_MODE_SHIFT
 0

	)

17010 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_MUX_MODE_MASK
)

	)

17011 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_SION_MASK
 0x10u

	)

17012 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_SION_SHIFT
 4

	)

17014 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_CLK_MUX_MODE_MASK
 0x7u

	)

17015 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_CLK_MUX_MODE_SHIFT
 0

	)

17016 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_CLK_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_CLK_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_CLK_MUX_MODE_MASK
)

	)

17017 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_CLK_SION_MASK
 0x10u

	)

17018 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_CLK_SION_SHIFT
 4

	)

17020 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA00_MUX_MODE_MASK
 0x7u

	)

17021 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA00_MUX_MODE_SHIFT
 0

	)

17022 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA00_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA00_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA00_MUX_MODE_MASK
)

	)

17023 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA00_SION_MASK
 0x10u

	)

17024 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA00_SION_SHIFT
 4

	)

17026 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA01_MUX_MODE_MASK
 0x7u

	)

17027 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA01_MUX_MODE_SHIFT
 0

	)

17028 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA01_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA01_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA01_MUX_MODE_MASK
)

	)

17029 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA01_SION_MASK
 0x10u

	)

17030 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA01_SION_SHIFT
 4

	)

17032 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA02_MUX_MODE_MASK
 0x7u

	)

17033 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA02_MUX_MODE_SHIFT
 0

	)

17034 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA02_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA02_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA02_MUX_MODE_MASK
)

	)

17035 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA02_SION_MASK
 0x10u

	)

17036 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA02_SION_SHIFT
 4

	)

17038 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA03_MUX_MODE_MASK
 0x7u

	)

17039 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA03_MUX_MODE_SHIFT
 0

	)

17040 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA03_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA03_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA03_MUX_MODE_MASK
)

	)

17041 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA03_SION_MASK
 0x10u

	)

17042 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA03_SION_SHIFT
 4

	)

17044 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA04_MUX_MODE_MASK
 0x7u

	)

17045 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA04_MUX_MODE_SHIFT
 0

	)

17046 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA04_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA04_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA04_MUX_MODE_MASK
)

	)

17047 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA04_SION_MASK
 0x10u

	)

17048 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA04_SION_SHIFT
 4

	)

17050 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA05_MUX_MODE_MASK
 0x7u

	)

17051 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA05_MUX_MODE_SHIFT
 0

	)

17052 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA05_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA05_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA05_MUX_MODE_MASK
)

	)

17053 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA05_SION_MASK
 0x10u

	)

17054 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA05_SION_SHIFT
 4

	)

17056 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA06_MUX_MODE_MASK
 0x7u

	)

17057 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA06_MUX_MODE_SHIFT
 0

	)

17058 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA06_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA06_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA06_MUX_MODE_MASK
)

	)

17059 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA06_SION_MASK
 0x10u

	)

17060 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA06_SION_SHIFT
 4

	)

17062 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA07_MUX_MODE_MASK
 0x7u

	)

17063 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA07_MUX_MODE_SHIFT
 0

	)

17064 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA07_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA07_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA07_MUX_MODE_MASK
)

	)

17065 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA07_SION_MASK
 0x10u

	)

17066 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA07_SION_SHIFT
 4

	)

17068 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA08_MUX_MODE_MASK
 0x7u

	)

17069 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA08_MUX_MODE_SHIFT
 0

	)

17070 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA08_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA08_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA08_MUX_MODE_MASK
)

	)

17071 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA08_SION_MASK
 0x10u

	)

17072 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA08_SION_SHIFT
 4

	)

17074 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA09_MUX_MODE_MASK
 0x7u

	)

17075 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA09_MUX_MODE_SHIFT
 0

	)

17076 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA09_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA09_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA09_MUX_MODE_MASK
)

	)

17077 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA09_SION_MASK
 0x10u

	)

17078 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA09_SION_SHIFT
 4

	)

17080 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA10_MUX_MODE_MASK
 0x7u

	)

17081 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA10_MUX_MODE_SHIFT
 0

	)

17082 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA10_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA10_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA10_MUX_MODE_MASK
)

	)

17083 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA10_SION_MASK
 0x10u

	)

17084 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA10_SION_SHIFT
 4

	)

17086 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA11_MUX_MODE_MASK
 0x7u

	)

17087 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA11_MUX_MODE_SHIFT
 0

	)

17088 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA11_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA11_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA11_MUX_MODE_MASK
)

	)

17089 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA11_SION_MASK
 0x10u

	)

17090 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA11_SION_SHIFT
 4

	)

17092 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA12_MUX_MODE_MASK
 0x7u

	)

17093 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA12_MUX_MODE_SHIFT
 0

	)

17094 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA12_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA12_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA12_MUX_MODE_MASK
)

	)

17095 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA12_SION_MASK
 0x10u

	)

17096 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA12_SION_SHIFT
 4

	)

17098 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA13_MUX_MODE_MASK
 0x7u

	)

17099 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA13_MUX_MODE_SHIFT
 0

	)

17100 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA13_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA13_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA13_MUX_MODE_MASK
)

	)

17101 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA13_SION_MASK
 0x10u

	)

17102 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA13_SION_SHIFT
 4

	)

17104 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA14_MUX_MODE_MASK
 0x7u

	)

17105 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA14_MUX_MODE_SHIFT
 0

	)

17106 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA14_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA14_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA14_MUX_MODE_MASK
)

	)

17107 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA14_SION_MASK
 0x10u

	)

17108 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA14_SION_SHIFT
 4

	)

17110 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA15_MUX_MODE_MASK
 0x7u

	)

17111 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA15_MUX_MODE_SHIFT
 0

	)

17112 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA15_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA15_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA15_MUX_MODE_MASK
)

	)

17113 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA15_SION_MASK
 0x10u

	)

17114 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA15_SION_SHIFT
 4

	)

17116 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA16_MUX_MODE_MASK
 0x7u

	)

17117 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA16_MUX_MODE_SHIFT
 0

	)

17118 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA16_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA16_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA16_MUX_MODE_MASK
)

	)

17119 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA16_SION_MASK
 0x10u

	)

17120 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA16_SION_SHIFT
 4

	)

17122 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA17_MUX_MODE_MASK
 0x7u

	)

17123 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA17_MUX_MODE_SHIFT
 0

	)

17124 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA17_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA17_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA17_MUX_MODE_MASK
)

	)

17125 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA17_SION_MASK
 0x10u

	)

17126 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA17_SION_SHIFT
 4

	)

17128 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA18_MUX_MODE_MASK
 0x7u

	)

17129 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA18_MUX_MODE_SHIFT
 0

	)

17130 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA18_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA18_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA18_MUX_MODE_MASK
)

	)

17131 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA18_SION_MASK
 0x10u

	)

17132 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA18_SION_SHIFT
 4

	)

17134 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA19_MUX_MODE_MASK
 0x7u

	)

17135 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA19_MUX_MODE_SHIFT
 0

	)

17136 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA19_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA19_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA19_MUX_MODE_MASK
)

	)

17137 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA19_SION_MASK
 0x10u

	)

17138 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA19_SION_SHIFT
 4

	)

17140 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA20_MUX_MODE_MASK
 0x7u

	)

17141 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA20_MUX_MODE_SHIFT
 0

	)

17142 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA20_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA20_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA20_MUX_MODE_MASK
)

	)

17143 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA20_SION_MASK
 0x10u

	)

17144 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA20_SION_SHIFT
 4

	)

17146 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA21_MUX_MODE_MASK
 0x7u

	)

17147 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA21_MUX_MODE_SHIFT
 0

	)

17148 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA21_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA21_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA21_MUX_MODE_MASK
)

	)

17149 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA21_SION_MASK
 0x10u

	)

17150 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA21_SION_SHIFT
 4

	)

17152 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA22_MUX_MODE_MASK
 0x7u

	)

17153 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA22_MUX_MODE_SHIFT
 0

	)

17154 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA22_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA22_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA22_MUX_MODE_MASK
)

	)

17155 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA22_SION_MASK
 0x10u

	)

17156 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA22_SION_SHIFT
 4

	)

17158 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA23_MUX_MODE_MASK
 0x7u

	)

17159 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA23_MUX_MODE_SHIFT
 0

	)

17160 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA23_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA23_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA23_MUX_MODE_MASK
)

	)

17161 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA23_SION_MASK
 0x10u

	)

17162 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA23_SION_SHIFT
 4

	)

17164 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_ENABLE_MUX_MODE_MASK
 0x7u

	)

17165 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_ENABLE_MUX_MODE_SHIFT
 0

	)

17166 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_ENABLE_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_ENABLE_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_ENABLE_MUX_MODE_MASK
)

	)

17167 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_ENABLE_SION_MASK
 0x10u

	)

17168 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_ENABLE_SION_SHIFT
 4

	)

17170 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_HSYNC_MUX_MODE_MASK
 0x7u

	)

17171 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_HSYNC_MUX_MODE_SHIFT
 0

	)

17172 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_HSYNC_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_HSYNC_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_HSYNC_MUX_MODE_MASK
)

	)

17173 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_HSYNC_SION_MASK
 0x10u

	)

17174 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_HSYNC_SION_SHIFT
 4

	)

17176 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_RESET_MUX_MODE_MASK
 0x7u

	)

17177 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_RESET_MUX_MODE_SHIFT
 0

	)

17178 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_RESET_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_RESET_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_RESET_MUX_MODE_MASK
)

	)

17179 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_RESET_SION_MASK
 0x10u

	)

17180 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_RESET_SION_SHIFT
 4

	)

17182 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_VSYNC_MUX_MODE_MASK
 0x7u

	)

17183 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_VSYNC_MUX_MODE_SHIFT
 0

	)

17184 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_VSYNC_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_LCD1_VSYNC_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_LCD1_VSYNC_MUX_MODE_MASK
)

	)

17185 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_VSYNC_SION_MASK
 0x10u

	)

17186 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_VSYNC_SION_SHIFT
 4

	)

17188 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_ALE_MUX_MODE_MASK
 0x7u

	)

17189 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_ALE_MUX_MODE_SHIFT
 0

	)

17190 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_ALE_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_NAND_ALE_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_NAND_ALE_MUX_MODE_MASK
)

	)

17191 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_ALE_SION_MASK
 0x10u

	)

17192 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_ALE_SION_SHIFT
 4

	)

17194 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CE0_B_MUX_MODE_MASK
 0x7u

	)

17195 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CE0_B_MUX_MODE_SHIFT
 0

	)

17196 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CE0_B_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_NAND_CE0_B_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_NAND_CE0_B_MUX_MODE_MASK
)

	)

17197 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CE0_B_SION_MASK
 0x10u

	)

17198 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CE0_B_SION_SHIFT
 4

	)

17200 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CE1_B_MUX_MODE_MASK
 0x7u

	)

17201 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CE1_B_MUX_MODE_SHIFT
 0

	)

17202 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CE1_B_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_NAND_CE1_B_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_NAND_CE1_B_MUX_MODE_MASK
)

	)

17203 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CE1_B_SION_MASK
 0x10u

	)

17204 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CE1_B_SION_SHIFT
 4

	)

17206 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CLE_MUX_MODE_MASK
 0x7u

	)

17207 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CLE_MUX_MODE_SHIFT
 0

	)

17208 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CLE_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_NAND_CLE_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_NAND_CLE_MUX_MODE_MASK
)

	)

17209 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CLE_SION_MASK
 0x10u

	)

17210 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CLE_SION_SHIFT
 4

	)

17212 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA00_MUX_MODE_MASK
 0x7u

	)

17213 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA00_MUX_MODE_SHIFT
 0

	)

17214 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA00_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_NAND_DATA00_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_NAND_DATA00_MUX_MODE_MASK
)

	)

17215 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA00_SION_MASK
 0x10u

	)

17216 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA00_SION_SHIFT
 4

	)

17218 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA01_MUX_MODE_MASK
 0x7u

	)

17219 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA01_MUX_MODE_SHIFT
 0

	)

17220 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA01_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_NAND_DATA01_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_NAND_DATA01_MUX_MODE_MASK
)

	)

17221 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA01_SION_MASK
 0x10u

	)

17222 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA01_SION_SHIFT
 4

	)

17224 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA02_MUX_MODE_MASK
 0x7u

	)

17225 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA02_MUX_MODE_SHIFT
 0

	)

17226 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA02_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_NAND_DATA02_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_NAND_DATA02_MUX_MODE_MASK
)

	)

17227 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA02_SION_MASK
 0x10u

	)

17228 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA02_SION_SHIFT
 4

	)

17230 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA03_MUX_MODE_MASK
 0x7u

	)

17231 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA03_MUX_MODE_SHIFT
 0

	)

17232 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA03_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_NAND_DATA03_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_NAND_DATA03_MUX_MODE_MASK
)

	)

17233 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA03_SION_MASK
 0x10u

	)

17234 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA03_SION_SHIFT
 4

	)

17236 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA04_MUX_MODE_MASK
 0x7u

	)

17237 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA04_MUX_MODE_SHIFT
 0

	)

17238 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA04_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_NAND_DATA04_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_NAND_DATA04_MUX_MODE_MASK
)

	)

17239 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA04_SION_MASK
 0x10u

	)

17240 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA04_SION_SHIFT
 4

	)

17242 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA05_MUX_MODE_MASK
 0x7u

	)

17243 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA05_MUX_MODE_SHIFT
 0

	)

17244 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA05_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_NAND_DATA05_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_NAND_DATA05_MUX_MODE_MASK
)

	)

17245 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA05_SION_MASK
 0x10u

	)

17246 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA05_SION_SHIFT
 4

	)

17248 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA06_MUX_MODE_MASK
 0x7u

	)

17249 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA06_MUX_MODE_SHIFT
 0

	)

17250 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA06_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_NAND_DATA06_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_NAND_DATA06_MUX_MODE_MASK
)

	)

17251 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA06_SION_MASK
 0x10u

	)

17252 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA06_SION_SHIFT
 4

	)

17254 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA07_MUX_MODE_MASK
 0x7u

	)

17255 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA07_MUX_MODE_SHIFT
 0

	)

17256 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA07_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_NAND_DATA07_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_NAND_DATA07_MUX_MODE_MASK
)

	)

17257 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA07_SION_MASK
 0x10u

	)

17258 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA07_SION_SHIFT
 4

	)

17260 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_RE_B_MUX_MODE_MASK
 0x7u

	)

17261 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_RE_B_MUX_MODE_SHIFT
 0

	)

17262 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_RE_B_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_NAND_RE_B_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_NAND_RE_B_MUX_MODE_MASK
)

	)

17263 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_RE_B_SION_MASK
 0x10u

	)

17264 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_RE_B_SION_SHIFT
 4

	)

17266 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_READY_B_MUX_MODE_MASK
 0x7u

	)

17267 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_READY_B_MUX_MODE_SHIFT
 0

	)

17268 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_READY_B_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_NAND_READY_B_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_NAND_READY_B_MUX_MODE_MASK
)

	)

17269 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_READY_B_SION_MASK
 0x10u

	)

17270 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_READY_B_SION_SHIFT
 4

	)

17272 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_WE_B_MUX_MODE_MASK
 0x7u

	)

17273 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_WE_B_MUX_MODE_SHIFT
 0

	)

17274 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_WE_B_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_NAND_WE_B_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_NAND_WE_B_MUX_MODE_MASK
)

	)

17275 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_WE_B_SION_MASK
 0x10u

	)

17276 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_WE_B_SION_SHIFT
 4

	)

17278 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_WP_B_MUX_MODE_MASK
 0x7u

	)

17279 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_WP_B_MUX_MODE_SHIFT
 0

	)

17280 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_WP_B_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_NAND_WP_B_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_NAND_WP_B_MUX_MODE_MASK
)

	)

17281 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_WP_B_SION_MASK
 0x10u

	)

17282 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_WP_B_SION_SHIFT
 4

	)

17284 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA0_MUX_MODE_MASK
 0x7u

	)

17285 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA0_MUX_MODE_SHIFT
 0

	)

17286 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA0_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA0_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA0_MUX_MODE_MASK
)

	)

17287 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA0_SION_MASK
 0x10u

	)

17288 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA0_SION_SHIFT
 4

	)

17290 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA1_MUX_MODE_MASK
 0x7u

	)

17291 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA1_MUX_MODE_SHIFT
 0

	)

17292 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA1_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA1_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA1_MUX_MODE_MASK
)

	)

17293 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA1_SION_MASK
 0x10u

	)

17294 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA1_SION_SHIFT
 4

	)

17296 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA2_MUX_MODE_MASK
 0x7u

	)

17297 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA2_MUX_MODE_SHIFT
 0

	)

17298 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA2_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA2_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA2_MUX_MODE_MASK
)

	)

17299 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA2_SION_MASK
 0x10u

	)

17300 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA2_SION_SHIFT
 4

	)

17302 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA3_MUX_MODE_MASK
 0x7u

	)

17303 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA3_MUX_MODE_SHIFT
 0

	)

17304 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA3_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA3_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA3_MUX_MODE_MASK
)

	)

17305 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA3_SION_MASK
 0x10u

	)

17306 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA3_SION_SHIFT
 4

	)

17308 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DQS_MUX_MODE_MASK
 0x7u

	)

17309 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DQS_MUX_MODE_SHIFT
 0

	)

17310 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DQS_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DQS_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DQS_MUX_MODE_MASK
)

	)

17311 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DQS_SION_MASK
 0x10u

	)

17312 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DQS_SION_SHIFT
 4

	)

17314 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SCLK_MUX_MODE_MASK
 0x7u

	)

17315 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SCLK_MUX_MODE_SHIFT
 0

	)

17316 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SCLK_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SCLK_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SCLK_MUX_MODE_MASK
)

	)

17317 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SCLK_SION_MASK
 0x10u

	)

17318 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SCLK_SION_SHIFT
 4

	)

17320 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS0_B_MUX_MODE_MASK
 0x7u

	)

17321 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS0_B_MUX_MODE_SHIFT
 0

	)

17322 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS0_B_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS0_B_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS0_B_MUX_MODE_MASK
)

	)

17323 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS0_B_SION_MASK
 0x10u

	)

17324 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS0_B_SION_SHIFT
 4

	)

17326 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS1_B_MUX_MODE_MASK
 0x7u

	)

17327 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS1_B_MUX_MODE_SHIFT
 0

	)

17328 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS1_B_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS1_B_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS1_B_MUX_MODE_MASK
)

	)

17329 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS1_B_SION_MASK
 0x10u

	)

17330 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS1_B_SION_SHIFT
 4

	)

17332 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA0_MUX_MODE_MASK
 0x7u

	)

17333 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA0_MUX_MODE_SHIFT
 0

	)

17334 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA0_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA0_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA0_MUX_MODE_MASK
)

	)

17335 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA0_SION_MASK
 0x10u

	)

17336 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA0_SION_SHIFT
 4

	)

17338 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA1_MUX_MODE_MASK
 0x7u

	)

17339 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA1_MUX_MODE_SHIFT
 0

	)

17340 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA1_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA1_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA1_MUX_MODE_MASK
)

	)

17341 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA1_SION_MASK
 0x10u

	)

17342 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA1_SION_SHIFT
 4

	)

17344 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA2_MUX_MODE_MASK
 0x7u

	)

17345 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA2_MUX_MODE_SHIFT
 0

	)

17346 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA2_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA2_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA2_MUX_MODE_MASK
)

	)

17347 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA2_SION_MASK
 0x10u

	)

17348 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA2_SION_SHIFT
 4

	)

17350 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA3_MUX_MODE_MASK
 0x7u

	)

17351 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA3_MUX_MODE_SHIFT
 0

	)

17352 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA3_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA3_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA3_MUX_MODE_MASK
)

	)

17353 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA3_SION_MASK
 0x10u

	)

17354 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA3_SION_SHIFT
 4

	)

17356 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DQS_MUX_MODE_MASK
 0x7u

	)

17357 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DQS_MUX_MODE_SHIFT
 0

	)

17358 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DQS_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DQS_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DQS_MUX_MODE_MASK
)

	)

17359 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DQS_SION_MASK
 0x10u

	)

17360 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DQS_SION_SHIFT
 4

	)

17362 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SCLK_MUX_MODE_MASK
 0x7u

	)

17363 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SCLK_MUX_MODE_SHIFT
 0

	)

17364 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SCLK_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SCLK_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SCLK_MUX_MODE_MASK
)

	)

17365 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SCLK_SION_MASK
 0x10u

	)

17366 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SCLK_SION_SHIFT
 4

	)

17368 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS0_B_MUX_MODE_MASK
 0x7u

	)

17369 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS0_B_MUX_MODE_SHIFT
 0

	)

17370 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS0_B_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS0_B_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS0_B_MUX_MODE_MASK
)

	)

17371 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS0_B_SION_MASK
 0x10u

	)

17372 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS0_B_SION_SHIFT
 4

	)

17374 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS1_B_MUX_MODE_MASK
 0x7u

	)

17375 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS1_B_MUX_MODE_SHIFT
 0

	)

17376 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS1_B_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS1_B_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS1_B_MUX_MODE_MASK
)

	)

17377 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS1_B_SION_MASK
 0x10u

	)

17378 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS1_B_SION_SHIFT
 4

	)

17380 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD0_MUX_MODE_MASK
 0x7u

	)

17381 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD0_MUX_MODE_SHIFT
 0

	)

17382 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD0_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD0_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD0_MUX_MODE_MASK
)

	)

17383 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD0_SION_MASK
 0x10u

	)

17384 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD0_SION_SHIFT
 4

	)

17386 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD1_MUX_MODE_MASK
 0x7u

	)

17387 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD1_MUX_MODE_SHIFT
 0

	)

17388 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD1_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD1_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD1_MUX_MODE_MASK
)

	)

17389 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD1_SION_MASK
 0x10u

	)

17390 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD1_SION_SHIFT
 4

	)

17392 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD2_MUX_MODE_MASK
 0x7u

	)

17393 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD2_MUX_MODE_SHIFT
 0

	)

17394 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD2_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD2_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD2_MUX_MODE_MASK
)

	)

17395 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD2_SION_MASK
 0x10u

	)

17396 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD2_SION_SHIFT
 4

	)

17398 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD3_MUX_MODE_MASK
 0x7u

	)

17399 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD3_MUX_MODE_SHIFT
 0

	)

17400 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD3_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD3_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD3_MUX_MODE_MASK
)

	)

17401 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD3_SION_MASK
 0x10u

	)

17402 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD3_SION_SHIFT
 4

	)

17404 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RX_CTL_MUX_MODE_MASK
 0x7u

	)

17405 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RX_CTL_MUX_MODE_SHIFT
 0

	)

17406 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RX_CTL_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII1_RX_CTL_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII1_RX_CTL_MUX_MODE_MASK
)

	)

17407 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RX_CTL_SION_MASK
 0x10u

	)

17408 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RX_CTL_SION_SHIFT
 4

	)

17410 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RXC_MUX_MODE_MASK
 0x7u

	)

17411 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RXC_MUX_MODE_SHIFT
 0

	)

17412 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RXC_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII1_RXC_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII1_RXC_MUX_MODE_MASK
)

	)

17413 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RXC_SION_MASK
 0x10u

	)

17414 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RXC_SION_SHIFT
 4

	)

17416 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD0_MUX_MODE_MASK
 0x7u

	)

17417 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD0_MUX_MODE_SHIFT
 0

	)

17418 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD0_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD0_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD0_MUX_MODE_MASK
)

	)

17419 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD0_SION_MASK
 0x10u

	)

17420 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD0_SION_SHIFT
 4

	)

17422 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD1_MUX_MODE_MASK
 0x7u

	)

17423 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD1_MUX_MODE_SHIFT
 0

	)

17424 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD1_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD1_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD1_MUX_MODE_MASK
)

	)

17425 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD1_SION_MASK
 0x10u

	)

17426 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD1_SION_SHIFT
 4

	)

17428 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD2_MUX_MODE_MASK
 0x7u

	)

17429 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD2_MUX_MODE_SHIFT
 0

	)

17430 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD2_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD2_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD2_MUX_MODE_MASK
)

	)

17431 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD2_SION_MASK
 0x10u

	)

17432 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD2_SION_SHIFT
 4

	)

17434 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD3_MUX_MODE_MASK
 0x7u

	)

17435 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD3_MUX_MODE_SHIFT
 0

	)

17436 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD3_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD3_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD3_MUX_MODE_MASK
)

	)

17437 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD3_SION_MASK
 0x10u

	)

17438 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD3_SION_SHIFT
 4

	)

17440 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TX_CTL_MUX_MODE_MASK
 0x7u

	)

17441 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TX_CTL_MUX_MODE_SHIFT
 0

	)

17442 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TX_CTL_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII1_TX_CTL_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII1_TX_CTL_MUX_MODE_MASK
)

	)

17443 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TX_CTL_SION_MASK
 0x10u

	)

17444 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TX_CTL_SION_SHIFT
 4

	)

17446 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TXC_MUX_MODE_MASK
 0x7u

	)

17447 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TXC_MUX_MODE_SHIFT
 0

	)

17448 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TXC_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII1_TXC_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII1_TXC_MUX_MODE_MASK
)

	)

17449 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TXC_SION_MASK
 0x10u

	)

17450 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TXC_SION_SHIFT
 4

	)

17452 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD0_MUX_MODE_MASK
 0x7u

	)

17453 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD0_MUX_MODE_SHIFT
 0

	)

17454 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD0_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD0_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD0_MUX_MODE_MASK
)

	)

17455 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD0_SION_MASK
 0x10u

	)

17456 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD0_SION_SHIFT
 4

	)

17458 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD1_MUX_MODE_MASK
 0x7u

	)

17459 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD1_MUX_MODE_SHIFT
 0

	)

17460 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD1_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD1_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD1_MUX_MODE_MASK
)

	)

17461 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD1_SION_MASK
 0x10u

	)

17462 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD1_SION_SHIFT
 4

	)

17464 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD2_MUX_MODE_MASK
 0x7u

	)

17465 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD2_MUX_MODE_SHIFT
 0

	)

17466 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD2_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD2_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD2_MUX_MODE_MASK
)

	)

17467 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD2_SION_MASK
 0x10u

	)

17468 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD2_SION_SHIFT
 4

	)

17470 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD3_MUX_MODE_MASK
 0x7u

	)

17471 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD3_MUX_MODE_SHIFT
 0

	)

17472 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD3_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD3_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD3_MUX_MODE_MASK
)

	)

17473 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD3_SION_MASK
 0x10u

	)

17474 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD3_SION_SHIFT
 4

	)

17476 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RX_CTL_MUX_MODE_MASK
 0x7u

	)

17477 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RX_CTL_MUX_MODE_SHIFT
 0

	)

17478 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RX_CTL_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII2_RX_CTL_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII2_RX_CTL_MUX_MODE_MASK
)

	)

17479 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RX_CTL_SION_MASK
 0x10u

	)

17480 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RX_CTL_SION_SHIFT
 4

	)

17482 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RXC_MUX_MODE_MASK
 0x7u

	)

17483 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RXC_MUX_MODE_SHIFT
 0

	)

17484 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RXC_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII2_RXC_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII2_RXC_MUX_MODE_MASK
)

	)

17485 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RXC_SION_MASK
 0x10u

	)

17486 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RXC_SION_SHIFT
 4

	)

17488 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD0_MUX_MODE_MASK
 0x7u

	)

17489 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD0_MUX_MODE_SHIFT
 0

	)

17490 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD0_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD0_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD0_MUX_MODE_MASK
)

	)

17491 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD0_SION_MASK
 0x10u

	)

17492 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD0_SION_SHIFT
 4

	)

17494 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD1_MUX_MODE_MASK
 0x7u

	)

17495 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD1_MUX_MODE_SHIFT
 0

	)

17496 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD1_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD1_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD1_MUX_MODE_MASK
)

	)

17497 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD1_SION_MASK
 0x10u

	)

17498 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD1_SION_SHIFT
 4

	)

17500 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD2_MUX_MODE_MASK
 0x7u

	)

17501 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD2_MUX_MODE_SHIFT
 0

	)

17502 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD2_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD2_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD2_MUX_MODE_MASK
)

	)

17503 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD2_SION_MASK
 0x10u

	)

17504 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD2_SION_SHIFT
 4

	)

17506 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD3_MUX_MODE_MASK
 0x7u

	)

17507 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD3_MUX_MODE_SHIFT
 0

	)

17508 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD3_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD3_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD3_MUX_MODE_MASK
)

	)

17509 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD3_SION_MASK
 0x10u

	)

17510 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD3_SION_SHIFT
 4

	)

17512 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TX_CTL_MUX_MODE_MASK
 0x7u

	)

17513 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TX_CTL_MUX_MODE_SHIFT
 0

	)

17514 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TX_CTL_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII2_TX_CTL_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII2_TX_CTL_MUX_MODE_MASK
)

	)

17515 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TX_CTL_SION_MASK
 0x10u

	)

17516 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TX_CTL_SION_SHIFT
 4

	)

17518 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TXC_MUX_MODE_MASK
 0x7u

	)

17519 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TXC_MUX_MODE_SHIFT
 0

	)

17520 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TXC_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_RGMII2_TXC_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_RGMII2_TXC_MUX_MODE_MASK
)

	)

17521 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TXC_SION_MASK
 0x10u

	)

17522 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TXC_SION_SHIFT
 4

	)

17524 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_MUX_MODE_MASK
 0x7u

	)

17525 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_MUX_MODE_SHIFT
 0

	)

17526 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_MUX_MODE_MASK
)

	)

17527 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_SION_MASK
 0x10u

	)

17528 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_SION_SHIFT
 4

	)

17530 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_MUX_MODE_MASK
 0x7u

	)

17531 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_MUX_MODE_SHIFT
 0

	)

17532 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_MUX_MODE_MASK
)

	)

17533 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_SION_MASK
 0x10u

	)

17534 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_SION_SHIFT
 4

	)

17536 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA0_MUX_MODE_MASK
 0x7u

	)

17537 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA0_MUX_MODE_SHIFT
 0

	)

17538 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA0_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD1_DATA0_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD1_DATA0_MUX_MODE_MASK
)

	)

17539 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA0_SION_MASK
 0x10u

	)

17540 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA0_SION_SHIFT
 4

	)

17542 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA1_MUX_MODE_MASK
 0x7u

	)

17543 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA1_MUX_MODE_SHIFT
 0

	)

17544 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA1_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD1_DATA1_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD1_DATA1_MUX_MODE_MASK
)

	)

17545 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA1_SION_MASK
 0x10u

	)

17546 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA1_SION_SHIFT
 4

	)

17548 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA2_MUX_MODE_MASK
 0x7u

	)

17549 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA2_MUX_MODE_SHIFT
 0

	)

17550 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA2_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD1_DATA2_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD1_DATA2_MUX_MODE_MASK
)

	)

17551 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA2_SION_MASK
 0x10u

	)

17552 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA2_SION_SHIFT
 4

	)

17554 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA3_MUX_MODE_MASK
 0x7u

	)

17555 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA3_MUX_MODE_SHIFT
 0

	)

17556 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA3_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD1_DATA3_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD1_DATA3_MUX_MODE_MASK
)

	)

17557 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA3_SION_MASK
 0x10u

	)

17558 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA3_SION_SHIFT
 4

	)

17560 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_MUX_MODE_MASK
 0x7u

	)

17561 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_MUX_MODE_SHIFT
 0

	)

17562 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_MUX_MODE_MASK
)

	)

17563 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_SION_MASK
 0x10u

	)

17564 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_SION_SHIFT
 4

	)

17566 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_MUX_MODE_MASK
 0x7u

	)

17567 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_MUX_MODE_SHIFT
 0

	)

17568 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_MUX_MODE_MASK
)

	)

17569 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_SION_MASK
 0x10u

	)

17570 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_SION_SHIFT
 4

	)

17572 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA0_MUX_MODE_MASK
 0x7u

	)

17573 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA0_MUX_MODE_SHIFT
 0

	)

17574 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA0_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD2_DATA0_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD2_DATA0_MUX_MODE_MASK
)

	)

17575 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA0_SION_MASK
 0x10u

	)

17576 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA0_SION_SHIFT
 4

	)

17578 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA1_MUX_MODE_MASK
 0x7u

	)

17579 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA1_MUX_MODE_SHIFT
 0

	)

17580 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA1_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD2_DATA1_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD2_DATA1_MUX_MODE_MASK
)

	)

17581 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA1_SION_MASK
 0x10u

	)

17582 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA1_SION_SHIFT
 4

	)

17584 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA2_MUX_MODE_MASK
 0x7u

	)

17585 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA2_MUX_MODE_SHIFT
 0

	)

17586 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA2_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD2_DATA2_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD2_DATA2_MUX_MODE_MASK
)

	)

17587 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA2_SION_MASK
 0x10u

	)

17588 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA2_SION_SHIFT
 4

	)

17590 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA3_MUX_MODE_MASK
 0x7u

	)

17591 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA3_MUX_MODE_SHIFT
 0

	)

17592 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA3_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD2_DATA3_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD2_DATA3_MUX_MODE_MASK
)

	)

17593 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA3_SION_MASK
 0x10u

	)

17594 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA3_SION_SHIFT
 4

	)

17596 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_MUX_MODE_MASK
 0x7u

	)

17597 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_MUX_MODE_SHIFT
 0

	)

17598 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_MUX_MODE_MASK
)

	)

17599 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_SION_MASK
 0x10u

	)

17600 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_SION_SHIFT
 4

	)

17602 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_MUX_MODE_MASK
 0x7u

	)

17603 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_MUX_MODE_SHIFT
 0

	)

17604 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_MUX_MODE_MASK
)

	)

17605 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_SION_MASK
 0x10u

	)

17606 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_SION_SHIFT
 4

	)

17608 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA0_MUX_MODE_MASK
 0x7u

	)

17609 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA0_MUX_MODE_SHIFT
 0

	)

17610 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA0_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD3_DATA0_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD3_DATA0_MUX_MODE_MASK
)

	)

17611 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA0_SION_MASK
 0x10u

	)

17612 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA0_SION_SHIFT
 4

	)

17614 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA1_MUX_MODE_MASK
 0x7u

	)

17615 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA1_MUX_MODE_SHIFT
 0

	)

17616 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA1_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD3_DATA1_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD3_DATA1_MUX_MODE_MASK
)

	)

17617 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA1_SION_MASK
 0x10u

	)

17618 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA1_SION_SHIFT
 4

	)

17620 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA2_MUX_MODE_MASK
 0x7u

	)

17621 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA2_MUX_MODE_SHIFT
 0

	)

17622 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA2_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD3_DATA2_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD3_DATA2_MUX_MODE_MASK
)

	)

17623 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA2_SION_MASK
 0x10u

	)

17624 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA2_SION_SHIFT
 4

	)

17626 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA3_MUX_MODE_MASK
 0x7u

	)

17627 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA3_MUX_MODE_SHIFT
 0

	)

17628 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA3_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD3_DATA3_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD3_DATA3_MUX_MODE_MASK
)

	)

17629 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA3_SION_MASK
 0x10u

	)

17630 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA3_SION_SHIFT
 4

	)

17632 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA4_MUX_MODE_MASK
 0x7u

	)

17633 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA4_MUX_MODE_SHIFT
 0

	)

17634 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA4_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD3_DATA4_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD3_DATA4_MUX_MODE_MASK
)

	)

17635 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA4_SION_MASK
 0x10u

	)

17636 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA4_SION_SHIFT
 4

	)

17638 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA5_MUX_MODE_MASK
 0x7u

	)

17639 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA5_MUX_MODE_SHIFT
 0

	)

17640 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA5_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD3_DATA5_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD3_DATA5_MUX_MODE_MASK
)

	)

17641 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA5_SION_MASK
 0x10u

	)

17642 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA5_SION_SHIFT
 4

	)

17644 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA6_MUX_MODE_MASK
 0x7u

	)

17645 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA6_MUX_MODE_SHIFT
 0

	)

17646 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA6_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD3_DATA6_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD3_DATA6_MUX_MODE_MASK
)

	)

17647 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA6_SION_MASK
 0x10u

	)

17648 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA6_SION_SHIFT
 4

	)

17650 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA7_MUX_MODE_MASK
 0x7u

	)

17651 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA7_MUX_MODE_SHIFT
 0

	)

17652 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA7_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD3_DATA7_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD3_DATA7_MUX_MODE_MASK
)

	)

17653 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA7_SION_MASK
 0x10u

	)

17654 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA7_SION_SHIFT
 4

	)

17656 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_MUX_MODE_MASK
 0x7u

	)

17657 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_MUX_MODE_SHIFT
 0

	)

17658 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_MUX_MODE_MASK
)

	)

17659 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_SION_MASK
 0x10u

	)

17660 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_SION_SHIFT
 4

	)

17662 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_MUX_MODE_MASK
 0x7u

	)

17663 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_MUX_MODE_SHIFT
 0

	)

17664 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_MUX_MODE_MASK
)

	)

17665 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_SION_MASK
 0x10u

	)

17666 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_SION_SHIFT
 4

	)

17668 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA0_MUX_MODE_MASK
 0x7u

	)

17669 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA0_MUX_MODE_SHIFT
 0

	)

17670 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA0_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD4_DATA0_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD4_DATA0_MUX_MODE_MASK
)

	)

17671 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA0_SION_MASK
 0x10u

	)

17672 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA0_SION_SHIFT
 4

	)

17674 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA1_MUX_MODE_MASK
 0x7u

	)

17675 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA1_MUX_MODE_SHIFT
 0

	)

17676 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA1_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD4_DATA1_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD4_DATA1_MUX_MODE_MASK
)

	)

17677 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA1_SION_MASK
 0x10u

	)

17678 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA1_SION_SHIFT
 4

	)

17680 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA2_MUX_MODE_MASK
 0x7u

	)

17681 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA2_MUX_MODE_SHIFT
 0

	)

17682 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA2_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD4_DATA2_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD4_DATA2_MUX_MODE_MASK
)

	)

17683 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA2_SION_MASK
 0x10u

	)

17684 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA2_SION_SHIFT
 4

	)

17686 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA3_MUX_MODE_MASK
 0x7u

	)

17687 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA3_MUX_MODE_SHIFT
 0

	)

17688 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA3_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD4_DATA3_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD4_DATA3_MUX_MODE_MASK
)

	)

17689 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA3_SION_MASK
 0x10u

	)

17690 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA3_SION_SHIFT
 4

	)

17692 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA4_MUX_MODE_MASK
 0x7u

	)

17693 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA4_MUX_MODE_SHIFT
 0

	)

17694 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA4_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD4_DATA4_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD4_DATA4_MUX_MODE_MASK
)

	)

17695 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA4_SION_MASK
 0x10u

	)

17696 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA4_SION_SHIFT
 4

	)

17698 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA5_MUX_MODE_MASK
 0x7u

	)

17699 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA5_MUX_MODE_SHIFT
 0

	)

17700 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA5_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD4_DATA5_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD4_DATA5_MUX_MODE_MASK
)

	)

17701 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA5_SION_MASK
 0x10u

	)

17702 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA5_SION_SHIFT
 4

	)

17704 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA6_MUX_MODE_MASK
 0x7u

	)

17705 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA6_MUX_MODE_SHIFT
 0

	)

17706 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA6_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD4_DATA6_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD4_DATA6_MUX_MODE_MASK
)

	)

17707 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA6_SION_MASK
 0x10u

	)

17708 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA6_SION_SHIFT
 4

	)

17710 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA7_MUX_MODE_MASK
 0x7u

	)

17711 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA7_MUX_MODE_SHIFT
 0

	)

17712 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA7_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD4_DATA7_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD4_DATA7_MUX_MODE_MASK
)

	)

17713 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA7_SION_MASK
 0x10u

	)

17714 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA7_SION_SHIFT
 4

	)

17716 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_RESET_B_MUX_MODE_MASK
 0x7u

	)

17717 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_RESET_B_MUX_MODE_SHIFT
 0

	)

17718 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_RESET_B_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_SD4_RESET_B_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_SD4_RESET_B_MUX_MODE_MASK
)

	)

17719 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_RESET_B_SION_MASK
 0x10u

	)

17720 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_RESET_B_SION_SHIFT
 4

	)

17722 
	#IOMUXC_SW_MUX_CTL_PAD_USB_H_DATA_MUX_MODE_MASK
 0x7u

	)

17723 
	#IOMUXC_SW_MUX_CTL_PAD_USB_H_DATA_MUX_MODE_SHIFT
 0

	)

17724 
	#IOMUXC_SW_MUX_CTL_PAD_USB_H_DATA_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_USB_H_DATA_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_USB_H_DATA_MUX_MODE_MASK
)

	)

17725 
	#IOMUXC_SW_MUX_CTL_PAD_USB_H_DATA_SION_MASK
 0x10u

	)

17726 
	#IOMUXC_SW_MUX_CTL_PAD_USB_H_DATA_SION_SHIFT
 4

	)

17728 
	#IOMUXC_SW_MUX_CTL_PAD_USB_H_STROBE_MUX_MODE_MASK
 0x7u

	)

17729 
	#IOMUXC_SW_MUX_CTL_PAD_USB_H_STROBE_MUX_MODE_SHIFT
 0

	)

17730 
	#IOMUXC_SW_MUX_CTL_PAD_USB_H_STROBE_MUX_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_MUX_CTL_PAD_USB_H_STROBE_MUX_MODE_SHIFT
))&
IOMUXC_SW_MUX_CTL_PAD_USB_H_STROBE_MUX_MODE_MASK
)

	)

17731 
	#IOMUXC_SW_MUX_CTL_PAD_USB_H_STROBE_SION_MASK
 0x10u

	)

17732 
	#IOMUXC_SW_MUX_CTL_PAD_USB_H_STROBE_SION_SHIFT
 4

	)

17734 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_DSE_MASK
 0x38u

	)

17735 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_DSE_SHIFT
 3

	)

17736 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_DSE_MASK
)

	)

17737 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_ODT_MASK
 0x700u

	)

17738 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_ODT_SHIFT
 8

	)

17739 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_ODT_MASK
)

	)

17740 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_PKE_MASK
 0x1000u

	)

17741 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_PKE_SHIFT
 12

	)

17742 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_PUE_MASK
 0x2000u

	)

17743 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_PUE_SHIFT
 13

	)

17744 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_PUS_MASK
 0xC000u

	)

17745 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_PUS_SHIFT
 14

	)

17746 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_PUS_MASK
)

	)

17747 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_HYS_MASK
 0x10000u

	)

17748 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_HYS_SHIFT
 16

	)

17749 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_DDR_INPUT_MASK
 0x20000u

	)

17750 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_DDR_INPUT_SHIFT
 17

	)

17751 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_DDR_SEL_MASK
 0xC0000u

	)

17752 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_DDR_SEL_SHIFT
 18

	)

17753 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_DDR_SEL_MASK
)

	)

17754 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_DO_TRIM_MASK
 0x300000u

	)

17755 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_DO_TRIM_SHIFT
 20

	)

17756 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_DO_TRIM_MASK
)

	)

17758 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_DSE_MASK
 0x38u

	)

17759 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_DSE_SHIFT
 3

	)

17760 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_DSE_MASK
)

	)

17761 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_ODT_MASK
 0x700u

	)

17762 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_ODT_SHIFT
 8

	)

17763 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_ODT_MASK
)

	)

17764 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_PKE_MASK
 0x1000u

	)

17765 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_PKE_SHIFT
 12

	)

17766 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_PUE_MASK
 0x2000u

	)

17767 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_PUE_SHIFT
 13

	)

17768 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_PUS_MASK
 0xC000u

	)

17769 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_PUS_SHIFT
 14

	)

17770 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_PUS_MASK
)

	)

17771 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_HYS_MASK
 0x10000u

	)

17772 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_HYS_SHIFT
 16

	)

17773 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_DDR_INPUT_MASK
 0x20000u

	)

17774 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_DDR_INPUT_SHIFT
 17

	)

17775 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_DDR_SEL_MASK
 0xC0000u

	)

17776 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_DDR_SEL_SHIFT
 18

	)

17777 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_DDR_SEL_MASK
)

	)

17778 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_DO_TRIM_MASK
 0x300000u

	)

17779 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_DO_TRIM_SHIFT
 20

	)

17780 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_DO_TRIM_MASK
)

	)

17782 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_DSE_MASK
 0x38u

	)

17783 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_DSE_SHIFT
 3

	)

17784 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_DSE_MASK
)

	)

17785 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_ODT_MASK
 0x700u

	)

17786 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_ODT_SHIFT
 8

	)

17787 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_ODT_MASK
)

	)

17788 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_PKE_MASK
 0x1000u

	)

17789 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_PKE_SHIFT
 12

	)

17790 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_PUE_MASK
 0x2000u

	)

17791 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_PUE_SHIFT
 13

	)

17792 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_PUS_MASK
 0xC000u

	)

17793 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_PUS_SHIFT
 14

	)

17794 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_PUS_MASK
)

	)

17795 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_HYS_MASK
 0x10000u

	)

17796 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_HYS_SHIFT
 16

	)

17797 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_DDR_INPUT_MASK
 0x20000u

	)

17798 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_DDR_INPUT_SHIFT
 17

	)

17799 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_DDR_SEL_MASK
 0xC0000u

	)

17800 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_DDR_SEL_SHIFT
 18

	)

17801 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_DDR_SEL_MASK
)

	)

17802 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_DO_TRIM_MASK
 0x300000u

	)

17803 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_DO_TRIM_SHIFT
 20

	)

17804 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_DO_TRIM_MASK
)

	)

17806 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_DSE_MASK
 0x38u

	)

17807 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_DSE_SHIFT
 3

	)

17808 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_DSE_MASK
)

	)

17809 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_ODT_MASK
 0x700u

	)

17810 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_ODT_SHIFT
 8

	)

17811 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_ODT_MASK
)

	)

17812 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_PKE_MASK
 0x1000u

	)

17813 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_PKE_SHIFT
 12

	)

17814 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_PUE_MASK
 0x2000u

	)

17815 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_PUE_SHIFT
 13

	)

17816 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_PUS_MASK
 0xC000u

	)

17817 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_PUS_SHIFT
 14

	)

17818 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_PUS_MASK
)

	)

17819 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_HYS_MASK
 0x10000u

	)

17820 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_HYS_SHIFT
 16

	)

17821 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_DDR_INPUT_MASK
 0x20000u

	)

17822 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_DDR_INPUT_SHIFT
 17

	)

17823 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_DDR_SEL_MASK
 0xC0000u

	)

17824 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_DDR_SEL_SHIFT
 18

	)

17825 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_DDR_SEL_MASK
)

	)

17826 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_DO_TRIM_MASK
 0x300000u

	)

17827 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_DO_TRIM_SHIFT
 20

	)

17828 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_DO_TRIM_MASK
)

	)

17830 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_DSE_MASK
 0x38u

	)

17831 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_DSE_SHIFT
 3

	)

17832 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_DSE_MASK
)

	)

17833 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_ODT_MASK
 0x700u

	)

17834 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_ODT_SHIFT
 8

	)

17835 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_ODT_MASK
)

	)

17836 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_PKE_MASK
 0x1000u

	)

17837 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_PKE_SHIFT
 12

	)

17838 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_PUE_MASK
 0x2000u

	)

17839 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_PUE_SHIFT
 13

	)

17840 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_PUS_MASK
 0xC000u

	)

17841 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_PUS_SHIFT
 14

	)

17842 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_PUS_MASK
)

	)

17843 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_HYS_MASK
 0x10000u

	)

17844 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_HYS_SHIFT
 16

	)

17845 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_DDR_INPUT_MASK
 0x20000u

	)

17846 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_DDR_INPUT_SHIFT
 17

	)

17847 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_DDR_SEL_MASK
 0xC0000u

	)

17848 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_DDR_SEL_SHIFT
 18

	)

17849 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_DDR_SEL_MASK
)

	)

17850 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_DO_TRIM_MASK
 0x300000u

	)

17851 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_DO_TRIM_SHIFT
 20

	)

17852 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_DO_TRIM_MASK
)

	)

17854 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_DSE_MASK
 0x38u

	)

17855 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_DSE_SHIFT
 3

	)

17856 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_DSE_MASK
)

	)

17857 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_ODT_MASK
 0x700u

	)

17858 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_ODT_SHIFT
 8

	)

17859 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_ODT_MASK
)

	)

17860 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_PKE_MASK
 0x1000u

	)

17861 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_PKE_SHIFT
 12

	)

17862 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_PUE_MASK
 0x2000u

	)

17863 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_PUE_SHIFT
 13

	)

17864 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_PUS_MASK
 0xC000u

	)

17865 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_PUS_SHIFT
 14

	)

17866 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_PUS_MASK
)

	)

17867 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_HYS_MASK
 0x10000u

	)

17868 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_HYS_SHIFT
 16

	)

17869 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_DDR_INPUT_MASK
 0x20000u

	)

17870 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_DDR_INPUT_SHIFT
 17

	)

17871 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_DDR_SEL_MASK
 0xC0000u

	)

17872 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_DDR_SEL_SHIFT
 18

	)

17873 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_DDR_SEL_MASK
)

	)

17874 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_DO_TRIM_MASK
 0x300000u

	)

17875 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_DO_TRIM_SHIFT
 20

	)

17876 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_DO_TRIM_MASK
)

	)

17878 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_DSE_MASK
 0x38u

	)

17879 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_DSE_SHIFT
 3

	)

17880 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_DSE_MASK
)

	)

17881 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_ODT_MASK
 0x700u

	)

17882 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_ODT_SHIFT
 8

	)

17883 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_ODT_MASK
)

	)

17884 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_PKE_MASK
 0x1000u

	)

17885 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_PKE_SHIFT
 12

	)

17886 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_PUE_MASK
 0x2000u

	)

17887 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_PUE_SHIFT
 13

	)

17888 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_PUS_MASK
 0xC000u

	)

17889 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_PUS_SHIFT
 14

	)

17890 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_PUS_MASK
)

	)

17891 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_HYS_MASK
 0x10000u

	)

17892 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_HYS_SHIFT
 16

	)

17893 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_DDR_INPUT_MASK
 0x20000u

	)

17894 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_DDR_INPUT_SHIFT
 17

	)

17895 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_DDR_SEL_MASK
 0xC0000u

	)

17896 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_DDR_SEL_SHIFT
 18

	)

17897 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_DDR_SEL_MASK
)

	)

17898 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_DO_TRIM_MASK
 0x300000u

	)

17899 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_DO_TRIM_SHIFT
 20

	)

17900 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_DO_TRIM_MASK
)

	)

17902 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_DSE_MASK
 0x38u

	)

17903 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_DSE_SHIFT
 3

	)

17904 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_DSE_MASK
)

	)

17905 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_ODT_MASK
 0x700u

	)

17906 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_ODT_SHIFT
 8

	)

17907 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_ODT_MASK
)

	)

17908 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_PKE_MASK
 0x1000u

	)

17909 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_PKE_SHIFT
 12

	)

17910 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_PUE_MASK
 0x2000u

	)

17911 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_PUE_SHIFT
 13

	)

17912 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_PUS_MASK
 0xC000u

	)

17913 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_PUS_SHIFT
 14

	)

17914 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_PUS_MASK
)

	)

17915 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_HYS_MASK
 0x10000u

	)

17916 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_HYS_SHIFT
 16

	)

17917 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_DDR_INPUT_MASK
 0x20000u

	)

17918 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_DDR_INPUT_SHIFT
 17

	)

17919 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_DDR_SEL_MASK
 0xC0000u

	)

17920 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_DDR_SEL_SHIFT
 18

	)

17921 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_DDR_SEL_MASK
)

	)

17922 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_DO_TRIM_MASK
 0x300000u

	)

17923 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_DO_TRIM_SHIFT
 20

	)

17924 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_DO_TRIM_MASK
)

	)

17926 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_DSE_MASK
 0x38u

	)

17927 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_DSE_SHIFT
 3

	)

17928 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_DSE_MASK
)

	)

17929 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_ODT_MASK
 0x700u

	)

17930 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_ODT_SHIFT
 8

	)

17931 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_ODT_MASK
)

	)

17932 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_PKE_MASK
 0x1000u

	)

17933 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_PKE_SHIFT
 12

	)

17934 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_PUE_MASK
 0x2000u

	)

17935 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_PUE_SHIFT
 13

	)

17936 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_PUS_MASK
 0xC000u

	)

17937 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_PUS_SHIFT
 14

	)

17938 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_PUS_MASK
)

	)

17939 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_HYS_MASK
 0x10000u

	)

17940 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_HYS_SHIFT
 16

	)

17941 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_DDR_INPUT_MASK
 0x20000u

	)

17942 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_DDR_INPUT_SHIFT
 17

	)

17943 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_DDR_SEL_MASK
 0xC0000u

	)

17944 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_DDR_SEL_SHIFT
 18

	)

17945 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_DDR_SEL_MASK
)

	)

17946 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_DO_TRIM_MASK
 0x300000u

	)

17947 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_DO_TRIM_SHIFT
 20

	)

17948 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_DO_TRIM_MASK
)

	)

17950 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_DSE_MASK
 0x38u

	)

17951 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_DSE_SHIFT
 3

	)

17952 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_DSE_MASK
)

	)

17953 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_ODT_MASK
 0x700u

	)

17954 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_ODT_SHIFT
 8

	)

17955 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_ODT_MASK
)

	)

17956 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_PKE_MASK
 0x1000u

	)

17957 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_PKE_SHIFT
 12

	)

17958 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_PUE_MASK
 0x2000u

	)

17959 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_PUE_SHIFT
 13

	)

17960 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_PUS_MASK
 0xC000u

	)

17961 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_PUS_SHIFT
 14

	)

17962 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_PUS_MASK
)

	)

17963 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_HYS_MASK
 0x10000u

	)

17964 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_HYS_SHIFT
 16

	)

17965 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_DDR_INPUT_MASK
 0x20000u

	)

17966 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_DDR_INPUT_SHIFT
 17

	)

17967 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_DDR_SEL_MASK
 0xC0000u

	)

17968 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_DDR_SEL_SHIFT
 18

	)

17969 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_DDR_SEL_MASK
)

	)

17970 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_DO_TRIM_MASK
 0x300000u

	)

17971 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_DO_TRIM_SHIFT
 20

	)

17972 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_DO_TRIM_MASK
)

	)

17974 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_DSE_MASK
 0x38u

	)

17975 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_DSE_SHIFT
 3

	)

17976 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_DSE_MASK
)

	)

17977 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_ODT_MASK
 0x700u

	)

17978 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_ODT_SHIFT
 8

	)

17979 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_ODT_MASK
)

	)

17980 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_PKE_MASK
 0x1000u

	)

17981 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_PKE_SHIFT
 12

	)

17982 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_PUE_MASK
 0x2000u

	)

17983 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_PUE_SHIFT
 13

	)

17984 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_PUS_MASK
 0xC000u

	)

17985 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_PUS_SHIFT
 14

	)

17986 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_PUS_MASK
)

	)

17987 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_HYS_MASK
 0x10000u

	)

17988 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_HYS_SHIFT
 16

	)

17989 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_DDR_INPUT_MASK
 0x20000u

	)

17990 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_DDR_INPUT_SHIFT
 17

	)

17991 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_DDR_SEL_MASK
 0xC0000u

	)

17992 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_DDR_SEL_SHIFT
 18

	)

17993 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_DDR_SEL_MASK
)

	)

17994 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_DO_TRIM_MASK
 0x300000u

	)

17995 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_DO_TRIM_SHIFT
 20

	)

17996 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_DO_TRIM_MASK
)

	)

17998 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_DSE_MASK
 0x38u

	)

17999 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_DSE_SHIFT
 3

	)

18000 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_DSE_MASK
)

	)

18001 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_ODT_MASK
 0x700u

	)

18002 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_ODT_SHIFT
 8

	)

18003 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_ODT_MASK
)

	)

18004 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_PKE_MASK
 0x1000u

	)

18005 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_PKE_SHIFT
 12

	)

18006 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_PUE_MASK
 0x2000u

	)

18007 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_PUE_SHIFT
 13

	)

18008 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_PUS_MASK
 0xC000u

	)

18009 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_PUS_SHIFT
 14

	)

18010 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_PUS_MASK
)

	)

18011 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_HYS_MASK
 0x10000u

	)

18012 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_HYS_SHIFT
 16

	)

18013 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_DDR_INPUT_MASK
 0x20000u

	)

18014 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_DDR_INPUT_SHIFT
 17

	)

18015 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_DDR_SEL_MASK
 0xC0000u

	)

18016 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_DDR_SEL_SHIFT
 18

	)

18017 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_DDR_SEL_MASK
)

	)

18018 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_DO_TRIM_MASK
 0x300000u

	)

18019 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_DO_TRIM_SHIFT
 20

	)

18020 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_DO_TRIM_MASK
)

	)

18022 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_DSE_MASK
 0x38u

	)

18023 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_DSE_SHIFT
 3

	)

18024 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_DSE_MASK
)

	)

18025 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_ODT_MASK
 0x700u

	)

18026 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_ODT_SHIFT
 8

	)

18027 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_ODT_MASK
)

	)

18028 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_PKE_MASK
 0x1000u

	)

18029 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_PKE_SHIFT
 12

	)

18030 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_PUE_MASK
 0x2000u

	)

18031 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_PUE_SHIFT
 13

	)

18032 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_PUS_MASK
 0xC000u

	)

18033 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_PUS_SHIFT
 14

	)

18034 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_PUS_MASK
)

	)

18035 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_HYS_MASK
 0x10000u

	)

18036 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_HYS_SHIFT
 16

	)

18037 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_DDR_INPUT_MASK
 0x20000u

	)

18038 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_DDR_INPUT_SHIFT
 17

	)

18039 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_DDR_SEL_MASK
 0xC0000u

	)

18040 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_DDR_SEL_SHIFT
 18

	)

18041 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_DDR_SEL_MASK
)

	)

18042 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_DO_TRIM_MASK
 0x300000u

	)

18043 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_DO_TRIM_SHIFT
 20

	)

18044 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_DO_TRIM_MASK
)

	)

18046 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_DSE_MASK
 0x38u

	)

18047 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_DSE_SHIFT
 3

	)

18048 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_DSE_MASK
)

	)

18049 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_ODT_MASK
 0x700u

	)

18050 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_ODT_SHIFT
 8

	)

18051 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_ODT_MASK
)

	)

18052 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_PKE_MASK
 0x1000u

	)

18053 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_PKE_SHIFT
 12

	)

18054 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_PUE_MASK
 0x2000u

	)

18055 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_PUE_SHIFT
 13

	)

18056 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_PUS_MASK
 0xC000u

	)

18057 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_PUS_SHIFT
 14

	)

18058 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_PUS_MASK
)

	)

18059 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_HYS_MASK
 0x10000u

	)

18060 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_HYS_SHIFT
 16

	)

18061 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_DDR_INPUT_MASK
 0x20000u

	)

18062 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_DDR_INPUT_SHIFT
 17

	)

18063 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_DDR_SEL_MASK
 0xC0000u

	)

18064 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_DDR_SEL_SHIFT
 18

	)

18065 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_DDR_SEL_MASK
)

	)

18066 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_DO_TRIM_MASK
 0x300000u

	)

18067 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_DO_TRIM_SHIFT
 20

	)

18068 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_DO_TRIM_MASK
)

	)

18070 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_DSE_MASK
 0x38u

	)

18071 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_DSE_SHIFT
 3

	)

18072 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_DSE_MASK
)

	)

18073 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_ODT_MASK
 0x700u

	)

18074 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_ODT_SHIFT
 8

	)

18075 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_ODT_MASK
)

	)

18076 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_PKE_MASK
 0x1000u

	)

18077 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_PKE_SHIFT
 12

	)

18078 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_PUE_MASK
 0x2000u

	)

18079 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_PUE_SHIFT
 13

	)

18080 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_PUS_MASK
 0xC000u

	)

18081 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_PUS_SHIFT
 14

	)

18082 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_PUS_MASK
)

	)

18083 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_HYS_MASK
 0x10000u

	)

18084 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_HYS_SHIFT
 16

	)

18085 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_DDR_INPUT_MASK
 0x20000u

	)

18086 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_DDR_INPUT_SHIFT
 17

	)

18087 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_DDR_SEL_MASK
 0xC0000u

	)

18088 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_DDR_SEL_SHIFT
 18

	)

18089 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_DDR_SEL_MASK
)

	)

18090 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_DO_TRIM_MASK
 0x300000u

	)

18091 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_DO_TRIM_SHIFT
 20

	)

18092 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_DO_TRIM_MASK
)

	)

18094 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_DSE_MASK
 0x38u

	)

18095 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_DSE_SHIFT
 3

	)

18096 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_DSE_MASK
)

	)

18097 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_ODT_MASK
 0x700u

	)

18098 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_ODT_SHIFT
 8

	)

18099 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_ODT_MASK
)

	)

18100 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_PKE_MASK
 0x1000u

	)

18101 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_PKE_SHIFT
 12

	)

18102 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_PUE_MASK
 0x2000u

	)

18103 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_PUE_SHIFT
 13

	)

18104 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_PUS_MASK
 0xC000u

	)

18105 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_PUS_SHIFT
 14

	)

18106 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_PUS_MASK
)

	)

18107 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_HYS_MASK
 0x10000u

	)

18108 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_HYS_SHIFT
 16

	)

18109 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_DDR_INPUT_MASK
 0x20000u

	)

18110 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_DDR_INPUT_SHIFT
 17

	)

18111 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_DDR_SEL_MASK
 0xC0000u

	)

18112 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_DDR_SEL_SHIFT
 18

	)

18113 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_DDR_SEL_MASK
)

	)

18114 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_DO_TRIM_MASK
 0x300000u

	)

18115 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_DO_TRIM_SHIFT
 20

	)

18116 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_DO_TRIM_MASK
)

	)

18118 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DSE_MASK
 0x38u

	)

18119 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DSE_SHIFT
 3

	)

18120 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DSE_MASK
)

	)

18121 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_ODT_MASK
 0x700u

	)

18122 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_ODT_SHIFT
 8

	)

18123 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_ODT_MASK
)

	)

18124 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_PKE_MASK
 0x1000u

	)

18125 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_PKE_SHIFT
 12

	)

18126 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_PUE_MASK
 0x2000u

	)

18127 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_PUE_SHIFT
 13

	)

18128 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_PUS_MASK
 0xC000u

	)

18129 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_PUS_SHIFT
 14

	)

18130 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_PUS_MASK
)

	)

18131 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_HYS_MASK
 0x10000u

	)

18132 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_HYS_SHIFT
 16

	)

18133 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DDR_INPUT_MASK
 0x20000u

	)

18134 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DDR_INPUT_SHIFT
 17

	)

18135 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DDR_SEL_MASK
 0xC0000u

	)

18136 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DDR_SEL_SHIFT
 18

	)

18137 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DDR_SEL_MASK
)

	)

18138 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DO_TRIM_MASK
 0x300000u

	)

18139 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DO_TRIM_SHIFT
 20

	)

18140 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_DO_TRIM_MASK
)

	)

18142 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DSE_MASK
 0x38u

	)

18143 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DSE_SHIFT
 3

	)

18144 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DSE_MASK
)

	)

18145 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_ODT_MASK
 0x700u

	)

18146 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_ODT_SHIFT
 8

	)

18147 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_ODT_MASK
)

	)

18148 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_PKE_MASK
 0x1000u

	)

18149 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_PKE_SHIFT
 12

	)

18150 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_PUE_MASK
 0x2000u

	)

18151 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_PUE_SHIFT
 13

	)

18152 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_PUS_MASK
 0xC000u

	)

18153 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_PUS_SHIFT
 14

	)

18154 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_PUS_MASK
)

	)

18155 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_HYS_MASK
 0x10000u

	)

18156 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_HYS_SHIFT
 16

	)

18157 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DDR_INPUT_MASK
 0x20000u

	)

18158 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DDR_INPUT_SHIFT
 17

	)

18159 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DDR_SEL_MASK
 0xC0000u

	)

18160 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DDR_SEL_SHIFT
 18

	)

18161 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DDR_SEL_MASK
)

	)

18162 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DO_TRIM_MASK
 0x300000u

	)

18163 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DO_TRIM_SHIFT
 20

	)

18164 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_DO_TRIM_MASK
)

	)

18166 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DSE_MASK
 0x38u

	)

18167 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DSE_SHIFT
 3

	)

18168 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DSE_MASK
)

	)

18169 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_ODT_MASK
 0x700u

	)

18170 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_ODT_SHIFT
 8

	)

18171 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_ODT_MASK
)

	)

18172 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_PKE_MASK
 0x1000u

	)

18173 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_PKE_SHIFT
 12

	)

18174 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_PUE_MASK
 0x2000u

	)

18175 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_PUE_SHIFT
 13

	)

18176 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_PUS_MASK
 0xC000u

	)

18177 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_PUS_SHIFT
 14

	)

18178 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_PUS_MASK
)

	)

18179 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_HYS_MASK
 0x10000u

	)

18180 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_HYS_SHIFT
 16

	)

18181 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DDR_INPUT_MASK
 0x20000u

	)

18182 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DDR_INPUT_SHIFT
 17

	)

18183 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DDR_SEL_MASK
 0xC0000u

	)

18184 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DDR_SEL_SHIFT
 18

	)

18185 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DDR_SEL_MASK
)

	)

18186 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DO_TRIM_MASK
 0x300000u

	)

18187 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DO_TRIM_SHIFT
 20

	)

18188 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_DO_TRIM_MASK
)

	)

18190 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DSE_MASK
 0x38u

	)

18191 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DSE_SHIFT
 3

	)

18192 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DSE_MASK
)

	)

18193 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_ODT_MASK
 0x700u

	)

18194 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_ODT_SHIFT
 8

	)

18195 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_ODT_MASK
)

	)

18196 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_PKE_MASK
 0x1000u

	)

18197 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_PKE_SHIFT
 12

	)

18198 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_PUE_MASK
 0x2000u

	)

18199 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_PUE_SHIFT
 13

	)

18200 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_PUS_MASK
 0xC000u

	)

18201 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_PUS_SHIFT
 14

	)

18202 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_PUS_MASK
)

	)

18203 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_HYS_MASK
 0x10000u

	)

18204 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_HYS_SHIFT
 16

	)

18205 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DDR_INPUT_MASK
 0x20000u

	)

18206 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DDR_INPUT_SHIFT
 17

	)

18207 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DDR_SEL_MASK
 0xC0000u

	)

18208 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DDR_SEL_SHIFT
 18

	)

18209 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DDR_SEL_MASK
)

	)

18210 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DO_TRIM_MASK
 0x300000u

	)

18211 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DO_TRIM_SHIFT
 20

	)

18212 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_DO_TRIM_MASK
)

	)

18214 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_DSE_MASK
 0x38u

	)

18215 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_DSE_SHIFT
 3

	)

18216 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_DSE_MASK
)

	)

18217 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_ODT_MASK
 0x700u

	)

18218 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_ODT_SHIFT
 8

	)

18219 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_ODT_MASK
)

	)

18220 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_PKE_MASK
 0x1000u

	)

18221 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_PKE_SHIFT
 12

	)

18222 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_PUE_MASK
 0x2000u

	)

18223 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_PUE_SHIFT
 13

	)

18224 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_PUS_MASK
 0xC000u

	)

18225 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_PUS_SHIFT
 14

	)

18226 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_PUS_MASK
)

	)

18227 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_HYS_MASK
 0x10000u

	)

18228 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_HYS_SHIFT
 16

	)

18229 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_DDR_INPUT_MASK
 0x20000u

	)

18230 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_DDR_INPUT_SHIFT
 17

	)

18231 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_DDR_SEL_MASK
 0xC0000u

	)

18232 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_DDR_SEL_SHIFT
 18

	)

18233 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_DDR_SEL_MASK
)

	)

18234 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_DO_TRIM_MASK
 0x300000u

	)

18235 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_DO_TRIM_SHIFT
 20

	)

18236 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_DO_TRIM_MASK
)

	)

18238 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_DSE_MASK
 0x38u

	)

18239 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_DSE_SHIFT
 3

	)

18240 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_DSE_MASK
)

	)

18241 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_ODT_MASK
 0x700u

	)

18242 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_ODT_SHIFT
 8

	)

18243 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_ODT_MASK
)

	)

18244 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_PKE_MASK
 0x1000u

	)

18245 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_PKE_SHIFT
 12

	)

18246 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_PUE_MASK
 0x2000u

	)

18247 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_PUE_SHIFT
 13

	)

18248 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_PUS_MASK
 0xC000u

	)

18249 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_PUS_SHIFT
 14

	)

18250 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_PUS_MASK
)

	)

18251 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_HYS_MASK
 0x10000u

	)

18252 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_HYS_SHIFT
 16

	)

18253 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_DDR_INPUT_MASK
 0x20000u

	)

18254 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_DDR_INPUT_SHIFT
 17

	)

18255 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_DDR_SEL_MASK
 0xC0000u

	)

18256 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_DDR_SEL_SHIFT
 18

	)

18257 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_DDR_SEL_MASK
)

	)

18258 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_DO_TRIM_MASK
 0x300000u

	)

18259 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_DO_TRIM_SHIFT
 20

	)

18260 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_DO_TRIM_MASK
)

	)

18262 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_DSE_MASK
 0x38u

	)

18263 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_DSE_SHIFT
 3

	)

18264 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_DSE_MASK
)

	)

18265 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_ODT_MASK
 0x700u

	)

18266 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_ODT_SHIFT
 8

	)

18267 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_ODT_MASK
)

	)

18268 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_PKE_MASK
 0x1000u

	)

18269 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_PKE_SHIFT
 12

	)

18270 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_PUE_MASK
 0x2000u

	)

18271 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_PUE_SHIFT
 13

	)

18272 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_PUS_MASK
 0xC000u

	)

18273 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_PUS_SHIFT
 14

	)

18274 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_PUS_MASK
)

	)

18275 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_HYS_MASK
 0x10000u

	)

18276 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_HYS_SHIFT
 16

	)

18277 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_DDR_INPUT_MASK
 0x20000u

	)

18278 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_DDR_INPUT_SHIFT
 17

	)

18279 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_DDR_SEL_MASK
 0xC0000u

	)

18280 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_DDR_SEL_SHIFT
 18

	)

18281 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_DDR_SEL_MASK
)

	)

18282 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_DO_TRIM_MASK
 0x300000u

	)

18283 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_DO_TRIM_SHIFT
 20

	)

18284 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_DO_TRIM_MASK
)

	)

18286 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_DSE_MASK
 0x38u

	)

18287 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_DSE_SHIFT
 3

	)

18288 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_DSE_MASK
)

	)

18289 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_ODT_MASK
 0x700u

	)

18290 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_ODT_SHIFT
 8

	)

18291 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_ODT_MASK
)

	)

18292 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_PKE_MASK
 0x1000u

	)

18293 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_PKE_SHIFT
 12

	)

18294 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_PUE_MASK
 0x2000u

	)

18295 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_PUE_SHIFT
 13

	)

18296 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_PUS_MASK
 0xC000u

	)

18297 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_PUS_SHIFT
 14

	)

18298 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_PUS_MASK
)

	)

18299 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_HYS_MASK
 0x10000u

	)

18300 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_HYS_SHIFT
 16

	)

18301 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_DDR_INPUT_MASK
 0x20000u

	)

18302 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_DDR_INPUT_SHIFT
 17

	)

18303 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_DDR_SEL_MASK
 0xC0000u

	)

18304 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_DDR_SEL_SHIFT
 18

	)

18305 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_DDR_SEL_MASK
)

	)

18306 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_DO_TRIM_MASK
 0x300000u

	)

18307 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_DO_TRIM_SHIFT
 20

	)

18308 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_DO_TRIM_MASK
)

	)

18310 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_DSE_MASK
 0x38u

	)

18311 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_DSE_SHIFT
 3

	)

18312 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_DSE_MASK
)

	)

18313 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_ODT_MASK
 0x700u

	)

18314 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_ODT_SHIFT
 8

	)

18315 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_ODT_MASK
)

	)

18316 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_PKE_MASK
 0x1000u

	)

18317 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_PKE_SHIFT
 12

	)

18318 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_PUE_MASK
 0x2000u

	)

18319 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_PUE_SHIFT
 13

	)

18320 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_PUS_MASK
 0xC000u

	)

18321 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_PUS_SHIFT
 14

	)

18322 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_PUS_MASK
)

	)

18323 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_HYS_MASK
 0x10000u

	)

18324 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_HYS_SHIFT
 16

	)

18325 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_DDR_INPUT_MASK
 0x20000u

	)

18326 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_DDR_INPUT_SHIFT
 17

	)

18327 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_DDR_SEL_MASK
 0xC0000u

	)

18328 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_DDR_SEL_SHIFT
 18

	)

18329 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_DDR_SEL_MASK
)

	)

18330 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_DO_TRIM_MASK
 0x300000u

	)

18331 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_DO_TRIM_SHIFT
 20

	)

18332 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_DO_TRIM_MASK
)

	)

18334 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_DSE_MASK
 0x38u

	)

18335 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_DSE_SHIFT
 3

	)

18336 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_DSE_MASK
)

	)

18337 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_ODT_MASK
 0x700u

	)

18338 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_ODT_SHIFT
 8

	)

18339 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_ODT_MASK
)

	)

18340 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_PKE_MASK
 0x1000u

	)

18341 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_PKE_SHIFT
 12

	)

18342 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_PUE_MASK
 0x2000u

	)

18343 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_PUE_SHIFT
 13

	)

18344 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_PUS_MASK
 0xC000u

	)

18345 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_PUS_SHIFT
 14

	)

18346 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_PUS_MASK
)

	)

18347 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_HYS_MASK
 0x10000u

	)

18348 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_HYS_SHIFT
 16

	)

18349 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_DDR_INPUT_MASK
 0x20000u

	)

18350 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_DDR_INPUT_SHIFT
 17

	)

18351 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_DDR_SEL_MASK
 0xC0000u

	)

18352 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_DDR_SEL_SHIFT
 18

	)

18353 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_DDR_SEL_MASK
)

	)

18354 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_DO_TRIM_MASK
 0x300000u

	)

18355 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_DO_TRIM_SHIFT
 20

	)

18356 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_DO_TRIM_MASK
)

	)

18358 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_DSE_MASK
 0x38u

	)

18359 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_DSE_SHIFT
 3

	)

18360 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_DSE_MASK
)

	)

18361 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_ODT_MASK
 0x700u

	)

18362 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_ODT_SHIFT
 8

	)

18363 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_ODT_MASK
)

	)

18364 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_PKE_MASK
 0x1000u

	)

18365 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_PKE_SHIFT
 12

	)

18366 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_PUE_MASK
 0x2000u

	)

18367 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_PUE_SHIFT
 13

	)

18368 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_PUS_MASK
 0xC000u

	)

18369 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_PUS_SHIFT
 14

	)

18370 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_PUS_MASK
)

	)

18371 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_HYS_MASK
 0x10000u

	)

18372 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_HYS_SHIFT
 16

	)

18373 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_DDR_INPUT_MASK
 0x20000u

	)

18374 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_DDR_INPUT_SHIFT
 17

	)

18375 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_DDR_SEL_MASK
 0xC0000u

	)

18376 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_DDR_SEL_SHIFT
 18

	)

18377 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_DDR_SEL_MASK
)

	)

18378 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_DO_TRIM_MASK
 0x300000u

	)

18379 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_DO_TRIM_SHIFT
 20

	)

18380 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_DO_TRIM_MASK
)

	)

18382 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DSE_MASK
 0x38u

	)

18383 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DSE_SHIFT
 3

	)

18384 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DSE_MASK
)

	)

18385 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_ODT_MASK
 0x700u

	)

18386 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_ODT_SHIFT
 8

	)

18387 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_ODT_MASK
)

	)

18388 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_PKE_MASK
 0x1000u

	)

18389 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_PKE_SHIFT
 12

	)

18390 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_PUE_MASK
 0x2000u

	)

18391 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_PUE_SHIFT
 13

	)

18392 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_PUS_MASK
 0xC000u

	)

18393 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_PUS_SHIFT
 14

	)

18394 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_PUS_MASK
)

	)

18395 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_HYS_MASK
 0x10000u

	)

18396 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_HYS_SHIFT
 16

	)

18397 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DDR_INPUT_MASK
 0x20000u

	)

18398 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DDR_INPUT_SHIFT
 17

	)

18399 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DDR_SEL_MASK
 0xC0000u

	)

18400 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DDR_SEL_SHIFT
 18

	)

18401 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DDR_SEL_MASK
)

	)

18402 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DO_TRIM_MASK
 0x300000u

	)

18403 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DO_TRIM_SHIFT
 20

	)

18404 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_DO_TRIM_MASK
)

	)

18406 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DSE_MASK
 0x38u

	)

18407 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DSE_SHIFT
 3

	)

18408 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DSE_MASK
)

	)

18409 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_ODT_MASK
 0x700u

	)

18410 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_ODT_SHIFT
 8

	)

18411 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_ODT_MASK
)

	)

18412 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_PKE_MASK
 0x1000u

	)

18413 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_PKE_SHIFT
 12

	)

18414 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_PUE_MASK
 0x2000u

	)

18415 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_PUE_SHIFT
 13

	)

18416 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_PUS_MASK
 0xC000u

	)

18417 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_PUS_SHIFT
 14

	)

18418 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_PUS_MASK
)

	)

18419 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_HYS_MASK
 0x10000u

	)

18420 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_HYS_SHIFT
 16

	)

18421 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DDR_INPUT_MASK
 0x20000u

	)

18422 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DDR_INPUT_SHIFT
 17

	)

18423 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DDR_SEL_MASK
 0xC0000u

	)

18424 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DDR_SEL_SHIFT
 18

	)

18425 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DDR_SEL_MASK
)

	)

18426 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DO_TRIM_MASK
 0x300000u

	)

18427 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DO_TRIM_SHIFT
 20

	)

18428 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_DO_TRIM_MASK
)

	)

18430 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DSE_MASK
 0x38u

	)

18431 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DSE_SHIFT
 3

	)

18432 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DSE_MASK
)

	)

18433 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_ODT_MASK
 0x700u

	)

18434 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_ODT_SHIFT
 8

	)

18435 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_ODT_MASK
)

	)

18436 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PKE_MASK
 0x1000u

	)

18437 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PKE_SHIFT
 12

	)

18438 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PUE_MASK
 0x2000u

	)

18439 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PUE_SHIFT
 13

	)

18440 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PUS_MASK
 0xC000u

	)

18441 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PUS_SHIFT
 14

	)

18442 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_PUS_MASK
)

	)

18443 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_HYS_MASK
 0x10000u

	)

18444 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_HYS_SHIFT
 16

	)

18445 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DDR_INPUT_MASK
 0x20000u

	)

18446 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DDR_INPUT_SHIFT
 17

	)

18447 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DDR_SEL_MASK
 0xC0000u

	)

18448 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DDR_SEL_SHIFT
 18

	)

18449 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DDR_SEL_MASK
)

	)

18450 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DO_TRIM_MASK
 0x300000u

	)

18451 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DO_TRIM_SHIFT
 20

	)

18452 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_DO_TRIM_MASK
)

	)

18454 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DSE_MASK
 0x38u

	)

18455 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DSE_SHIFT
 3

	)

18456 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DSE_MASK
)

	)

18457 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_ODT_MASK
 0x700u

	)

18458 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_ODT_SHIFT
 8

	)

18459 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_ODT_MASK
)

	)

18460 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PKE_MASK
 0x1000u

	)

18461 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PKE_SHIFT
 12

	)

18462 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUE_MASK
 0x2000u

	)

18463 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUE_SHIFT
 13

	)

18464 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUS_MASK
 0xC000u

	)

18465 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUS_SHIFT
 14

	)

18466 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_PUS_MASK
)

	)

18467 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_HYS_MASK
 0x10000u

	)

18468 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_HYS_SHIFT
 16

	)

18469 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DDR_INPUT_MASK
 0x20000u

	)

18470 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DDR_INPUT_SHIFT
 17

	)

18471 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DDR_SEL_MASK
 0xC0000u

	)

18472 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DDR_SEL_SHIFT
 18

	)

18473 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DDR_SEL_MASK
)

	)

18474 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DO_TRIM_MASK
 0x300000u

	)

18475 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DO_TRIM_SHIFT
 20

	)

18476 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_DO_TRIM_MASK
)

	)

18478 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DSE_MASK
 0x38u

	)

18479 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DSE_SHIFT
 3

	)

18480 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DSE_MASK
)

	)

18481 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_ODT_MASK
 0x700u

	)

18482 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_ODT_SHIFT
 8

	)

18483 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_ODT_MASK
)

	)

18484 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PKE_MASK
 0x1000u

	)

18485 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PKE_SHIFT
 12

	)

18486 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUE_MASK
 0x2000u

	)

18487 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUE_SHIFT
 13

	)

18488 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUS_MASK
 0xC000u

	)

18489 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUS_SHIFT
 14

	)

18490 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_PUS_MASK
)

	)

18491 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_HYS_MASK
 0x10000u

	)

18492 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_HYS_SHIFT
 16

	)

18493 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DDR_INPUT_MASK
 0x20000u

	)

18494 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DDR_INPUT_SHIFT
 17

	)

18495 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DDR_SEL_MASK
 0xC0000u

	)

18496 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DDR_SEL_SHIFT
 18

	)

18497 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DDR_SEL_MASK
)

	)

18498 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DO_TRIM_MASK
 0x300000u

	)

18499 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DO_TRIM_SHIFT
 20

	)

18500 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_DO_TRIM_MASK
)

	)

18502 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DSE_MASK
 0x38u

	)

18503 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DSE_SHIFT
 3

	)

18504 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DSE_MASK
)

	)

18505 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_ODT_MASK
 0x700u

	)

18506 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_ODT_SHIFT
 8

	)

18507 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_ODT_MASK
)

	)

18508 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_PKE_MASK
 0x1000u

	)

18509 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_PKE_SHIFT
 12

	)

18510 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_PUE_MASK
 0x2000u

	)

18511 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_PUE_SHIFT
 13

	)

18512 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_PUS_MASK
 0xC000u

	)

18513 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_PUS_SHIFT
 14

	)

18514 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_PUS_MASK
)

	)

18515 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_HYS_MASK
 0x10000u

	)

18516 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_HYS_SHIFT
 16

	)

18517 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DDR_INPUT_MASK
 0x20000u

	)

18518 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DDR_INPUT_SHIFT
 17

	)

18519 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DDR_SEL_MASK
 0xC0000u

	)

18520 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DDR_SEL_SHIFT
 18

	)

18521 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DDR_SEL_MASK
)

	)

18522 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DO_TRIM_MASK
 0x300000u

	)

18523 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DO_TRIM_SHIFT
 20

	)

18524 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DO_TRIM_MASK
)

	)

18525 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DO_TRIM_PADN_MASK
 0x3000000u

	)

18526 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DO_TRIM_PADN_SHIFT
 24

	)

18527 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DO_TRIM_PADN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DO_TRIM_PADN_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_DO_TRIM_PADN_MASK
)

	)

18529 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DSE_MASK
 0x38u

	)

18530 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DSE_SHIFT
 3

	)

18531 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DSE_MASK
)

	)

18532 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_ODT_MASK
 0x700u

	)

18533 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_ODT_SHIFT
 8

	)

18534 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_ODT_MASK
)

	)

18535 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_PKE_MASK
 0x1000u

	)

18536 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_PKE_SHIFT
 12

	)

18537 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_PUE_MASK
 0x2000u

	)

18538 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_PUE_SHIFT
 13

	)

18539 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_PUS_MASK
 0xC000u

	)

18540 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_PUS_SHIFT
 14

	)

18541 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_PUS_MASK
)

	)

18542 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_HYS_MASK
 0x10000u

	)

18543 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_HYS_SHIFT
 16

	)

18544 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DDR_INPUT_MASK
 0x20000u

	)

18545 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DDR_INPUT_SHIFT
 17

	)

18546 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DDR_SEL_MASK
 0xC0000u

	)

18547 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DDR_SEL_SHIFT
 18

	)

18548 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DDR_SEL_MASK
)

	)

18549 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DO_TRIM_MASK
 0x300000u

	)

18550 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DO_TRIM_SHIFT
 20

	)

18551 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DO_TRIM_MASK
)

	)

18552 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DO_TRIM_PADN_MASK
 0x3000000u

	)

18553 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DO_TRIM_PADN_SHIFT
 24

	)

18554 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DO_TRIM_PADN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DO_TRIM_PADN_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_DO_TRIM_PADN_MASK
)

	)

18556 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DSE_MASK
 0x38u

	)

18557 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DSE_SHIFT
 3

	)

18558 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DSE_MASK
)

	)

18559 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_ODT_MASK
 0x700u

	)

18560 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_ODT_SHIFT
 8

	)

18561 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_ODT_MASK
)

	)

18562 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_PKE_MASK
 0x1000u

	)

18563 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_PKE_SHIFT
 12

	)

18564 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_PUE_MASK
 0x2000u

	)

18565 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_PUE_SHIFT
 13

	)

18566 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_PUS_MASK
 0xC000u

	)

18567 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_PUS_SHIFT
 14

	)

18568 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_PUS_MASK
)

	)

18569 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_HYS_MASK
 0x10000u

	)

18570 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_HYS_SHIFT
 16

	)

18571 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DDR_INPUT_MASK
 0x20000u

	)

18572 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DDR_INPUT_SHIFT
 17

	)

18573 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DDR_SEL_MASK
 0xC0000u

	)

18574 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DDR_SEL_SHIFT
 18

	)

18575 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DDR_SEL_MASK
)

	)

18576 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DO_TRIM_MASK
 0x300000u

	)

18577 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DO_TRIM_SHIFT
 20

	)

18578 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DO_TRIM_MASK
)

	)

18579 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DO_TRIM_PADN_MASK
 0x3000000u

	)

18580 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DO_TRIM_PADN_SHIFT
 24

	)

18581 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DO_TRIM_PADN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DO_TRIM_PADN_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_DO_TRIM_PADN_MASK
)

	)

18583 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DSE_MASK
 0x38u

	)

18584 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DSE_SHIFT
 3

	)

18585 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DSE_MASK
)

	)

18586 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_ODT_MASK
 0x700u

	)

18587 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_ODT_SHIFT
 8

	)

18588 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_ODT_MASK
)

	)

18589 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_PKE_MASK
 0x1000u

	)

18590 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_PKE_SHIFT
 12

	)

18591 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_PUE_MASK
 0x2000u

	)

18592 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_PUE_SHIFT
 13

	)

18593 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_PUS_MASK
 0xC000u

	)

18594 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_PUS_SHIFT
 14

	)

18595 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_PUS_MASK
)

	)

18596 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_HYS_MASK
 0x10000u

	)

18597 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_HYS_SHIFT
 16

	)

18598 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DDR_INPUT_MASK
 0x20000u

	)

18599 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DDR_INPUT_SHIFT
 17

	)

18600 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DDR_SEL_MASK
 0xC0000u

	)

18601 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DDR_SEL_SHIFT
 18

	)

18602 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DDR_SEL_MASK
)

	)

18603 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DO_TRIM_MASK
 0x300000u

	)

18604 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DO_TRIM_SHIFT
 20

	)

18605 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DO_TRIM_MASK
)

	)

18606 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DO_TRIM_PADN_MASK
 0x3000000u

	)

18607 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DO_TRIM_PADN_SHIFT
 24

	)

18608 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DO_TRIM_PADN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DO_TRIM_PADN_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_DO_TRIM_PADN_MASK
)

	)

18610 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DSE_MASK
 0x38u

	)

18611 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DSE_SHIFT
 3

	)

18612 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DSE_MASK
)

	)

18613 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_ODT_MASK
 0x700u

	)

18614 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_ODT_SHIFT
 8

	)

18615 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_ODT_MASK
)

	)

18616 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_PKE_MASK
 0x1000u

	)

18617 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_PKE_SHIFT
 12

	)

18618 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_PUE_MASK
 0x2000u

	)

18619 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_PUE_SHIFT
 13

	)

18620 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_PUS_MASK
 0xC000u

	)

18621 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_PUS_SHIFT
 14

	)

18622 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_PUS_MASK
)

	)

18623 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_HYS_MASK
 0x10000u

	)

18624 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_HYS_SHIFT
 16

	)

18625 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DDR_INPUT_MASK
 0x20000u

	)

18626 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DDR_INPUT_SHIFT
 17

	)

18627 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DDR_SEL_MASK
 0xC0000u

	)

18628 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DDR_SEL_SHIFT
 18

	)

18629 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DDR_SEL_MASK
)

	)

18630 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DO_TRIM_MASK
 0x300000u

	)

18631 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DO_TRIM_SHIFT
 20

	)

18632 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DO_TRIM_MASK
)

	)

18633 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DO_TRIM_PADN_MASK
 0x3000000u

	)

18634 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DO_TRIM_PADN_SHIFT
 24

	)

18635 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DO_TRIM_PADN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DO_TRIM_PADN_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_DO_TRIM_PADN_MASK
)

	)

18637 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DSE_MASK
 0x38u

	)

18638 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DSE_SHIFT
 3

	)

18639 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DSE_MASK
)

	)

18640 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_ODT_MASK
 0x700u

	)

18641 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_ODT_SHIFT
 8

	)

18642 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_ODT_MASK
)

	)

18643 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PKE_MASK
 0x1000u

	)

18644 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PKE_SHIFT
 12

	)

18645 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUE_MASK
 0x2000u

	)

18646 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUE_SHIFT
 13

	)

18647 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUS_MASK
 0xC000u

	)

18648 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUS_SHIFT
 14

	)

18649 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_PUS_MASK
)

	)

18650 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_HYS_MASK
 0x10000u

	)

18651 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_HYS_SHIFT
 16

	)

18652 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_INPUT_MASK
 0x20000u

	)

18653 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_INPUT_SHIFT
 17

	)

18654 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_SEL_MASK
 0xC0000u

	)

18655 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_SEL_SHIFT
 18

	)

18656 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DDR_SEL_MASK
)

	)

18657 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DO_TRIM_MASK
 0x300000u

	)

18658 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DO_TRIM_SHIFT
 20

	)

18659 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_DO_TRIM_MASK
)

	)

18661 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_SRE_MASK
 0x1u

	)

18662 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_SRE_SHIFT
 0

	)

18663 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_DSE_MASK
 0x38u

	)

18664 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_DSE_SHIFT
 3

	)

18665 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_DSE_MASK
)

	)

18666 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_SPEED_MASK
 0xC0u

	)

18667 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_SPEED_SHIFT
 6

	)

18668 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_SPEED_MASK
)

	)

18669 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_ODE_MASK
 0x800u

	)

18670 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_ODE_SHIFT
 11

	)

18671 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PKE_MASK
 0x1000u

	)

18672 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PKE_SHIFT
 12

	)

18673 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PUE_MASK
 0x2000u

	)

18674 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PUE_SHIFT
 13

	)

18675 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PUS_MASK
 0xC000u

	)

18676 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PUS_SHIFT
 14

	)

18677 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_PUS_MASK
)

	)

18678 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_HYS_MASK
 0x10000u

	)

18679 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_HYS_SHIFT
 16

	)

18681 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_SRE_MASK
 0x1u

	)

18682 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_SRE_SHIFT
 0

	)

18683 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_DSE_MASK
 0x38u

	)

18684 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_DSE_SHIFT
 3

	)

18685 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_DSE_MASK
)

	)

18686 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_SPEED_MASK
 0xC0u

	)

18687 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_SPEED_SHIFT
 6

	)

18688 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_SPEED_MASK
)

	)

18689 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_ODE_MASK
 0x800u

	)

18690 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_ODE_SHIFT
 11

	)

18691 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PKE_MASK
 0x1000u

	)

18692 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PKE_SHIFT
 12

	)

18693 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PUE_MASK
 0x2000u

	)

18694 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PUE_SHIFT
 13

	)

18695 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PUS_MASK
 0xC000u

	)

18696 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PUS_SHIFT
 14

	)

18697 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_PUS_MASK
)

	)

18698 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_HYS_MASK
 0x10000u

	)

18699 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_HYS_SHIFT
 16

	)

18701 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_SRE_MASK
 0x1u

	)

18702 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_SRE_SHIFT
 0

	)

18703 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_DSE_MASK
 0x38u

	)

18704 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_DSE_SHIFT
 3

	)

18705 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_DSE_MASK
)

	)

18706 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_SPEED_MASK
 0xC0u

	)

18707 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_SPEED_SHIFT
 6

	)

18708 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_SPEED_MASK
)

	)

18709 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_ODE_MASK
 0x800u

	)

18710 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_ODE_SHIFT
 11

	)

18711 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PKE_MASK
 0x1000u

	)

18712 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PKE_SHIFT
 12

	)

18713 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PUE_MASK
 0x2000u

	)

18714 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PUE_SHIFT
 13

	)

18715 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PUS_MASK
 0xC000u

	)

18716 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PUS_SHIFT
 14

	)

18717 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_PUS_MASK
)

	)

18718 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_HYS_MASK
 0x10000u

	)

18719 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_HYS_SHIFT
 16

	)

18721 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_SRE_MASK
 0x1u

	)

18722 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_SRE_SHIFT
 0

	)

18723 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_DSE_MASK
 0x38u

	)

18724 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_DSE_SHIFT
 3

	)

18725 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_DSE_MASK
)

	)

18726 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_SPEED_MASK
 0xC0u

	)

18727 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_SPEED_SHIFT
 6

	)

18728 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_SPEED_MASK
)

	)

18729 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_ODE_MASK
 0x800u

	)

18730 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_ODE_SHIFT
 11

	)

18731 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PKE_MASK
 0x1000u

	)

18732 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PKE_SHIFT
 12

	)

18733 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PUE_MASK
 0x2000u

	)

18734 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PUE_SHIFT
 13

	)

18735 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PUS_MASK
 0xC000u

	)

18736 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PUS_SHIFT
 14

	)

18737 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_PUS_MASK
)

	)

18738 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_HYS_MASK
 0x10000u

	)

18739 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_HYS_SHIFT
 16

	)

18741 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_SRE_MASK
 0x1u

	)

18742 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_SRE_SHIFT
 0

	)

18743 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_DSE_MASK
 0x38u

	)

18744 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_DSE_SHIFT
 3

	)

18745 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_DSE_MASK
)

	)

18746 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_SPEED_MASK
 0xC0u

	)

18747 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_SPEED_SHIFT
 6

	)

18748 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_SPEED_MASK
)

	)

18749 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_ODE_MASK
 0x800u

	)

18750 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_ODE_SHIFT
 11

	)

18751 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PKE_MASK
 0x1000u

	)

18752 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PKE_SHIFT
 12

	)

18753 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PUE_MASK
 0x2000u

	)

18754 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PUE_SHIFT
 13

	)

18755 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PUS_MASK
 0xC000u

	)

18756 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PUS_SHIFT
 14

	)

18757 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_PUS_MASK
)

	)

18758 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_HYS_MASK
 0x10000u

	)

18759 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_HYS_SHIFT
 16

	)

18761 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_SRE_MASK
 0x1u

	)

18762 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_SRE_SHIFT
 0

	)

18763 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_DSE_MASK
 0x38u

	)

18764 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_DSE_SHIFT
 3

	)

18765 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_DSE_MASK
)

	)

18766 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_SPEED_MASK
 0xC0u

	)

18767 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_SPEED_SHIFT
 6

	)

18768 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_SPEED_MASK
)

	)

18769 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_ODE_MASK
 0x800u

	)

18770 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_ODE_SHIFT
 11

	)

18771 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_PKE_MASK
 0x1000u

	)

18772 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_PKE_SHIFT
 12

	)

18773 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_PUE_MASK
 0x2000u

	)

18774 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_PUE_SHIFT
 13

	)

18775 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_PUS_MASK
 0xC000u

	)

18776 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_PUS_SHIFT
 14

	)

18777 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_PUS_MASK
)

	)

18778 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_HYS_MASK
 0x10000u

	)

18779 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_HYS_SHIFT
 16

	)

18781 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_SRE_MASK
 0x1u

	)

18782 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_SRE_SHIFT
 0

	)

18783 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_DSE_MASK
 0x38u

	)

18784 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_DSE_SHIFT
 3

	)

18785 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_DSE_MASK
)

	)

18786 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_SPEED_MASK
 0xC0u

	)

18787 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_SPEED_SHIFT
 6

	)

18788 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_SPEED_MASK
)

	)

18789 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_ODE_MASK
 0x800u

	)

18790 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_ODE_SHIFT
 11

	)

18791 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_PKE_MASK
 0x1000u

	)

18792 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_PKE_SHIFT
 12

	)

18793 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_PUE_MASK
 0x2000u

	)

18794 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_PUE_SHIFT
 13

	)

18795 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_PUS_MASK
 0xC000u

	)

18796 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_PUS_SHIFT
 14

	)

18797 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_PUS_MASK
)

	)

18798 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_HYS_MASK
 0x10000u

	)

18799 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_HYS_SHIFT
 16

	)

18801 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_SRE_MASK
 0x1u

	)

18802 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_SRE_SHIFT
 0

	)

18803 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_DSE_MASK
 0x38u

	)

18804 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_DSE_SHIFT
 3

	)

18805 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_DSE_MASK
)

	)

18806 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_SPEED_MASK
 0xC0u

	)

18807 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_SPEED_SHIFT
 6

	)

18808 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_SPEED_MASK
)

	)

18809 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_ODE_MASK
 0x800u

	)

18810 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_ODE_SHIFT
 11

	)

18811 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_PKE_MASK
 0x1000u

	)

18812 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_PKE_SHIFT
 12

	)

18813 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_PUE_MASK
 0x2000u

	)

18814 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_PUE_SHIFT
 13

	)

18815 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_PUS_MASK
 0xC000u

	)

18816 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_PUS_SHIFT
 14

	)

18817 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_PUS_MASK
)

	)

18818 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_HYS_MASK
 0x10000u

	)

18819 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_HYS_SHIFT
 16

	)

18821 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_SRE_MASK
 0x1u

	)

18822 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_SRE_SHIFT
 0

	)

18823 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_DSE_MASK
 0x38u

	)

18824 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_DSE_SHIFT
 3

	)

18825 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_DSE_MASK
)

	)

18826 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_SPEED_MASK
 0xC0u

	)

18827 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_SPEED_SHIFT
 6

	)

18828 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_SPEED_MASK
)

	)

18829 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_ODE_MASK
 0x800u

	)

18830 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_ODE_SHIFT
 11

	)

18831 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_PKE_MASK
 0x1000u

	)

18832 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_PKE_SHIFT
 12

	)

18833 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_PUE_MASK
 0x2000u

	)

18834 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_PUE_SHIFT
 13

	)

18835 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_PUS_MASK
 0xC000u

	)

18836 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_PUS_SHIFT
 14

	)

18837 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_PUS_MASK
)

	)

18838 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_HYS_MASK
 0x10000u

	)

18839 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_HYS_SHIFT
 16

	)

18841 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_SRE_MASK
 0x1u

	)

18842 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_SRE_SHIFT
 0

	)

18843 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_DSE_MASK
 0x38u

	)

18844 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_DSE_SHIFT
 3

	)

18845 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_DSE_MASK
)

	)

18846 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_SPEED_MASK
 0xC0u

	)

18847 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_SPEED_SHIFT
 6

	)

18848 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_SPEED_MASK
)

	)

18849 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_ODE_MASK
 0x800u

	)

18850 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_ODE_SHIFT
 11

	)

18851 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_PKE_MASK
 0x1000u

	)

18852 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_PKE_SHIFT
 12

	)

18853 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_PUE_MASK
 0x2000u

	)

18854 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_PUE_SHIFT
 13

	)

18855 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_PUS_MASK
 0xC000u

	)

18856 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_PUS_SHIFT
 14

	)

18857 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_PUS_MASK
)

	)

18858 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_HYS_MASK
 0x10000u

	)

18859 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_HYS_SHIFT
 16

	)

18861 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_SRE_MASK
 0x1u

	)

18862 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_SRE_SHIFT
 0

	)

18863 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_DSE_MASK
 0x38u

	)

18864 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_DSE_SHIFT
 3

	)

18865 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_DSE_MASK
)

	)

18866 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_SPEED_MASK
 0xC0u

	)

18867 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_SPEED_SHIFT
 6

	)

18868 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_SPEED_MASK
)

	)

18869 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_ODE_MASK
 0x800u

	)

18870 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_ODE_SHIFT
 11

	)

18871 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_PKE_MASK
 0x1000u

	)

18872 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_PKE_SHIFT
 12

	)

18873 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_PUE_MASK
 0x2000u

	)

18874 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_PUE_SHIFT
 13

	)

18875 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_PUS_MASK
 0xC000u

	)

18876 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_PUS_SHIFT
 14

	)

18877 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_PUS_MASK
)

	)

18878 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_HYS_MASK
 0x10000u

	)

18879 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_HYS_SHIFT
 16

	)

18881 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_SRE_MASK
 0x1u

	)

18882 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_SRE_SHIFT
 0

	)

18883 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_DSE_MASK
 0x38u

	)

18884 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_DSE_SHIFT
 3

	)

18885 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_DSE_MASK
)

	)

18886 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_SPEED_MASK
 0xC0u

	)

18887 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_SPEED_SHIFT
 6

	)

18888 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_SPEED_MASK
)

	)

18889 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_ODE_MASK
 0x800u

	)

18890 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_ODE_SHIFT
 11

	)

18891 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_PKE_MASK
 0x1000u

	)

18892 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_PKE_SHIFT
 12

	)

18893 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_PUE_MASK
 0x2000u

	)

18894 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_PUE_SHIFT
 13

	)

18895 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_PUS_MASK
 0xC000u

	)

18896 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_PUS_SHIFT
 14

	)

18897 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_PUS_MASK
)

	)

18898 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_HYS_MASK
 0x10000u

	)

18899 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_HYS_SHIFT
 16

	)

18901 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_SRE_MASK
 0x1u

	)

18902 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_SRE_SHIFT
 0

	)

18903 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_DSE_MASK
 0x38u

	)

18904 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_DSE_SHIFT
 3

	)

18905 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_DSE_MASK
)

	)

18906 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_SPEED_MASK
 0xC0u

	)

18907 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_SPEED_SHIFT
 6

	)

18908 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_SPEED_MASK
)

	)

18909 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_ODE_MASK
 0x800u

	)

18910 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_ODE_SHIFT
 11

	)

18911 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_PKE_MASK
 0x1000u

	)

18912 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_PKE_SHIFT
 12

	)

18913 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_PUE_MASK
 0x2000u

	)

18914 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_PUE_SHIFT
 13

	)

18915 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_PUS_MASK
 0xC000u

	)

18916 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_PUS_SHIFT
 14

	)

18917 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_PUS_MASK
)

	)

18918 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_HYS_MASK
 0x10000u

	)

18919 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_HYS_SHIFT
 16

	)

18921 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_SRE_MASK
 0x1u

	)

18922 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_SRE_SHIFT
 0

	)

18923 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_DSE_MASK
 0x38u

	)

18924 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_DSE_SHIFT
 3

	)

18925 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_DSE_MASK
)

	)

18926 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_SPEED_MASK
 0xC0u

	)

18927 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_SPEED_SHIFT
 6

	)

18928 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_SPEED_MASK
)

	)

18929 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_ODE_MASK
 0x800u

	)

18930 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_ODE_SHIFT
 11

	)

18931 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_PKE_MASK
 0x1000u

	)

18932 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_PKE_SHIFT
 12

	)

18933 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_PUE_MASK
 0x2000u

	)

18934 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_PUE_SHIFT
 13

	)

18935 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_PUS_MASK
 0xC000u

	)

18936 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_PUS_SHIFT
 14

	)

18937 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_PUS_MASK
)

	)

18938 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_HYS_MASK
 0x10000u

	)

18939 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_HYS_SHIFT
 16

	)

18941 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_SRE_MASK
 0x1u

	)

18942 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_SRE_SHIFT
 0

	)

18943 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_DSE_MASK
 0x38u

	)

18944 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_DSE_SHIFT
 3

	)

18945 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_DSE_MASK
)

	)

18946 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_SPEED_MASK
 0xC0u

	)

18947 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_SPEED_SHIFT
 6

	)

18948 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_SPEED_MASK
)

	)

18949 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_ODE_MASK
 0x800u

	)

18950 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_ODE_SHIFT
 11

	)

18951 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_PKE_MASK
 0x1000u

	)

18952 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_PKE_SHIFT
 12

	)

18953 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_PUE_MASK
 0x2000u

	)

18954 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_PUE_SHIFT
 13

	)

18955 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_PUS_MASK
 0xC000u

	)

18956 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_PUS_SHIFT
 14

	)

18957 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_PUS_MASK
)

	)

18958 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_HYS_MASK
 0x10000u

	)

18959 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_HYS_SHIFT
 16

	)

18961 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_SRE_MASK
 0x1u

	)

18962 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_SRE_SHIFT
 0

	)

18963 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_DSE_MASK
 0x38u

	)

18964 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_DSE_SHIFT
 3

	)

18965 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_DSE_MASK
)

	)

18966 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_SPEED_MASK
 0xC0u

	)

18967 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_SPEED_SHIFT
 6

	)

18968 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_SPEED_MASK
)

	)

18969 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_ODE_MASK
 0x800u

	)

18970 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_ODE_SHIFT
 11

	)

18971 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_PKE_MASK
 0x1000u

	)

18972 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_PKE_SHIFT
 12

	)

18973 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_PUE_MASK
 0x2000u

	)

18974 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_PUE_SHIFT
 13

	)

18975 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_PUS_MASK
 0xC000u

	)

18976 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_PUS_SHIFT
 14

	)

18977 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_PUS_MASK
)

	)

18978 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_HYS_MASK
 0x10000u

	)

18979 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_HYS_SHIFT
 16

	)

18981 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_SRE_MASK
 0x1u

	)

18982 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_SRE_SHIFT
 0

	)

18983 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_DSE_MASK
 0x38u

	)

18984 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_DSE_SHIFT
 3

	)

18985 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_DSE_MASK
)

	)

18986 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_SPEED_MASK
 0xC0u

	)

18987 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_SPEED_SHIFT
 6

	)

18988 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_SPEED_MASK
)

	)

18989 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_ODE_MASK
 0x800u

	)

18990 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_ODE_SHIFT
 11

	)

18991 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_PKE_MASK
 0x1000u

	)

18992 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_PKE_SHIFT
 12

	)

18993 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_PUE_MASK
 0x2000u

	)

18994 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_PUE_SHIFT
 13

	)

18995 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_PUS_MASK
 0xC000u

	)

18996 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_PUS_SHIFT
 14

	)

18997 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_PUS_MASK
)

	)

18998 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_HYS_MASK
 0x10000u

	)

18999 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_HYS_SHIFT
 16

	)

19001 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_SRE_MASK
 0x1u

	)

19002 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_SRE_SHIFT
 0

	)

19003 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_DSE_MASK
 0x38u

	)

19004 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_DSE_SHIFT
 3

	)

19005 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_DSE_MASK
)

	)

19006 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_SPEED_MASK
 0xC0u

	)

19007 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_SPEED_SHIFT
 6

	)

19008 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_SPEED_MASK
)

	)

19009 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_ODE_MASK
 0x800u

	)

19010 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_ODE_SHIFT
 11

	)

19011 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_PKE_MASK
 0x1000u

	)

19012 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_PKE_SHIFT
 12

	)

19013 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_PUE_MASK
 0x2000u

	)

19014 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_PUE_SHIFT
 13

	)

19015 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_PUS_MASK
 0xC000u

	)

19016 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_PUS_SHIFT
 14

	)

19017 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_PUS_MASK
)

	)

19018 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_HYS_MASK
 0x10000u

	)

19019 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_HYS_SHIFT
 16

	)

19021 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_SRE_MASK
 0x1u

	)

19022 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_SRE_SHIFT
 0

	)

19023 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_DSE_MASK
 0x38u

	)

19024 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_DSE_SHIFT
 3

	)

19025 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_DSE_MASK
)

	)

19026 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_SPEED_MASK
 0xC0u

	)

19027 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_SPEED_SHIFT
 6

	)

19028 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_SPEED_MASK
)

	)

19029 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_ODE_MASK
 0x800u

	)

19030 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_ODE_SHIFT
 11

	)

19031 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_PKE_MASK
 0x1000u

	)

19032 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_PKE_SHIFT
 12

	)

19033 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_PUE_MASK
 0x2000u

	)

19034 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_PUE_SHIFT
 13

	)

19035 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_PUS_MASK
 0xC000u

	)

19036 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_PUS_SHIFT
 14

	)

19037 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_PUS_MASK
)

	)

19038 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_HYS_MASK
 0x10000u

	)

19039 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_HYS_SHIFT
 16

	)

19041 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_SRE_MASK
 0x1u

	)

19042 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_SRE_SHIFT
 0

	)

19043 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_DSE_MASK
 0x38u

	)

19044 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_DSE_SHIFT
 3

	)

19045 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_DSE_MASK
)

	)

19046 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_SPEED_MASK
 0xC0u

	)

19047 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_SPEED_SHIFT
 6

	)

19048 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_SPEED_MASK
)

	)

19049 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_ODE_MASK
 0x800u

	)

19050 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_ODE_SHIFT
 11

	)

19051 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_PKE_MASK
 0x1000u

	)

19052 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_PKE_SHIFT
 12

	)

19053 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_PUE_MASK
 0x2000u

	)

19054 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_PUE_SHIFT
 13

	)

19055 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_PUS_MASK
 0xC000u

	)

19056 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_PUS_SHIFT
 14

	)

19057 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_PUS_MASK
)

	)

19058 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_HYS_MASK
 0x10000u

	)

19059 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_HYS_SHIFT
 16

	)

19061 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_SRE_MASK
 0x1u

	)

19062 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_SRE_SHIFT
 0

	)

19063 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_DSE_MASK
 0x38u

	)

19064 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_DSE_SHIFT
 3

	)

19065 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_DSE_MASK
)

	)

19066 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_SPEED_MASK
 0xC0u

	)

19067 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_SPEED_SHIFT
 6

	)

19068 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_SPEED_MASK
)

	)

19069 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_ODE_MASK
 0x800u

	)

19070 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_ODE_SHIFT
 11

	)

19071 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_PKE_MASK
 0x1000u

	)

19072 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_PKE_SHIFT
 12

	)

19073 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_PUE_MASK
 0x2000u

	)

19074 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_PUE_SHIFT
 13

	)

19075 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_PUS_MASK
 0xC000u

	)

19076 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_PUS_SHIFT
 14

	)

19077 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_PUS_MASK
)

	)

19078 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_HYS_MASK
 0x10000u

	)

19079 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_HYS_SHIFT
 16

	)

19081 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_SRE_MASK
 0x1u

	)

19082 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_SRE_SHIFT
 0

	)

19083 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_DSE_MASK
 0x38u

	)

19084 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_DSE_SHIFT
 3

	)

19085 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_DSE_MASK
)

	)

19086 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_SPEED_MASK
 0xC0u

	)

19087 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_SPEED_SHIFT
 6

	)

19088 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_SPEED_MASK
)

	)

19089 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_ODE_MASK
 0x800u

	)

19090 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_ODE_SHIFT
 11

	)

19091 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_PKE_MASK
 0x1000u

	)

19092 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_PKE_SHIFT
 12

	)

19093 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_PUE_MASK
 0x2000u

	)

19094 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_PUE_SHIFT
 13

	)

19095 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_PUS_MASK
 0xC000u

	)

19096 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_PUS_SHIFT
 14

	)

19097 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_PUS_MASK
)

	)

19098 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_HYS_MASK
 0x10000u

	)

19099 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_HYS_SHIFT
 16

	)

19101 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_SRE_MASK
 0x1u

	)

19102 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_SRE_SHIFT
 0

	)

19103 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_DSE_MASK
 0x38u

	)

19104 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_DSE_SHIFT
 3

	)

19105 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_DSE_MASK
)

	)

19106 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_SPEED_MASK
 0xC0u

	)

19107 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_SPEED_SHIFT
 6

	)

19108 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_SPEED_MASK
)

	)

19109 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_ODE_MASK
 0x800u

	)

19110 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_ODE_SHIFT
 11

	)

19111 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_PKE_MASK
 0x1000u

	)

19112 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_PKE_SHIFT
 12

	)

19113 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_PUE_MASK
 0x2000u

	)

19114 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_PUE_SHIFT
 13

	)

19115 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_PUS_MASK
 0xC000u

	)

19116 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_PUS_SHIFT
 14

	)

19117 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_PUS_MASK
)

	)

19118 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_HYS_MASK
 0x10000u

	)

19119 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_HYS_SHIFT
 16

	)

19121 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_SRE_MASK
 0x1u

	)

19122 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_SRE_SHIFT
 0

	)

19123 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_DSE_MASK
 0x38u

	)

19124 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_DSE_SHIFT
 3

	)

19125 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_DSE_MASK
)

	)

19126 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_SPEED_MASK
 0xC0u

	)

19127 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_SPEED_SHIFT
 6

	)

19128 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_SPEED_MASK
)

	)

19129 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_ODE_MASK
 0x800u

	)

19130 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_ODE_SHIFT
 11

	)

19131 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_PKE_MASK
 0x1000u

	)

19132 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_PKE_SHIFT
 12

	)

19133 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_PUE_MASK
 0x2000u

	)

19134 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_PUE_SHIFT
 13

	)

19135 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_PUS_MASK
 0xC000u

	)

19136 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_PUS_SHIFT
 14

	)

19137 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_PUS_MASK
)

	)

19138 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_HYS_MASK
 0x10000u

	)

19139 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_HYS_SHIFT
 16

	)

19141 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_SRE_MASK
 0x1u

	)

19142 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_SRE_SHIFT
 0

	)

19143 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_DSE_MASK
 0x38u

	)

19144 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_DSE_SHIFT
 3

	)

19145 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_DSE_MASK
)

	)

19146 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_SPEED_MASK
 0xC0u

	)

19147 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_SPEED_SHIFT
 6

	)

19148 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_SPEED_MASK
)

	)

19149 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_ODE_MASK
 0x800u

	)

19150 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_ODE_SHIFT
 11

	)

19151 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_PKE_MASK
 0x1000u

	)

19152 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_PKE_SHIFT
 12

	)

19153 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_PUE_MASK
 0x2000u

	)

19154 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_PUE_SHIFT
 13

	)

19155 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_PUS_MASK
 0xC000u

	)

19156 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_PUS_SHIFT
 14

	)

19157 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_PUS_MASK
)

	)

19158 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_HYS_MASK
 0x10000u

	)

19159 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_HYS_SHIFT
 16

	)

19161 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_SRE_MASK
 0x1u

	)

19162 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_SRE_SHIFT
 0

	)

19163 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_DSE_MASK
 0x38u

	)

19164 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_DSE_SHIFT
 3

	)

19165 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_DSE_MASK
)

	)

19166 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_SPEED_MASK
 0xC0u

	)

19167 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_SPEED_SHIFT
 6

	)

19168 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_SPEED_MASK
)

	)

19169 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_ODE_MASK
 0x800u

	)

19170 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_ODE_SHIFT
 11

	)

19171 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_PKE_MASK
 0x1000u

	)

19172 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_PKE_SHIFT
 12

	)

19173 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_PUE_MASK
 0x2000u

	)

19174 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_PUE_SHIFT
 13

	)

19175 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_PUS_MASK
 0xC000u

	)

19176 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_PUS_SHIFT
 14

	)

19177 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_PUS_MASK
)

	)

19178 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_HYS_MASK
 0x10000u

	)

19179 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_HYS_SHIFT
 16

	)

19181 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_SRE_MASK
 0x1u

	)

19182 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_SRE_SHIFT
 0

	)

19183 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_DSE_MASK
 0x38u

	)

19184 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_DSE_SHIFT
 3

	)

19185 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_DSE_MASK
)

	)

19186 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_SPEED_MASK
 0xC0u

	)

19187 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_SPEED_SHIFT
 6

	)

19188 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_SPEED_MASK
)

	)

19189 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_ODE_MASK
 0x800u

	)

19190 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_ODE_SHIFT
 11

	)

19191 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_PKE_MASK
 0x1000u

	)

19192 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_PKE_SHIFT
 12

	)

19193 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_PUE_MASK
 0x2000u

	)

19194 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_PUE_SHIFT
 13

	)

19195 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_PUS_MASK
 0xC000u

	)

19196 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_PUS_SHIFT
 14

	)

19197 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_PUS_MASK
)

	)

19198 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_HYS_MASK
 0x10000u

	)

19199 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_HYS_SHIFT
 16

	)

19201 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_SRE_MASK
 0x1u

	)

19202 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_SRE_SHIFT
 0

	)

19203 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_DSE_MASK
 0x38u

	)

19204 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_DSE_SHIFT
 3

	)

19205 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_DSE_MASK
)

	)

19206 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_SPEED_MASK
 0xC0u

	)

19207 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_SPEED_SHIFT
 6

	)

19208 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_SPEED_MASK
)

	)

19209 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_ODE_MASK
 0x800u

	)

19210 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_ODE_SHIFT
 11

	)

19211 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_PKE_MASK
 0x1000u

	)

19212 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_PKE_SHIFT
 12

	)

19213 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_PUE_MASK
 0x2000u

	)

19214 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_PUE_SHIFT
 13

	)

19215 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_PUS_MASK
 0xC000u

	)

19216 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_PUS_SHIFT
 14

	)

19217 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_PUS_MASK
)

	)

19218 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_HYS_MASK
 0x10000u

	)

19219 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_HYS_SHIFT
 16

	)

19221 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_SRE_MASK
 0x1u

	)

19222 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_SRE_SHIFT
 0

	)

19223 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_DSE_MASK
 0x38u

	)

19224 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_DSE_SHIFT
 3

	)

19225 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_DSE_MASK
)

	)

19226 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_SPEED_MASK
 0xC0u

	)

19227 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_SPEED_SHIFT
 6

	)

19228 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_SPEED_MASK
)

	)

19229 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_ODE_MASK
 0x800u

	)

19230 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_ODE_SHIFT
 11

	)

19231 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_PKE_MASK
 0x1000u

	)

19232 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_PKE_SHIFT
 12

	)

19233 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_PUE_MASK
 0x2000u

	)

19234 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_PUE_SHIFT
 13

	)

19235 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_PUS_MASK
 0xC000u

	)

19236 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_PUS_SHIFT
 14

	)

19237 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_PUS_MASK
)

	)

19238 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_HYS_MASK
 0x10000u

	)

19239 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_HYS_SHIFT
 16

	)

19241 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_SRE_MASK
 0x1u

	)

19242 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_SRE_SHIFT
 0

	)

19243 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_DSE_MASK
 0x38u

	)

19244 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_DSE_SHIFT
 3

	)

19245 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_DSE_MASK
)

	)

19246 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_SPEED_MASK
 0xC0u

	)

19247 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_SPEED_SHIFT
 6

	)

19248 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_SPEED_MASK
)

	)

19249 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_ODE_MASK
 0x800u

	)

19250 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_ODE_SHIFT
 11

	)

19251 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_PKE_MASK
 0x1000u

	)

19252 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_PKE_SHIFT
 12

	)

19253 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_PUE_MASK
 0x2000u

	)

19254 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_PUE_SHIFT
 13

	)

19255 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_PUS_MASK
 0xC000u

	)

19256 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_PUS_SHIFT
 14

	)

19257 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_PUS_MASK
)

	)

19258 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_HYS_MASK
 0x10000u

	)

19259 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_HYS_SHIFT
 16

	)

19261 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_SRE_MASK
 0x1u

	)

19262 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_SRE_SHIFT
 0

	)

19263 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_DSE_MASK
 0x38u

	)

19264 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_DSE_SHIFT
 3

	)

19265 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_DSE_MASK
)

	)

19266 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_SPEED_MASK
 0xC0u

	)

19267 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_SPEED_SHIFT
 6

	)

19268 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_SPEED_MASK
)

	)

19269 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_ODE_MASK
 0x800u

	)

19270 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_ODE_SHIFT
 11

	)

19271 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_PKE_MASK
 0x1000u

	)

19272 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_PKE_SHIFT
 12

	)

19273 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_PUE_MASK
 0x2000u

	)

19274 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_PUE_SHIFT
 13

	)

19275 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_PUS_MASK
 0xC000u

	)

19276 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_PUS_SHIFT
 14

	)

19277 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_PUS_MASK
)

	)

19278 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_HYS_MASK
 0x10000u

	)

19279 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_HYS_SHIFT
 16

	)

19281 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_SRE_MASK
 0x1u

	)

19282 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_SRE_SHIFT
 0

	)

19283 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_DSE_MASK
 0x38u

	)

19284 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_DSE_SHIFT
 3

	)

19285 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_DSE_MASK
)

	)

19286 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_SPEED_MASK
 0xC0u

	)

19287 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_SPEED_SHIFT
 6

	)

19288 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_SPEED_MASK
)

	)

19289 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_ODE_MASK
 0x800u

	)

19290 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_ODE_SHIFT
 11

	)

19291 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_PKE_MASK
 0x1000u

	)

19292 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_PKE_SHIFT
 12

	)

19293 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_PUE_MASK
 0x2000u

	)

19294 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_PUE_SHIFT
 13

	)

19295 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_PUS_MASK
 0xC000u

	)

19296 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_PUS_SHIFT
 14

	)

19297 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_PUS_MASK
)

	)

19298 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_HYS_MASK
 0x10000u

	)

19299 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_HYS_SHIFT
 16

	)

19301 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_SRE_MASK
 0x1u

	)

19302 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_SRE_SHIFT
 0

	)

19303 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_DSE_MASK
 0x38u

	)

19304 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_DSE_SHIFT
 3

	)

19305 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_DSE_MASK
)

	)

19306 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_SPEED_MASK
 0xC0u

	)

19307 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_SPEED_SHIFT
 6

	)

19308 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_SPEED_MASK
)

	)

19309 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_ODE_MASK
 0x800u

	)

19310 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_ODE_SHIFT
 11

	)

19311 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_PKE_MASK
 0x1000u

	)

19312 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_PKE_SHIFT
 12

	)

19313 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_PUE_MASK
 0x2000u

	)

19314 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_PUE_SHIFT
 13

	)

19315 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_PUS_MASK
 0xC000u

	)

19316 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_PUS_SHIFT
 14

	)

19317 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_PUS_MASK
)

	)

19318 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_HYS_MASK
 0x10000u

	)

19319 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_HYS_SHIFT
 16

	)

19321 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_SRE_MASK
 0x1u

	)

19322 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_SRE_SHIFT
 0

	)

19323 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_DSE_MASK
 0x38u

	)

19324 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_DSE_SHIFT
 3

	)

19325 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_DSE_MASK
)

	)

19326 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_SPEED_MASK
 0xC0u

	)

19327 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_SPEED_SHIFT
 6

	)

19328 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_SPEED_MASK
)

	)

19329 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_ODE_MASK
 0x800u

	)

19330 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_ODE_SHIFT
 11

	)

19331 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_PKE_MASK
 0x1000u

	)

19332 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_PKE_SHIFT
 12

	)

19333 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_PUE_MASK
 0x2000u

	)

19334 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_PUE_SHIFT
 13

	)

19335 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_PUS_MASK
 0xC000u

	)

19336 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_PUS_SHIFT
 14

	)

19337 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_PUS_MASK
)

	)

19338 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_HYS_MASK
 0x10000u

	)

19339 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_HYS_SHIFT
 16

	)

19341 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_SRE_MASK
 0x1u

	)

19342 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_SRE_SHIFT
 0

	)

19343 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_DSE_MASK
 0x38u

	)

19344 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_DSE_SHIFT
 3

	)

19345 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_DSE_MASK
)

	)

19346 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_SPEED_MASK
 0xC0u

	)

19347 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_SPEED_SHIFT
 6

	)

19348 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_SPEED_MASK
)

	)

19349 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_ODE_MASK
 0x800u

	)

19350 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_ODE_SHIFT
 11

	)

19351 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_PKE_MASK
 0x1000u

	)

19352 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_PKE_SHIFT
 12

	)

19353 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_PUE_MASK
 0x2000u

	)

19354 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_PUE_SHIFT
 13

	)

19355 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_PUS_MASK
 0xC000u

	)

19356 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_PUS_SHIFT
 14

	)

19357 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_PUS_MASK
)

	)

19358 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_HYS_MASK
 0x10000u

	)

19359 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_HYS_SHIFT
 16

	)

19361 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_SRE_MASK
 0x1u

	)

19362 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_SRE_SHIFT
 0

	)

19363 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_DSE_MASK
 0x38u

	)

19364 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_DSE_SHIFT
 3

	)

19365 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_DSE_MASK
)

	)

19366 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_SPEED_MASK
 0xC0u

	)

19367 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_SPEED_SHIFT
 6

	)

19368 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_SPEED_MASK
)

	)

19369 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_ODE_MASK
 0x800u

	)

19370 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_ODE_SHIFT
 11

	)

19371 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_PKE_MASK
 0x1000u

	)

19372 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_PKE_SHIFT
 12

	)

19373 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_PUE_MASK
 0x2000u

	)

19374 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_PUE_SHIFT
 13

	)

19375 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_PUS_MASK
 0xC000u

	)

19376 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_PUS_SHIFT
 14

	)

19377 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_PUS_MASK
)

	)

19378 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_HYS_MASK
 0x10000u

	)

19379 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_HYS_SHIFT
 16

	)

19381 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_SRE_MASK
 0x1u

	)

19382 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_SRE_SHIFT
 0

	)

19383 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_DSE_MASK
 0x38u

	)

19384 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_DSE_SHIFT
 3

	)

19385 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_DSE_MASK
)

	)

19386 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_SPEED_MASK
 0xC0u

	)

19387 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_SPEED_SHIFT
 6

	)

19388 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_SPEED_MASK
)

	)

19389 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_ODE_MASK
 0x800u

	)

19390 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_ODE_SHIFT
 11

	)

19391 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_PKE_MASK
 0x1000u

	)

19392 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_PKE_SHIFT
 12

	)

19393 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_PUE_MASK
 0x2000u

	)

19394 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_PUE_SHIFT
 13

	)

19395 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_PUS_MASK
 0xC000u

	)

19396 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_PUS_SHIFT
 14

	)

19397 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_PUS_MASK
)

	)

19398 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_HYS_MASK
 0x10000u

	)

19399 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_HYS_SHIFT
 16

	)

19401 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_SRE_MASK
 0x1u

	)

19402 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_SRE_SHIFT
 0

	)

19403 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_DSE_MASK
 0x38u

	)

19404 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_DSE_SHIFT
 3

	)

19405 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_DSE_MASK
)

	)

19406 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_SPEED_MASK
 0xC0u

	)

19407 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_SPEED_SHIFT
 6

	)

19408 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_SPEED_MASK
)

	)

19409 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_ODE_MASK
 0x800u

	)

19410 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_ODE_SHIFT
 11

	)

19411 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_PKE_MASK
 0x1000u

	)

19412 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_PKE_SHIFT
 12

	)

19413 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_PUE_MASK
 0x2000u

	)

19414 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_PUE_SHIFT
 13

	)

19415 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_PUS_MASK
 0xC000u

	)

19416 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_PUS_SHIFT
 14

	)

19417 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_PUS_MASK
)

	)

19418 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_HYS_MASK
 0x10000u

	)

19419 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_HYS_SHIFT
 16

	)

19421 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_SRE_MASK
 0x1u

	)

19422 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_SRE_SHIFT
 0

	)

19423 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_DSE_MASK
 0x38u

	)

19424 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_DSE_SHIFT
 3

	)

19425 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_DSE_MASK
)

	)

19426 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_SPEED_MASK
 0xC0u

	)

19427 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_SPEED_SHIFT
 6

	)

19428 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_SPEED_MASK
)

	)

19429 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_ODE_MASK
 0x800u

	)

19430 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_ODE_SHIFT
 11

	)

19431 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_PKE_MASK
 0x1000u

	)

19432 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_PKE_SHIFT
 12

	)

19433 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_PUE_MASK
 0x2000u

	)

19434 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_PUE_SHIFT
 13

	)

19435 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_PUS_MASK
 0xC000u

	)

19436 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_PUS_SHIFT
 14

	)

19437 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_PUS_MASK
)

	)

19438 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_HYS_MASK
 0x10000u

	)

19439 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_HYS_SHIFT
 16

	)

19441 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_SRE_MASK
 0x1u

	)

19442 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_SRE_SHIFT
 0

	)

19443 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_DSE_MASK
 0x38u

	)

19444 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_DSE_SHIFT
 3

	)

19445 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_DSE_MASK
)

	)

19446 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_SPEED_MASK
 0xC0u

	)

19447 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_SPEED_SHIFT
 6

	)

19448 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_SPEED_MASK
)

	)

19449 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_ODE_MASK
 0x800u

	)

19450 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_ODE_SHIFT
 11

	)

19451 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_PKE_MASK
 0x1000u

	)

19452 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_PKE_SHIFT
 12

	)

19453 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_PUE_MASK
 0x2000u

	)

19454 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_PUE_SHIFT
 13

	)

19455 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_PUS_MASK
 0xC000u

	)

19456 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_PUS_SHIFT
 14

	)

19457 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_PUS_MASK
)

	)

19458 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_HYS_MASK
 0x10000u

	)

19459 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_HYS_SHIFT
 16

	)

19461 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_SRE_MASK
 0x1u

	)

19462 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_SRE_SHIFT
 0

	)

19463 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_DSE_MASK
 0x38u

	)

19464 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_DSE_SHIFT
 3

	)

19465 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_DSE_MASK
)

	)

19466 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_SPEED_MASK
 0xC0u

	)

19467 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_SPEED_SHIFT
 6

	)

19468 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_SPEED_MASK
)

	)

19469 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_ODE_MASK
 0x800u

	)

19470 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_ODE_SHIFT
 11

	)

19471 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_PKE_MASK
 0x1000u

	)

19472 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_PKE_SHIFT
 12

	)

19473 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_PUE_MASK
 0x2000u

	)

19474 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_PUE_SHIFT
 13

	)

19475 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_PUS_MASK
 0xC000u

	)

19476 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_PUS_SHIFT
 14

	)

19477 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_PUS_MASK
)

	)

19478 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_HYS_MASK
 0x10000u

	)

19479 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_HYS_SHIFT
 16

	)

19481 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_SRE_MASK
 0x1u

	)

19482 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_SRE_SHIFT
 0

	)

19483 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_DSE_MASK
 0x38u

	)

19484 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_DSE_SHIFT
 3

	)

19485 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_DSE_MASK
)

	)

19486 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_SPEED_MASK
 0xC0u

	)

19487 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_SPEED_SHIFT
 6

	)

19488 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_SPEED_MASK
)

	)

19489 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_ODE_MASK
 0x800u

	)

19490 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_ODE_SHIFT
 11

	)

19491 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_PKE_MASK
 0x1000u

	)

19492 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_PKE_SHIFT
 12

	)

19493 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_PUE_MASK
 0x2000u

	)

19494 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_PUE_SHIFT
 13

	)

19495 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_PUS_MASK
 0xC000u

	)

19496 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_PUS_SHIFT
 14

	)

19497 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_PUS_MASK
)

	)

19498 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_HYS_MASK
 0x10000u

	)

19499 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_HYS_SHIFT
 16

	)

19501 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SRE_MASK
 0x1u

	)

19502 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SRE_SHIFT
 0

	)

19503 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_DSE_MASK
 0x38u

	)

19504 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_DSE_SHIFT
 3

	)

19505 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_DSE_MASK
)

	)

19506 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SPEED_MASK
 0xC0u

	)

19507 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SPEED_SHIFT
 6

	)

19508 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_SPEED_MASK
)

	)

19509 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_ODE_MASK
 0x800u

	)

19510 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_ODE_SHIFT
 11

	)

19511 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PKE_MASK
 0x1000u

	)

19512 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PKE_SHIFT
 12

	)

19513 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUE_MASK
 0x2000u

	)

19514 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUE_SHIFT
 13

	)

19515 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUS_MASK
 0xC000u

	)

19516 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUS_SHIFT
 14

	)

19517 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_PUS_MASK
)

	)

19518 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_HYS_MASK
 0x10000u

	)

19519 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_HYS_SHIFT
 16

	)

19521 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SRE_MASK
 0x1u

	)

19522 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SRE_SHIFT
 0

	)

19523 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_DSE_MASK
 0x38u

	)

19524 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_DSE_SHIFT
 3

	)

19525 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_DSE_MASK
)

	)

19526 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SPEED_MASK
 0xC0u

	)

19527 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SPEED_SHIFT
 6

	)

19528 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_SPEED_MASK
)

	)

19529 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_ODE_MASK
 0x800u

	)

19530 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_ODE_SHIFT
 11

	)

19531 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PKE_MASK
 0x1000u

	)

19532 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PKE_SHIFT
 12

	)

19533 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUE_MASK
 0x2000u

	)

19534 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUE_SHIFT
 13

	)

19535 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUS_MASK
 0xC000u

	)

19536 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUS_SHIFT
 14

	)

19537 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_PUS_MASK
)

	)

19538 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_HYS_MASK
 0x10000u

	)

19539 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_HYS_SHIFT
 16

	)

19541 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SRE_MASK
 0x1u

	)

19542 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SRE_SHIFT
 0

	)

19543 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_DSE_MASK
 0x38u

	)

19544 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_DSE_SHIFT
 3

	)

19545 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_DSE_MASK
)

	)

19546 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SPEED_MASK
 0xC0u

	)

19547 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SPEED_SHIFT
 6

	)

19548 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_SPEED_MASK
)

	)

19549 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_ODE_MASK
 0x800u

	)

19550 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_ODE_SHIFT
 11

	)

19551 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PKE_MASK
 0x1000u

	)

19552 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PKE_SHIFT
 12

	)

19553 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUE_MASK
 0x2000u

	)

19554 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUE_SHIFT
 13

	)

19555 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUS_MASK
 0xC000u

	)

19556 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUS_SHIFT
 14

	)

19557 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_PUS_MASK
)

	)

19558 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_HYS_MASK
 0x10000u

	)

19559 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_HYS_SHIFT
 16

	)

19561 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SRE_MASK
 0x1u

	)

19562 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SRE_SHIFT
 0

	)

19563 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_DSE_MASK
 0x38u

	)

19564 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_DSE_SHIFT
 3

	)

19565 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_DSE_MASK
)

	)

19566 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SPEED_MASK
 0xC0u

	)

19567 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SPEED_SHIFT
 6

	)

19568 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_SPEED_MASK
)

	)

19569 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_ODE_MASK
 0x800u

	)

19570 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_ODE_SHIFT
 11

	)

19571 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PKE_MASK
 0x1000u

	)

19572 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PKE_SHIFT
 12

	)

19573 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUE_MASK
 0x2000u

	)

19574 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUE_SHIFT
 13

	)

19575 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUS_MASK
 0xC000u

	)

19576 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUS_SHIFT
 14

	)

19577 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_PUS_MASK
)

	)

19578 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_HYS_MASK
 0x10000u

	)

19579 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_HYS_SHIFT
 16

	)

19581 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SRE_MASK
 0x1u

	)

19582 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SRE_SHIFT
 0

	)

19583 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_DSE_MASK
 0x38u

	)

19584 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_DSE_SHIFT
 3

	)

19585 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_DSE_MASK
)

	)

19586 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SPEED_MASK
 0xC0u

	)

19587 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SPEED_SHIFT
 6

	)

19588 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_SPEED_MASK
)

	)

19589 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_ODE_MASK
 0x800u

	)

19590 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_ODE_SHIFT
 11

	)

19591 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PKE_MASK
 0x1000u

	)

19592 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PKE_SHIFT
 12

	)

19593 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUE_MASK
 0x2000u

	)

19594 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUE_SHIFT
 13

	)

19595 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUS_MASK
 0xC000u

	)

19596 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUS_SHIFT
 14

	)

19597 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_PUS_MASK
)

	)

19598 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_HYS_MASK
 0x10000u

	)

19599 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_HYS_SHIFT
 16

	)

19601 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SRE_MASK
 0x1u

	)

19602 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SRE_SHIFT
 0

	)

19603 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_DSE_MASK
 0x38u

	)

19604 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_DSE_SHIFT
 3

	)

19605 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_DSE_MASK
)

	)

19606 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SPEED_MASK
 0xC0u

	)

19607 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SPEED_SHIFT
 6

	)

19608 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_SPEED_MASK
)

	)

19609 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_ODE_MASK
 0x800u

	)

19610 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_ODE_SHIFT
 11

	)

19611 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PKE_MASK
 0x1000u

	)

19612 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PKE_SHIFT
 12

	)

19613 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUE_MASK
 0x2000u

	)

19614 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUE_SHIFT
 13

	)

19615 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUS_MASK
 0xC000u

	)

19616 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUS_SHIFT
 14

	)

19617 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_PUS_MASK
)

	)

19618 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_HYS_MASK
 0x10000u

	)

19619 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_HYS_SHIFT
 16

	)

19621 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SRE_MASK
 0x1u

	)

19622 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SRE_SHIFT
 0

	)

19623 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_DSE_MASK
 0x38u

	)

19624 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_DSE_SHIFT
 3

	)

19625 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_DSE_MASK
)

	)

19626 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SPEED_MASK
 0xC0u

	)

19627 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SPEED_SHIFT
 6

	)

19628 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_SPEED_MASK
)

	)

19629 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_ODE_MASK
 0x800u

	)

19630 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_ODE_SHIFT
 11

	)

19631 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PKE_MASK
 0x1000u

	)

19632 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PKE_SHIFT
 12

	)

19633 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUE_MASK
 0x2000u

	)

19634 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUE_SHIFT
 13

	)

19635 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUS_MASK
 0xC000u

	)

19636 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUS_SHIFT
 14

	)

19637 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_PUS_MASK
)

	)

19638 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_HYS_MASK
 0x10000u

	)

19639 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_HYS_SHIFT
 16

	)

19641 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SRE_MASK
 0x1u

	)

19642 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SRE_SHIFT
 0

	)

19643 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_DSE_MASK
 0x38u

	)

19644 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_DSE_SHIFT
 3

	)

19645 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_DSE_MASK
)

	)

19646 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SPEED_MASK
 0xC0u

	)

19647 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SPEED_SHIFT
 6

	)

19648 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_SPEED_MASK
)

	)

19649 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_ODE_MASK
 0x800u

	)

19650 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_ODE_SHIFT
 11

	)

19651 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PKE_MASK
 0x1000u

	)

19652 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PKE_SHIFT
 12

	)

19653 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUE_MASK
 0x2000u

	)

19654 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUE_SHIFT
 13

	)

19655 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUS_MASK
 0xC000u

	)

19656 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUS_SHIFT
 14

	)

19657 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_PUS_MASK
)

	)

19658 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_HYS_MASK
 0x10000u

	)

19659 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_HYS_SHIFT
 16

	)

19661 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SRE_MASK
 0x1u

	)

19662 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SRE_SHIFT
 0

	)

19663 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_DSE_MASK
 0x38u

	)

19664 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_DSE_SHIFT
 3

	)

19665 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_DSE_MASK
)

	)

19666 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SPEED_MASK
 0xC0u

	)

19667 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SPEED_SHIFT
 6

	)

19668 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_SPEED_MASK
)

	)

19669 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_ODE_MASK
 0x800u

	)

19670 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_ODE_SHIFT
 11

	)

19671 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PKE_MASK
 0x1000u

	)

19672 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PKE_SHIFT
 12

	)

19673 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUE_MASK
 0x2000u

	)

19674 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUE_SHIFT
 13

	)

19675 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUS_MASK
 0xC000u

	)

19676 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUS_SHIFT
 14

	)

19677 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_PUS_MASK
)

	)

19678 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_HYS_MASK
 0x10000u

	)

19679 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_HYS_SHIFT
 16

	)

19681 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SRE_MASK
 0x1u

	)

19682 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SRE_SHIFT
 0

	)

19683 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_DSE_MASK
 0x38u

	)

19684 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_DSE_SHIFT
 3

	)

19685 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_DSE_MASK
)

	)

19686 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SPEED_MASK
 0xC0u

	)

19687 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SPEED_SHIFT
 6

	)

19688 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_SPEED_MASK
)

	)

19689 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_ODE_MASK
 0x800u

	)

19690 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_ODE_SHIFT
 11

	)

19691 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PKE_MASK
 0x1000u

	)

19692 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PKE_SHIFT
 12

	)

19693 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUE_MASK
 0x2000u

	)

19694 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUE_SHIFT
 13

	)

19695 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUS_MASK
 0xC000u

	)

19696 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUS_SHIFT
 14

	)

19697 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_PUS_MASK
)

	)

19698 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_HYS_MASK
 0x10000u

	)

19699 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_HYS_SHIFT
 16

	)

19701 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_SRE_MASK
 0x1u

	)

19702 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_SRE_SHIFT
 0

	)

19703 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_DSE_MASK
 0x38u

	)

19704 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_DSE_SHIFT
 3

	)

19705 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_DSE_MASK
)

	)

19706 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_SPEED_MASK
 0xC0u

	)

19707 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_SPEED_SHIFT
 6

	)

19708 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_SPEED_MASK
)

	)

19709 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_ODE_MASK
 0x800u

	)

19710 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_ODE_SHIFT
 11

	)

19711 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_PKE_MASK
 0x1000u

	)

19712 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_PKE_SHIFT
 12

	)

19713 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_PUE_MASK
 0x2000u

	)

19714 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_PUE_SHIFT
 13

	)

19715 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_PUS_MASK
 0xC000u

	)

19716 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_PUS_SHIFT
 14

	)

19717 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_PUS_MASK
)

	)

19718 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_HYS_MASK
 0x10000u

	)

19719 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_HYS_SHIFT
 16

	)

19721 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_SRE_MASK
 0x1u

	)

19722 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_SRE_SHIFT
 0

	)

19723 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_DSE_MASK
 0x38u

	)

19724 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_DSE_SHIFT
 3

	)

19725 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_DSE_MASK
)

	)

19726 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_SPEED_MASK
 0xC0u

	)

19727 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_SPEED_SHIFT
 6

	)

19728 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_SPEED_MASK
)

	)

19729 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_ODE_MASK
 0x800u

	)

19730 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_ODE_SHIFT
 11

	)

19731 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_PKE_MASK
 0x1000u

	)

19732 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_PKE_SHIFT
 12

	)

19733 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_PUE_MASK
 0x2000u

	)

19734 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_PUE_SHIFT
 13

	)

19735 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_PUS_MASK
 0xC000u

	)

19736 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_PUS_SHIFT
 14

	)

19737 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_PUS_MASK
)

	)

19738 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_HYS_MASK
 0x10000u

	)

19739 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_HYS_SHIFT
 16

	)

19741 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_SRE_MASK
 0x1u

	)

19742 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_SRE_SHIFT
 0

	)

19743 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_DSE_MASK
 0x38u

	)

19744 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_DSE_SHIFT
 3

	)

19745 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_DSE_MASK
)

	)

19746 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_SPEED_MASK
 0xC0u

	)

19747 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_SPEED_SHIFT
 6

	)

19748 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_SPEED_MASK
)

	)

19749 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_ODE_MASK
 0x800u

	)

19750 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_ODE_SHIFT
 11

	)

19751 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_PKE_MASK
 0x1000u

	)

19752 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_PKE_SHIFT
 12

	)

19753 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_PUE_MASK
 0x2000u

	)

19754 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_PUE_SHIFT
 13

	)

19755 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_PUS_MASK
 0xC000u

	)

19756 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_PUS_SHIFT
 14

	)

19757 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_PUS_MASK
)

	)

19758 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_HYS_MASK
 0x10000u

	)

19759 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_HYS_SHIFT
 16

	)

19761 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_SRE_MASK
 0x1u

	)

19762 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_SRE_SHIFT
 0

	)

19763 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_DSE_MASK
 0x38u

	)

19764 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_DSE_SHIFT
 3

	)

19765 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_DSE_MASK
)

	)

19766 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_SPEED_MASK
 0xC0u

	)

19767 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_SPEED_SHIFT
 6

	)

19768 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_SPEED_MASK
)

	)

19769 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_ODE_MASK
 0x800u

	)

19770 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_ODE_SHIFT
 11

	)

19771 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_PKE_MASK
 0x1000u

	)

19772 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_PKE_SHIFT
 12

	)

19773 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_PUE_MASK
 0x2000u

	)

19774 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_PUE_SHIFT
 13

	)

19775 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_PUS_MASK
 0xC000u

	)

19776 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_PUS_SHIFT
 14

	)

19777 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_PUS_MASK
)

	)

19778 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_HYS_MASK
 0x10000u

	)

19779 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_HYS_SHIFT
 16

	)

19781 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_SRE_MASK
 0x1u

	)

19782 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_SRE_SHIFT
 0

	)

19783 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_DSE_MASK
 0x38u

	)

19784 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_DSE_SHIFT
 3

	)

19785 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_DSE_MASK
)

	)

19786 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_SPEED_MASK
 0xC0u

	)

19787 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_SPEED_SHIFT
 6

	)

19788 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_SPEED_MASK
)

	)

19789 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_ODE_MASK
 0x800u

	)

19790 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_ODE_SHIFT
 11

	)

19791 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_PKE_MASK
 0x1000u

	)

19792 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_PKE_SHIFT
 12

	)

19793 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_PUE_MASK
 0x2000u

	)

19794 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_PUE_SHIFT
 13

	)

19795 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_PUS_MASK
 0xC000u

	)

19796 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_PUS_SHIFT
 14

	)

19797 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_PUS_MASK
)

	)

19798 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_HYS_MASK
 0x10000u

	)

19799 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_HYS_SHIFT
 16

	)

19801 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_SRE_MASK
 0x1u

	)

19802 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_SRE_SHIFT
 0

	)

19803 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_DSE_MASK
 0x38u

	)

19804 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_DSE_SHIFT
 3

	)

19805 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_DSE_MASK
)

	)

19806 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_SPEED_MASK
 0xC0u

	)

19807 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_SPEED_SHIFT
 6

	)

19808 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_SPEED_MASK
)

	)

19809 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_ODE_MASK
 0x800u

	)

19810 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_ODE_SHIFT
 11

	)

19811 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_PKE_MASK
 0x1000u

	)

19812 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_PKE_SHIFT
 12

	)

19813 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_PUE_MASK
 0x2000u

	)

19814 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_PUE_SHIFT
 13

	)

19815 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_PUS_MASK
 0xC000u

	)

19816 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_PUS_SHIFT
 14

	)

19817 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_PUS_MASK
)

	)

19818 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_HYS_MASK
 0x10000u

	)

19819 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_HYS_SHIFT
 16

	)

19821 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_SRE_MASK
 0x1u

	)

19822 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_SRE_SHIFT
 0

	)

19823 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_DSE_MASK
 0x38u

	)

19824 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_DSE_SHIFT
 3

	)

19825 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_DSE_MASK
)

	)

19826 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_SPEED_MASK
 0xC0u

	)

19827 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_SPEED_SHIFT
 6

	)

19828 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_SPEED_MASK
)

	)

19829 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_ODE_MASK
 0x800u

	)

19830 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_ODE_SHIFT
 11

	)

19831 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_PKE_MASK
 0x1000u

	)

19832 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_PKE_SHIFT
 12

	)

19833 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_PUE_MASK
 0x2000u

	)

19834 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_PUE_SHIFT
 13

	)

19835 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_PUS_MASK
 0xC000u

	)

19836 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_PUS_SHIFT
 14

	)

19837 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_PUS_MASK
)

	)

19838 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_HYS_MASK
 0x10000u

	)

19839 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_HYS_SHIFT
 16

	)

19841 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_SRE_MASK
 0x1u

	)

19842 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_SRE_SHIFT
 0

	)

19843 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_DSE_MASK
 0x38u

	)

19844 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_DSE_SHIFT
 3

	)

19845 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_DSE_MASK
)

	)

19846 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_SPEED_MASK
 0xC0u

	)

19847 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_SPEED_SHIFT
 6

	)

19848 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_SPEED_MASK
)

	)

19849 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_ODE_MASK
 0x800u

	)

19850 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_ODE_SHIFT
 11

	)

19851 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_PKE_MASK
 0x1000u

	)

19852 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_PKE_SHIFT
 12

	)

19853 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_PUE_MASK
 0x2000u

	)

19854 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_PUE_SHIFT
 13

	)

19855 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_PUS_MASK
 0xC000u

	)

19856 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_PUS_SHIFT
 14

	)

19857 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_PUS_MASK
)

	)

19858 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_HYS_MASK
 0x10000u

	)

19859 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_HYS_SHIFT
 16

	)

19861 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_SRE_MASK
 0x1u

	)

19862 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_SRE_SHIFT
 0

	)

19863 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_DSE_MASK
 0x38u

	)

19864 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_DSE_SHIFT
 3

	)

19865 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_DSE_MASK
)

	)

19866 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_SPEED_MASK
 0xC0u

	)

19867 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_SPEED_SHIFT
 6

	)

19868 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_SPEED_MASK
)

	)

19869 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_ODE_MASK
 0x800u

	)

19870 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_ODE_SHIFT
 11

	)

19871 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_PKE_MASK
 0x1000u

	)

19872 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_PKE_SHIFT
 12

	)

19873 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_PUE_MASK
 0x2000u

	)

19874 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_PUE_SHIFT
 13

	)

19875 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_PUS_MASK
 0xC000u

	)

19876 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_PUS_SHIFT
 14

	)

19877 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_PUS_MASK
)

	)

19878 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_HYS_MASK
 0x10000u

	)

19879 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_HYS_SHIFT
 16

	)

19881 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_SRE_MASK
 0x1u

	)

19882 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_SRE_SHIFT
 0

	)

19883 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_DSE_MASK
 0x38u

	)

19884 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_DSE_SHIFT
 3

	)

19885 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_DSE_MASK
)

	)

19886 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_SPEED_MASK
 0xC0u

	)

19887 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_SPEED_SHIFT
 6

	)

19888 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_SPEED_MASK
)

	)

19889 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_ODE_MASK
 0x800u

	)

19890 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_ODE_SHIFT
 11

	)

19891 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_PKE_MASK
 0x1000u

	)

19892 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_PKE_SHIFT
 12

	)

19893 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_PUE_MASK
 0x2000u

	)

19894 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_PUE_SHIFT
 13

	)

19895 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_PUS_MASK
 0xC000u

	)

19896 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_PUS_SHIFT
 14

	)

19897 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_PUS_MASK
)

	)

19898 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_HYS_MASK
 0x10000u

	)

19899 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_HYS_SHIFT
 16

	)

19901 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_SRE_MASK
 0x1u

	)

19902 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_SRE_SHIFT
 0

	)

19903 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_DSE_MASK
 0x38u

	)

19904 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_DSE_SHIFT
 3

	)

19905 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_DSE_MASK
)

	)

19906 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_SPEED_MASK
 0xC0u

	)

19907 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_SPEED_SHIFT
 6

	)

19908 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_SPEED_MASK
)

	)

19909 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_ODE_MASK
 0x800u

	)

19910 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_ODE_SHIFT
 11

	)

19911 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_PKE_MASK
 0x1000u

	)

19912 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_PKE_SHIFT
 12

	)

19913 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_PUE_MASK
 0x2000u

	)

19914 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_PUE_SHIFT
 13

	)

19915 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_PUS_MASK
 0xC000u

	)

19916 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_PUS_SHIFT
 14

	)

19917 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_PUS_MASK
)

	)

19918 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_HYS_MASK
 0x10000u

	)

19919 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_HYS_SHIFT
 16

	)

19921 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_SRE_MASK
 0x1u

	)

19922 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_SRE_SHIFT
 0

	)

19923 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_DSE_MASK
 0x38u

	)

19924 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_DSE_SHIFT
 3

	)

19925 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_DSE_MASK
)

	)

19926 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_SPEED_MASK
 0xC0u

	)

19927 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_SPEED_SHIFT
 6

	)

19928 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_SPEED_MASK
)

	)

19929 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_ODE_MASK
 0x800u

	)

19930 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_ODE_SHIFT
 11

	)

19931 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_PKE_MASK
 0x1000u

	)

19932 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_PKE_SHIFT
 12

	)

19933 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_PUE_MASK
 0x2000u

	)

19934 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_PUE_SHIFT
 13

	)

19935 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_PUS_MASK
 0xC000u

	)

19936 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_PUS_SHIFT
 14

	)

19937 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_PUS_MASK
)

	)

19938 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_HYS_MASK
 0x10000u

	)

19939 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_HYS_SHIFT
 16

	)

19941 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_SRE_MASK
 0x1u

	)

19942 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_SRE_SHIFT
 0

	)

19943 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_DSE_MASK
 0x38u

	)

19944 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_DSE_SHIFT
 3

	)

19945 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_DSE_MASK
)

	)

19946 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_SPEED_MASK
 0xC0u

	)

19947 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_SPEED_SHIFT
 6

	)

19948 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_SPEED_MASK
)

	)

19949 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_ODE_MASK
 0x800u

	)

19950 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_ODE_SHIFT
 11

	)

19951 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_PKE_MASK
 0x1000u

	)

19952 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_PKE_SHIFT
 12

	)

19953 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_PUE_MASK
 0x2000u

	)

19954 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_PUE_SHIFT
 13

	)

19955 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_PUS_MASK
 0xC000u

	)

19956 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_PUS_SHIFT
 14

	)

19957 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_PUS_MASK
)

	)

19958 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_HYS_MASK
 0x10000u

	)

19959 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_HYS_SHIFT
 16

	)

19961 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_SRE_MASK
 0x1u

	)

19962 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_SRE_SHIFT
 0

	)

19963 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_DSE_MASK
 0x38u

	)

19964 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_DSE_SHIFT
 3

	)

19965 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_DSE_MASK
)

	)

19966 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_SPEED_MASK
 0xC0u

	)

19967 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_SPEED_SHIFT
 6

	)

19968 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_SPEED_MASK
)

	)

19969 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_ODE_MASK
 0x800u

	)

19970 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_ODE_SHIFT
 11

	)

19971 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_PKE_MASK
 0x1000u

	)

19972 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_PKE_SHIFT
 12

	)

19973 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_PUE_MASK
 0x2000u

	)

19974 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_PUE_SHIFT
 13

	)

19975 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_PUS_MASK
 0xC000u

	)

19976 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_PUS_SHIFT
 14

	)

19977 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_PUS_MASK
)

	)

19978 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_HYS_MASK
 0x10000u

	)

19979 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_HYS_SHIFT
 16

	)

19981 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_SRE_MASK
 0x1u

	)

19982 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_SRE_SHIFT
 0

	)

19983 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_DSE_MASK
 0x38u

	)

19984 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_DSE_SHIFT
 3

	)

19985 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_DSE_MASK
)

	)

19986 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_SPEED_MASK
 0xC0u

	)

19987 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_SPEED_SHIFT
 6

	)

19988 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_SPEED_MASK
)

	)

19989 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_ODE_MASK
 0x800u

	)

19990 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_ODE_SHIFT
 11

	)

19991 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_PKE_MASK
 0x1000u

	)

19992 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_PKE_SHIFT
 12

	)

19993 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_PUE_MASK
 0x2000u

	)

19994 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_PUE_SHIFT
 13

	)

19995 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_PUS_MASK
 0xC000u

	)

19996 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_PUS_SHIFT
 14

	)

19997 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_PUS_MASK
)

	)

19998 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_HYS_MASK
 0x10000u

	)

19999 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_HYS_SHIFT
 16

	)

20001 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_SRE_MASK
 0x1u

	)

20002 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_SRE_SHIFT
 0

	)

20003 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_DSE_MASK
 0x38u

	)

20004 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_DSE_SHIFT
 3

	)

20005 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_DSE_MASK
)

	)

20006 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_SPEED_MASK
 0xC0u

	)

20007 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_SPEED_SHIFT
 6

	)

20008 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_SPEED_MASK
)

	)

20009 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_ODE_MASK
 0x800u

	)

20010 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_ODE_SHIFT
 11

	)

20011 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_PKE_MASK
 0x1000u

	)

20012 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_PKE_SHIFT
 12

	)

20013 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_PUE_MASK
 0x2000u

	)

20014 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_PUE_SHIFT
 13

	)

20015 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_PUS_MASK
 0xC000u

	)

20016 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_PUS_SHIFT
 14

	)

20017 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_PUS_MASK
)

	)

20018 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_HYS_MASK
 0x10000u

	)

20019 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_HYS_SHIFT
 16

	)

20021 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_SRE_MASK
 0x1u

	)

20022 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_SRE_SHIFT
 0

	)

20023 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_DSE_MASK
 0x38u

	)

20024 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_DSE_SHIFT
 3

	)

20025 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_DSE_MASK
)

	)

20026 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_SPEED_MASK
 0xC0u

	)

20027 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_SPEED_SHIFT
 6

	)

20028 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_SPEED_MASK
)

	)

20029 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_ODE_MASK
 0x800u

	)

20030 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_ODE_SHIFT
 11

	)

20031 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_PKE_MASK
 0x1000u

	)

20032 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_PKE_SHIFT
 12

	)

20033 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_PUE_MASK
 0x2000u

	)

20034 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_PUE_SHIFT
 13

	)

20035 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_PUS_MASK
 0xC000u

	)

20036 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_PUS_SHIFT
 14

	)

20037 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_PUS_MASK
)

	)

20038 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_HYS_MASK
 0x10000u

	)

20039 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_HYS_SHIFT
 16

	)

20041 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_SRE_MASK
 0x1u

	)

20042 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_SRE_SHIFT
 0

	)

20043 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_DSE_MASK
 0x38u

	)

20044 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_DSE_SHIFT
 3

	)

20045 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_DSE_MASK
)

	)

20046 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_SPEED_MASK
 0xC0u

	)

20047 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_SPEED_SHIFT
 6

	)

20048 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_SPEED_MASK
)

	)

20049 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_ODE_MASK
 0x800u

	)

20050 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_ODE_SHIFT
 11

	)

20051 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_PKE_MASK
 0x1000u

	)

20052 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_PKE_SHIFT
 12

	)

20053 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_PUE_MASK
 0x2000u

	)

20054 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_PUE_SHIFT
 13

	)

20055 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_PUS_MASK
 0xC000u

	)

20056 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_PUS_SHIFT
 14

	)

20057 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_PUS_MASK
)

	)

20058 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_HYS_MASK
 0x10000u

	)

20059 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_HYS_SHIFT
 16

	)

20061 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_SRE_MASK
 0x1u

	)

20062 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_SRE_SHIFT
 0

	)

20063 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_DSE_MASK
 0x38u

	)

20064 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_DSE_SHIFT
 3

	)

20065 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_DSE_MASK
)

	)

20066 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_SPEED_MASK
 0xC0u

	)

20067 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_SPEED_SHIFT
 6

	)

20068 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_SPEED_MASK
)

	)

20069 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_ODE_MASK
 0x800u

	)

20070 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_ODE_SHIFT
 11

	)

20071 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_PKE_MASK
 0x1000u

	)

20072 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_PKE_SHIFT
 12

	)

20073 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_PUE_MASK
 0x2000u

	)

20074 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_PUE_SHIFT
 13

	)

20075 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_PUS_MASK
 0xC000u

	)

20076 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_PUS_SHIFT
 14

	)

20077 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_PUS_MASK
)

	)

20078 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_HYS_MASK
 0x10000u

	)

20079 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_HYS_SHIFT
 16

	)

20081 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_SRE_MASK
 0x1u

	)

20082 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_SRE_SHIFT
 0

	)

20083 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_DSE_MASK
 0x38u

	)

20084 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_DSE_SHIFT
 3

	)

20085 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_DSE_MASK
)

	)

20086 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_SPEED_MASK
 0xC0u

	)

20087 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_SPEED_SHIFT
 6

	)

20088 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_SPEED_MASK
)

	)

20089 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_ODE_MASK
 0x800u

	)

20090 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_ODE_SHIFT
 11

	)

20091 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_PKE_MASK
 0x1000u

	)

20092 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_PKE_SHIFT
 12

	)

20093 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_PUE_MASK
 0x2000u

	)

20094 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_PUE_SHIFT
 13

	)

20095 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_PUS_MASK
 0xC000u

	)

20096 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_PUS_SHIFT
 14

	)

20097 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_PUS_MASK
)

	)

20098 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_HYS_MASK
 0x10000u

	)

20099 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_HYS_SHIFT
 16

	)

20101 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_SRE_MASK
 0x1u

	)

20102 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_SRE_SHIFT
 0

	)

20103 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_DSE_MASK
 0x38u

	)

20104 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_DSE_SHIFT
 3

	)

20105 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_DSE_MASK
)

	)

20106 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_SPEED_MASK
 0xC0u

	)

20107 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_SPEED_SHIFT
 6

	)

20108 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_SPEED_MASK
)

	)

20109 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_ODE_MASK
 0x800u

	)

20110 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_ODE_SHIFT
 11

	)

20111 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_PKE_MASK
 0x1000u

	)

20112 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_PKE_SHIFT
 12

	)

20113 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_PUE_MASK
 0x2000u

	)

20114 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_PUE_SHIFT
 13

	)

20115 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_PUS_MASK
 0xC000u

	)

20116 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_PUS_SHIFT
 14

	)

20117 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_PUS_MASK
)

	)

20118 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_HYS_MASK
 0x10000u

	)

20119 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_HYS_SHIFT
 16

	)

20121 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_SRE_MASK
 0x1u

	)

20122 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_SRE_SHIFT
 0

	)

20123 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_DSE_MASK
 0x38u

	)

20124 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_DSE_SHIFT
 3

	)

20125 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_DSE_MASK
)

	)

20126 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_SPEED_MASK
 0xC0u

	)

20127 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_SPEED_SHIFT
 6

	)

20128 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_SPEED_MASK
)

	)

20129 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_ODE_MASK
 0x800u

	)

20130 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_ODE_SHIFT
 11

	)

20131 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_PKE_MASK
 0x1000u

	)

20132 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_PKE_SHIFT
 12

	)

20133 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_PUE_MASK
 0x2000u

	)

20134 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_PUE_SHIFT
 13

	)

20135 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_PUS_MASK
 0xC000u

	)

20136 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_PUS_SHIFT
 14

	)

20137 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_PUS_MASK
)

	)

20138 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_HYS_MASK
 0x10000u

	)

20139 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_HYS_SHIFT
 16

	)

20141 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_SRE_MASK
 0x1u

	)

20142 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_SRE_SHIFT
 0

	)

20143 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_DSE_MASK
 0x38u

	)

20144 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_DSE_SHIFT
 3

	)

20145 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_DSE_MASK
)

	)

20146 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_SPEED_MASK
 0xC0u

	)

20147 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_SPEED_SHIFT
 6

	)

20148 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_SPEED_MASK
)

	)

20149 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_ODE_MASK
 0x800u

	)

20150 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_ODE_SHIFT
 11

	)

20151 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_PKE_MASK
 0x1000u

	)

20152 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_PKE_SHIFT
 12

	)

20153 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_PUE_MASK
 0x2000u

	)

20154 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_PUE_SHIFT
 13

	)

20155 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_PUS_MASK
 0xC000u

	)

20156 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_PUS_SHIFT
 14

	)

20157 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_PUS_MASK
)

	)

20158 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_HYS_MASK
 0x10000u

	)

20159 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_HYS_SHIFT
 16

	)

20161 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_SRE_MASK
 0x1u

	)

20162 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_SRE_SHIFT
 0

	)

20163 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_DSE_MASK
 0x38u

	)

20164 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_DSE_SHIFT
 3

	)

20165 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_DSE_MASK
)

	)

20166 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_SPEED_MASK
 0xC0u

	)

20167 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_SPEED_SHIFT
 6

	)

20168 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_SPEED_MASK
)

	)

20169 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_ODE_MASK
 0x800u

	)

20170 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_ODE_SHIFT
 11

	)

20171 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_PKE_MASK
 0x1000u

	)

20172 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_PKE_SHIFT
 12

	)

20173 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_PUE_MASK
 0x2000u

	)

20174 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_PUE_SHIFT
 13

	)

20175 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_PUS_MASK
 0xC000u

	)

20176 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_PUS_SHIFT
 14

	)

20177 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_PUS_MASK
)

	)

20178 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_HYS_MASK
 0x10000u

	)

20179 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_HYS_SHIFT
 16

	)

20181 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_SRE_MASK
 0x1u

	)

20182 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_SRE_SHIFT
 0

	)

20183 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_DSE_MASK
 0x38u

	)

20184 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_DSE_SHIFT
 3

	)

20185 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_DSE_MASK
)

	)

20186 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_SPEED_MASK
 0xC0u

	)

20187 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_SPEED_SHIFT
 6

	)

20188 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_SPEED_MASK
)

	)

20189 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_ODE_MASK
 0x800u

	)

20190 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_ODE_SHIFT
 11

	)

20191 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_PKE_MASK
 0x1000u

	)

20192 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_PKE_SHIFT
 12

	)

20193 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_PUE_MASK
 0x2000u

	)

20194 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_PUE_SHIFT
 13

	)

20195 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_PUS_MASK
 0xC000u

	)

20196 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_PUS_SHIFT
 14

	)

20197 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_PUS_MASK
)

	)

20198 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_HYS_MASK
 0x10000u

	)

20199 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_HYS_SHIFT
 16

	)

20201 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_SRE_MASK
 0x1u

	)

20202 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_SRE_SHIFT
 0

	)

20203 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_DSE_MASK
 0x38u

	)

20204 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_DSE_SHIFT
 3

	)

20205 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_DSE_MASK
)

	)

20206 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_SPEED_MASK
 0xC0u

	)

20207 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_SPEED_SHIFT
 6

	)

20208 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_SPEED_MASK
)

	)

20209 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_ODE_MASK
 0x800u

	)

20210 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_ODE_SHIFT
 11

	)

20211 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_PKE_MASK
 0x1000u

	)

20212 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_PKE_SHIFT
 12

	)

20213 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_PUE_MASK
 0x2000u

	)

20214 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_PUE_SHIFT
 13

	)

20215 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_PUS_MASK
 0xC000u

	)

20216 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_PUS_SHIFT
 14

	)

20217 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_PUS_MASK
)

	)

20218 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_HYS_MASK
 0x10000u

	)

20219 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_HYS_SHIFT
 16

	)

20221 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_SRE_MASK
 0x1u

	)

20222 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_SRE_SHIFT
 0

	)

20223 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_DSE_MASK
 0x38u

	)

20224 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_DSE_SHIFT
 3

	)

20225 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_DSE_MASK
)

	)

20226 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_SPEED_MASK
 0xC0u

	)

20227 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_SPEED_SHIFT
 6

	)

20228 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_SPEED_MASK
)

	)

20229 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_ODE_MASK
 0x800u

	)

20230 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_ODE_SHIFT
 11

	)

20231 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_PKE_MASK
 0x1000u

	)

20232 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_PKE_SHIFT
 12

	)

20233 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_PUE_MASK
 0x2000u

	)

20234 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_PUE_SHIFT
 13

	)

20235 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_PUS_MASK
 0xC000u

	)

20236 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_PUS_SHIFT
 14

	)

20237 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_PUS_MASK
)

	)

20238 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_HYS_MASK
 0x10000u

	)

20239 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_HYS_SHIFT
 16

	)

20241 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_SRE_MASK
 0x1u

	)

20242 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_SRE_SHIFT
 0

	)

20243 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_DSE_MASK
 0x38u

	)

20244 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_DSE_SHIFT
 3

	)

20245 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_DSE_MASK
)

	)

20246 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_SPEED_MASK
 0xC0u

	)

20247 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_SPEED_SHIFT
 6

	)

20248 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_SPEED_MASK
)

	)

20249 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_ODE_MASK
 0x800u

	)

20250 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_ODE_SHIFT
 11

	)

20251 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_PKE_MASK
 0x1000u

	)

20252 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_PKE_SHIFT
 12

	)

20253 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_PUE_MASK
 0x2000u

	)

20254 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_PUE_SHIFT
 13

	)

20255 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_PUS_MASK
 0xC000u

	)

20256 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_PUS_SHIFT
 14

	)

20257 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_PUS_MASK
)

	)

20258 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_HYS_MASK
 0x10000u

	)

20259 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_HYS_SHIFT
 16

	)

20261 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_SRE_MASK
 0x1u

	)

20262 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_SRE_SHIFT
 0

	)

20263 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_DSE_MASK
 0x38u

	)

20264 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_DSE_SHIFT
 3

	)

20265 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_DSE_MASK
)

	)

20266 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_SPEED_MASK
 0xC0u

	)

20267 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_SPEED_SHIFT
 6

	)

20268 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_SPEED_MASK
)

	)

20269 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_ODE_MASK
 0x800u

	)

20270 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_ODE_SHIFT
 11

	)

20271 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_PKE_MASK
 0x1000u

	)

20272 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_PKE_SHIFT
 12

	)

20273 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_PUE_MASK
 0x2000u

	)

20274 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_PUE_SHIFT
 13

	)

20275 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_PUS_MASK
 0xC000u

	)

20276 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_PUS_SHIFT
 14

	)

20277 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_PUS_MASK
)

	)

20278 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_HYS_MASK
 0x10000u

	)

20279 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_HYS_SHIFT
 16

	)

20281 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_SRE_MASK
 0x1u

	)

20282 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_SRE_SHIFT
 0

	)

20283 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_DSE_MASK
 0x38u

	)

20284 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_DSE_SHIFT
 3

	)

20285 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_DSE_MASK
)

	)

20286 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_SPEED_MASK
 0xC0u

	)

20287 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_SPEED_SHIFT
 6

	)

20288 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_SPEED_MASK
)

	)

20289 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_ODE_MASK
 0x800u

	)

20290 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_ODE_SHIFT
 11

	)

20291 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_PKE_MASK
 0x1000u

	)

20292 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_PKE_SHIFT
 12

	)

20293 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_PUE_MASK
 0x2000u

	)

20294 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_PUE_SHIFT
 13

	)

20295 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_PUS_MASK
 0xC000u

	)

20296 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_PUS_SHIFT
 14

	)

20297 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_PUS_MASK
)

	)

20298 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_HYS_MASK
 0x10000u

	)

20299 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_HYS_SHIFT
 16

	)

20301 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_SRE_MASK
 0x1u

	)

20302 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_SRE_SHIFT
 0

	)

20303 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_DSE_MASK
 0x38u

	)

20304 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_DSE_SHIFT
 3

	)

20305 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_DSE_MASK
)

	)

20306 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_SPEED_MASK
 0xC0u

	)

20307 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_SPEED_SHIFT
 6

	)

20308 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_SPEED_MASK
)

	)

20309 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_ODE_MASK
 0x800u

	)

20310 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_ODE_SHIFT
 11

	)

20311 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_PKE_MASK
 0x1000u

	)

20312 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_PKE_SHIFT
 12

	)

20313 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_PUE_MASK
 0x2000u

	)

20314 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_PUE_SHIFT
 13

	)

20315 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_PUS_MASK
 0xC000u

	)

20316 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_PUS_SHIFT
 14

	)

20317 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_PUS_MASK
)

	)

20318 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_HYS_MASK
 0x10000u

	)

20319 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_HYS_SHIFT
 16

	)

20321 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_SRE_MASK
 0x1u

	)

20322 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_SRE_SHIFT
 0

	)

20323 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_DSE_MASK
 0x38u

	)

20324 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_DSE_SHIFT
 3

	)

20325 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_DSE_MASK
)

	)

20326 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_SPEED_MASK
 0xC0u

	)

20327 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_SPEED_SHIFT
 6

	)

20328 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_SPEED_MASK
)

	)

20329 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_ODE_MASK
 0x800u

	)

20330 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_ODE_SHIFT
 11

	)

20331 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_PKE_MASK
 0x1000u

	)

20332 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_PKE_SHIFT
 12

	)

20333 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_PUE_MASK
 0x2000u

	)

20334 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_PUE_SHIFT
 13

	)

20335 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_PUS_MASK
 0xC000u

	)

20336 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_PUS_SHIFT
 14

	)

20337 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_PUS_MASK
)

	)

20338 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_HYS_MASK
 0x10000u

	)

20339 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_HYS_SHIFT
 16

	)

20341 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_SRE_MASK
 0x1u

	)

20342 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_SRE_SHIFT
 0

	)

20343 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_DSE_MASK
 0x38u

	)

20344 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_DSE_SHIFT
 3

	)

20345 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_DSE_MASK
)

	)

20346 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_SPEED_MASK
 0xC0u

	)

20347 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_SPEED_SHIFT
 6

	)

20348 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_SPEED_MASK
)

	)

20349 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_ODE_MASK
 0x800u

	)

20350 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_ODE_SHIFT
 11

	)

20351 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_PKE_MASK
 0x1000u

	)

20352 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_PKE_SHIFT
 12

	)

20353 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_PUE_MASK
 0x2000u

	)

20354 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_PUE_SHIFT
 13

	)

20355 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_PUS_MASK
 0xC000u

	)

20356 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_PUS_SHIFT
 14

	)

20357 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_PUS_MASK
)

	)

20358 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_HYS_MASK
 0x10000u

	)

20359 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_HYS_SHIFT
 16

	)

20361 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_SRE_MASK
 0x1u

	)

20362 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_SRE_SHIFT
 0

	)

20363 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_DSE_MASK
 0x38u

	)

20364 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_DSE_SHIFT
 3

	)

20365 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_DSE_MASK
)

	)

20366 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_SPEED_MASK
 0xC0u

	)

20367 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_SPEED_SHIFT
 6

	)

20368 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_SPEED_MASK
)

	)

20369 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_ODE_MASK
 0x800u

	)

20370 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_ODE_SHIFT
 11

	)

20371 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_PKE_MASK
 0x1000u

	)

20372 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_PKE_SHIFT
 12

	)

20373 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_PUE_MASK
 0x2000u

	)

20374 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_PUE_SHIFT
 13

	)

20375 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_PUS_MASK
 0xC000u

	)

20376 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_PUS_SHIFT
 14

	)

20377 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_PUS_MASK
)

	)

20378 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_HYS_MASK
 0x10000u

	)

20379 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_HYS_SHIFT
 16

	)

20381 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_SRE_MASK
 0x1u

	)

20382 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_SRE_SHIFT
 0

	)

20383 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_DSE_MASK
 0x38u

	)

20384 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_DSE_SHIFT
 3

	)

20385 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_DSE_MASK
)

	)

20386 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_SPEED_MASK
 0xC0u

	)

20387 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_SPEED_SHIFT
 6

	)

20388 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_SPEED_MASK
)

	)

20389 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_ODE_MASK
 0x800u

	)

20390 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_ODE_SHIFT
 11

	)

20391 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_PKE_MASK
 0x1000u

	)

20392 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_PKE_SHIFT
 12

	)

20393 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_PUE_MASK
 0x2000u

	)

20394 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_PUE_SHIFT
 13

	)

20395 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_PUS_MASK
 0xC000u

	)

20396 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_PUS_SHIFT
 14

	)

20397 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_PUS_MASK
)

	)

20398 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_HYS_MASK
 0x10000u

	)

20399 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_HYS_SHIFT
 16

	)

20401 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_SRE_MASK
 0x1u

	)

20402 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_SRE_SHIFT
 0

	)

20403 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_DSE_MASK
 0x38u

	)

20404 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_DSE_SHIFT
 3

	)

20405 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_DSE_MASK
)

	)

20406 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_SPEED_MASK
 0xC0u

	)

20407 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_SPEED_SHIFT
 6

	)

20408 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_SPEED_MASK
)

	)

20409 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_ODE_MASK
 0x800u

	)

20410 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_ODE_SHIFT
 11

	)

20411 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_PKE_MASK
 0x1000u

	)

20412 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_PKE_SHIFT
 12

	)

20413 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_PUE_MASK
 0x2000u

	)

20414 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_PUE_SHIFT
 13

	)

20415 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_PUS_MASK
 0xC000u

	)

20416 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_PUS_SHIFT
 14

	)

20417 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_PUS_MASK
)

	)

20418 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_HYS_MASK
 0x10000u

	)

20419 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_HYS_SHIFT
 16

	)

20421 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_SRE_MASK
 0x1u

	)

20422 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_SRE_SHIFT
 0

	)

20423 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_DSE_MASK
 0x38u

	)

20424 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_DSE_SHIFT
 3

	)

20425 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_DSE_MASK
)

	)

20426 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_SPEED_MASK
 0xC0u

	)

20427 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_SPEED_SHIFT
 6

	)

20428 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_SPEED_MASK
)

	)

20429 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_ODE_MASK
 0x800u

	)

20430 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_ODE_SHIFT
 11

	)

20431 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_PKE_MASK
 0x1000u

	)

20432 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_PKE_SHIFT
 12

	)

20433 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_PUE_MASK
 0x2000u

	)

20434 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_PUE_SHIFT
 13

	)

20435 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_PUS_MASK
 0xC000u

	)

20436 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_PUS_SHIFT
 14

	)

20437 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_PUS_MASK
)

	)

20438 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_HYS_MASK
 0x10000u

	)

20439 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_HYS_SHIFT
 16

	)

20441 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_SRE_MASK
 0x1u

	)

20442 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_SRE_SHIFT
 0

	)

20443 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_DSE_MASK
 0x38u

	)

20444 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_DSE_SHIFT
 3

	)

20445 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_DSE_MASK
)

	)

20446 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_SPEED_MASK
 0xC0u

	)

20447 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_SPEED_SHIFT
 6

	)

20448 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_SPEED_MASK
)

	)

20449 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_ODE_MASK
 0x800u

	)

20450 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_ODE_SHIFT
 11

	)

20451 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_PKE_MASK
 0x1000u

	)

20452 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_PKE_SHIFT
 12

	)

20453 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_PUE_MASK
 0x2000u

	)

20454 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_PUE_SHIFT
 13

	)

20455 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_PUS_MASK
 0xC000u

	)

20456 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_PUS_SHIFT
 14

	)

20457 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_PUS_MASK
)

	)

20458 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_HYS_MASK
 0x10000u

	)

20459 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_HYS_SHIFT
 16

	)

20461 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_SRE_MASK
 0x1u

	)

20462 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_SRE_SHIFT
 0

	)

20463 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_DSE_MASK
 0x38u

	)

20464 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_DSE_SHIFT
 3

	)

20465 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_DSE_MASK
)

	)

20466 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_SPEED_MASK
 0xC0u

	)

20467 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_SPEED_SHIFT
 6

	)

20468 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_SPEED_MASK
)

	)

20469 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_ODE_MASK
 0x800u

	)

20470 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_ODE_SHIFT
 11

	)

20471 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_PKE_MASK
 0x1000u

	)

20472 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_PKE_SHIFT
 12

	)

20473 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_PUE_MASK
 0x2000u

	)

20474 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_PUE_SHIFT
 13

	)

20475 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_PUS_MASK
 0xC000u

	)

20476 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_PUS_SHIFT
 14

	)

20477 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_PUS_MASK
)

	)

20478 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_HYS_MASK
 0x10000u

	)

20479 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_HYS_SHIFT
 16

	)

20481 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_SRE_MASK
 0x1u

	)

20482 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_SRE_SHIFT
 0

	)

20483 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_DSE_MASK
 0x38u

	)

20484 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_DSE_SHIFT
 3

	)

20485 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_DSE_MASK
)

	)

20486 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_SPEED_MASK
 0xC0u

	)

20487 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_SPEED_SHIFT
 6

	)

20488 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_SPEED_MASK
)

	)

20489 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_ODE_MASK
 0x800u

	)

20490 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_ODE_SHIFT
 11

	)

20491 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_PKE_MASK
 0x1000u

	)

20492 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_PKE_SHIFT
 12

	)

20493 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_PUE_MASK
 0x2000u

	)

20494 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_PUE_SHIFT
 13

	)

20495 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_PUS_MASK
 0xC000u

	)

20496 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_PUS_SHIFT
 14

	)

20497 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_PUS_MASK
)

	)

20498 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_HYS_MASK
 0x10000u

	)

20499 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_HYS_SHIFT
 16

	)

20501 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_SRE_MASK
 0x1u

	)

20502 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_SRE_SHIFT
 0

	)

20503 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_DSE_MASK
 0x38u

	)

20504 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_DSE_SHIFT
 3

	)

20505 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_DSE_MASK
)

	)

20506 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_SPEED_MASK
 0xC0u

	)

20507 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_SPEED_SHIFT
 6

	)

20508 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_SPEED_MASK
)

	)

20509 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_ODE_MASK
 0x800u

	)

20510 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_ODE_SHIFT
 11

	)

20511 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_PKE_MASK
 0x1000u

	)

20512 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_PKE_SHIFT
 12

	)

20513 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_PUE_MASK
 0x2000u

	)

20514 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_PUE_SHIFT
 13

	)

20515 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_PUS_MASK
 0xC000u

	)

20516 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_PUS_SHIFT
 14

	)

20517 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_PUS_MASK
)

	)

20518 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_HYS_MASK
 0x10000u

	)

20519 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_HYS_SHIFT
 16

	)

20521 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_SRE_MASK
 0x1u

	)

20522 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_SRE_SHIFT
 0

	)

20523 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_DSE_MASK
 0x38u

	)

20524 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_DSE_SHIFT
 3

	)

20525 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_DSE_MASK
)

	)

20526 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_SPEED_MASK
 0xC0u

	)

20527 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_SPEED_SHIFT
 6

	)

20528 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_SPEED_MASK
)

	)

20529 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_ODE_MASK
 0x800u

	)

20530 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_ODE_SHIFT
 11

	)

20531 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_PKE_MASK
 0x1000u

	)

20532 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_PKE_SHIFT
 12

	)

20533 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_PUE_MASK
 0x2000u

	)

20534 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_PUE_SHIFT
 13

	)

20535 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_PUS_MASK
 0xC000u

	)

20536 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_PUS_SHIFT
 14

	)

20537 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_PUS_MASK
)

	)

20538 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_HYS_MASK
 0x10000u

	)

20539 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_HYS_SHIFT
 16

	)

20541 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_SRE_MASK
 0x1u

	)

20542 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_SRE_SHIFT
 0

	)

20543 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_DSE_MASK
 0x38u

	)

20544 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_DSE_SHIFT
 3

	)

20545 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_DSE_MASK
)

	)

20546 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_SPEED_MASK
 0xC0u

	)

20547 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_SPEED_SHIFT
 6

	)

20548 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_SPEED_MASK
)

	)

20549 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_ODE_MASK
 0x800u

	)

20550 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_ODE_SHIFT
 11

	)

20551 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_PKE_MASK
 0x1000u

	)

20552 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_PKE_SHIFT
 12

	)

20553 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_PUE_MASK
 0x2000u

	)

20554 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_PUE_SHIFT
 13

	)

20555 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_PUS_MASK
 0xC000u

	)

20556 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_PUS_SHIFT
 14

	)

20557 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_PUS_MASK
)

	)

20558 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_HYS_MASK
 0x10000u

	)

20559 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_HYS_SHIFT
 16

	)

20561 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_SRE_MASK
 0x1u

	)

20562 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_SRE_SHIFT
 0

	)

20563 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_DSE_MASK
 0x38u

	)

20564 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_DSE_SHIFT
 3

	)

20565 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_DSE_MASK
)

	)

20566 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_SPEED_MASK
 0xC0u

	)

20567 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_SPEED_SHIFT
 6

	)

20568 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_SPEED_MASK
)

	)

20569 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_ODE_MASK
 0x800u

	)

20570 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_ODE_SHIFT
 11

	)

20571 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_PKE_MASK
 0x1000u

	)

20572 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_PKE_SHIFT
 12

	)

20573 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_PUE_MASK
 0x2000u

	)

20574 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_PUE_SHIFT
 13

	)

20575 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_PUS_MASK
 0xC000u

	)

20576 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_PUS_SHIFT
 14

	)

20577 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_PUS_MASK
)

	)

20578 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_HYS_MASK
 0x10000u

	)

20579 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_HYS_SHIFT
 16

	)

20581 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_SRE_MASK
 0x1u

	)

20582 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_SRE_SHIFT
 0

	)

20583 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_DSE_MASK
 0x38u

	)

20584 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_DSE_SHIFT
 3

	)

20585 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_DSE_MASK
)

	)

20586 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_SPEED_MASK
 0xC0u

	)

20587 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_SPEED_SHIFT
 6

	)

20588 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_SPEED_MASK
)

	)

20589 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_ODE_MASK
 0x800u

	)

20590 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_ODE_SHIFT
 11

	)

20591 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_PKE_MASK
 0x1000u

	)

20592 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_PKE_SHIFT
 12

	)

20593 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_PUE_MASK
 0x2000u

	)

20594 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_PUE_SHIFT
 13

	)

20595 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_PUS_MASK
 0xC000u

	)

20596 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_PUS_SHIFT
 14

	)

20597 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_PUS_MASK
)

	)

20598 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_HYS_MASK
 0x10000u

	)

20599 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_HYS_SHIFT
 16

	)

20601 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_SRE_MASK
 0x1u

	)

20602 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_SRE_SHIFT
 0

	)

20603 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_DSE_MASK
 0x38u

	)

20604 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_DSE_SHIFT
 3

	)

20605 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_DSE_MASK
)

	)

20606 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_SPEED_MASK
 0xC0u

	)

20607 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_SPEED_SHIFT
 6

	)

20608 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_SPEED_MASK
)

	)

20609 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_ODE_MASK
 0x800u

	)

20610 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_ODE_SHIFT
 11

	)

20611 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_PKE_MASK
 0x1000u

	)

20612 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_PKE_SHIFT
 12

	)

20613 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_PUE_MASK
 0x2000u

	)

20614 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_PUE_SHIFT
 13

	)

20615 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_PUS_MASK
 0xC000u

	)

20616 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_PUS_SHIFT
 14

	)

20617 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_PUS_MASK
)

	)

20618 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_HYS_MASK
 0x10000u

	)

20619 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_HYS_SHIFT
 16

	)

20621 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_SRE_MASK
 0x1u

	)

20622 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_SRE_SHIFT
 0

	)

20623 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_DSE_MASK
 0x38u

	)

20624 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_DSE_SHIFT
 3

	)

20625 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_DSE_MASK
)

	)

20626 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_SPEED_MASK
 0xC0u

	)

20627 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_SPEED_SHIFT
 6

	)

20628 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_SPEED_MASK
)

	)

20629 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_ODE_MASK
 0x800u

	)

20630 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_ODE_SHIFT
 11

	)

20631 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_PKE_MASK
 0x1000u

	)

20632 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_PKE_SHIFT
 12

	)

20633 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_PUE_MASK
 0x2000u

	)

20634 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_PUE_SHIFT
 13

	)

20635 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_PUS_MASK
 0xC000u

	)

20636 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_PUS_SHIFT
 14

	)

20637 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_PUS_MASK
)

	)

20638 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_HYS_MASK
 0x10000u

	)

20639 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_HYS_SHIFT
 16

	)

20641 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_SRE_MASK
 0x1u

	)

20642 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_SRE_SHIFT
 0

	)

20643 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_DSE_MASK
 0x38u

	)

20644 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_DSE_SHIFT
 3

	)

20645 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_DSE_MASK
)

	)

20646 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_SPEED_MASK
 0xC0u

	)

20647 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_SPEED_SHIFT
 6

	)

20648 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_SPEED_MASK
)

	)

20649 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_ODE_MASK
 0x800u

	)

20650 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_ODE_SHIFT
 11

	)

20651 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_PKE_MASK
 0x1000u

	)

20652 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_PKE_SHIFT
 12

	)

20653 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_PUE_MASK
 0x2000u

	)

20654 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_PUE_SHIFT
 13

	)

20655 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_PUS_MASK
 0xC000u

	)

20656 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_PUS_SHIFT
 14

	)

20657 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_PUS_MASK
)

	)

20658 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_HYS_MASK
 0x10000u

	)

20659 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_HYS_SHIFT
 16

	)

20661 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_SRE_MASK
 0x1u

	)

20662 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_SRE_SHIFT
 0

	)

20663 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_DSE_MASK
 0x38u

	)

20664 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_DSE_SHIFT
 3

	)

20665 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_DSE_MASK
)

	)

20666 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_SPEED_MASK
 0xC0u

	)

20667 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_SPEED_SHIFT
 6

	)

20668 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_SPEED_MASK
)

	)

20669 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_ODE_MASK
 0x800u

	)

20670 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_ODE_SHIFT
 11

	)

20671 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_PKE_MASK
 0x1000u

	)

20672 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_PKE_SHIFT
 12

	)

20673 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_PUE_MASK
 0x2000u

	)

20674 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_PUE_SHIFT
 13

	)

20675 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_PUS_MASK
 0xC000u

	)

20676 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_PUS_SHIFT
 14

	)

20677 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_PUS_MASK
)

	)

20678 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_HYS_MASK
 0x10000u

	)

20679 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_HYS_SHIFT
 16

	)

20681 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_SRE_MASK
 0x1u

	)

20682 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_SRE_SHIFT
 0

	)

20683 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_DSE_MASK
 0x38u

	)

20684 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_DSE_SHIFT
 3

	)

20685 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_DSE_MASK
)

	)

20686 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_SPEED_MASK
 0xC0u

	)

20687 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_SPEED_SHIFT
 6

	)

20688 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_SPEED_MASK
)

	)

20689 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_ODE_MASK
 0x800u

	)

20690 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_ODE_SHIFT
 11

	)

20691 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_PKE_MASK
 0x1000u

	)

20692 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_PKE_SHIFT
 12

	)

20693 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_PUE_MASK
 0x2000u

	)

20694 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_PUE_SHIFT
 13

	)

20695 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_PUS_MASK
 0xC000u

	)

20696 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_PUS_SHIFT
 14

	)

20697 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_PUS_MASK
)

	)

20698 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_HYS_MASK
 0x10000u

	)

20699 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_HYS_SHIFT
 16

	)

20701 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_SRE_MASK
 0x1u

	)

20702 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_SRE_SHIFT
 0

	)

20703 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_DSE_MASK
 0x38u

	)

20704 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_DSE_SHIFT
 3

	)

20705 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_DSE_MASK
)

	)

20706 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_SPEED_MASK
 0xC0u

	)

20707 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_SPEED_SHIFT
 6

	)

20708 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_SPEED_MASK
)

	)

20709 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_ODE_MASK
 0x800u

	)

20710 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_ODE_SHIFT
 11

	)

20711 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_PKE_MASK
 0x1000u

	)

20712 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_PKE_SHIFT
 12

	)

20713 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_PUE_MASK
 0x2000u

	)

20714 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_PUE_SHIFT
 13

	)

20715 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_PUS_MASK
 0xC000u

	)

20716 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_PUS_SHIFT
 14

	)

20717 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_PUS_MASK
)

	)

20718 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_HYS_MASK
 0x10000u

	)

20719 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_HYS_SHIFT
 16

	)

20721 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_SRE_MASK
 0x1u

	)

20722 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_SRE_SHIFT
 0

	)

20723 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_DSE_MASK
 0x38u

	)

20724 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_DSE_SHIFT
 3

	)

20725 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_DSE_MASK
)

	)

20726 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_SPEED_MASK
 0xC0u

	)

20727 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_SPEED_SHIFT
 6

	)

20728 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_SPEED_MASK
)

	)

20729 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_ODE_MASK
 0x800u

	)

20730 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_ODE_SHIFT
 11

	)

20731 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_PKE_MASK
 0x1000u

	)

20732 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_PKE_SHIFT
 12

	)

20733 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_PUE_MASK
 0x2000u

	)

20734 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_PUE_SHIFT
 13

	)

20735 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_PUS_MASK
 0xC000u

	)

20736 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_PUS_SHIFT
 14

	)

20737 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_PUS_MASK
)

	)

20738 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_HYS_MASK
 0x10000u

	)

20739 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_HYS_SHIFT
 16

	)

20741 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_SRE_MASK
 0x1u

	)

20742 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_SRE_SHIFT
 0

	)

20743 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_DSE_MASK
 0x38u

	)

20744 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_DSE_SHIFT
 3

	)

20745 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_DSE_MASK
)

	)

20746 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_SPEED_MASK
 0xC0u

	)

20747 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_SPEED_SHIFT
 6

	)

20748 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_SPEED_MASK
)

	)

20749 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_ODE_MASK
 0x800u

	)

20750 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_ODE_SHIFT
 11

	)

20751 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_PKE_MASK
 0x1000u

	)

20752 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_PKE_SHIFT
 12

	)

20753 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_PUE_MASK
 0x2000u

	)

20754 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_PUE_SHIFT
 13

	)

20755 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_PUS_MASK
 0xC000u

	)

20756 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_PUS_SHIFT
 14

	)

20757 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_PUS_MASK
)

	)

20758 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_HYS_MASK
 0x10000u

	)

20759 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_HYS_SHIFT
 16

	)

20761 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_SRE_MASK
 0x1u

	)

20762 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_SRE_SHIFT
 0

	)

20763 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_DSE_MASK
 0x38u

	)

20764 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_DSE_SHIFT
 3

	)

20765 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_DSE_MASK
)

	)

20766 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_SPEED_MASK
 0xC0u

	)

20767 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_SPEED_SHIFT
 6

	)

20768 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_SPEED_MASK
)

	)

20769 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_ODE_MASK
 0x800u

	)

20770 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_ODE_SHIFT
 11

	)

20771 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_PKE_MASK
 0x1000u

	)

20772 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_PKE_SHIFT
 12

	)

20773 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_PUE_MASK
 0x2000u

	)

20774 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_PUE_SHIFT
 13

	)

20775 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_PUS_MASK
 0xC000u

	)

20776 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_PUS_SHIFT
 14

	)

20777 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_PUS_MASK
)

	)

20778 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_HYS_MASK
 0x10000u

	)

20779 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_HYS_SHIFT
 16

	)

20781 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_SRE_MASK
 0x1u

	)

20782 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_SRE_SHIFT
 0

	)

20783 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_DSE_MASK
 0x38u

	)

20784 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_DSE_SHIFT
 3

	)

20785 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_DSE_MASK
)

	)

20786 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_SPEED_MASK
 0xC0u

	)

20787 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_SPEED_SHIFT
 6

	)

20788 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_SPEED_MASK
)

	)

20789 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_ODE_MASK
 0x800u

	)

20790 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_ODE_SHIFT
 11

	)

20791 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_PKE_MASK
 0x1000u

	)

20792 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_PKE_SHIFT
 12

	)

20793 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_PUE_MASK
 0x2000u

	)

20794 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_PUE_SHIFT
 13

	)

20795 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_PUS_MASK
 0xC000u

	)

20796 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_PUS_SHIFT
 14

	)

20797 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_PUS_MASK
)

	)

20798 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_HYS_MASK
 0x10000u

	)

20799 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_HYS_SHIFT
 16

	)

20801 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_SRE_MASK
 0x1u

	)

20802 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_SRE_SHIFT
 0

	)

20803 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_DSE_MASK
 0x38u

	)

20804 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_DSE_SHIFT
 3

	)

20805 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_DSE_MASK
)

	)

20806 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_SPEED_MASK
 0xC0u

	)

20807 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_SPEED_SHIFT
 6

	)

20808 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_SPEED_MASK
)

	)

20809 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_ODE_MASK
 0x800u

	)

20810 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_ODE_SHIFT
 11

	)

20811 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_PKE_MASK
 0x1000u

	)

20812 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_PKE_SHIFT
 12

	)

20813 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_PUE_MASK
 0x2000u

	)

20814 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_PUE_SHIFT
 13

	)

20815 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_PUS_MASK
 0xC000u

	)

20816 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_PUS_SHIFT
 14

	)

20817 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_PUS_MASK
)

	)

20818 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_HYS_MASK
 0x10000u

	)

20819 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_HYS_SHIFT
 16

	)

20821 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_SRE_MASK
 0x1u

	)

20822 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_SRE_SHIFT
 0

	)

20823 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_DSE_MASK
 0x38u

	)

20824 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_DSE_SHIFT
 3

	)

20825 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_DSE_MASK
)

	)

20826 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_SPEED_MASK
 0xC0u

	)

20827 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_SPEED_SHIFT
 6

	)

20828 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_SPEED_MASK
)

	)

20829 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_ODE_MASK
 0x800u

	)

20830 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_ODE_SHIFT
 11

	)

20831 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_PKE_MASK
 0x1000u

	)

20832 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_PKE_SHIFT
 12

	)

20833 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_PUE_MASK
 0x2000u

	)

20834 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_PUE_SHIFT
 13

	)

20835 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_PUS_MASK
 0xC000u

	)

20836 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_PUS_SHIFT
 14

	)

20837 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_PUS_MASK
)

	)

20838 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_HYS_MASK
 0x10000u

	)

20839 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_HYS_SHIFT
 16

	)

20841 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_SRE_MASK
 0x1u

	)

20842 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_SRE_SHIFT
 0

	)

20843 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_DSE_MASK
 0x38u

	)

20844 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_DSE_SHIFT
 3

	)

20845 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_DSE_MASK
)

	)

20846 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_SPEED_MASK
 0xC0u

	)

20847 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_SPEED_SHIFT
 6

	)

20848 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_SPEED_MASK
)

	)

20849 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_ODE_MASK
 0x800u

	)

20850 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_ODE_SHIFT
 11

	)

20851 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_PKE_MASK
 0x1000u

	)

20852 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_PKE_SHIFT
 12

	)

20853 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_PUE_MASK
 0x2000u

	)

20854 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_PUE_SHIFT
 13

	)

20855 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_PUS_MASK
 0xC000u

	)

20856 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_PUS_SHIFT
 14

	)

20857 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_PUS_MASK
)

	)

20858 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_HYS_MASK
 0x10000u

	)

20859 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_HYS_SHIFT
 16

	)

20861 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_SRE_MASK
 0x1u

	)

20862 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_SRE_SHIFT
 0

	)

20863 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_DSE_MASK
 0x38u

	)

20864 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_DSE_SHIFT
 3

	)

20865 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_DSE_MASK
)

	)

20866 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_SPEED_MASK
 0xC0u

	)

20867 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_SPEED_SHIFT
 6

	)

20868 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_SPEED_MASK
)

	)

20869 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_ODE_MASK
 0x800u

	)

20870 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_ODE_SHIFT
 11

	)

20871 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_PKE_MASK
 0x1000u

	)

20872 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_PKE_SHIFT
 12

	)

20873 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_PUE_MASK
 0x2000u

	)

20874 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_PUE_SHIFT
 13

	)

20875 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_PUS_MASK
 0xC000u

	)

20876 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_PUS_SHIFT
 14

	)

20877 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_PUS_MASK
)

	)

20878 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_HYS_MASK
 0x10000u

	)

20879 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_HYS_SHIFT
 16

	)

20881 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_SRE_MASK
 0x1u

	)

20882 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_SRE_SHIFT
 0

	)

20883 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_DSE_MASK
 0x38u

	)

20884 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_DSE_SHIFT
 3

	)

20885 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_DSE_MASK
)

	)

20886 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_SPEED_MASK
 0xC0u

	)

20887 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_SPEED_SHIFT
 6

	)

20888 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_SPEED_MASK
)

	)

20889 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_ODE_MASK
 0x800u

	)

20890 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_ODE_SHIFT
 11

	)

20891 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_PKE_MASK
 0x1000u

	)

20892 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_PKE_SHIFT
 12

	)

20893 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_PUE_MASK
 0x2000u

	)

20894 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_PUE_SHIFT
 13

	)

20895 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_PUS_MASK
 0xC000u

	)

20896 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_PUS_SHIFT
 14

	)

20897 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_PUS_MASK
)

	)

20898 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_HYS_MASK
 0x10000u

	)

20899 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_HYS_SHIFT
 16

	)

20901 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_SRE_MASK
 0x1u

	)

20902 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_SRE_SHIFT
 0

	)

20903 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_DSE_MASK
 0x38u

	)

20904 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_DSE_SHIFT
 3

	)

20905 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_DSE_MASK
)

	)

20906 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_SPEED_MASK
 0xC0u

	)

20907 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_SPEED_SHIFT
 6

	)

20908 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_SPEED_MASK
)

	)

20909 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_ODE_MASK
 0x800u

	)

20910 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_ODE_SHIFT
 11

	)

20911 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_PKE_MASK
 0x1000u

	)

20912 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_PKE_SHIFT
 12

	)

20913 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_PUE_MASK
 0x2000u

	)

20914 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_PUE_SHIFT
 13

	)

20915 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_PUS_MASK
 0xC000u

	)

20916 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_PUS_SHIFT
 14

	)

20917 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_PUS_MASK
)

	)

20918 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_HYS_MASK
 0x10000u

	)

20919 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_HYS_SHIFT
 16

	)

20921 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_SRE_MASK
 0x1u

	)

20922 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_SRE_SHIFT
 0

	)

20923 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_DSE_MASK
 0x38u

	)

20924 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_DSE_SHIFT
 3

	)

20925 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_DSE_MASK
)

	)

20926 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_SPEED_MASK
 0xC0u

	)

20927 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_SPEED_SHIFT
 6

	)

20928 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_SPEED_MASK
)

	)

20929 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_ODE_MASK
 0x800u

	)

20930 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_ODE_SHIFT
 11

	)

20931 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_PKE_MASK
 0x1000u

	)

20932 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_PKE_SHIFT
 12

	)

20933 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_PUE_MASK
 0x2000u

	)

20934 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_PUE_SHIFT
 13

	)

20935 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_PUS_MASK
 0xC000u

	)

20936 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_PUS_SHIFT
 14

	)

20937 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_PUS_MASK
)

	)

20938 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_HYS_MASK
 0x10000u

	)

20939 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_HYS_SHIFT
 16

	)

20941 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_SRE_MASK
 0x1u

	)

20942 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_SRE_SHIFT
 0

	)

20943 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_DSE_MASK
 0x38u

	)

20944 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_DSE_SHIFT
 3

	)

20945 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_DSE_MASK
)

	)

20946 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_SPEED_MASK
 0xC0u

	)

20947 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_SPEED_SHIFT
 6

	)

20948 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_SPEED_MASK
)

	)

20949 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_ODE_MASK
 0x800u

	)

20950 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_ODE_SHIFT
 11

	)

20951 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_PKE_MASK
 0x1000u

	)

20952 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_PKE_SHIFT
 12

	)

20953 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_PUE_MASK
 0x2000u

	)

20954 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_PUE_SHIFT
 13

	)

20955 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_PUS_MASK
 0xC000u

	)

20956 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_PUS_SHIFT
 14

	)

20957 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_PUS_MASK
)

	)

20958 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_HYS_MASK
 0x10000u

	)

20959 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_HYS_SHIFT
 16

	)

20961 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_SRE_MASK
 0x1u

	)

20962 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_SRE_SHIFT
 0

	)

20963 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_DSE_MASK
 0x38u

	)

20964 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_DSE_SHIFT
 3

	)

20965 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_DSE_MASK
)

	)

20966 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_SPEED_MASK
 0xC0u

	)

20967 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_SPEED_SHIFT
 6

	)

20968 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_SPEED_MASK
)

	)

20969 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_ODE_MASK
 0x800u

	)

20970 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_ODE_SHIFT
 11

	)

20971 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_PKE_MASK
 0x1000u

	)

20972 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_PKE_SHIFT
 12

	)

20973 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_PUE_MASK
 0x2000u

	)

20974 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_PUE_SHIFT
 13

	)

20975 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_PUS_MASK
 0xC000u

	)

20976 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_PUS_SHIFT
 14

	)

20977 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_PUS_MASK
)

	)

20978 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_HYS_MASK
 0x10000u

	)

20979 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_HYS_SHIFT
 16

	)

20981 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_SRE_MASK
 0x1u

	)

20982 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_SRE_SHIFT
 0

	)

20983 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_DSE_MASK
 0x38u

	)

20984 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_DSE_SHIFT
 3

	)

20985 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_DSE_MASK
)

	)

20986 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_SPEED_MASK
 0xC0u

	)

20987 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_SPEED_SHIFT
 6

	)

20988 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_SPEED_MASK
)

	)

20989 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_ODE_MASK
 0x800u

	)

20990 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_ODE_SHIFT
 11

	)

20991 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_PKE_MASK
 0x1000u

	)

20992 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_PKE_SHIFT
 12

	)

20993 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_PUE_MASK
 0x2000u

	)

20994 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_PUE_SHIFT
 13

	)

20995 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_PUS_MASK
 0xC000u

	)

20996 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_PUS_SHIFT
 14

	)

20997 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_PUS_MASK
)

	)

20998 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_HYS_MASK
 0x10000u

	)

20999 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_HYS_SHIFT
 16

	)

21001 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_SRE_MASK
 0x1u

	)

21002 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_SRE_SHIFT
 0

	)

21003 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_DSE_MASK
 0x38u

	)

21004 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_DSE_SHIFT
 3

	)

21005 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_DSE_MASK
)

	)

21006 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_SPEED_MASK
 0xC0u

	)

21007 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_SPEED_SHIFT
 6

	)

21008 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_SPEED_MASK
)

	)

21009 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_ODE_MASK
 0x800u

	)

21010 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_ODE_SHIFT
 11

	)

21011 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_PKE_MASK
 0x1000u

	)

21012 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_PKE_SHIFT
 12

	)

21013 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_PUE_MASK
 0x2000u

	)

21014 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_PUE_SHIFT
 13

	)

21015 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_PUS_MASK
 0xC000u

	)

21016 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_PUS_SHIFT
 14

	)

21017 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_PUS_MASK
)

	)

21018 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_HYS_MASK
 0x10000u

	)

21019 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_HYS_SHIFT
 16

	)

21021 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_SRE_MASK
 0x1u

	)

21022 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_SRE_SHIFT
 0

	)

21023 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_DSE_MASK
 0x38u

	)

21024 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_DSE_SHIFT
 3

	)

21025 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_DSE_MASK
)

	)

21026 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_SPEED_MASK
 0xC0u

	)

21027 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_SPEED_SHIFT
 6

	)

21028 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_SPEED_MASK
)

	)

21029 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_ODE_MASK
 0x800u

	)

21030 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_ODE_SHIFT
 11

	)

21031 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_PKE_MASK
 0x1000u

	)

21032 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_PKE_SHIFT
 12

	)

21033 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_PUE_MASK
 0x2000u

	)

21034 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_PUE_SHIFT
 13

	)

21035 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_PUS_MASK
 0xC000u

	)

21036 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_PUS_SHIFT
 14

	)

21037 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_PUS_MASK
)

	)

21038 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_HYS_MASK
 0x10000u

	)

21039 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_HYS_SHIFT
 16

	)

21041 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_SRE_MASK
 0x1u

	)

21042 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_SRE_SHIFT
 0

	)

21043 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_DSE_MASK
 0x38u

	)

21044 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_DSE_SHIFT
 3

	)

21045 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_DSE_MASK
)

	)

21046 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_SPEED_MASK
 0xC0u

	)

21047 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_SPEED_SHIFT
 6

	)

21048 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_SPEED_MASK
)

	)

21049 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_ODE_MASK
 0x800u

	)

21050 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_ODE_SHIFT
 11

	)

21051 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_PKE_MASK
 0x1000u

	)

21052 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_PKE_SHIFT
 12

	)

21053 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_PUE_MASK
 0x2000u

	)

21054 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_PUE_SHIFT
 13

	)

21055 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_PUS_MASK
 0xC000u

	)

21056 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_PUS_SHIFT
 14

	)

21057 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_PUS_MASK
)

	)

21058 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_HYS_MASK
 0x10000u

	)

21059 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_HYS_SHIFT
 16

	)

21061 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_SRE_MASK
 0x1u

	)

21062 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_SRE_SHIFT
 0

	)

21063 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_DSE_MASK
 0x38u

	)

21064 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_DSE_SHIFT
 3

	)

21065 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_DSE_MASK
)

	)

21066 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_SPEED_MASK
 0xC0u

	)

21067 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_SPEED_SHIFT
 6

	)

21068 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_SPEED_MASK
)

	)

21069 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_ODE_MASK
 0x800u

	)

21070 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_ODE_SHIFT
 11

	)

21071 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_PKE_MASK
 0x1000u

	)

21072 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_PKE_SHIFT
 12

	)

21073 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_PUE_MASK
 0x2000u

	)

21074 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_PUE_SHIFT
 13

	)

21075 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_PUS_MASK
 0xC000u

	)

21076 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_PUS_SHIFT
 14

	)

21077 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_PUS_MASK
)

	)

21078 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_HYS_MASK
 0x10000u

	)

21079 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_HYS_SHIFT
 16

	)

21081 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_SRE_MASK
 0x1u

	)

21082 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_SRE_SHIFT
 0

	)

21083 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_DSE_MASK
 0x38u

	)

21084 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_DSE_SHIFT
 3

	)

21085 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_DSE_MASK
)

	)

21086 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_SPEED_MASK
 0xC0u

	)

21087 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_SPEED_SHIFT
 6

	)

21088 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_SPEED_MASK
)

	)

21089 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_ODE_MASK
 0x800u

	)

21090 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_ODE_SHIFT
 11

	)

21091 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_PKE_MASK
 0x1000u

	)

21092 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_PKE_SHIFT
 12

	)

21093 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_PUE_MASK
 0x2000u

	)

21094 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_PUE_SHIFT
 13

	)

21095 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_PUS_MASK
 0xC000u

	)

21096 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_PUS_SHIFT
 14

	)

21097 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_PUS_MASK
)

	)

21098 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_HYS_MASK
 0x10000u

	)

21099 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_HYS_SHIFT
 16

	)

21101 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_SRE_MASK
 0x1u

	)

21102 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_SRE_SHIFT
 0

	)

21103 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_DSE_MASK
 0x38u

	)

21104 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_DSE_SHIFT
 3

	)

21105 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_DSE_MASK
)

	)

21106 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_SPEED_MASK
 0xC0u

	)

21107 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_SPEED_SHIFT
 6

	)

21108 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_SPEED_MASK
)

	)

21109 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_ODE_MASK
 0x800u

	)

21110 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_ODE_SHIFT
 11

	)

21111 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_PKE_MASK
 0x1000u

	)

21112 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_PKE_SHIFT
 12

	)

21113 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_PUE_MASK
 0x2000u

	)

21114 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_PUE_SHIFT
 13

	)

21115 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_PUS_MASK
 0xC000u

	)

21116 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_PUS_SHIFT
 14

	)

21117 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_PUS_MASK
)

	)

21118 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_HYS_MASK
 0x10000u

	)

21119 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_HYS_SHIFT
 16

	)

21121 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_SRE_MASK
 0x1u

	)

21122 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_SRE_SHIFT
 0

	)

21123 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_DSE_MASK
 0x38u

	)

21124 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_DSE_SHIFT
 3

	)

21125 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_DSE_MASK
)

	)

21126 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_SPEED_MASK
 0xC0u

	)

21127 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_SPEED_SHIFT
 6

	)

21128 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_SPEED_MASK
)

	)

21129 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_ODE_MASK
 0x800u

	)

21130 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_ODE_SHIFT
 11

	)

21131 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_PKE_MASK
 0x1000u

	)

21132 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_PKE_SHIFT
 12

	)

21133 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_PUE_MASK
 0x2000u

	)

21134 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_PUE_SHIFT
 13

	)

21135 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_PUS_MASK
 0xC000u

	)

21136 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_PUS_SHIFT
 14

	)

21137 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_PUS_MASK
)

	)

21138 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_HYS_MASK
 0x10000u

	)

21139 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_HYS_SHIFT
 16

	)

21141 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_SRE_MASK
 0x1u

	)

21142 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_SRE_SHIFT
 0

	)

21143 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_DSE_MASK
 0x38u

	)

21144 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_DSE_SHIFT
 3

	)

21145 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_DSE_MASK
)

	)

21146 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_SPEED_MASK
 0xC0u

	)

21147 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_SPEED_SHIFT
 6

	)

21148 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_SPEED_MASK
)

	)

21149 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_ODE_MASK
 0x800u

	)

21150 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_ODE_SHIFT
 11

	)

21151 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_PKE_MASK
 0x1000u

	)

21152 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_PKE_SHIFT
 12

	)

21153 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_PUE_MASK
 0x2000u

	)

21154 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_PUE_SHIFT
 13

	)

21155 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_PUS_MASK
 0xC000u

	)

21156 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_PUS_SHIFT
 14

	)

21157 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_PUS_MASK
)

	)

21158 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_HYS_MASK
 0x10000u

	)

21159 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_HYS_SHIFT
 16

	)

21161 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_SRE_MASK
 0x1u

	)

21162 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_SRE_SHIFT
 0

	)

21163 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_DSE_MASK
 0x38u

	)

21164 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_DSE_SHIFT
 3

	)

21165 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_DSE_MASK
)

	)

21166 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_SPEED_MASK
 0xC0u

	)

21167 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_SPEED_SHIFT
 6

	)

21168 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_SPEED_MASK
)

	)

21169 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_ODE_MASK
 0x800u

	)

21170 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_ODE_SHIFT
 11

	)

21171 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_PKE_MASK
 0x1000u

	)

21172 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_PKE_SHIFT
 12

	)

21173 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_PUE_MASK
 0x2000u

	)

21174 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_PUE_SHIFT
 13

	)

21175 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_PUS_MASK
 0xC000u

	)

21176 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_PUS_SHIFT
 14

	)

21177 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_PUS_MASK
)

	)

21178 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_HYS_MASK
 0x10000u

	)

21179 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_HYS_SHIFT
 16

	)

21181 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_SRE_MASK
 0x1u

	)

21182 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_SRE_SHIFT
 0

	)

21183 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_DSE_MASK
 0x38u

	)

21184 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_DSE_SHIFT
 3

	)

21185 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_DSE_MASK
)

	)

21186 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_SPEED_MASK
 0xC0u

	)

21187 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_SPEED_SHIFT
 6

	)

21188 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_SPEED_MASK
)

	)

21189 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_ODE_MASK
 0x800u

	)

21190 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_ODE_SHIFT
 11

	)

21191 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_PKE_MASK
 0x1000u

	)

21192 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_PKE_SHIFT
 12

	)

21193 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_PUE_MASK
 0x2000u

	)

21194 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_PUE_SHIFT
 13

	)

21195 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_PUS_MASK
 0xC000u

	)

21196 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_PUS_SHIFT
 14

	)

21197 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_PUS_MASK
)

	)

21198 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_HYS_MASK
 0x10000u

	)

21199 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_HYS_SHIFT
 16

	)

21201 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_SRE_MASK
 0x1u

	)

21202 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_SRE_SHIFT
 0

	)

21203 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_DSE_MASK
 0x38u

	)

21204 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_DSE_SHIFT
 3

	)

21205 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_DSE_MASK
)

	)

21206 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_SPEED_MASK
 0xC0u

	)

21207 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_SPEED_SHIFT
 6

	)

21208 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_SPEED_MASK
)

	)

21209 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_ODE_MASK
 0x800u

	)

21210 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_ODE_SHIFT
 11

	)

21211 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_PKE_MASK
 0x1000u

	)

21212 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_PKE_SHIFT
 12

	)

21213 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_PUE_MASK
 0x2000u

	)

21214 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_PUE_SHIFT
 13

	)

21215 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_PUS_MASK
 0xC000u

	)

21216 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_PUS_SHIFT
 14

	)

21217 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_PUS_MASK
)

	)

21218 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_HYS_MASK
 0x10000u

	)

21219 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_HYS_SHIFT
 16

	)

21221 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_SRE_MASK
 0x1u

	)

21222 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_SRE_SHIFT
 0

	)

21223 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_DSE_MASK
 0x38u

	)

21224 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_DSE_SHIFT
 3

	)

21225 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_DSE_MASK
)

	)

21226 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_SPEED_MASK
 0xC0u

	)

21227 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_SPEED_SHIFT
 6

	)

21228 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_SPEED_MASK
)

	)

21229 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_ODE_MASK
 0x800u

	)

21230 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_ODE_SHIFT
 11

	)

21231 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_PKE_MASK
 0x1000u

	)

21232 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_PKE_SHIFT
 12

	)

21233 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_PUE_MASK
 0x2000u

	)

21234 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_PUE_SHIFT
 13

	)

21235 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_PUS_MASK
 0xC000u

	)

21236 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_PUS_SHIFT
 14

	)

21237 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_PUS_MASK
)

	)

21238 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_HYS_MASK
 0x10000u

	)

21239 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_HYS_SHIFT
 16

	)

21241 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_SRE_MASK
 0x1u

	)

21242 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_SRE_SHIFT
 0

	)

21243 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_DSE_MASK
 0x38u

	)

21244 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_DSE_SHIFT
 3

	)

21245 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_DSE_MASK
)

	)

21246 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_SPEED_MASK
 0xC0u

	)

21247 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_SPEED_SHIFT
 6

	)

21248 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_SPEED_MASK
)

	)

21249 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_ODE_MASK
 0x800u

	)

21250 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_ODE_SHIFT
 11

	)

21251 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_PKE_MASK
 0x1000u

	)

21252 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_PKE_SHIFT
 12

	)

21253 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_PUE_MASK
 0x2000u

	)

21254 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_PUE_SHIFT
 13

	)

21255 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_PUS_MASK
 0xC000u

	)

21256 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_PUS_SHIFT
 14

	)

21257 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_PUS_MASK
)

	)

21258 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_HYS_MASK
 0x10000u

	)

21259 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_HYS_SHIFT
 16

	)

21261 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_SRE_MASK
 0x1u

	)

21262 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_SRE_SHIFT
 0

	)

21263 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_DSE_MASK
 0x38u

	)

21264 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_DSE_SHIFT
 3

	)

21265 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_DSE_MASK
)

	)

21266 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_SPEED_MASK
 0xC0u

	)

21267 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_SPEED_SHIFT
 6

	)

21268 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_SPEED_MASK
)

	)

21269 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_ODE_MASK
 0x800u

	)

21270 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_ODE_SHIFT
 11

	)

21271 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_PKE_MASK
 0x1000u

	)

21272 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_PKE_SHIFT
 12

	)

21273 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_PUE_MASK
 0x2000u

	)

21274 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_PUE_SHIFT
 13

	)

21275 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_PUS_MASK
 0xC000u

	)

21276 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_PUS_SHIFT
 14

	)

21277 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_PUS_MASK
)

	)

21278 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_HYS_MASK
 0x10000u

	)

21279 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_HYS_SHIFT
 16

	)

21281 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_SRE_MASK
 0x1u

	)

21282 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_SRE_SHIFT
 0

	)

21283 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_DSE_MASK
 0x38u

	)

21284 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_DSE_SHIFT
 3

	)

21285 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_DSE_MASK
)

	)

21286 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_SPEED_MASK
 0xC0u

	)

21287 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_SPEED_SHIFT
 6

	)

21288 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_SPEED_MASK
)

	)

21289 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_ODE_MASK
 0x800u

	)

21290 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_ODE_SHIFT
 11

	)

21291 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_PKE_MASK
 0x1000u

	)

21292 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_PKE_SHIFT
 12

	)

21293 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_PUE_MASK
 0x2000u

	)

21294 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_PUE_SHIFT
 13

	)

21295 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_PUS_MASK
 0xC000u

	)

21296 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_PUS_SHIFT
 14

	)

21297 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_PUS_MASK
)

	)

21298 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_HYS_MASK
 0x10000u

	)

21299 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_HYS_SHIFT
 16

	)

21301 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_SRE_MASK
 0x1u

	)

21302 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_SRE_SHIFT
 0

	)

21303 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_DSE_MASK
 0x38u

	)

21304 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_DSE_SHIFT
 3

	)

21305 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_DSE_MASK
)

	)

21306 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_SPEED_MASK
 0xC0u

	)

21307 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_SPEED_SHIFT
 6

	)

21308 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_SPEED_MASK
)

	)

21309 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_ODE_MASK
 0x800u

	)

21310 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_ODE_SHIFT
 11

	)

21311 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_PKE_MASK
 0x1000u

	)

21312 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_PKE_SHIFT
 12

	)

21313 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_PUE_MASK
 0x2000u

	)

21314 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_PUE_SHIFT
 13

	)

21315 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_PUS_MASK
 0xC000u

	)

21316 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_PUS_SHIFT
 14

	)

21317 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_PUS_MASK
)

	)

21318 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_HYS_MASK
 0x10000u

	)

21319 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_HYS_SHIFT
 16

	)

21321 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_SRE_MASK
 0x1u

	)

21322 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_SRE_SHIFT
 0

	)

21323 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_DSE_MASK
 0x38u

	)

21324 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_DSE_SHIFT
 3

	)

21325 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_DSE_MASK
)

	)

21326 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_SPEED_MASK
 0xC0u

	)

21327 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_SPEED_SHIFT
 6

	)

21328 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_SPEED_MASK
)

	)

21329 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_ODE_MASK
 0x800u

	)

21330 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_ODE_SHIFT
 11

	)

21331 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_PKE_MASK
 0x1000u

	)

21332 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_PKE_SHIFT
 12

	)

21333 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_PUE_MASK
 0x2000u

	)

21334 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_PUE_SHIFT
 13

	)

21335 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_PUS_MASK
 0xC000u

	)

21336 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_PUS_SHIFT
 14

	)

21337 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_PUS_MASK
)

	)

21338 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_HYS_MASK
 0x10000u

	)

21339 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_HYS_SHIFT
 16

	)

21341 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_SRE_MASK
 0x1u

	)

21342 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_SRE_SHIFT
 0

	)

21343 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_DSE_MASK
 0x38u

	)

21344 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_DSE_SHIFT
 3

	)

21345 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_DSE_MASK
)

	)

21346 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_SPEED_MASK
 0xC0u

	)

21347 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_SPEED_SHIFT
 6

	)

21348 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_SPEED_MASK
)

	)

21349 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_ODE_MASK
 0x800u

	)

21350 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_ODE_SHIFT
 11

	)

21351 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_PKE_MASK
 0x1000u

	)

21352 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_PKE_SHIFT
 12

	)

21353 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_PUE_MASK
 0x2000u

	)

21354 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_PUE_SHIFT
 13

	)

21355 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_PUS_MASK
 0xC000u

	)

21356 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_PUS_SHIFT
 14

	)

21357 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_PUS_MASK
)

	)

21358 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_HYS_MASK
 0x10000u

	)

21359 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_HYS_SHIFT
 16

	)

21361 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_SRE_MASK
 0x1u

	)

21362 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_SRE_SHIFT
 0

	)

21363 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_DSE_MASK
 0x38u

	)

21364 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_DSE_SHIFT
 3

	)

21365 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_DSE_MASK
)

	)

21366 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_SPEED_MASK
 0xC0u

	)

21367 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_SPEED_SHIFT
 6

	)

21368 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_SPEED_MASK
)

	)

21369 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_ODE_MASK
 0x800u

	)

21370 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_ODE_SHIFT
 11

	)

21371 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_PKE_MASK
 0x1000u

	)

21372 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_PKE_SHIFT
 12

	)

21373 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_PUE_MASK
 0x2000u

	)

21374 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_PUE_SHIFT
 13

	)

21375 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_PUS_MASK
 0xC000u

	)

21376 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_PUS_SHIFT
 14

	)

21377 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_PUS_MASK
)

	)

21378 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_HYS_MASK
 0x10000u

	)

21379 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_HYS_SHIFT
 16

	)

21381 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_SRE_MASK
 0x1u

	)

21382 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_SRE_SHIFT
 0

	)

21383 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_DSE_MASK
 0x38u

	)

21384 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_DSE_SHIFT
 3

	)

21385 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_DSE_MASK
)

	)

21386 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_SPEED_MASK
 0xC0u

	)

21387 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_SPEED_SHIFT
 6

	)

21388 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_SPEED_MASK
)

	)

21389 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_ODE_MASK
 0x800u

	)

21390 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_ODE_SHIFT
 11

	)

21391 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_PKE_MASK
 0x1000u

	)

21392 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_PKE_SHIFT
 12

	)

21393 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_PUE_MASK
 0x2000u

	)

21394 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_PUE_SHIFT
 13

	)

21395 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_PUS_MASK
 0xC000u

	)

21396 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_PUS_SHIFT
 14

	)

21397 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_PUS_MASK
)

	)

21398 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_HYS_MASK
 0x10000u

	)

21399 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_HYS_SHIFT
 16

	)

21401 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SRE_MASK
 0x1u

	)

21402 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SRE_SHIFT
 0

	)

21403 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_DSE_MASK
 0x38u

	)

21404 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_DSE_SHIFT
 3

	)

21405 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_DSE_MASK
)

	)

21406 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SPEED_MASK
 0xC0u

	)

21407 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SPEED_SHIFT
 6

	)

21408 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_SPEED_MASK
)

	)

21409 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_ODE_MASK
 0x800u

	)

21410 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_ODE_SHIFT
 11

	)

21411 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PKE_MASK
 0x1000u

	)

21412 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PKE_SHIFT
 12

	)

21413 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUE_MASK
 0x2000u

	)

21414 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUE_SHIFT
 13

	)

21415 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUS_MASK
 0xC000u

	)

21416 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUS_SHIFT
 14

	)

21417 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_PUS_MASK
)

	)

21418 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_HYS_MASK
 0x10000u

	)

21419 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_HYS_SHIFT
 16

	)

21421 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SRE_MASK
 0x1u

	)

21422 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SRE_SHIFT
 0

	)

21423 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_DSE_MASK
 0x38u

	)

21424 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_DSE_SHIFT
 3

	)

21425 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_DSE_MASK
)

	)

21426 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SPEED_MASK
 0xC0u

	)

21427 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SPEED_SHIFT
 6

	)

21428 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_SPEED_MASK
)

	)

21429 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_ODE_MASK
 0x800u

	)

21430 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_ODE_SHIFT
 11

	)

21431 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PKE_MASK
 0x1000u

	)

21432 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PKE_SHIFT
 12

	)

21433 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUE_MASK
 0x2000u

	)

21434 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUE_SHIFT
 13

	)

21435 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUS_MASK
 0xC000u

	)

21436 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUS_SHIFT
 14

	)

21437 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_PUS_MASK
)

	)

21438 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_HYS_MASK
 0x10000u

	)

21439 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_HYS_SHIFT
 16

	)

21441 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_SRE_MASK
 0x1u

	)

21442 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_SRE_SHIFT
 0

	)

21443 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_DSE_MASK
 0x38u

	)

21444 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_DSE_SHIFT
 3

	)

21445 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_DSE_MASK
)

	)

21446 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_SPEED_MASK
 0xC0u

	)

21447 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_SPEED_SHIFT
 6

	)

21448 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_SPEED_MASK
)

	)

21449 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_ODE_MASK
 0x800u

	)

21450 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_ODE_SHIFT
 11

	)

21451 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_PKE_MASK
 0x1000u

	)

21452 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_PKE_SHIFT
 12

	)

21453 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_PUE_MASK
 0x2000u

	)

21454 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_PUE_SHIFT
 13

	)

21455 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_PUS_MASK
 0xC000u

	)

21456 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_PUS_SHIFT
 14

	)

21457 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_PUS_MASK
)

	)

21458 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_HYS_MASK
 0x10000u

	)

21459 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_HYS_SHIFT
 16

	)

21461 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_SRE_MASK
 0x1u

	)

21462 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_SRE_SHIFT
 0

	)

21463 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_DSE_MASK
 0x38u

	)

21464 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_DSE_SHIFT
 3

	)

21465 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_DSE_MASK
)

	)

21466 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_SPEED_MASK
 0xC0u

	)

21467 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_SPEED_SHIFT
 6

	)

21468 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_SPEED_MASK
)

	)

21469 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_ODE_MASK
 0x800u

	)

21470 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_ODE_SHIFT
 11

	)

21471 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_PKE_MASK
 0x1000u

	)

21472 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_PKE_SHIFT
 12

	)

21473 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_PUE_MASK
 0x2000u

	)

21474 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_PUE_SHIFT
 13

	)

21475 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_PUS_MASK
 0xC000u

	)

21476 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_PUS_SHIFT
 14

	)

21477 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_PUS_MASK
)

	)

21478 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_HYS_MASK
 0x10000u

	)

21479 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_HYS_SHIFT
 16

	)

21481 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_SRE_MASK
 0x1u

	)

21482 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_SRE_SHIFT
 0

	)

21483 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_DSE_MASK
 0x38u

	)

21484 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_DSE_SHIFT
 3

	)

21485 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_DSE_MASK
)

	)

21486 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_SPEED_MASK
 0xC0u

	)

21487 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_SPEED_SHIFT
 6

	)

21488 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_SPEED_MASK
)

	)

21489 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_ODE_MASK
 0x800u

	)

21490 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_ODE_SHIFT
 11

	)

21491 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_PKE_MASK
 0x1000u

	)

21492 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_PKE_SHIFT
 12

	)

21493 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_PUE_MASK
 0x2000u

	)

21494 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_PUE_SHIFT
 13

	)

21495 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_PUS_MASK
 0xC000u

	)

21496 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_PUS_SHIFT
 14

	)

21497 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_PUS_MASK
)

	)

21498 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_HYS_MASK
 0x10000u

	)

21499 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_HYS_SHIFT
 16

	)

21501 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_SRE_MASK
 0x1u

	)

21502 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_SRE_SHIFT
 0

	)

21503 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_DSE_MASK
 0x38u

	)

21504 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_DSE_SHIFT
 3

	)

21505 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_DSE_MASK
)

	)

21506 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_SPEED_MASK
 0xC0u

	)

21507 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_SPEED_SHIFT
 6

	)

21508 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_SPEED_MASK
)

	)

21509 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_ODE_MASK
 0x800u

	)

21510 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_ODE_SHIFT
 11

	)

21511 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_PKE_MASK
 0x1000u

	)

21512 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_PKE_SHIFT
 12

	)

21513 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_PUE_MASK
 0x2000u

	)

21514 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_PUE_SHIFT
 13

	)

21515 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_PUS_MASK
 0xC000u

	)

21516 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_PUS_SHIFT
 14

	)

21517 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_PUS_MASK
)

	)

21518 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_HYS_MASK
 0x10000u

	)

21519 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_HYS_SHIFT
 16

	)

21521 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SRE_MASK
 0x1u

	)

21522 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SRE_SHIFT
 0

	)

21523 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_DSE_MASK
 0x38u

	)

21524 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_DSE_SHIFT
 3

	)

21525 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_DSE_MASK
)

	)

21526 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SPEED_MASK
 0xC0u

	)

21527 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SPEED_SHIFT
 6

	)

21528 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_SPEED_MASK
)

	)

21529 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_ODE_MASK
 0x800u

	)

21530 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_ODE_SHIFT
 11

	)

21531 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PKE_MASK
 0x1000u

	)

21532 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PKE_SHIFT
 12

	)

21533 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUE_MASK
 0x2000u

	)

21534 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUE_SHIFT
 13

	)

21535 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUS_MASK
 0xC000u

	)

21536 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUS_SHIFT
 14

	)

21537 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_PUS_MASK
)

	)

21538 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_HYS_MASK
 0x10000u

	)

21539 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_HYS_SHIFT
 16

	)

21541 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SRE_MASK
 0x1u

	)

21542 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SRE_SHIFT
 0

	)

21543 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_DSE_MASK
 0x38u

	)

21544 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_DSE_SHIFT
 3

	)

21545 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_DSE_MASK
)

	)

21546 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SPEED_MASK
 0xC0u

	)

21547 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SPEED_SHIFT
 6

	)

21548 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_SPEED_MASK
)

	)

21549 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_ODE_MASK
 0x800u

	)

21550 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_ODE_SHIFT
 11

	)

21551 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PKE_MASK
 0x1000u

	)

21552 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PKE_SHIFT
 12

	)

21553 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUE_MASK
 0x2000u

	)

21554 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUE_SHIFT
 13

	)

21555 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUS_MASK
 0xC000u

	)

21556 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUS_SHIFT
 14

	)

21557 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_PUS_MASK
)

	)

21558 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_HYS_MASK
 0x10000u

	)

21559 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_HYS_SHIFT
 16

	)

21561 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_SRE_MASK
 0x1u

	)

21562 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_SRE_SHIFT
 0

	)

21563 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_DSE_MASK
 0x38u

	)

21564 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_DSE_SHIFT
 3

	)

21565 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_DSE_MASK
)

	)

21566 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_SPEED_MASK
 0xC0u

	)

21567 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_SPEED_SHIFT
 6

	)

21568 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_SPEED_MASK
)

	)

21569 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_ODE_MASK
 0x800u

	)

21570 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_ODE_SHIFT
 11

	)

21571 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_PKE_MASK
 0x1000u

	)

21572 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_PKE_SHIFT
 12

	)

21573 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_PUE_MASK
 0x2000u

	)

21574 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_PUE_SHIFT
 13

	)

21575 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_PUS_MASK
 0xC000u

	)

21576 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_PUS_SHIFT
 14

	)

21577 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_PUS_MASK
)

	)

21578 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_HYS_MASK
 0x10000u

	)

21579 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_HYS_SHIFT
 16

	)

21581 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_SRE_MASK
 0x1u

	)

21582 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_SRE_SHIFT
 0

	)

21583 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_DSE_MASK
 0x38u

	)

21584 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_DSE_SHIFT
 3

	)

21585 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_DSE_MASK
)

	)

21586 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_SPEED_MASK
 0xC0u

	)

21587 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_SPEED_SHIFT
 6

	)

21588 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_SPEED_MASK
)

	)

21589 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_ODE_MASK
 0x800u

	)

21590 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_ODE_SHIFT
 11

	)

21591 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_PKE_MASK
 0x1000u

	)

21592 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_PKE_SHIFT
 12

	)

21593 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_PUE_MASK
 0x2000u

	)

21594 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_PUE_SHIFT
 13

	)

21595 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_PUS_MASK
 0xC000u

	)

21596 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_PUS_SHIFT
 14

	)

21597 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_PUS_MASK
)

	)

21598 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_HYS_MASK
 0x10000u

	)

21599 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_HYS_SHIFT
 16

	)

21601 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_SRE_MASK
 0x1u

	)

21602 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_SRE_SHIFT
 0

	)

21603 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_DSE_MASK
 0x38u

	)

21604 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_DSE_SHIFT
 3

	)

21605 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_DSE_MASK
)

	)

21606 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_SPEED_MASK
 0xC0u

	)

21607 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_SPEED_SHIFT
 6

	)

21608 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_SPEED_MASK
)

	)

21609 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_ODE_MASK
 0x800u

	)

21610 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_ODE_SHIFT
 11

	)

21611 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_PKE_MASK
 0x1000u

	)

21612 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_PKE_SHIFT
 12

	)

21613 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_PUE_MASK
 0x2000u

	)

21614 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_PUE_SHIFT
 13

	)

21615 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_PUS_MASK
 0xC000u

	)

21616 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_PUS_SHIFT
 14

	)

21617 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_PUS_MASK
)

	)

21618 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_HYS_MASK
 0x10000u

	)

21619 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_HYS_SHIFT
 16

	)

21621 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_SRE_MASK
 0x1u

	)

21622 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_SRE_SHIFT
 0

	)

21623 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_DSE_MASK
 0x38u

	)

21624 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_DSE_SHIFT
 3

	)

21625 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_DSE_MASK
)

	)

21626 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_SPEED_MASK
 0xC0u

	)

21627 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_SPEED_SHIFT
 6

	)

21628 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_SPEED_MASK
)

	)

21629 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_ODE_MASK
 0x800u

	)

21630 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_ODE_SHIFT
 11

	)

21631 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_PKE_MASK
 0x1000u

	)

21632 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_PKE_SHIFT
 12

	)

21633 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_PUE_MASK
 0x2000u

	)

21634 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_PUE_SHIFT
 13

	)

21635 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_PUS_MASK
 0xC000u

	)

21636 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_PUS_SHIFT
 14

	)

21637 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_PUS_MASK
)

	)

21638 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_HYS_MASK
 0x10000u

	)

21639 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_HYS_SHIFT
 16

	)

21641 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SRE_MASK
 0x1u

	)

21642 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SRE_SHIFT
 0

	)

21643 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_DSE_MASK
 0x38u

	)

21644 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_DSE_SHIFT
 3

	)

21645 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_DSE_MASK
)

	)

21646 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SPEED_MASK
 0xC0u

	)

21647 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SPEED_SHIFT
 6

	)

21648 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_SPEED_MASK
)

	)

21649 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_ODE_MASK
 0x800u

	)

21650 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_ODE_SHIFT
 11

	)

21651 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PKE_MASK
 0x1000u

	)

21652 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PKE_SHIFT
 12

	)

21653 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUE_MASK
 0x2000u

	)

21654 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUE_SHIFT
 13

	)

21655 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUS_MASK
 0xC000u

	)

21656 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUS_SHIFT
 14

	)

21657 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_PUS_MASK
)

	)

21658 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_HYS_MASK
 0x10000u

	)

21659 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_HYS_SHIFT
 16

	)

21660 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_LVE_MASK
 0x400000u

	)

21661 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_LVE_SHIFT
 22

	)

21663 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SRE_MASK
 0x1u

	)

21664 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SRE_SHIFT
 0

	)

21665 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_DSE_MASK
 0x38u

	)

21666 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_DSE_SHIFT
 3

	)

21667 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_DSE_MASK
)

	)

21668 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SPEED_MASK
 0xC0u

	)

21669 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SPEED_SHIFT
 6

	)

21670 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_SPEED_MASK
)

	)

21671 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_ODE_MASK
 0x800u

	)

21672 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_ODE_SHIFT
 11

	)

21673 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PKE_MASK
 0x1000u

	)

21674 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PKE_SHIFT
 12

	)

21675 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUE_MASK
 0x2000u

	)

21676 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUE_SHIFT
 13

	)

21677 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUS_MASK
 0xC000u

	)

21678 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUS_SHIFT
 14

	)

21679 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_PUS_MASK
)

	)

21680 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_HYS_MASK
 0x10000u

	)

21681 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_HYS_SHIFT
 16

	)

21682 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_LVE_MASK
 0x400000u

	)

21683 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_LVE_SHIFT
 22

	)

21685 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_SRE_MASK
 0x1u

	)

21686 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_SRE_SHIFT
 0

	)

21687 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_DSE_MASK
 0x38u

	)

21688 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_DSE_SHIFT
 3

	)

21689 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_DSE_MASK
)

	)

21690 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_SPEED_MASK
 0xC0u

	)

21691 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_SPEED_SHIFT
 6

	)

21692 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_SPEED_MASK
)

	)

21693 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_ODE_MASK
 0x800u

	)

21694 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_ODE_SHIFT
 11

	)

21695 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_PKE_MASK
 0x1000u

	)

21696 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_PKE_SHIFT
 12

	)

21697 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_PUE_MASK
 0x2000u

	)

21698 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_PUE_SHIFT
 13

	)

21699 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_PUS_MASK
 0xC000u

	)

21700 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_PUS_SHIFT
 14

	)

21701 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_PUS_MASK
)

	)

21702 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_HYS_MASK
 0x10000u

	)

21703 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_HYS_SHIFT
 16

	)

21704 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_LVE_MASK
 0x400000u

	)

21705 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_LVE_SHIFT
 22

	)

21707 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_SRE_MASK
 0x1u

	)

21708 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_SRE_SHIFT
 0

	)

21709 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_DSE_MASK
 0x38u

	)

21710 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_DSE_SHIFT
 3

	)

21711 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_DSE_MASK
)

	)

21712 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_SPEED_MASK
 0xC0u

	)

21713 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_SPEED_SHIFT
 6

	)

21714 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_SPEED_MASK
)

	)

21715 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_ODE_MASK
 0x800u

	)

21716 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_ODE_SHIFT
 11

	)

21717 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_PKE_MASK
 0x1000u

	)

21718 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_PKE_SHIFT
 12

	)

21719 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_PUE_MASK
 0x2000u

	)

21720 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_PUE_SHIFT
 13

	)

21721 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_PUS_MASK
 0xC000u

	)

21722 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_PUS_SHIFT
 14

	)

21723 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_PUS_MASK
)

	)

21724 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_HYS_MASK
 0x10000u

	)

21725 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_HYS_SHIFT
 16

	)

21726 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_LVE_MASK
 0x400000u

	)

21727 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_LVE_SHIFT
 22

	)

21729 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_SRE_MASK
 0x1u

	)

21730 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_SRE_SHIFT
 0

	)

21731 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_DSE_MASK
 0x38u

	)

21732 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_DSE_SHIFT
 3

	)

21733 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_DSE_MASK
)

	)

21734 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_SPEED_MASK
 0xC0u

	)

21735 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_SPEED_SHIFT
 6

	)

21736 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_SPEED_MASK
)

	)

21737 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_ODE_MASK
 0x800u

	)

21738 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_ODE_SHIFT
 11

	)

21739 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_PKE_MASK
 0x1000u

	)

21740 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_PKE_SHIFT
 12

	)

21741 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_PUE_MASK
 0x2000u

	)

21742 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_PUE_SHIFT
 13

	)

21743 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_PUS_MASK
 0xC000u

	)

21744 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_PUS_SHIFT
 14

	)

21745 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_PUS_MASK
)

	)

21746 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_HYS_MASK
 0x10000u

	)

21747 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_HYS_SHIFT
 16

	)

21748 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_LVE_MASK
 0x400000u

	)

21749 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_LVE_SHIFT
 22

	)

21751 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_SRE_MASK
 0x1u

	)

21752 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_SRE_SHIFT
 0

	)

21753 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_DSE_MASK
 0x38u

	)

21754 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_DSE_SHIFT
 3

	)

21755 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_DSE_MASK
)

	)

21756 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_SPEED_MASK
 0xC0u

	)

21757 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_SPEED_SHIFT
 6

	)

21758 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_SPEED_MASK
)

	)

21759 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_ODE_MASK
 0x800u

	)

21760 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_ODE_SHIFT
 11

	)

21761 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_PKE_MASK
 0x1000u

	)

21762 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_PKE_SHIFT
 12

	)

21763 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_PUE_MASK
 0x2000u

	)

21764 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_PUE_SHIFT
 13

	)

21765 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_PUS_MASK
 0xC000u

	)

21766 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_PUS_SHIFT
 14

	)

21767 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_PUS_MASK
)

	)

21768 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_HYS_MASK
 0x10000u

	)

21769 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_HYS_SHIFT
 16

	)

21770 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_LVE_MASK
 0x400000u

	)

21771 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_LVE_SHIFT
 22

	)

21773 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_SRE_MASK
 0x1u

	)

21774 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_SRE_SHIFT
 0

	)

21775 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_DSE_MASK
 0x38u

	)

21776 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_DSE_SHIFT
 3

	)

21777 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_DSE_MASK
)

	)

21778 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_SPEED_MASK
 0xC0u

	)

21779 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_SPEED_SHIFT
 6

	)

21780 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_SPEED_MASK
)

	)

21781 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_ODE_MASK
 0x800u

	)

21782 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_ODE_SHIFT
 11

	)

21783 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_PKE_MASK
 0x1000u

	)

21784 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_PKE_SHIFT
 12

	)

21785 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_PUE_MASK
 0x2000u

	)

21786 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_PUE_SHIFT
 13

	)

21787 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_PUS_MASK
 0xC000u

	)

21788 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_PUS_SHIFT
 14

	)

21789 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_PUS_MASK
)

	)

21790 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_HYS_MASK
 0x10000u

	)

21791 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_HYS_SHIFT
 16

	)

21792 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_LVE_MASK
 0x400000u

	)

21793 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_LVE_SHIFT
 22

	)

21795 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_SRE_MASK
 0x1u

	)

21796 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_SRE_SHIFT
 0

	)

21797 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_DSE_MASK
 0x38u

	)

21798 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_DSE_SHIFT
 3

	)

21799 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_DSE_MASK
)

	)

21800 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_SPEED_MASK
 0xC0u

	)

21801 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_SPEED_SHIFT
 6

	)

21802 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_SPEED_MASK
)

	)

21803 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_ODE_MASK
 0x800u

	)

21804 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_ODE_SHIFT
 11

	)

21805 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_PKE_MASK
 0x1000u

	)

21806 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_PKE_SHIFT
 12

	)

21807 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_PUE_MASK
 0x2000u

	)

21808 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_PUE_SHIFT
 13

	)

21809 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_PUS_MASK
 0xC000u

	)

21810 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_PUS_SHIFT
 14

	)

21811 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_PUS_MASK
)

	)

21812 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_HYS_MASK
 0x10000u

	)

21813 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_HYS_SHIFT
 16

	)

21814 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_LVE_MASK
 0x400000u

	)

21815 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_LVE_SHIFT
 22

	)

21817 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_SRE_MASK
 0x1u

	)

21818 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_SRE_SHIFT
 0

	)

21819 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_DSE_MASK
 0x38u

	)

21820 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_DSE_SHIFT
 3

	)

21821 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_DSE_MASK
)

	)

21822 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_SPEED_MASK
 0xC0u

	)

21823 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_SPEED_SHIFT
 6

	)

21824 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_SPEED_MASK
)

	)

21825 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_ODE_MASK
 0x800u

	)

21826 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_ODE_SHIFT
 11

	)

21827 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_PKE_MASK
 0x1000u

	)

21828 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_PKE_SHIFT
 12

	)

21829 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_PUE_MASK
 0x2000u

	)

21830 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_PUE_SHIFT
 13

	)

21831 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_PUS_MASK
 0xC000u

	)

21832 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_PUS_SHIFT
 14

	)

21833 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_PUS_MASK
)

	)

21834 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_HYS_MASK
 0x10000u

	)

21835 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_HYS_SHIFT
 16

	)

21836 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_LVE_MASK
 0x400000u

	)

21837 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_LVE_SHIFT
 22

	)

21839 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_SRE_MASK
 0x1u

	)

21840 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_SRE_SHIFT
 0

	)

21841 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_DSE_MASK
 0x38u

	)

21842 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_DSE_SHIFT
 3

	)

21843 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_DSE_MASK
)

	)

21844 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_SPEED_MASK
 0xC0u

	)

21845 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_SPEED_SHIFT
 6

	)

21846 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_SPEED_MASK
)

	)

21847 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_ODE_MASK
 0x800u

	)

21848 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_ODE_SHIFT
 11

	)

21849 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_PKE_MASK
 0x1000u

	)

21850 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_PKE_SHIFT
 12

	)

21851 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_PUE_MASK
 0x2000u

	)

21852 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_PUE_SHIFT
 13

	)

21853 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_PUS_MASK
 0xC000u

	)

21854 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_PUS_SHIFT
 14

	)

21855 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_PUS_MASK
)

	)

21856 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_HYS_MASK
 0x10000u

	)

21857 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_HYS_SHIFT
 16

	)

21858 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_LVE_MASK
 0x400000u

	)

21859 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_LVE_SHIFT
 22

	)

21861 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SRE_MASK
 0x1u

	)

21862 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SRE_SHIFT
 0

	)

21863 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_DSE_MASK
 0x38u

	)

21864 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_DSE_SHIFT
 3

	)

21865 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_DSE_MASK
)

	)

21866 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SPEED_MASK
 0xC0u

	)

21867 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SPEED_SHIFT
 6

	)

21868 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_SPEED_MASK
)

	)

21869 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_ODE_MASK
 0x800u

	)

21870 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_ODE_SHIFT
 11

	)

21871 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PKE_MASK
 0x1000u

	)

21872 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PKE_SHIFT
 12

	)

21873 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUE_MASK
 0x2000u

	)

21874 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUE_SHIFT
 13

	)

21875 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUS_MASK
 0xC000u

	)

21876 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUS_SHIFT
 14

	)

21877 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_PUS_MASK
)

	)

21878 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_HYS_MASK
 0x10000u

	)

21879 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_HYS_SHIFT
 16

	)

21881 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SRE_MASK
 0x1u

	)

21882 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SRE_SHIFT
 0

	)

21883 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_DSE_MASK
 0x38u

	)

21884 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_DSE_SHIFT
 3

	)

21885 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_DSE_MASK
)

	)

21886 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SPEED_MASK
 0xC0u

	)

21887 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SPEED_SHIFT
 6

	)

21888 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_SPEED_MASK
)

	)

21889 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_ODE_MASK
 0x800u

	)

21890 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_ODE_SHIFT
 11

	)

21891 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PKE_MASK
 0x1000u

	)

21892 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PKE_SHIFT
 12

	)

21893 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUE_MASK
 0x2000u

	)

21894 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUE_SHIFT
 13

	)

21895 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUS_MASK
 0xC000u

	)

21896 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUS_SHIFT
 14

	)

21897 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_PUS_MASK
)

	)

21898 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_HYS_MASK
 0x10000u

	)

21899 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_HYS_SHIFT
 16

	)

21901 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_SRE_MASK
 0x1u

	)

21902 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_SRE_SHIFT
 0

	)

21903 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_DSE_MASK
 0x38u

	)

21904 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_DSE_SHIFT
 3

	)

21905 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_DSE_MASK
)

	)

21906 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_SPEED_MASK
 0xC0u

	)

21907 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_SPEED_SHIFT
 6

	)

21908 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_SPEED_MASK
)

	)

21909 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_ODE_MASK
 0x800u

	)

21910 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_ODE_SHIFT
 11

	)

21911 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_PKE_MASK
 0x1000u

	)

21912 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_PKE_SHIFT
 12

	)

21913 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_PUE_MASK
 0x2000u

	)

21914 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_PUE_SHIFT
 13

	)

21915 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_PUS_MASK
 0xC000u

	)

21916 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_PUS_SHIFT
 14

	)

21917 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_PUS_MASK
)

	)

21918 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_HYS_MASK
 0x10000u

	)

21919 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_HYS_SHIFT
 16

	)

21921 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_SRE_MASK
 0x1u

	)

21922 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_SRE_SHIFT
 0

	)

21923 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_DSE_MASK
 0x38u

	)

21924 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_DSE_SHIFT
 3

	)

21925 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_DSE_MASK
)

	)

21926 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_SPEED_MASK
 0xC0u

	)

21927 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_SPEED_SHIFT
 6

	)

21928 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_SPEED_MASK
)

	)

21929 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_ODE_MASK
 0x800u

	)

21930 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_ODE_SHIFT
 11

	)

21931 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_PKE_MASK
 0x1000u

	)

21932 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_PKE_SHIFT
 12

	)

21933 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_PUE_MASK
 0x2000u

	)

21934 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_PUE_SHIFT
 13

	)

21935 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_PUS_MASK
 0xC000u

	)

21936 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_PUS_SHIFT
 14

	)

21937 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_PUS_MASK
)

	)

21938 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_HYS_MASK
 0x10000u

	)

21939 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_HYS_SHIFT
 16

	)

21941 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_SRE_MASK
 0x1u

	)

21942 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_SRE_SHIFT
 0

	)

21943 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_DSE_MASK
 0x38u

	)

21944 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_DSE_SHIFT
 3

	)

21945 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_DSE_MASK
)

	)

21946 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_SPEED_MASK
 0xC0u

	)

21947 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_SPEED_SHIFT
 6

	)

21948 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_SPEED_MASK
)

	)

21949 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_ODE_MASK
 0x800u

	)

21950 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_ODE_SHIFT
 11

	)

21951 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_PKE_MASK
 0x1000u

	)

21952 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_PKE_SHIFT
 12

	)

21953 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_PUE_MASK
 0x2000u

	)

21954 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_PUE_SHIFT
 13

	)

21955 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_PUS_MASK
 0xC000u

	)

21956 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_PUS_SHIFT
 14

	)

21957 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_PUS_MASK
)

	)

21958 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_HYS_MASK
 0x10000u

	)

21959 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_HYS_SHIFT
 16

	)

21961 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_SRE_MASK
 0x1u

	)

21962 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_SRE_SHIFT
 0

	)

21963 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_DSE_MASK
 0x38u

	)

21964 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_DSE_SHIFT
 3

	)

21965 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_DSE_MASK
)

	)

21966 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_SPEED_MASK
 0xC0u

	)

21967 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_SPEED_SHIFT
 6

	)

21968 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_SPEED_MASK
)

	)

21969 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_ODE_MASK
 0x800u

	)

21970 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_ODE_SHIFT
 11

	)

21971 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_PKE_MASK
 0x1000u

	)

21972 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_PKE_SHIFT
 12

	)

21973 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_PUE_MASK
 0x2000u

	)

21974 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_PUE_SHIFT
 13

	)

21975 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_PUS_MASK
 0xC000u

	)

21976 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_PUS_SHIFT
 14

	)

21977 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_PUS_MASK
)

	)

21978 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_HYS_MASK
 0x10000u

	)

21979 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_HYS_SHIFT
 16

	)

21981 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_SRE_MASK
 0x1u

	)

21982 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_SRE_SHIFT
 0

	)

21983 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_DSE_MASK
 0x38u

	)

21984 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_DSE_SHIFT
 3

	)

21985 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_DSE_MASK
)

	)

21986 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_SPEED_MASK
 0xC0u

	)

21987 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_SPEED_SHIFT
 6

	)

21988 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_SPEED_MASK
)

	)

21989 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_ODE_MASK
 0x800u

	)

21990 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_ODE_SHIFT
 11

	)

21991 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_PKE_MASK
 0x1000u

	)

21992 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_PKE_SHIFT
 12

	)

21993 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_PUE_MASK
 0x2000u

	)

21994 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_PUE_SHIFT
 13

	)

21995 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_PUS_MASK
 0xC000u

	)

21996 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_PUS_SHIFT
 14

	)

21997 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_PUS_MASK
)

	)

21998 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_HYS_MASK
 0x10000u

	)

21999 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_HYS_SHIFT
 16

	)

22001 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_SRE_MASK
 0x1u

	)

22002 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_SRE_SHIFT
 0

	)

22003 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_DSE_MASK
 0x38u

	)

22004 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_DSE_SHIFT
 3

	)

22005 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_DSE_MASK
)

	)

22006 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_SPEED_MASK
 0xC0u

	)

22007 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_SPEED_SHIFT
 6

	)

22008 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_SPEED_MASK
)

	)

22009 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_ODE_MASK
 0x800u

	)

22010 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_ODE_SHIFT
 11

	)

22011 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_PKE_MASK
 0x1000u

	)

22012 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_PKE_SHIFT
 12

	)

22013 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_PUE_MASK
 0x2000u

	)

22014 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_PUE_SHIFT
 13

	)

22015 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_PUS_MASK
 0xC000u

	)

22016 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_PUS_SHIFT
 14

	)

22017 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_PUS_MASK
)

	)

22018 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_HYS_MASK
 0x10000u

	)

22019 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_HYS_SHIFT
 16

	)

22021 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_SRE_MASK
 0x1u

	)

22022 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_SRE_SHIFT
 0

	)

22023 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_DSE_MASK
 0x38u

	)

22024 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_DSE_SHIFT
 3

	)

22025 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_DSE_MASK
)

	)

22026 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_SPEED_MASK
 0xC0u

	)

22027 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_SPEED_SHIFT
 6

	)

22028 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_SPEED_MASK
)

	)

22029 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_ODE_MASK
 0x800u

	)

22030 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_ODE_SHIFT
 11

	)

22031 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_PKE_MASK
 0x1000u

	)

22032 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_PKE_SHIFT
 12

	)

22033 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_PUE_MASK
 0x2000u

	)

22034 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_PUE_SHIFT
 13

	)

22035 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_PUS_MASK
 0xC000u

	)

22036 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_PUS_SHIFT
 14

	)

22037 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_PUS_MASK
)

	)

22038 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_HYS_MASK
 0x10000u

	)

22039 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_HYS_SHIFT
 16

	)

22041 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_SRE_MASK
 0x1u

	)

22042 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_SRE_SHIFT
 0

	)

22043 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_DSE_MASK
 0x38u

	)

22044 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_DSE_SHIFT
 3

	)

22045 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_DSE_MASK
)

	)

22046 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_SPEED_MASK
 0xC0u

	)

22047 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_SPEED_SHIFT
 6

	)

22048 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_SPEED_MASK
)

	)

22049 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_ODE_MASK
 0x800u

	)

22050 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_ODE_SHIFT
 11

	)

22051 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_PKE_MASK
 0x1000u

	)

22052 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_PKE_SHIFT
 12

	)

22053 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_PUE_MASK
 0x2000u

	)

22054 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_PUE_SHIFT
 13

	)

22055 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_PUS_MASK
 0xC000u

	)

22056 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_PUS_SHIFT
 14

	)

22057 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_PUS_MASK
)

	)

22058 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_HYS_MASK
 0x10000u

	)

22059 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_HYS_SHIFT
 16

	)

22061 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_SRE_MASK
 0x1u

	)

22062 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_SRE_SHIFT
 0

	)

22063 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_DSE_MASK
 0x38u

	)

22064 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_DSE_SHIFT
 3

	)

22065 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_DSE_MASK
)

	)

22066 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_SPEED_MASK
 0xC0u

	)

22067 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_SPEED_SHIFT
 6

	)

22068 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_SPEED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_SPEED_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_SPEED_MASK
)

	)

22069 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_ODE_MASK
 0x800u

	)

22070 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_ODE_SHIFT
 11

	)

22071 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_PKE_MASK
 0x1000u

	)

22072 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_PKE_SHIFT
 12

	)

22073 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_PUE_MASK
 0x2000u

	)

22074 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_PUE_SHIFT
 13

	)

22075 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_PUS_MASK
 0xC000u

	)

22076 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_PUS_SHIFT
 14

	)

22077 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_PUS_MASK
)

	)

22078 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_HYS_MASK
 0x10000u

	)

22079 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_HYS_SHIFT
 16

	)

22081 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_DSE_MASK
 0x38u

	)

22082 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_DSE_SHIFT
 3

	)

22083 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_DSE_MASK
)

	)

22084 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_ODT_MASK
 0x700u

	)

22085 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_ODT_SHIFT
 8

	)

22086 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_ODT_MASK
)

	)

22087 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_PKE_MASK
 0x1000u

	)

22088 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_PKE_SHIFT
 12

	)

22089 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_PUE_MASK
 0x2000u

	)

22090 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_PUE_SHIFT
 13

	)

22091 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_PUS_MASK
 0xC000u

	)

22092 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_PUS_SHIFT
 14

	)

22093 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_PUS_MASK
)

	)

22094 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_HYS_MASK
 0x10000u

	)

22095 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_HYS_SHIFT
 16

	)

22096 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_DDR_INPUT_MASK
 0x20000u

	)

22097 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_DDR_INPUT_SHIFT
 17

	)

22098 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_DDR_SEL_MASK
 0xC0000u

	)

22099 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_DDR_SEL_SHIFT
 18

	)

22100 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_DDR_SEL_MASK
)

	)

22101 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_DO_TRIM_MASK
 0x300000u

	)

22102 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_DO_TRIM_SHIFT
 20

	)

22103 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_DO_TRIM_MASK
)

	)

22105 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_DSE_MASK
 0x38u

	)

22106 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_DSE_SHIFT
 3

	)

22107 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_DSE_MASK
)

	)

22108 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_ODT_MASK
 0x700u

	)

22109 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_ODT_SHIFT
 8

	)

22110 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_ODT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_ODT_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_ODT_MASK
)

	)

22111 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_PKE_MASK
 0x1000u

	)

22112 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_PKE_SHIFT
 12

	)

22113 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_PUE_MASK
 0x2000u

	)

22114 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_PUE_SHIFT
 13

	)

22115 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_PUS_MASK
 0xC000u

	)

22116 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_PUS_SHIFT
 14

	)

22117 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_PUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_PUS_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_PUS_MASK
)

	)

22118 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_HYS_MASK
 0x10000u

	)

22119 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_HYS_SHIFT
 16

	)

22120 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_DDR_INPUT_MASK
 0x20000u

	)

22121 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_DDR_INPUT_SHIFT
 17

	)

22122 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_DDR_SEL_MASK
 0xC0000u

	)

22123 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_DDR_SEL_SHIFT
 18

	)

22124 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_DDR_SEL_MASK
)

	)

22125 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_DO_TRIM_MASK
 0x300000u

	)

22126 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_DO_TRIM_SHIFT
 20

	)

22127 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_DO_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_DO_TRIM_SHIFT
))&
IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_DO_TRIM_MASK
)

	)

22129 
	#IOMUXC_SW_PAD_CTL_GRP_ADDDS_DSE_MASK
 0x38u

	)

22130 
	#IOMUXC_SW_PAD_CTL_GRP_ADDDS_DSE_SHIFT
 3

	)

22131 
	#IOMUXC_SW_PAD_CTL_GRP_ADDDS_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_GRP_ADDDS_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_GRP_ADDDS_DSE_MASK
)

	)

22133 
	#IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_DDR_INPUT_MASK
 0x20000u

	)

22134 
	#IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_DDR_INPUT_SHIFT
 17

	)

22136 
	#IOMUXC_SW_PAD_CTL_GRP_DDRPKE_PKE_MASK
 0x1000u

	)

22137 
	#IOMUXC_SW_PAD_CTL_GRP_DDRPKE_PKE_SHIFT
 12

	)

22139 
	#IOMUXC_SW_PAD_CTL_GRP_DDRPK_PUE_MASK
 0x2000u

	)

22140 
	#IOMUXC_SW_PAD_CTL_GRP_DDRPK_PUE_SHIFT
 13

	)

22142 
	#IOMUXC_SW_PAD_CTL_GRP_DDRHYS_HYS_MASK
 0x10000u

	)

22143 
	#IOMUXC_SW_PAD_CTL_GRP_DDRHYS_HYS_SHIFT
 16

	)

22145 
	#IOMUXC_SW_PAD_CTL_GRP_DDRMODE_DDR_INPUT_MASK
 0x20000u

	)

22146 
	#IOMUXC_SW_PAD_CTL_GRP_DDRMODE_DDR_INPUT_SHIFT
 17

	)

22148 
	#IOMUXC_SW_PAD_CTL_GRP_B0DS_DSE_MASK
 0x38u

	)

22149 
	#IOMUXC_SW_PAD_CTL_GRP_B0DS_DSE_SHIFT
 3

	)

22150 
	#IOMUXC_SW_PAD_CTL_GRP_B0DS_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_GRP_B0DS_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_GRP_B0DS_DSE_MASK
)

	)

22152 
	#IOMUXC_SW_PAD_CTL_GRP_B1DS_DSE_MASK
 0x38u

	)

22153 
	#IOMUXC_SW_PAD_CTL_GRP_B1DS_DSE_SHIFT
 3

	)

22154 
	#IOMUXC_SW_PAD_CTL_GRP_B1DS_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_GRP_B1DS_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_GRP_B1DS_DSE_MASK
)

	)

22156 
	#IOMUXC_SW_PAD_CTL_GRP_CTLDS_DSE_MASK
 0x38u

	)

22157 
	#IOMUXC_SW_PAD_CTL_GRP_CTLDS_DSE_SHIFT
 3

	)

22158 
	#IOMUXC_SW_PAD_CTL_GRP_CTLDS_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_GRP_CTLDS_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_GRP_CTLDS_DSE_MASK
)

	)

22160 
	#IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_DDR_SEL_MASK
 0xC0000u

	)

22161 
	#IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_DDR_SEL_SHIFT
 18

	)

22162 
	#IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_DDR_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_DDR_SEL_SHIFT
))&
IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_DDR_SEL_MASK
)

	)

22164 
	#IOMUXC_SW_PAD_CTL_GRP_B2DS_DSE_MASK
 0x38u

	)

22165 
	#IOMUXC_SW_PAD_CTL_GRP_B2DS_DSE_SHIFT
 3

	)

22166 
	#IOMUXC_SW_PAD_CTL_GRP_B2DS_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_GRP_B2DS_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_GRP_B2DS_DSE_MASK
)

	)

22168 
	#IOMUXC_SW_PAD_CTL_GRP_B3DS_DSE_MASK
 0x38u

	)

22169 
	#IOMUXC_SW_PAD_CTL_GRP_B3DS_DSE_SHIFT
 3

	)

22170 
	#IOMUXC_SW_PAD_CTL_GRP_B3DS_DSE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SW_PAD_CTL_GRP_B3DS_DSE_SHIFT
))&
IOMUXC_SW_PAD_CTL_GRP_B3DS_DSE_MASK
)

	)

22172 
	#IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22173 
	#IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_DAISY_SHIFT
 0

	)

22174 
	#IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_DAISY_MASK
)

	)

22176 
	#IOMUXC_ANATOP_USB_UH1_ID_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22177 
	#IOMUXC_ANATOP_USB_UH1_ID_SELECT_INPUT_DAISY_SHIFT
 0

	)

22178 
	#IOMUXC_ANATOP_USB_UH1_ID_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_ANATOP_USB_UH1_ID_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_ANATOP_USB_UH1_ID_SELECT_INPUT_DAISY_MASK
)

	)

22180 
	#IOMUXC_AUDMUX_P3_INPUT_DA_AMX_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22181 
	#IOMUXC_AUDMUX_P3_INPUT_DA_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22183 
	#IOMUXC_AUDMUX_P3_INPUT_DB_AMX_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22184 
	#IOMUXC_AUDMUX_P3_INPUT_DB_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22186 
	#IOMUXC_AUDMUX_P3_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22187 
	#IOMUXC_AUDMUX_P3_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22189 
	#IOMUXC_AUDMUX_P3_INPUT_RXFS_AMX_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22190 
	#IOMUXC_AUDMUX_P3_INPUT_RXFS_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22192 
	#IOMUXC_AUDMUX_P3_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22193 
	#IOMUXC_AUDMUX_P3_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22195 
	#IOMUXC_AUDMUX_P3_INPUT_TXFS_AMX_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22196 
	#IOMUXC_AUDMUX_P3_INPUT_TXFS_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22198 
	#IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22199 
	#IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22201 
	#IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22202 
	#IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22204 
	#IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22205 
	#IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22207 
	#IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22208 
	#IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22210 
	#IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22211 
	#IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22213 
	#IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22214 
	#IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22216 
	#IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22217 
	#IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22218 
	#IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_DAISY_MASK
)

	)

22220 
	#IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22221 
	#IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22223 
	#IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22224 
	#IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22226 
	#IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22227 
	#IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22229 
	#IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22230 
	#IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22232 
	#IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22233 
	#IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22235 
	#IOMUXC_AUDMUX_P6_INPUT_DA_AMX_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22236 
	#IOMUXC_AUDMUX_P6_INPUT_DA_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22237 
	#IOMUXC_AUDMUX_P6_INPUT_DA_AMX_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_AUDMUX_P6_INPUT_DA_AMX_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_AUDMUX_P6_INPUT_DA_AMX_SELECT_INPUT_DAISY_MASK
)

	)

22239 
	#IOMUXC_AUDMUX_P6_INPUT_DB_AMX_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22240 
	#IOMUXC_AUDMUX_P6_INPUT_DB_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22241 
	#IOMUXC_AUDMUX_P6_INPUT_DB_AMX_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_AUDMUX_P6_INPUT_DB_AMX_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_AUDMUX_P6_INPUT_DB_AMX_SELECT_INPUT_DAISY_MASK
)

	)

22243 
	#IOMUXC_AUDMUX_P6_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22244 
	#IOMUXC_AUDMUX_P6_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22245 
	#IOMUXC_AUDMUX_P6_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_AUDMUX_P6_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_AUDMUX_P6_INPUT_RXCLK_AMX_SELECT_INPUT_DAISY_MASK
)

	)

22247 
	#IOMUXC_AUDMUX_P6_INPUT_RXFS_AMX_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22248 
	#IOMUXC_AUDMUX_P6_INPUT_RXFS_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22249 
	#IOMUXC_AUDMUX_P6_INPUT_RXFS_AMX_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_AUDMUX_P6_INPUT_RXFS_AMX_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_AUDMUX_P6_INPUT_RXFS_AMX_SELECT_INPUT_DAISY_MASK
)

	)

22251 
	#IOMUXC_AUDMUX_P6_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22252 
	#IOMUXC_AUDMUX_P6_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22253 
	#IOMUXC_AUDMUX_P6_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_AUDMUX_P6_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_AUDMUX_P6_INPUT_TXCLK_AMX_SELECT_INPUT_DAISY_MASK
)

	)

22255 
	#IOMUXC_AUDMUX_P6_INPUT_TXFS_AMX_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22256 
	#IOMUXC_AUDMUX_P6_INPUT_TXFS_AMX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22257 
	#IOMUXC_AUDMUX_P6_INPUT_TXFS_AMX_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_AUDMUX_P6_INPUT_TXFS_AMX_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_AUDMUX_P6_INPUT_TXFS_AMX_SELECT_INPUT_DAISY_MASK
)

	)

22259 
	#IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22260 
	#IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22261 
	#IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_DAISY_MASK
)

	)

22263 
	#IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22264 
	#IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22265 
	#IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_DAISY_MASK
)

	)

22267 
	#IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22268 
	#IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_DAISY_SHIFT
 0

	)

22269 
	#IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_DAISY_MASK
)

	)

22271 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_0_DAISY_MASK
 0x1u

	)

22272 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_0_DAISY_SHIFT
 0

	)

22274 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_1_DAISY_MASK
 0x1u

	)

22275 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_1_DAISY_SHIFT
 0

	)

22277 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_2_DAISY_MASK
 0x1u

	)

22278 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_2_DAISY_SHIFT
 0

	)

22280 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_3_DAISY_MASK
 0x1u

	)

22281 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_3_DAISY_SHIFT
 0

	)

22283 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_4_DAISY_MASK
 0x1u

	)

22284 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_4_DAISY_SHIFT
 0

	)

22286 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_5_DAISY_MASK
 0x1u

	)

22287 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_5_DAISY_SHIFT
 0

	)

22289 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_6_DAISY_MASK
 0x1u

	)

22290 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_6_DAISY_SHIFT
 0

	)

22292 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_7_DAISY_MASK
 0x1u

	)

22293 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_7_DAISY_SHIFT
 0

	)

22295 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_8_DAISY_MASK
 0x1u

	)

22296 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_8_DAISY_SHIFT
 0

	)

22298 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_9_DAISY_MASK
 0x1u

	)

22299 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_9_DAISY_SHIFT
 0

	)

22301 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_11_DAISY_MASK
 0x1u

	)

22302 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_11_DAISY_SHIFT
 0

	)

22304 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_12_DAISY_MASK
 0x1u

	)

22305 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_12_DAISY_SHIFT
 0

	)

22307 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_13_DAISY_MASK
 0x1u

	)

22308 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_13_DAISY_SHIFT
 0

	)

22310 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_14_DAISY_MASK
 0x1u

	)

22311 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_14_DAISY_SHIFT
 0

	)

22313 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_15_DAISY_MASK
 0x1u

	)

22314 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_15_DAISY_SHIFT
 0

	)

22316 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_16_DAISY_MASK
 0x1u

	)

22317 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_16_DAISY_SHIFT
 0

	)

22319 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_17_DAISY_MASK
 0x1u

	)

22320 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_17_DAISY_SHIFT
 0

	)

22322 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_18_DAISY_MASK
 0x1u

	)

22323 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_18_DAISY_SHIFT
 0

	)

22325 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_19_DAISY_MASK
 0x1u

	)

22326 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_19_DAISY_SHIFT
 0

	)

22328 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_20_DAISY_MASK
 0x1u

	)

22329 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_20_DAISY_SHIFT
 0

	)

22331 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_21_DAISY_MASK
 0x1u

	)

22332 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_21_DAISY_SHIFT
 0

	)

22334 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_22_DAISY_MASK
 0x1u

	)

22335 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_22_DAISY_SHIFT
 0

	)

22337 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_23_DAISY_MASK
 0x1u

	)

22338 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_23_DAISY_SHIFT
 0

	)

22340 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_10_DAISY_MASK
 0x1u

	)

22341 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_10_DAISY_SHIFT
 0

	)

22343 
	#IOMUXC_CSI1_IPP_CSI_HSYNC_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22344 
	#IOMUXC_CSI1_IPP_CSI_HSYNC_SELECT_INPUT_DAISY_SHIFT
 0

	)

22346 
	#IOMUXC_CSI1_IPP_CSI_PIXCLK_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22347 
	#IOMUXC_CSI1_IPP_CSI_PIXCLK_SELECT_INPUT_DAISY_SHIFT
 0

	)

22349 
	#IOMUXC_CSI1_IPP_CSI_VSYNC_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22350 
	#IOMUXC_CSI1_IPP_CSI_VSYNC_SELECT_INPUT_DAISY_SHIFT
 0

	)

22352 
	#IOMUXC_CSI1_TVDECODER_IN_FIELD_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22353 
	#IOMUXC_CSI1_TVDECODER_IN_FIELD_SELECT_INPUT_DAISY_SHIFT
 0

	)

22355 
	#IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22356 
	#IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY_SHIFT
 0

	)

22358 
	#IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22359 
	#IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_DAISY_SHIFT
 0

	)

22361 
	#IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22362 
	#IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_DAISY_SHIFT
 0

	)

22364 
	#IOMUXC_ECSPI1_IPP_IND_SS_B_SELECT_INPUT_0_DAISY_MASK
 0x1u

	)

22365 
	#IOMUXC_ECSPI1_IPP_IND_SS_B_SELECT_INPUT_0_DAISY_SHIFT
 0

	)

22367 
	#IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22368 
	#IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY_SHIFT
 0

	)

22370 
	#IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22371 
	#IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_DAISY_SHIFT
 0

	)

22373 
	#IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22374 
	#IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_DAISY_SHIFT
 0

	)

22376 
	#IOMUXC_ECSPI2_IPP_IND_SS_B_SELECT_INPUT_0_DAISY_MASK
 0x1u

	)

22377 
	#IOMUXC_ECSPI2_IPP_IND_SS_B_SELECT_INPUT_0_DAISY_SHIFT
 0

	)

22379 
	#IOMUXC_ECSPI3_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22380 
	#IOMUXC_ECSPI3_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY_SHIFT
 0

	)

22382 
	#IOMUXC_ECSPI3_IPP_IND_MISO_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22383 
	#IOMUXC_ECSPI3_IPP_IND_MISO_SELECT_INPUT_DAISY_SHIFT
 0

	)

22385 
	#IOMUXC_ECSPI3_IPP_IND_MOSI_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22386 
	#IOMUXC_ECSPI3_IPP_IND_MOSI_SELECT_INPUT_DAISY_SHIFT
 0

	)

22388 
	#IOMUXC_ECSPI3_IPP_IND_SS_B_SELECT_INPUT_0_DAISY_MASK
 0x1u

	)

22389 
	#IOMUXC_ECSPI3_IPP_IND_SS_B_SELECT_INPUT_0_DAISY_SHIFT
 0

	)

22391 
	#IOMUXC_ECSPI4_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22392 
	#IOMUXC_ECSPI4_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY_SHIFT
 0

	)

22394 
	#IOMUXC_ECSPI4_IPP_IND_MISO_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22395 
	#IOMUXC_ECSPI4_IPP_IND_MISO_SELECT_INPUT_DAISY_SHIFT
 0

	)

22397 
	#IOMUXC_ECSPI4_IPP_IND_MOSI_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22398 
	#IOMUXC_ECSPI4_IPP_IND_MOSI_SELECT_INPUT_DAISY_SHIFT
 0

	)

22400 
	#IOMUXC_ECSPI4_IPP_IND_SS_B_SELECT_INPUT_0_DAISY_MASK
 0x1u

	)

22401 
	#IOMUXC_ECSPI4_IPP_IND_SS_B_SELECT_INPUT_0_DAISY_SHIFT
 0

	)

22403 
	#IOMUXC_ECSPI5_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22404 
	#IOMUXC_ECSPI5_IPP_CSPI_CLK_IN_SELECT_INPUT_DAISY_SHIFT
 0

	)

22406 
	#IOMUXC_ECSPI5_IPP_IND_MISO_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22407 
	#IOMUXC_ECSPI5_IPP_IND_MISO_SELECT_INPUT_DAISY_SHIFT
 0

	)

22409 
	#IOMUXC_ECSPI5_IPP_IND_MOSI_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22410 
	#IOMUXC_ECSPI5_IPP_IND_MOSI_SELECT_INPUT_DAISY_SHIFT
 0

	)

22412 
	#IOMUXC_ECSPI5_IPP_IND_SS_B_SELECT_INPUT_0_DAISY_MASK
 0x1u

	)

22413 
	#IOMUXC_ECSPI5_IPP_IND_SS_B_SELECT_INPUT_0_DAISY_SHIFT
 0

	)

22415 
	#IOMUXC_ENET1_IPG_CLK_RMII_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22416 
	#IOMUXC_ENET1_IPG_CLK_RMII_SELECT_INPUT_DAISY_SHIFT
 0

	)

22418 
	#IOMUXC_ENET1_IPP_IND_MAC0_MDIO_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22419 
	#IOMUXC_ENET1_IPP_IND_MAC0_MDIO_SELECT_INPUT_DAISY_SHIFT
 0

	)

22420 
	#IOMUXC_ENET1_IPP_IND_MAC0_MDIO_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_ENET1_IPP_IND_MAC0_MDIO_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_ENET1_IPP_IND_MAC0_MDIO_SELECT_INPUT_DAISY_MASK
)

	)

22422 
	#IOMUXC_ENET1_IPP_IND_MAC0_RXCLK_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22423 
	#IOMUXC_ENET1_IPP_IND_MAC0_RXCLK_SELECT_INPUT_DAISY_SHIFT
 0

	)

22425 
	#IOMUXC_ENET2_IPG_CLK_RMII_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22426 
	#IOMUXC_ENET2_IPG_CLK_RMII_SELECT_INPUT_DAISY_SHIFT
 0

	)

22428 
	#IOMUXC_ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22429 
	#IOMUXC_ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT_DAISY_SHIFT
 0

	)

22430 
	#IOMUXC_ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT_DAISY_MASK
)

	)

22432 
	#IOMUXC_ENET2_IPP_IND_MAC0_RXCLK_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22433 
	#IOMUXC_ENET2_IPP_IND_MAC0_RXCLK_SELECT_INPUT_DAISY_SHIFT
 0

	)

22435 
	#IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22436 
	#IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_DAISY_SHIFT
 0

	)

22437 
	#IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_DAISY_MASK
)

	)

22439 
	#IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22440 
	#IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_DAISY_SHIFT
 0

	)

22441 
	#IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_DAISY_MASK
)

	)

22443 
	#IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22444 
	#IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_DAISY_SHIFT
 0

	)

22445 
	#IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_DAISY_MASK
)

	)

22447 
	#IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22448 
	#IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_DAISY_SHIFT
 0

	)

22449 
	#IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_DAISY_MASK
)

	)

22451 
	#IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22452 
	#IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_DAISY_SHIFT
 0

	)

22453 
	#IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_DAISY_MASK
)

	)

22455 
	#IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22456 
	#IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_DAISY_SHIFT
 0

	)

22457 
	#IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_DAISY_MASK
)

	)

22459 
	#IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22460 
	#IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_DAISY_SHIFT
 0

	)

22461 
	#IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_DAISY_MASK
)

	)

22463 
	#IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22464 
	#IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_DAISY_SHIFT
 0

	)

22465 
	#IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_DAISY_MASK
)

	)

22467 
	#IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22468 
	#IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_DAISY_SHIFT
 0

	)

22469 
	#IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_DAISY_MASK
)

	)

22471 
	#IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22472 
	#IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_DAISY_SHIFT
 0

	)

22473 
	#IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_DAISY_MASK
)

	)

22475 
	#IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22476 
	#IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_DAISY_SHIFT
 0

	)

22477 
	#IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_DAISY_MASK
)

	)

22479 
	#IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22480 
	#IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_DAISY_SHIFT
 0

	)

22481 
	#IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_DAISY_MASK
)

	)

22483 
	#IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22484 
	#IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_DAISY_SHIFT
 0

	)

22486 
	#IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22487 
	#IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_DAISY_SHIFT
 0

	)

22489 
	#IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22490 
	#IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_DAISY_SHIFT
 0

	)

22491 
	#IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_DAISY_MASK
)

	)

22493 
	#IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22494 
	#IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_DAISY_SHIFT
 0

	)

22495 
	#IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_DAISY_MASK
)

	)

22497 
	#IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22498 
	#IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_DAISY_SHIFT
 0

	)

22499 
	#IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_DAISY_MASK
)

	)

22501 
	#IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22502 
	#IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_DAISY_SHIFT
 0

	)

22503 
	#IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_DAISY_MASK
)

	)

22505 
	#IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22506 
	#IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_DAISY_SHIFT
 0

	)

22507 
	#IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_DAISY_MASK
)

	)

22509 
	#IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22510 
	#IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_DAISY_SHIFT
 0

	)

22511 
	#IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_DAISY_MASK
)

	)

22513 
	#IOMUXC_KPP_IPP_IND_COL_SELECT_INPUT_5_DAISY_MASK
 0x1u

	)

22514 
	#IOMUXC_KPP_IPP_IND_COL_SELECT_INPUT_5_DAISY_SHIFT
 0

	)

22516 
	#IOMUXC_KPP_IPP_IND_COL_SELECT_INPUT_6_DAISY_MASK
 0x1u

	)

22517 
	#IOMUXC_KPP_IPP_IND_COL_SELECT_INPUT_6_DAISY_SHIFT
 0

	)

22519 
	#IOMUXC_KPP_IPP_IND_COL_SELECT_INPUT_7_DAISY_MASK
 0x1u

	)

22520 
	#IOMUXC_KPP_IPP_IND_COL_SELECT_INPUT_7_DAISY_SHIFT
 0

	)

22522 
	#IOMUXC_KPP_IPP_IND_ROW_SELECT_INPUT_5_DAISY_MASK
 0x1u

	)

22523 
	#IOMUXC_KPP_IPP_IND_ROW_SELECT_INPUT_5_DAISY_SHIFT
 0

	)

22525 
	#IOMUXC_KPP_IPP_IND_ROW_SELECT_INPUT_6_DAISY_MASK
 0x1u

	)

22526 
	#IOMUXC_KPP_IPP_IND_ROW_SELECT_INPUT_6_DAISY_SHIFT
 0

	)

22528 
	#IOMUXC_KPP_IPP_IND_ROW_SELECT_INPUT_7_DAISY_MASK
 0x1u

	)

22529 
	#IOMUXC_KPP_IPP_IND_ROW_SELECT_INPUT_7_DAISY_SHIFT
 0

	)

22531 
	#IOMUXC_LCD1_BUSY_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22532 
	#IOMUXC_LCD1_BUSY_SELECT_INPUT_DAISY_SHIFT
 0

	)

22534 
	#IOMUXC_LCD2_BUSY_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22535 
	#IOMUXC_LCD2_BUSY_SELECT_INPUT_DAISY_SHIFT
 0

	)

22537 
	#IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22538 
	#IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_DAISY_SHIFT
 0

	)

22539 
	#IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_DAISY_MASK
)

	)

22541 
	#IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22542 
	#IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_DAISY_SHIFT
 0

	)

22543 
	#IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_DAISY_MASK
)

	)

22545 
	#IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22546 
	#IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_DAISY_SHIFT
 0

	)

22547 
	#IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_DAISY_MASK
)

	)

22549 
	#IOMUXC_SAI1_IPP_IND_SAI_RXBCLK_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22550 
	#IOMUXC_SAI1_IPP_IND_SAI_RXBCLK_SELECT_INPUT_DAISY_SHIFT
 0

	)

22552 
	#IOMUXC_SAI1_IPP_IND_SAI_RXDATA_SELECT_INPUT_0_DAISY_MASK
 0x1u

	)

22553 
	#IOMUXC_SAI1_IPP_IND_SAI_RXDATA_SELECT_INPUT_0_DAISY_SHIFT
 0

	)

22555 
	#IOMUXC_SAI1_IPP_IND_SAI_RXSYNC_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22556 
	#IOMUXC_SAI1_IPP_IND_SAI_RXSYNC_SELECT_INPUT_DAISY_SHIFT
 0

	)

22558 
	#IOMUXC_SAI1_IPP_IND_SAI_TXBCLK_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22559 
	#IOMUXC_SAI1_IPP_IND_SAI_TXBCLK_SELECT_INPUT_DAISY_SHIFT
 0

	)

22561 
	#IOMUXC_SAI1_IPP_IND_SAI_TXSYNC_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22562 
	#IOMUXC_SAI1_IPP_IND_SAI_TXSYNC_SELECT_INPUT_DAISY_SHIFT
 0

	)

22564 
	#IOMUXC_SAI2_IPP_IND_SAI_RXBCLK_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22565 
	#IOMUXC_SAI2_IPP_IND_SAI_RXBCLK_SELECT_INPUT_DAISY_SHIFT
 0

	)

22567 
	#IOMUXC_SAI2_IPP_IND_SAI_RXDATA_SELECT_INPUT_0_DAISY_MASK
 0x1u

	)

22568 
	#IOMUXC_SAI2_IPP_IND_SAI_RXDATA_SELECT_INPUT_0_DAISY_SHIFT
 0

	)

22570 
	#IOMUXC_SAI2_IPP_IND_SAI_RXSYNC_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22571 
	#IOMUXC_SAI2_IPP_IND_SAI_RXSYNC_SELECT_INPUT_DAISY_SHIFT
 0

	)

22573 
	#IOMUXC_SAI2_IPP_IND_SAI_TXBCLK_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22574 
	#IOMUXC_SAI2_IPP_IND_SAI_TXBCLK_SELECT_INPUT_DAISY_SHIFT
 0

	)

22576 
	#IOMUXC_SAI2_IPP_IND_SAI_TXSYNC_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22577 
	#IOMUXC_SAI2_IPP_IND_SAI_TXSYNC_SELECT_INPUT_DAISY_SHIFT
 0

	)

22579 
	#IOMUXC_SDMA_EVENTS_SELECT_INPUT_14_DAISY_MASK
 0x3u

	)

22580 
	#IOMUXC_SDMA_EVENTS_SELECT_INPUT_14_DAISY_SHIFT
 0

	)

22581 
	#IOMUXC_SDMA_EVENTS_SELECT_INPUT_14_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SDMA_EVENTS_SELECT_INPUT_14_DAISY_SHIFT
))&
IOMUXC_SDMA_EVENTS_SELECT_INPUT_14_DAISY_MASK
)

	)

22583 
	#IOMUXC_SDMA_EVENTS_SELECT_INPUT_15_DAISY_MASK
 0x1u

	)

22584 
	#IOMUXC_SDMA_EVENTS_SELECT_INPUT_15_DAISY_SHIFT
 0

	)

22586 
	#IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_DAISY_MASK
 0x7u

	)

22587 
	#IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_DAISY_SHIFT
 0

	)

22588 
	#IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_DAISY_MASK
)

	)

22590 
	#IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22591 
	#IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_DAISY_SHIFT
 0

	)

22593 
	#IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22594 
	#IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_DAISY_SHIFT
 0

	)

22595 
	#IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_DAISY_MASK
)

	)

22597 
	#IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22598 
	#IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22599 
	#IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_MASK
)

	)

22601 
	#IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22602 
	#IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_DAISY_SHIFT
 0

	)

22603 
	#IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_DAISY_MASK
)

	)

22605 
	#IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22606 
	#IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22607 
	#IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_MASK
)

	)

22609 
	#IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_DAISY_MASK
 0x7u

	)

22610 
	#IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_DAISY_SHIFT
 0

	)

22611 
	#IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_DAISY_MASK
)

	)

22613 
	#IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_MASK
 0x7u

	)

22614 
	#IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22615 
	#IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_MASK
)

	)

22617 
	#IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22618 
	#IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_DAISY_SHIFT
 0

	)

22619 
	#IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_DAISY_MASK
)

	)

22621 
	#IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_MASK
 0x7u

	)

22622 
	#IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22623 
	#IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_MASK
)

	)

22625 
	#IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22626 
	#IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_DAISY_SHIFT
 0

	)

22627 
	#IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_DAISY_MASK
)

	)

22629 
	#IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22630 
	#IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22631 
	#IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_MASK
)

	)

22633 
	#IOMUXC_UART6_IPP_UART_RTS_B_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22634 
	#IOMUXC_UART6_IPP_UART_RTS_B_SELECT_INPUT_DAISY_SHIFT
 0

	)

22635 
	#IOMUXC_UART6_IPP_UART_RTS_B_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_UART6_IPP_UART_RTS_B_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_UART6_IPP_UART_RTS_B_SELECT_INPUT_DAISY_MASK
)

	)

22637 
	#IOMUXC_UART6_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_MASK
 0x7u

	)

22638 
	#IOMUXC_UART6_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_SHIFT
 0

	)

22639 
	#IOMUXC_UART6_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_UART6_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_UART6_IPP_UART_RXD_MUX_SELECT_INPUT_DAISY_MASK
)

	)

22641 
	#IOMUXC_USB_IPP_IND_OTG2_OC_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22642 
	#IOMUXC_USB_IPP_IND_OTG2_OC_SELECT_INPUT_DAISY_SHIFT
 0

	)

22643 
	#IOMUXC_USB_IPP_IND_OTG2_OC_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_USB_IPP_IND_OTG2_OC_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_USB_IPP_IND_OTG2_OC_SELECT_INPUT_DAISY_MASK
)

	)

22645 
	#IOMUXC_USB_IPP_IND_OTG_OC_SELECT_INPUT_DAISY_MASK
 0x3u

	)

22646 
	#IOMUXC_USB_IPP_IND_OTG_OC_SELECT_INPUT_DAISY_SHIFT
 0

	)

22647 
	#IOMUXC_USB_IPP_IND_OTG_OC_SELECT_INPUT_DAISY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_USB_IPP_IND_OTG_OC_SELECT_INPUT_DAISY_SHIFT
))&
IOMUXC_USB_IPP_IND_OTG_OC_SELECT_INPUT_DAISY_MASK
)

	)

22649 
	#IOMUXC_USDHC1_IPP_CARD_DET_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22650 
	#IOMUXC_USDHC1_IPP_CARD_DET_SELECT_INPUT_DAISY_SHIFT
 0

	)

22652 
	#IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22653 
	#IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_DAISY_SHIFT
 0

	)

22655 
	#IOMUXC_USDHC2_IPP_CARD_DET_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22656 
	#IOMUXC_USDHC2_IPP_CARD_DET_SELECT_INPUT_DAISY_SHIFT
 0

	)

22658 
	#IOMUXC_USDHC2_IPP_WP_ON_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22659 
	#IOMUXC_USDHC2_IPP_WP_ON_SELECT_INPUT_DAISY_SHIFT
 0

	)

22661 
	#IOMUXC_USDHC4_IPP_CARD_DET_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22662 
	#IOMUXC_USDHC4_IPP_CARD_DET_SELECT_INPUT_DAISY_SHIFT
 0

	)

22664 
	#IOMUXC_USDHC4_IPP_WP_ON_SELECT_INPUT_DAISY_MASK
 0x1u

	)

22665 
	#IOMUXC_USDHC4_IPP_WP_ON_SELECT_INPUT_DAISY_SHIFT
 0

	)

22673 
	#IOMUXC_BASE
 (0x420E0000u)

	)

22675 
	#IOMUXC
 ((
IOMUXC_Ty≥
 *)
IOMUXC_BASE
)

	)

22676 
	#IOMUXC_BASE_PTR
 (
IOMUXC
)

	)

22678 
	#IOMUXC_BASE_ADDRS
 { 
IOMUXC_BASE
 }

	)

22680 
	#IOMUXC_BASE_PTRS
 { 
IOMUXC
 }

	)

22693 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO00
 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO00_REG
(
IOMUXC_BASE_PTR
)

	)

22694 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO01
 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO01_REG
(
IOMUXC_BASE_PTR
)

	)

22695 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO02
 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO02_REG
(
IOMUXC_BASE_PTR
)

	)

22696 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03
 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO03_REG
(
IOMUXC_BASE_PTR
)

	)

22697 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO04
 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO04_REG
(
IOMUXC_BASE_PTR
)

	)

22698 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO05
 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO05_REG
(
IOMUXC_BASE_PTR
)

	)

22699 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO06
 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO06_REG
(
IOMUXC_BASE_PTR
)

	)

22700 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO07
 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO07_REG
(
IOMUXC_BASE_PTR
)

	)

22701 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO08
 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO08_REG
(
IOMUXC_BASE_PTR
)

	)

22702 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO09
 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO09_REG
(
IOMUXC_BASE_PTR
)

	)

22703 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO10
 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO10_REG
(
IOMUXC_BASE_PTR
)

	)

22704 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO11
 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO11_REG
(
IOMUXC_BASE_PTR
)

	)

22705 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO12
 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO12_REG
(
IOMUXC_BASE_PTR
)

	)

22706 
	#IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO13
 
	`IOMUXC_SW_MUX_CTL_PAD_GPIO1_IO13_REG
(
IOMUXC_BASE_PTR
)

	)

22707 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA00
 
	`IOMUXC_SW_MUX_CTL_PAD_CSI_DATA00_REG
(
IOMUXC_BASE_PTR
)

	)

22708 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA01
 
	`IOMUXC_SW_MUX_CTL_PAD_CSI_DATA01_REG
(
IOMUXC_BASE_PTR
)

	)

22709 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA02
 
	`IOMUXC_SW_MUX_CTL_PAD_CSI_DATA02_REG
(
IOMUXC_BASE_PTR
)

	)

22710 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA03
 
	`IOMUXC_SW_MUX_CTL_PAD_CSI_DATA03_REG
(
IOMUXC_BASE_PTR
)

	)

22711 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA04
 
	`IOMUXC_SW_MUX_CTL_PAD_CSI_DATA04_REG
(
IOMUXC_BASE_PTR
)

	)

22712 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA05
 
	`IOMUXC_SW_MUX_CTL_PAD_CSI_DATA05_REG
(
IOMUXC_BASE_PTR
)

	)

22713 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA06
 
	`IOMUXC_SW_MUX_CTL_PAD_CSI_DATA06_REG
(
IOMUXC_BASE_PTR
)

	)

22714 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_DATA07
 
	`IOMUXC_SW_MUX_CTL_PAD_CSI_DATA07_REG
(
IOMUXC_BASE_PTR
)

	)

22715 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_HSYNC
 
	`IOMUXC_SW_MUX_CTL_PAD_CSI_HSYNC_REG
(
IOMUXC_BASE_PTR
)

	)

22716 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_MCLK
 
	`IOMUXC_SW_MUX_CTL_PAD_CSI_MCLK_REG
(
IOMUXC_BASE_PTR
)

	)

22717 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_PIXCLK
 
	`IOMUXC_SW_MUX_CTL_PAD_CSI_PIXCLK_REG
(
IOMUXC_BASE_PTR
)

	)

22718 
	#IOMUXC_SW_MUX_CTL_PAD_CSI_VSYNC
 
	`IOMUXC_SW_MUX_CTL_PAD_CSI_VSYNC_REG
(
IOMUXC_BASE_PTR
)

	)

22719 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_COL
 
	`IOMUXC_SW_MUX_CTL_PAD_ENET1_COL_REG
(
IOMUXC_BASE_PTR
)

	)

22720 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_CRS
 
	`IOMUXC_SW_MUX_CTL_PAD_ENET1_CRS_REG
(
IOMUXC_BASE_PTR
)

	)

22721 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_MDC
 
	`IOMUXC_SW_MUX_CTL_PAD_ENET1_MDC_REG
(
IOMUXC_BASE_PTR
)

	)

22722 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_MDIO
 
	`IOMUXC_SW_MUX_CTL_PAD_ENET1_MDIO_REG
(
IOMUXC_BASE_PTR
)

	)

22723 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_RX_CLK
 
	`IOMUXC_SW_MUX_CTL_PAD_ENET1_RX_CLK_REG
(
IOMUXC_BASE_PTR
)

	)

22724 
	#IOMUXC_SW_MUX_CTL_PAD_ENET1_TX_CLK
 
	`IOMUXC_SW_MUX_CTL_PAD_ENET1_TX_CLK_REG
(
IOMUXC_BASE_PTR
)

	)

22725 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_COL
 
	`IOMUXC_SW_MUX_CTL_PAD_ENET2_COL_REG
(
IOMUXC_BASE_PTR
)

	)

22726 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_CRS
 
	`IOMUXC_SW_MUX_CTL_PAD_ENET2_CRS_REG
(
IOMUXC_BASE_PTR
)

	)

22727 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_RX_CLK
 
	`IOMUXC_SW_MUX_CTL_PAD_ENET2_RX_CLK_REG
(
IOMUXC_BASE_PTR
)

	)

22728 
	#IOMUXC_SW_MUX_CTL_PAD_ENET2_TX_CLK
 
	`IOMUXC_SW_MUX_CTL_PAD_ENET2_TX_CLK_REG
(
IOMUXC_BASE_PTR
)

	)

22729 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL0
 
	`IOMUXC_SW_MUX_CTL_PAD_KEY_COL0_REG
(
IOMUXC_BASE_PTR
)

	)

22730 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL1
 
	`IOMUXC_SW_MUX_CTL_PAD_KEY_COL1_REG
(
IOMUXC_BASE_PTR
)

	)

22731 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL2
 
	`IOMUXC_SW_MUX_CTL_PAD_KEY_COL2_REG
(
IOMUXC_BASE_PTR
)

	)

22732 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL3
 
	`IOMUXC_SW_MUX_CTL_PAD_KEY_COL3_REG
(
IOMUXC_BASE_PTR
)

	)

22733 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_COL4
 
	`IOMUXC_SW_MUX_CTL_PAD_KEY_COL4_REG
(
IOMUXC_BASE_PTR
)

	)

22734 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0
 
	`IOMUXC_SW_MUX_CTL_PAD_KEY_ROW0_REG
(
IOMUXC_BASE_PTR
)

	)

22735 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1
 
	`IOMUXC_SW_MUX_CTL_PAD_KEY_ROW1_REG
(
IOMUXC_BASE_PTR
)

	)

22736 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2
 
	`IOMUXC_SW_MUX_CTL_PAD_KEY_ROW2_REG
(
IOMUXC_BASE_PTR
)

	)

22737 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3
 
	`IOMUXC_SW_MUX_CTL_PAD_KEY_ROW3_REG
(
IOMUXC_BASE_PTR
)

	)

22738 
	#IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4
 
	`IOMUXC_SW_MUX_CTL_PAD_KEY_ROW4_REG
(
IOMUXC_BASE_PTR
)

	)

22739 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_CLK
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_CLK_REG
(
IOMUXC_BASE_PTR
)

	)

22740 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA00
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA00_REG
(
IOMUXC_BASE_PTR
)

	)

22741 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA01
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA01_REG
(
IOMUXC_BASE_PTR
)

	)

22742 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA02
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA02_REG
(
IOMUXC_BASE_PTR
)

	)

22743 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA03
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA03_REG
(
IOMUXC_BASE_PTR
)

	)

22744 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA04
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA04_REG
(
IOMUXC_BASE_PTR
)

	)

22745 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA05
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA05_REG
(
IOMUXC_BASE_PTR
)

	)

22746 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA06
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA06_REG
(
IOMUXC_BASE_PTR
)

	)

22747 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA07
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA07_REG
(
IOMUXC_BASE_PTR
)

	)

22748 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA08
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA08_REG
(
IOMUXC_BASE_PTR
)

	)

22749 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA09
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA09_REG
(
IOMUXC_BASE_PTR
)

	)

22750 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA10
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA10_REG
(
IOMUXC_BASE_PTR
)

	)

22751 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA11
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA11_REG
(
IOMUXC_BASE_PTR
)

	)

22752 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA12
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA12_REG
(
IOMUXC_BASE_PTR
)

	)

22753 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA13
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA13_REG
(
IOMUXC_BASE_PTR
)

	)

22754 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA14
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA14_REG
(
IOMUXC_BASE_PTR
)

	)

22755 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA15
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA15_REG
(
IOMUXC_BASE_PTR
)

	)

22756 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA16
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA16_REG
(
IOMUXC_BASE_PTR
)

	)

22757 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA17
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA17_REG
(
IOMUXC_BASE_PTR
)

	)

22758 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA18
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA18_REG
(
IOMUXC_BASE_PTR
)

	)

22759 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA19
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA19_REG
(
IOMUXC_BASE_PTR
)

	)

22760 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA20
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA20_REG
(
IOMUXC_BASE_PTR
)

	)

22761 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA21
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA21_REG
(
IOMUXC_BASE_PTR
)

	)

22762 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA22
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA22_REG
(
IOMUXC_BASE_PTR
)

	)

22763 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA23
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_DATA23_REG
(
IOMUXC_BASE_PTR
)

	)

22764 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_ENABLE
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_ENABLE_REG
(
IOMUXC_BASE_PTR
)

	)

22765 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_HSYNC
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_HSYNC_REG
(
IOMUXC_BASE_PTR
)

	)

22766 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_RESET
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_RESET_REG
(
IOMUXC_BASE_PTR
)

	)

22767 
	#IOMUXC_SW_MUX_CTL_PAD_LCD1_VSYNC
 
	`IOMUXC_SW_MUX_CTL_PAD_LCD1_VSYNC_REG
(
IOMUXC_BASE_PTR
)

	)

22768 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_ALE
 
	`IOMUXC_SW_MUX_CTL_PAD_NAND_ALE_REG
(
IOMUXC_BASE_PTR
)

	)

22769 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CE0_B
 
	`IOMUXC_SW_MUX_CTL_PAD_NAND_CE0_B_REG
(
IOMUXC_BASE_PTR
)

	)

22770 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CE1_B
 
	`IOMUXC_SW_MUX_CTL_PAD_NAND_CE1_B_REG
(
IOMUXC_BASE_PTR
)

	)

22771 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_CLE
 
	`IOMUXC_SW_MUX_CTL_PAD_NAND_CLE_REG
(
IOMUXC_BASE_PTR
)

	)

22772 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA00
 
	`IOMUXC_SW_MUX_CTL_PAD_NAND_DATA00_REG
(
IOMUXC_BASE_PTR
)

	)

22773 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA01
 
	`IOMUXC_SW_MUX_CTL_PAD_NAND_DATA01_REG
(
IOMUXC_BASE_PTR
)

	)

22774 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA02
 
	`IOMUXC_SW_MUX_CTL_PAD_NAND_DATA02_REG
(
IOMUXC_BASE_PTR
)

	)

22775 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA03
 
	`IOMUXC_SW_MUX_CTL_PAD_NAND_DATA03_REG
(
IOMUXC_BASE_PTR
)

	)

22776 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA04
 
	`IOMUXC_SW_MUX_CTL_PAD_NAND_DATA04_REG
(
IOMUXC_BASE_PTR
)

	)

22777 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA05
 
	`IOMUXC_SW_MUX_CTL_PAD_NAND_DATA05_REG
(
IOMUXC_BASE_PTR
)

	)

22778 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA06
 
	`IOMUXC_SW_MUX_CTL_PAD_NAND_DATA06_REG
(
IOMUXC_BASE_PTR
)

	)

22779 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_DATA07
 
	`IOMUXC_SW_MUX_CTL_PAD_NAND_DATA07_REG
(
IOMUXC_BASE_PTR
)

	)

22780 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_RE_B
 
	`IOMUXC_SW_MUX_CTL_PAD_NAND_RE_B_REG
(
IOMUXC_BASE_PTR
)

	)

22781 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_READY_B
 
	`IOMUXC_SW_MUX_CTL_PAD_NAND_READY_B_REG
(
IOMUXC_BASE_PTR
)

	)

22782 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_WE_B
 
	`IOMUXC_SW_MUX_CTL_PAD_NAND_WE_B_REG
(
IOMUXC_BASE_PTR
)

	)

22783 
	#IOMUXC_SW_MUX_CTL_PAD_NAND_WP_B
 
	`IOMUXC_SW_MUX_CTL_PAD_NAND_WP_B_REG
(
IOMUXC_BASE_PTR
)

	)

22784 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA0
 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA0_REG
(
IOMUXC_BASE_PTR
)

	)

22785 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA1
 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA1_REG
(
IOMUXC_BASE_PTR
)

	)

22786 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA2
 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA2_REG
(
IOMUXC_BASE_PTR
)

	)

22787 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA3
 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DATA3_REG
(
IOMUXC_BASE_PTR
)

	)

22788 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DQS
 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1A_DQS_REG
(
IOMUXC_BASE_PTR
)

	)

22789 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SCLK
 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SCLK_REG
(
IOMUXC_BASE_PTR
)

	)

22790 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS0_B
 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS0_B_REG
(
IOMUXC_BASE_PTR
)

	)

22791 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS1_B
 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1A_SS1_B_REG
(
IOMUXC_BASE_PTR
)

	)

22792 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA0
 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA0_REG
(
IOMUXC_BASE_PTR
)

	)

22793 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA1
 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA1_REG
(
IOMUXC_BASE_PTR
)

	)

22794 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA2
 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA2_REG
(
IOMUXC_BASE_PTR
)

	)

22795 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA3
 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DATA3_REG
(
IOMUXC_BASE_PTR
)

	)

22796 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DQS
 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1B_DQS_REG
(
IOMUXC_BASE_PTR
)

	)

22797 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SCLK
 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SCLK_REG
(
IOMUXC_BASE_PTR
)

	)

22798 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS0_B
 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS0_B_REG
(
IOMUXC_BASE_PTR
)

	)

22799 
	#IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS1_B
 
	`IOMUXC_SW_MUX_CTL_PAD_QSPI1B_SS1_B_REG
(
IOMUXC_BASE_PTR
)

	)

22800 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD0
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD0_REG
(
IOMUXC_BASE_PTR
)

	)

22801 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD1
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD1_REG
(
IOMUXC_BASE_PTR
)

	)

22802 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD2
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD2_REG
(
IOMUXC_BASE_PTR
)

	)

22803 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD3
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII1_RD3_REG
(
IOMUXC_BASE_PTR
)

	)

22804 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RX_CTL
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII1_RX_CTL_REG
(
IOMUXC_BASE_PTR
)

	)

22805 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_RXC
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII1_RXC_REG
(
IOMUXC_BASE_PTR
)

	)

22806 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD0
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD0_REG
(
IOMUXC_BASE_PTR
)

	)

22807 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD1
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD1_REG
(
IOMUXC_BASE_PTR
)

	)

22808 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD2
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD2_REG
(
IOMUXC_BASE_PTR
)

	)

22809 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD3
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII1_TD3_REG
(
IOMUXC_BASE_PTR
)

	)

22810 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TX_CTL
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII1_TX_CTL_REG
(
IOMUXC_BASE_PTR
)

	)

22811 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII1_TXC
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII1_TXC_REG
(
IOMUXC_BASE_PTR
)

	)

22812 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD0
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD0_REG
(
IOMUXC_BASE_PTR
)

	)

22813 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD1
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD1_REG
(
IOMUXC_BASE_PTR
)

	)

22814 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD2
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD2_REG
(
IOMUXC_BASE_PTR
)

	)

22815 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD3
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII2_RD3_REG
(
IOMUXC_BASE_PTR
)

	)

22816 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RX_CTL
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII2_RX_CTL_REG
(
IOMUXC_BASE_PTR
)

	)

22817 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_RXC
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII2_RXC_REG
(
IOMUXC_BASE_PTR
)

	)

22818 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD0
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD0_REG
(
IOMUXC_BASE_PTR
)

	)

22819 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD1
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD1_REG
(
IOMUXC_BASE_PTR
)

	)

22820 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD2
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD2_REG
(
IOMUXC_BASE_PTR
)

	)

22821 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD3
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII2_TD3_REG
(
IOMUXC_BASE_PTR
)

	)

22822 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TX_CTL
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII2_TX_CTL_REG
(
IOMUXC_BASE_PTR
)

	)

22823 
	#IOMUXC_SW_MUX_CTL_PAD_RGMII2_TXC
 
	`IOMUXC_SW_MUX_CTL_PAD_RGMII2_TXC_REG
(
IOMUXC_BASE_PTR
)

	)

22824 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_CLK
 
	`IOMUXC_SW_MUX_CTL_PAD_SD1_CLK_REG
(
IOMUXC_BASE_PTR
)

	)

22825 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_CMD
 
	`IOMUXC_SW_MUX_CTL_PAD_SD1_CMD_REG
(
IOMUXC_BASE_PTR
)

	)

22826 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA0
 
	`IOMUXC_SW_MUX_CTL_PAD_SD1_DATA0_REG
(
IOMUXC_BASE_PTR
)

	)

22827 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA1
 
	`IOMUXC_SW_MUX_CTL_PAD_SD1_DATA1_REG
(
IOMUXC_BASE_PTR
)

	)

22828 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA2
 
	`IOMUXC_SW_MUX_CTL_PAD_SD1_DATA2_REG
(
IOMUXC_BASE_PTR
)

	)

22829 
	#IOMUXC_SW_MUX_CTL_PAD_SD1_DATA3
 
	`IOMUXC_SW_MUX_CTL_PAD_SD1_DATA3_REG
(
IOMUXC_BASE_PTR
)

	)

22830 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_CLK
 
	`IOMUXC_SW_MUX_CTL_PAD_SD2_CLK_REG
(
IOMUXC_BASE_PTR
)

	)

22831 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_CMD
 
	`IOMUXC_SW_MUX_CTL_PAD_SD2_CMD_REG
(
IOMUXC_BASE_PTR
)

	)

22832 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA0
 
	`IOMUXC_SW_MUX_CTL_PAD_SD2_DATA0_REG
(
IOMUXC_BASE_PTR
)

	)

22833 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA1
 
	`IOMUXC_SW_MUX_CTL_PAD_SD2_DATA1_REG
(
IOMUXC_BASE_PTR
)

	)

22834 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA2
 
	`IOMUXC_SW_MUX_CTL_PAD_SD2_DATA2_REG
(
IOMUXC_BASE_PTR
)

	)

22835 
	#IOMUXC_SW_MUX_CTL_PAD_SD2_DATA3
 
	`IOMUXC_SW_MUX_CTL_PAD_SD2_DATA3_REG
(
IOMUXC_BASE_PTR
)

	)

22836 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_CLK
 
	`IOMUXC_SW_MUX_CTL_PAD_SD3_CLK_REG
(
IOMUXC_BASE_PTR
)

	)

22837 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_CMD
 
	`IOMUXC_SW_MUX_CTL_PAD_SD3_CMD_REG
(
IOMUXC_BASE_PTR
)

	)

22838 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA0
 
	`IOMUXC_SW_MUX_CTL_PAD_SD3_DATA0_REG
(
IOMUXC_BASE_PTR
)

	)

22839 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA1
 
	`IOMUXC_SW_MUX_CTL_PAD_SD3_DATA1_REG
(
IOMUXC_BASE_PTR
)

	)

22840 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA2
 
	`IOMUXC_SW_MUX_CTL_PAD_SD3_DATA2_REG
(
IOMUXC_BASE_PTR
)

	)

22841 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA3
 
	`IOMUXC_SW_MUX_CTL_PAD_SD3_DATA3_REG
(
IOMUXC_BASE_PTR
)

	)

22842 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA4
 
	`IOMUXC_SW_MUX_CTL_PAD_SD3_DATA4_REG
(
IOMUXC_BASE_PTR
)

	)

22843 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA5
 
	`IOMUXC_SW_MUX_CTL_PAD_SD3_DATA5_REG
(
IOMUXC_BASE_PTR
)

	)

22844 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA6
 
	`IOMUXC_SW_MUX_CTL_PAD_SD3_DATA6_REG
(
IOMUXC_BASE_PTR
)

	)

22845 
	#IOMUXC_SW_MUX_CTL_PAD_SD3_DATA7
 
	`IOMUXC_SW_MUX_CTL_PAD_SD3_DATA7_REG
(
IOMUXC_BASE_PTR
)

	)

22846 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_CLK
 
	`IOMUXC_SW_MUX_CTL_PAD_SD4_CLK_REG
(
IOMUXC_BASE_PTR
)

	)

22847 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_CMD
 
	`IOMUXC_SW_MUX_CTL_PAD_SD4_CMD_REG
(
IOMUXC_BASE_PTR
)

	)

22848 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA0
 
	`IOMUXC_SW_MUX_CTL_PAD_SD4_DATA0_REG
(
IOMUXC_BASE_PTR
)

	)

22849 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA1
 
	`IOMUXC_SW_MUX_CTL_PAD_SD4_DATA1_REG
(
IOMUXC_BASE_PTR
)

	)

22850 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA2
 
	`IOMUXC_SW_MUX_CTL_PAD_SD4_DATA2_REG
(
IOMUXC_BASE_PTR
)

	)

22851 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA3
 
	`IOMUXC_SW_MUX_CTL_PAD_SD4_DATA3_REG
(
IOMUXC_BASE_PTR
)

	)

22852 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA4
 
	`IOMUXC_SW_MUX_CTL_PAD_SD4_DATA4_REG
(
IOMUXC_BASE_PTR
)

	)

22853 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA5
 
	`IOMUXC_SW_MUX_CTL_PAD_SD4_DATA5_REG
(
IOMUXC_BASE_PTR
)

	)

22854 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA6
 
	`IOMUXC_SW_MUX_CTL_PAD_SD4_DATA6_REG
(
IOMUXC_BASE_PTR
)

	)

22855 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_DATA7
 
	`IOMUXC_SW_MUX_CTL_PAD_SD4_DATA7_REG
(
IOMUXC_BASE_PTR
)

	)

22856 
	#IOMUXC_SW_MUX_CTL_PAD_SD4_RESET_B
 
	`IOMUXC_SW_MUX_CTL_PAD_SD4_RESET_B_REG
(
IOMUXC_BASE_PTR
)

	)

22857 
	#IOMUXC_SW_MUX_CTL_PAD_USB_H_DATA
 
	`IOMUXC_SW_MUX_CTL_PAD_USB_H_DATA_REG
(
IOMUXC_BASE_PTR
)

	)

22858 
	#IOMUXC_SW_MUX_CTL_PAD_USB_H_STROBE
 
	`IOMUXC_SW_MUX_CTL_PAD_USB_H_STROBE_REG
(
IOMUXC_BASE_PTR
)

	)

22859 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR00_REG
(
IOMUXC_BASE_PTR
)

	)

22860 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR01_REG
(
IOMUXC_BASE_PTR
)

	)

22861 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR02_REG
(
IOMUXC_BASE_PTR
)

	)

22862 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR03_REG
(
IOMUXC_BASE_PTR
)

	)

22863 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR04_REG
(
IOMUXC_BASE_PTR
)

	)

22864 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR05_REG
(
IOMUXC_BASE_PTR
)

	)

22865 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR06_REG
(
IOMUXC_BASE_PTR
)

	)

22866 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR07_REG
(
IOMUXC_BASE_PTR
)

	)

22867 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR08_REG
(
IOMUXC_BASE_PTR
)

	)

22868 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR09_REG
(
IOMUXC_BASE_PTR
)

	)

22869 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR10_REG
(
IOMUXC_BASE_PTR
)

	)

22870 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR11_REG
(
IOMUXC_BASE_PTR
)

	)

22871 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR12_REG
(
IOMUXC_BASE_PTR
)

	)

22872 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR13_REG
(
IOMUXC_BASE_PTR
)

	)

22873 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR14_REG
(
IOMUXC_BASE_PTR
)

	)

22874 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_ADDR15_REG
(
IOMUXC_BASE_PTR
)

	)

22875 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM0_REG
(
IOMUXC_BASE_PTR
)

	)

22876 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM1_REG
(
IOMUXC_BASE_PTR
)

	)

22877 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM2_REG
(
IOMUXC_BASE_PTR
)

	)

22878 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_DQM3_REG
(
IOMUXC_BASE_PTR
)

	)

22879 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_RAS_B_REG
(
IOMUXC_BASE_PTR
)

	)

22880 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_CAS_B_REG
(
IOMUXC_BASE_PTR
)

	)

22881 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_CS0_B_REG
(
IOMUXC_BASE_PTR
)

	)

22882 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_CS1_B_REG
(
IOMUXC_BASE_PTR
)

	)

22883 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_SDWE_B_REG
(
IOMUXC_BASE_PTR
)

	)

22884 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT0_REG
(
IOMUXC_BASE_PTR
)

	)

22885 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_ODT1_REG
(
IOMUXC_BASE_PTR
)

	)

22886 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA0_REG
(
IOMUXC_BASE_PTR
)

	)

22887 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA1_REG
(
IOMUXC_BASE_PTR
)

	)

22888 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_SDBA2_REG
(
IOMUXC_BASE_PTR
)

	)

22889 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE0_REG
(
IOMUXC_BASE_PTR
)

	)

22890 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCKE1_REG
(
IOMUXC_BASE_PTR
)

	)

22891 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_SDCLK0_P_REG
(
IOMUXC_BASE_PTR
)

	)

22892 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS0_P_REG
(
IOMUXC_BASE_PTR
)

	)

22893 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS1_P_REG
(
IOMUXC_BASE_PTR
)

	)

22894 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS2_P_REG
(
IOMUXC_BASE_PTR
)

	)

22895 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_SDQS3_P_REG
(
IOMUXC_BASE_PTR
)

	)

22896 
	#IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET
 
	`IOMUXC_SW_PAD_CTL_PAD_DRAM_RESET_REG
(
IOMUXC_BASE_PTR
)

	)

22897 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD
 
	`IOMUXC_SW_PAD_CTL_PAD_JTAG_MOD_REG
(
IOMUXC_BASE_PTR
)

	)

22898 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK
 
	`IOMUXC_SW_PAD_CTL_PAD_JTAG_TCK_REG
(
IOMUXC_BASE_PTR
)

	)

22899 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI
 
	`IOMUXC_SW_PAD_CTL_PAD_JTAG_TDI_REG
(
IOMUXC_BASE_PTR
)

	)

22900 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO
 
	`IOMUXC_SW_PAD_CTL_PAD_JTAG_TDO_REG
(
IOMUXC_BASE_PTR
)

	)

22901 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS
 
	`IOMUXC_SW_PAD_CTL_PAD_JTAG_TMS_REG
(
IOMUXC_BASE_PTR
)

	)

22902 
	#IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B
 
	`IOMUXC_SW_PAD_CTL_PAD_JTAG_TRST_B_REG
(
IOMUXC_BASE_PTR
)

	)

22903 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00
 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO00_REG
(
IOMUXC_BASE_PTR
)

	)

22904 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01
 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO01_REG
(
IOMUXC_BASE_PTR
)

	)

22905 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02
 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO02_REG
(
IOMUXC_BASE_PTR
)

	)

22906 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03
 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO03_REG
(
IOMUXC_BASE_PTR
)

	)

22907 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04
 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO04_REG
(
IOMUXC_BASE_PTR
)

	)

22908 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05
 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO05_REG
(
IOMUXC_BASE_PTR
)

	)

22909 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06
 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO06_REG
(
IOMUXC_BASE_PTR
)

	)

22910 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07
 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO07_REG
(
IOMUXC_BASE_PTR
)

	)

22911 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08
 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO08_REG
(
IOMUXC_BASE_PTR
)

	)

22912 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09
 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO09_REG
(
IOMUXC_BASE_PTR
)

	)

22913 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10
 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO10_REG
(
IOMUXC_BASE_PTR
)

	)

22914 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11
 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO11_REG
(
IOMUXC_BASE_PTR
)

	)

22915 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12
 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO12_REG
(
IOMUXC_BASE_PTR
)

	)

22916 
	#IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13
 
	`IOMUXC_SW_PAD_CTL_PAD_GPIO1_IO13_REG
(
IOMUXC_BASE_PTR
)

	)

22917 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00
 
	`IOMUXC_SW_PAD_CTL_PAD_CSI_DATA00_REG
(
IOMUXC_BASE_PTR
)

	)

22918 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01
 
	`IOMUXC_SW_PAD_CTL_PAD_CSI_DATA01_REG
(
IOMUXC_BASE_PTR
)

	)

22919 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02
 
	`IOMUXC_SW_PAD_CTL_PAD_CSI_DATA02_REG
(
IOMUXC_BASE_PTR
)

	)

22920 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03
 
	`IOMUXC_SW_PAD_CTL_PAD_CSI_DATA03_REG
(
IOMUXC_BASE_PTR
)

	)

22921 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04
 
	`IOMUXC_SW_PAD_CTL_PAD_CSI_DATA04_REG
(
IOMUXC_BASE_PTR
)

	)

22922 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05
 
	`IOMUXC_SW_PAD_CTL_PAD_CSI_DATA05_REG
(
IOMUXC_BASE_PTR
)

	)

22923 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06
 
	`IOMUXC_SW_PAD_CTL_PAD_CSI_DATA06_REG
(
IOMUXC_BASE_PTR
)

	)

22924 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07
 
	`IOMUXC_SW_PAD_CTL_PAD_CSI_DATA07_REG
(
IOMUXC_BASE_PTR
)

	)

22925 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC
 
	`IOMUXC_SW_PAD_CTL_PAD_CSI_HSYNC_REG
(
IOMUXC_BASE_PTR
)

	)

22926 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK
 
	`IOMUXC_SW_PAD_CTL_PAD_CSI_MCLK_REG
(
IOMUXC_BASE_PTR
)

	)

22927 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK
 
	`IOMUXC_SW_PAD_CTL_PAD_CSI_PIXCLK_REG
(
IOMUXC_BASE_PTR
)

	)

22928 
	#IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC
 
	`IOMUXC_SW_PAD_CTL_PAD_CSI_VSYNC_REG
(
IOMUXC_BASE_PTR
)

	)

22929 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_COL
 
	`IOMUXC_SW_PAD_CTL_PAD_ENET1_COL_REG
(
IOMUXC_BASE_PTR
)

	)

22930 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS
 
	`IOMUXC_SW_PAD_CTL_PAD_ENET1_CRS_REG
(
IOMUXC_BASE_PTR
)

	)

22931 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC
 
	`IOMUXC_SW_PAD_CTL_PAD_ENET1_MDC_REG
(
IOMUXC_BASE_PTR
)

	)

22932 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO
 
	`IOMUXC_SW_PAD_CTL_PAD_ENET1_MDIO_REG
(
IOMUXC_BASE_PTR
)

	)

22933 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK
 
	`IOMUXC_SW_PAD_CTL_PAD_ENET1_RX_CLK_REG
(
IOMUXC_BASE_PTR
)

	)

22934 
	#IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK
 
	`IOMUXC_SW_PAD_CTL_PAD_ENET1_TX_CLK_REG
(
IOMUXC_BASE_PTR
)

	)

22935 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_COL
 
	`IOMUXC_SW_PAD_CTL_PAD_ENET2_COL_REG
(
IOMUXC_BASE_PTR
)

	)

22936 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS
 
	`IOMUXC_SW_PAD_CTL_PAD_ENET2_CRS_REG
(
IOMUXC_BASE_PTR
)

	)

22937 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK
 
	`IOMUXC_SW_PAD_CTL_PAD_ENET2_RX_CLK_REG
(
IOMUXC_BASE_PTR
)

	)

22938 
	#IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK
 
	`IOMUXC_SW_PAD_CTL_PAD_ENET2_TX_CLK_REG
(
IOMUXC_BASE_PTR
)

	)

22939 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL0
 
	`IOMUXC_SW_PAD_CTL_PAD_KEY_COL0_REG
(
IOMUXC_BASE_PTR
)

	)

22940 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL1
 
	`IOMUXC_SW_PAD_CTL_PAD_KEY_COL1_REG
(
IOMUXC_BASE_PTR
)

	)

22941 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL2
 
	`IOMUXC_SW_PAD_CTL_PAD_KEY_COL2_REG
(
IOMUXC_BASE_PTR
)

	)

22942 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL3
 
	`IOMUXC_SW_PAD_CTL_PAD_KEY_COL3_REG
(
IOMUXC_BASE_PTR
)

	)

22943 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_COL4
 
	`IOMUXC_SW_PAD_CTL_PAD_KEY_COL4_REG
(
IOMUXC_BASE_PTR
)

	)

22944 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0
 
	`IOMUXC_SW_PAD_CTL_PAD_KEY_ROW0_REG
(
IOMUXC_BASE_PTR
)

	)

22945 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1
 
	`IOMUXC_SW_PAD_CTL_PAD_KEY_ROW1_REG
(
IOMUXC_BASE_PTR
)

	)

22946 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2
 
	`IOMUXC_SW_PAD_CTL_PAD_KEY_ROW2_REG
(
IOMUXC_BASE_PTR
)

	)

22947 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3
 
	`IOMUXC_SW_PAD_CTL_PAD_KEY_ROW3_REG
(
IOMUXC_BASE_PTR
)

	)

22948 
	#IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4
 
	`IOMUXC_SW_PAD_CTL_PAD_KEY_ROW4_REG
(
IOMUXC_BASE_PTR
)

	)

22949 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_CLK_REG
(
IOMUXC_BASE_PTR
)

	)

22950 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA00_REG
(
IOMUXC_BASE_PTR
)

	)

22951 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA01_REG
(
IOMUXC_BASE_PTR
)

	)

22952 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA02_REG
(
IOMUXC_BASE_PTR
)

	)

22953 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA03_REG
(
IOMUXC_BASE_PTR
)

	)

22954 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA04_REG
(
IOMUXC_BASE_PTR
)

	)

22955 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA05_REG
(
IOMUXC_BASE_PTR
)

	)

22956 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA06_REG
(
IOMUXC_BASE_PTR
)

	)

22957 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA07_REG
(
IOMUXC_BASE_PTR
)

	)

22958 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA08_REG
(
IOMUXC_BASE_PTR
)

	)

22959 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA09_REG
(
IOMUXC_BASE_PTR
)

	)

22960 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA10_REG
(
IOMUXC_BASE_PTR
)

	)

22961 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA11_REG
(
IOMUXC_BASE_PTR
)

	)

22962 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA12_REG
(
IOMUXC_BASE_PTR
)

	)

22963 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA13_REG
(
IOMUXC_BASE_PTR
)

	)

22964 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA14_REG
(
IOMUXC_BASE_PTR
)

	)

22965 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA15_REG
(
IOMUXC_BASE_PTR
)

	)

22966 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA16_REG
(
IOMUXC_BASE_PTR
)

	)

22967 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA17_REG
(
IOMUXC_BASE_PTR
)

	)

22968 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA18_REG
(
IOMUXC_BASE_PTR
)

	)

22969 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA19_REG
(
IOMUXC_BASE_PTR
)

	)

22970 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA20_REG
(
IOMUXC_BASE_PTR
)

	)

22971 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA21_REG
(
IOMUXC_BASE_PTR
)

	)

22972 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA22_REG
(
IOMUXC_BASE_PTR
)

	)

22973 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_DATA23_REG
(
IOMUXC_BASE_PTR
)

	)

22974 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_ENABLE_REG
(
IOMUXC_BASE_PTR
)

	)

22975 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_HSYNC_REG
(
IOMUXC_BASE_PTR
)

	)

22976 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_RESET_REG
(
IOMUXC_BASE_PTR
)

	)

22977 
	#IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC
 
	`IOMUXC_SW_PAD_CTL_PAD_LCD1_VSYNC_REG
(
IOMUXC_BASE_PTR
)

	)

22978 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_ALE
 
	`IOMUXC_SW_PAD_CTL_PAD_NAND_ALE_REG
(
IOMUXC_BASE_PTR
)

	)

22979 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B
 
	`IOMUXC_SW_PAD_CTL_PAD_NAND_CE0_B_REG
(
IOMUXC_BASE_PTR
)

	)

22980 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B
 
	`IOMUXC_SW_PAD_CTL_PAD_NAND_CE1_B_REG
(
IOMUXC_BASE_PTR
)

	)

22981 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_CLE
 
	`IOMUXC_SW_PAD_CTL_PAD_NAND_CLE_REG
(
IOMUXC_BASE_PTR
)

	)

22982 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00
 
	`IOMUXC_SW_PAD_CTL_PAD_NAND_DATA00_REG
(
IOMUXC_BASE_PTR
)

	)

22983 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01
 
	`IOMUXC_SW_PAD_CTL_PAD_NAND_DATA01_REG
(
IOMUXC_BASE_PTR
)

	)

22984 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02
 
	`IOMUXC_SW_PAD_CTL_PAD_NAND_DATA02_REG
(
IOMUXC_BASE_PTR
)

	)

22985 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03
 
	`IOMUXC_SW_PAD_CTL_PAD_NAND_DATA03_REG
(
IOMUXC_BASE_PTR
)

	)

22986 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04
 
	`IOMUXC_SW_PAD_CTL_PAD_NAND_DATA04_REG
(
IOMUXC_BASE_PTR
)

	)

22987 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05
 
	`IOMUXC_SW_PAD_CTL_PAD_NAND_DATA05_REG
(
IOMUXC_BASE_PTR
)

	)

22988 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06
 
	`IOMUXC_SW_PAD_CTL_PAD_NAND_DATA06_REG
(
IOMUXC_BASE_PTR
)

	)

22989 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07
 
	`IOMUXC_SW_PAD_CTL_PAD_NAND_DATA07_REG
(
IOMUXC_BASE_PTR
)

	)

22990 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B
 
	`IOMUXC_SW_PAD_CTL_PAD_NAND_RE_B_REG
(
IOMUXC_BASE_PTR
)

	)

22991 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B
 
	`IOMUXC_SW_PAD_CTL_PAD_NAND_READY_B_REG
(
IOMUXC_BASE_PTR
)

	)

22992 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B
 
	`IOMUXC_SW_PAD_CTL_PAD_NAND_WE_B_REG
(
IOMUXC_BASE_PTR
)

	)

22993 
	#IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B
 
	`IOMUXC_SW_PAD_CTL_PAD_NAND_WP_B_REG
(
IOMUXC_BASE_PTR
)

	)

22994 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0
 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA0_REG
(
IOMUXC_BASE_PTR
)

	)

22995 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1
 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA1_REG
(
IOMUXC_BASE_PTR
)

	)

22996 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2
 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA2_REG
(
IOMUXC_BASE_PTR
)

	)

22997 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3
 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DATA3_REG
(
IOMUXC_BASE_PTR
)

	)

22998 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS
 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1A_DQS_REG
(
IOMUXC_BASE_PTR
)

	)

22999 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK
 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SCLK_REG
(
IOMUXC_BASE_PTR
)

	)

23000 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B
 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS0_B_REG
(
IOMUXC_BASE_PTR
)

	)

23001 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B
 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1A_SS1_B_REG
(
IOMUXC_BASE_PTR
)

	)

23002 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0
 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA0_REG
(
IOMUXC_BASE_PTR
)

	)

23003 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1
 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA1_REG
(
IOMUXC_BASE_PTR
)

	)

23004 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2
 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA2_REG
(
IOMUXC_BASE_PTR
)

	)

23005 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3
 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DATA3_REG
(
IOMUXC_BASE_PTR
)

	)

23006 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS
 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_DQS_REG
(
IOMUXC_BASE_PTR
)

	)

23007 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK
 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SCLK_REG
(
IOMUXC_BASE_PTR
)

	)

23008 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B
 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS0_B_REG
(
IOMUXC_BASE_PTR
)

	)

23009 
	#IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B
 
	`IOMUXC_SW_PAD_CTL_PAD_QSPI1B_SS1_B_REG
(
IOMUXC_BASE_PTR
)

	)

23010 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD0_REG
(
IOMUXC_BASE_PTR
)

	)

23011 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD1_REG
(
IOMUXC_BASE_PTR
)

	)

23012 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD2_REG
(
IOMUXC_BASE_PTR
)

	)

23013 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII1_RD3_REG
(
IOMUXC_BASE_PTR
)

	)

23014 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII1_RX_CTL_REG
(
IOMUXC_BASE_PTR
)

	)

23015 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII1_RXC_REG
(
IOMUXC_BASE_PTR
)

	)

23016 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD0_REG
(
IOMUXC_BASE_PTR
)

	)

23017 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD1_REG
(
IOMUXC_BASE_PTR
)

	)

23018 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD2_REG
(
IOMUXC_BASE_PTR
)

	)

23019 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII1_TD3_REG
(
IOMUXC_BASE_PTR
)

	)

23020 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII1_TX_CTL_REG
(
IOMUXC_BASE_PTR
)

	)

23021 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII1_TXC_REG
(
IOMUXC_BASE_PTR
)

	)

23022 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD0_REG
(
IOMUXC_BASE_PTR
)

	)

23023 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD1_REG
(
IOMUXC_BASE_PTR
)

	)

23024 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD2_REG
(
IOMUXC_BASE_PTR
)

	)

23025 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII2_RD3_REG
(
IOMUXC_BASE_PTR
)

	)

23026 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII2_RX_CTL_REG
(
IOMUXC_BASE_PTR
)

	)

23027 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII2_RXC_REG
(
IOMUXC_BASE_PTR
)

	)

23028 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD0_REG
(
IOMUXC_BASE_PTR
)

	)

23029 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD1_REG
(
IOMUXC_BASE_PTR
)

	)

23030 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD2_REG
(
IOMUXC_BASE_PTR
)

	)

23031 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII2_TD3_REG
(
IOMUXC_BASE_PTR
)

	)

23032 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII2_TX_CTL_REG
(
IOMUXC_BASE_PTR
)

	)

23033 
	#IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC
 
	`IOMUXC_SW_PAD_CTL_PAD_RGMII2_TXC_REG
(
IOMUXC_BASE_PTR
)

	)

23034 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CLK
 
	`IOMUXC_SW_PAD_CTL_PAD_SD1_CLK_REG
(
IOMUXC_BASE_PTR
)

	)

23035 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_CMD
 
	`IOMUXC_SW_PAD_CTL_PAD_SD1_CMD_REG
(
IOMUXC_BASE_PTR
)

	)

23036 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0
 
	`IOMUXC_SW_PAD_CTL_PAD_SD1_DATA0_REG
(
IOMUXC_BASE_PTR
)

	)

23037 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1
 
	`IOMUXC_SW_PAD_CTL_PAD_SD1_DATA1_REG
(
IOMUXC_BASE_PTR
)

	)

23038 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2
 
	`IOMUXC_SW_PAD_CTL_PAD_SD1_DATA2_REG
(
IOMUXC_BASE_PTR
)

	)

23039 
	#IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3
 
	`IOMUXC_SW_PAD_CTL_PAD_SD1_DATA3_REG
(
IOMUXC_BASE_PTR
)

	)

23040 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CLK
 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_CLK_REG
(
IOMUXC_BASE_PTR
)

	)

23041 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_CMD
 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_CMD_REG
(
IOMUXC_BASE_PTR
)

	)

23042 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0
 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_DATA0_REG
(
IOMUXC_BASE_PTR
)

	)

23043 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1
 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_DATA1_REG
(
IOMUXC_BASE_PTR
)

	)

23044 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2
 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_DATA2_REG
(
IOMUXC_BASE_PTR
)

	)

23045 
	#IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3
 
	`IOMUXC_SW_PAD_CTL_PAD_SD2_DATA3_REG
(
IOMUXC_BASE_PTR
)

	)

23046 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CLK
 
	`IOMUXC_SW_PAD_CTL_PAD_SD3_CLK_REG
(
IOMUXC_BASE_PTR
)

	)

23047 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_CMD
 
	`IOMUXC_SW_PAD_CTL_PAD_SD3_CMD_REG
(
IOMUXC_BASE_PTR
)

	)

23048 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0
 
	`IOMUXC_SW_PAD_CTL_PAD_SD3_DATA0_REG
(
IOMUXC_BASE_PTR
)

	)

23049 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1
 
	`IOMUXC_SW_PAD_CTL_PAD_SD3_DATA1_REG
(
IOMUXC_BASE_PTR
)

	)

23050 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2
 
	`IOMUXC_SW_PAD_CTL_PAD_SD3_DATA2_REG
(
IOMUXC_BASE_PTR
)

	)

23051 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3
 
	`IOMUXC_SW_PAD_CTL_PAD_SD3_DATA3_REG
(
IOMUXC_BASE_PTR
)

	)

23052 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4
 
	`IOMUXC_SW_PAD_CTL_PAD_SD3_DATA4_REG
(
IOMUXC_BASE_PTR
)

	)

23053 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5
 
	`IOMUXC_SW_PAD_CTL_PAD_SD3_DATA5_REG
(
IOMUXC_BASE_PTR
)

	)

23054 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6
 
	`IOMUXC_SW_PAD_CTL_PAD_SD3_DATA6_REG
(
IOMUXC_BASE_PTR
)

	)

23055 
	#IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7
 
	`IOMUXC_SW_PAD_CTL_PAD_SD3_DATA7_REG
(
IOMUXC_BASE_PTR
)

	)

23056 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CLK
 
	`IOMUXC_SW_PAD_CTL_PAD_SD4_CLK_REG
(
IOMUXC_BASE_PTR
)

	)

23057 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_CMD
 
	`IOMUXC_SW_PAD_CTL_PAD_SD4_CMD_REG
(
IOMUXC_BASE_PTR
)

	)

23058 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0
 
	`IOMUXC_SW_PAD_CTL_PAD_SD4_DATA0_REG
(
IOMUXC_BASE_PTR
)

	)

23059 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1
 
	`IOMUXC_SW_PAD_CTL_PAD_SD4_DATA1_REG
(
IOMUXC_BASE_PTR
)

	)

23060 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2
 
	`IOMUXC_SW_PAD_CTL_PAD_SD4_DATA2_REG
(
IOMUXC_BASE_PTR
)

	)

23061 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3
 
	`IOMUXC_SW_PAD_CTL_PAD_SD4_DATA3_REG
(
IOMUXC_BASE_PTR
)

	)

23062 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4
 
	`IOMUXC_SW_PAD_CTL_PAD_SD4_DATA4_REG
(
IOMUXC_BASE_PTR
)

	)

23063 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5
 
	`IOMUXC_SW_PAD_CTL_PAD_SD4_DATA5_REG
(
IOMUXC_BASE_PTR
)

	)

23064 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6
 
	`IOMUXC_SW_PAD_CTL_PAD_SD4_DATA6_REG
(
IOMUXC_BASE_PTR
)

	)

23065 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7
 
	`IOMUXC_SW_PAD_CTL_PAD_SD4_DATA7_REG
(
IOMUXC_BASE_PTR
)

	)

23066 
	#IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B
 
	`IOMUXC_SW_PAD_CTL_PAD_SD4_RESET_B_REG
(
IOMUXC_BASE_PTR
)

	)

23067 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA
 
	`IOMUXC_SW_PAD_CTL_PAD_USB_H_DATA_REG
(
IOMUXC_BASE_PTR
)

	)

23068 
	#IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE
 
	`IOMUXC_SW_PAD_CTL_PAD_USB_H_STROBE_REG
(
IOMUXC_BASE_PTR
)

	)

23069 
	#IOMUXC_SW_PAD_CTL_GRP_ADDDS
 
	`IOMUXC_SW_PAD_CTL_GRP_ADDDS_REG
(
IOMUXC_BASE_PTR
)

	)

23070 
	#IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL
 
	`IOMUXC_SW_PAD_CTL_GRP_DDRMODE_CTL_REG
(
IOMUXC_BASE_PTR
)

	)

23071 
	#IOMUXC_SW_PAD_CTL_GRP_DDRPKE
 
	`IOMUXC_SW_PAD_CTL_GRP_DDRPKE_REG
(
IOMUXC_BASE_PTR
)

	)

23072 
	#IOMUXC_SW_PAD_CTL_GRP_DDRPK
 
	`IOMUXC_SW_PAD_CTL_GRP_DDRPK_REG
(
IOMUXC_BASE_PTR
)

	)

23073 
	#IOMUXC_SW_PAD_CTL_GRP_DDRHYS
 
	`IOMUXC_SW_PAD_CTL_GRP_DDRHYS_REG
(
IOMUXC_BASE_PTR
)

	)

23074 
	#IOMUXC_SW_PAD_CTL_GRP_DDRMODE
 
	`IOMUXC_SW_PAD_CTL_GRP_DDRMODE_REG
(
IOMUXC_BASE_PTR
)

	)

23075 
	#IOMUXC_SW_PAD_CTL_GRP_B0DS
 
	`IOMUXC_SW_PAD_CTL_GRP_B0DS_REG
(
IOMUXC_BASE_PTR
)

	)

23076 
	#IOMUXC_SW_PAD_CTL_GRP_B1DS
 
	`IOMUXC_SW_PAD_CTL_GRP_B1DS_REG
(
IOMUXC_BASE_PTR
)

	)

23077 
	#IOMUXC_SW_PAD_CTL_GRP_CTLDS
 
	`IOMUXC_SW_PAD_CTL_GRP_CTLDS_REG
(
IOMUXC_BASE_PTR
)

	)

23078 
	#IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE
 
	`IOMUXC_SW_PAD_CTL_GRP_DDR_TYPE_REG
(
IOMUXC_BASE_PTR
)

	)

23079 
	#IOMUXC_SW_PAD_CTL_GRP_B2DS
 
	`IOMUXC_SW_PAD_CTL_GRP_B2DS_REG
(
IOMUXC_BASE_PTR
)

	)

23080 
	#IOMUXC_SW_PAD_CTL_GRP_B3DS
 
	`IOMUXC_SW_PAD_CTL_GRP_B3DS_REG
(
IOMUXC_BASE_PTR
)

	)

23081 
	#IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT
 
	`IOMUXC_ANATOP_USB_OTG_ID_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23082 
	#IOMUXC_ANATOP_USB_UH1_ID_SELECT_INPUT
 
	`IOMUXC_ANATOP_USB_UH1_ID_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23083 
	#IOMUXC_AUDMUX_P3_INPUT_DA_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P3_INPUT_DA_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23084 
	#IOMUXC_AUDMUX_P3_INPUT_DB_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P3_INPUT_DB_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23085 
	#IOMUXC_AUDMUX_P3_INPUT_RXCLK_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P3_INPUT_RXCLK_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23086 
	#IOMUXC_AUDMUX_P3_INPUT_RXFS_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P3_INPUT_RXFS_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23087 
	#IOMUXC_AUDMUX_P3_INPUT_TXCLK_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P3_INPUT_TXCLK_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23088 
	#IOMUXC_AUDMUX_P3_INPUT_TXFS_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P3_INPUT_TXFS_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23089 
	#IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P4_INPUT_DA_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23090 
	#IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P4_INPUT_DB_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23091 
	#IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P4_INPUT_RXCLK_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23092 
	#IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P4_INPUT_RXFS_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23093 
	#IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P4_INPUT_TXCLK_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23094 
	#IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P4_INPUT_TXFS_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23095 
	#IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P5_INPUT_DA_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23096 
	#IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P5_INPUT_DB_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23097 
	#IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P5_INPUT_RXCLK_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23098 
	#IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P5_INPUT_RXFS_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23099 
	#IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P5_INPUT_TXCLK_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23100 
	#IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P5_INPUT_TXFS_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23101 
	#IOMUXC_AUDMUX_P6_INPUT_DA_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P6_INPUT_DA_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23102 
	#IOMUXC_AUDMUX_P6_INPUT_DB_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P6_INPUT_DB_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23103 
	#IOMUXC_AUDMUX_P6_INPUT_RXCLK_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P6_INPUT_RXCLK_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23104 
	#IOMUXC_AUDMUX_P6_INPUT_RXFS_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P6_INPUT_RXFS_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23105 
	#IOMUXC_AUDMUX_P6_INPUT_TXCLK_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P6_INPUT_TXCLK_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23106 
	#IOMUXC_AUDMUX_P6_INPUT_TXFS_AMX_SELECT_INPUT
 
	`IOMUXC_AUDMUX_P6_INPUT_TXFS_AMX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23107 
	#IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT
 
	`IOMUXC_CAN1_IPP_IND_CANRX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23108 
	#IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT
 
	`IOMUXC_CAN2_IPP_IND_CANRX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23109 
	#IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT
 
	`IOMUXC_CCM_PMIC_VFUNCIONAL_READY_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23110 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_0
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_0_REG
(
IOMUXC_BASE_PTR
)

	)

23111 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_1
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_1_REG
(
IOMUXC_BASE_PTR
)

	)

23112 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_2
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_2_REG
(
IOMUXC_BASE_PTR
)

	)

23113 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_3
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_3_REG
(
IOMUXC_BASE_PTR
)

	)

23114 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_4
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_4_REG
(
IOMUXC_BASE_PTR
)

	)

23115 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_5
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_5_REG
(
IOMUXC_BASE_PTR
)

	)

23116 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_6
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_6_REG
(
IOMUXC_BASE_PTR
)

	)

23117 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_7
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_7_REG
(
IOMUXC_BASE_PTR
)

	)

23118 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_8
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_8_REG
(
IOMUXC_BASE_PTR
)

	)

23119 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_9
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_9_REG
(
IOMUXC_BASE_PTR
)

	)

23120 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_11
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_11_REG
(
IOMUXC_BASE_PTR
)

	)

23121 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_12
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_12_REG
(
IOMUXC_BASE_PTR
)

	)

23122 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_13
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_13_REG
(
IOMUXC_BASE_PTR
)

	)

23123 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_14
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_14_REG
(
IOMUXC_BASE_PTR
)

	)

23124 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_15
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_15_REG
(
IOMUXC_BASE_PTR
)

	)

23125 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_16
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_16_REG
(
IOMUXC_BASE_PTR
)

	)

23126 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_17
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_17_REG
(
IOMUXC_BASE_PTR
)

	)

23127 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_18
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_18_REG
(
IOMUXC_BASE_PTR
)

	)

23128 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_19
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_19_REG
(
IOMUXC_BASE_PTR
)

	)

23129 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_20
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_20_REG
(
IOMUXC_BASE_PTR
)

	)

23130 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_21
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_21_REG
(
IOMUXC_BASE_PTR
)

	)

23131 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_22
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_22_REG
(
IOMUXC_BASE_PTR
)

	)

23132 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_23
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_23_REG
(
IOMUXC_BASE_PTR
)

	)

23133 
	#IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_10
 
	`IOMUXC_CSI1_IPP_CSI_D_SELECT_INPUT_10_REG
(
IOMUXC_BASE_PTR
)

	)

23134 
	#IOMUXC_CSI1_IPP_CSI_HSYNC_SELECT_INPUT
 
	`IOMUXC_CSI1_IPP_CSI_HSYNC_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23135 
	#IOMUXC_CSI1_IPP_CSI_PIXCLK_SELECT_INPUT
 
	`IOMUXC_CSI1_IPP_CSI_PIXCLK_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23136 
	#IOMUXC_CSI1_IPP_CSI_VSYNC_SELECT_INPUT
 
	`IOMUXC_CSI1_IPP_CSI_VSYNC_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23137 
	#IOMUXC_CSI1_TVDECODER_IN_FIELD_SELECT_INPUT
 
	`IOMUXC_CSI1_TVDECODER_IN_FIELD_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23138 
	#IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT
 
	`IOMUXC_ECSPI1_IPP_CSPI_CLK_IN_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23139 
	#IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT
 
	`IOMUXC_ECSPI1_IPP_IND_MISO_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23140 
	#IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT
 
	`IOMUXC_ECSPI1_IPP_IND_MOSI_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23141 
	#IOMUXC_ECSPI1_IPP_IND_SS_B_SELECT_INPUT_0
 
	`IOMUXC_ECSPI1_IPP_IND_SS_B_SELECT_INPUT_0_REG
(
IOMUXC_BASE_PTR
)

	)

23142 
	#IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT
 
	`IOMUXC_ECSPI2_IPP_CSPI_CLK_IN_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23143 
	#IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT
 
	`IOMUXC_ECSPI2_IPP_IND_MISO_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23144 
	#IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT
 
	`IOMUXC_ECSPI2_IPP_IND_MOSI_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23145 
	#IOMUXC_ECSPI2_IPP_IND_SS_B_SELECT_INPUT_0
 
	`IOMUXC_ECSPI2_IPP_IND_SS_B_SELECT_INPUT_0_REG
(
IOMUXC_BASE_PTR
)

	)

23146 
	#IOMUXC_ECSPI3_IPP_CSPI_CLK_IN_SELECT_INPUT
 
	`IOMUXC_ECSPI3_IPP_CSPI_CLK_IN_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23147 
	#IOMUXC_ECSPI3_IPP_IND_MISO_SELECT_INPUT
 
	`IOMUXC_ECSPI3_IPP_IND_MISO_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23148 
	#IOMUXC_ECSPI3_IPP_IND_MOSI_SELECT_INPUT
 
	`IOMUXC_ECSPI3_IPP_IND_MOSI_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23149 
	#IOMUXC_ECSPI3_IPP_IND_SS_B_SELECT_INPUT_0
 
	`IOMUXC_ECSPI3_IPP_IND_SS_B_SELECT_INPUT_0_REG
(
IOMUXC_BASE_PTR
)

	)

23150 
	#IOMUXC_ECSPI4_IPP_CSPI_CLK_IN_SELECT_INPUT
 
	`IOMUXC_ECSPI4_IPP_CSPI_CLK_IN_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23151 
	#IOMUXC_ECSPI4_IPP_IND_MISO_SELECT_INPUT
 
	`IOMUXC_ECSPI4_IPP_IND_MISO_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23152 
	#IOMUXC_ECSPI4_IPP_IND_MOSI_SELECT_INPUT
 
	`IOMUXC_ECSPI4_IPP_IND_MOSI_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23153 
	#IOMUXC_ECSPI4_IPP_IND_SS_B_SELECT_INPUT_0
 
	`IOMUXC_ECSPI4_IPP_IND_SS_B_SELECT_INPUT_0_REG
(
IOMUXC_BASE_PTR
)

	)

23154 
	#IOMUXC_ECSPI5_IPP_CSPI_CLK_IN_SELECT_INPUT
 
	`IOMUXC_ECSPI5_IPP_CSPI_CLK_IN_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23155 
	#IOMUXC_ECSPI5_IPP_IND_MISO_SELECT_INPUT
 
	`IOMUXC_ECSPI5_IPP_IND_MISO_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23156 
	#IOMUXC_ECSPI5_IPP_IND_MOSI_SELECT_INPUT
 
	`IOMUXC_ECSPI5_IPP_IND_MOSI_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23157 
	#IOMUXC_ECSPI5_IPP_IND_SS_B_SELECT_INPUT_0
 
	`IOMUXC_ECSPI5_IPP_IND_SS_B_SELECT_INPUT_0_REG
(
IOMUXC_BASE_PTR
)

	)

23158 
	#IOMUXC_ENET1_IPG_CLK_RMII_SELECT_INPUT
 
	`IOMUXC_ENET1_IPG_CLK_RMII_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23159 
	#IOMUXC_ENET1_IPP_IND_MAC0_MDIO_SELECT_INPUT
 
	`IOMUXC_ENET1_IPP_IND_MAC0_MDIO_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23160 
	#IOMUXC_ENET1_IPP_IND_MAC0_RXCLK_SELECT_INPUT
 
	`IOMUXC_ENET1_IPP_IND_MAC0_RXCLK_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23161 
	#IOMUXC_ENET2_IPG_CLK_RMII_SELECT_INPUT
 
	`IOMUXC_ENET2_IPG_CLK_RMII_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23162 
	#IOMUXC_ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT
 
	`IOMUXC_ENET2_IPP_IND_MAC0_MDIO_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23163 
	#IOMUXC_ENET2_IPP_IND_MAC0_RXCLK_SELECT_INPUT
 
	`IOMUXC_ENET2_IPP_IND_MAC0_RXCLK_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23164 
	#IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT
 
	`IOMUXC_ESAI_IPP_IND_FSR_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23165 
	#IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT
 
	`IOMUXC_ESAI_IPP_IND_FST_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23166 
	#IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT
 
	`IOMUXC_ESAI_IPP_IND_HCKR_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23167 
	#IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT
 
	`IOMUXC_ESAI_IPP_IND_HCKT_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23168 
	#IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT
 
	`IOMUXC_ESAI_IPP_IND_SCKR_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23169 
	#IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT
 
	`IOMUXC_ESAI_IPP_IND_SCKT_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23170 
	#IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT
 
	`IOMUXC_ESAI_IPP_IND_SDO0_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23171 
	#IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT
 
	`IOMUXC_ESAI_IPP_IND_SDO1_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23172 
	#IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT
 
	`IOMUXC_ESAI_IPP_IND_SDO2_SDI3_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23173 
	#IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT
 
	`IOMUXC_ESAI_IPP_IND_SDO3_SDI2_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23174 
	#IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT
 
	`IOMUXC_ESAI_IPP_IND_SDO4_SDI1_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23175 
	#IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT
 
	`IOMUXC_ESAI_IPP_IND_SDO5_SDI0_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23176 
	#IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT
 
	`IOMUXC_I2C1_IPP_SCL_IN_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23177 
	#IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT
 
	`IOMUXC_I2C1_IPP_SDA_IN_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23178 
	#IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT
 
	`IOMUXC_I2C2_IPP_SCL_IN_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23179 
	#IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT
 
	`IOMUXC_I2C2_IPP_SDA_IN_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23180 
	#IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT
 
	`IOMUXC_I2C3_IPP_SCL_IN_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23181 
	#IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT
 
	`IOMUXC_I2C3_IPP_SDA_IN_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23182 
	#IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT
 
	`IOMUXC_I2C4_IPP_SCL_IN_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23183 
	#IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT
 
	`IOMUXC_I2C4_IPP_SDA_IN_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23184 
	#IOMUXC_KPP_IPP_IND_COL_SELECT_INPUT_5
 
	`IOMUXC_KPP_IPP_IND_COL_SELECT_INPUT_5_REG
(
IOMUXC_BASE_PTR
)

	)

23185 
	#IOMUXC_KPP_IPP_IND_COL_SELECT_INPUT_6
 
	`IOMUXC_KPP_IPP_IND_COL_SELECT_INPUT_6_REG
(
IOMUXC_BASE_PTR
)

	)

23186 
	#IOMUXC_KPP_IPP_IND_COL_SELECT_INPUT_7
 
	`IOMUXC_KPP_IPP_IND_COL_SELECT_INPUT_7_REG
(
IOMUXC_BASE_PTR
)

	)

23187 
	#IOMUXC_KPP_IPP_IND_ROW_SELECT_INPUT_5
 
	`IOMUXC_KPP_IPP_IND_ROW_SELECT_INPUT_5_REG
(
IOMUXC_BASE_PTR
)

	)

23188 
	#IOMUXC_KPP_IPP_IND_ROW_SELECT_INPUT_6
 
	`IOMUXC_KPP_IPP_IND_ROW_SELECT_INPUT_6_REG
(
IOMUXC_BASE_PTR
)

	)

23189 
	#IOMUXC_KPP_IPP_IND_ROW_SELECT_INPUT_7
 
	`IOMUXC_KPP_IPP_IND_ROW_SELECT_INPUT_7_REG
(
IOMUXC_BASE_PTR
)

	)

23190 
	#IOMUXC_LCD1_BUSY_SELECT_INPUT
 
	`IOMUXC_LCD1_BUSY_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23191 
	#IOMUXC_LCD2_BUSY_SELECT_INPUT
 
	`IOMUXC_LCD2_BUSY_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23192 
	#IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT
 
	`IOMUXC_MLB_MLB_CLK_IN_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23193 
	#IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT
 
	`IOMUXC_MLB_MLB_DATA_IN_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23194 
	#IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT
 
	`IOMUXC_MLB_MLB_SIG_IN_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23195 
	#IOMUXC_SAI1_IPP_IND_SAI_RXBCLK_SELECT_INPUT
 
	`IOMUXC_SAI1_IPP_IND_SAI_RXBCLK_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23196 
	#IOMUXC_SAI1_IPP_IND_SAI_RXDATA_SELECT_INPUT_0
 
	`IOMUXC_SAI1_IPP_IND_SAI_RXDATA_SELECT_INPUT_0_REG
(
IOMUXC_BASE_PTR
)

	)

23197 
	#IOMUXC_SAI1_IPP_IND_SAI_RXSYNC_SELECT_INPUT
 
	`IOMUXC_SAI1_IPP_IND_SAI_RXSYNC_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23198 
	#IOMUXC_SAI1_IPP_IND_SAI_TXBCLK_SELECT_INPUT
 
	`IOMUXC_SAI1_IPP_IND_SAI_TXBCLK_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23199 
	#IOMUXC_SAI1_IPP_IND_SAI_TXSYNC_SELECT_INPUT
 
	`IOMUXC_SAI1_IPP_IND_SAI_TXSYNC_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23200 
	#IOMUXC_SAI2_IPP_IND_SAI_RXBCLK_SELECT_INPUT
 
	`IOMUXC_SAI2_IPP_IND_SAI_RXBCLK_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23201 
	#IOMUXC_SAI2_IPP_IND_SAI_RXDATA_SELECT_INPUT_0
 
	`IOMUXC_SAI2_IPP_IND_SAI_RXDATA_SELECT_INPUT_0_REG
(
IOMUXC_BASE_PTR
)

	)

23202 
	#IOMUXC_SAI2_IPP_IND_SAI_RXSYNC_SELECT_INPUT
 
	`IOMUXC_SAI2_IPP_IND_SAI_RXSYNC_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23203 
	#IOMUXC_SAI2_IPP_IND_SAI_TXBCLK_SELECT_INPUT
 
	`IOMUXC_SAI2_IPP_IND_SAI_TXBCLK_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23204 
	#IOMUXC_SAI2_IPP_IND_SAI_TXSYNC_SELECT_INPUT
 
	`IOMUXC_SAI2_IPP_IND_SAI_TXSYNC_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23205 
	#IOMUXC_SDMA_EVENTS_SELECT_INPUT_14
 
	`IOMUXC_SDMA_EVENTS_SELECT_INPUT_14_REG
(
IOMUXC_BASE_PTR
)

	)

23206 
	#IOMUXC_SDMA_EVENTS_SELECT_INPUT_15
 
	`IOMUXC_SDMA_EVENTS_SELECT_INPUT_15_REG
(
IOMUXC_BASE_PTR
)

	)

23207 
	#IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT
 
	`IOMUXC_SPDIF_SPDIF_IN1_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23208 
	#IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT
 
	`IOMUXC_SPDIF_TX_CLK2_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23209 
	#IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT
 
	`IOMUXC_UART1_IPP_UART_RTS_B_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23210 
	#IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT
 
	`IOMUXC_UART1_IPP_UART_RXD_MUX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23211 
	#IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT
 
	`IOMUXC_UART2_IPP_UART_RTS_B_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23212 
	#IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT
 
	`IOMUXC_UART2_IPP_UART_RXD_MUX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23213 
	#IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT
 
	`IOMUXC_UART3_IPP_UART_RTS_B_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23214 
	#IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT
 
	`IOMUXC_UART3_IPP_UART_RXD_MUX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23215 
	#IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT
 
	`IOMUXC_UART4_IPP_UART_RTS_B_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23216 
	#IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT
 
	`IOMUXC_UART4_IPP_UART_RXD_MUX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23217 
	#IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT
 
	`IOMUXC_UART5_IPP_UART_RTS_B_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23218 
	#IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT
 
	`IOMUXC_UART5_IPP_UART_RXD_MUX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23219 
	#IOMUXC_UART6_IPP_UART_RTS_B_SELECT_INPUT
 
	`IOMUXC_UART6_IPP_UART_RTS_B_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23220 
	#IOMUXC_UART6_IPP_UART_RXD_MUX_SELECT_INPUT
 
	`IOMUXC_UART6_IPP_UART_RXD_MUX_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23221 
	#IOMUXC_USB_IPP_IND_OTG2_OC_SELECT_INPUT
 
	`IOMUXC_USB_IPP_IND_OTG2_OC_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23222 
	#IOMUXC_USB_IPP_IND_OTG_OC_SELECT_INPUT
 
	`IOMUXC_USB_IPP_IND_OTG_OC_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23223 
	#IOMUXC_USDHC1_IPP_CARD_DET_SELECT_INPUT
 
	`IOMUXC_USDHC1_IPP_CARD_DET_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23224 
	#IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT
 
	`IOMUXC_USDHC1_IPP_WP_ON_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23225 
	#IOMUXC_USDHC2_IPP_CARD_DET_SELECT_INPUT
 
	`IOMUXC_USDHC2_IPP_CARD_DET_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23226 
	#IOMUXC_USDHC2_IPP_WP_ON_SELECT_INPUT
 
	`IOMUXC_USDHC2_IPP_WP_ON_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23227 
	#IOMUXC_USDHC4_IPP_CARD_DET_SELECT_INPUT
 
	`IOMUXC_USDHC4_IPP_CARD_DET_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23228 
	#IOMUXC_USDHC4_IPP_WP_ON_SELECT_INPUT
 
	`IOMUXC_USDHC4_IPP_WP_ON_SELECT_INPUT_REG
(
IOMUXC_BASE_PTR
)

	)

23249 
__IO
 
uöt32_t
 
	mGPR0
;

23250 
__IO
 
uöt32_t
 
	mGPR1
;

23251 
__IO
 
uöt32_t
 
	mGPR2
;

23252 
__IO
 
uöt32_t
 
	mGPR3
;

23253 
__IO
 
uöt32_t
 
	mGPR4
;

23254 
__IO
 
uöt32_t
 
	mGPR5
;

23255 
__IO
 
uöt32_t
 
	mGPR6
;

23256 
__IO
 
uöt32_t
 
	mGPR7
;

23257 
__IO
 
uöt32_t
 
	mGPR8
;

23258 
__IO
 
uöt32_t
 
	mGPR9
;

23259 
__IO
 
uöt32_t
 
	mGPR10
;

23260 
__IO
 
uöt32_t
 
	mGPR11
;

23261 
__IO
 
uöt32_t
 
	mGPR12
;

23262 
__IO
 
uöt32_t
 
	mGPR13
;

23263 } 
	tIOMUXC_GPR_Ty≥
, *
	tIOMUXC_GPR_MemM≠På
;

23275 
	#IOMUXC_GPR_GPR0_REG
(
ba£
Ë((ba£)->
GPR0
)

	)

23276 
	#IOMUXC_GPR_GPR1_REG
(
ba£
Ë((ba£)->
GPR1
)

	)

23277 
	#IOMUXC_GPR_GPR2_REG
(
ba£
Ë((ba£)->
GPR2
)

	)

23278 
	#IOMUXC_GPR_GPR3_REG
(
ba£
Ë((ba£)->
GPR3
)

	)

23279 
	#IOMUXC_GPR_GPR4_REG
(
ba£
Ë((ba£)->
GPR4
)

	)

23280 
	#IOMUXC_GPR_GPR5_REG
(
ba£
Ë((ba£)->
GPR5
)

	)

23281 
	#IOMUXC_GPR_GPR6_REG
(
ba£
Ë((ba£)->
GPR6
)

	)

23282 
	#IOMUXC_GPR_GPR7_REG
(
ba£
Ë((ba£)->
GPR7
)

	)

23283 
	#IOMUXC_GPR_GPR8_REG
(
ba£
Ë((ba£)->
GPR8
)

	)

23284 
	#IOMUXC_GPR_GPR9_REG
(
ba£
Ë((ba£)->
GPR9
)

	)

23285 
	#IOMUXC_GPR_GPR10_REG
(
ba£
Ë((ba£)->
GPR10
)

	)

23286 
	#IOMUXC_GPR_GPR11_REG
(
ba£
Ë((ba£)->
GPR11
)

	)

23287 
	#IOMUXC_GPR_GPR12_REG
(
ba£
Ë((ba£)->
GPR12
)

	)

23288 
	#IOMUXC_GPR_GPR13_REG
(
ba£
Ë((ba£)->
GPR13
)

	)

23304 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL0_MASK
 0x1u

	)

23305 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL0_SHIFT
 0

	)

23306 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL1_MASK
 0x2u

	)

23307 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL1_SHIFT
 1

	)

23308 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL2_MASK
 0x4u

	)

23309 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL2_SHIFT
 2

	)

23310 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL3_MASK
 0x8u

	)

23311 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL3_SHIFT
 3

	)

23312 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL4_MASK
 0x10u

	)

23313 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL4_SHIFT
 4

	)

23314 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL5_MASK
 0x20u

	)

23315 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL5_SHIFT
 5

	)

23316 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL6_MASK
 0x40u

	)

23317 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL6_SHIFT
 6

	)

23318 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL7_MASK
 0x80u

	)

23319 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL7_SHIFT
 7

	)

23320 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL8_MASK
 0x100u

	)

23321 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL8_SHIFT
 8

	)

23322 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL9_MASK
 0x200u

	)

23323 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL9_SHIFT
 9

	)

23324 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL10_MASK
 0x400u

	)

23325 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL10_SHIFT
 10

	)

23326 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL11_MASK
 0x800u

	)

23327 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL11_SHIFT
 11

	)

23328 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL12_MASK
 0x1000u

	)

23329 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL12_SHIFT
 12

	)

23330 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL13_MASK
 0x2000u

	)

23331 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL13_SHIFT
 13

	)

23332 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL14_MASK
 0x4000u

	)

23333 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL14_SHIFT
 14

	)

23334 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL15_MASK
 0x8000u

	)

23335 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL15_SHIFT
 15

	)

23336 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL16_MASK
 0x10000u

	)

23337 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL16_SHIFT
 16

	)

23338 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL17_MASK
 0x20000u

	)

23339 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL17_SHIFT
 17

	)

23340 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL18_MASK
 0x40000u

	)

23341 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL18_SHIFT
 18

	)

23342 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL19_MASK
 0x80000u

	)

23343 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL19_SHIFT
 19

	)

23344 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL20_MASK
 0x100000u

	)

23345 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL20_SHIFT
 20

	)

23346 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL21_MASK
 0x200000u

	)

23347 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL21_SHIFT
 21

	)

23348 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL22_MASK
 0x400000u

	)

23349 
	#IOMUXC_GPR_GPR0_DMAREQ_MUX_SEL22_SHIFT
 22

	)

23351 
	#IOMUXC_GPR_GPR1_ACT_CS0_MASK
 0x1u

	)

23352 
	#IOMUXC_GPR_GPR1_ACT_CS0_SHIFT
 0

	)

23353 
	#IOMUXC_GPR_GPR1_ADDRS0_MASK
 0x6u

	)

23354 
	#IOMUXC_GPR_GPR1_ADDRS0_SHIFT
 1

	)

23355 
	#IOMUXC_GPR_GPR1_ADDRS0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR1_ADDRS0_SHIFT
))&
IOMUXC_GPR_GPR1_ADDRS0_MASK
)

	)

23356 
	#IOMUXC_GPR_GPR1_ACT_CS1_MASK
 0x8u

	)

23357 
	#IOMUXC_GPR_GPR1_ACT_CS1_SHIFT
 3

	)

23358 
	#IOMUXC_GPR_GPR1_ADDRS1_MASK
 0x30u

	)

23359 
	#IOMUXC_GPR_GPR1_ADDRS1_SHIFT
 4

	)

23360 
	#IOMUXC_GPR_GPR1_ADDRS1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR1_ADDRS1_SHIFT
))&
IOMUXC_GPR_GPR1_ADDRS1_MASK
)

	)

23361 
	#IOMUXC_GPR_GPR1_ACT_CS2_MASK
 0x40u

	)

23362 
	#IOMUXC_GPR_GPR1_ACT_CS2_SHIFT
 6

	)

23363 
	#IOMUXC_GPR_GPR1_ADDRS2_MASK
 0x180u

	)

23364 
	#IOMUXC_GPR_GPR1_ADDRS2_SHIFT
 7

	)

23365 
	#IOMUXC_GPR_GPR1_ADDRS2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR1_ADDRS2_SHIFT
))&
IOMUXC_GPR_GPR1_ADDRS2_MASK
)

	)

23366 
	#IOMUXC_GPR_GPR1_ACT_CS3_MASK
 0x200u

	)

23367 
	#IOMUXC_GPR_GPR1_ACT_CS3_SHIFT
 9

	)

23368 
	#IOMUXC_GPR_GPR1_ADDRS3_MASK
 0xC00u

	)

23369 
	#IOMUXC_GPR_GPR1_ADDRS3_SHIFT
 10

	)

23370 
	#IOMUXC_GPR_GPR1_ADDRS3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR1_ADDRS3_SHIFT
))&
IOMUXC_GPR_GPR1_ADDRS3_MASK
)

	)

23371 
	#IOMUXC_GPR_GPR1_GINT_MASK
 0x1000u

	)

23372 
	#IOMUXC_GPR_GPR1_GINT_SHIFT
 12

	)

23373 
	#IOMUXC_GPR_GPR1_ENET1_CLK_SEL_MASK
 0x2000u

	)

23374 
	#IOMUXC_GPR_GPR1_ENET1_CLK_SEL_SHIFT
 13

	)

23375 
	#IOMUXC_GPR_GPR1_ENET2_CLK_SEL_MASK
 0x4000u

	)

23376 
	#IOMUXC_GPR_GPR1_ENET2_CLK_SEL_SHIFT
 14

	)

23377 
	#IOMUXC_GPR_GPR1_USB_EXP_MODE_MASK
 0x8000u

	)

23378 
	#IOMUXC_GPR_GPR1_USB_EXP_MODE_SHIFT
 15

	)

23379 
	#IOMUXC_GPR_GPR1_ADD_DS_MASK
 0x10000u

	)

23380 
	#IOMUXC_GPR_GPR1_ADD_DS_SHIFT
 16

	)

23381 
	#IOMUXC_GPR_GPR1_ENET1_TX_CLK_DIR_MASK
 0x20000u

	)

23382 
	#IOMUXC_GPR_GPR1_ENET1_TX_CLK_DIR_SHIFT
 17

	)

23383 
	#IOMUXC_GPR_GPR1_ENET2_TX_CLK_DIR_MASK
 0x40000u

	)

23384 
	#IOMUXC_GPR_GPR1_ENET2_TX_CLK_DIR_SHIFT
 18

	)

23385 
	#IOMUXC_GPR_GPR1_VADC_SW_RST_MASK
 0x80000u

	)

23386 
	#IOMUXC_GPR_GPR1_VADC_SW_RST_SHIFT
 19

	)

23387 
	#IOMUXC_GPR_GPR1_VDEC_SW_RST_MASK
 0x100000u

	)

23388 
	#IOMUXC_GPR_GPR1_VDEC_SW_RST_SHIFT
 20

	)

23389 
	#IOMUXC_GPR_GPR1_EXC_MON_MASK
 0x400000u

	)

23390 
	#IOMUXC_GPR_GPR1_EXC_MON_SHIFT
 22

	)

23391 
	#IOMUXC_GPR_GPR1_TZASC1_BOOT_LOCK_MASK
 0x800000u

	)

23392 
	#IOMUXC_GPR_GPR1_TZASC1_BOOT_LOCK_SHIFT
 23

	)

23393 
	#IOMUXC_GPR_GPR1_ARMA9_CLK_APB_DBG_EN_MASK
 0x1000000u

	)

23394 
	#IOMUXC_GPR_GPR1_ARMA9_CLK_APB_DBG_EN_SHIFT
 24

	)

23395 
	#IOMUXC_GPR_GPR1_ARMA9_CLK_ATB_EN_MASK
 0x2000000u

	)

23396 
	#IOMUXC_GPR_GPR1_ARMA9_CLK_ATB_EN_SHIFT
 25

	)

23397 
	#IOMUXC_GPR_GPR1_ARMA9_CLK_AHB_EN_MASK
 0x4000000u

	)

23398 
	#IOMUXC_GPR_GPR1_ARMA9_CLK_AHB_EN_SHIFT
 26

	)

23399 
	#IOMUXC_GPR_GPR1_ARMA9_IPG_CLK_EN_MASK
 0x8000000u

	)

23400 
	#IOMUXC_GPR_GPR1_ARMA9_IPG_CLK_EN_SHIFT
 27

	)

23402 
	#IOMUXC_GPR_GPR2_PXP_MEM_EN_POWERSAVING_MASK
 0x1u

	)

23403 
	#IOMUXC_GPR_GPR2_PXP_MEM_EN_POWERSAVING_SHIFT
 0

	)

23404 
	#IOMUXC_GPR_GPR2_PXP_MEM_SHUTDOWN_MASK
 0x2u

	)

23405 
	#IOMUXC_GPR_GPR2_PXP_MEM_SHUTDOWN_SHIFT
 1

	)

23406 
	#IOMUXC_GPR_GPR2_PXP_MEM_DEEPSLEEP_MASK
 0x4u

	)

23407 
	#IOMUXC_GPR_GPR2_PXP_MEM_DEEPSLEEP_SHIFT
 2

	)

23408 
	#IOMUXC_GPR_GPR2_PXP_MEM_LIGHTSLEEP_MASK
 0x8u

	)

23409 
	#IOMUXC_GPR_GPR2_PXP_MEM_LIGHTSLEEP_SHIFT
 3

	)

23410 
	#IOMUXC_GPR_GPR2_LCDIF1_MEM_EN_POWERSAVING_MASK
 0x10u

	)

23411 
	#IOMUXC_GPR_GPR2_LCDIF1_MEM_EN_POWERSAVING_SHIFT
 4

	)

23412 
	#IOMUXC_GPR_GPR2_LCDIF1_MEM_SHUTDOWN_MASK
 0x20u

	)

23413 
	#IOMUXC_GPR_GPR2_LCDIF1_MEM_SHUTDOWN_SHIFT
 5

	)

23414 
	#IOMUXC_GPR_GPR2_LCDIF1_MEM_DEEPSLEEP_MASK
 0x40u

	)

23415 
	#IOMUXC_GPR_GPR2_LCDIF1_MEM_DEEPSLEEP_SHIFT
 6

	)

23416 
	#IOMUXC_GPR_GPR2_LCDIF1_MEM_LIGHTSLEEP_MASK
 0x80u

	)

23417 
	#IOMUXC_GPR_GPR2_LCDIF1_MEM_LIGHTSLEEP_SHIFT
 7

	)

23418 
	#IOMUXC_GPR_GPR2_LCDIF2_MEM_EN_POWERSAVING_MASK
 0x100u

	)

23419 
	#IOMUXC_GPR_GPR2_LCDIF2_MEM_EN_POWERSAVING_SHIFT
 8

	)

23420 
	#IOMUXC_GPR_GPR2_LCDIF2_MEM_SHUTDOWN_MASK
 0x200u

	)

23421 
	#IOMUXC_GPR_GPR2_LCDIF2_MEM_SHUTDOWN_SHIFT
 9

	)

23422 
	#IOMUXC_GPR_GPR2_LCDIF2_MEM_DEEPSLEEP_MASK
 0x400u

	)

23423 
	#IOMUXC_GPR_GPR2_LCDIF2_MEM_DEEPSLEEP_SHIFT
 10

	)

23424 
	#IOMUXC_GPR_GPR2_LCDIF2_MEM_LIGHTSLEEP_MASK
 0x800u

	)

23425 
	#IOMUXC_GPR_GPR2_LCDIF2_MEM_LIGHTSLEEP_SHIFT
 11

	)

23426 
	#IOMUXC_GPR_GPR2_L2_MEM_EN_POWERSAVING_MASK
 0x1000u

	)

23427 
	#IOMUXC_GPR_GPR2_L2_MEM_EN_POWERSAVING_SHIFT
 12

	)

23428 
	#IOMUXC_GPR_GPR2_L2_MEM_SHUTDOWN_MASK
 0x2000u

	)

23429 
	#IOMUXC_GPR_GPR2_L2_MEM_SHUTDOWN_SHIFT
 13

	)

23430 
	#IOMUXC_GPR_GPR2_L2_MEM_DEEPSLEEP_MASK
 0x4000u

	)

23431 
	#IOMUXC_GPR_GPR2_L2_MEM_DEEPSLEEP_SHIFT
 14

	)

23432 
	#IOMUXC_GPR_GPR2_L2_MEM_LIGHTSLEEP_MASK
 0x8000u

	)

23433 
	#IOMUXC_GPR_GPR2_L2_MEM_LIGHTSLEEP_SHIFT
 15

	)

23434 
	#IOMUXC_GPR_GPR2_DRAM_RESET_BYPASS_MASK
 0x8000000u

	)

23435 
	#IOMUXC_GPR_GPR2_DRAM_RESET_BYPASS_SHIFT
 27

	)

23436 
	#IOMUXC_GPR_GPR2_DRAM_RESET_MASK
 0x10000000u

	)

23437 
	#IOMUXC_GPR_GPR2_DRAM_RESET_SHIFT
 28

	)

23438 
	#IOMUXC_GPR_GPR2_DRAM_CKE0_MASK
 0x20000000u

	)

23439 
	#IOMUXC_GPR_GPR2_DRAM_CKE0_SHIFT
 29

	)

23440 
	#IOMUXC_GPR_GPR2_DRAM_CKE1_MASK
 0x40000000u

	)

23441 
	#IOMUXC_GPR_GPR2_DRAM_CKE1_SHIFT
 30

	)

23442 
	#IOMUXC_GPR_GPR2_DRAM_CKE_BYPASS_MASK
 0x80000000u

	)

23443 
	#IOMUXC_GPR_GPR2_DRAM_CKE_BYPASS_SHIFT
 31

	)

23445 
	#IOMUXC_GPR_GPR3_OCRAM_CTL_MASK
 0xFu

	)

23446 
	#IOMUXC_GPR_GPR3_OCRAM_CTL_SHIFT
 0

	)

23447 
	#IOMUXC_GPR_GPR3_OCRAM_CTL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR3_OCRAM_CTL_SHIFT
))&
IOMUXC_GPR_GPR3_OCRAM_CTL_MASK
)

	)

23448 
	#IOMUXC_GPR_GPR3_OCRAM_S_CTL_MASK
 0xF0u

	)

23449 
	#IOMUXC_GPR_GPR3_OCRAM_S_CTL_SHIFT
 4

	)

23450 
	#IOMUXC_GPR_GPR3_OCRAM_S_CTL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR3_OCRAM_S_CTL_SHIFT
))&
IOMUXC_GPR_GPR3_OCRAM_S_CTL_MASK
)

	)

23451 
	#IOMUXC_GPR_GPR3_OCRAM_L2_CTL_MASK
 0xF00u

	)

23452 
	#IOMUXC_GPR_GPR3_OCRAM_L2_CTL_SHIFT
 8

	)

23453 
	#IOMUXC_GPR_GPR3_OCRAM_L2_CTL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR3_OCRAM_L2_CTL_SHIFT
))&
IOMUXC_GPR_GPR3_OCRAM_L2_CTL_MASK
)

	)

23454 
	#IOMUXC_GPR_GPR3_CORE_DBG_ACK_EN_MASK
 0x2000u

	)

23455 
	#IOMUXC_GPR_GPR3_CORE_DBG_ACK_EN_SHIFT
 13

	)

23456 
	#IOMUXC_GPR_GPR3_OCRAM_STATUS_MASK
 0xF0000u

	)

23457 
	#IOMUXC_GPR_GPR3_OCRAM_STATUS_SHIFT
 16

	)

23458 
	#IOMUXC_GPR_GPR3_OCRAM_STATUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR3_OCRAM_STATUS_SHIFT
))&
IOMUXC_GPR_GPR3_OCRAM_STATUS_MASK
)

	)

23459 
	#IOMUXC_GPR_GPR3_OCRAM_S_STATUS_MASK
 0xF00000u

	)

23460 
	#IOMUXC_GPR_GPR3_OCRAM_S_STATUS_SHIFT
 20

	)

23461 
	#IOMUXC_GPR_GPR3_OCRAM_S_STATUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR3_OCRAM_S_STATUS_SHIFT
))&
IOMUXC_GPR_GPR3_OCRAM_S_STATUS_MASK
)

	)

23462 
	#IOMUXC_GPR_GPR3_OCRAM_L2_STATUS_MASK
 0xF000000u

	)

23463 
	#IOMUXC_GPR_GPR3_OCRAM_L2_STATUS_SHIFT
 24

	)

23464 
	#IOMUXC_GPR_GPR3_OCRAM_L2_STATUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR3_OCRAM_L2_STATUS_SHIFT
))&
IOMUXC_GPR_GPR3_OCRAM_L2_STATUS_MASK
)

	)

23466 
	#IOMUXC_GPR_GPR4_SDMA_STOP_REQ_MASK
 0x1u

	)

23467 
	#IOMUXC_GPR_GPR4_SDMA_STOP_REQ_SHIFT
 0

	)

23468 
	#IOMUXC_GPR_GPR4_CAN1_STOP_REQ_MASK
 0x2u

	)

23469 
	#IOMUXC_GPR_GPR4_CAN1_STOP_REQ_SHIFT
 1

	)

23470 
	#IOMUXC_GPR_GPR4_CAN2_STOP_REQ_MASK
 0x4u

	)

23471 
	#IOMUXC_GPR_GPR4_CAN2_STOP_REQ_SHIFT
 2

	)

23472 
	#IOMUXC_GPR_GPR4_ENET1_STOP_REQ_MASK
 0x8u

	)

23473 
	#IOMUXC_GPR_GPR4_ENET1_STOP_REQ_SHIFT
 3

	)

23474 
	#IOMUXC_GPR_GPR4_ENET2_STOP_REQ_MASK
 0x10u

	)

23475 
	#IOMUXC_GPR_GPR4_ENET2_STOP_REQ_SHIFT
 4

	)

23476 
	#IOMUXC_GPR_GPR4_SAI1_STOP_REQ_MASK
 0x20u

	)

23477 
	#IOMUXC_GPR_GPR4_SAI1_STOP_REQ_SHIFT
 5

	)

23478 
	#IOMUXC_GPR_GPR4_SAI2_STOP_REQ_MASK
 0x40u

	)

23479 
	#IOMUXC_GPR_GPR4_SAI2_STOP_REQ_SHIFT
 6

	)

23480 
	#IOMUXC_GPR_GPR4_SDMA_STOP_ACK_MASK
 0x10000u

	)

23481 
	#IOMUXC_GPR_GPR4_SDMA_STOP_ACK_SHIFT
 16

	)

23482 
	#IOMUXC_GPR_GPR4_CAN1_STOP_ACK_MASK
 0x20000u

	)

23483 
	#IOMUXC_GPR_GPR4_CAN1_STOP_ACK_SHIFT
 17

	)

23484 
	#IOMUXC_GPR_GPR4_CAN2_STOP_ACK_MASK
 0x40000u

	)

23485 
	#IOMUXC_GPR_GPR4_CAN2_STOP_ACK_SHIFT
 18

	)

23486 
	#IOMUXC_GPR_GPR4_ENET1_STOP_ACK_MASK
 0x80000u

	)

23487 
	#IOMUXC_GPR_GPR4_ENET1_STOP_ACK_SHIFT
 19

	)

23488 
	#IOMUXC_GPR_GPR4_ENET2_STOP_ACK_MASK
 0x100000u

	)

23489 
	#IOMUXC_GPR_GPR4_ENET2_STOP_ACK_SHIFT
 20

	)

23490 
	#IOMUXC_GPR_GPR4_SAI1_STOP_ACK_MASK
 0x200000u

	)

23491 
	#IOMUXC_GPR_GPR4_SAI1_STOP_ACK_SHIFT
 21

	)

23492 
	#IOMUXC_GPR_GPR4_SAI2_STOP_ACK_MASK
 0x400000u

	)

23493 
	#IOMUXC_GPR_GPR4_SAI2_STOP_ACK_SHIFT
 22

	)

23494 
	#IOMUXC_GPR_GPR4_L2_CLK_STOP_MASK
 0x20000000u

	)

23495 
	#IOMUXC_GPR_GPR4_L2_CLK_STOP_SHIFT
 29

	)

23496 
	#IOMUXC_GPR_GPR4_ARM_WFI_MASK
 0x40000000u

	)

23497 
	#IOMUXC_GPR_GPR4_ARM_WFI_SHIFT
 30

	)

23498 
	#IOMUXC_GPR_GPR4_ARM_WFE_MASK
 0x80000000u

	)

23499 
	#IOMUXC_GPR_GPR4_ARM_WFE_SHIFT
 31

	)

23501 
	#IOMUXC_GPR_GPR5_SVADC_TEST_GPR1_MASK
 0x1u

	)

23502 
	#IOMUXC_GPR_GPR5_SVADC_TEST_GPR1_SHIFT
 0

	)

23503 
	#IOMUXC_GPR_GPR5_DISP_MUX_DCIC1_CTRL_MASK
 0x2u

	)

23504 
	#IOMUXC_GPR_GPR5_DISP_MUX_DCIC1_CTRL_SHIFT
 1

	)

23505 
	#IOMUXC_GPR_GPR5_DISP_MUX_DCIC2_CTRL_MASK
 0x4u

	)

23506 
	#IOMUXC_GPR_GPR5_DISP_MUX_DCIC2_CTRL_SHIFT
 2

	)

23507 
	#IOMUXC_GPR_GPR5_DISP_MUX_LDB_CTRL_MASK
 0x8u

	)

23508 
	#IOMUXC_GPR_GPR5_DISP_MUX_LDB_CTRL_SHIFT
 3

	)

23509 
	#IOMUXC_GPR_GPR5_CSI1_MUX_CTRL_MASK
 0x30u

	)

23510 
	#IOMUXC_GPR_GPR5_CSI1_MUX_CTRL_SHIFT
 4

	)

23511 
	#IOMUXC_GPR_GPR5_CSI1_MUX_CTRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR5_CSI1_MUX_CTRL_SHIFT
))&
IOMUXC_GPR_GPR5_CSI1_MUX_CTRL_MASK
)

	)

23512 
	#IOMUXC_GPR_GPR5_WDOG1_MASK_MASK
 0x40u

	)

23513 
	#IOMUXC_GPR_GPR5_WDOG1_MASK_SHIFT
 6

	)

23514 
	#IOMUXC_GPR_GPR5_WDOG2_MASK_MASK
 0x80u

	)

23515 
	#IOMUXC_GPR_GPR5_WDOG2_MASK_SHIFT
 7

	)

23516 
	#IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_CSI1_MASK
 0x300u

	)

23517 
	#IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_CSI1_SHIFT
 8

	)

23518 
	#IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_CSI1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_CSI1_SHIFT
))&
IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_CSI1_MASK
)

	)

23519 
	#IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_CSI2_MASK
 0xC00u

	)

23520 
	#IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_CSI2_SHIFT
 10

	)

23521 
	#IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_CSI2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_CSI2_SHIFT
))&
IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_CSI2_MASK
)

	)

23522 
	#IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_LCDIF1_MASK
 0x3000u

	)

23523 
	#IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_LCDIF1_SHIFT
 12

	)

23524 
	#IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_LCDIF1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_LCDIF1_SHIFT
))&
IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_LCDIF1_MASK
)

	)

23525 
	#IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_LCDIF2_MASK
 0xC000u

	)

23526 
	#IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_LCDIF2_SHIFT
 14

	)

23527 
	#IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_LCDIF2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_LCDIF2_SHIFT
))&
IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_LCDIF2_MASK
)

	)

23528 
	#IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_PXP_MASK
 0x30000u

	)

23529 
	#IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_PXP_SHIFT
 16

	)

23530 
	#IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_PXP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_PXP_SHIFT
))&
IOMUXC_GPR_GPR5_LCDIF_HANDSHAKE_PXP_MASK
)

	)

23531 
	#IOMUXC_GPR_GPR5_PCIE_PERST_MASK
 0x40000u

	)

23532 
	#IOMUXC_GPR_GPR5_PCIE_PERST_SHIFT
 18

	)

23533 
	#IOMUXC_GPR_GPR5_PCIE_BTNRST_MASK
 0x80000u

	)

23534 
	#IOMUXC_GPR_GPR5_PCIE_BTNRST_SHIFT
 19

	)

23535 
	#IOMUXC_GPR_GPR5_WDOG3_MASK_MASK
 0x100000u

	)

23536 
	#IOMUXC_GPR_GPR5_WDOG3_MASK_SHIFT
 20

	)

23537 
	#IOMUXC_GPR_GPR5_LCDIF1_CSI_VSYNC_SEL_MASK
 0x200000u

	)

23538 
	#IOMUXC_GPR_GPR5_LCDIF1_CSI_VSYNC_SEL_SHIFT
 21

	)

23539 
	#IOMUXC_GPR_GPR5_LCDIF2_CSI_VSYNC_SEL_MASK
 0x400000u

	)

23540 
	#IOMUXC_GPR_GPR5_LCDIF2_CSI_VSYNC_SEL_SHIFT
 22

	)

23541 
	#IOMUXC_GPR_GPR5_VADC_TEST_GPR3_MASK
 0x800000u

	)

23542 
	#IOMUXC_GPR_GPR5_VADC_TEST_GPR3_SHIFT
 23

	)

23543 
	#IOMUXC_GPR_GPR5_VADC_TEST_6SX_GPR5_MASK
 0x1000000u

	)

23544 
	#IOMUXC_GPR_GPR5_VADC_TEST_6SX_GPR5_SHIFT
 24

	)

23545 
	#IOMUXC_GPR_GPR5_VADC_TEST_GPR2_MASK
 0x2000000u

	)

23546 
	#IOMUXC_GPR_GPR5_VADC_TEST_GPR2_SHIFT
 25

	)

23547 
	#IOMUXC_GPR_GPR5_VADC_TO_CSI_CAPTURE_EN_MASK
 0x4000000u

	)

23548 
	#IOMUXC_GPR_GPR5_VADC_TO_CSI_CAPTURE_EN_SHIFT
 26

	)

23549 
	#IOMUXC_GPR_GPR5_CSI2_MUX_CTRL_MASK
 0x18000000u

	)

23550 
	#IOMUXC_GPR_GPR5_CSI2_MUX_CTRL_SHIFT
 27

	)

23551 
	#IOMUXC_GPR_GPR5_CSI2_MUX_CTRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR5_CSI2_MUX_CTRL_SHIFT
))&
IOMUXC_GPR_GPR5_CSI2_MUX_CTRL_MASK
)

	)

23552 
	#IOMUXC_GPR_GPR5_VREF_1M_CLK_GPT_MASK
 0x20000000u

	)

23553 
	#IOMUXC_GPR_GPR5_VREF_1M_CLK_GPT_SHIFT
 29

	)

23554 
	#IOMUXC_GPR_GPR5_REF_1M_CLK_EPIT1_MASK
 0x40000000u

	)

23555 
	#IOMUXC_GPR_GPR5_REF_1M_CLK_EPIT1_SHIFT
 30

	)

23556 
	#IOMUXC_GPR_GPR5_REF_1M_CLK_EPIT2_MASK
 0x80000000u

	)

23557 
	#IOMUXC_GPR_GPR5_REF_1M_CLK_EPIT2_SHIFT
 31

	)

23559 
	#IOMUXC_GPR_GPR6_CH0_MODE_MASK
 0x3u

	)

23560 
	#IOMUXC_GPR_GPR6_CH0_MODE_SHIFT
 0

	)

23561 
	#IOMUXC_GPR_GPR6_CH0_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR6_CH0_MODE_SHIFT
))&
IOMUXC_GPR_GPR6_CH0_MODE_MASK
)

	)

23562 
	#IOMUXC_GPR_GPR6_DATA_WIDTH_CH0_MASK
 0x20u

	)

23563 
	#IOMUXC_GPR_GPR6_DATA_WIDTH_CH0_SHIFT
 5

	)

23564 
	#IOMUXC_GPR_GPR6_BIT_MAPPING_CH0_MASK
 0x40u

	)

23565 
	#IOMUXC_GPR_GPR6_BIT_MAPPING_CH0_SHIFT
 6

	)

23566 
	#IOMUXC_GPR_GPR6_LCDIF_VS_POLARITY_MASK
 0x200u

	)

23567 
	#IOMUXC_GPR_GPR6_LCDIF_VS_POLARITY_SHIFT
 9

	)

23568 
	#IOMUXC_GPR_GPR6_LVDS_CLK_SHIFT_MASK
 0x70000u

	)

23569 
	#IOMUXC_GPR_GPR6_LVDS_CLK_SHIFT_SHIFT
 16

	)

23570 
	#IOMUXC_GPR_GPR6_LVDS_CLK_SHIFT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR6_LVDS_CLK_SHIFT_SHIFT
))&
IOMUXC_GPR_GPR6_LVDS_CLK_SHIFT_MASK
)

	)

23571 
	#IOMUXC_GPR_GPR6_COUNTER_RESET_VAL_MASK
 0x300000u

	)

23572 
	#IOMUXC_GPR_GPR6_COUNTER_RESET_VAL_SHIFT
 20

	)

23573 
	#IOMUXC_GPR_GPR6_COUNTER_RESET_VAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR6_COUNTER_RESET_VAL_SHIFT
))&
IOMUXC_GPR_GPR6_COUNTER_RESET_VAL_MASK
)

	)

23575 
	#IOMUXC_GPR_GPR7_ASRC_SEL_ESAI_RX_MASK
 0x3u

	)

23576 
	#IOMUXC_GPR_GPR7_ASRC_SEL_ESAI_RX_SHIFT
 0

	)

23577 
	#IOMUXC_GPR_GPR7_ASRC_SEL_ESAI_RX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR7_ASRC_SEL_ESAI_RX_SHIFT
))&
IOMUXC_GPR_GPR7_ASRC_SEL_ESAI_RX_MASK
)

	)

23578 
	#IOMUXC_GPR_GPR7_ASRC_SEL_ESAI_TX_MASK
 0xCu

	)

23579 
	#IOMUXC_GPR_GPR7_ASRC_SEL_ESAI_TX_SHIFT
 2

	)

23580 
	#IOMUXC_GPR_GPR7_ASRC_SEL_ESAI_TX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR7_ASRC_SEL_ESAI_TX_SHIFT
))&
IOMUXC_GPR_GPR7_ASRC_SEL_ESAI_TX_MASK
)

	)

23581 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SSI1_RX_MASK
 0x30u

	)

23582 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SSI1_RX_SHIFT
 4

	)

23583 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SSI1_RX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR7_ASRC_SEL_SSI1_RX_SHIFT
))&
IOMUXC_GPR_GPR7_ASRC_SEL_SSI1_RX_MASK
)

	)

23584 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SSI1_TX_MASK
 0xC0u

	)

23585 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SSI1_TX_SHIFT
 6

	)

23586 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SSI1_TX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR7_ASRC_SEL_SSI1_TX_SHIFT
))&
IOMUXC_GPR_GPR7_ASRC_SEL_SSI1_TX_MASK
)

	)

23587 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SSI2_RX_MASK
 0x300u

	)

23588 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SSI2_RX_SHIFT
 8

	)

23589 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SSI2_RX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR7_ASRC_SEL_SSI2_RX_SHIFT
))&
IOMUXC_GPR_GPR7_ASRC_SEL_SSI2_RX_MASK
)

	)

23590 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SSI2_TX_MASK
 0xC00u

	)

23591 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SSI2_TX_SHIFT
 10

	)

23592 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SSI2_TX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR7_ASRC_SEL_SSI2_TX_SHIFT
))&
IOMUXC_GPR_GPR7_ASRC_SEL_SSI2_TX_MASK
)

	)

23593 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SSI3_RX_MASK
 0x3000u

	)

23594 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SSI3_RX_SHIFT
 12

	)

23595 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SSI3_RX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR7_ASRC_SEL_SSI3_RX_SHIFT
))&
IOMUXC_GPR_GPR7_ASRC_SEL_SSI3_RX_MASK
)

	)

23596 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SSI3_TX_MASK
 0xC000u

	)

23597 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SSI3_TX_SHIFT
 14

	)

23598 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SSI3_TX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR7_ASRC_SEL_SSI3_TX_SHIFT
))&
IOMUXC_GPR_GPR7_ASRC_SEL_SSI3_TX_MASK
)

	)

23599 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SPDIF_TX_MASK
 0x30000u

	)

23600 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SPDIF_TX_SHIFT
 16

	)

23601 
	#IOMUXC_GPR_GPR7_ASRC_SEL_SPDIF_TX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR7_ASRC_SEL_SPDIF_TX_SHIFT
))&
IOMUXC_GPR_GPR7_ASRC_SEL_SPDIF_TX_MASK
)

	)

23602 
	#IOMUXC_GPR_GPR7_ASRC_SEL_CLK_1_MASK
 0x40000u

	)

23603 
	#IOMUXC_GPR_GPR7_ASRC_SEL_CLK_1_SHIFT
 18

	)

23604 
	#IOMUXC_GPR_GPR7_ASRC_SEL_CLK_4_MASK
 0x80000u

	)

23605 
	#IOMUXC_GPR_GPR7_ASRC_SEL_CLK_4_SHIFT
 19

	)

23606 
	#IOMUXC_GPR_GPR7_ASRC_SEL_CLK_9_MASK
 0x100000u

	)

23607 
	#IOMUXC_GPR_GPR7_ASRC_SEL_CLK_9_SHIFT
 20

	)

23608 
	#IOMUXC_GPR_GPR7_ASRC_SEL_CLK_C_MASK
 0x200000u

	)

23609 
	#IOMUXC_GPR_GPR7_ASRC_SEL_CLK_C_SHIFT
 21

	)

23611 
	#IOMUXC_GPR_GPR8_PCS_TX_DEEMPH_GEN1_MASK
 0x3Fu

	)

23612 
	#IOMUXC_GPR_GPR8_PCS_TX_DEEMPH_GEN1_SHIFT
 0

	)

23613 
	#IOMUXC_GPR_GPR8_PCS_TX_DEEMPH_GEN1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR8_PCS_TX_DEEMPH_GEN1_SHIFT
))&
IOMUXC_GPR_GPR8_PCS_TX_DEEMPH_GEN1_MASK
)

	)

23614 
	#IOMUXC_GPR_GPR8_PCS_TX_DEEMPH_GEN2_3P5DB_MASK
 0xFC0u

	)

23615 
	#IOMUXC_GPR_GPR8_PCS_TX_DEEMPH_GEN2_3P5DB_SHIFT
 6

	)

23616 
	#IOMUXC_GPR_GPR8_PCS_TX_DEEMPH_GEN2_3P5DB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR8_PCS_TX_DEEMPH_GEN2_3P5DB_SHIFT
))&
IOMUXC_GPR_GPR8_PCS_TX_DEEMPH_GEN2_3P5DB_MASK
)

	)

23617 
	#IOMUXC_GPR_GPR8_PCS_TX_DEEMPH_GEN2_6DB_MASK
 0x3F000u

	)

23618 
	#IOMUXC_GPR_GPR8_PCS_TX_DEEMPH_GEN2_6DB_SHIFT
 12

	)

23619 
	#IOMUXC_GPR_GPR8_PCS_TX_DEEMPH_GEN2_6DB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR8_PCS_TX_DEEMPH_GEN2_6DB_SHIFT
))&
IOMUXC_GPR_GPR8_PCS_TX_DEEMPH_GEN2_6DB_MASK
)

	)

23620 
	#IOMUXC_GPR_GPR8_PCS_TX_SWING_FULL_MASK
 0x1FC0000u

	)

23621 
	#IOMUXC_GPR_GPR8_PCS_TX_SWING_FULL_SHIFT
 18

	)

23622 
	#IOMUXC_GPR_GPR8_PCS_TX_SWING_FULL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR8_PCS_TX_SWING_FULL_SHIFT
))&
IOMUXC_GPR_GPR8_PCS_TX_SWING_FULL_MASK
)

	)

23623 
	#IOMUXC_GPR_GPR8_PCS_TX_SWING_LOW_MASK
 0xFE000000u

	)

23624 
	#IOMUXC_GPR_GPR8_PCS_TX_SWING_LOW_SHIFT
 25

	)

23625 
	#IOMUXC_GPR_GPR8_PCS_TX_SWING_LOW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR8_PCS_TX_SWING_LOW_SHIFT
))&
IOMUXC_GPR_GPR8_PCS_TX_SWING_LOW_MASK
)

	)

23627 
	#IOMUXC_GPR_GPR9_TZASC1_BYP_MASK
 0x1u

	)

23628 
	#IOMUXC_GPR_GPR9_TZASC1_BYP_SHIFT
 0

	)

23630 
	#IOMUXC_GPR_GPR10_DBG_EN_MASK
 0x1u

	)

23631 
	#IOMUXC_GPR_GPR10_DBG_EN_SHIFT
 0

	)

23632 
	#IOMUXC_GPR_GPR10_DBG_CLK_EN_MASK
 0x2u

	)

23633 
	#IOMUXC_GPR_GPR10_DBG_CLK_EN_SHIFT
 1

	)

23634 
	#IOMUXC_GPR_GPR10_SEC_ERR_RESP_MASK
 0x4u

	)

23635 
	#IOMUXC_GPR_GPR10_SEC_ERR_RESP_SHIFT
 2

	)

23636 
	#IOMUXC_GPR_GPR10_OCRAM_L2_TZ_EN_MASK
 0x8u

	)

23637 
	#IOMUXC_GPR_GPR10_OCRAM_L2_TZ_EN_SHIFT
 3

	)

23638 
	#IOMUXC_GPR_GPR10_OCRAM_L2_TZ_ADDR_MASK
 0x3F0u

	)

23639 
	#IOMUXC_GPR_GPR10_OCRAM_L2_TZ_ADDR_SHIFT
 4

	)

23640 
	#IOMUXC_GPR_GPR10_OCRAM_L2_TZ_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR10_OCRAM_L2_TZ_ADDR_SHIFT
))&
IOMUXC_GPR_GPR10_OCRAM_L2_TZ_ADDR_MASK
)

	)

23641 
	#IOMUXC_GPR_GPR10_OCRAM_TZ_EN_MASK
 0x400u

	)

23642 
	#IOMUXC_GPR_GPR10_OCRAM_TZ_EN_SHIFT
 10

	)

23643 
	#IOMUXC_GPR_GPR10_OCRAM_TZ_ADDR_MASK
 0xF800u

	)

23644 
	#IOMUXC_GPR_GPR10_OCRAM_TZ_ADDR_SHIFT
 11

	)

23645 
	#IOMUXC_GPR_GPR10_OCRAM_TZ_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR10_OCRAM_TZ_ADDR_SHIFT
))&
IOMUXC_GPR_GPR10_OCRAM_TZ_ADDR_MASK
)

	)

23647 
	#IOMUXC_GPR_GPR11_OCRAM_L2_EN_MASK
 0x2u

	)

23648 
	#IOMUXC_GPR_GPR11_OCRAM_L2_EN_SHIFT
 1

	)

23649 
	#IOMUXC_GPR_GPR11_OCRAM_S_TZ_EN_MASK
 0x400u

	)

23650 
	#IOMUXC_GPR_GPR11_OCRAM_S_TZ_EN_SHIFT
 10

	)

23651 
	#IOMUXC_GPR_GPR11_OCRAM_S_TZ_ADDR_MASK
 0x1800u

	)

23652 
	#IOMUXC_GPR_GPR11_OCRAM_S_TZ_ADDR_SHIFT
 11

	)

23653 
	#IOMUXC_GPR_GPR11_OCRAM_S_TZ_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR11_OCRAM_S_TZ_ADDR_SHIFT
))&
IOMUXC_GPR_GPR11_OCRAM_S_TZ_ADDR_MASK
)

	)

23655 
	#IOMUXC_GPR_GPR12_PCIE_RX0_EQ_MASK
 0x7u

	)

23656 
	#IOMUXC_GPR_GPR12_PCIE_RX0_EQ_SHIFT
 0

	)

23657 
	#IOMUXC_GPR_GPR12_PCIE_RX0_EQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR12_PCIE_RX0_EQ_SHIFT
))&
IOMUXC_GPR_GPR12_PCIE_RX0_EQ_MASK
)

	)

23658 
	#IOMUXC_GPR_GPR12_LOS_LEVEL_MASK
 0x1F0u

	)

23659 
	#IOMUXC_GPR_GPR12_LOS_LEVEL_SHIFT
 4

	)

23660 
	#IOMUXC_GPR_GPR12_LOS_LEVEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR12_LOS_LEVEL_SHIFT
))&
IOMUXC_GPR_GPR12_LOS_LEVEL_MASK
)

	)

23661 
	#IOMUXC_GPR_GPR12_APPS_PM_XMT_PME_MASK
 0x200u

	)

23662 
	#IOMUXC_GPR_GPR12_APPS_PM_XMT_PME_SHIFT
 9

	)

23663 
	#IOMUXC_GPR_GPR12_APP_LTSSM_ENABLE_MASK
 0x400u

	)

23664 
	#IOMUXC_GPR_GPR12_APP_LTSSM_ENABLE_SHIFT
 10

	)

23665 
	#IOMUXC_GPR_GPR12_APP_INIT_RST_MASK
 0x800u

	)

23666 
	#IOMUXC_GPR_GPR12_APP_INIT_RST_SHIFT
 11

	)

23667 
	#IOMUXC_GPR_GPR12_DEVICE_TYPE_MASK
 0xF000u

	)

23668 
	#IOMUXC_GPR_GPR12_DEVICE_TYPE_SHIFT
 12

	)

23669 
	#IOMUXC_GPR_GPR12_DEVICE_TYPE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR12_DEVICE_TYPE_SHIFT
))&
IOMUXC_GPR_GPR12_DEVICE_TYPE_MASK
)

	)

23670 
	#IOMUXC_GPR_GPR12_APPS_PM_XMT_TURNOFF_MASK
 0x10000u

	)

23671 
	#IOMUXC_GPR_GPR12_APPS_PM_XMT_TURNOFF_SHIFT
 16

	)

23672 
	#IOMUXC_GPR_GPR12_DIAG_STATUS_BUS_SELECT_MASK
 0x1E0000u

	)

23673 
	#IOMUXC_GPR_GPR12_DIAG_STATUS_BUS_SELECT_SHIFT
 17

	)

23674 
	#IOMUXC_GPR_GPR12_DIAG_STATUS_BUS_SELECT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR12_DIAG_STATUS_BUS_SELECT_SHIFT
))&
IOMUXC_GPR_GPR12_DIAG_STATUS_BUS_SELECT_MASK
)

	)

23675 
	#IOMUXC_GPR_GPR12_PCIe_CTL_7_MASK
 0xE00000u

	)

23676 
	#IOMUXC_GPR_GPR12_PCIe_CTL_7_SHIFT
 21

	)

23677 
	#IOMUXC_GPR_GPR12_PCIe_CTL_7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
IOMUXC_GPR_GPR12_PCIe_CTL_7_SHIFT
))&
IOMUXC_GPR_GPR12_PCIe_CTL_7_MASK
)

	)

23678 
	#IOMUXC_GPR_GPR12_SYS_INT_MASK
 0x1000000u

	)

23679 
	#IOMUXC_GPR_GPR12_SYS_INT_SHIFT
 24

	)

23680 
	#IOMUXC_GPR_GPR12_APP_REQ_ENTR_L1_MASK
 0x2000000u

	)

23681 
	#IOMUXC_GPR_GPR12_APP_REQ_ENTR_L1_SHIFT
 25

	)

23682 
	#IOMUXC_GPR_GPR12_APP_REQ_EXIT_L1_MASK
 0x4000000u

	)

23683 
	#IOMUXC_GPR_GPR12_APP_REQ_EXIT_L1_SHIFT
 26

	)

23684 
	#IOMUXC_GPR_GPR12_GPR_PCIE_CTRL_CFG_L1_AUX_CLK_SWITCH_CORE_CLK_GATE_EN_MASK
 0x8000000u

	)

23685 
	#IOMUXC_GPR_GPR12_GPR_PCIE_CTRL_CFG_L1_AUX_CLK_SWITCH_CORE_CLK_GATE_EN_SHIFT
 27

	)

23686 
	#IOMUXC_GPR_GPR12_APP_READY_ENTR_L23_MASK
 0x10000000u

	)

23687 
	#IOMUXC_GPR_GPR12_APP_READY_ENTR_L23_SHIFT
 28

	)

23688 
	#IOMUXC_GPR_GPR12_APP_CLK_REQ_N_MASK
 0x20000000u

	)

23689 
	#IOMUXC_GPR_GPR12_APP_CLK_REQ_N_SHIFT
 29

	)

23690 
	#IOMUXC_GPR_GPR12_TEST_POWERDOWN_MASK
 0x40000000u

	)

23691 
	#IOMUXC_GPR_GPR12_TEST_POWERDOWN_SHIFT
 30

	)

23692 
	#IOMUXC_GPR_GPR12_GPR_PCIE_CTRL_CFG_L1_MAC_POWERDOWN_OVERRIDE_TO_P2_EN_MASK
 0x80000000u

	)

23693 
	#IOMUXC_GPR_GPR12_GPR_PCIE_CTRL_CFG_L1_MAC_POWERDOWN_OVERRIDE_TO_P2_EN_SHIFT
 31

	)

23695 
	#IOMUXC_GPR_GPR13_USDHC_RD_CACHE_VAL_MASK
 0x1u

	)

23696 
	#IOMUXC_GPR_GPR13_USDHC_RD_CACHE_VAL_SHIFT
 0

	)

23697 
	#IOMUXC_GPR_GPR13_USDHC_WR_CACHE_VAL_MASK
 0x2u

	)

23698 
	#IOMUXC_GPR_GPR13_USDHC_WR_CACHE_VAL_SHIFT
 1

	)

23699 
	#IOMUXC_GPR_GPR13_PXP_RD_CACHE_VAL_MASK
 0x4u

	)

23700 
	#IOMUXC_GPR_GPR13_PXP_RD_CACHE_VAL_SHIFT
 2

	)

23701 
	#IOMUXC_GPR_GPR13_PXP_WR_CACHE_VAL_MASK
 0x8u

	)

23702 
	#IOMUXC_GPR_GPR13_PXP_WR_CACHE_VAL_SHIFT
 3

	)

23703 
	#IOMUXC_GPR_GPR13_PCIE_RD_CACHE_VAL_MASK
 0x10u

	)

23704 
	#IOMUXC_GPR_GPR13_PCIE_RD_CACHE_VAL_SHIFT
 4

	)

23705 
	#IOMUXC_GPR_GPR13_PCIE_WR_CACHE_VAL_MASK
 0x20u

	)

23706 
	#IOMUXC_GPR_GPR13_PCIE_WR_CACHE_VAL_SHIFT
 5

	)

23707 
	#IOMUXC_GPR_GPR13_LCDIF1_RD_CACHE_VAL_MASK
 0x40u

	)

23708 
	#IOMUXC_GPR_GPR13_LCDIF1_RD_CACHE_VAL_SHIFT
 6

	)

23709 
	#IOMUXC_GPR_GPR13_LCDIF2_RD_CACHE_VAL_MASK
 0x80u

	)

23710 
	#IOMUXC_GPR_GPR13_LCDIF2_RD_CACHE_VAL_SHIFT
 7

	)

23711 
	#IOMUXC_GPR_GPR13_PXP_RD_CACHE_SEL_MASK
 0x100u

	)

23712 
	#IOMUXC_GPR_GPR13_PXP_RD_CACHE_SEL_SHIFT
 8

	)

23713 
	#IOMUXC_GPR_GPR13_PXP_WR_CACHE_SEL_MASK
 0x200u

	)

23714 
	#IOMUXC_GPR_GPR13_PXP_WR_CACHE_SEL_SHIFT
 9

	)

23715 
	#IOMUXC_GPR_GPR13_PCIE_RD_CACHE_SEL_MASK
 0x400u

	)

23716 
	#IOMUXC_GPR_GPR13_PCIE_RD_CACHE_SEL_SHIFT
 10

	)

23717 
	#IOMUXC_GPR_GPR13_PCIE_WR_CACHE_SEL_MASK
 0x800u

	)

23718 
	#IOMUXC_GPR_GPR13_PCIE_WR_CACHE_SEL_SHIFT
 11

	)

23719 
	#IOMUXC_GPR_GPR13_LCDIF1_RD_CACHE_SEL_MASK
 0x1000u

	)

23720 
	#IOMUXC_GPR_GPR13_LCDIF1_RD_CACHE_SEL_SHIFT
 12

	)

23721 
	#IOMUXC_GPR_GPR13_LCDIF2_RD_CACHE_SEL_MASK
 0x2000u

	)

23722 
	#IOMUXC_GPR_GPR13_LCDIF2_RD_CACHE_SEL_SHIFT
 13

	)

23723 
	#IOMUXC_GPR_GPR13_GPR_PCIE_CLK_RST_FIX_LNKRST_DISABLE_MASK
 0x4000u

	)

23724 
	#IOMUXC_GPR_GPR13_GPR_PCIE_CLK_RST_FIX_LNKRST_DISABLE_SHIFT
 14

	)

23725 
	#IOMUXC_GPR_GPR13_GPR_PCIE_CLK_RST_FIX_PERST_DISABLE_MASK
 0x8000u

	)

23726 
	#IOMUXC_GPR_GPR13_GPR_PCIE_CLK_RST_FIX_PERST_DISABLE_SHIFT
 15

	)

23734 
	#IOMUXC_GPR_BASE
 (0x420E4000u)

	)

23736 
	#IOMUXC_GPR
 ((
IOMUXC_GPR_Ty≥
 *)
IOMUXC_GPR_BASE
)

	)

23737 
	#IOMUXC_GPR_BASE_PTR
 (
IOMUXC_GPR
)

	)

23739 
	#IOMUXC_GPR_BASE_ADDRS
 { 
IOMUXC_GPR_BASE
 }

	)

23741 
	#IOMUXC_GPR_BASE_PTRS
 { 
IOMUXC_GPR
 }

	)

23754 
	#IOMUXC_GPR_GPR0
 
	`IOMUXC_GPR_GPR0_REG
(
IOMUXC_GPR_BASE_PTR
)

	)

23755 
	#IOMUXC_GPR_GPR1
 
	`IOMUXC_GPR_GPR1_REG
(
IOMUXC_GPR_BASE_PTR
)

	)

23756 
	#IOMUXC_GPR_GPR2
 
	`IOMUXC_GPR_GPR2_REG
(
IOMUXC_GPR_BASE_PTR
)

	)

23757 
	#IOMUXC_GPR_GPR3
 
	`IOMUXC_GPR_GPR3_REG
(
IOMUXC_GPR_BASE_PTR
)

	)

23758 
	#IOMUXC_GPR_GPR4
 
	`IOMUXC_GPR_GPR4_REG
(
IOMUXC_GPR_BASE_PTR
)

	)

23759 
	#IOMUXC_GPR_GPR5
 
	`IOMUXC_GPR_GPR5_REG
(
IOMUXC_GPR_BASE_PTR
)

	)

23760 
	#IOMUXC_GPR_GPR6
 
	`IOMUXC_GPR_GPR6_REG
(
IOMUXC_GPR_BASE_PTR
)

	)

23761 
	#IOMUXC_GPR_GPR7
 
	`IOMUXC_GPR_GPR7_REG
(
IOMUXC_GPR_BASE_PTR
)

	)

23762 
	#IOMUXC_GPR_GPR8
 
	`IOMUXC_GPR_GPR8_REG
(
IOMUXC_GPR_BASE_PTR
)

	)

23763 
	#IOMUXC_GPR_GPR9
 
	`IOMUXC_GPR_GPR9_REG
(
IOMUXC_GPR_BASE_PTR
)

	)

23764 
	#IOMUXC_GPR_GPR10
 
	`IOMUXC_GPR_GPR10_REG
(
IOMUXC_GPR_BASE_PTR
)

	)

23765 
	#IOMUXC_GPR_GPR11
 
	`IOMUXC_GPR_GPR11_REG
(
IOMUXC_GPR_BASE_PTR
)

	)

23766 
	#IOMUXC_GPR_GPR12
 
	`IOMUXC_GPR_GPR12_REG
(
IOMUXC_GPR_BASE_PTR
)

	)

23767 
	#IOMUXC_GPR_GPR13
 
	`IOMUXC_GPR_GPR13_REG
(
IOMUXC_GPR_BASE_PTR
)

	)

23788 
__IO
 
uöt16_t
 
	mKPCR
;

23789 
__IO
 
uöt16_t
 
	mKPSR
;

23790 
__IO
 
uöt16_t
 
	mKDDR
;

23791 
__IO
 
uöt16_t
 
	mKPDR
;

23792 } 
	tKPP_Ty≥
, *
	tKPP_MemM≠På
;

23804 
	#KPP_KPCR_REG
(
ba£
Ë((ba£)->
KPCR
)

	)

23805 
	#KPP_KPSR_REG
(
ba£
Ë((ba£)->
KPSR
)

	)

23806 
	#KPP_KDDR_REG
(
ba£
Ë((ba£)->
KDDR
)

	)

23807 
	#KPP_KPDR_REG
(
ba£
Ë((ba£)->
KPDR
)

	)

23823 
	#KPP_KPCR_KRE_MASK
 0xFFu

	)

23824 
	#KPP_KPCR_KRE_SHIFT
 0

	)

23825 
	#KPP_KPCR_KRE
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
KPP_KPCR_KRE_SHIFT
))&
KPP_KPCR_KRE_MASK
)

	)

23826 
	#KPP_KPCR_KCO_MASK
 0xFF00u

	)

23827 
	#KPP_KPCR_KCO_SHIFT
 8

	)

23828 
	#KPP_KPCR_KCO
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
KPP_KPCR_KCO_SHIFT
))&
KPP_KPCR_KCO_MASK
)

	)

23830 
	#KPP_KPSR_KPKD_MASK
 0x1u

	)

23831 
	#KPP_KPSR_KPKD_SHIFT
 0

	)

23832 
	#KPP_KPSR_KPKR_MASK
 0x2u

	)

23833 
	#KPP_KPSR_KPKR_SHIFT
 1

	)

23834 
	#KPP_KPSR_KDSC_MASK
 0x4u

	)

23835 
	#KPP_KPSR_KDSC_SHIFT
 2

	)

23836 
	#KPP_KPSR_KRSS_MASK
 0x8u

	)

23837 
	#KPP_KPSR_KRSS_SHIFT
 3

	)

23838 
	#KPP_KPSR_KDIE_MASK
 0x100u

	)

23839 
	#KPP_KPSR_KDIE_SHIFT
 8

	)

23840 
	#KPP_KPSR_KRIE_MASK
 0x200u

	)

23841 
	#KPP_KPSR_KRIE_SHIFT
 9

	)

23843 
	#KPP_KDDR_KRDD_MASK
 0xFFu

	)

23844 
	#KPP_KDDR_KRDD_SHIFT
 0

	)

23845 
	#KPP_KDDR_KRDD
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
KPP_KDDR_KRDD_SHIFT
))&
KPP_KDDR_KRDD_MASK
)

	)

23846 
	#KPP_KDDR_KCDD_MASK
 0xFF00u

	)

23847 
	#KPP_KDDR_KCDD_SHIFT
 8

	)

23848 
	#KPP_KDDR_KCDD
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
KPP_KDDR_KCDD_SHIFT
))&
KPP_KDDR_KCDD_MASK
)

	)

23850 
	#KPP_KPDR_KRD_MASK
 0xFFu

	)

23851 
	#KPP_KPDR_KRD_SHIFT
 0

	)

23852 
	#KPP_KPDR_KRD
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
KPP_KPDR_KRD_SHIFT
))&
KPP_KPDR_KRD_MASK
)

	)

23853 
	#KPP_KPDR_KCD_MASK
 0xFF00u

	)

23854 
	#KPP_KPDR_KCD_SHIFT
 8

	)

23855 
	#KPP_KPDR_KCD
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
KPP_KPDR_KCD_SHIFT
))&
KPP_KPDR_KCD_MASK
)

	)

23863 
	#KPP_BASE
 (0x420B8000u)

	)

23865 
	#KPP
 ((
KPP_Ty≥
 *)
KPP_BASE
)

	)

23866 
	#KPP_BASE_PTR
 (
KPP
)

	)

23868 
	#KPP_BASE_ADDRS
 { 
KPP_BASE
 }

	)

23870 
	#KPP_BASE_PTRS
 { 
KPP
 }

	)

23872 
	#KPP_IRQS
 { 
KPP_IRQn
 }

	)

23885 
	#KPP_KPCR
 
	`KPP_KPCR_REG
(
KPP_BASE_PTR
)

	)

23886 
	#KPP_KPSR
 
	`KPP_KPSR_REG
(
KPP_BASE_PTR
)

	)

23887 
	#KPP_KDDR
 
	`KPP_KDDR_REG
(
KPP_BASE_PTR
)

	)

23888 
	#KPP_KPDR
 
	`KPP_KPDR_REG
(
KPP_BASE_PTR
)

	)

23908 
__IO
 
uöt32_t
 
	mRL
;

23909 
__IO
 
uöt32_t
 
	mRL_SET
;

23910 
__IO
 
uöt32_t
 
	mRL_CLR
;

23911 
__IO
 
uöt32_t
 
	mRL_TOG
;

23912 
__IO
 
uöt32_t
 
	mCTRL1
;

23913 
__IO
 
uöt32_t
 
	mCTRL1_SET
;

23914 
__IO
 
uöt32_t
 
	mCTRL1_CLR
;

23915 
__IO
 
uöt32_t
 
	mCTRL1_TOG
;

23916 
__IO
 
uöt32_t
 
	mCTRL2
;

23917 
__IO
 
uöt32_t
 
	mCTRL2_SET
;

23918 
__IO
 
uöt32_t
 
	mCTRL2_CLR
;

23919 
__IO
 
uöt32_t
 
	mCTRL2_TOG
;

23920 
__IO
 
uöt32_t
 
	mTRANSFER_COUNT
;

23921 
uöt8_t
 
	mRESERVED_0
[12];

23922 
__IO
 
uöt32_t
 
	mCUR_BUF
;

23923 
uöt8_t
 
	mRESERVED_1
[12];

23924 
__IO
 
uöt32_t
 
	mNEXT_BUF
;

23925 
uöt8_t
 
	mRESERVED_2
[12];

23926 
__IO
 
uöt32_t
 
	mTIMING
;

23927 
uöt8_t
 
	mRESERVED_3
[12];

23928 
__IO
 
uöt32_t
 
	mVDCTRL0
;

23929 
__IO
 
uöt32_t
 
	mVDCTRL0_SET
;

23930 
__IO
 
uöt32_t
 
	mVDCTRL0_CLR
;

23931 
__IO
 
uöt32_t
 
	mVDCTRL0_TOG
;

23932 
__IO
 
uöt32_t
 
	mVDCTRL1
;

23933 
uöt8_t
 
	mRESERVED_4
[12];

23934 
__IO
 
uöt32_t
 
	mVDCTRL2
;

23935 
uöt8_t
 
	mRESERVED_5
[12];

23936 
__IO
 
uöt32_t
 
	mVDCTRL3
;

23937 
uöt8_t
 
	mRESERVED_6
[12];

23938 
__IO
 
uöt32_t
 
	mVDCTRL4
;

23939 
uöt8_t
 
	mRESERVED_7
[12];

23940 
__IO
 
uöt32_t
 
	mDVICTRL0
;

23941 
uöt8_t
 
	mRESERVED_8
[12];

23942 
__IO
 
uöt32_t
 
	mDVICTRL1
;

23943 
uöt8_t
 
	mRESERVED_9
[12];

23944 
__IO
 
uöt32_t
 
	mDVICTRL2
;

23945 
uöt8_t
 
	mRESERVED_10
[12];

23946 
__IO
 
uöt32_t
 
	mDVICTRL3
;

23947 
uöt8_t
 
	mRESERVED_11
[12];

23948 
__IO
 
uöt32_t
 
	mDVICTRL4
;

23949 
uöt8_t
 
	mRESERVED_12
[12];

23950 
__IO
 
uöt32_t
 
	mCSC_COEFF0
;

23951 
uöt8_t
 
	mRESERVED_13
[12];

23952 
__IO
 
uöt32_t
 
	mCSC_COEFF1
;

23953 
uöt8_t
 
	mRESERVED_14
[12];

23954 
__IO
 
uöt32_t
 
	mCSC_COEFF2
;

23955 
uöt8_t
 
	mRESERVED_15
[12];

23956 
__IO
 
uöt32_t
 
	mCSC_COEFF3
;

23957 
uöt8_t
 
	mRESERVED_16
[12];

23958 
__IO
 
uöt32_t
 
	mCSC_COEFF4
;

23959 
uöt8_t
 
	mRESERVED_17
[12];

23960 
__IO
 
uöt32_t
 
	mCSC_OFFSET
;

23961 
uöt8_t
 
	mRESERVED_18
[12];

23962 
__IO
 
uöt32_t
 
	mCSC_LIMIT
;

23963 
uöt8_t
 
	mRESERVED_19
[12];

23964 
__IO
 
uöt32_t
 
	mDATA
;

23965 
uöt8_t
 
	mRESERVED_20
[12];

23966 
__IO
 
uöt32_t
 
	mBM_ERROR_STAT
;

23967 
uöt8_t
 
	mRESERVED_21
[12];

23968 
__IO
 
uöt32_t
 
	mCRC_STAT
;

23969 
uöt8_t
 
	mRESERVED_22
[12];

23970 
__I
 
uöt32_t
 
	mSTAT
;

23971 
uöt8_t
 
	mRESERVED_23
[12];

23972 
__I
 
uöt32_t
 
	mVERSION
;

23973 
uöt8_t
 
	mRESERVED_24
[12];

23974 
__I
 
uöt32_t
 
	mDEBUG0
;

23975 
uöt8_t
 
	mRESERVED_25
[12];

23976 
__I
 
uöt32_t
 
	mDEBUG1
;

23977 
uöt8_t
 
	mRESERVED_26
[12];

23978 
__I
 
uöt32_t
 
	mDEBUG2
;

23979 
uöt8_t
 
	mRESERVED_27
[12];

23980 
__IO
 
uöt32_t
 
	mTHRES
;

23981 
uöt8_t
 
	mRESERVED_28
[12];

23982 
__IO
 
uöt32_t
 
	mAS_CTRL
;

23983 
uöt8_t
 
	mRESERVED_29
[12];

23984 
__IO
 
uöt32_t
 
	mAS_BUF
;

23985 
uöt8_t
 
	mRESERVED_30
[12];

23986 
__IO
 
uöt32_t
 
	mAS_NEXT_BUF
;

23987 
uöt8_t
 
	mRESERVED_31
[12];

23988 
__IO
 
uöt32_t
 
	mAS_CLRKEYLOW
;

23989 
uöt8_t
 
	mRESERVED_32
[12];

23990 
__IO
 
uöt32_t
 
	mAS_CLRKEYHIGH
;

23991 
uöt8_t
 
	mRESERVED_33
[12];

23992 
__IO
 
uöt32_t
 
	mSYNC_DELAY
;

23993 
uöt8_t
 
	mRESERVED_34
[12];

23994 
__IO
 
uöt32_t
 
	mDEBUG3
;

23995 
uöt8_t
 
	mRESERVED_35
[12];

23996 
__IO
 
uöt32_t
 
	mDEBUG4
;

23997 
uöt8_t
 
	mRESERVED_36
[12];

23998 
__IO
 
uöt32_t
 
	mDEBUG5
;

23999 } 
	tLCDIF_Ty≥
, *
	tLCDIF_MemM≠På
;

24011 
	#LCDIF_RL_REG
(
ba£
Ë((ba£)->
RL
)

	)

24012 
	#LCDIF_RL_SET_REG
(
ba£
Ë((ba£)->
RL_SET
)

	)

24013 
	#LCDIF_RL_CLR_REG
(
ba£
Ë((ba£)->
RL_CLR
)

	)

24014 
	#LCDIF_RL_TOG_REG
(
ba£
Ë((ba£)->
RL_TOG
)

	)

24015 
	#LCDIF_CTRL1_REG
(
ba£
Ë((ba£)->
CTRL1
)

	)

24016 
	#LCDIF_CTRL1_SET_REG
(
ba£
Ë((ba£)->
CTRL1_SET
)

	)

24017 
	#LCDIF_CTRL1_CLR_REG
(
ba£
Ë((ba£)->
CTRL1_CLR
)

	)

24018 
	#LCDIF_CTRL1_TOG_REG
(
ba£
Ë((ba£)->
CTRL1_TOG
)

	)

24019 
	#LCDIF_CTRL2_REG
(
ba£
Ë((ba£)->
CTRL2
)

	)

24020 
	#LCDIF_CTRL2_SET_REG
(
ba£
Ë((ba£)->
CTRL2_SET
)

	)

24021 
	#LCDIF_CTRL2_CLR_REG
(
ba£
Ë((ba£)->
CTRL2_CLR
)

	)

24022 
	#LCDIF_CTRL2_TOG_REG
(
ba£
Ë((ba£)->
CTRL2_TOG
)

	)

24023 
	#LCDIF_TRANSFER_COUNT_REG
(
ba£
Ë((ba£)->
TRANSFER_COUNT
)

	)

24024 
	#LCDIF_CUR_BUF_REG
(
ba£
Ë((ba£)->
CUR_BUF
)

	)

24025 
	#LCDIF_NEXT_BUF_REG
(
ba£
Ë((ba£)->
NEXT_BUF
)

	)

24026 
	#LCDIF_TIMING_REG
(
ba£
Ë((ba£)->
TIMING
)

	)

24027 
	#LCDIF_VDCTRL0_REG
(
ba£
Ë((ba£)->
VDCTRL0
)

	)

24028 
	#LCDIF_VDCTRL0_SET_REG
(
ba£
Ë((ba£)->
VDCTRL0_SET
)

	)

24029 
	#LCDIF_VDCTRL0_CLR_REG
(
ba£
Ë((ba£)->
VDCTRL0_CLR
)

	)

24030 
	#LCDIF_VDCTRL0_TOG_REG
(
ba£
Ë((ba£)->
VDCTRL0_TOG
)

	)

24031 
	#LCDIF_VDCTRL1_REG
(
ba£
Ë((ba£)->
VDCTRL1
)

	)

24032 
	#LCDIF_VDCTRL2_REG
(
ba£
Ë((ba£)->
VDCTRL2
)

	)

24033 
	#LCDIF_VDCTRL3_REG
(
ba£
Ë((ba£)->
VDCTRL3
)

	)

24034 
	#LCDIF_VDCTRL4_REG
(
ba£
Ë((ba£)->
VDCTRL4
)

	)

24035 
	#LCDIF_DVICTRL0_REG
(
ba£
Ë((ba£)->
DVICTRL0
)

	)

24036 
	#LCDIF_DVICTRL1_REG
(
ba£
Ë((ba£)->
DVICTRL1
)

	)

24037 
	#LCDIF_DVICTRL2_REG
(
ba£
Ë((ba£)->
DVICTRL2
)

	)

24038 
	#LCDIF_DVICTRL3_REG
(
ba£
Ë((ba£)->
DVICTRL3
)

	)

24039 
	#LCDIF_DVICTRL4_REG
(
ba£
Ë((ba£)->
DVICTRL4
)

	)

24040 
	#LCDIF_CSC_COEFF0_REG
(
ba£
Ë((ba£)->
CSC_COEFF0
)

	)

24041 
	#LCDIF_CSC_COEFF1_REG
(
ba£
Ë((ba£)->
CSC_COEFF1
)

	)

24042 
	#LCDIF_CSC_COEFF2_REG
(
ba£
Ë((ba£)->
CSC_COEFF2
)

	)

24043 
	#LCDIF_CSC_COEFF3_REG
(
ba£
Ë((ba£)->
CSC_COEFF3
)

	)

24044 
	#LCDIF_CSC_COEFF4_REG
(
ba£
Ë((ba£)->
CSC_COEFF4
)

	)

24045 
	#LCDIF_CSC_OFFSET_REG
(
ba£
Ë((ba£)->
CSC_OFFSET
)

	)

24046 
	#LCDIF_CSC_LIMIT_REG
(
ba£
Ë((ba£)->
CSC_LIMIT
)

	)

24047 
	#LCDIF_DATA_REG
(
ba£
Ë((ba£)->
DATA
)

	)

24048 
	#LCDIF_BM_ERROR_STAT_REG
(
ba£
Ë((ba£)->
BM_ERROR_STAT
)

	)

24049 
	#LCDIF_CRC_STAT_REG
(
ba£
Ë((ba£)->
CRC_STAT
)

	)

24050 
	#LCDIF_STAT_REG
(
ba£
Ë((ba£)->
STAT
)

	)

24051 
	#LCDIF_VERSION_REG
(
ba£
Ë((ba£)->
VERSION
)

	)

24052 
	#LCDIF_DEBUG0_REG
(
ba£
Ë((ba£)->
DEBUG0
)

	)

24053 
	#LCDIF_DEBUG1_REG
(
ba£
Ë((ba£)->
DEBUG1
)

	)

24054 
	#LCDIF_DEBUG2_REG
(
ba£
Ë((ba£)->
DEBUG2
)

	)

24055 
	#LCDIF_THRES_REG
(
ba£
Ë((ba£)->
THRES
)

	)

24056 
	#LCDIF_AS_CTRL_REG
(
ba£
Ë((ba£)->
AS_CTRL
)

	)

24057 
	#LCDIF_AS_BUF_REG
(
ba£
Ë((ba£)->
AS_BUF
)

	)

24058 
	#LCDIF_AS_NEXT_BUF_REG
(
ba£
Ë((ba£)->
AS_NEXT_BUF
)

	)

24059 
	#LCDIF_AS_CLRKEYLOW_REG
(
ba£
Ë((ba£)->
AS_CLRKEYLOW
)

	)

24060 
	#LCDIF_AS_CLRKEYHIGH_REG
(
ba£
Ë((ba£)->
AS_CLRKEYHIGH
)

	)

24061 
	#LCDIF_SYNC_DELAY_REG
(
ba£
Ë((ba£)->
SYNC_DELAY
)

	)

24062 
	#LCDIF_DEBUG3_REG
(
ba£
Ë((ba£)->
DEBUG3
)

	)

24063 
	#LCDIF_DEBUG4_REG
(
ba£
Ë((ba£)->
DEBUG4
)

	)

24064 
	#LCDIF_DEBUG5_REG
(
ba£
Ë((ba£)->
DEBUG5
)

	)

24080 
	#LCDIF_RL_RUN_MASK
 0x1u

	)

24081 
	#LCDIF_RL_RUN_SHIFT
 0

	)

24082 
	#LCDIF_RL_DATA_FORMAT_24_BIT_MASK
 0x2u

	)

24083 
	#LCDIF_RL_DATA_FORMAT_24_BIT_SHIFT
 1

	)

24084 
	#LCDIF_RL_DATA_FORMAT_18_BIT_MASK
 0x4u

	)

24085 
	#LCDIF_RL_DATA_FORMAT_18_BIT_SHIFT
 2

	)

24086 
	#LCDIF_RL_DATA_FORMAT_16_BIT_MASK
 0x8u

	)

24087 
	#LCDIF_RL_DATA_FORMAT_16_BIT_SHIFT
 3

	)

24088 
	#LCDIF_RL_RSRVD0_MASK
 0x10u

	)

24089 
	#LCDIF_RL_RSRVD0_SHIFT
 4

	)

24090 
	#LCDIF_RL_MASTER_MASK
 0x20u

	)

24091 
	#LCDIF_RL_MASTER_SHIFT
 5

	)

24092 
	#LCDIF_RL_ENABLE_PXP_HANDSHAKE_MASK
 0x40u

	)

24093 
	#LCDIF_RL_ENABLE_PXP_HANDSHAKE_SHIFT
 6

	)

24094 
	#LCDIF_RL_RGB_TO_YCBCR422_CSC_MASK
 0x80u

	)

24095 
	#LCDIF_RL_RGB_TO_YCBCR422_CSC_SHIFT
 7

	)

24096 
	#LCDIF_RL_WORD_LENGTH_MASK
 0x300u

	)

24097 
	#LCDIF_RL_WORD_LENGTH_SHIFT
 8

	)

24098 
	#LCDIF_RL_WORD_LENGTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_WORD_LENGTH_SHIFT
))&
LCDIF_RL_WORD_LENGTH_MASK
)

	)

24099 
	#LCDIF_RL_LCD_DATABUS_WIDTH_MASK
 0xC00u

	)

24100 
	#LCDIF_RL_LCD_DATABUS_WIDTH_SHIFT
 10

	)

24101 
	#LCDIF_RL_LCD_DATABUS_WIDTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_LCD_DATABUS_WIDTH_SHIFT
))&
LCDIF_RL_LCD_DATABUS_WIDTH_MASK
)

	)

24102 
	#LCDIF_RL_CSC_DATA_SWIZZLE_MASK
 0x3000u

	)

24103 
	#LCDIF_RL_CSC_DATA_SWIZZLE_SHIFT
 12

	)

24104 
	#LCDIF_RL_CSC_DATA_SWIZZLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_CSC_DATA_SWIZZLE_SHIFT
))&
LCDIF_RL_CSC_DATA_SWIZZLE_MASK
)

	)

24105 
	#LCDIF_RL_INPUT_DATA_SWIZZLE_MASK
 0xC000u

	)

24106 
	#LCDIF_RL_INPUT_DATA_SWIZZLE_SHIFT
 14

	)

24107 
	#LCDIF_RL_INPUT_DATA_SWIZZLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_INPUT_DATA_SWIZZLE_SHIFT
))&
LCDIF_RL_INPUT_DATA_SWIZZLE_MASK
)

	)

24108 
	#LCDIF_RL_DATA_SELECT_MASK
 0x10000u

	)

24109 
	#LCDIF_RL_DATA_SELECT_SHIFT
 16

	)

24110 
	#LCDIF_RL_DOTCLK_MODE_MASK
 0x20000u

	)

24111 
	#LCDIF_RL_DOTCLK_MODE_SHIFT
 17

	)

24112 
	#LCDIF_RL_VSYNC_MODE_MASK
 0x40000u

	)

24113 
	#LCDIF_RL_VSYNC_MODE_SHIFT
 18

	)

24114 
	#LCDIF_RL_BYPASS_COUNT_MASK
 0x80000u

	)

24115 
	#LCDIF_RL_BYPASS_COUNT_SHIFT
 19

	)

24116 
	#LCDIF_RL_DVI_MODE_MASK
 0x100000u

	)

24117 
	#LCDIF_RL_DVI_MODE_SHIFT
 20

	)

24118 
	#LCDIF_RL_SHIFT_NUM_BITS_MASK
 0x3E00000u

	)

24119 
	#LCDIF_RL_SHIFT_NUM_BITS_SHIFT
 21

	)

24120 
	#LCDIF_RL_SHIFT_NUM_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_SHIFT_NUM_BITS_SHIFT
))&
LCDIF_RL_SHIFT_NUM_BITS_MASK
)

	)

24121 
	#LCDIF_RL_DATA_SHIFT_DIR_MASK
 0x4000000u

	)

24122 
	#LCDIF_RL_DATA_SHIFT_DIR_SHIFT
 26

	)

24123 
	#LCDIF_RL_WAIT_FOR_VSYNC_EDGE_MASK
 0x8000000u

	)

24124 
	#LCDIF_RL_WAIT_FOR_VSYNC_EDGE_SHIFT
 27

	)

24125 
	#LCDIF_RL_READ_WRITEB_MASK
 0x10000000u

	)

24126 
	#LCDIF_RL_READ_WRITEB_SHIFT
 28

	)

24127 
	#LCDIF_RL_YCBCR422_INPUT_MASK
 0x20000000u

	)

24128 
	#LCDIF_RL_YCBCR422_INPUT_SHIFT
 29

	)

24129 
	#LCDIF_RL_CLKGATE_MASK
 0x40000000u

	)

24130 
	#LCDIF_RL_CLKGATE_SHIFT
 30

	)

24131 
	#LCDIF_RL_SFTRST_MASK
 0x80000000u

	)

24132 
	#LCDIF_RL_SFTRST_SHIFT
 31

	)

24134 
	#LCDIF_RL_SET_RUN_MASK
 0x1u

	)

24135 
	#LCDIF_RL_SET_RUN_SHIFT
 0

	)

24136 
	#LCDIF_RL_SET_DATA_FORMAT_24_BIT_MASK
 0x2u

	)

24137 
	#LCDIF_RL_SET_DATA_FORMAT_24_BIT_SHIFT
 1

	)

24138 
	#LCDIF_RL_SET_DATA_FORMAT_18_BIT_MASK
 0x4u

	)

24139 
	#LCDIF_RL_SET_DATA_FORMAT_18_BIT_SHIFT
 2

	)

24140 
	#LCDIF_RL_SET_DATA_FORMAT_16_BIT_MASK
 0x8u

	)

24141 
	#LCDIF_RL_SET_DATA_FORMAT_16_BIT_SHIFT
 3

	)

24142 
	#LCDIF_RL_SET_RSRVD0_MASK
 0x10u

	)

24143 
	#LCDIF_RL_SET_RSRVD0_SHIFT
 4

	)

24144 
	#LCDIF_RL_SET_MASTER_MASK
 0x20u

	)

24145 
	#LCDIF_RL_SET_MASTER_SHIFT
 5

	)

24146 
	#LCDIF_RL_SET_ENABLE_PXP_HANDSHAKE_MASK
 0x40u

	)

24147 
	#LCDIF_RL_SET_ENABLE_PXP_HANDSHAKE_SHIFT
 6

	)

24148 
	#LCDIF_RL_SET_RGB_TO_YCBCR422_CSC_MASK
 0x80u

	)

24149 
	#LCDIF_RL_SET_RGB_TO_YCBCR422_CSC_SHIFT
 7

	)

24150 
	#LCDIF_RL_SET_WORD_LENGTH_MASK
 0x300u

	)

24151 
	#LCDIF_RL_SET_WORD_LENGTH_SHIFT
 8

	)

24152 
	#LCDIF_RL_SET_WORD_LENGTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_SET_WORD_LENGTH_SHIFT
))&
LCDIF_RL_SET_WORD_LENGTH_MASK
)

	)

24153 
	#LCDIF_RL_SET_LCD_DATABUS_WIDTH_MASK
 0xC00u

	)

24154 
	#LCDIF_RL_SET_LCD_DATABUS_WIDTH_SHIFT
 10

	)

24155 
	#LCDIF_RL_SET_LCD_DATABUS_WIDTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_SET_LCD_DATABUS_WIDTH_SHIFT
))&
LCDIF_RL_SET_LCD_DATABUS_WIDTH_MASK
)

	)

24156 
	#LCDIF_RL_SET_CSC_DATA_SWIZZLE_MASK
 0x3000u

	)

24157 
	#LCDIF_RL_SET_CSC_DATA_SWIZZLE_SHIFT
 12

	)

24158 
	#LCDIF_RL_SET_CSC_DATA_SWIZZLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_SET_CSC_DATA_SWIZZLE_SHIFT
))&
LCDIF_RL_SET_CSC_DATA_SWIZZLE_MASK
)

	)

24159 
	#LCDIF_RL_SET_INPUT_DATA_SWIZZLE_MASK
 0xC000u

	)

24160 
	#LCDIF_RL_SET_INPUT_DATA_SWIZZLE_SHIFT
 14

	)

24161 
	#LCDIF_RL_SET_INPUT_DATA_SWIZZLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_SET_INPUT_DATA_SWIZZLE_SHIFT
))&
LCDIF_RL_SET_INPUT_DATA_SWIZZLE_MASK
)

	)

24162 
	#LCDIF_RL_SET_DATA_SELECT_MASK
 0x10000u

	)

24163 
	#LCDIF_RL_SET_DATA_SELECT_SHIFT
 16

	)

24164 
	#LCDIF_RL_SET_DOTCLK_MODE_MASK
 0x20000u

	)

24165 
	#LCDIF_RL_SET_DOTCLK_MODE_SHIFT
 17

	)

24166 
	#LCDIF_RL_SET_VSYNC_MODE_MASK
 0x40000u

	)

24167 
	#LCDIF_RL_SET_VSYNC_MODE_SHIFT
 18

	)

24168 
	#LCDIF_RL_SET_BYPASS_COUNT_MASK
 0x80000u

	)

24169 
	#LCDIF_RL_SET_BYPASS_COUNT_SHIFT
 19

	)

24170 
	#LCDIF_RL_SET_DVI_MODE_MASK
 0x100000u

	)

24171 
	#LCDIF_RL_SET_DVI_MODE_SHIFT
 20

	)

24172 
	#LCDIF_RL_SET_SHIFT_NUM_BITS_MASK
 0x3E00000u

	)

24173 
	#LCDIF_RL_SET_SHIFT_NUM_BITS_SHIFT
 21

	)

24174 
	#LCDIF_RL_SET_SHIFT_NUM_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_SET_SHIFT_NUM_BITS_SHIFT
))&
LCDIF_RL_SET_SHIFT_NUM_BITS_MASK
)

	)

24175 
	#LCDIF_RL_SET_DATA_SHIFT_DIR_MASK
 0x4000000u

	)

24176 
	#LCDIF_RL_SET_DATA_SHIFT_DIR_SHIFT
 26

	)

24177 
	#LCDIF_RL_SET_WAIT_FOR_VSYNC_EDGE_MASK
 0x8000000u

	)

24178 
	#LCDIF_RL_SET_WAIT_FOR_VSYNC_EDGE_SHIFT
 27

	)

24179 
	#LCDIF_RL_SET_READ_WRITEB_MASK
 0x10000000u

	)

24180 
	#LCDIF_RL_SET_READ_WRITEB_SHIFT
 28

	)

24181 
	#LCDIF_RL_SET_YCBCR422_INPUT_MASK
 0x20000000u

	)

24182 
	#LCDIF_RL_SET_YCBCR422_INPUT_SHIFT
 29

	)

24183 
	#LCDIF_RL_SET_CLKGATE_MASK
 0x40000000u

	)

24184 
	#LCDIF_RL_SET_CLKGATE_SHIFT
 30

	)

24185 
	#LCDIF_RL_SET_SFTRST_MASK
 0x80000000u

	)

24186 
	#LCDIF_RL_SET_SFTRST_SHIFT
 31

	)

24188 
	#LCDIF_RL_CLR_RUN_MASK
 0x1u

	)

24189 
	#LCDIF_RL_CLR_RUN_SHIFT
 0

	)

24190 
	#LCDIF_RL_CLR_DATA_FORMAT_24_BIT_MASK
 0x2u

	)

24191 
	#LCDIF_RL_CLR_DATA_FORMAT_24_BIT_SHIFT
 1

	)

24192 
	#LCDIF_RL_CLR_DATA_FORMAT_18_BIT_MASK
 0x4u

	)

24193 
	#LCDIF_RL_CLR_DATA_FORMAT_18_BIT_SHIFT
 2

	)

24194 
	#LCDIF_RL_CLR_DATA_FORMAT_16_BIT_MASK
 0x8u

	)

24195 
	#LCDIF_RL_CLR_DATA_FORMAT_16_BIT_SHIFT
 3

	)

24196 
	#LCDIF_RL_CLR_RSRVD0_MASK
 0x10u

	)

24197 
	#LCDIF_RL_CLR_RSRVD0_SHIFT
 4

	)

24198 
	#LCDIF_RL_CLR_MASTER_MASK
 0x20u

	)

24199 
	#LCDIF_RL_CLR_MASTER_SHIFT
 5

	)

24200 
	#LCDIF_RL_CLR_ENABLE_PXP_HANDSHAKE_MASK
 0x40u

	)

24201 
	#LCDIF_RL_CLR_ENABLE_PXP_HANDSHAKE_SHIFT
 6

	)

24202 
	#LCDIF_RL_CLR_RGB_TO_YCBCR422_CSC_MASK
 0x80u

	)

24203 
	#LCDIF_RL_CLR_RGB_TO_YCBCR422_CSC_SHIFT
 7

	)

24204 
	#LCDIF_RL_CLR_WORD_LENGTH_MASK
 0x300u

	)

24205 
	#LCDIF_RL_CLR_WORD_LENGTH_SHIFT
 8

	)

24206 
	#LCDIF_RL_CLR_WORD_LENGTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_CLR_WORD_LENGTH_SHIFT
))&
LCDIF_RL_CLR_WORD_LENGTH_MASK
)

	)

24207 
	#LCDIF_RL_CLR_LCD_DATABUS_WIDTH_MASK
 0xC00u

	)

24208 
	#LCDIF_RL_CLR_LCD_DATABUS_WIDTH_SHIFT
 10

	)

24209 
	#LCDIF_RL_CLR_LCD_DATABUS_WIDTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_CLR_LCD_DATABUS_WIDTH_SHIFT
))&
LCDIF_RL_CLR_LCD_DATABUS_WIDTH_MASK
)

	)

24210 
	#LCDIF_RL_CLR_CSC_DATA_SWIZZLE_MASK
 0x3000u

	)

24211 
	#LCDIF_RL_CLR_CSC_DATA_SWIZZLE_SHIFT
 12

	)

24212 
	#LCDIF_RL_CLR_CSC_DATA_SWIZZLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_CLR_CSC_DATA_SWIZZLE_SHIFT
))&
LCDIF_RL_CLR_CSC_DATA_SWIZZLE_MASK
)

	)

24213 
	#LCDIF_RL_CLR_INPUT_DATA_SWIZZLE_MASK
 0xC000u

	)

24214 
	#LCDIF_RL_CLR_INPUT_DATA_SWIZZLE_SHIFT
 14

	)

24215 
	#LCDIF_RL_CLR_INPUT_DATA_SWIZZLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_CLR_INPUT_DATA_SWIZZLE_SHIFT
))&
LCDIF_RL_CLR_INPUT_DATA_SWIZZLE_MASK
)

	)

24216 
	#LCDIF_RL_CLR_DATA_SELECT_MASK
 0x10000u

	)

24217 
	#LCDIF_RL_CLR_DATA_SELECT_SHIFT
 16

	)

24218 
	#LCDIF_RL_CLR_DOTCLK_MODE_MASK
 0x20000u

	)

24219 
	#LCDIF_RL_CLR_DOTCLK_MODE_SHIFT
 17

	)

24220 
	#LCDIF_RL_CLR_VSYNC_MODE_MASK
 0x40000u

	)

24221 
	#LCDIF_RL_CLR_VSYNC_MODE_SHIFT
 18

	)

24222 
	#LCDIF_RL_CLR_BYPASS_COUNT_MASK
 0x80000u

	)

24223 
	#LCDIF_RL_CLR_BYPASS_COUNT_SHIFT
 19

	)

24224 
	#LCDIF_RL_CLR_DVI_MODE_MASK
 0x100000u

	)

24225 
	#LCDIF_RL_CLR_DVI_MODE_SHIFT
 20

	)

24226 
	#LCDIF_RL_CLR_SHIFT_NUM_BITS_MASK
 0x3E00000u

	)

24227 
	#LCDIF_RL_CLR_SHIFT_NUM_BITS_SHIFT
 21

	)

24228 
	#LCDIF_RL_CLR_SHIFT_NUM_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_CLR_SHIFT_NUM_BITS_SHIFT
))&
LCDIF_RL_CLR_SHIFT_NUM_BITS_MASK
)

	)

24229 
	#LCDIF_RL_CLR_DATA_SHIFT_DIR_MASK
 0x4000000u

	)

24230 
	#LCDIF_RL_CLR_DATA_SHIFT_DIR_SHIFT
 26

	)

24231 
	#LCDIF_RL_CLR_WAIT_FOR_VSYNC_EDGE_MASK
 0x8000000u

	)

24232 
	#LCDIF_RL_CLR_WAIT_FOR_VSYNC_EDGE_SHIFT
 27

	)

24233 
	#LCDIF_RL_CLR_READ_WRITEB_MASK
 0x10000000u

	)

24234 
	#LCDIF_RL_CLR_READ_WRITEB_SHIFT
 28

	)

24235 
	#LCDIF_RL_CLR_YCBCR422_INPUT_MASK
 0x20000000u

	)

24236 
	#LCDIF_RL_CLR_YCBCR422_INPUT_SHIFT
 29

	)

24237 
	#LCDIF_RL_CLR_CLKGATE_MASK
 0x40000000u

	)

24238 
	#LCDIF_RL_CLR_CLKGATE_SHIFT
 30

	)

24239 
	#LCDIF_RL_CLR_SFTRST_MASK
 0x80000000u

	)

24240 
	#LCDIF_RL_CLR_SFTRST_SHIFT
 31

	)

24242 
	#LCDIF_RL_TOG_RUN_MASK
 0x1u

	)

24243 
	#LCDIF_RL_TOG_RUN_SHIFT
 0

	)

24244 
	#LCDIF_RL_TOG_DATA_FORMAT_24_BIT_MASK
 0x2u

	)

24245 
	#LCDIF_RL_TOG_DATA_FORMAT_24_BIT_SHIFT
 1

	)

24246 
	#LCDIF_RL_TOG_DATA_FORMAT_18_BIT_MASK
 0x4u

	)

24247 
	#LCDIF_RL_TOG_DATA_FORMAT_18_BIT_SHIFT
 2

	)

24248 
	#LCDIF_RL_TOG_DATA_FORMAT_16_BIT_MASK
 0x8u

	)

24249 
	#LCDIF_RL_TOG_DATA_FORMAT_16_BIT_SHIFT
 3

	)

24250 
	#LCDIF_RL_TOG_RSRVD0_MASK
 0x10u

	)

24251 
	#LCDIF_RL_TOG_RSRVD0_SHIFT
 4

	)

24252 
	#LCDIF_RL_TOG_MASTER_MASK
 0x20u

	)

24253 
	#LCDIF_RL_TOG_MASTER_SHIFT
 5

	)

24254 
	#LCDIF_RL_TOG_ENABLE_PXP_HANDSHAKE_MASK
 0x40u

	)

24255 
	#LCDIF_RL_TOG_ENABLE_PXP_HANDSHAKE_SHIFT
 6

	)

24256 
	#LCDIF_RL_TOG_RGB_TO_YCBCR422_CSC_MASK
 0x80u

	)

24257 
	#LCDIF_RL_TOG_RGB_TO_YCBCR422_CSC_SHIFT
 7

	)

24258 
	#LCDIF_RL_TOG_WORD_LENGTH_MASK
 0x300u

	)

24259 
	#LCDIF_RL_TOG_WORD_LENGTH_SHIFT
 8

	)

24260 
	#LCDIF_RL_TOG_WORD_LENGTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_TOG_WORD_LENGTH_SHIFT
))&
LCDIF_RL_TOG_WORD_LENGTH_MASK
)

	)

24261 
	#LCDIF_RL_TOG_LCD_DATABUS_WIDTH_MASK
 0xC00u

	)

24262 
	#LCDIF_RL_TOG_LCD_DATABUS_WIDTH_SHIFT
 10

	)

24263 
	#LCDIF_RL_TOG_LCD_DATABUS_WIDTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_TOG_LCD_DATABUS_WIDTH_SHIFT
))&
LCDIF_RL_TOG_LCD_DATABUS_WIDTH_MASK
)

	)

24264 
	#LCDIF_RL_TOG_CSC_DATA_SWIZZLE_MASK
 0x3000u

	)

24265 
	#LCDIF_RL_TOG_CSC_DATA_SWIZZLE_SHIFT
 12

	)

24266 
	#LCDIF_RL_TOG_CSC_DATA_SWIZZLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_TOG_CSC_DATA_SWIZZLE_SHIFT
))&
LCDIF_RL_TOG_CSC_DATA_SWIZZLE_MASK
)

	)

24267 
	#LCDIF_RL_TOG_INPUT_DATA_SWIZZLE_MASK
 0xC000u

	)

24268 
	#LCDIF_RL_TOG_INPUT_DATA_SWIZZLE_SHIFT
 14

	)

24269 
	#LCDIF_RL_TOG_INPUT_DATA_SWIZZLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_TOG_INPUT_DATA_SWIZZLE_SHIFT
))&
LCDIF_RL_TOG_INPUT_DATA_SWIZZLE_MASK
)

	)

24270 
	#LCDIF_RL_TOG_DATA_SELECT_MASK
 0x10000u

	)

24271 
	#LCDIF_RL_TOG_DATA_SELECT_SHIFT
 16

	)

24272 
	#LCDIF_RL_TOG_DOTCLK_MODE_MASK
 0x20000u

	)

24273 
	#LCDIF_RL_TOG_DOTCLK_MODE_SHIFT
 17

	)

24274 
	#LCDIF_RL_TOG_VSYNC_MODE_MASK
 0x40000u

	)

24275 
	#LCDIF_RL_TOG_VSYNC_MODE_SHIFT
 18

	)

24276 
	#LCDIF_RL_TOG_BYPASS_COUNT_MASK
 0x80000u

	)

24277 
	#LCDIF_RL_TOG_BYPASS_COUNT_SHIFT
 19

	)

24278 
	#LCDIF_RL_TOG_DVI_MODE_MASK
 0x100000u

	)

24279 
	#LCDIF_RL_TOG_DVI_MODE_SHIFT
 20

	)

24280 
	#LCDIF_RL_TOG_SHIFT_NUM_BITS_MASK
 0x3E00000u

	)

24281 
	#LCDIF_RL_TOG_SHIFT_NUM_BITS_SHIFT
 21

	)

24282 
	#LCDIF_RL_TOG_SHIFT_NUM_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_RL_TOG_SHIFT_NUM_BITS_SHIFT
))&
LCDIF_RL_TOG_SHIFT_NUM_BITS_MASK
)

	)

24283 
	#LCDIF_RL_TOG_DATA_SHIFT_DIR_MASK
 0x4000000u

	)

24284 
	#LCDIF_RL_TOG_DATA_SHIFT_DIR_SHIFT
 26

	)

24285 
	#LCDIF_RL_TOG_WAIT_FOR_VSYNC_EDGE_MASK
 0x8000000u

	)

24286 
	#LCDIF_RL_TOG_WAIT_FOR_VSYNC_EDGE_SHIFT
 27

	)

24287 
	#LCDIF_RL_TOG_READ_WRITEB_MASK
 0x10000000u

	)

24288 
	#LCDIF_RL_TOG_READ_WRITEB_SHIFT
 28

	)

24289 
	#LCDIF_RL_TOG_YCBCR422_INPUT_MASK
 0x20000000u

	)

24290 
	#LCDIF_RL_TOG_YCBCR422_INPUT_SHIFT
 29

	)

24291 
	#LCDIF_RL_TOG_CLKGATE_MASK
 0x40000000u

	)

24292 
	#LCDIF_RL_TOG_CLKGATE_SHIFT
 30

	)

24293 
	#LCDIF_RL_TOG_SFTRST_MASK
 0x80000000u

	)

24294 
	#LCDIF_RL_TOG_SFTRST_SHIFT
 31

	)

24296 
	#LCDIF_CTRL1_RESET_MASK
 0x1u

	)

24297 
	#LCDIF_CTRL1_RESET_SHIFT
 0

	)

24298 
	#LCDIF_CTRL1_MODE86_MASK
 0x2u

	)

24299 
	#LCDIF_CTRL1_MODE86_SHIFT
 1

	)

24300 
	#LCDIF_CTRL1_BUSY_ENABLE_MASK
 0x4u

	)

24301 
	#LCDIF_CTRL1_BUSY_ENABLE_SHIFT
 2

	)

24302 
	#LCDIF_CTRL1_RSRVD0_MASK
 0xF8u

	)

24303 
	#LCDIF_CTRL1_RSRVD0_SHIFT
 3

	)

24304 
	#LCDIF_CTRL1_RSRVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL1_RSRVD0_SHIFT
))&
LCDIF_CTRL1_RSRVD0_MASK
)

	)

24305 
	#LCDIF_CTRL1_VSYNC_EDGE_IRQ_MASK
 0x100u

	)

24306 
	#LCDIF_CTRL1_VSYNC_EDGE_IRQ_SHIFT
 8

	)

24307 
	#LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_MASK
 0x200u

	)

24308 
	#LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_SHIFT
 9

	)

24309 
	#LCDIF_CTRL1_UNDERFLOW_IRQ_MASK
 0x400u

	)

24310 
	#LCDIF_CTRL1_UNDERFLOW_IRQ_SHIFT
 10

	)

24311 
	#LCDIF_CTRL1_OVERFLOW_IRQ_MASK
 0x800u

	)

24312 
	#LCDIF_CTRL1_OVERFLOW_IRQ_SHIFT
 11

	)

24313 
	#LCDIF_CTRL1_VSYNC_EDGE_IRQ_EN_MASK
 0x1000u

	)

24314 
	#LCDIF_CTRL1_VSYNC_EDGE_IRQ_EN_SHIFT
 12

	)

24315 
	#LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_EN_MASK
 0x2000u

	)

24316 
	#LCDIF_CTRL1_CUR_FRAME_DONE_IRQ_EN_SHIFT
 13

	)

24317 
	#LCDIF_CTRL1_UNDERFLOW_IRQ_EN_MASK
 0x4000u

	)

24318 
	#LCDIF_CTRL1_UNDERFLOW_IRQ_EN_SHIFT
 14

	)

24319 
	#LCDIF_CTRL1_OVERFLOW_IRQ_EN_MASK
 0x8000u

	)

24320 
	#LCDIF_CTRL1_OVERFLOW_IRQ_EN_SHIFT
 15

	)

24321 
	#LCDIF_CTRL1_BYTE_PACKING_FORMAT_MASK
 0xF0000u

	)

24322 
	#LCDIF_CTRL1_BYTE_PACKING_FORMAT_SHIFT
 16

	)

24323 
	#LCDIF_CTRL1_BYTE_PACKING_FORMAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL1_BYTE_PACKING_FORMAT_SHIFT
))&
LCDIF_CTRL1_BYTE_PACKING_FORMAT_MASK
)

	)

24324 
	#LCDIF_CTRL1_IRQ_ON_ALTERNATE_FIELDS_MASK
 0x100000u

	)

24325 
	#LCDIF_CTRL1_IRQ_ON_ALTERNATE_FIELDS_SHIFT
 20

	)

24326 
	#LCDIF_CTRL1_FIFO_CLEAR_MASK
 0x200000u

	)

24327 
	#LCDIF_CTRL1_FIFO_CLEAR_SHIFT
 21

	)

24328 
	#LCDIF_CTRL1_START_INTERLACE_FROM_SECOND_FIELD_MASK
 0x400000u

	)

24329 
	#LCDIF_CTRL1_START_INTERLACE_FROM_SECOND_FIELD_SHIFT
 22

	)

24330 
	#LCDIF_CTRL1_INTERLACE_FIELDS_MASK
 0x800000u

	)

24331 
	#LCDIF_CTRL1_INTERLACE_FIELDS_SHIFT
 23

	)

24332 
	#LCDIF_CTRL1_RECOVER_ON_UNDERFLOW_MASK
 0x1000000u

	)

24333 
	#LCDIF_CTRL1_RECOVER_ON_UNDERFLOW_SHIFT
 24

	)

24334 
	#LCDIF_CTRL1_BM_ERROR_IRQ_MASK
 0x2000000u

	)

24335 
	#LCDIF_CTRL1_BM_ERROR_IRQ_SHIFT
 25

	)

24336 
	#LCDIF_CTRL1_BM_ERROR_IRQ_EN_MASK
 0x4000000u

	)

24337 
	#LCDIF_CTRL1_BM_ERROR_IRQ_EN_SHIFT
 26

	)

24338 
	#LCDIF_CTRL1_COMBINE_MPU_WR_STRB_MASK
 0x8000000u

	)

24339 
	#LCDIF_CTRL1_COMBINE_MPU_WR_STRB_SHIFT
 27

	)

24340 
	#LCDIF_CTRL1_RSRVD1_MASK
 0xF0000000u

	)

24341 
	#LCDIF_CTRL1_RSRVD1_SHIFT
 28

	)

24342 
	#LCDIF_CTRL1_RSRVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL1_RSRVD1_SHIFT
))&
LCDIF_CTRL1_RSRVD1_MASK
)

	)

24344 
	#LCDIF_CTRL1_SET_RESET_MASK
 0x1u

	)

24345 
	#LCDIF_CTRL1_SET_RESET_SHIFT
 0

	)

24346 
	#LCDIF_CTRL1_SET_MODE86_MASK
 0x2u

	)

24347 
	#LCDIF_CTRL1_SET_MODE86_SHIFT
 1

	)

24348 
	#LCDIF_CTRL1_SET_BUSY_ENABLE_MASK
 0x4u

	)

24349 
	#LCDIF_CTRL1_SET_BUSY_ENABLE_SHIFT
 2

	)

24350 
	#LCDIF_CTRL1_SET_RSRVD0_MASK
 0xF8u

	)

24351 
	#LCDIF_CTRL1_SET_RSRVD0_SHIFT
 3

	)

24352 
	#LCDIF_CTRL1_SET_RSRVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL1_SET_RSRVD0_SHIFT
))&
LCDIF_CTRL1_SET_RSRVD0_MASK
)

	)

24353 
	#LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_MASK
 0x100u

	)

24354 
	#LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_SHIFT
 8

	)

24355 
	#LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_MASK
 0x200u

	)

24356 
	#LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_SHIFT
 9

	)

24357 
	#LCDIF_CTRL1_SET_UNDERFLOW_IRQ_MASK
 0x400u

	)

24358 
	#LCDIF_CTRL1_SET_UNDERFLOW_IRQ_SHIFT
 10

	)

24359 
	#LCDIF_CTRL1_SET_OVERFLOW_IRQ_MASK
 0x800u

	)

24360 
	#LCDIF_CTRL1_SET_OVERFLOW_IRQ_SHIFT
 11

	)

24361 
	#LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_EN_MASK
 0x1000u

	)

24362 
	#LCDIF_CTRL1_SET_VSYNC_EDGE_IRQ_EN_SHIFT
 12

	)

24363 
	#LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_EN_MASK
 0x2000u

	)

24364 
	#LCDIF_CTRL1_SET_CUR_FRAME_DONE_IRQ_EN_SHIFT
 13

	)

24365 
	#LCDIF_CTRL1_SET_UNDERFLOW_IRQ_EN_MASK
 0x4000u

	)

24366 
	#LCDIF_CTRL1_SET_UNDERFLOW_IRQ_EN_SHIFT
 14

	)

24367 
	#LCDIF_CTRL1_SET_OVERFLOW_IRQ_EN_MASK
 0x8000u

	)

24368 
	#LCDIF_CTRL1_SET_OVERFLOW_IRQ_EN_SHIFT
 15

	)

24369 
	#LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT_MASK
 0xF0000u

	)

24370 
	#LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT_SHIFT
 16

	)

24371 
	#LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT_SHIFT
))&
LCDIF_CTRL1_SET_BYTE_PACKING_FORMAT_MASK
)

	)

24372 
	#LCDIF_CTRL1_SET_IRQ_ON_ALTERNATE_FIELDS_MASK
 0x100000u

	)

24373 
	#LCDIF_CTRL1_SET_IRQ_ON_ALTERNATE_FIELDS_SHIFT
 20

	)

24374 
	#LCDIF_CTRL1_SET_FIFO_CLEAR_MASK
 0x200000u

	)

24375 
	#LCDIF_CTRL1_SET_FIFO_CLEAR_SHIFT
 21

	)

24376 
	#LCDIF_CTRL1_SET_START_INTERLACE_FROM_SECOND_FIELD_MASK
 0x400000u

	)

24377 
	#LCDIF_CTRL1_SET_START_INTERLACE_FROM_SECOND_FIELD_SHIFT
 22

	)

24378 
	#LCDIF_CTRL1_SET_INTERLACE_FIELDS_MASK
 0x800000u

	)

24379 
	#LCDIF_CTRL1_SET_INTERLACE_FIELDS_SHIFT
 23

	)

24380 
	#LCDIF_CTRL1_SET_RECOVER_ON_UNDERFLOW_MASK
 0x1000000u

	)

24381 
	#LCDIF_CTRL1_SET_RECOVER_ON_UNDERFLOW_SHIFT
 24

	)

24382 
	#LCDIF_CTRL1_SET_BM_ERROR_IRQ_MASK
 0x2000000u

	)

24383 
	#LCDIF_CTRL1_SET_BM_ERROR_IRQ_SHIFT
 25

	)

24384 
	#LCDIF_CTRL1_SET_BM_ERROR_IRQ_EN_MASK
 0x4000000u

	)

24385 
	#LCDIF_CTRL1_SET_BM_ERROR_IRQ_EN_SHIFT
 26

	)

24386 
	#LCDIF_CTRL1_SET_COMBINE_MPU_WR_STRB_MASK
 0x8000000u

	)

24387 
	#LCDIF_CTRL1_SET_COMBINE_MPU_WR_STRB_SHIFT
 27

	)

24388 
	#LCDIF_CTRL1_SET_RSRVD1_MASK
 0xF0000000u

	)

24389 
	#LCDIF_CTRL1_SET_RSRVD1_SHIFT
 28

	)

24390 
	#LCDIF_CTRL1_SET_RSRVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL1_SET_RSRVD1_SHIFT
))&
LCDIF_CTRL1_SET_RSRVD1_MASK
)

	)

24392 
	#LCDIF_CTRL1_CLR_RESET_MASK
 0x1u

	)

24393 
	#LCDIF_CTRL1_CLR_RESET_SHIFT
 0

	)

24394 
	#LCDIF_CTRL1_CLR_MODE86_MASK
 0x2u

	)

24395 
	#LCDIF_CTRL1_CLR_MODE86_SHIFT
 1

	)

24396 
	#LCDIF_CTRL1_CLR_BUSY_ENABLE_MASK
 0x4u

	)

24397 
	#LCDIF_CTRL1_CLR_BUSY_ENABLE_SHIFT
 2

	)

24398 
	#LCDIF_CTRL1_CLR_RSRVD0_MASK
 0xF8u

	)

24399 
	#LCDIF_CTRL1_CLR_RSRVD0_SHIFT
 3

	)

24400 
	#LCDIF_CTRL1_CLR_RSRVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL1_CLR_RSRVD0_SHIFT
))&
LCDIF_CTRL1_CLR_RSRVD0_MASK
)

	)

24401 
	#LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_MASK
 0x100u

	)

24402 
	#LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_SHIFT
 8

	)

24403 
	#LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_MASK
 0x200u

	)

24404 
	#LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_SHIFT
 9

	)

24405 
	#LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_MASK
 0x400u

	)

24406 
	#LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_SHIFT
 10

	)

24407 
	#LCDIF_CTRL1_CLR_OVERFLOW_IRQ_MASK
 0x800u

	)

24408 
	#LCDIF_CTRL1_CLR_OVERFLOW_IRQ_SHIFT
 11

	)

24409 
	#LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_EN_MASK
 0x1000u

	)

24410 
	#LCDIF_CTRL1_CLR_VSYNC_EDGE_IRQ_EN_SHIFT
 12

	)

24411 
	#LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_EN_MASK
 0x2000u

	)

24412 
	#LCDIF_CTRL1_CLR_CUR_FRAME_DONE_IRQ_EN_SHIFT
 13

	)

24413 
	#LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_EN_MASK
 0x4000u

	)

24414 
	#LCDIF_CTRL1_CLR_UNDERFLOW_IRQ_EN_SHIFT
 14

	)

24415 
	#LCDIF_CTRL1_CLR_OVERFLOW_IRQ_EN_MASK
 0x8000u

	)

24416 
	#LCDIF_CTRL1_CLR_OVERFLOW_IRQ_EN_SHIFT
 15

	)

24417 
	#LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT_MASK
 0xF0000u

	)

24418 
	#LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT_SHIFT
 16

	)

24419 
	#LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT_SHIFT
))&
LCDIF_CTRL1_CLR_BYTE_PACKING_FORMAT_MASK
)

	)

24420 
	#LCDIF_CTRL1_CLR_IRQ_ON_ALTERNATE_FIELDS_MASK
 0x100000u

	)

24421 
	#LCDIF_CTRL1_CLR_IRQ_ON_ALTERNATE_FIELDS_SHIFT
 20

	)

24422 
	#LCDIF_CTRL1_CLR_FIFO_CLEAR_MASK
 0x200000u

	)

24423 
	#LCDIF_CTRL1_CLR_FIFO_CLEAR_SHIFT
 21

	)

24424 
	#LCDIF_CTRL1_CLR_START_INTERLACE_FROM_SECOND_FIELD_MASK
 0x400000u

	)

24425 
	#LCDIF_CTRL1_CLR_START_INTERLACE_FROM_SECOND_FIELD_SHIFT
 22

	)

24426 
	#LCDIF_CTRL1_CLR_INTERLACE_FIELDS_MASK
 0x800000u

	)

24427 
	#LCDIF_CTRL1_CLR_INTERLACE_FIELDS_SHIFT
 23

	)

24428 
	#LCDIF_CTRL1_CLR_RECOVER_ON_UNDERFLOW_MASK
 0x1000000u

	)

24429 
	#LCDIF_CTRL1_CLR_RECOVER_ON_UNDERFLOW_SHIFT
 24

	)

24430 
	#LCDIF_CTRL1_CLR_BM_ERROR_IRQ_MASK
 0x2000000u

	)

24431 
	#LCDIF_CTRL1_CLR_BM_ERROR_IRQ_SHIFT
 25

	)

24432 
	#LCDIF_CTRL1_CLR_BM_ERROR_IRQ_EN_MASK
 0x4000000u

	)

24433 
	#LCDIF_CTRL1_CLR_BM_ERROR_IRQ_EN_SHIFT
 26

	)

24434 
	#LCDIF_CTRL1_CLR_COMBINE_MPU_WR_STRB_MASK
 0x8000000u

	)

24435 
	#LCDIF_CTRL1_CLR_COMBINE_MPU_WR_STRB_SHIFT
 27

	)

24436 
	#LCDIF_CTRL1_CLR_RSRVD1_MASK
 0xF0000000u

	)

24437 
	#LCDIF_CTRL1_CLR_RSRVD1_SHIFT
 28

	)

24438 
	#LCDIF_CTRL1_CLR_RSRVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL1_CLR_RSRVD1_SHIFT
))&
LCDIF_CTRL1_CLR_RSRVD1_MASK
)

	)

24440 
	#LCDIF_CTRL1_TOG_RESET_MASK
 0x1u

	)

24441 
	#LCDIF_CTRL1_TOG_RESET_SHIFT
 0

	)

24442 
	#LCDIF_CTRL1_TOG_MODE86_MASK
 0x2u

	)

24443 
	#LCDIF_CTRL1_TOG_MODE86_SHIFT
 1

	)

24444 
	#LCDIF_CTRL1_TOG_BUSY_ENABLE_MASK
 0x4u

	)

24445 
	#LCDIF_CTRL1_TOG_BUSY_ENABLE_SHIFT
 2

	)

24446 
	#LCDIF_CTRL1_TOG_RSRVD0_MASK
 0xF8u

	)

24447 
	#LCDIF_CTRL1_TOG_RSRVD0_SHIFT
 3

	)

24448 
	#LCDIF_CTRL1_TOG_RSRVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL1_TOG_RSRVD0_SHIFT
))&
LCDIF_CTRL1_TOG_RSRVD0_MASK
)

	)

24449 
	#LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_MASK
 0x100u

	)

24450 
	#LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_SHIFT
 8

	)

24451 
	#LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_MASK
 0x200u

	)

24452 
	#LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_SHIFT
 9

	)

24453 
	#LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_MASK
 0x400u

	)

24454 
	#LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_SHIFT
 10

	)

24455 
	#LCDIF_CTRL1_TOG_OVERFLOW_IRQ_MASK
 0x800u

	)

24456 
	#LCDIF_CTRL1_TOG_OVERFLOW_IRQ_SHIFT
 11

	)

24457 
	#LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_EN_MASK
 0x1000u

	)

24458 
	#LCDIF_CTRL1_TOG_VSYNC_EDGE_IRQ_EN_SHIFT
 12

	)

24459 
	#LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_EN_MASK
 0x2000u

	)

24460 
	#LCDIF_CTRL1_TOG_CUR_FRAME_DONE_IRQ_EN_SHIFT
 13

	)

24461 
	#LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_EN_MASK
 0x4000u

	)

24462 
	#LCDIF_CTRL1_TOG_UNDERFLOW_IRQ_EN_SHIFT
 14

	)

24463 
	#LCDIF_CTRL1_TOG_OVERFLOW_IRQ_EN_MASK
 0x8000u

	)

24464 
	#LCDIF_CTRL1_TOG_OVERFLOW_IRQ_EN_SHIFT
 15

	)

24465 
	#LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT_MASK
 0xF0000u

	)

24466 
	#LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT_SHIFT
 16

	)

24467 
	#LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT_SHIFT
))&
LCDIF_CTRL1_TOG_BYTE_PACKING_FORMAT_MASK
)

	)

24468 
	#LCDIF_CTRL1_TOG_IRQ_ON_ALTERNATE_FIELDS_MASK
 0x100000u

	)

24469 
	#LCDIF_CTRL1_TOG_IRQ_ON_ALTERNATE_FIELDS_SHIFT
 20

	)

24470 
	#LCDIF_CTRL1_TOG_FIFO_CLEAR_MASK
 0x200000u

	)

24471 
	#LCDIF_CTRL1_TOG_FIFO_CLEAR_SHIFT
 21

	)

24472 
	#LCDIF_CTRL1_TOG_START_INTERLACE_FROM_SECOND_FIELD_MASK
 0x400000u

	)

24473 
	#LCDIF_CTRL1_TOG_START_INTERLACE_FROM_SECOND_FIELD_SHIFT
 22

	)

24474 
	#LCDIF_CTRL1_TOG_INTERLACE_FIELDS_MASK
 0x800000u

	)

24475 
	#LCDIF_CTRL1_TOG_INTERLACE_FIELDS_SHIFT
 23

	)

24476 
	#LCDIF_CTRL1_TOG_RECOVER_ON_UNDERFLOW_MASK
 0x1000000u

	)

24477 
	#LCDIF_CTRL1_TOG_RECOVER_ON_UNDERFLOW_SHIFT
 24

	)

24478 
	#LCDIF_CTRL1_TOG_BM_ERROR_IRQ_MASK
 0x2000000u

	)

24479 
	#LCDIF_CTRL1_TOG_BM_ERROR_IRQ_SHIFT
 25

	)

24480 
	#LCDIF_CTRL1_TOG_BM_ERROR_IRQ_EN_MASK
 0x4000000u

	)

24481 
	#LCDIF_CTRL1_TOG_BM_ERROR_IRQ_EN_SHIFT
 26

	)

24482 
	#LCDIF_CTRL1_TOG_COMBINE_MPU_WR_STRB_MASK
 0x8000000u

	)

24483 
	#LCDIF_CTRL1_TOG_COMBINE_MPU_WR_STRB_SHIFT
 27

	)

24484 
	#LCDIF_CTRL1_TOG_RSRVD1_MASK
 0xF0000000u

	)

24485 
	#LCDIF_CTRL1_TOG_RSRVD1_SHIFT
 28

	)

24486 
	#LCDIF_CTRL1_TOG_RSRVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL1_TOG_RSRVD1_SHIFT
))&
LCDIF_CTRL1_TOG_RSRVD1_MASK
)

	)

24488 
	#LCDIF_CTRL2_RSRVD0_MASK
 0x1u

	)

24489 
	#LCDIF_CTRL2_RSRVD0_SHIFT
 0

	)

24490 
	#LCDIF_CTRL2_INITIAL_DUMMY_READ_MASK
 0xEu

	)

24491 
	#LCDIF_CTRL2_INITIAL_DUMMY_READ_SHIFT
 1

	)

24492 
	#LCDIF_CTRL2_INITIAL_DUMMY_READ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_INITIAL_DUMMY_READ_SHIFT
))&
LCDIF_CTRL2_INITIAL_DUMMY_READ_MASK
)

	)

24493 
	#LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS_MASK
 0x70u

	)

24494 
	#LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT
 4

	)

24495 
	#LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT
))&
LCDIF_CTRL2_READ_MODE_NUM_PACKED_SUBWORDS_MASK
)

	)

24496 
	#LCDIF_CTRL2_RSRVD1_MASK
 0x80u

	)

24497 
	#LCDIF_CTRL2_RSRVD1_SHIFT
 7

	)

24498 
	#LCDIF_CTRL2_READ_MODE_6_BIT_INPUT_MASK
 0x100u

	)

24499 
	#LCDIF_CTRL2_READ_MODE_6_BIT_INPUT_SHIFT
 8

	)

24500 
	#LCDIF_CTRL2_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK
 0x200u

	)

24501 
	#LCDIF_CTRL2_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT
 9

	)

24502 
	#LCDIF_CTRL2_READ_PACK_DIR_MASK
 0x400u

	)

24503 
	#LCDIF_CTRL2_READ_PACK_DIR_SHIFT
 10

	)

24504 
	#LCDIF_CTRL2_RSRVD2_MASK
 0x800u

	)

24505 
	#LCDIF_CTRL2_RSRVD2_SHIFT
 11

	)

24506 
	#LCDIF_CTRL2_EVEN_LINE_PATTERN_MASK
 0x7000u

	)

24507 
	#LCDIF_CTRL2_EVEN_LINE_PATTERN_SHIFT
 12

	)

24508 
	#LCDIF_CTRL2_EVEN_LINE_PATTERN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_EVEN_LINE_PATTERN_SHIFT
))&
LCDIF_CTRL2_EVEN_LINE_PATTERN_MASK
)

	)

24509 
	#LCDIF_CTRL2_RSRVD3_MASK
 0x8000u

	)

24510 
	#LCDIF_CTRL2_RSRVD3_SHIFT
 15

	)

24511 
	#LCDIF_CTRL2_ODD_LINE_PATTERN_MASK
 0x70000u

	)

24512 
	#LCDIF_CTRL2_ODD_LINE_PATTERN_SHIFT
 16

	)

24513 
	#LCDIF_CTRL2_ODD_LINE_PATTERN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_ODD_LINE_PATTERN_SHIFT
))&
LCDIF_CTRL2_ODD_LINE_PATTERN_MASK
)

	)

24514 
	#LCDIF_CTRL2_RSRVD4_MASK
 0x80000u

	)

24515 
	#LCDIF_CTRL2_RSRVD4_SHIFT
 19

	)

24516 
	#LCDIF_CTRL2_BURST_LEN_8_MASK
 0x100000u

	)

24517 
	#LCDIF_CTRL2_BURST_LEN_8_SHIFT
 20

	)

24518 
	#LCDIF_CTRL2_OUTSTANDING_REQS_MASK
 0xE00000u

	)

24519 
	#LCDIF_CTRL2_OUTSTANDING_REQS_SHIFT
 21

	)

24520 
	#LCDIF_CTRL2_OUTSTANDING_REQS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_OUTSTANDING_REQS_SHIFT
))&
LCDIF_CTRL2_OUTSTANDING_REQS_MASK
)

	)

24521 
	#LCDIF_CTRL2_RSRVD5_MASK
 0xFF000000u

	)

24522 
	#LCDIF_CTRL2_RSRVD5_SHIFT
 24

	)

24523 
	#LCDIF_CTRL2_RSRVD5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_RSRVD5_SHIFT
))&
LCDIF_CTRL2_RSRVD5_MASK
)

	)

24525 
	#LCDIF_CTRL2_SET_RSRVD0_MASK
 0x1u

	)

24526 
	#LCDIF_CTRL2_SET_RSRVD0_SHIFT
 0

	)

24527 
	#LCDIF_CTRL2_SET_INITIAL_DUMMY_READ_MASK
 0xEu

	)

24528 
	#LCDIF_CTRL2_SET_INITIAL_DUMMY_READ_SHIFT
 1

	)

24529 
	#LCDIF_CTRL2_SET_INITIAL_DUMMY_READ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_SET_INITIAL_DUMMY_READ_SHIFT
))&
LCDIF_CTRL2_SET_INITIAL_DUMMY_READ_MASK
)

	)

24530 
	#LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS_MASK
 0x70u

	)

24531 
	#LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT
 4

	)

24532 
	#LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT
))&
LCDIF_CTRL2_SET_READ_MODE_NUM_PACKED_SUBWORDS_MASK
)

	)

24533 
	#LCDIF_CTRL2_SET_RSRVD1_MASK
 0x80u

	)

24534 
	#LCDIF_CTRL2_SET_RSRVD1_SHIFT
 7

	)

24535 
	#LCDIF_CTRL2_SET_READ_MODE_6_BIT_INPUT_MASK
 0x100u

	)

24536 
	#LCDIF_CTRL2_SET_READ_MODE_6_BIT_INPUT_SHIFT
 8

	)

24537 
	#LCDIF_CTRL2_SET_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK
 0x200u

	)

24538 
	#LCDIF_CTRL2_SET_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT
 9

	)

24539 
	#LCDIF_CTRL2_SET_READ_PACK_DIR_MASK
 0x400u

	)

24540 
	#LCDIF_CTRL2_SET_READ_PACK_DIR_SHIFT
 10

	)

24541 
	#LCDIF_CTRL2_SET_RSRVD2_MASK
 0x800u

	)

24542 
	#LCDIF_CTRL2_SET_RSRVD2_SHIFT
 11

	)

24543 
	#LCDIF_CTRL2_SET_EVEN_LINE_PATTERN_MASK
 0x7000u

	)

24544 
	#LCDIF_CTRL2_SET_EVEN_LINE_PATTERN_SHIFT
 12

	)

24545 
	#LCDIF_CTRL2_SET_EVEN_LINE_PATTERN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_SET_EVEN_LINE_PATTERN_SHIFT
))&
LCDIF_CTRL2_SET_EVEN_LINE_PATTERN_MASK
)

	)

24546 
	#LCDIF_CTRL2_SET_RSRVD3_MASK
 0x8000u

	)

24547 
	#LCDIF_CTRL2_SET_RSRVD3_SHIFT
 15

	)

24548 
	#LCDIF_CTRL2_SET_ODD_LINE_PATTERN_MASK
 0x70000u

	)

24549 
	#LCDIF_CTRL2_SET_ODD_LINE_PATTERN_SHIFT
 16

	)

24550 
	#LCDIF_CTRL2_SET_ODD_LINE_PATTERN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_SET_ODD_LINE_PATTERN_SHIFT
))&
LCDIF_CTRL2_SET_ODD_LINE_PATTERN_MASK
)

	)

24551 
	#LCDIF_CTRL2_SET_RSRVD4_MASK
 0x80000u

	)

24552 
	#LCDIF_CTRL2_SET_RSRVD4_SHIFT
 19

	)

24553 
	#LCDIF_CTRL2_SET_BURST_LEN_8_MASK
 0x100000u

	)

24554 
	#LCDIF_CTRL2_SET_BURST_LEN_8_SHIFT
 20

	)

24555 
	#LCDIF_CTRL2_SET_OUTSTANDING_REQS_MASK
 0xE00000u

	)

24556 
	#LCDIF_CTRL2_SET_OUTSTANDING_REQS_SHIFT
 21

	)

24557 
	#LCDIF_CTRL2_SET_OUTSTANDING_REQS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_SET_OUTSTANDING_REQS_SHIFT
))&
LCDIF_CTRL2_SET_OUTSTANDING_REQS_MASK
)

	)

24558 
	#LCDIF_CTRL2_SET_RSRVD5_MASK
 0xFF000000u

	)

24559 
	#LCDIF_CTRL2_SET_RSRVD5_SHIFT
 24

	)

24560 
	#LCDIF_CTRL2_SET_RSRVD5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_SET_RSRVD5_SHIFT
))&
LCDIF_CTRL2_SET_RSRVD5_MASK
)

	)

24562 
	#LCDIF_CTRL2_CLR_RSRVD0_MASK
 0x1u

	)

24563 
	#LCDIF_CTRL2_CLR_RSRVD0_SHIFT
 0

	)

24564 
	#LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ_MASK
 0xEu

	)

24565 
	#LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ_SHIFT
 1

	)

24566 
	#LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ_SHIFT
))&
LCDIF_CTRL2_CLR_INITIAL_DUMMY_READ_MASK
)

	)

24567 
	#LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS_MASK
 0x70u

	)

24568 
	#LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT
 4

	)

24569 
	#LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT
))&
LCDIF_CTRL2_CLR_READ_MODE_NUM_PACKED_SUBWORDS_MASK
)

	)

24570 
	#LCDIF_CTRL2_CLR_RSRVD1_MASK
 0x80u

	)

24571 
	#LCDIF_CTRL2_CLR_RSRVD1_SHIFT
 7

	)

24572 
	#LCDIF_CTRL2_CLR_READ_MODE_6_BIT_INPUT_MASK
 0x100u

	)

24573 
	#LCDIF_CTRL2_CLR_READ_MODE_6_BIT_INPUT_SHIFT
 8

	)

24574 
	#LCDIF_CTRL2_CLR_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK
 0x200u

	)

24575 
	#LCDIF_CTRL2_CLR_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT
 9

	)

24576 
	#LCDIF_CTRL2_CLR_READ_PACK_DIR_MASK
 0x400u

	)

24577 
	#LCDIF_CTRL2_CLR_READ_PACK_DIR_SHIFT
 10

	)

24578 
	#LCDIF_CTRL2_CLR_RSRVD2_MASK
 0x800u

	)

24579 
	#LCDIF_CTRL2_CLR_RSRVD2_SHIFT
 11

	)

24580 
	#LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN_MASK
 0x7000u

	)

24581 
	#LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN_SHIFT
 12

	)

24582 
	#LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN_SHIFT
))&
LCDIF_CTRL2_CLR_EVEN_LINE_PATTERN_MASK
)

	)

24583 
	#LCDIF_CTRL2_CLR_RSRVD3_MASK
 0x8000u

	)

24584 
	#LCDIF_CTRL2_CLR_RSRVD3_SHIFT
 15

	)

24585 
	#LCDIF_CTRL2_CLR_ODD_LINE_PATTERN_MASK
 0x70000u

	)

24586 
	#LCDIF_CTRL2_CLR_ODD_LINE_PATTERN_SHIFT
 16

	)

24587 
	#LCDIF_CTRL2_CLR_ODD_LINE_PATTERN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_CLR_ODD_LINE_PATTERN_SHIFT
))&
LCDIF_CTRL2_CLR_ODD_LINE_PATTERN_MASK
)

	)

24588 
	#LCDIF_CTRL2_CLR_RSRVD4_MASK
 0x80000u

	)

24589 
	#LCDIF_CTRL2_CLR_RSRVD4_SHIFT
 19

	)

24590 
	#LCDIF_CTRL2_CLR_BURST_LEN_8_MASK
 0x100000u

	)

24591 
	#LCDIF_CTRL2_CLR_BURST_LEN_8_SHIFT
 20

	)

24592 
	#LCDIF_CTRL2_CLR_OUTSTANDING_REQS_MASK
 0xE00000u

	)

24593 
	#LCDIF_CTRL2_CLR_OUTSTANDING_REQS_SHIFT
 21

	)

24594 
	#LCDIF_CTRL2_CLR_OUTSTANDING_REQS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_CLR_OUTSTANDING_REQS_SHIFT
))&
LCDIF_CTRL2_CLR_OUTSTANDING_REQS_MASK
)

	)

24595 
	#LCDIF_CTRL2_CLR_RSRVD5_MASK
 0xFF000000u

	)

24596 
	#LCDIF_CTRL2_CLR_RSRVD5_SHIFT
 24

	)

24597 
	#LCDIF_CTRL2_CLR_RSRVD5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_CLR_RSRVD5_SHIFT
))&
LCDIF_CTRL2_CLR_RSRVD5_MASK
)

	)

24599 
	#LCDIF_CTRL2_TOG_RSRVD0_MASK
 0x1u

	)

24600 
	#LCDIF_CTRL2_TOG_RSRVD0_SHIFT
 0

	)

24601 
	#LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ_MASK
 0xEu

	)

24602 
	#LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ_SHIFT
 1

	)

24603 
	#LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ_SHIFT
))&
LCDIF_CTRL2_TOG_INITIAL_DUMMY_READ_MASK
)

	)

24604 
	#LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS_MASK
 0x70u

	)

24605 
	#LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT
 4

	)

24606 
	#LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS_SHIFT
))&
LCDIF_CTRL2_TOG_READ_MODE_NUM_PACKED_SUBWORDS_MASK
)

	)

24607 
	#LCDIF_CTRL2_TOG_RSRVD1_MASK
 0x80u

	)

24608 
	#LCDIF_CTRL2_TOG_RSRVD1_SHIFT
 7

	)

24609 
	#LCDIF_CTRL2_TOG_READ_MODE_6_BIT_INPUT_MASK
 0x100u

	)

24610 
	#LCDIF_CTRL2_TOG_READ_MODE_6_BIT_INPUT_SHIFT
 8

	)

24611 
	#LCDIF_CTRL2_TOG_READ_MODE_OUTPUT_IN_RGB_FORMAT_MASK
 0x200u

	)

24612 
	#LCDIF_CTRL2_TOG_READ_MODE_OUTPUT_IN_RGB_FORMAT_SHIFT
 9

	)

24613 
	#LCDIF_CTRL2_TOG_READ_PACK_DIR_MASK
 0x400u

	)

24614 
	#LCDIF_CTRL2_TOG_READ_PACK_DIR_SHIFT
 10

	)

24615 
	#LCDIF_CTRL2_TOG_RSRVD2_MASK
 0x800u

	)

24616 
	#LCDIF_CTRL2_TOG_RSRVD2_SHIFT
 11

	)

24617 
	#LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN_MASK
 0x7000u

	)

24618 
	#LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN_SHIFT
 12

	)

24619 
	#LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN_SHIFT
))&
LCDIF_CTRL2_TOG_EVEN_LINE_PATTERN_MASK
)

	)

24620 
	#LCDIF_CTRL2_TOG_RSRVD3_MASK
 0x8000u

	)

24621 
	#LCDIF_CTRL2_TOG_RSRVD3_SHIFT
 15

	)

24622 
	#LCDIF_CTRL2_TOG_ODD_LINE_PATTERN_MASK
 0x70000u

	)

24623 
	#LCDIF_CTRL2_TOG_ODD_LINE_PATTERN_SHIFT
 16

	)

24624 
	#LCDIF_CTRL2_TOG_ODD_LINE_PATTERN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_TOG_ODD_LINE_PATTERN_SHIFT
))&
LCDIF_CTRL2_TOG_ODD_LINE_PATTERN_MASK
)

	)

24625 
	#LCDIF_CTRL2_TOG_RSRVD4_MASK
 0x80000u

	)

24626 
	#LCDIF_CTRL2_TOG_RSRVD4_SHIFT
 19

	)

24627 
	#LCDIF_CTRL2_TOG_BURST_LEN_8_MASK
 0x100000u

	)

24628 
	#LCDIF_CTRL2_TOG_BURST_LEN_8_SHIFT
 20

	)

24629 
	#LCDIF_CTRL2_TOG_OUTSTANDING_REQS_MASK
 0xE00000u

	)

24630 
	#LCDIF_CTRL2_TOG_OUTSTANDING_REQS_SHIFT
 21

	)

24631 
	#LCDIF_CTRL2_TOG_OUTSTANDING_REQS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_TOG_OUTSTANDING_REQS_SHIFT
))&
LCDIF_CTRL2_TOG_OUTSTANDING_REQS_MASK
)

	)

24632 
	#LCDIF_CTRL2_TOG_RSRVD5_MASK
 0xFF000000u

	)

24633 
	#LCDIF_CTRL2_TOG_RSRVD5_SHIFT
 24

	)

24634 
	#LCDIF_CTRL2_TOG_RSRVD5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CTRL2_TOG_RSRVD5_SHIFT
))&
LCDIF_CTRL2_TOG_RSRVD5_MASK
)

	)

24636 
	#LCDIF_TRANSFER_COUNT_H_COUNT_MASK
 0xFFFFu

	)

24637 
	#LCDIF_TRANSFER_COUNT_H_COUNT_SHIFT
 0

	)

24638 
	#LCDIF_TRANSFER_COUNT_H_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_TRANSFER_COUNT_H_COUNT_SHIFT
))&
LCDIF_TRANSFER_COUNT_H_COUNT_MASK
)

	)

24639 
	#LCDIF_TRANSFER_COUNT_V_COUNT_MASK
 0xFFFF0000u

	)

24640 
	#LCDIF_TRANSFER_COUNT_V_COUNT_SHIFT
 16

	)

24641 
	#LCDIF_TRANSFER_COUNT_V_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_TRANSFER_COUNT_V_COUNT_SHIFT
))&
LCDIF_TRANSFER_COUNT_V_COUNT_MASK
)

	)

24643 
	#LCDIF_CUR_BUF_ADDR_MASK
 0xFFFFFFFFu

	)

24644 
	#LCDIF_CUR_BUF_ADDR_SHIFT
 0

	)

24645 
	#LCDIF_CUR_BUF_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CUR_BUF_ADDR_SHIFT
))&
LCDIF_CUR_BUF_ADDR_MASK
)

	)

24647 
	#LCDIF_NEXT_BUF_ADDR_MASK
 0xFFFFFFFFu

	)

24648 
	#LCDIF_NEXT_BUF_ADDR_SHIFT
 0

	)

24649 
	#LCDIF_NEXT_BUF_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_NEXT_BUF_ADDR_SHIFT
))&
LCDIF_NEXT_BUF_ADDR_MASK
)

	)

24651 
	#LCDIF_TIMING_DATA_SETUP_MASK
 0xFFu

	)

24652 
	#LCDIF_TIMING_DATA_SETUP_SHIFT
 0

	)

24653 
	#LCDIF_TIMING_DATA_SETUP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_TIMING_DATA_SETUP_SHIFT
))&
LCDIF_TIMING_DATA_SETUP_MASK
)

	)

24654 
	#LCDIF_TIMING_DATA_HOLD_MASK
 0xFF00u

	)

24655 
	#LCDIF_TIMING_DATA_HOLD_SHIFT
 8

	)

24656 
	#LCDIF_TIMING_DATA_HOLD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_TIMING_DATA_HOLD_SHIFT
))&
LCDIF_TIMING_DATA_HOLD_MASK
)

	)

24657 
	#LCDIF_TIMING_CMD_SETUP_MASK
 0xFF0000u

	)

24658 
	#LCDIF_TIMING_CMD_SETUP_SHIFT
 16

	)

24659 
	#LCDIF_TIMING_CMD_SETUP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_TIMING_CMD_SETUP_SHIFT
))&
LCDIF_TIMING_CMD_SETUP_MASK
)

	)

24660 
	#LCDIF_TIMING_CMD_HOLD_MASK
 0xFF000000u

	)

24661 
	#LCDIF_TIMING_CMD_HOLD_SHIFT
 24

	)

24662 
	#LCDIF_TIMING_CMD_HOLD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_TIMING_CMD_HOLD_SHIFT
))&
LCDIF_TIMING_CMD_HOLD_MASK
)

	)

24664 
	#LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_MASK
 0x3FFFFu

	)

24665 
	#LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_SHIFT
 0

	)

24666 
	#LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_SHIFT
))&
LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_MASK
)

	)

24667 
	#LCDIF_VDCTRL0_HALF_LINE_MODE_MASK
 0x40000u

	)

24668 
	#LCDIF_VDCTRL0_HALF_LINE_MODE_SHIFT
 18

	)

24669 
	#LCDIF_VDCTRL0_HALF_LINE_MASK
 0x80000u

	)

24670 
	#LCDIF_VDCTRL0_HALF_LINE_SHIFT
 19

	)

24671 
	#LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_UNIT_MASK
 0x100000u

	)

24672 
	#LCDIF_VDCTRL0_VSYNC_PULSE_WIDTH_UNIT_SHIFT
 20

	)

24673 
	#LCDIF_VDCTRL0_VSYNC_PERIOD_UNIT_MASK
 0x200000u

	)

24674 
	#LCDIF_VDCTRL0_VSYNC_PERIOD_UNIT_SHIFT
 21

	)

24675 
	#LCDIF_VDCTRL0_RSRVD1_MASK
 0xC00000u

	)

24676 
	#LCDIF_VDCTRL0_RSRVD1_SHIFT
 22

	)

24677 
	#LCDIF_VDCTRL0_RSRVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL0_RSRVD1_SHIFT
))&
LCDIF_VDCTRL0_RSRVD1_MASK
)

	)

24678 
	#LCDIF_VDCTRL0_ENABLE_POL_MASK
 0x1000000u

	)

24679 
	#LCDIF_VDCTRL0_ENABLE_POL_SHIFT
 24

	)

24680 
	#LCDIF_VDCTRL0_DOTCLK_POL_MASK
 0x2000000u

	)

24681 
	#LCDIF_VDCTRL0_DOTCLK_POL_SHIFT
 25

	)

24682 
	#LCDIF_VDCTRL0_HSYNC_POL_MASK
 0x4000000u

	)

24683 
	#LCDIF_VDCTRL0_HSYNC_POL_SHIFT
 26

	)

24684 
	#LCDIF_VDCTRL0_VSYNC_POL_MASK
 0x8000000u

	)

24685 
	#LCDIF_VDCTRL0_VSYNC_POL_SHIFT
 27

	)

24686 
	#LCDIF_VDCTRL0_ENABLE_PRESENT_MASK
 0x10000000u

	)

24687 
	#LCDIF_VDCTRL0_ENABLE_PRESENT_SHIFT
 28

	)

24688 
	#LCDIF_VDCTRL0_VSYNC_OEB_MASK
 0x20000000u

	)

24689 
	#LCDIF_VDCTRL0_VSYNC_OEB_SHIFT
 29

	)

24690 
	#LCDIF_VDCTRL0_RSRVD2_MASK
 0xC0000000u

	)

24691 
	#LCDIF_VDCTRL0_RSRVD2_SHIFT
 30

	)

24692 
	#LCDIF_VDCTRL0_RSRVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL0_RSRVD2_SHIFT
))&
LCDIF_VDCTRL0_RSRVD2_MASK
)

	)

24694 
	#LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_MASK
 0x3FFFFu

	)

24695 
	#LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_SHIFT
 0

	)

24696 
	#LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_SHIFT
))&
LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_MASK
)

	)

24697 
	#LCDIF_VDCTRL0_SET_HALF_LINE_MODE_MASK
 0x40000u

	)

24698 
	#LCDIF_VDCTRL0_SET_HALF_LINE_MODE_SHIFT
 18

	)

24699 
	#LCDIF_VDCTRL0_SET_HALF_LINE_MASK
 0x80000u

	)

24700 
	#LCDIF_VDCTRL0_SET_HALF_LINE_SHIFT
 19

	)

24701 
	#LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_UNIT_MASK
 0x100000u

	)

24702 
	#LCDIF_VDCTRL0_SET_VSYNC_PULSE_WIDTH_UNIT_SHIFT
 20

	)

24703 
	#LCDIF_VDCTRL0_SET_VSYNC_PERIOD_UNIT_MASK
 0x200000u

	)

24704 
	#LCDIF_VDCTRL0_SET_VSYNC_PERIOD_UNIT_SHIFT
 21

	)

24705 
	#LCDIF_VDCTRL0_SET_RSRVD1_MASK
 0xC00000u

	)

24706 
	#LCDIF_VDCTRL0_SET_RSRVD1_SHIFT
 22

	)

24707 
	#LCDIF_VDCTRL0_SET_RSRVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL0_SET_RSRVD1_SHIFT
))&
LCDIF_VDCTRL0_SET_RSRVD1_MASK
)

	)

24708 
	#LCDIF_VDCTRL0_SET_ENABLE_POL_MASK
 0x1000000u

	)

24709 
	#LCDIF_VDCTRL0_SET_ENABLE_POL_SHIFT
 24

	)

24710 
	#LCDIF_VDCTRL0_SET_DOTCLK_POL_MASK
 0x2000000u

	)

24711 
	#LCDIF_VDCTRL0_SET_DOTCLK_POL_SHIFT
 25

	)

24712 
	#LCDIF_VDCTRL0_SET_HSYNC_POL_MASK
 0x4000000u

	)

24713 
	#LCDIF_VDCTRL0_SET_HSYNC_POL_SHIFT
 26

	)

24714 
	#LCDIF_VDCTRL0_SET_VSYNC_POL_MASK
 0x8000000u

	)

24715 
	#LCDIF_VDCTRL0_SET_VSYNC_POL_SHIFT
 27

	)

24716 
	#LCDIF_VDCTRL0_SET_ENABLE_PRESENT_MASK
 0x10000000u

	)

24717 
	#LCDIF_VDCTRL0_SET_ENABLE_PRESENT_SHIFT
 28

	)

24718 
	#LCDIF_VDCTRL0_SET_VSYNC_OEB_MASK
 0x20000000u

	)

24719 
	#LCDIF_VDCTRL0_SET_VSYNC_OEB_SHIFT
 29

	)

24720 
	#LCDIF_VDCTRL0_SET_RSRVD2_MASK
 0xC0000000u

	)

24721 
	#LCDIF_VDCTRL0_SET_RSRVD2_SHIFT
 30

	)

24722 
	#LCDIF_VDCTRL0_SET_RSRVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL0_SET_RSRVD2_SHIFT
))&
LCDIF_VDCTRL0_SET_RSRVD2_MASK
)

	)

24724 
	#LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_MASK
 0x3FFFFu

	)

24725 
	#LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_SHIFT
 0

	)

24726 
	#LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_SHIFT
))&
LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_MASK
)

	)

24727 
	#LCDIF_VDCTRL0_CLR_HALF_LINE_MODE_MASK
 0x40000u

	)

24728 
	#LCDIF_VDCTRL0_CLR_HALF_LINE_MODE_SHIFT
 18

	)

24729 
	#LCDIF_VDCTRL0_CLR_HALF_LINE_MASK
 0x80000u

	)

24730 
	#LCDIF_VDCTRL0_CLR_HALF_LINE_SHIFT
 19

	)

24731 
	#LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_UNIT_MASK
 0x100000u

	)

24732 
	#LCDIF_VDCTRL0_CLR_VSYNC_PULSE_WIDTH_UNIT_SHIFT
 20

	)

24733 
	#LCDIF_VDCTRL0_CLR_VSYNC_PERIOD_UNIT_MASK
 0x200000u

	)

24734 
	#LCDIF_VDCTRL0_CLR_VSYNC_PERIOD_UNIT_SHIFT
 21

	)

24735 
	#LCDIF_VDCTRL0_CLR_RSRVD1_MASK
 0xC00000u

	)

24736 
	#LCDIF_VDCTRL0_CLR_RSRVD1_SHIFT
 22

	)

24737 
	#LCDIF_VDCTRL0_CLR_RSRVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL0_CLR_RSRVD1_SHIFT
))&
LCDIF_VDCTRL0_CLR_RSRVD1_MASK
)

	)

24738 
	#LCDIF_VDCTRL0_CLR_ENABLE_POL_MASK
 0x1000000u

	)

24739 
	#LCDIF_VDCTRL0_CLR_ENABLE_POL_SHIFT
 24

	)

24740 
	#LCDIF_VDCTRL0_CLR_DOTCLK_POL_MASK
 0x2000000u

	)

24741 
	#LCDIF_VDCTRL0_CLR_DOTCLK_POL_SHIFT
 25

	)

24742 
	#LCDIF_VDCTRL0_CLR_HSYNC_POL_MASK
 0x4000000u

	)

24743 
	#LCDIF_VDCTRL0_CLR_HSYNC_POL_SHIFT
 26

	)

24744 
	#LCDIF_VDCTRL0_CLR_VSYNC_POL_MASK
 0x8000000u

	)

24745 
	#LCDIF_VDCTRL0_CLR_VSYNC_POL_SHIFT
 27

	)

24746 
	#LCDIF_VDCTRL0_CLR_ENABLE_PRESENT_MASK
 0x10000000u

	)

24747 
	#LCDIF_VDCTRL0_CLR_ENABLE_PRESENT_SHIFT
 28

	)

24748 
	#LCDIF_VDCTRL0_CLR_VSYNC_OEB_MASK
 0x20000000u

	)

24749 
	#LCDIF_VDCTRL0_CLR_VSYNC_OEB_SHIFT
 29

	)

24750 
	#LCDIF_VDCTRL0_CLR_RSRVD2_MASK
 0xC0000000u

	)

24751 
	#LCDIF_VDCTRL0_CLR_RSRVD2_SHIFT
 30

	)

24752 
	#LCDIF_VDCTRL0_CLR_RSRVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL0_CLR_RSRVD2_SHIFT
))&
LCDIF_VDCTRL0_CLR_RSRVD2_MASK
)

	)

24754 
	#LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_MASK
 0x3FFFFu

	)

24755 
	#LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_SHIFT
 0

	)

24756 
	#LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_SHIFT
))&
LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_MASK
)

	)

24757 
	#LCDIF_VDCTRL0_TOG_HALF_LINE_MODE_MASK
 0x40000u

	)

24758 
	#LCDIF_VDCTRL0_TOG_HALF_LINE_MODE_SHIFT
 18

	)

24759 
	#LCDIF_VDCTRL0_TOG_HALF_LINE_MASK
 0x80000u

	)

24760 
	#LCDIF_VDCTRL0_TOG_HALF_LINE_SHIFT
 19

	)

24761 
	#LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_UNIT_MASK
 0x100000u

	)

24762 
	#LCDIF_VDCTRL0_TOG_VSYNC_PULSE_WIDTH_UNIT_SHIFT
 20

	)

24763 
	#LCDIF_VDCTRL0_TOG_VSYNC_PERIOD_UNIT_MASK
 0x200000u

	)

24764 
	#LCDIF_VDCTRL0_TOG_VSYNC_PERIOD_UNIT_SHIFT
 21

	)

24765 
	#LCDIF_VDCTRL0_TOG_RSRVD1_MASK
 0xC00000u

	)

24766 
	#LCDIF_VDCTRL0_TOG_RSRVD1_SHIFT
 22

	)

24767 
	#LCDIF_VDCTRL0_TOG_RSRVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL0_TOG_RSRVD1_SHIFT
))&
LCDIF_VDCTRL0_TOG_RSRVD1_MASK
)

	)

24768 
	#LCDIF_VDCTRL0_TOG_ENABLE_POL_MASK
 0x1000000u

	)

24769 
	#LCDIF_VDCTRL0_TOG_ENABLE_POL_SHIFT
 24

	)

24770 
	#LCDIF_VDCTRL0_TOG_DOTCLK_POL_MASK
 0x2000000u

	)

24771 
	#LCDIF_VDCTRL0_TOG_DOTCLK_POL_SHIFT
 25

	)

24772 
	#LCDIF_VDCTRL0_TOG_HSYNC_POL_MASK
 0x4000000u

	)

24773 
	#LCDIF_VDCTRL0_TOG_HSYNC_POL_SHIFT
 26

	)

24774 
	#LCDIF_VDCTRL0_TOG_VSYNC_POL_MASK
 0x8000000u

	)

24775 
	#LCDIF_VDCTRL0_TOG_VSYNC_POL_SHIFT
 27

	)

24776 
	#LCDIF_VDCTRL0_TOG_ENABLE_PRESENT_MASK
 0x10000000u

	)

24777 
	#LCDIF_VDCTRL0_TOG_ENABLE_PRESENT_SHIFT
 28

	)

24778 
	#LCDIF_VDCTRL0_TOG_VSYNC_OEB_MASK
 0x20000000u

	)

24779 
	#LCDIF_VDCTRL0_TOG_VSYNC_OEB_SHIFT
 29

	)

24780 
	#LCDIF_VDCTRL0_TOG_RSRVD2_MASK
 0xC0000000u

	)

24781 
	#LCDIF_VDCTRL0_TOG_RSRVD2_SHIFT
 30

	)

24782 
	#LCDIF_VDCTRL0_TOG_RSRVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL0_TOG_RSRVD2_SHIFT
))&
LCDIF_VDCTRL0_TOG_RSRVD2_MASK
)

	)

24784 
	#LCDIF_VDCTRL1_VSYNC_PERIOD_MASK
 0xFFFFFFFFu

	)

24785 
	#LCDIF_VDCTRL1_VSYNC_PERIOD_SHIFT
 0

	)

24786 
	#LCDIF_VDCTRL1_VSYNC_PERIOD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL1_VSYNC_PERIOD_SHIFT
))&
LCDIF_VDCTRL1_VSYNC_PERIOD_MASK
)

	)

24788 
	#LCDIF_VDCTRL2_HSYNC_PERIOD_MASK
 0x3FFFFu

	)

24789 
	#LCDIF_VDCTRL2_HSYNC_PERIOD_SHIFT
 0

	)

24790 
	#LCDIF_VDCTRL2_HSYNC_PERIOD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL2_HSYNC_PERIOD_SHIFT
))&
LCDIF_VDCTRL2_HSYNC_PERIOD_MASK
)

	)

24791 
	#LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH_MASK
 0xFFFC0000u

	)

24792 
	#LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH_SHIFT
 18

	)

24793 
	#LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH_SHIFT
))&
LCDIF_VDCTRL2_HSYNC_PULSE_WIDTH_MASK
)

	)

24795 
	#LCDIF_VDCTRL3_VERTICAL_WAIT_CNT_MASK
 0xFFFFu

	)

24796 
	#LCDIF_VDCTRL3_VERTICAL_WAIT_CNT_SHIFT
 0

	)

24797 
	#LCDIF_VDCTRL3_VERTICAL_WAIT_CNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL3_VERTICAL_WAIT_CNT_SHIFT
))&
LCDIF_VDCTRL3_VERTICAL_WAIT_CNT_MASK
)

	)

24798 
	#LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT_MASK
 0xFFF0000u

	)

24799 
	#LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT_SHIFT
 16

	)

24800 
	#LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT_SHIFT
))&
LCDIF_VDCTRL3_HORIZONTAL_WAIT_CNT_MASK
)

	)

24801 
	#LCDIF_VDCTRL3_VSYNC_ONLY_MASK
 0x10000000u

	)

24802 
	#LCDIF_VDCTRL3_VSYNC_ONLY_SHIFT
 28

	)

24803 
	#LCDIF_VDCTRL3_MUX_SYNC_SIGNALS_MASK
 0x20000000u

	)

24804 
	#LCDIF_VDCTRL3_MUX_SYNC_SIGNALS_SHIFT
 29

	)

24805 
	#LCDIF_VDCTRL3_RSRVD0_MASK
 0xC0000000u

	)

24806 
	#LCDIF_VDCTRL3_RSRVD0_SHIFT
 30

	)

24807 
	#LCDIF_VDCTRL3_RSRVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL3_RSRVD0_SHIFT
))&
LCDIF_VDCTRL3_RSRVD0_MASK
)

	)

24809 
	#LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT_MASK
 0x3FFFFu

	)

24810 
	#LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT_SHIFT
 0

	)

24811 
	#LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT_SHIFT
))&
LCDIF_VDCTRL4_DOTCLK_H_VALID_DATA_CNT_MASK
)

	)

24812 
	#LCDIF_VDCTRL4_SYNC_SIGNALS_ON_MASK
 0x40000u

	)

24813 
	#LCDIF_VDCTRL4_SYNC_SIGNALS_ON_SHIFT
 18

	)

24814 
	#LCDIF_VDCTRL4_RSRVD0_MASK
 0x1FF80000u

	)

24815 
	#LCDIF_VDCTRL4_RSRVD0_SHIFT
 19

	)

24816 
	#LCDIF_VDCTRL4_RSRVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL4_RSRVD0_SHIFT
))&
LCDIF_VDCTRL4_RSRVD0_MASK
)

	)

24817 
	#LCDIF_VDCTRL4_DOTCLK_DLY_SEL_MASK
 0xE0000000u

	)

24818 
	#LCDIF_VDCTRL4_DOTCLK_DLY_SEL_SHIFT
 29

	)

24819 
	#LCDIF_VDCTRL4_DOTCLK_DLY_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VDCTRL4_DOTCLK_DLY_SEL_SHIFT
))&
LCDIF_VDCTRL4_DOTCLK_DLY_SEL_MASK
)

	)

24821 
	#LCDIF_DVICTRL0_H_BLANKING_CNT_MASK
 0xFFFu

	)

24822 
	#LCDIF_DVICTRL0_H_BLANKING_CNT_SHIFT
 0

	)

24823 
	#LCDIF_DVICTRL0_H_BLANKING_CNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL0_H_BLANKING_CNT_SHIFT
))&
LCDIF_DVICTRL0_H_BLANKING_CNT_MASK
)

	)

24824 
	#LCDIF_DVICTRL0_RSRVD0_MASK
 0xF000u

	)

24825 
	#LCDIF_DVICTRL0_RSRVD0_SHIFT
 12

	)

24826 
	#LCDIF_DVICTRL0_RSRVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL0_RSRVD0_SHIFT
))&
LCDIF_DVICTRL0_RSRVD0_MASK
)

	)

24827 
	#LCDIF_DVICTRL0_H_ACTIVE_CNT_MASK
 0xFFF0000u

	)

24828 
	#LCDIF_DVICTRL0_H_ACTIVE_CNT_SHIFT
 16

	)

24829 
	#LCDIF_DVICTRL0_H_ACTIVE_CNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL0_H_ACTIVE_CNT_SHIFT
))&
LCDIF_DVICTRL0_H_ACTIVE_CNT_MASK
)

	)

24830 
	#LCDIF_DVICTRL0_RSRVD1_MASK
 0xF0000000u

	)

24831 
	#LCDIF_DVICTRL0_RSRVD1_SHIFT
 28

	)

24832 
	#LCDIF_DVICTRL0_RSRVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL0_RSRVD1_SHIFT
))&
LCDIF_DVICTRL0_RSRVD1_MASK
)

	)

24834 
	#LCDIF_DVICTRL1_F2_START_LINE_MASK
 0x3FFu

	)

24835 
	#LCDIF_DVICTRL1_F2_START_LINE_SHIFT
 0

	)

24836 
	#LCDIF_DVICTRL1_F2_START_LINE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL1_F2_START_LINE_SHIFT
))&
LCDIF_DVICTRL1_F2_START_LINE_MASK
)

	)

24837 
	#LCDIF_DVICTRL1_F1_END_LINE_MASK
 0xFFC00u

	)

24838 
	#LCDIF_DVICTRL1_F1_END_LINE_SHIFT
 10

	)

24839 
	#LCDIF_DVICTRL1_F1_END_LINE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL1_F1_END_LINE_SHIFT
))&
LCDIF_DVICTRL1_F1_END_LINE_MASK
)

	)

24840 
	#LCDIF_DVICTRL1_F1_START_LINE_MASK
 0x3FF00000u

	)

24841 
	#LCDIF_DVICTRL1_F1_START_LINE_SHIFT
 20

	)

24842 
	#LCDIF_DVICTRL1_F1_START_LINE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL1_F1_START_LINE_SHIFT
))&
LCDIF_DVICTRL1_F1_START_LINE_MASK
)

	)

24843 
	#LCDIF_DVICTRL1_RSRVD0_MASK
 0xC0000000u

	)

24844 
	#LCDIF_DVICTRL1_RSRVD0_SHIFT
 30

	)

24845 
	#LCDIF_DVICTRL1_RSRVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL1_RSRVD0_SHIFT
))&
LCDIF_DVICTRL1_RSRVD0_MASK
)

	)

24847 
	#LCDIF_DVICTRL2_V1_BLANK_END_LINE_MASK
 0x3FFu

	)

24848 
	#LCDIF_DVICTRL2_V1_BLANK_END_LINE_SHIFT
 0

	)

24849 
	#LCDIF_DVICTRL2_V1_BLANK_END_LINE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL2_V1_BLANK_END_LINE_SHIFT
))&
LCDIF_DVICTRL2_V1_BLANK_END_LINE_MASK
)

	)

24850 
	#LCDIF_DVICTRL2_V1_BLANK_START_LINE_MASK
 0xFFC00u

	)

24851 
	#LCDIF_DVICTRL2_V1_BLANK_START_LINE_SHIFT
 10

	)

24852 
	#LCDIF_DVICTRL2_V1_BLANK_START_LINE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL2_V1_BLANK_START_LINE_SHIFT
))&
LCDIF_DVICTRL2_V1_BLANK_START_LINE_MASK
)

	)

24853 
	#LCDIF_DVICTRL2_F2_END_LINE_MASK
 0x3FF00000u

	)

24854 
	#LCDIF_DVICTRL2_F2_END_LINE_SHIFT
 20

	)

24855 
	#LCDIF_DVICTRL2_F2_END_LINE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL2_F2_END_LINE_SHIFT
))&
LCDIF_DVICTRL2_F2_END_LINE_MASK
)

	)

24856 
	#LCDIF_DVICTRL2_RSRVD0_MASK
 0xC0000000u

	)

24857 
	#LCDIF_DVICTRL2_RSRVD0_SHIFT
 30

	)

24858 
	#LCDIF_DVICTRL2_RSRVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL2_RSRVD0_SHIFT
))&
LCDIF_DVICTRL2_RSRVD0_MASK
)

	)

24860 
	#LCDIF_DVICTRL3_V_LINES_CNT_MASK
 0x3FFu

	)

24861 
	#LCDIF_DVICTRL3_V_LINES_CNT_SHIFT
 0

	)

24862 
	#LCDIF_DVICTRL3_V_LINES_CNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL3_V_LINES_CNT_SHIFT
))&
LCDIF_DVICTRL3_V_LINES_CNT_MASK
)

	)

24863 
	#LCDIF_DVICTRL3_V2_BLANK_END_LINE_MASK
 0xFFC00u

	)

24864 
	#LCDIF_DVICTRL3_V2_BLANK_END_LINE_SHIFT
 10

	)

24865 
	#LCDIF_DVICTRL3_V2_BLANK_END_LINE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL3_V2_BLANK_END_LINE_SHIFT
))&
LCDIF_DVICTRL3_V2_BLANK_END_LINE_MASK
)

	)

24866 
	#LCDIF_DVICTRL3_V2_BLANK_START_LINE_MASK
 0x3FF00000u

	)

24867 
	#LCDIF_DVICTRL3_V2_BLANK_START_LINE_SHIFT
 20

	)

24868 
	#LCDIF_DVICTRL3_V2_BLANK_START_LINE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL3_V2_BLANK_START_LINE_SHIFT
))&
LCDIF_DVICTRL3_V2_BLANK_START_LINE_MASK
)

	)

24869 
	#LCDIF_DVICTRL3_RSRVD0_MASK
 0xC0000000u

	)

24870 
	#LCDIF_DVICTRL3_RSRVD0_SHIFT
 30

	)

24871 
	#LCDIF_DVICTRL3_RSRVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL3_RSRVD0_SHIFT
))&
LCDIF_DVICTRL3_RSRVD0_MASK
)

	)

24873 
	#LCDIF_DVICTRL4_H_FILL_CNT_MASK
 0xFFu

	)

24874 
	#LCDIF_DVICTRL4_H_FILL_CNT_SHIFT
 0

	)

24875 
	#LCDIF_DVICTRL4_H_FILL_CNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL4_H_FILL_CNT_SHIFT
))&
LCDIF_DVICTRL4_H_FILL_CNT_MASK
)

	)

24876 
	#LCDIF_DVICTRL4_CR_FILL_VALUE_MASK
 0xFF00u

	)

24877 
	#LCDIF_DVICTRL4_CR_FILL_VALUE_SHIFT
 8

	)

24878 
	#LCDIF_DVICTRL4_CR_FILL_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL4_CR_FILL_VALUE_SHIFT
))&
LCDIF_DVICTRL4_CR_FILL_VALUE_MASK
)

	)

24879 
	#LCDIF_DVICTRL4_CB_FILL_VALUE_MASK
 0xFF0000u

	)

24880 
	#LCDIF_DVICTRL4_CB_FILL_VALUE_SHIFT
 16

	)

24881 
	#LCDIF_DVICTRL4_CB_FILL_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL4_CB_FILL_VALUE_SHIFT
))&
LCDIF_DVICTRL4_CB_FILL_VALUE_MASK
)

	)

24882 
	#LCDIF_DVICTRL4_Y_FILL_VALUE_MASK
 0xFF000000u

	)

24883 
	#LCDIF_DVICTRL4_Y_FILL_VALUE_SHIFT
 24

	)

24884 
	#LCDIF_DVICTRL4_Y_FILL_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DVICTRL4_Y_FILL_VALUE_SHIFT
))&
LCDIF_DVICTRL4_Y_FILL_VALUE_MASK
)

	)

24886 
	#LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER_MASK
 0x3u

	)

24887 
	#LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER_SHIFT
 0

	)

24888 
	#LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER_SHIFT
))&
LCDIF_CSC_COEFF0_CSC_SUBSAMPLE_FILTER_MASK
)

	)

24889 
	#LCDIF_CSC_COEFF0_RSRVD0_MASK
 0xFFFCu

	)

24890 
	#LCDIF_CSC_COEFF0_RSRVD0_SHIFT
 2

	)

24891 
	#LCDIF_CSC_COEFF0_RSRVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF0_RSRVD0_SHIFT
))&
LCDIF_CSC_COEFF0_RSRVD0_MASK
)

	)

24892 
	#LCDIF_CSC_COEFF0_C0_MASK
 0x3FF0000u

	)

24893 
	#LCDIF_CSC_COEFF0_C0_SHIFT
 16

	)

24894 
	#LCDIF_CSC_COEFF0_C0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF0_C0_SHIFT
))&
LCDIF_CSC_COEFF0_C0_MASK
)

	)

24895 
	#LCDIF_CSC_COEFF0_RSRVD1_MASK
 0xFC000000u

	)

24896 
	#LCDIF_CSC_COEFF0_RSRVD1_SHIFT
 26

	)

24897 
	#LCDIF_CSC_COEFF0_RSRVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF0_RSRVD1_SHIFT
))&
LCDIF_CSC_COEFF0_RSRVD1_MASK
)

	)

24899 
	#LCDIF_CSC_COEFF1_C1_MASK
 0x3FFu

	)

24900 
	#LCDIF_CSC_COEFF1_C1_SHIFT
 0

	)

24901 
	#LCDIF_CSC_COEFF1_C1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF1_C1_SHIFT
))&
LCDIF_CSC_COEFF1_C1_MASK
)

	)

24902 
	#LCDIF_CSC_COEFF1_RSRVD0_MASK
 0xFC00u

	)

24903 
	#LCDIF_CSC_COEFF1_RSRVD0_SHIFT
 10

	)

24904 
	#LCDIF_CSC_COEFF1_RSRVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF1_RSRVD0_SHIFT
))&
LCDIF_CSC_COEFF1_RSRVD0_MASK
)

	)

24905 
	#LCDIF_CSC_COEFF1_C2_MASK
 0x3FF0000u

	)

24906 
	#LCDIF_CSC_COEFF1_C2_SHIFT
 16

	)

24907 
	#LCDIF_CSC_COEFF1_C2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF1_C2_SHIFT
))&
LCDIF_CSC_COEFF1_C2_MASK
)

	)

24908 
	#LCDIF_CSC_COEFF1_RSRVD1_MASK
 0xFC000000u

	)

24909 
	#LCDIF_CSC_COEFF1_RSRVD1_SHIFT
 26

	)

24910 
	#LCDIF_CSC_COEFF1_RSRVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF1_RSRVD1_SHIFT
))&
LCDIF_CSC_COEFF1_RSRVD1_MASK
)

	)

24912 
	#LCDIF_CSC_COEFF2_C3_MASK
 0x3FFu

	)

24913 
	#LCDIF_CSC_COEFF2_C3_SHIFT
 0

	)

24914 
	#LCDIF_CSC_COEFF2_C3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF2_C3_SHIFT
))&
LCDIF_CSC_COEFF2_C3_MASK
)

	)

24915 
	#LCDIF_CSC_COEFF2_RSRVD0_MASK
 0xFC00u

	)

24916 
	#LCDIF_CSC_COEFF2_RSRVD0_SHIFT
 10

	)

24917 
	#LCDIF_CSC_COEFF2_RSRVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF2_RSRVD0_SHIFT
))&
LCDIF_CSC_COEFF2_RSRVD0_MASK
)

	)

24918 
	#LCDIF_CSC_COEFF2_C4_MASK
 0x3FF0000u

	)

24919 
	#LCDIF_CSC_COEFF2_C4_SHIFT
 16

	)

24920 
	#LCDIF_CSC_COEFF2_C4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF2_C4_SHIFT
))&
LCDIF_CSC_COEFF2_C4_MASK
)

	)

24921 
	#LCDIF_CSC_COEFF2_RSRVD1_MASK
 0xFC000000u

	)

24922 
	#LCDIF_CSC_COEFF2_RSRVD1_SHIFT
 26

	)

24923 
	#LCDIF_CSC_COEFF2_RSRVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF2_RSRVD1_SHIFT
))&
LCDIF_CSC_COEFF2_RSRVD1_MASK
)

	)

24925 
	#LCDIF_CSC_COEFF3_C5_MASK
 0x3FFu

	)

24926 
	#LCDIF_CSC_COEFF3_C5_SHIFT
 0

	)

24927 
	#LCDIF_CSC_COEFF3_C5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF3_C5_SHIFT
))&
LCDIF_CSC_COEFF3_C5_MASK
)

	)

24928 
	#LCDIF_CSC_COEFF3_RSRVD0_MASK
 0xFC00u

	)

24929 
	#LCDIF_CSC_COEFF3_RSRVD0_SHIFT
 10

	)

24930 
	#LCDIF_CSC_COEFF3_RSRVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF3_RSRVD0_SHIFT
))&
LCDIF_CSC_COEFF3_RSRVD0_MASK
)

	)

24931 
	#LCDIF_CSC_COEFF3_C6_MASK
 0x3FF0000u

	)

24932 
	#LCDIF_CSC_COEFF3_C6_SHIFT
 16

	)

24933 
	#LCDIF_CSC_COEFF3_C6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF3_C6_SHIFT
))&
LCDIF_CSC_COEFF3_C6_MASK
)

	)

24934 
	#LCDIF_CSC_COEFF3_RSRVD1_MASK
 0xFC000000u

	)

24935 
	#LCDIF_CSC_COEFF3_RSRVD1_SHIFT
 26

	)

24936 
	#LCDIF_CSC_COEFF3_RSRVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF3_RSRVD1_SHIFT
))&
LCDIF_CSC_COEFF3_RSRVD1_MASK
)

	)

24938 
	#LCDIF_CSC_COEFF4_C7_MASK
 0x3FFu

	)

24939 
	#LCDIF_CSC_COEFF4_C7_SHIFT
 0

	)

24940 
	#LCDIF_CSC_COEFF4_C7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF4_C7_SHIFT
))&
LCDIF_CSC_COEFF4_C7_MASK
)

	)

24941 
	#LCDIF_CSC_COEFF4_RSRVD0_MASK
 0xFC00u

	)

24942 
	#LCDIF_CSC_COEFF4_RSRVD0_SHIFT
 10

	)

24943 
	#LCDIF_CSC_COEFF4_RSRVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF4_RSRVD0_SHIFT
))&
LCDIF_CSC_COEFF4_RSRVD0_MASK
)

	)

24944 
	#LCDIF_CSC_COEFF4_C8_MASK
 0x3FF0000u

	)

24945 
	#LCDIF_CSC_COEFF4_C8_SHIFT
 16

	)

24946 
	#LCDIF_CSC_COEFF4_C8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF4_C8_SHIFT
))&
LCDIF_CSC_COEFF4_C8_MASK
)

	)

24947 
	#LCDIF_CSC_COEFF4_RSRVD1_MASK
 0xFC000000u

	)

24948 
	#LCDIF_CSC_COEFF4_RSRVD1_SHIFT
 26

	)

24949 
	#LCDIF_CSC_COEFF4_RSRVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_COEFF4_RSRVD1_SHIFT
))&
LCDIF_CSC_COEFF4_RSRVD1_MASK
)

	)

24951 
	#LCDIF_CSC_OFFSET_Y_OFFSET_MASK
 0x1FFu

	)

24952 
	#LCDIF_CSC_OFFSET_Y_OFFSET_SHIFT
 0

	)

24953 
	#LCDIF_CSC_OFFSET_Y_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_OFFSET_Y_OFFSET_SHIFT
))&
LCDIF_CSC_OFFSET_Y_OFFSET_MASK
)

	)

24954 
	#LCDIF_CSC_OFFSET_RSRVD0_MASK
 0xFE00u

	)

24955 
	#LCDIF_CSC_OFFSET_RSRVD0_SHIFT
 9

	)

24956 
	#LCDIF_CSC_OFFSET_RSRVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_OFFSET_RSRVD0_SHIFT
))&
LCDIF_CSC_OFFSET_RSRVD0_MASK
)

	)

24957 
	#LCDIF_CSC_OFFSET_CBCR_OFFSET_MASK
 0x1FF0000u

	)

24958 
	#LCDIF_CSC_OFFSET_CBCR_OFFSET_SHIFT
 16

	)

24959 
	#LCDIF_CSC_OFFSET_CBCR_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_OFFSET_CBCR_OFFSET_SHIFT
))&
LCDIF_CSC_OFFSET_CBCR_OFFSET_MASK
)

	)

24960 
	#LCDIF_CSC_OFFSET_RSRVD1_MASK
 0xFE000000u

	)

24961 
	#LCDIF_CSC_OFFSET_RSRVD1_SHIFT
 25

	)

24962 
	#LCDIF_CSC_OFFSET_RSRVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_OFFSET_RSRVD1_SHIFT
))&
LCDIF_CSC_OFFSET_RSRVD1_MASK
)

	)

24964 
	#LCDIF_CSC_LIMIT_Y_MAX_MASK
 0xFFu

	)

24965 
	#LCDIF_CSC_LIMIT_Y_MAX_SHIFT
 0

	)

24966 
	#LCDIF_CSC_LIMIT_Y_MAX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_LIMIT_Y_MAX_SHIFT
))&
LCDIF_CSC_LIMIT_Y_MAX_MASK
)

	)

24967 
	#LCDIF_CSC_LIMIT_Y_MIN_MASK
 0xFF00u

	)

24968 
	#LCDIF_CSC_LIMIT_Y_MIN_SHIFT
 8

	)

24969 
	#LCDIF_CSC_LIMIT_Y_MIN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_LIMIT_Y_MIN_SHIFT
))&
LCDIF_CSC_LIMIT_Y_MIN_MASK
)

	)

24970 
	#LCDIF_CSC_LIMIT_CBCR_MAX_MASK
 0xFF0000u

	)

24971 
	#LCDIF_CSC_LIMIT_CBCR_MAX_SHIFT
 16

	)

24972 
	#LCDIF_CSC_LIMIT_CBCR_MAX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_LIMIT_CBCR_MAX_SHIFT
))&
LCDIF_CSC_LIMIT_CBCR_MAX_MASK
)

	)

24973 
	#LCDIF_CSC_LIMIT_CBCR_MIN_MASK
 0xFF000000u

	)

24974 
	#LCDIF_CSC_LIMIT_CBCR_MIN_SHIFT
 24

	)

24975 
	#LCDIF_CSC_LIMIT_CBCR_MIN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CSC_LIMIT_CBCR_MIN_SHIFT
))&
LCDIF_CSC_LIMIT_CBCR_MIN_MASK
)

	)

24977 
	#LCDIF_DATA_DATA_ZERO_MASK
 0xFFu

	)

24978 
	#LCDIF_DATA_DATA_ZERO_SHIFT
 0

	)

24979 
	#LCDIF_DATA_DATA_ZERO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DATA_DATA_ZERO_SHIFT
))&
LCDIF_DATA_DATA_ZERO_MASK
)

	)

24980 
	#LCDIF_DATA_DATA_ONE_MASK
 0xFF00u

	)

24981 
	#LCDIF_DATA_DATA_ONE_SHIFT
 8

	)

24982 
	#LCDIF_DATA_DATA_ONE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DATA_DATA_ONE_SHIFT
))&
LCDIF_DATA_DATA_ONE_MASK
)

	)

24983 
	#LCDIF_DATA_DATA_TWO_MASK
 0xFF0000u

	)

24984 
	#LCDIF_DATA_DATA_TWO_SHIFT
 16

	)

24985 
	#LCDIF_DATA_DATA_TWO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DATA_DATA_TWO_SHIFT
))&
LCDIF_DATA_DATA_TWO_MASK
)

	)

24986 
	#LCDIF_DATA_DATA_THREE_MASK
 0xFF000000u

	)

24987 
	#LCDIF_DATA_DATA_THREE_SHIFT
 24

	)

24988 
	#LCDIF_DATA_DATA_THREE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DATA_DATA_THREE_SHIFT
))&
LCDIF_DATA_DATA_THREE_MASK
)

	)

24990 
	#LCDIF_BM_ERROR_STAT_ADDR_MASK
 0xFFFFFFFFu

	)

24991 
	#LCDIF_BM_ERROR_STAT_ADDR_SHIFT
 0

	)

24992 
	#LCDIF_BM_ERROR_STAT_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_BM_ERROR_STAT_ADDR_SHIFT
))&
LCDIF_BM_ERROR_STAT_ADDR_MASK
)

	)

24994 
	#LCDIF_CRC_STAT_CRC_VALUE_MASK
 0xFFFFFFFFu

	)

24995 
	#LCDIF_CRC_STAT_CRC_VALUE_SHIFT
 0

	)

24996 
	#LCDIF_CRC_STAT_CRC_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_CRC_STAT_CRC_VALUE_SHIFT
))&
LCDIF_CRC_STAT_CRC_VALUE_MASK
)

	)

24998 
	#LCDIF_STAT_LFIFO_COUNT_MASK
 0x1FFu

	)

24999 
	#LCDIF_STAT_LFIFO_COUNT_SHIFT
 0

	)

25000 
	#LCDIF_STAT_LFIFO_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_STAT_LFIFO_COUNT_SHIFT
))&
LCDIF_STAT_LFIFO_COUNT_MASK
)

	)

25001 
	#LCDIF_STAT_RSRVD0_MASK
 0xFFFE00u

	)

25002 
	#LCDIF_STAT_RSRVD0_SHIFT
 9

	)

25003 
	#LCDIF_STAT_RSRVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_STAT_RSRVD0_SHIFT
))&
LCDIF_STAT_RSRVD0_MASK
)

	)

25004 
	#LCDIF_STAT_DVI_CURRENT_FIELD_MASK
 0x1000000u

	)

25005 
	#LCDIF_STAT_DVI_CURRENT_FIELD_SHIFT
 24

	)

25006 
	#LCDIF_STAT_BUSY_MASK
 0x2000000u

	)

25007 
	#LCDIF_STAT_BUSY_SHIFT
 25

	)

25008 
	#LCDIF_STAT_TXFIFO_EMPTY_MASK
 0x4000000u

	)

25009 
	#LCDIF_STAT_TXFIFO_EMPTY_SHIFT
 26

	)

25010 
	#LCDIF_STAT_TXFIFO_FULL_MASK
 0x8000000u

	)

25011 
	#LCDIF_STAT_TXFIFO_FULL_SHIFT
 27

	)

25012 
	#LCDIF_STAT_LFIFO_EMPTY_MASK
 0x10000000u

	)

25013 
	#LCDIF_STAT_LFIFO_EMPTY_SHIFT
 28

	)

25014 
	#LCDIF_STAT_LFIFO_FULL_MASK
 0x20000000u

	)

25015 
	#LCDIF_STAT_LFIFO_FULL_SHIFT
 29

	)

25016 
	#LCDIF_STAT_PRESENT_MASK
 0x80000000u

	)

25017 
	#LCDIF_STAT_PRESENT_SHIFT
 31

	)

25019 
	#LCDIF_VERSION_STEP_MASK
 0xFFFFu

	)

25020 
	#LCDIF_VERSION_STEP_SHIFT
 0

	)

25021 
	#LCDIF_VERSION_STEP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VERSION_STEP_SHIFT
))&
LCDIF_VERSION_STEP_MASK
)

	)

25022 
	#LCDIF_VERSION_MINOR_MASK
 0xFF0000u

	)

25023 
	#LCDIF_VERSION_MINOR_SHIFT
 16

	)

25024 
	#LCDIF_VERSION_MINOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VERSION_MINOR_SHIFT
))&
LCDIF_VERSION_MINOR_MASK
)

	)

25025 
	#LCDIF_VERSION_MAJOR_MASK
 0xFF000000u

	)

25026 
	#LCDIF_VERSION_MAJOR_SHIFT
 24

	)

25027 
	#LCDIF_VERSION_MAJOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_VERSION_MAJOR_SHIFT
))&
LCDIF_VERSION_MAJOR_MASK
)

	)

25029 
	#LCDIF_DEBUG0_MST_WORDS_MASK
 0xFu

	)

25030 
	#LCDIF_DEBUG0_MST_WORDS_SHIFT
 0

	)

25031 
	#LCDIF_DEBUG0_MST_WORDS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DEBUG0_MST_WORDS_SHIFT
))&
LCDIF_DEBUG0_MST_WORDS_MASK
)

	)

25032 
	#LCDIF_DEBUG0_MST_OUTSTANDING_REQS_MASK
 0x1F0u

	)

25033 
	#LCDIF_DEBUG0_MST_OUTSTANDING_REQS_SHIFT
 4

	)

25034 
	#LCDIF_DEBUG0_MST_OUTSTANDING_REQS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DEBUG0_MST_OUTSTANDING_REQS_SHIFT
))&
LCDIF_DEBUG0_MST_OUTSTANDING_REQS_MASK
)

	)

25035 
	#LCDIF_DEBUG0_MST_AVALID_MASK
 0x200u

	)

25036 
	#LCDIF_DEBUG0_MST_AVALID_SHIFT
 9

	)

25037 
	#LCDIF_DEBUG0_CUR_REQ_STATE_MASK
 0xC00u

	)

25038 
	#LCDIF_DEBUG0_CUR_REQ_STATE_SHIFT
 10

	)

25039 
	#LCDIF_DEBUG0_CUR_REQ_STATE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DEBUG0_CUR_REQ_STATE_SHIFT
))&
LCDIF_DEBUG0_CUR_REQ_STATE_MASK
)

	)

25040 
	#LCDIF_DEBUG0_PXP_B1_DONE_MASK
 0x1000u

	)

25041 
	#LCDIF_DEBUG0_PXP_B1_DONE_SHIFT
 12

	)

25042 
	#LCDIF_DEBUG0_PXP_LCDIF_B1_READY_MASK
 0x2000u

	)

25043 
	#LCDIF_DEBUG0_PXP_LCDIF_B1_READY_SHIFT
 13

	)

25044 
	#LCDIF_DEBUG0_PXP_B0_DONE_MASK
 0x4000u

	)

25045 
	#LCDIF_DEBUG0_PXP_B0_DONE_SHIFT
 14

	)

25046 
	#LCDIF_DEBUG0_PXP_LCDIF_B0_READY_MASK
 0x8000u

	)

25047 
	#LCDIF_DEBUG0_PXP_LCDIF_B0_READY_SHIFT
 15

	)

25048 
	#LCDIF_DEBUG0_CUR_STATE_MASK
 0x7F0000u

	)

25049 
	#LCDIF_DEBUG0_CUR_STATE_SHIFT
 16

	)

25050 
	#LCDIF_DEBUG0_CUR_STATE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DEBUG0_CUR_STATE_SHIFT
))&
LCDIF_DEBUG0_CUR_STATE_MASK
)

	)

25051 
	#LCDIF_DEBUG0_EMPTY_WORD_MASK
 0x800000u

	)

25052 
	#LCDIF_DEBUG0_EMPTY_WORD_SHIFT
 23

	)

25053 
	#LCDIF_DEBUG0_CUR_FRAME_TX_MASK
 0x1000000u

	)

25054 
	#LCDIF_DEBUG0_CUR_FRAME_TX_SHIFT
 24

	)

25055 
	#LCDIF_DEBUG0_VSYNC_MASK
 0x2000000u

	)

25056 
	#LCDIF_DEBUG0_VSYNC_SHIFT
 25

	)

25057 
	#LCDIF_DEBUG0_HSYNC_MASK
 0x4000000u

	)

25058 
	#LCDIF_DEBUG0_HSYNC_SHIFT
 26

	)

25059 
	#LCDIF_DEBUG0_ENABLE_MASK
 0x8000000u

	)

25060 
	#LCDIF_DEBUG0_ENABLE_SHIFT
 27

	)

25061 
	#LCDIF_DEBUG0_SYNC_SIGNALS_ON_REG_MASK
 0x20000000u

	)

25062 
	#LCDIF_DEBUG0_SYNC_SIGNALS_ON_REG_SHIFT
 29

	)

25063 
	#LCDIF_DEBUG0_WAIT_FOR_VSYNC_EDGE_OUT_MASK
 0x40000000u

	)

25064 
	#LCDIF_DEBUG0_WAIT_FOR_VSYNC_EDGE_OUT_SHIFT
 30

	)

25065 
	#LCDIF_DEBUG0_STREAMING_END_DETECTED_MASK
 0x80000000u

	)

25066 
	#LCDIF_DEBUG0_STREAMING_END_DETECTED_SHIFT
 31

	)

25068 
	#LCDIF_DEBUG1_V_DATA_COUNT_MASK
 0xFFFFu

	)

25069 
	#LCDIF_DEBUG1_V_DATA_COUNT_SHIFT
 0

	)

25070 
	#LCDIF_DEBUG1_V_DATA_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DEBUG1_V_DATA_COUNT_SHIFT
))&
LCDIF_DEBUG1_V_DATA_COUNT_MASK
)

	)

25071 
	#LCDIF_DEBUG1_H_DATA_COUNT_MASK
 0xFFFF0000u

	)

25072 
	#LCDIF_DEBUG1_H_DATA_COUNT_SHIFT
 16

	)

25073 
	#LCDIF_DEBUG1_H_DATA_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DEBUG1_H_DATA_COUNT_SHIFT
))&
LCDIF_DEBUG1_H_DATA_COUNT_MASK
)

	)

25075 
	#LCDIF_DEBUG2_MST_ADDRESS_MASK
 0xFFFFFFFFu

	)

25076 
	#LCDIF_DEBUG2_MST_ADDRESS_SHIFT
 0

	)

25077 
	#LCDIF_DEBUG2_MST_ADDRESS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DEBUG2_MST_ADDRESS_SHIFT
))&
LCDIF_DEBUG2_MST_ADDRESS_MASK
)

	)

25079 
	#LCDIF_THRES_PANIC_MASK
 0x1FFu

	)

25080 
	#LCDIF_THRES_PANIC_SHIFT
 0

	)

25081 
	#LCDIF_THRES_PANIC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_THRES_PANIC_SHIFT
))&
LCDIF_THRES_PANIC_MASK
)

	)

25082 
	#LCDIF_THRES_RSRVD1_MASK
 0xFE00u

	)

25083 
	#LCDIF_THRES_RSRVD1_SHIFT
 9

	)

25084 
	#LCDIF_THRES_RSRVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_THRES_RSRVD1_SHIFT
))&
LCDIF_THRES_RSRVD1_MASK
)

	)

25085 
	#LCDIF_THRES_FASTCLOCK_MASK
 0x1FF0000u

	)

25086 
	#LCDIF_THRES_FASTCLOCK_SHIFT
 16

	)

25087 
	#LCDIF_THRES_FASTCLOCK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_THRES_FASTCLOCK_SHIFT
))&
LCDIF_THRES_FASTCLOCK_MASK
)

	)

25088 
	#LCDIF_THRES_RSRVD2_MASK
 0xFE000000u

	)

25089 
	#LCDIF_THRES_RSRVD2_SHIFT
 25

	)

25090 
	#LCDIF_THRES_RSRVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_THRES_RSRVD2_SHIFT
))&
LCDIF_THRES_RSRVD2_MASK
)

	)

25092 
	#LCDIF_AS_CTRL_AS_ENABLE_MASK
 0x1u

	)

25093 
	#LCDIF_AS_CTRL_AS_ENABLE_SHIFT
 0

	)

25094 
	#LCDIF_AS_CTRL_ALPHA_CTRL_MASK
 0x6u

	)

25095 
	#LCDIF_AS_CTRL_ALPHA_CTRL_SHIFT
 1

	)

25096 
	#LCDIF_AS_CTRL_ALPHA_CTRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_AS_CTRL_ALPHA_CTRL_SHIFT
))&
LCDIF_AS_CTRL_ALPHA_CTRL_MASK
)

	)

25097 
	#LCDIF_AS_CTRL_ENABLE_COLORKEY_MASK
 0x8u

	)

25098 
	#LCDIF_AS_CTRL_ENABLE_COLORKEY_SHIFT
 3

	)

25099 
	#LCDIF_AS_CTRL_FORMAT_MASK
 0xF0u

	)

25100 
	#LCDIF_AS_CTRL_FORMAT_SHIFT
 4

	)

25101 
	#LCDIF_AS_CTRL_FORMAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_AS_CTRL_FORMAT_SHIFT
))&
LCDIF_AS_CTRL_FORMAT_MASK
)

	)

25102 
	#LCDIF_AS_CTRL_ALPHA_MASK
 0xFF00u

	)

25103 
	#LCDIF_AS_CTRL_ALPHA_SHIFT
 8

	)

25104 
	#LCDIF_AS_CTRL_ALPHA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_AS_CTRL_ALPHA_SHIFT
))&
LCDIF_AS_CTRL_ALPHA_MASK
)

	)

25105 
	#LCDIF_AS_CTRL_ROP_MASK
 0xF0000u

	)

25106 
	#LCDIF_AS_CTRL_ROP_SHIFT
 16

	)

25107 
	#LCDIF_AS_CTRL_ROP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_AS_CTRL_ROP_SHIFT
))&
LCDIF_AS_CTRL_ROP_MASK
)

	)

25108 
	#LCDIF_AS_CTRL_ALPHA_INVERT_MASK
 0x100000u

	)

25109 
	#LCDIF_AS_CTRL_ALPHA_INVERT_SHIFT
 20

	)

25110 
	#LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE_MASK
 0x600000u

	)

25111 
	#LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE_SHIFT
 21

	)

25112 
	#LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE_SHIFT
))&
LCDIF_AS_CTRL_INPUT_DATA_SWIZZLE_MASK
)

	)

25113 
	#LCDIF_AS_CTRL_PS_DISABLE_MASK
 0x800000u

	)

25114 
	#LCDIF_AS_CTRL_PS_DISABLE_SHIFT
 23

	)

25115 
	#LCDIF_AS_CTRL_RVDS1_MASK
 0x7000000u

	)

25116 
	#LCDIF_AS_CTRL_RVDS1_SHIFT
 24

	)

25117 
	#LCDIF_AS_CTRL_RVDS1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_AS_CTRL_RVDS1_SHIFT
))&
LCDIF_AS_CTRL_RVDS1_MASK
)

	)

25118 
	#LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_MASK
 0x8000000u

	)

25119 
	#LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_SHIFT
 27

	)

25120 
	#LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_EN_MASK
 0x10000000u

	)

25121 
	#LCDIF_AS_CTRL_CSI_SYNC_ON_IRQ_EN_SHIFT
 28

	)

25122 
	#LCDIF_AS_CTRL_CSI_VSYNC_MODE_MASK
 0x20000000u

	)

25123 
	#LCDIF_AS_CTRL_CSI_VSYNC_MODE_SHIFT
 29

	)

25124 
	#LCDIF_AS_CTRL_CSI_VSYNC_POL_MASK
 0x40000000u

	)

25125 
	#LCDIF_AS_CTRL_CSI_VSYNC_POL_SHIFT
 30

	)

25126 
	#LCDIF_AS_CTRL_CSI_VSYNC_ENABLE_MASK
 0x80000000u

	)

25127 
	#LCDIF_AS_CTRL_CSI_VSYNC_ENABLE_SHIFT
 31

	)

25129 
	#LCDIF_AS_BUF_ADDR_MASK
 0xFFFFFFFFu

	)

25130 
	#LCDIF_AS_BUF_ADDR_SHIFT
 0

	)

25131 
	#LCDIF_AS_BUF_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_AS_BUF_ADDR_SHIFT
))&
LCDIF_AS_BUF_ADDR_MASK
)

	)

25133 
	#LCDIF_AS_NEXT_BUF_ADDR_MASK
 0xFFFFFFFFu

	)

25134 
	#LCDIF_AS_NEXT_BUF_ADDR_SHIFT
 0

	)

25135 
	#LCDIF_AS_NEXT_BUF_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_AS_NEXT_BUF_ADDR_SHIFT
))&
LCDIF_AS_NEXT_BUF_ADDR_MASK
)

	)

25137 
	#LCDIF_AS_CLRKEYLOW_PIXEL_MASK
 0xFFFFFFu

	)

25138 
	#LCDIF_AS_CLRKEYLOW_PIXEL_SHIFT
 0

	)

25139 
	#LCDIF_AS_CLRKEYLOW_PIXEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_AS_CLRKEYLOW_PIXEL_SHIFT
))&
LCDIF_AS_CLRKEYLOW_PIXEL_MASK
)

	)

25140 
	#LCDIF_AS_CLRKEYLOW_RSVD1_MASK
 0xFF000000u

	)

25141 
	#LCDIF_AS_CLRKEYLOW_RSVD1_SHIFT
 24

	)

25142 
	#LCDIF_AS_CLRKEYLOW_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_AS_CLRKEYLOW_RSVD1_SHIFT
))&
LCDIF_AS_CLRKEYLOW_RSVD1_MASK
)

	)

25144 
	#LCDIF_AS_CLRKEYHIGH_PIXEL_MASK
 0xFFFFFFu

	)

25145 
	#LCDIF_AS_CLRKEYHIGH_PIXEL_SHIFT
 0

	)

25146 
	#LCDIF_AS_CLRKEYHIGH_PIXEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_AS_CLRKEYHIGH_PIXEL_SHIFT
))&
LCDIF_AS_CLRKEYHIGH_PIXEL_MASK
)

	)

25147 
	#LCDIF_AS_CLRKEYHIGH_RSVD1_MASK
 0xFF000000u

	)

25148 
	#LCDIF_AS_CLRKEYHIGH_RSVD1_SHIFT
 24

	)

25149 
	#LCDIF_AS_CLRKEYHIGH_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_AS_CLRKEYHIGH_RSVD1_SHIFT
))&
LCDIF_AS_CLRKEYHIGH_RSVD1_MASK
)

	)

25151 
	#LCDIF_SYNC_DELAY_H_COUNT_DELAY_MASK
 0xFFFFu

	)

25152 
	#LCDIF_SYNC_DELAY_H_COUNT_DELAY_SHIFT
 0

	)

25153 
	#LCDIF_SYNC_DELAY_H_COUNT_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_SYNC_DELAY_H_COUNT_DELAY_SHIFT
))&
LCDIF_SYNC_DELAY_H_COUNT_DELAY_MASK
)

	)

25154 
	#LCDIF_SYNC_DELAY_V_COUNT_DELAY_MASK
 0xFFFF0000u

	)

25155 
	#LCDIF_SYNC_DELAY_V_COUNT_DELAY_SHIFT
 16

	)

25156 
	#LCDIF_SYNC_DELAY_V_COUNT_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_SYNC_DELAY_V_COUNT_DELAY_SHIFT
))&
LCDIF_SYNC_DELAY_V_COUNT_DELAY_MASK
)

	)

25158 
	#LCDIF_DEBUG3_MST_WORDS_MASK
 0xFu

	)

25159 
	#LCDIF_DEBUG3_MST_WORDS_SHIFT
 0

	)

25160 
	#LCDIF_DEBUG3_MST_WORDS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DEBUG3_MST_WORDS_SHIFT
))&
LCDIF_DEBUG3_MST_WORDS_MASK
)

	)

25161 
	#LCDIF_DEBUG3_MST_OUTSTANDING_REQS_MASK
 0x1F0u

	)

25162 
	#LCDIF_DEBUG3_MST_OUTSTANDING_REQS_SHIFT
 4

	)

25163 
	#LCDIF_DEBUG3_MST_OUTSTANDING_REQS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DEBUG3_MST_OUTSTANDING_REQS_SHIFT
))&
LCDIF_DEBUG3_MST_OUTSTANDING_REQS_MASK
)

	)

25164 
	#LCDIF_DEBUG3_MST_AVALID_MASK
 0x200u

	)

25165 
	#LCDIF_DEBUG3_MST_AVALID_SHIFT
 9

	)

25166 
	#LCDIF_DEBUG3_CUR_REQ_STATE_MASK
 0xC00u

	)

25167 
	#LCDIF_DEBUG3_CUR_REQ_STATE_SHIFT
 10

	)

25168 
	#LCDIF_DEBUG3_CUR_REQ_STATE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DEBUG3_CUR_REQ_STATE_SHIFT
))&
LCDIF_DEBUG3_CUR_REQ_STATE_MASK
)

	)

25169 
	#LCDIF_DEBUG3_RSVD0_MASK
 0xFFFFF000u

	)

25170 
	#LCDIF_DEBUG3_RSVD0_SHIFT
 12

	)

25171 
	#LCDIF_DEBUG3_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DEBUG3_RSVD0_SHIFT
))&
LCDIF_DEBUG3_RSVD0_MASK
)

	)

25173 
	#LCDIF_DEBUG4_V_DATA_COUNT_MASK
 0xFFFFu

	)

25174 
	#LCDIF_DEBUG4_V_DATA_COUNT_SHIFT
 0

	)

25175 
	#LCDIF_DEBUG4_V_DATA_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DEBUG4_V_DATA_COUNT_SHIFT
))&
LCDIF_DEBUG4_V_DATA_COUNT_MASK
)

	)

25176 
	#LCDIF_DEBUG4_H_DATA_COUNT_MASK
 0xFFFF0000u

	)

25177 
	#LCDIF_DEBUG4_H_DATA_COUNT_SHIFT
 16

	)

25178 
	#LCDIF_DEBUG4_H_DATA_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DEBUG4_H_DATA_COUNT_SHIFT
))&
LCDIF_DEBUG4_H_DATA_COUNT_MASK
)

	)

25180 
	#LCDIF_DEBUG5_MST_ADDRESS_MASK
 0xFFFFFFFFu

	)

25181 
	#LCDIF_DEBUG5_MST_ADDRESS_SHIFT
 0

	)

25182 
	#LCDIF_DEBUG5_MST_ADDRESS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LCDIF_DEBUG5_MST_ADDRESS_SHIFT
))&
LCDIF_DEBUG5_MST_ADDRESS_MASK
)

	)

25190 
	#LCDIF1_BASE
 (0x42220000u)

	)

25192 
	#LCDIF1
 ((
LCDIF_Ty≥
 *)
LCDIF1_BASE
)

	)

25193 
	#LCDIF1_BASE_PTR
 (
LCDIF1
)

	)

25195 
	#LCDIF2_BASE
 (0x42224000u)

	)

25197 
	#LCDIF2
 ((
LCDIF_Ty≥
 *)
LCDIF2_BASE
)

	)

25198 
	#LCDIF2_BASE_PTR
 (
LCDIF2
)

	)

25200 
	#LCDIF_BASE_ADDRS
 { 
LCDIF1_BASE
, 
LCDIF2_BASE
 }

	)

25202 
	#LCDIF_BASE_PTRS
 { 
LCDIF1
, 
LCDIF2
 }

	)

25204 
	#LCDIF_IRQS
 { 
LCDIF1_IRQn
, 
LCDIF2_IRQn
 }

	)

25217 
	#LCDIF1_RL
 
	`LCDIF_RL_REG
(
LCDIF1_BASE_PTR
)

	)

25218 
	#LCDIF1_RL_SET
 
	`LCDIF_RL_SET_REG
(
LCDIF1_BASE_PTR
)

	)

25219 
	#LCDIF1_RL_CLR
 
	`LCDIF_RL_CLR_REG
(
LCDIF1_BASE_PTR
)

	)

25220 
	#LCDIF1_RL_TOG
 
	`LCDIF_RL_TOG_REG
(
LCDIF1_BASE_PTR
)

	)

25221 
	#LCDIF1_CTRL1
 
	`LCDIF_CTRL1_REG
(
LCDIF1_BASE_PTR
)

	)

25222 
	#LCDIF1_CTRL1_SET
 
	`LCDIF_CTRL1_SET_REG
(
LCDIF1_BASE_PTR
)

	)

25223 
	#LCDIF1_CTRL1_CLR
 
	`LCDIF_CTRL1_CLR_REG
(
LCDIF1_BASE_PTR
)

	)

25224 
	#LCDIF1_CTRL1_TOG
 
	`LCDIF_CTRL1_TOG_REG
(
LCDIF1_BASE_PTR
)

	)

25225 
	#LCDIF1_CTRL2
 
	`LCDIF_CTRL2_REG
(
LCDIF1_BASE_PTR
)

	)

25226 
	#LCDIF1_CTRL2_SET
 
	`LCDIF_CTRL2_SET_REG
(
LCDIF1_BASE_PTR
)

	)

25227 
	#LCDIF1_CTRL2_CLR
 
	`LCDIF_CTRL2_CLR_REG
(
LCDIF1_BASE_PTR
)

	)

25228 
	#LCDIF1_CTRL2_TOG
 
	`LCDIF_CTRL2_TOG_REG
(
LCDIF1_BASE_PTR
)

	)

25229 
	#LCDIF1_TRANSFER_COUNT
 
	`LCDIF_TRANSFER_COUNT_REG
(
LCDIF1_BASE_PTR
)

	)

25230 
	#LCDIF1_CUR_BUF
 
	`LCDIF_CUR_BUF_REG
(
LCDIF1_BASE_PTR
)

	)

25231 
	#LCDIF1_NEXT_BUF
 
	`LCDIF_NEXT_BUF_REG
(
LCDIF1_BASE_PTR
)

	)

25232 
	#LCDIF1_TIMING
 
	`LCDIF_TIMING_REG
(
LCDIF1_BASE_PTR
)

	)

25233 
	#LCDIF1_VDCTRL0
 
	`LCDIF_VDCTRL0_REG
(
LCDIF1_BASE_PTR
)

	)

25234 
	#LCDIF1_VDCTRL0_SET
 
	`LCDIF_VDCTRL0_SET_REG
(
LCDIF1_BASE_PTR
)

	)

25235 
	#LCDIF1_VDCTRL0_CLR
 
	`LCDIF_VDCTRL0_CLR_REG
(
LCDIF1_BASE_PTR
)

	)

25236 
	#LCDIF1_VDCTRL0_TOG
 
	`LCDIF_VDCTRL0_TOG_REG
(
LCDIF1_BASE_PTR
)

	)

25237 
	#LCDIF1_VDCTRL1
 
	`LCDIF_VDCTRL1_REG
(
LCDIF1_BASE_PTR
)

	)

25238 
	#LCDIF1_VDCTRL2
 
	`LCDIF_VDCTRL2_REG
(
LCDIF1_BASE_PTR
)

	)

25239 
	#LCDIF1_VDCTRL3
 
	`LCDIF_VDCTRL3_REG
(
LCDIF1_BASE_PTR
)

	)

25240 
	#LCDIF1_VDCTRL4
 
	`LCDIF_VDCTRL4_REG
(
LCDIF1_BASE_PTR
)

	)

25241 
	#LCDIF1_DVICTRL0
 
	`LCDIF_DVICTRL0_REG
(
LCDIF1_BASE_PTR
)

	)

25242 
	#LCDIF1_DVICTRL1
 
	`LCDIF_DVICTRL1_REG
(
LCDIF1_BASE_PTR
)

	)

25243 
	#LCDIF1_DVICTRL2
 
	`LCDIF_DVICTRL2_REG
(
LCDIF1_BASE_PTR
)

	)

25244 
	#LCDIF1_DVICTRL3
 
	`LCDIF_DVICTRL3_REG
(
LCDIF1_BASE_PTR
)

	)

25245 
	#LCDIF1_DVICTRL4
 
	`LCDIF_DVICTRL4_REG
(
LCDIF1_BASE_PTR
)

	)

25246 
	#LCDIF1_CSC_COEFF0
 
	`LCDIF_CSC_COEFF0_REG
(
LCDIF1_BASE_PTR
)

	)

25247 
	#LCDIF1_CSC_COEFF1
 
	`LCDIF_CSC_COEFF1_REG
(
LCDIF1_BASE_PTR
)

	)

25248 
	#LCDIF1_CSC_COEFF2
 
	`LCDIF_CSC_COEFF2_REG
(
LCDIF1_BASE_PTR
)

	)

25249 
	#LCDIF1_CSC_COEFF3
 
	`LCDIF_CSC_COEFF3_REG
(
LCDIF1_BASE_PTR
)

	)

25250 
	#LCDIF1_CSC_COEFF4
 
	`LCDIF_CSC_COEFF4_REG
(
LCDIF1_BASE_PTR
)

	)

25251 
	#LCDIF1_CSC_OFFSET
 
	`LCDIF_CSC_OFFSET_REG
(
LCDIF1_BASE_PTR
)

	)

25252 
	#LCDIF1_CSC_LIMIT
 
	`LCDIF_CSC_LIMIT_REG
(
LCDIF1_BASE_PTR
)

	)

25253 
	#LCDIF1_DATA
 
	`LCDIF_DATA_REG
(
LCDIF1_BASE_PTR
)

	)

25254 
	#LCDIF1_BM_ERROR_STAT
 
	`LCDIF_BM_ERROR_STAT_REG
(
LCDIF1_BASE_PTR
)

	)

25255 
	#LCDIF1_CRC_STAT
 
	`LCDIF_CRC_STAT_REG
(
LCDIF1_BASE_PTR
)

	)

25256 
	#LCDIF1_STAT
 
	`LCDIF_STAT_REG
(
LCDIF1_BASE_PTR
)

	)

25257 
	#LCDIF1_VERSION
 
	`LCDIF_VERSION_REG
(
LCDIF1_BASE_PTR
)

	)

25258 
	#LCDIF1_DEBUG0
 
	`LCDIF_DEBUG0_REG
(
LCDIF1_BASE_PTR
)

	)

25259 
	#LCDIF1_DEBUG1
 
	`LCDIF_DEBUG1_REG
(
LCDIF1_BASE_PTR
)

	)

25260 
	#LCDIF1_DEBUG2
 
	`LCDIF_DEBUG2_REG
(
LCDIF1_BASE_PTR
)

	)

25261 
	#LCDIF1_THRES
 
	`LCDIF_THRES_REG
(
LCDIF1_BASE_PTR
)

	)

25262 
	#LCDIF1_AS_CTRL
 
	`LCDIF_AS_CTRL_REG
(
LCDIF1_BASE_PTR
)

	)

25263 
	#LCDIF1_AS_BUF
 
	`LCDIF_AS_BUF_REG
(
LCDIF1_BASE_PTR
)

	)

25264 
	#LCDIF1_AS_NEXT_BUF
 
	`LCDIF_AS_NEXT_BUF_REG
(
LCDIF1_BASE_PTR
)

	)

25265 
	#LCDIF1_AS_CLRKEYLOW
 
	`LCDIF_AS_CLRKEYLOW_REG
(
LCDIF1_BASE_PTR
)

	)

25266 
	#LCDIF1_AS_CLRKEYHIGH
 
	`LCDIF_AS_CLRKEYHIGH_REG
(
LCDIF1_BASE_PTR
)

	)

25267 
	#LCDIF1_SYNC_DELAY
 
	`LCDIF_SYNC_DELAY_REG
(
LCDIF1_BASE_PTR
)

	)

25268 
	#LCDIF1_DEBUG3
 
	`LCDIF_DEBUG3_REG
(
LCDIF1_BASE_PTR
)

	)

25269 
	#LCDIF1_DEBUG4
 
	`LCDIF_DEBUG4_REG
(
LCDIF1_BASE_PTR
)

	)

25270 
	#LCDIF1_DEBUG5
 
	`LCDIF_DEBUG5_REG
(
LCDIF1_BASE_PTR
)

	)

25272 
	#LCDIF2_RL
 
	`LCDIF_RL_REG
(
LCDIF2_BASE_PTR
)

	)

25273 
	#LCDIF2_RL_SET
 
	`LCDIF_RL_SET_REG
(
LCDIF2_BASE_PTR
)

	)

25274 
	#LCDIF2_RL_CLR
 
	`LCDIF_RL_CLR_REG
(
LCDIF2_BASE_PTR
)

	)

25275 
	#LCDIF2_RL_TOG
 
	`LCDIF_RL_TOG_REG
(
LCDIF2_BASE_PTR
)

	)

25276 
	#LCDIF2_CTRL1
 
	`LCDIF_CTRL1_REG
(
LCDIF2_BASE_PTR
)

	)

25277 
	#LCDIF2_CTRL1_SET
 
	`LCDIF_CTRL1_SET_REG
(
LCDIF2_BASE_PTR
)

	)

25278 
	#LCDIF2_CTRL1_CLR
 
	`LCDIF_CTRL1_CLR_REG
(
LCDIF2_BASE_PTR
)

	)

25279 
	#LCDIF2_CTRL1_TOG
 
	`LCDIF_CTRL1_TOG_REG
(
LCDIF2_BASE_PTR
)

	)

25280 
	#LCDIF2_CTRL2
 
	`LCDIF_CTRL2_REG
(
LCDIF2_BASE_PTR
)

	)

25281 
	#LCDIF2_CTRL2_SET
 
	`LCDIF_CTRL2_SET_REG
(
LCDIF2_BASE_PTR
)

	)

25282 
	#LCDIF2_CTRL2_CLR
 
	`LCDIF_CTRL2_CLR_REG
(
LCDIF2_BASE_PTR
)

	)

25283 
	#LCDIF2_CTRL2_TOG
 
	`LCDIF_CTRL2_TOG_REG
(
LCDIF2_BASE_PTR
)

	)

25284 
	#LCDIF2_TRANSFER_COUNT
 
	`LCDIF_TRANSFER_COUNT_REG
(
LCDIF2_BASE_PTR
)

	)

25285 
	#LCDIF2_CUR_BUF
 
	`LCDIF_CUR_BUF_REG
(
LCDIF2_BASE_PTR
)

	)

25286 
	#LCDIF2_NEXT_BUF
 
	`LCDIF_NEXT_BUF_REG
(
LCDIF2_BASE_PTR
)

	)

25287 
	#LCDIF2_TIMING
 
	`LCDIF_TIMING_REG
(
LCDIF2_BASE_PTR
)

	)

25288 
	#LCDIF2_VDCTRL0
 
	`LCDIF_VDCTRL0_REG
(
LCDIF2_BASE_PTR
)

	)

25289 
	#LCDIF2_VDCTRL0_SET
 
	`LCDIF_VDCTRL0_SET_REG
(
LCDIF2_BASE_PTR
)

	)

25290 
	#LCDIF2_VDCTRL0_CLR
 
	`LCDIF_VDCTRL0_CLR_REG
(
LCDIF2_BASE_PTR
)

	)

25291 
	#LCDIF2_VDCTRL0_TOG
 
	`LCDIF_VDCTRL0_TOG_REG
(
LCDIF2_BASE_PTR
)

	)

25292 
	#LCDIF2_VDCTRL1
 
	`LCDIF_VDCTRL1_REG
(
LCDIF2_BASE_PTR
)

	)

25293 
	#LCDIF2_VDCTRL2
 
	`LCDIF_VDCTRL2_REG
(
LCDIF2_BASE_PTR
)

	)

25294 
	#LCDIF2_VDCTRL3
 
	`LCDIF_VDCTRL3_REG
(
LCDIF2_BASE_PTR
)

	)

25295 
	#LCDIF2_VDCTRL4
 
	`LCDIF_VDCTRL4_REG
(
LCDIF2_BASE_PTR
)

	)

25296 
	#LCDIF2_DVICTRL0
 
	`LCDIF_DVICTRL0_REG
(
LCDIF2_BASE_PTR
)

	)

25297 
	#LCDIF2_DVICTRL1
 
	`LCDIF_DVICTRL1_REG
(
LCDIF2_BASE_PTR
)

	)

25298 
	#LCDIF2_DVICTRL2
 
	`LCDIF_DVICTRL2_REG
(
LCDIF2_BASE_PTR
)

	)

25299 
	#LCDIF2_DVICTRL3
 
	`LCDIF_DVICTRL3_REG
(
LCDIF2_BASE_PTR
)

	)

25300 
	#LCDIF2_DVICTRL4
 
	`LCDIF_DVICTRL4_REG
(
LCDIF2_BASE_PTR
)

	)

25301 
	#LCDIF2_CSC_COEFF0
 
	`LCDIF_CSC_COEFF0_REG
(
LCDIF2_BASE_PTR
)

	)

25302 
	#LCDIF2_CSC_COEFF1
 
	`LCDIF_CSC_COEFF1_REG
(
LCDIF2_BASE_PTR
)

	)

25303 
	#LCDIF2_CSC_COEFF2
 
	`LCDIF_CSC_COEFF2_REG
(
LCDIF2_BASE_PTR
)

	)

25304 
	#LCDIF2_CSC_COEFF3
 
	`LCDIF_CSC_COEFF3_REG
(
LCDIF2_BASE_PTR
)

	)

25305 
	#LCDIF2_CSC_COEFF4
 
	`LCDIF_CSC_COEFF4_REG
(
LCDIF2_BASE_PTR
)

	)

25306 
	#LCDIF2_CSC_OFFSET
 
	`LCDIF_CSC_OFFSET_REG
(
LCDIF2_BASE_PTR
)

	)

25307 
	#LCDIF2_CSC_LIMIT
 
	`LCDIF_CSC_LIMIT_REG
(
LCDIF2_BASE_PTR
)

	)

25308 
	#LCDIF2_DATA
 
	`LCDIF_DATA_REG
(
LCDIF2_BASE_PTR
)

	)

25309 
	#LCDIF2_BM_ERROR_STAT
 
	`LCDIF_BM_ERROR_STAT_REG
(
LCDIF2_BASE_PTR
)

	)

25310 
	#LCDIF2_CRC_STAT
 
	`LCDIF_CRC_STAT_REG
(
LCDIF2_BASE_PTR
)

	)

25311 
	#LCDIF2_STAT
 
	`LCDIF_STAT_REG
(
LCDIF2_BASE_PTR
)

	)

25312 
	#LCDIF2_VERSION
 
	`LCDIF_VERSION_REG
(
LCDIF2_BASE_PTR
)

	)

25313 
	#LCDIF2_DEBUG0
 
	`LCDIF_DEBUG0_REG
(
LCDIF2_BASE_PTR
)

	)

25314 
	#LCDIF2_DEBUG1
 
	`LCDIF_DEBUG1_REG
(
LCDIF2_BASE_PTR
)

	)

25315 
	#LCDIF2_DEBUG2
 
	`LCDIF_DEBUG2_REG
(
LCDIF2_BASE_PTR
)

	)

25316 
	#LCDIF2_THRES
 
	`LCDIF_THRES_REG
(
LCDIF2_BASE_PTR
)

	)

25317 
	#LCDIF2_AS_CTRL
 
	`LCDIF_AS_CTRL_REG
(
LCDIF2_BASE_PTR
)

	)

25318 
	#LCDIF2_AS_BUF
 
	`LCDIF_AS_BUF_REG
(
LCDIF2_BASE_PTR
)

	)

25319 
	#LCDIF2_AS_NEXT_BUF
 
	`LCDIF_AS_NEXT_BUF_REG
(
LCDIF2_BASE_PTR
)

	)

25320 
	#LCDIF2_AS_CLRKEYLOW
 
	`LCDIF_AS_CLRKEYLOW_REG
(
LCDIF2_BASE_PTR
)

	)

25321 
	#LCDIF2_AS_CLRKEYHIGH
 
	`LCDIF_AS_CLRKEYHIGH_REG
(
LCDIF2_BASE_PTR
)

	)

25322 
	#LCDIF2_SYNC_DELAY
 
	`LCDIF_SYNC_DELAY_REG
(
LCDIF2_BASE_PTR
)

	)

25323 
	#LCDIF2_DEBUG3
 
	`LCDIF_DEBUG3_REG
(
LCDIF2_BASE_PTR
)

	)

25324 
	#LCDIF2_DEBUG4
 
	`LCDIF_DEBUG4_REG
(
LCDIF2_BASE_PTR
)

	)

25325 
	#LCDIF2_DEBUG5
 
	`LCDIF_DEBUG5_REG
(
LCDIF2_BASE_PTR
)

	)

25346 
__IO
 
uöt32_t
 
	mCTRL
;

25347 } 
	tLDB_Ty≥
, *
	tLDB_MemM≠På
;

25359 
	#LDB_CTRL_REG
(
ba£
Ë((ba£)->
CTRL
)

	)

25375 
	#LDB_CTRL_ch0_mode_MASK
 0x3u

	)

25376 
	#LDB_CTRL_ch0_mode_SHIFT
 0

	)

25377 
	#LDB_CTRL_ch0_mode
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LDB_CTRL_ch0_mode_SHIFT
))&
LDB_CTRL_ch0_mode_MASK
)

	)

25378 
	#LDB_CTRL_d©a_width_ch0_MASK
 0x20u

	)

25379 
	#LDB_CTRL_d©a_width_ch0_SHIFT
 5

	)

25380 
	#LDB_CTRL_bô_m≠pög_ch0_MASK
 0x40u

	)

25381 
	#LDB_CTRL_bô_m≠pög_ch0_SHIFT
 6

	)

25382 
	#LDB_CTRL_lcdif1_vs_pﬁ¨ôy_MASK
 0x200u

	)

25383 
	#LDB_CTRL_lcdif1_vs_pﬁ¨ôy_SHIFT
 9

	)

25384 
	#LDB_CTRL_lvds_˛k_shi·_MASK
 0x70000u

	)

25385 
	#LDB_CTRL_lvds_˛k_shi·_SHIFT
 16

	)

25386 
	#LDB_CTRL_lvds_˛k_shi·
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LDB_CTRL_lvds_˛k_shi·_SHIFT
))&
LDB_CTRL_lvds_˛k_shi·_MASK
)

	)

25387 
	#LDB_CTRL_cou¡î_ª£t_vÆ_MASK
 0x300000u

	)

25388 
	#LDB_CTRL_cou¡î_ª£t_vÆ_SHIFT
 20

	)

25389 
	#LDB_CTRL_cou¡î_ª£t_vÆ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LDB_CTRL_cou¡î_ª£t_vÆ_SHIFT
))&
LDB_CTRL_cou¡î_ª£t_vÆ_MASK
)

	)

25397 
	#LDB_BASE
 (0x420E0014u)

	)

25399 
	#LDB
 ((
LDB_Ty≥
 *)
LDB_BASE
)

	)

25400 
	#LDB_BASE_PTR
 (
LDB
)

	)

25402 
	#LDB_BASE_ADDRS
 { 
LDB_BASE
 }

	)

25404 
	#LDB_BASE_PTRS
 { 
LDB
 }

	)

25417 
	#LDB_CTRL
 
	`LDB_CTRL_REG
(
LDB_BASE_PTR
)

	)

25438 
__IO
 
uöt32_t
 
	mPCCCR
;

25439 
__IO
 
uöt32_t
 
	mPCCLCR
;

25440 
__IO
 
uöt32_t
 
	mPCCSAR
;

25441 
__IO
 
uöt32_t
 
	mPCCCVR
;

25442 
uöt8_t
 
	mRESERVED_0
[2032];

25443 
__IO
 
uöt32_t
 
	mPSCCR
;

25444 
__IO
 
uöt32_t
 
	mPSCLCR
;

25445 
__IO
 
uöt32_t
 
	mPSCSAR
;

25446 
__IO
 
uöt32_t
 
	mPSCCVR
;

25447 } 
	tLMEM_Ty≥
, *
	tLMEM_MemM≠På
;

25459 
	#LMEM_PCCCR_REG
(
ba£
Ë((ba£)->
PCCCR
)

	)

25460 
	#LMEM_PCCLCR_REG
(
ba£
Ë((ba£)->
PCCLCR
)

	)

25461 
	#LMEM_PCCSAR_REG
(
ba£
Ë((ba£)->
PCCSAR
)

	)

25462 
	#LMEM_PCCCVR_REG
(
ba£
Ë((ba£)->
PCCCVR
)

	)

25463 
	#LMEM_PSCCR_REG
(
ba£
Ë((ba£)->
PSCCR
)

	)

25464 
	#LMEM_PSCLCR_REG
(
ba£
Ë((ba£)->
PSCLCR
)

	)

25465 
	#LMEM_PSCSAR_REG
(
ba£
Ë((ba£)->
PSCSAR
)

	)

25466 
	#LMEM_PSCCVR_REG
(
ba£
Ë((ba£)->
PSCCVR
)

	)

25481 
	#LMEM_PCCCR_ENCACHE_MASK
 0x1u

	)

25482 
	#LMEM_PCCCR_ENCACHE_SHIFT
 0

	)

25483 
	#LMEM_PCCCR_ENWRBUF_MASK
 0x2u

	)

25484 
	#LMEM_PCCCR_ENWRBUF_SHIFT
 1

	)

25485 
	#LMEM_PCCCR_PCCR2_MASK
 0x4u

	)

25486 
	#LMEM_PCCCR_PCCR2_SHIFT
 2

	)

25487 
	#LMEM_PCCCR_PCCR3_MASK
 0x8u

	)

25488 
	#LMEM_PCCCR_PCCR3_SHIFT
 3

	)

25489 
	#LMEM_PCCCR_INVW0_MASK
 0x1000000u

	)

25490 
	#LMEM_PCCCR_INVW0_SHIFT
 24

	)

25491 
	#LMEM_PCCCR_PUSHW0_MASK
 0x2000000u

	)

25492 
	#LMEM_PCCCR_PUSHW0_SHIFT
 25

	)

25493 
	#LMEM_PCCCR_INVW1_MASK
 0x4000000u

	)

25494 
	#LMEM_PCCCR_INVW1_SHIFT
 26

	)

25495 
	#LMEM_PCCCR_PUSHW1_MASK
 0x8000000u

	)

25496 
	#LMEM_PCCCR_PUSHW1_SHIFT
 27

	)

25497 
	#LMEM_PCCCR_GO_MASK
 0x80000000u

	)

25498 
	#LMEM_PCCCR_GO_SHIFT
 31

	)

25500 
	#LMEM_PCCLCR_LGO_MASK
 0x1u

	)

25501 
	#LMEM_PCCLCR_LGO_SHIFT
 0

	)

25502 
	#LMEM_PCCLCR_CACHEADDR_MASK
 0x1FFCu

	)

25503 
	#LMEM_PCCLCR_CACHEADDR_SHIFT
 2

	)

25504 
	#LMEM_PCCLCR_CACHEADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LMEM_PCCLCR_CACHEADDR_SHIFT
))&
LMEM_PCCLCR_CACHEADDR_MASK
)

	)

25505 
	#LMEM_PCCLCR_WSEL_MASK
 0x4000u

	)

25506 
	#LMEM_PCCLCR_WSEL_SHIFT
 14

	)

25507 
	#LMEM_PCCLCR_TDSEL_MASK
 0x10000u

	)

25508 
	#LMEM_PCCLCR_TDSEL_SHIFT
 16

	)

25509 
	#LMEM_PCCLCR_LCIVB_MASK
 0x100000u

	)

25510 
	#LMEM_PCCLCR_LCIVB_SHIFT
 20

	)

25511 
	#LMEM_PCCLCR_LCIMB_MASK
 0x200000u

	)

25512 
	#LMEM_PCCLCR_LCIMB_SHIFT
 21

	)

25513 
	#LMEM_PCCLCR_LCWAY_MASK
 0x400000u

	)

25514 
	#LMEM_PCCLCR_LCWAY_SHIFT
 22

	)

25515 
	#LMEM_PCCLCR_LCMD_MASK
 0x3000000u

	)

25516 
	#LMEM_PCCLCR_LCMD_SHIFT
 24

	)

25517 
	#LMEM_PCCLCR_LCMD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LMEM_PCCLCR_LCMD_SHIFT
))&
LMEM_PCCLCR_LCMD_MASK
)

	)

25518 
	#LMEM_PCCLCR_LADSEL_MASK
 0x4000000u

	)

25519 
	#LMEM_PCCLCR_LADSEL_SHIFT
 26

	)

25520 
	#LMEM_PCCLCR_LACC_MASK
 0x8000000u

	)

25521 
	#LMEM_PCCLCR_LACC_SHIFT
 27

	)

25523 
	#LMEM_PCCSAR_LGO_MASK
 0x1u

	)

25524 
	#LMEM_PCCSAR_LGO_SHIFT
 0

	)

25525 
	#LMEM_PCCSAR_PHYADDR_MASK
 0xFFFFFFFCu

	)

25526 
	#LMEM_PCCSAR_PHYADDR_SHIFT
 2

	)

25527 
	#LMEM_PCCSAR_PHYADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LMEM_PCCSAR_PHYADDR_SHIFT
))&
LMEM_PCCSAR_PHYADDR_MASK
)

	)

25529 
	#LMEM_PCCCVR_DATA_MASK
 0xFFFFFFFFu

	)

25530 
	#LMEM_PCCCVR_DATA_SHIFT
 0

	)

25531 
	#LMEM_PCCCVR_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LMEM_PCCCVR_DATA_SHIFT
))&
LMEM_PCCCVR_DATA_MASK
)

	)

25533 
	#LMEM_PSCCR_ENCACHE_MASK
 0x1u

	)

25534 
	#LMEM_PSCCR_ENCACHE_SHIFT
 0

	)

25535 
	#LMEM_PSCCR_ENWRBUF_MASK
 0x2u

	)

25536 
	#LMEM_PSCCR_ENWRBUF_SHIFT
 1

	)

25537 
	#LMEM_PSCCR_INVW0_MASK
 0x1000000u

	)

25538 
	#LMEM_PSCCR_INVW0_SHIFT
 24

	)

25539 
	#LMEM_PSCCR_PUSHW0_MASK
 0x2000000u

	)

25540 
	#LMEM_PSCCR_PUSHW0_SHIFT
 25

	)

25541 
	#LMEM_PSCCR_INVW1_MASK
 0x4000000u

	)

25542 
	#LMEM_PSCCR_INVW1_SHIFT
 26

	)

25543 
	#LMEM_PSCCR_PUSHW1_MASK
 0x8000000u

	)

25544 
	#LMEM_PSCCR_PUSHW1_SHIFT
 27

	)

25545 
	#LMEM_PSCCR_GO_MASK
 0x80000000u

	)

25546 
	#LMEM_PSCCR_GO_SHIFT
 31

	)

25548 
	#LMEM_PSCLCR_LGO_MASK
 0x1u

	)

25549 
	#LMEM_PSCLCR_LGO_SHIFT
 0

	)

25550 
	#LMEM_PSCLCR_CACHEADDR_MASK
 0x1FFCu

	)

25551 
	#LMEM_PSCLCR_CACHEADDR_SHIFT
 2

	)

25552 
	#LMEM_PSCLCR_CACHEADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LMEM_PSCLCR_CACHEADDR_SHIFT
))&
LMEM_PSCLCR_CACHEADDR_MASK
)

	)

25553 
	#LMEM_PSCLCR_WSEL_MASK
 0x4000u

	)

25554 
	#LMEM_PSCLCR_WSEL_SHIFT
 14

	)

25555 
	#LMEM_PSCLCR_TDSEL_MASK
 0x10000u

	)

25556 
	#LMEM_PSCLCR_TDSEL_SHIFT
 16

	)

25557 
	#LMEM_PSCLCR_LCIVB_MASK
 0x100000u

	)

25558 
	#LMEM_PSCLCR_LCIVB_SHIFT
 20

	)

25559 
	#LMEM_PSCLCR_LCIMB_MASK
 0x200000u

	)

25560 
	#LMEM_PSCLCR_LCIMB_SHIFT
 21

	)

25561 
	#LMEM_PSCLCR_LCWAY_MASK
 0x400000u

	)

25562 
	#LMEM_PSCLCR_LCWAY_SHIFT
 22

	)

25563 
	#LMEM_PSCLCR_LCMD_MASK
 0x3000000u

	)

25564 
	#LMEM_PSCLCR_LCMD_SHIFT
 24

	)

25565 
	#LMEM_PSCLCR_LCMD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LMEM_PSCLCR_LCMD_SHIFT
))&
LMEM_PSCLCR_LCMD_MASK
)

	)

25566 
	#LMEM_PSCLCR_LADSEL_MASK
 0x4000000u

	)

25567 
	#LMEM_PSCLCR_LADSEL_SHIFT
 26

	)

25568 
	#LMEM_PSCLCR_LACC_MASK
 0x8000000u

	)

25569 
	#LMEM_PSCLCR_LACC_SHIFT
 27

	)

25571 
	#LMEM_PSCSAR_LGO_MASK
 0x1u

	)

25572 
	#LMEM_PSCSAR_LGO_SHIFT
 0

	)

25573 
	#LMEM_PSCSAR_PHYADDR_MASK
 0xFFFFFFFCu

	)

25574 
	#LMEM_PSCSAR_PHYADDR_SHIFT
 2

	)

25575 
	#LMEM_PSCSAR_PHYADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LMEM_PSCSAR_PHYADDR_SHIFT
))&
LMEM_PSCSAR_PHYADDR_MASK
)

	)

25577 
	#LMEM_PSCCVR_DATA_MASK
 0xFFFFFFFFu

	)

25578 
	#LMEM_PSCCVR_DATA_SHIFT
 0

	)

25579 
	#LMEM_PSCCVR_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
LMEM_PSCCVR_DATA_SHIFT
))&
LMEM_PSCCVR_DATA_MASK
)

	)

25587 
	#LMEM_BASE
 (0xE0002000u)

	)

25589 
	#LMEM
 ((
LMEM_Ty≥
 *)
LMEM_BASE
)

	)

25590 
	#LMEM_BASE_PTR
 (
LMEM
)

	)

25592 
	#LMEM_BASE_ADDRS
 { 
LMEM_BASE
 }

	)

25594 
	#LMEM_BASE_PTRS
 { 
LMEM
 }

	)

25607 
	#LMEM_PCCCR
 
	`LMEM_PCCCR_REG
(
LMEM_BASE_PTR
)

	)

25608 
	#LMEM_PCCLCR
 
	`LMEM_PCCLCR_REG
(
LMEM_BASE_PTR
)

	)

25609 
	#LMEM_PCCSAR
 
	`LMEM_PCCSAR_REG
(
LMEM_BASE_PTR
)

	)

25610 
	#LMEM_PCCCVR
 
	`LMEM_PCCCVR_REG
(
LMEM_BASE_PTR
)

	)

25611 
	#LMEM_PSCCR
 
	`LMEM_PSCCR_REG
(
LMEM_BASE_PTR
)

	)

25612 
	#LMEM_PSCLCR
 
	`LMEM_PSCLCR_REG
(
LMEM_BASE_PTR
)

	)

25613 
	#LMEM_PSCSAR
 
	`LMEM_PSCSAR_REG
(
LMEM_BASE_PTR
)

	)

25614 
	#LMEM_PSCCVR
 
	`LMEM_PSCCVR_REG
(
LMEM_BASE_PTR
)

	)

25635 
uöt8_t
 
	mRESERVED_0
[8];

25636 
__I
 
uöt16_t
 
	mPLASC
;

25637 
__I
 
uöt16_t
 
	mPLAMC
;

25638 
uöt8_t
 
	mRESERVED_1
[20];

25639 
__I
 
uöt32_t
 
	mFADR
;

25640 
__I
 
uöt32_t
 
	mFATR
;

25641 
__I
 
uöt32_t
 
	mFDR
;

25642 } 
	tMCM_Ty≥
, *
	tMCM_MemM≠På
;

25654 
	#MCM_PLASC_REG
(
ba£
Ë((ba£)->
PLASC
)

	)

25655 
	#MCM_PLAMC_REG
(
ba£
Ë((ba£)->
PLAMC
)

	)

25656 
	#MCM_FADR_REG
(
ba£
Ë((ba£)->
FADR
)

	)

25657 
	#MCM_FATR_REG
(
ba£
Ë((ba£)->
FATR
)

	)

25658 
	#MCM_FDR_REG
(
ba£
Ë((ba£)->
FDR
)

	)

25674 
	#MCM_PLASC_ASC_MASK
 0xFFu

	)

25675 
	#MCM_PLASC_ASC_SHIFT
 0

	)

25676 
	#MCM_PLASC_ASC
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
MCM_PLASC_ASC_SHIFT
))&
MCM_PLASC_ASC_MASK
)

	)

25678 
	#MCM_PLAMC_AMC_MASK
 0xFFu

	)

25679 
	#MCM_PLAMC_AMC_SHIFT
 0

	)

25680 
	#MCM_PLAMC_AMC
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
MCM_PLAMC_AMC_SHIFT
))&
MCM_PLAMC_AMC_MASK
)

	)

25682 
	#MCM_FADR_ADDRESS_MASK
 0xFFFFFFFFu

	)

25683 
	#MCM_FADR_ADDRESS_SHIFT
 0

	)

25684 
	#MCM_FADR_ADDRESS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MCM_FADR_ADDRESS_SHIFT
))&
MCM_FADR_ADDRESS_MASK
)

	)

25686 
	#MCM_FATR_BEDA_MASK
 0x1u

	)

25687 
	#MCM_FATR_BEDA_SHIFT
 0

	)

25688 
	#MCM_FATR_BEMD_MASK
 0x2u

	)

25689 
	#MCM_FATR_BEMD_SHIFT
 1

	)

25690 
	#MCM_FATR_BESZ_MASK
 0x30u

	)

25691 
	#MCM_FATR_BESZ_SHIFT
 4

	)

25692 
	#MCM_FATR_BESZ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MCM_FATR_BESZ_SHIFT
))&
MCM_FATR_BESZ_MASK
)

	)

25693 
	#MCM_FATR_BEWT_MASK
 0x80u

	)

25694 
	#MCM_FATR_BEWT_SHIFT
 7

	)

25695 
	#MCM_FATR_BEMN_MASK
 0xF00u

	)

25696 
	#MCM_FATR_BEMN_SHIFT
 8

	)

25697 
	#MCM_FATR_BEMN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MCM_FATR_BEMN_SHIFT
))&
MCM_FATR_BEMN_MASK
)

	)

25698 
	#MCM_FATR_BEOVR_MASK
 0x80000000u

	)

25699 
	#MCM_FATR_BEOVR_SHIFT
 31

	)

25701 
	#MCM_FDR_DATA_MASK
 0xFFFFFFFFu

	)

25702 
	#MCM_FDR_DATA_SHIFT
 0

	)

25703 
	#MCM_FDR_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MCM_FDR_DATA_SHIFT
))&
MCM_FDR_DATA_MASK
)

	)

25711 
	#MCM_BASE
 (0x4E0000000u)

	)

25713 
	#MCM
 ((
MCM_Ty≥
 *)
MCM_BASE
)

	)

25714 
	#MCM_BASE_PTR
 (
MCM
)

	)

25716 
	#MCM_BASE_ADDRS
 { 
MCM_BASE
 }

	)

25718 
	#MCM_BASE_PTRS
 { 
MCM
 }

	)

25731 
	#MCM_PLASC
 
	`MCM_PLASC_REG
(
MCM_BASE_PTR
)

	)

25732 
	#MCM_PLAMC
 
	`MCM_PLAMC_REG
(
MCM_BASE_PTR
)

	)

25733 
	#MCM_FADR
 
	`MCM_FADR_REG
(
MCM_BASE_PTR
)

	)

25734 
	#MCM_FATR
 
	`MCM_FATR_REG
(
MCM_BASE_PTR
)

	)

25735 
	#MCM_FDR
 
	`MCM_FDR_REG
(
MCM_BASE_PTR
)

	)

25756 
__IO
 
uöt32_t
 
	mMLBC0
;

25757 
uöt8_t
 
	mRESERVED_0
[8];

25759 
__I
 
uöt32_t
 
	mMS0
;

25761 
uöt8_t
 
	mRESERVED_0
[1];

25762 
__I
 
uöt32_t
 
	mMLBPC2
;

25763 } 
	mMLBPC2
;

25765 
uöt8_t
 
	mRESERVED_1
[3];

25766 
__I
 
uöt32_t
 
	mMS1
;

25767 
uöt8_t
 
	mRESERVED_2
[8];

25768 
__I
 
uöt32_t
 
	mMSS
;

25769 
__I
 
uöt32_t
 
	mMSD
;

25770 
uöt8_t
 
	mRESERVED_3
[4];

25771 
__IO
 
uöt32_t
 
	mMIEN
;

25772 
uöt8_t
 
	mRESERVED_4
[12];

25773 
__I
 
uöt32_t
 
	mMLBC1
;

25774 
uöt8_t
 
	mRESERVED_5
[64];

25775 
__IO
 
uöt32_t
 
	mHCTL
;

25776 
uöt8_t
 
	mRESERVED_6
[4];

25777 
__IO
 
uöt32_t
 
	mHCMR0
;

25778 
__IO
 
uöt32_t
 
	mHCMR1
;

25779 
__I
 
uöt32_t
 
	mHCER0
;

25780 
__I
 
uöt32_t
 
	mHCER1
;

25781 
__I
 
uöt32_t
 
	mHCBR0
;

25782 
__I
 
uöt32_t
 
	mHCBR1
;

25783 
uöt8_t
 
	mRESERVED_7
[32];

25784 
__IO
 
uöt32_t
 
	mMDAT0
;

25785 
__IO
 
uöt32_t
 
	mMDAT1
;

25786 
__IO
 
uöt32_t
 
	mMDAT2
;

25787 
__IO
 
uöt32_t
 
	mMDAT3
;

25788 
__IO
 
uöt32_t
 
	mMDWE0
;

25789 
__IO
 
uöt32_t
 
	mMDWE1
;

25790 
__IO
 
uöt32_t
 
	mMDWE2
;

25791 
__IO
 
uöt32_t
 
	mMDWE3
;

25792 
__I
 
uöt32_t
 
	mMCTL
;

25793 
__IO
 
uöt32_t
 
	mMADR
;

25794 
uöt8_t
 
	mRESERVED_8
[728];

25795 
__IO
 
uöt32_t
 
	mACTL
;

25796 
uöt8_t
 
	mRESERVED_9
[12];

25797 
__I
 
uöt32_t
 
	mACSR0
;

25798 
__I
 
uöt32_t
 
	mACSR1
;

25799 
__IO
 
uöt32_t
 
	mACMR0
;

25800 
__IO
 
uöt32_t
 
	mACMR1
;

25801 } 
	tMLB_Ty≥
, *
	tMLB_MemM≠På
;

25813 
	#MLB_MLBC0_REG
(
ba£
Ë((ba£)->
MLBC0
)

	)

25814 
	#MLB_MS0_REG
(
ba£
Ë((ba£)->
MS0
)

	)

25815 
	#MLB_MLBPC2_REG
(
ba£
Ë((ba£)->
MLBPC2
.MLBPC2)

	)

25816 
	#MLB_MS1_REG
(
ba£
Ë((ba£)->
MS1
)

	)

25817 
	#MLB_MSS_REG
(
ba£
Ë((ba£)->
MSS
)

	)

25818 
	#MLB_MSD_REG
(
ba£
Ë((ba£)->
MSD
)

	)

25819 
	#MLB_MIEN_REG
(
ba£
Ë((ba£)->
MIEN
)

	)

25820 
	#MLB_MLBC1_REG
(
ba£
Ë((ba£)->
MLBC1
)

	)

25821 
	#MLB_HCTL_REG
(
ba£
Ë((ba£)->
HCTL
)

	)

25822 
	#MLB_HCMR0_REG
(
ba£
Ë((ba£)->
HCMR0
)

	)

25823 
	#MLB_HCMR1_REG
(
ba£
Ë((ba£)->
HCMR1
)

	)

25824 
	#MLB_HCER0_REG
(
ba£
Ë((ba£)->
HCER0
)

	)

25825 
	#MLB_HCER1_REG
(
ba£
Ë((ba£)->
HCER1
)

	)

25826 
	#MLB_HCBR0_REG
(
ba£
Ë((ba£)->
HCBR0
)

	)

25827 
	#MLB_HCBR1_REG
(
ba£
Ë((ba£)->
HCBR1
)

	)

25828 
	#MLB_MDAT0_REG
(
ba£
Ë((ba£)->
MDAT0
)

	)

25829 
	#MLB_MDAT1_REG
(
ba£
Ë((ba£)->
MDAT1
)

	)

25830 
	#MLB_MDAT2_REG
(
ba£
Ë((ba£)->
MDAT2
)

	)

25831 
	#MLB_MDAT3_REG
(
ba£
Ë((ba£)->
MDAT3
)

	)

25832 
	#MLB_MDWE0_REG
(
ba£
Ë((ba£)->
MDWE0
)

	)

25833 
	#MLB_MDWE1_REG
(
ba£
Ë((ba£)->
MDWE1
)

	)

25834 
	#MLB_MDWE2_REG
(
ba£
Ë((ba£)->
MDWE2
)

	)

25835 
	#MLB_MDWE3_REG
(
ba£
Ë((ba£)->
MDWE3
)

	)

25836 
	#MLB_MCTL_REG
(
ba£
Ë((ba£)->
MCTL
)

	)

25837 
	#MLB_MADR_REG
(
ba£
Ë((ba£)->
MADR
)

	)

25838 
	#MLB_ACTL_REG
(
ba£
Ë((ba£)->
ACTL
)

	)

25839 
	#MLB_ACSR0_REG
(
ba£
Ë((ba£)->
ACSR0
)

	)

25840 
	#MLB_ACSR1_REG
(
ba£
Ë((ba£)->
ACSR1
)

	)

25841 
	#MLB_ACMR0_REG
(
ba£
Ë((ba£)->
ACMR0
)

	)

25842 
	#MLB_ACMR1_REG
(
ba£
Ë((ba£)->
ACMR1
)

	)

25858 
	#MLB_MLBC0_MLBEN_MASK
 0x1u

	)

25859 
	#MLB_MLBC0_MLBEN_SHIFT
 0

	)

25860 
	#MLB_MLBC0_MLBCLK_2_0_MASK
 0x1Cu

	)

25861 
	#MLB_MLBC0_MLBCLK_2_0_SHIFT
 2

	)

25862 
	#MLB_MLBC0_MLBCLK_2_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MLBC0_MLBCLK_2_0_SHIFT
))&
MLB_MLBC0_MLBCLK_2_0_MASK
)

	)

25863 
	#MLB_MLBC0_MLBLK_MASK
 0x80u

	)

25864 
	#MLB_MLBC0_MLBLK_SHIFT
 7

	)

25865 
	#MLB_MLBC0_ASYRETRY_MASK
 0x1000u

	)

25866 
	#MLB_MLBC0_ASYRETRY_SHIFT
 12

	)

25867 
	#MLB_MLBC0_CTLRETRY_MASK
 0x4000u

	)

25868 
	#MLB_MLBC0_CTLRETRY_SHIFT
 14

	)

25869 
	#MLB_MLBC0_FCNT_MASK
 0x38000u

	)

25870 
	#MLB_MLBC0_FCNT_SHIFT
 15

	)

25871 
	#MLB_MLBC0_FCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MLBC0_FCNT_SHIFT
))&
MLB_MLBC0_FCNT_MASK
)

	)

25873 
	#MLB_MS0_MCS_31_0_MASK
 0xFFFFFFFFu

	)

25874 
	#MLB_MS0_MCS_31_0_SHIFT
 0

	)

25875 
	#MLB_MS0_MCS_31_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MS0_MCS_31_0_SHIFT
))&
MLB_MS0_MCS_31_0_MASK
)

	)

25877 
	#MLB_MLBPC2_SDOPC_MASK
 0x1u

	)

25878 
	#MLB_MLBPC2_SDOPC_SHIFT
 0

	)

25879 
	#MLB_MLBPC2_MORCD_MASK
 0x7F00u

	)

25880 
	#MLB_MLBPC2_MORCD_SHIFT
 8

	)

25881 
	#MLB_MLBPC2_MORCD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MLBPC2_MORCD_SHIFT
))&
MLB_MLBPC2_MORCD_MASK
)

	)

25882 
	#MLB_MLBPC2_MORCE_MASK
 0x8000u

	)

25883 
	#MLB_MLBPC2_MORCE_SHIFT
 15

	)

25885 
	#MLB_MS1_MCS_63_32_MASK
 0xFFFFFFFFu

	)

25886 
	#MLB_MS1_MCS_63_32_SHIFT
 0

	)

25887 
	#MLB_MS1_MCS_63_32
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MS1_MCS_63_32_SHIFT
))&
MLB_MS1_MCS_63_32_MASK
)

	)

25889 
	#MLB_MSS_RSTSYSCMD_MASK
 0x1u

	)

25890 
	#MLB_MSS_RSTSYSCMD_SHIFT
 0

	)

25891 
	#MLB_MSS_LKSYSCMD_MASK
 0x2u

	)

25892 
	#MLB_MSS_LKSYSCMD_SHIFT
 1

	)

25893 
	#MLB_MSS_ULKSYSCMD_MASK
 0x4u

	)

25894 
	#MLB_MSS_ULKSYSCMD_SHIFT
 2

	)

25895 
	#MLB_MSS_CSSYSCMD_MASK
 0x8u

	)

25896 
	#MLB_MSS_CSSYSCMD_SHIFT
 3

	)

25897 
	#MLB_MSS_SWSYSCMD_MASK
 0x10u

	)

25898 
	#MLB_MSS_SWSYSCMD_SHIFT
 4

	)

25899 
	#MLB_MSS_SERVREQ_MASK
 0x20u

	)

25900 
	#MLB_MSS_SERVREQ_SHIFT
 5

	)

25902 
	#MLB_MSD_SD0_7_0_MASK
 0xFFu

	)

25903 
	#MLB_MSD_SD0_7_0_SHIFT
 0

	)

25904 
	#MLB_MSD_SD0_7_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MSD_SD0_7_0_SHIFT
))&
MLB_MSD_SD0_7_0_MASK
)

	)

25905 
	#MLB_MSD_SD1_7_0_MASK
 0xFF00u

	)

25906 
	#MLB_MSD_SD1_7_0_SHIFT
 8

	)

25907 
	#MLB_MSD_SD1_7_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MSD_SD1_7_0_SHIFT
))&
MLB_MSD_SD1_7_0_MASK
)

	)

25908 
	#MLB_MSD_SD2_7_0_MASK
 0xFF0000u

	)

25909 
	#MLB_MSD_SD2_7_0_SHIFT
 16

	)

25910 
	#MLB_MSD_SD2_7_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MSD_SD2_7_0_SHIFT
))&
MLB_MSD_SD2_7_0_MASK
)

	)

25911 
	#MLB_MSD_SD3_7_0_MASK
 0xFF000000u

	)

25912 
	#MLB_MSD_SD3_7_0_SHIFT
 24

	)

25913 
	#MLB_MSD_SD3_7_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MSD_SD3_7_0_SHIFT
))&
MLB_MSD_SD3_7_0_MASK
)

	)

25915 
	#MLB_MIEN_ISOC_PE_MASK
 0x1u

	)

25916 
	#MLB_MIEN_ISOC_PE_SHIFT
 0

	)

25917 
	#MLB_MIEN_ISOC_BUFO_MASK
 0x2u

	)

25918 
	#MLB_MIEN_ISOC_BUFO_SHIFT
 1

	)

25919 
	#MLB_MIEN_SYNC_PE_MASK
 0x10000u

	)

25920 
	#MLB_MIEN_SYNC_PE_SHIFT
 16

	)

25921 
	#MLB_MIEN_ARX_DONE_MASK
 0x20000u

	)

25922 
	#MLB_MIEN_ARX_DONE_SHIFT
 17

	)

25923 
	#MLB_MIEN_ARX_PE_MASK
 0x40000u

	)

25924 
	#MLB_MIEN_ARX_PE_SHIFT
 18

	)

25925 
	#MLB_MIEN_ARX_BREAK_MASK
 0x80000u

	)

25926 
	#MLB_MIEN_ARX_BREAK_SHIFT
 19

	)

25927 
	#MLB_MIEN_ATX_DONE_MASK
 0x100000u

	)

25928 
	#MLB_MIEN_ATX_DONE_SHIFT
 20

	)

25929 
	#MLB_MIEN_ATX_PE_MASK
 0x200000u

	)

25930 
	#MLB_MIEN_ATX_PE_SHIFT
 21

	)

25931 
	#MLB_MIEN_ATX_BREAK_MASK
 0x400000u

	)

25932 
	#MLB_MIEN_ATX_BREAK_SHIFT
 22

	)

25933 
	#MLB_MIEN_CRX_DONE_MASK
 0x1000000u

	)

25934 
	#MLB_MIEN_CRX_DONE_SHIFT
 24

	)

25935 
	#MLB_MIEN_CRX_PE_MASK
 0x2000000u

	)

25936 
	#MLB_MIEN_CRX_PE_SHIFT
 25

	)

25937 
	#MLB_MIEN_CRX_BREAK_MASK
 0x4000000u

	)

25938 
	#MLB_MIEN_CRX_BREAK_SHIFT
 26

	)

25939 
	#MLB_MIEN_CTX_DONE_MASK
 0x8000000u

	)

25940 
	#MLB_MIEN_CTX_DONE_SHIFT
 27

	)

25941 
	#MLB_MIEN_CTX_PE_MASK
 0x10000000u

	)

25942 
	#MLB_MIEN_CTX_PE_SHIFT
 28

	)

25943 
	#MLB_MIEN_CTX_BREAK_MASK
 0x20000000u

	)

25944 
	#MLB_MIEN_CTX_BREAK_SHIFT
 29

	)

25946 
	#MLB_MLBC1_LOCK_MASK
 0x40u

	)

25947 
	#MLB_MLBC1_LOCK_SHIFT
 6

	)

25948 
	#MLB_MLBC1_CLKM_MASK
 0x80u

	)

25949 
	#MLB_MLBC1_CLKM_SHIFT
 7

	)

25950 
	#MLB_MLBC1_NDA_7_0_MASK
 0xFF00u

	)

25951 
	#MLB_MLBC1_NDA_7_0_SHIFT
 8

	)

25952 
	#MLB_MLBC1_NDA_7_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MLBC1_NDA_7_0_SHIFT
))&
MLB_MLBC1_NDA_7_0_MASK
)

	)

25954 
	#MLB_HCTL_RST0_MASK
 0x1u

	)

25955 
	#MLB_HCTL_RST0_SHIFT
 0

	)

25956 
	#MLB_HCTL_RST1_MASK
 0x2u

	)

25957 
	#MLB_HCTL_RST1_SHIFT
 1

	)

25958 
	#MLB_HCTL_EN_MASK
 0x8000u

	)

25959 
	#MLB_HCTL_EN_SHIFT
 15

	)

25961 
	#MLB_HCMR0_CHM_31_0_P_MASK
 0xFFFFFFFFu

	)

25962 
	#MLB_HCMR0_CHM_31_0_P_SHIFT
 0

	)

25963 
	#MLB_HCMR0_CHM_31_0_P
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_HCMR0_CHM_31_0_P_SHIFT
))&
MLB_HCMR0_CHM_31_0_P_MASK
)

	)

25965 
	#MLB_HCMR1_CHM_63_32_MASK
 0xFFFFFFFFu

	)

25966 
	#MLB_HCMR1_CHM_63_32_SHIFT
 0

	)

25967 
	#MLB_HCMR1_CHM_63_32
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_HCMR1_CHM_63_32_SHIFT
))&
MLB_HCMR1_CHM_63_32_MASK
)

	)

25969 
	#MLB_HCER0_CERR_31_0_MASK
 0xFFFFFFFFu

	)

25970 
	#MLB_HCER0_CERR_31_0_SHIFT
 0

	)

25971 
	#MLB_HCER0_CERR_31_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_HCER0_CERR_31_0_SHIFT
))&
MLB_HCER0_CERR_31_0_MASK
)

	)

25973 
	#MLB_HCER1_CERR_63_32_MASK
 0xFFFFFFFFu

	)

25974 
	#MLB_HCER1_CERR_63_32_SHIFT
 0

	)

25975 
	#MLB_HCER1_CERR_63_32
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_HCER1_CERR_63_32_SHIFT
))&
MLB_HCER1_CERR_63_32_MASK
)

	)

25977 
	#MLB_HCBR0_CHB_31_0_MASK
 0xFFFFFFFFu

	)

25978 
	#MLB_HCBR0_CHB_31_0_SHIFT
 0

	)

25979 
	#MLB_HCBR0_CHB_31_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_HCBR0_CHB_31_0_SHIFT
))&
MLB_HCBR0_CHB_31_0_MASK
)

	)

25981 
	#MLB_HCBR1_CHB_63_32_MASK
 0xFFFFFFFFu

	)

25982 
	#MLB_HCBR1_CHB_63_32_SHIFT
 0

	)

25983 
	#MLB_HCBR1_CHB_63_32
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_HCBR1_CHB_63_32_SHIFT
))&
MLB_HCBR1_CHB_63_32_MASK
)

	)

25985 
	#MLB_MDAT0_DATA_31_0_MASK
 0xFFFFFFFFu

	)

25986 
	#MLB_MDAT0_DATA_31_0_SHIFT
 0

	)

25987 
	#MLB_MDAT0_DATA_31_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MDAT0_DATA_31_0_SHIFT
))&
MLB_MDAT0_DATA_31_0_MASK
)

	)

25989 
	#MLB_MDAT1_DATA_63_32_MASK
 0xFFFFFFFFu

	)

25990 
	#MLB_MDAT1_DATA_63_32_SHIFT
 0

	)

25991 
	#MLB_MDAT1_DATA_63_32
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MDAT1_DATA_63_32_SHIFT
))&
MLB_MDAT1_DATA_63_32_MASK
)

	)

25993 
	#MLB_MDAT2_DATA_95_64_MASK
 0xFFFFFFFFu

	)

25994 
	#MLB_MDAT2_DATA_95_64_SHIFT
 0

	)

25995 
	#MLB_MDAT2_DATA_95_64
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MDAT2_DATA_95_64_SHIFT
))&
MLB_MDAT2_DATA_95_64_MASK
)

	)

25997 
	#MLB_MDAT3_DATA_127_96_MASK
 0xFFFFFFFFu

	)

25998 
	#MLB_MDAT3_DATA_127_96_SHIFT
 0

	)

25999 
	#MLB_MDAT3_DATA_127_96
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MDAT3_DATA_127_96_SHIFT
))&
MLB_MDAT3_DATA_127_96_MASK
)

	)

26001 
	#MLB_MDWE0_MASK_31_0_MASK
 0xFFFFFFFFu

	)

26002 
	#MLB_MDWE0_MASK_31_0_SHIFT
 0

	)

26003 
	#MLB_MDWE0_MASK_31_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MDWE0_MASK_31_0_SHIFT
))&
MLB_MDWE0_MASK_31_0_MASK
)

	)

26005 
	#MLB_MDWE1_MASK_63_32_MASK
 0xFFFFFFFFu

	)

26006 
	#MLB_MDWE1_MASK_63_32_SHIFT
 0

	)

26007 
	#MLB_MDWE1_MASK_63_32
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MDWE1_MASK_63_32_SHIFT
))&
MLB_MDWE1_MASK_63_32_MASK
)

	)

26009 
	#MLB_MDWE2_MASK_95_64_MASK
 0xFFFFFFFFu

	)

26010 
	#MLB_MDWE2_MASK_95_64_SHIFT
 0

	)

26011 
	#MLB_MDWE2_MASK_95_64
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MDWE2_MASK_95_64_SHIFT
))&
MLB_MDWE2_MASK_95_64_MASK
)

	)

26013 
	#MLB_MDWE3_MASK_127_96_MASK
 0xFFFFFFFFu

	)

26014 
	#MLB_MDWE3_MASK_127_96_SHIFT
 0

	)

26015 
	#MLB_MDWE3_MASK_127_96
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MDWE3_MASK_127_96_SHIFT
))&
MLB_MDWE3_MASK_127_96_MASK
)

	)

26017 
	#MLB_MCTL_XCMP_MASK
 0x1u

	)

26018 
	#MLB_MCTL_XCMP_SHIFT
 0

	)

26020 
	#MLB_MADR_ADDR_7_0_MASK
 0xFFu

	)

26021 
	#MLB_MADR_ADDR_7_0_SHIFT
 0

	)

26022 
	#MLB_MADR_ADDR_7_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MADR_ADDR_7_0_SHIFT
))&
MLB_MADR_ADDR_7_0_MASK
)

	)

26023 
	#MLB_MADR_ADDR_13_8_MASK
 0x3F00u

	)

26024 
	#MLB_MADR_ADDR_13_8_SHIFT
 8

	)

26025 
	#MLB_MADR_ADDR_13_8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_MADR_ADDR_13_8_SHIFT
))&
MLB_MADR_ADDR_13_8_MASK
)

	)

26026 
	#MLB_MADR_TB_MASK
 0x40000000u

	)

26027 
	#MLB_MADR_TB_SHIFT
 30

	)

26028 
	#MLB_MADR_WNR_MASK
 0x80000000u

	)

26029 
	#MLB_MADR_WNR_SHIFT
 31

	)

26031 
	#MLB_ACTL_SCE_MASK
 0x1u

	)

26032 
	#MLB_ACTL_SCE_SHIFT
 0

	)

26033 
	#MLB_ACTL_SMX_MASK
 0x2u

	)

26034 
	#MLB_ACTL_SMX_SHIFT
 1

	)

26035 
	#MLB_ACTL_DMA_MODE_MASK
 0x4u

	)

26036 
	#MLB_ACTL_DMA_MODE_SHIFT
 2

	)

26037 
	#MLB_ACTL_MPB_MASK
 0x10u

	)

26038 
	#MLB_ACTL_MPB_SHIFT
 4

	)

26040 
	#MLB_ACSR0_CHS_MASK
 0xFFFFFFFFu

	)

26041 
	#MLB_ACSR0_CHS_SHIFT
 0

	)

26042 
	#MLB_ACSR0_CHS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_ACSR0_CHS_SHIFT
))&
MLB_ACSR0_CHS_MASK
)

	)

26044 
	#MLB_ACSR1_CHS_MASK
 0xFFFFFFFFu

	)

26045 
	#MLB_ACSR1_CHS_SHIFT
 0

	)

26046 
	#MLB_ACSR1_CHS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_ACSR1_CHS_SHIFT
))&
MLB_ACSR1_CHS_MASK
)

	)

26048 
	#MLB_ACMR0_CHM_31_0_MASK
 0xFFFFFFFFu

	)

26049 
	#MLB_ACMR0_CHM_31_0_SHIFT
 0

	)

26050 
	#MLB_ACMR0_CHM_31_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_ACMR0_CHM_31_0_SHIFT
))&
MLB_ACMR0_CHM_31_0_MASK
)

	)

26052 
	#MLB_ACMR1_CHM_MASK
 0xFFFFFFFFu

	)

26053 
	#MLB_ACMR1_CHM_SHIFT
 0

	)

26054 
	#MLB_ACMR1_CHM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MLB_ACMR1_CHM_SHIFT
))&
MLB_ACMR1_CHM_MASK
)

	)

26062 
	#MLB_BASE
 (0x4218C000u)

	)

26064 
	#MLB
 ((
MLB_Ty≥
 *)
MLB_BASE
)

	)

26065 
	#MLB_BASE_PTR
 (
MLB
)

	)

26067 
	#MLB_BASE_ADDRS
 { 
MLB_BASE
 }

	)

26069 
	#MLB_BASE_PTRS
 { 
MLB
 }

	)

26082 
	#MLB_MLBC0
 
	`MLB_MLBC0_REG
(
MLB_BASE_PTR
)

	)

26083 
	#MLB_MS0
 
	`MLB_MS0_REG
(
MLB_BASE_PTR
)

	)

26084 
	#MLB_MLBPC2
 
	`MLB_MLBPC2_REG
(
MLB_BASE_PTR
)

	)

26085 
	#MLB_MS1
 
	`MLB_MS1_REG
(
MLB_BASE_PTR
)

	)

26086 
	#MLB_MSS
 
	`MLB_MSS_REG
(
MLB_BASE_PTR
)

	)

26087 
	#MLB_MSD
 
	`MLB_MSD_REG
(
MLB_BASE_PTR
)

	)

26088 
	#MLB_MIEN
 
	`MLB_MIEN_REG
(
MLB_BASE_PTR
)

	)

26089 
	#MLB_MLBC1
 
	`MLB_MLBC1_REG
(
MLB_BASE_PTR
)

	)

26090 
	#MLB_HCTL
 
	`MLB_HCTL_REG
(
MLB_BASE_PTR
)

	)

26091 
	#MLB_HCMR0
 
	`MLB_HCMR0_REG
(
MLB_BASE_PTR
)

	)

26092 
	#MLB_HCMR1
 
	`MLB_HCMR1_REG
(
MLB_BASE_PTR
)

	)

26093 
	#MLB_HCER0
 
	`MLB_HCER0_REG
(
MLB_BASE_PTR
)

	)

26094 
	#MLB_HCER1
 
	`MLB_HCER1_REG
(
MLB_BASE_PTR
)

	)

26095 
	#MLB_HCBR0
 
	`MLB_HCBR0_REG
(
MLB_BASE_PTR
)

	)

26096 
	#MLB_HCBR1
 
	`MLB_HCBR1_REG
(
MLB_BASE_PTR
)

	)

26097 
	#MLB_MDAT0
 
	`MLB_MDAT0_REG
(
MLB_BASE_PTR
)

	)

26098 
	#MLB_MDAT1
 
	`MLB_MDAT1_REG
(
MLB_BASE_PTR
)

	)

26099 
	#MLB_MDAT2
 
	`MLB_MDAT2_REG
(
MLB_BASE_PTR
)

	)

26100 
	#MLB_MDAT3
 
	`MLB_MDAT3_REG
(
MLB_BASE_PTR
)

	)

26101 
	#MLB_MDWE0
 
	`MLB_MDWE0_REG
(
MLB_BASE_PTR
)

	)

26102 
	#MLB_MDWE1
 
	`MLB_MDWE1_REG
(
MLB_BASE_PTR
)

	)

26103 
	#MLB_MDWE2
 
	`MLB_MDWE2_REG
(
MLB_BASE_PTR
)

	)

26104 
	#MLB_MDWE3
 
	`MLB_MDWE3_REG
(
MLB_BASE_PTR
)

	)

26105 
	#MLB_MCTL
 
	`MLB_MCTL_REG
(
MLB_BASE_PTR
)

	)

26106 
	#MLB_MADR
 
	`MLB_MADR_REG
(
MLB_BASE_PTR
)

	)

26107 
	#MLB_ACTL
 
	`MLB_ACTL_REG
(
MLB_BASE_PTR
)

	)

26108 
	#MLB_ACSR0
 
	`MLB_ACSR0_REG
(
MLB_BASE_PTR
)

	)

26109 
	#MLB_ACSR1
 
	`MLB_ACSR1_REG
(
MLB_BASE_PTR
)

	)

26110 
	#MLB_ACMR0
 
	`MLB_ACMR0_REG
(
MLB_BASE_PTR
)

	)

26111 
	#MLB_ACMR1
 
	`MLB_ACMR1_REG
(
MLB_BASE_PTR
)

	)

26132 
__IO
 
uöt32_t
 
	mMDCTL
;

26133 
__IO
 
uöt32_t
 
	mMDPDC
;

26134 
__IO
 
uöt32_t
 
	mMDOTC
;

26135 
__IO
 
uöt32_t
 
	mMDCFG0
;

26136 
__IO
 
uöt32_t
 
	mMDCFG1
;

26137 
__IO
 
uöt32_t
 
	mMDCFG2
;

26138 
__IO
 
uöt32_t
 
	mMDMISC
;

26139 
__IO
 
uöt32_t
 
	mMDSCR
;

26140 
__IO
 
uöt32_t
 
	mMDREF
;

26141 
uöt8_t
 
	mRESERVED_0
[8];

26142 
__IO
 
uöt32_t
 
	mMDRWD
;

26143 
__IO
 
uöt32_t
 
	mMDOR
;

26144 
__I
 
uöt32_t
 
	mMDMRR
;

26145 
__IO
 
uöt32_t
 
	mMDCFG3LP
;

26146 
__IO
 
uöt32_t
 
	mMDMR4
;

26147 
__IO
 
uöt32_t
 
	mMDASP
;

26148 
uöt8_t
 
	mRESERVED_1
[956];

26149 
__IO
 
uöt32_t
 
	mMAARCR
;

26150 
__IO
 
uöt32_t
 
	mMAPSR
;

26151 
__IO
 
uöt32_t
 
	mMAEXIDR0
;

26152 
__IO
 
uöt32_t
 
	mMAEXIDR1
;

26153 
__IO
 
uöt32_t
 
	mMADPCR0
;

26154 
__IO
 
uöt32_t
 
	mMADPCR1
;

26155 
__I
 
uöt32_t
 
	mMADPSR0
;

26156 
__I
 
uöt32_t
 
	mMADPSR1
;

26157 
__I
 
uöt32_t
 
	mMADPSR2
;

26158 
__I
 
uöt32_t
 
	mMADPSR3
;

26159 
__I
 
uöt32_t
 
	mMADPSR4
;

26160 
__I
 
uöt32_t
 
	mMADPSR5
;

26161 
__I
 
uöt32_t
 
	mMASBS0
;

26162 
__I
 
uöt32_t
 
	mMASBS1
;

26163 
uöt8_t
 
	mRESERVED_2
[8];

26164 
__IO
 
uöt32_t
 
	mMAGENP
;

26165 
uöt8_t
 
	mRESERVED_3
[956];

26166 
__IO
 
uöt32_t
 
	mMPZQHWCTRL
;

26167 
__IO
 
uöt32_t
 
	mMPZQSWCTRL
;

26168 
__IO
 
uöt32_t
 
	mMPWLGCR
;

26169 
__IO
 
uöt32_t
 
	mMPWLDECTRL0
;

26170 
__IO
 
uöt32_t
 
	mMPWLDECTRL1
;

26171 
__I
 
uöt32_t
 
	mMPWLDLST
;

26172 
__IO
 
uöt32_t
 
	mMPODTCTRL
;

26173 
__IO
 
uöt32_t
 
	mMPRDDQBY0DL
;

26174 
__IO
 
uöt32_t
 
	mMPRDDQBY1DL
;

26175 
__IO
 
uöt32_t
 
	mMPRDDQBY2DL
;

26176 
__IO
 
uöt32_t
 
	mMPRDDQBY3DL
;

26177 
__IO
 
uöt32_t
 
	mMPWRDQBY0DL
;

26178 
__IO
 
uöt32_t
 
	mMPWRDQBY1DL
;

26179 
__IO
 
uöt32_t
 
	mMPWRDQBY2DL
;

26180 
__IO
 
uöt32_t
 
	mMPWRDQBY3DL
;

26181 
__IO
 
uöt32_t
 
	mMPDGCTRL0
;

26182 
__IO
 
uöt32_t
 
	mMPDGCTRL1
;

26183 
__I
 
uöt32_t
 
	mMPDGDLST0
;

26184 
__IO
 
uöt32_t
 
	mMPRDDLCTL
;

26185 
__I
 
uöt32_t
 
	mMPRDDLST
;

26186 
__IO
 
uöt32_t
 
	mMPWRDLCTL
;

26187 
__I
 
uöt32_t
 
	mMPWRDLST
;

26188 
__IO
 
uöt32_t
 
	mMPSDCTRL
;

26189 
__IO
 
uöt32_t
 
	mMPZQLP2CTL
;

26190 
__IO
 
uöt32_t
 
	mMPRDDLHWCTL
;

26191 
__IO
 
uöt32_t
 
	mMPWRDLHWCTL
;

26192 
__I
 
uöt32_t
 
	mMPRDDLHWST0
;

26193 
__I
 
uöt32_t
 
	mMPRDDLHWST1
;

26194 
__I
 
uöt32_t
 
	mMPWRDLHWST0
;

26195 
__I
 
uöt32_t
 
	mMPWRDLHWST1
;

26196 
__IO
 
uöt32_t
 
	mMPWLHWERR
;

26197 
__I
 
uöt32_t
 
	mMPDGHWST0
;

26198 
__I
 
uöt32_t
 
	mMPDGHWST1
;

26199 
__I
 
uöt32_t
 
	mMPDGHWST2
;

26200 
__I
 
uöt32_t
 
	mMPDGHWST3
;

26201 
__IO
 
uöt32_t
 
	mMPPDCMPR1
;

26202 
__IO
 
uöt32_t
 
	mMPPDCMPR2
;

26203 
__IO
 
uöt32_t
 
	mMPSWDAR0
;

26204 
__I
 
uöt32_t
 
	mMPSWDRDR0
;

26205 
__I
 
uöt32_t
 
	mMPSWDRDR1
;

26206 
__I
 
uöt32_t
 
	mMPSWDRDR2
;

26207 
__I
 
uöt32_t
 
	mMPSWDRDR3
;

26208 
__I
 
uöt32_t
 
	mMPSWDRDR4
;

26209 
__I
 
uöt32_t
 
	mMPSWDRDR5
;

26210 
__I
 
uöt32_t
 
	mMPSWDRDR6
;

26211 
__I
 
uöt32_t
 
	mMPSWDRDR7
;

26212 
__IO
 
uöt32_t
 
	mMPMUR0
;

26213 
__IO
 
uöt32_t
 
	mMPWRCADL
;

26214 
__IO
 
uöt32_t
 
	mMPDCCR
;

26215 } 
	tMMDC_Ty≥
, *
	tMMDC_MemM≠På
;

26227 
	#MMDC_MDCTL_REG
(
ba£
Ë((ba£)->
MDCTL
)

	)

26228 
	#MMDC_MDPDC_REG
(
ba£
Ë((ba£)->
MDPDC
)

	)

26229 
	#MMDC_MDOTC_REG
(
ba£
Ë((ba£)->
MDOTC
)

	)

26230 
	#MMDC_MDCFG0_REG
(
ba£
Ë((ba£)->
MDCFG0
)

	)

26231 
	#MMDC_MDCFG1_REG
(
ba£
Ë((ba£)->
MDCFG1
)

	)

26232 
	#MMDC_MDCFG2_REG
(
ba£
Ë((ba£)->
MDCFG2
)

	)

26233 
	#MMDC_MDMISC_REG
(
ba£
Ë((ba£)->
MDMISC
)

	)

26234 
	#MMDC_MDSCR_REG
(
ba£
Ë((ba£)->
MDSCR
)

	)

26235 
	#MMDC_MDREF_REG
(
ba£
Ë((ba£)->
MDREF
)

	)

26236 
	#MMDC_MDRWD_REG
(
ba£
Ë((ba£)->
MDRWD
)

	)

26237 
	#MMDC_MDOR_REG
(
ba£
Ë((ba£)->
MDOR
)

	)

26238 
	#MMDC_MDMRR_REG
(
ba£
Ë((ba£)->
MDMRR
)

	)

26239 
	#MMDC_MDCFG3LP_REG
(
ba£
Ë((ba£)->
MDCFG3LP
)

	)

26240 
	#MMDC_MDMR4_REG
(
ba£
Ë((ba£)->
MDMR4
)

	)

26241 
	#MMDC_MDASP_REG
(
ba£
Ë((ba£)->
MDASP
)

	)

26242 
	#MMDC_MAARCR_REG
(
ba£
Ë((ba£)->
MAARCR
)

	)

26243 
	#MMDC_MAPSR_REG
(
ba£
Ë((ba£)->
MAPSR
)

	)

26244 
	#MMDC_MAEXIDR0_REG
(
ba£
Ë((ba£)->
MAEXIDR0
)

	)

26245 
	#MMDC_MAEXIDR1_REG
(
ba£
Ë((ba£)->
MAEXIDR1
)

	)

26246 
	#MMDC_MADPCR0_REG
(
ba£
Ë((ba£)->
MADPCR0
)

	)

26247 
	#MMDC_MADPCR1_REG
(
ba£
Ë((ba£)->
MADPCR1
)

	)

26248 
	#MMDC_MADPSR0_REG
(
ba£
Ë((ba£)->
MADPSR0
)

	)

26249 
	#MMDC_MADPSR1_REG
(
ba£
Ë((ba£)->
MADPSR1
)

	)

26250 
	#MMDC_MADPSR2_REG
(
ba£
Ë((ba£)->
MADPSR2
)

	)

26251 
	#MMDC_MADPSR3_REG
(
ba£
Ë((ba£)->
MADPSR3
)

	)

26252 
	#MMDC_MADPSR4_REG
(
ba£
Ë((ba£)->
MADPSR4
)

	)

26253 
	#MMDC_MADPSR5_REG
(
ba£
Ë((ba£)->
MADPSR5
)

	)

26254 
	#MMDC_MASBS0_REG
(
ba£
Ë((ba£)->
MASBS0
)

	)

26255 
	#MMDC_MASBS1_REG
(
ba£
Ë((ba£)->
MASBS1
)

	)

26256 
	#MMDC_MAGENP_REG
(
ba£
Ë((ba£)->
MAGENP
)

	)

26257 
	#MMDC_MPZQHWCTRL_REG
(
ba£
Ë((ba£)->
MPZQHWCTRL
)

	)

26258 
	#MMDC_MPZQSWCTRL_REG
(
ba£
Ë((ba£)->
MPZQSWCTRL
)

	)

26259 
	#MMDC_MPWLGCR_REG
(
ba£
Ë((ba£)->
MPWLGCR
)

	)

26260 
	#MMDC_MPWLDECTRL0_REG
(
ba£
Ë((ba£)->
MPWLDECTRL0
)

	)

26261 
	#MMDC_MPWLDECTRL1_REG
(
ba£
Ë((ba£)->
MPWLDECTRL1
)

	)

26262 
	#MMDC_MPWLDLST_REG
(
ba£
Ë((ba£)->
MPWLDLST
)

	)

26263 
	#MMDC_MPODTCTRL_REG
(
ba£
Ë((ba£)->
MPODTCTRL
)

	)

26264 
	#MMDC_MPRDDQBY0DL_REG
(
ba£
Ë((ba£)->
MPRDDQBY0DL
)

	)

26265 
	#MMDC_MPRDDQBY1DL_REG
(
ba£
Ë((ba£)->
MPRDDQBY1DL
)

	)

26266 
	#MMDC_MPRDDQBY2DL_REG
(
ba£
Ë((ba£)->
MPRDDQBY2DL
)

	)

26267 
	#MMDC_MPRDDQBY3DL_REG
(
ba£
Ë((ba£)->
MPRDDQBY3DL
)

	)

26268 
	#MMDC_MPWRDQBY0DL_REG
(
ba£
Ë((ba£)->
MPWRDQBY0DL
)

	)

26269 
	#MMDC_MPWRDQBY1DL_REG
(
ba£
Ë((ba£)->
MPWRDQBY1DL
)

	)

26270 
	#MMDC_MPWRDQBY2DL_REG
(
ba£
Ë((ba£)->
MPWRDQBY2DL
)

	)

26271 
	#MMDC_MPWRDQBY3DL_REG
(
ba£
Ë((ba£)->
MPWRDQBY3DL
)

	)

26272 
	#MMDC_MPDGCTRL0_REG
(
ba£
Ë((ba£)->
MPDGCTRL0
)

	)

26273 
	#MMDC_MPDGCTRL1_REG
(
ba£
Ë((ba£)->
MPDGCTRL1
)

	)

26274 
	#MMDC_MPDGDLST0_REG
(
ba£
Ë((ba£)->
MPDGDLST0
)

	)

26275 
	#MMDC_MPRDDLCTL_REG
(
ba£
Ë((ba£)->
MPRDDLCTL
)

	)

26276 
	#MMDC_MPRDDLST_REG
(
ba£
Ë((ba£)->
MPRDDLST
)

	)

26277 
	#MMDC_MPWRDLCTL_REG
(
ba£
Ë((ba£)->
MPWRDLCTL
)

	)

26278 
	#MMDC_MPWRDLST_REG
(
ba£
Ë((ba£)->
MPWRDLST
)

	)

26279 
	#MMDC_MPSDCTRL_REG
(
ba£
Ë((ba£)->
MPSDCTRL
)

	)

26280 
	#MMDC_MPZQLP2CTL_REG
(
ba£
Ë((ba£)->
MPZQLP2CTL
)

	)

26281 
	#MMDC_MPRDDLHWCTL_REG
(
ba£
Ë((ba£)->
MPRDDLHWCTL
)

	)

26282 
	#MMDC_MPWRDLHWCTL_REG
(
ba£
Ë((ba£)->
MPWRDLHWCTL
)

	)

26283 
	#MMDC_MPRDDLHWST0_REG
(
ba£
Ë((ba£)->
MPRDDLHWST0
)

	)

26284 
	#MMDC_MPRDDLHWST1_REG
(
ba£
Ë((ba£)->
MPRDDLHWST1
)

	)

26285 
	#MMDC_MPWRDLHWST0_REG
(
ba£
Ë((ba£)->
MPWRDLHWST0
)

	)

26286 
	#MMDC_MPWRDLHWST1_REG
(
ba£
Ë((ba£)->
MPWRDLHWST1
)

	)

26287 
	#MMDC_MPWLHWERR_REG
(
ba£
Ë((ba£)->
MPWLHWERR
)

	)

26288 
	#MMDC_MPDGHWST0_REG
(
ba£
Ë((ba£)->
MPDGHWST0
)

	)

26289 
	#MMDC_MPDGHWST1_REG
(
ba£
Ë((ba£)->
MPDGHWST1
)

	)

26290 
	#MMDC_MPDGHWST2_REG
(
ba£
Ë((ba£)->
MPDGHWST2
)

	)

26291 
	#MMDC_MPDGHWST3_REG
(
ba£
Ë((ba£)->
MPDGHWST3
)

	)

26292 
	#MMDC_MPPDCMPR1_REG
(
ba£
Ë((ba£)->
MPPDCMPR1
)

	)

26293 
	#MMDC_MPPDCMPR2_REG
(
ba£
Ë((ba£)->
MPPDCMPR2
)

	)

26294 
	#MMDC_MPSWDAR0_REG
(
ba£
Ë((ba£)->
MPSWDAR0
)

	)

26295 
	#MMDC_MPSWDRDR0_REG
(
ba£
Ë((ba£)->
MPSWDRDR0
)

	)

26296 
	#MMDC_MPSWDRDR1_REG
(
ba£
Ë((ba£)->
MPSWDRDR1
)

	)

26297 
	#MMDC_MPSWDRDR2_REG
(
ba£
Ë((ba£)->
MPSWDRDR2
)

	)

26298 
	#MMDC_MPSWDRDR3_REG
(
ba£
Ë((ba£)->
MPSWDRDR3
)

	)

26299 
	#MMDC_MPSWDRDR4_REG
(
ba£
Ë((ba£)->
MPSWDRDR4
)

	)

26300 
	#MMDC_MPSWDRDR5_REG
(
ba£
Ë((ba£)->
MPSWDRDR5
)

	)

26301 
	#MMDC_MPSWDRDR6_REG
(
ba£
Ë((ba£)->
MPSWDRDR6
)

	)

26302 
	#MMDC_MPSWDRDR7_REG
(
ba£
Ë((ba£)->
MPSWDRDR7
)

	)

26303 
	#MMDC_MPMUR0_REG
(
ba£
Ë((ba£)->
MPMUR0
)

	)

26304 
	#MMDC_MPWRCADL_REG
(
ba£
Ë((ba£)->
MPWRCADL
)

	)

26305 
	#MMDC_MPDCCR_REG
(
ba£
Ë((ba£)->
MPDCCR
)

	)

26321 
	#MMDC_MDCTL_DSIZ_MASK
 0x30000u

	)

26322 
	#MMDC_MDCTL_DSIZ_SHIFT
 16

	)

26323 
	#MMDC_MDCTL_DSIZ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCTL_DSIZ_SHIFT
))&
MMDC_MDCTL_DSIZ_MASK
)

	)

26324 
	#MMDC_MDCTL_BL_MASK
 0x80000u

	)

26325 
	#MMDC_MDCTL_BL_SHIFT
 19

	)

26326 
	#MMDC_MDCTL_COL_MASK
 0x700000u

	)

26327 
	#MMDC_MDCTL_COL_SHIFT
 20

	)

26328 
	#MMDC_MDCTL_COL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCTL_COL_SHIFT
))&
MMDC_MDCTL_COL_MASK
)

	)

26329 
	#MMDC_MDCTL_ROW_MASK
 0x7000000u

	)

26330 
	#MMDC_MDCTL_ROW_SHIFT
 24

	)

26331 
	#MMDC_MDCTL_ROW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCTL_ROW_SHIFT
))&
MMDC_MDCTL_ROW_MASK
)

	)

26332 
	#MMDC_MDCTL_SDE_1_MASK
 0x40000000u

	)

26333 
	#MMDC_MDCTL_SDE_1_SHIFT
 30

	)

26334 
	#MMDC_MDCTL_SDE_0_MASK
 0x80000000u

	)

26335 
	#MMDC_MDCTL_SDE_0_SHIFT
 31

	)

26337 
	#MMDC_MDPDC_tCKSRE_MASK
 0x7u

	)

26338 
	#MMDC_MDPDC_tCKSRE_SHIFT
 0

	)

26339 
	#MMDC_MDPDC_tCKSRE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDPDC_tCKSRE_SHIFT
))&
MMDC_MDPDC_tCKSRE_MASK
)

	)

26340 
	#MMDC_MDPDC_tCKSRX_MASK
 0x38u

	)

26341 
	#MMDC_MDPDC_tCKSRX_SHIFT
 3

	)

26342 
	#MMDC_MDPDC_tCKSRX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDPDC_tCKSRX_SHIFT
))&
MMDC_MDPDC_tCKSRX_MASK
)

	)

26343 
	#MMDC_MDPDC_BOTH_CS_PD_MASK
 0x40u

	)

26344 
	#MMDC_MDPDC_BOTH_CS_PD_SHIFT
 6

	)

26345 
	#MMDC_MDPDC_SLOW_PD_MASK
 0x80u

	)

26346 
	#MMDC_MDPDC_SLOW_PD_SHIFT
 7

	)

26347 
	#MMDC_MDPDC_PWDT_0_MASK
 0xF00u

	)

26348 
	#MMDC_MDPDC_PWDT_0_SHIFT
 8

	)

26349 
	#MMDC_MDPDC_PWDT_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDPDC_PWDT_0_SHIFT
))&
MMDC_MDPDC_PWDT_0_MASK
)

	)

26350 
	#MMDC_MDPDC_PWDT_1_MASK
 0xF000u

	)

26351 
	#MMDC_MDPDC_PWDT_1_SHIFT
 12

	)

26352 
	#MMDC_MDPDC_PWDT_1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDPDC_PWDT_1_SHIFT
))&
MMDC_MDPDC_PWDT_1_MASK
)

	)

26353 
	#MMDC_MDPDC_tCKE_MASK
 0x70000u

	)

26354 
	#MMDC_MDPDC_tCKE_SHIFT
 16

	)

26355 
	#MMDC_MDPDC_tCKE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDPDC_tCKE_SHIFT
))&
MMDC_MDPDC_tCKE_MASK
)

	)

26356 
	#MMDC_MDPDC_PRCT_0_MASK
 0x7000000u

	)

26357 
	#MMDC_MDPDC_PRCT_0_SHIFT
 24

	)

26358 
	#MMDC_MDPDC_PRCT_0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDPDC_PRCT_0_SHIFT
))&
MMDC_MDPDC_PRCT_0_MASK
)

	)

26359 
	#MMDC_MDPDC_PRCT_1_MASK
 0x70000000u

	)

26360 
	#MMDC_MDPDC_PRCT_1_SHIFT
 28

	)

26361 
	#MMDC_MDPDC_PRCT_1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDPDC_PRCT_1_SHIFT
))&
MMDC_MDPDC_PRCT_1_MASK
)

	)

26363 
	#MMDC_MDOTC_tODT_idÀ_off_MASK
 0x1F0u

	)

26364 
	#MMDC_MDOTC_tODT_idÀ_off_SHIFT
 4

	)

26365 
	#MMDC_MDOTC_tODT_idÀ_off
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDOTC_tODT_idÀ_off_SHIFT
))&
MMDC_MDOTC_tODT_idÀ_off_MASK
)

	)

26366 
	#MMDC_MDOTC_tODTL⁄_MASK
 0x7000u

	)

26367 
	#MMDC_MDOTC_tODTL⁄_SHIFT
 12

	)

26368 
	#MMDC_MDOTC_tODTL⁄
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDOTC_tODTL⁄_SHIFT
))&
MMDC_MDOTC_tODTL⁄_MASK
)

	)

26369 
	#MMDC_MDOTC_tAXPD_MASK
 0xF0000u

	)

26370 
	#MMDC_MDOTC_tAXPD_SHIFT
 16

	)

26371 
	#MMDC_MDOTC_tAXPD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDOTC_tAXPD_SHIFT
))&
MMDC_MDOTC_tAXPD_MASK
)

	)

26372 
	#MMDC_MDOTC_tANPD_MASK
 0xF00000u

	)

26373 
	#MMDC_MDOTC_tANPD_SHIFT
 20

	)

26374 
	#MMDC_MDOTC_tANPD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDOTC_tANPD_SHIFT
))&
MMDC_MDOTC_tANPD_MASK
)

	)

26375 
	#MMDC_MDOTC_tAONPD_MASK
 0x7000000u

	)

26376 
	#MMDC_MDOTC_tAONPD_SHIFT
 24

	)

26377 
	#MMDC_MDOTC_tAONPD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDOTC_tAONPD_SHIFT
))&
MMDC_MDOTC_tAONPD_MASK
)

	)

26378 
	#MMDC_MDOTC_tAOFPD_MASK
 0x38000000u

	)

26379 
	#MMDC_MDOTC_tAOFPD_SHIFT
 27

	)

26380 
	#MMDC_MDOTC_tAOFPD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDOTC_tAOFPD_SHIFT
))&
MMDC_MDOTC_tAOFPD_MASK
)

	)

26382 
	#MMDC_MDCFG0_tCL_MASK
 0xFu

	)

26383 
	#MMDC_MDCFG0_tCL_SHIFT
 0

	)

26384 
	#MMDC_MDCFG0_tCL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG0_tCL_SHIFT
))&
MMDC_MDCFG0_tCL_MASK
)

	)

26385 
	#MMDC_MDCFG0_tFAW_MASK
 0x1F0u

	)

26386 
	#MMDC_MDCFG0_tFAW_SHIFT
 4

	)

26387 
	#MMDC_MDCFG0_tFAW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG0_tFAW_SHIFT
))&
MMDC_MDCFG0_tFAW_MASK
)

	)

26388 
	#MMDC_MDCFG0_tXPDLL_MASK
 0x1E00u

	)

26389 
	#MMDC_MDCFG0_tXPDLL_SHIFT
 9

	)

26390 
	#MMDC_MDCFG0_tXPDLL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG0_tXPDLL_SHIFT
))&
MMDC_MDCFG0_tXPDLL_MASK
)

	)

26391 
	#MMDC_MDCFG0_tXP_MASK
 0xE000u

	)

26392 
	#MMDC_MDCFG0_tXP_SHIFT
 13

	)

26393 
	#MMDC_MDCFG0_tXP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG0_tXP_SHIFT
))&
MMDC_MDCFG0_tXP_MASK
)

	)

26394 
	#MMDC_MDCFG0_tXS_MASK
 0xFF0000u

	)

26395 
	#MMDC_MDCFG0_tXS_SHIFT
 16

	)

26396 
	#MMDC_MDCFG0_tXS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG0_tXS_SHIFT
))&
MMDC_MDCFG0_tXS_MASK
)

	)

26397 
	#MMDC_MDCFG0_tRFC_MASK
 0xFF000000u

	)

26398 
	#MMDC_MDCFG0_tRFC_SHIFT
 24

	)

26399 
	#MMDC_MDCFG0_tRFC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG0_tRFC_SHIFT
))&
MMDC_MDCFG0_tRFC_MASK
)

	)

26401 
	#MMDC_MDCFG1_tCWL_MASK
 0x7u

	)

26402 
	#MMDC_MDCFG1_tCWL_SHIFT
 0

	)

26403 
	#MMDC_MDCFG1_tCWL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG1_tCWL_SHIFT
))&
MMDC_MDCFG1_tCWL_MASK
)

	)

26404 
	#MMDC_MDCFG1_tMRD_MASK
 0x1E0u

	)

26405 
	#MMDC_MDCFG1_tMRD_SHIFT
 5

	)

26406 
	#MMDC_MDCFG1_tMRD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG1_tMRD_SHIFT
))&
MMDC_MDCFG1_tMRD_MASK
)

	)

26407 
	#MMDC_MDCFG1_tWR_MASK
 0xE00u

	)

26408 
	#MMDC_MDCFG1_tWR_SHIFT
 9

	)

26409 
	#MMDC_MDCFG1_tWR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG1_tWR_SHIFT
))&
MMDC_MDCFG1_tWR_MASK
)

	)

26410 
	#MMDC_MDCFG1_tRPA_MASK
 0x8000u

	)

26411 
	#MMDC_MDCFG1_tRPA_SHIFT
 15

	)

26412 
	#MMDC_MDCFG1_tRAS_MASK
 0x1F0000u

	)

26413 
	#MMDC_MDCFG1_tRAS_SHIFT
 16

	)

26414 
	#MMDC_MDCFG1_tRAS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG1_tRAS_SHIFT
))&
MMDC_MDCFG1_tRAS_MASK
)

	)

26415 
	#MMDC_MDCFG1_tRC_MASK
 0x3E00000u

	)

26416 
	#MMDC_MDCFG1_tRC_SHIFT
 21

	)

26417 
	#MMDC_MDCFG1_tRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG1_tRC_SHIFT
))&
MMDC_MDCFG1_tRC_MASK
)

	)

26418 
	#MMDC_MDCFG1_tRP_MASK
 0x1C000000u

	)

26419 
	#MMDC_MDCFG1_tRP_SHIFT
 26

	)

26420 
	#MMDC_MDCFG1_tRP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG1_tRP_SHIFT
))&
MMDC_MDCFG1_tRP_MASK
)

	)

26421 
	#MMDC_MDCFG1_tRCD_MASK
 0xE0000000u

	)

26422 
	#MMDC_MDCFG1_tRCD_SHIFT
 29

	)

26423 
	#MMDC_MDCFG1_tRCD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG1_tRCD_SHIFT
))&
MMDC_MDCFG1_tRCD_MASK
)

	)

26425 
	#MMDC_MDCFG2_tRRD_MASK
 0x7u

	)

26426 
	#MMDC_MDCFG2_tRRD_SHIFT
 0

	)

26427 
	#MMDC_MDCFG2_tRRD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG2_tRRD_SHIFT
))&
MMDC_MDCFG2_tRRD_MASK
)

	)

26428 
	#MMDC_MDCFG2_tWTR_MASK
 0x38u

	)

26429 
	#MMDC_MDCFG2_tWTR_SHIFT
 3

	)

26430 
	#MMDC_MDCFG2_tWTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG2_tWTR_SHIFT
))&
MMDC_MDCFG2_tWTR_MASK
)

	)

26431 
	#MMDC_MDCFG2_tRTP_MASK
 0x1C0u

	)

26432 
	#MMDC_MDCFG2_tRTP_SHIFT
 6

	)

26433 
	#MMDC_MDCFG2_tRTP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG2_tRTP_SHIFT
))&
MMDC_MDCFG2_tRTP_MASK
)

	)

26434 
	#MMDC_MDCFG2_tDLLK_MASK
 0x1FF0000u

	)

26435 
	#MMDC_MDCFG2_tDLLK_SHIFT
 16

	)

26436 
	#MMDC_MDCFG2_tDLLK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG2_tDLLK_SHIFT
))&
MMDC_MDCFG2_tDLLK_MASK
)

	)

26438 
	#MMDC_MDMISC_RST_MASK
 0x2u

	)

26439 
	#MMDC_MDMISC_RST_SHIFT
 1

	)

26440 
	#MMDC_MDMISC_DDR_TYPE_MASK
 0x18u

	)

26441 
	#MMDC_MDMISC_DDR_TYPE_SHIFT
 3

	)

26442 
	#MMDC_MDMISC_DDR_TYPE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDMISC_DDR_TYPE_SHIFT
))&
MMDC_MDMISC_DDR_TYPE_MASK
)

	)

26443 
	#MMDC_MDMISC_DDR_4_BANK_MASK
 0x20u

	)

26444 
	#MMDC_MDMISC_DDR_4_BANK_SHIFT
 5

	)

26445 
	#MMDC_MDMISC_RALAT_MASK
 0x1C0u

	)

26446 
	#MMDC_MDMISC_RALAT_SHIFT
 6

	)

26447 
	#MMDC_MDMISC_RALAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDMISC_RALAT_SHIFT
))&
MMDC_MDMISC_RALAT_MASK
)

	)

26448 
	#MMDC_MDMISC_MIF3_MODE_MASK
 0x600u

	)

26449 
	#MMDC_MDMISC_MIF3_MODE_SHIFT
 9

	)

26450 
	#MMDC_MDMISC_MIF3_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDMISC_MIF3_MODE_SHIFT
))&
MMDC_MDMISC_MIF3_MODE_MASK
)

	)

26451 
	#MMDC_MDMISC_LPDDR2_S2_MASK
 0x800u

	)

26452 
	#MMDC_MDMISC_LPDDR2_S2_SHIFT
 11

	)

26453 
	#MMDC_MDMISC_BI_ON_MASK
 0x1000u

	)

26454 
	#MMDC_MDMISC_BI_ON_SHIFT
 12

	)

26455 
	#MMDC_MDMISC_WALAT_MASK
 0x30000u

	)

26456 
	#MMDC_MDMISC_WALAT_SHIFT
 16

	)

26457 
	#MMDC_MDMISC_WALAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDMISC_WALAT_SHIFT
))&
MMDC_MDMISC_WALAT_MASK
)

	)

26458 
	#MMDC_MDMISC_LHD_MASK
 0x40000u

	)

26459 
	#MMDC_MDMISC_LHD_SHIFT
 18

	)

26460 
	#MMDC_MDMISC_ADDR_MIRROR_MASK
 0x80000u

	)

26461 
	#MMDC_MDMISC_ADDR_MIRROR_SHIFT
 19

	)

26462 
	#MMDC_MDMISC_CALIB_PER_CS_MASK
 0x100000u

	)

26463 
	#MMDC_MDMISC_CALIB_PER_CS_SHIFT
 20

	)

26464 
	#MMDC_MDMISC_CK1_GATING_MASK
 0x200000u

	)

26465 
	#MMDC_MDMISC_CK1_GATING_SHIFT
 21

	)

26466 
	#MMDC_MDMISC_CS1_RDY_MASK
 0x40000000u

	)

26467 
	#MMDC_MDMISC_CS1_RDY_SHIFT
 30

	)

26468 
	#MMDC_MDMISC_CS0_RDY_MASK
 0x80000000u

	)

26469 
	#MMDC_MDMISC_CS0_RDY_SHIFT
 31

	)

26471 
	#MMDC_MDSCR_CMD_BA_MASK
 0x7u

	)

26472 
	#MMDC_MDSCR_CMD_BA_SHIFT
 0

	)

26473 
	#MMDC_MDSCR_CMD_BA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDSCR_CMD_BA_SHIFT
))&
MMDC_MDSCR_CMD_BA_MASK
)

	)

26474 
	#MMDC_MDSCR_CMD_CS_MASK
 0x8u

	)

26475 
	#MMDC_MDSCR_CMD_CS_SHIFT
 3

	)

26476 
	#MMDC_MDSCR_CMD_MASK
 0x70u

	)

26477 
	#MMDC_MDSCR_CMD_SHIFT
 4

	)

26478 
	#MMDC_MDSCR_CMD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDSCR_CMD_SHIFT
))&
MMDC_MDSCR_CMD_MASK
)

	)

26479 
	#MMDC_MDSCR_WL_EN_MASK
 0x200u

	)

26480 
	#MMDC_MDSCR_WL_EN_SHIFT
 9

	)

26481 
	#MMDC_MDSCR_MRR_READ_DATA_VALID_MASK
 0x400u

	)

26482 
	#MMDC_MDSCR_MRR_READ_DATA_VALID_SHIFT
 10

	)

26483 
	#MMDC_MDSCR_CON_ACK_MASK
 0x4000u

	)

26484 
	#MMDC_MDSCR_CON_ACK_SHIFT
 14

	)

26485 
	#MMDC_MDSCR_CON_REQ_MASK
 0x8000u

	)

26486 
	#MMDC_MDSCR_CON_REQ_SHIFT
 15

	)

26487 
	#MMDC_MDSCR_CMD_ADDR_LSB_MR_ADDR_MASK
 0xFF0000u

	)

26488 
	#MMDC_MDSCR_CMD_ADDR_LSB_MR_ADDR_SHIFT
 16

	)

26489 
	#MMDC_MDSCR_CMD_ADDR_LSB_MR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDSCR_CMD_ADDR_LSB_MR_ADDR_SHIFT
))&
MMDC_MDSCR_CMD_ADDR_LSB_MR_ADDR_MASK
)

	)

26490 
	#MMDC_MDSCR_CMD_ADDR_MSB_MR_OP_MASK
 0xFF000000u

	)

26491 
	#MMDC_MDSCR_CMD_ADDR_MSB_MR_OP_SHIFT
 24

	)

26492 
	#MMDC_MDSCR_CMD_ADDR_MSB_MR_OP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDSCR_CMD_ADDR_MSB_MR_OP_SHIFT
))&
MMDC_MDSCR_CMD_ADDR_MSB_MR_OP_MASK
)

	)

26494 
	#MMDC_MDREF_START_REF_MASK
 0x1u

	)

26495 
	#MMDC_MDREF_START_REF_SHIFT
 0

	)

26496 
	#MMDC_MDREF_REFR_MASK
 0x3800u

	)

26497 
	#MMDC_MDREF_REFR_SHIFT
 11

	)

26498 
	#MMDC_MDREF_REFR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDREF_REFR_SHIFT
))&
MMDC_MDREF_REFR_MASK
)

	)

26499 
	#MMDC_MDREF_REF_SEL_MASK
 0xC000u

	)

26500 
	#MMDC_MDREF_REF_SEL_SHIFT
 14

	)

26501 
	#MMDC_MDREF_REF_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDREF_REF_SEL_SHIFT
))&
MMDC_MDREF_REF_SEL_MASK
)

	)

26502 
	#MMDC_MDREF_REF_CNT_MASK
 0xFFFF0000u

	)

26503 
	#MMDC_MDREF_REF_CNT_SHIFT
 16

	)

26504 
	#MMDC_MDREF_REF_CNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDREF_REF_CNT_SHIFT
))&
MMDC_MDREF_REF_CNT_MASK
)

	)

26506 
	#MMDC_MDRWD_RTR_DIFF_MASK
 0x7u

	)

26507 
	#MMDC_MDRWD_RTR_DIFF_SHIFT
 0

	)

26508 
	#MMDC_MDRWD_RTR_DIFF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDRWD_RTR_DIFF_SHIFT
))&
MMDC_MDRWD_RTR_DIFF_MASK
)

	)

26509 
	#MMDC_MDRWD_RTW_DIFF_MASK
 0x38u

	)

26510 
	#MMDC_MDRWD_RTW_DIFF_SHIFT
 3

	)

26511 
	#MMDC_MDRWD_RTW_DIFF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDRWD_RTW_DIFF_SHIFT
))&
MMDC_MDRWD_RTW_DIFF_MASK
)

	)

26512 
	#MMDC_MDRWD_WTW_DIFF_MASK
 0x1C0u

	)

26513 
	#MMDC_MDRWD_WTW_DIFF_SHIFT
 6

	)

26514 
	#MMDC_MDRWD_WTW_DIFF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDRWD_WTW_DIFF_SHIFT
))&
MMDC_MDRWD_WTW_DIFF_MASK
)

	)

26515 
	#MMDC_MDRWD_WTR_DIFF_MASK
 0xE00u

	)

26516 
	#MMDC_MDRWD_WTR_DIFF_SHIFT
 9

	)

26517 
	#MMDC_MDRWD_WTR_DIFF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDRWD_WTR_DIFF_SHIFT
))&
MMDC_MDRWD_WTR_DIFF_MASK
)

	)

26518 
	#MMDC_MDRWD_RTW_SAME_MASK
 0x7000u

	)

26519 
	#MMDC_MDRWD_RTW_SAME_SHIFT
 12

	)

26520 
	#MMDC_MDRWD_RTW_SAME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDRWD_RTW_SAME_SHIFT
))&
MMDC_MDRWD_RTW_SAME_MASK
)

	)

26521 
	#MMDC_MDRWD_tDAI_MASK
 0x1FFF0000u

	)

26522 
	#MMDC_MDRWD_tDAI_SHIFT
 16

	)

26523 
	#MMDC_MDRWD_tDAI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDRWD_tDAI_SHIFT
))&
MMDC_MDRWD_tDAI_MASK
)

	)

26525 
	#MMDC_MDOR_RST_to_CKE_MASK
 0x3Fu

	)

26526 
	#MMDC_MDOR_RST_to_CKE_SHIFT
 0

	)

26527 
	#MMDC_MDOR_RST_to_CKE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDOR_RST_to_CKE_SHIFT
))&
MMDC_MDOR_RST_to_CKE_MASK
)

	)

26528 
	#MMDC_MDOR_SDE_to_RST_MASK
 0x3F00u

	)

26529 
	#MMDC_MDOR_SDE_to_RST_SHIFT
 8

	)

26530 
	#MMDC_MDOR_SDE_to_RST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDOR_SDE_to_RST_SHIFT
))&
MMDC_MDOR_SDE_to_RST_MASK
)

	)

26531 
	#MMDC_MDOR_tXPR_MASK
 0xFF0000u

	)

26532 
	#MMDC_MDOR_tXPR_SHIFT
 16

	)

26533 
	#MMDC_MDOR_tXPR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDOR_tXPR_SHIFT
))&
MMDC_MDOR_tXPR_MASK
)

	)

26535 
	#MMDC_MDMRR_MRR_READ_DATA0_MASK
 0xFFu

	)

26536 
	#MMDC_MDMRR_MRR_READ_DATA0_SHIFT
 0

	)

26537 
	#MMDC_MDMRR_MRR_READ_DATA0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDMRR_MRR_READ_DATA0_SHIFT
))&
MMDC_MDMRR_MRR_READ_DATA0_MASK
)

	)

26538 
	#MMDC_MDMRR_MRR_READ_DATA1_MASK
 0xFF00u

	)

26539 
	#MMDC_MDMRR_MRR_READ_DATA1_SHIFT
 8

	)

26540 
	#MMDC_MDMRR_MRR_READ_DATA1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDMRR_MRR_READ_DATA1_SHIFT
))&
MMDC_MDMRR_MRR_READ_DATA1_MASK
)

	)

26541 
	#MMDC_MDMRR_MRR_READ_DATA2_MASK
 0xFF0000u

	)

26542 
	#MMDC_MDMRR_MRR_READ_DATA2_SHIFT
 16

	)

26543 
	#MMDC_MDMRR_MRR_READ_DATA2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDMRR_MRR_READ_DATA2_SHIFT
))&
MMDC_MDMRR_MRR_READ_DATA2_MASK
)

	)

26544 
	#MMDC_MDMRR_MRR_READ_DATA3_MASK
 0xFF000000u

	)

26545 
	#MMDC_MDMRR_MRR_READ_DATA3_SHIFT
 24

	)

26546 
	#MMDC_MDMRR_MRR_READ_DATA3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDMRR_MRR_READ_DATA3_SHIFT
))&
MMDC_MDMRR_MRR_READ_DATA3_MASK
)

	)

26548 
	#MMDC_MDCFG3LP_tRPab_LP_MASK
 0xFu

	)

26549 
	#MMDC_MDCFG3LP_tRPab_LP_SHIFT
 0

	)

26550 
	#MMDC_MDCFG3LP_tRPab_LP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG3LP_tRPab_LP_SHIFT
))&
MMDC_MDCFG3LP_tRPab_LP_MASK
)

	)

26551 
	#MMDC_MDCFG3LP_tRPpb_LP_MASK
 0xF0u

	)

26552 
	#MMDC_MDCFG3LP_tRPpb_LP_SHIFT
 4

	)

26553 
	#MMDC_MDCFG3LP_tRPpb_LP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG3LP_tRPpb_LP_SHIFT
))&
MMDC_MDCFG3LP_tRPpb_LP_MASK
)

	)

26554 
	#MMDC_MDCFG3LP_tRCD_LP_MASK
 0xF00u

	)

26555 
	#MMDC_MDCFG3LP_tRCD_LP_SHIFT
 8

	)

26556 
	#MMDC_MDCFG3LP_tRCD_LP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG3LP_tRCD_LP_SHIFT
))&
MMDC_MDCFG3LP_tRCD_LP_MASK
)

	)

26557 
	#MMDC_MDCFG3LP_RC_LP_MASK
 0x3F0000u

	)

26558 
	#MMDC_MDCFG3LP_RC_LP_SHIFT
 16

	)

26559 
	#MMDC_MDCFG3LP_RC_LP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDCFG3LP_RC_LP_SHIFT
))&
MMDC_MDCFG3LP_RC_LP_MASK
)

	)

26561 
	#MMDC_MDMR4_UPDATE_DE_REQ_MASK
 0x1u

	)

26562 
	#MMDC_MDMR4_UPDATE_DE_REQ_SHIFT
 0

	)

26563 
	#MMDC_MDMR4_UPDATE_DE_ACK_MASK
 0x2u

	)

26564 
	#MMDC_MDMR4_UPDATE_DE_ACK_SHIFT
 1

	)

26565 
	#MMDC_MDMR4_tRCD_DE_MASK
 0x10u

	)

26566 
	#MMDC_MDMR4_tRCD_DE_SHIFT
 4

	)

26567 
	#MMDC_MDMR4_tRC_DE_MASK
 0x20u

	)

26568 
	#MMDC_MDMR4_tRC_DE_SHIFT
 5

	)

26569 
	#MMDC_MDMR4_tRAS_DE_MASK
 0x40u

	)

26570 
	#MMDC_MDMR4_tRAS_DE_SHIFT
 6

	)

26571 
	#MMDC_MDMR4_tRP_DE_MASK
 0x80u

	)

26572 
	#MMDC_MDMR4_tRP_DE_SHIFT
 7

	)

26573 
	#MMDC_MDMR4_tRRD_DE_MASK
 0x100u

	)

26574 
	#MMDC_MDMR4_tRRD_DE_SHIFT
 8

	)

26576 
	#MMDC_MDASP_CS0_END_MASK
 0x7Fu

	)

26577 
	#MMDC_MDASP_CS0_END_SHIFT
 0

	)

26578 
	#MMDC_MDASP_CS0_END
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MDASP_CS0_END_SHIFT
))&
MMDC_MDASP_CS0_END_MASK
)

	)

26580 
	#MMDC_MAARCR_ARCR_GUARD_MASK
 0xFu

	)

26581 
	#MMDC_MAARCR_ARCR_GUARD_SHIFT
 0

	)

26582 
	#MMDC_MAARCR_ARCR_GUARD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MAARCR_ARCR_GUARD_SHIFT
))&
MMDC_MAARCR_ARCR_GUARD_MASK
)

	)

26583 
	#MMDC_MAARCR_ARCR_DYN_MAX_MASK
 0xF0u

	)

26584 
	#MMDC_MAARCR_ARCR_DYN_MAX_SHIFT
 4

	)

26585 
	#MMDC_MAARCR_ARCR_DYN_MAX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MAARCR_ARCR_DYN_MAX_SHIFT
))&
MMDC_MAARCR_ARCR_DYN_MAX_MASK
)

	)

26586 
	#MMDC_MAARCR_ARCR_DYN_JMP_MASK
 0xF00u

	)

26587 
	#MMDC_MAARCR_ARCR_DYN_JMP_SHIFT
 8

	)

26588 
	#MMDC_MAARCR_ARCR_DYN_JMP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MAARCR_ARCR_DYN_JMP_SHIFT
))&
MMDC_MAARCR_ARCR_DYN_JMP_MASK
)

	)

26589 
	#MMDC_MAARCR_ARCR_ACC_HIT_MASK
 0x70000u

	)

26590 
	#MMDC_MAARCR_ARCR_ACC_HIT_SHIFT
 16

	)

26591 
	#MMDC_MAARCR_ARCR_ACC_HIT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MAARCR_ARCR_ACC_HIT_SHIFT
))&
MMDC_MAARCR_ARCR_ACC_HIT_MASK
)

	)

26592 
	#MMDC_MAARCR_ARCR_PAG_HIT_MASK
 0x700000u

	)

26593 
	#MMDC_MAARCR_ARCR_PAG_HIT_SHIFT
 20

	)

26594 
	#MMDC_MAARCR_ARCR_PAG_HIT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MAARCR_ARCR_PAG_HIT_SHIFT
))&
MMDC_MAARCR_ARCR_PAG_HIT_MASK
)

	)

26595 
	#MMDC_MAARCR_ARCR_RCH_EN_MASK
 0x1000000u

	)

26596 
	#MMDC_MAARCR_ARCR_RCH_EN_SHIFT
 24

	)

26597 
	#MMDC_MAARCR_ARCR_EXC_ERR_EN_MASK
 0x10000000u

	)

26598 
	#MMDC_MAARCR_ARCR_EXC_ERR_EN_SHIFT
 28

	)

26599 
	#MMDC_MAARCR_ARCR_SEC_ERR_EN_MASK
 0x40000000u

	)

26600 
	#MMDC_MAARCR_ARCR_SEC_ERR_EN_SHIFT
 30

	)

26601 
	#MMDC_MAARCR_ARCR_SEC_ERR_LOCK_MASK
 0x80000000u

	)

26602 
	#MMDC_MAARCR_ARCR_SEC_ERR_LOCK_SHIFT
 31

	)

26604 
	#MMDC_MAPSR_PSD_MASK
 0x1u

	)

26605 
	#MMDC_MAPSR_PSD_SHIFT
 0

	)

26606 
	#MMDC_MAPSR_PSS_MASK
 0x10u

	)

26607 
	#MMDC_MAPSR_PSS_SHIFT
 4

	)

26608 
	#MMDC_MAPSR_RIS_MASK
 0x20u

	)

26609 
	#MMDC_MAPSR_RIS_SHIFT
 5

	)

26610 
	#MMDC_MAPSR_WIS_MASK
 0x40u

	)

26611 
	#MMDC_MAPSR_WIS_SHIFT
 6

	)

26612 
	#MMDC_MAPSR_PST_MASK
 0xFF00u

	)

26613 
	#MMDC_MAPSR_PST_SHIFT
 8

	)

26614 
	#MMDC_MAPSR_PST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MAPSR_PST_SHIFT
))&
MMDC_MAPSR_PST_MASK
)

	)

26615 
	#MMDC_MAPSR_LPMD_MASK
 0x100000u

	)

26616 
	#MMDC_MAPSR_LPMD_SHIFT
 20

	)

26617 
	#MMDC_MAPSR_DVFS_MASK
 0x200000u

	)

26618 
	#MMDC_MAPSR_DVFS_SHIFT
 21

	)

26619 
	#MMDC_MAPSR_LPACK_MASK
 0x1000000u

	)

26620 
	#MMDC_MAPSR_LPACK_SHIFT
 24

	)

26621 
	#MMDC_MAPSR_DVACK_MASK
 0x2000000u

	)

26622 
	#MMDC_MAPSR_DVACK_SHIFT
 25

	)

26624 
	#MMDC_MAEXIDR0_EXC_ID_MONITOR0_MASK
 0xFFFFu

	)

26625 
	#MMDC_MAEXIDR0_EXC_ID_MONITOR0_SHIFT
 0

	)

26626 
	#MMDC_MAEXIDR0_EXC_ID_MONITOR0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MAEXIDR0_EXC_ID_MONITOR0_SHIFT
))&
MMDC_MAEXIDR0_EXC_ID_MONITOR0_MASK
)

	)

26627 
	#MMDC_MAEXIDR0_EXC_ID_MONITOR1_MASK
 0xFFFF0000u

	)

26628 
	#MMDC_MAEXIDR0_EXC_ID_MONITOR1_SHIFT
 16

	)

26629 
	#MMDC_MAEXIDR0_EXC_ID_MONITOR1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MAEXIDR0_EXC_ID_MONITOR1_SHIFT
))&
MMDC_MAEXIDR0_EXC_ID_MONITOR1_MASK
)

	)

26631 
	#MMDC_MAEXIDR1_EXC_ID_MONITOR2_MASK
 0xFFFFu

	)

26632 
	#MMDC_MAEXIDR1_EXC_ID_MONITOR2_SHIFT
 0

	)

26633 
	#MMDC_MAEXIDR1_EXC_ID_MONITOR2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MAEXIDR1_EXC_ID_MONITOR2_SHIFT
))&
MMDC_MAEXIDR1_EXC_ID_MONITOR2_MASK
)

	)

26634 
	#MMDC_MAEXIDR1_EXC_ID_MONITOR3_MASK
 0xFFFF0000u

	)

26635 
	#MMDC_MAEXIDR1_EXC_ID_MONITOR3_SHIFT
 16

	)

26636 
	#MMDC_MAEXIDR1_EXC_ID_MONITOR3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MAEXIDR1_EXC_ID_MONITOR3_SHIFT
))&
MMDC_MAEXIDR1_EXC_ID_MONITOR3_MASK
)

	)

26638 
	#MMDC_MADPCR0_DBG_EN_MASK
 0x1u

	)

26639 
	#MMDC_MADPCR0_DBG_EN_SHIFT
 0

	)

26640 
	#MMDC_MADPCR0_DBG_RST_MASK
 0x2u

	)

26641 
	#MMDC_MADPCR0_DBG_RST_SHIFT
 1

	)

26642 
	#MMDC_MADPCR0_PRF_FRZ_MASK
 0x4u

	)

26643 
	#MMDC_MADPCR0_PRF_FRZ_SHIFT
 2

	)

26644 
	#MMDC_MADPCR0_CYC_OVF_MASK
 0x8u

	)

26645 
	#MMDC_MADPCR0_CYC_OVF_SHIFT
 3

	)

26646 
	#MMDC_MADPCR0_SBS_EN_MASK
 0x100u

	)

26647 
	#MMDC_MADPCR0_SBS_EN_SHIFT
 8

	)

26648 
	#MMDC_MADPCR0_SBS_MASK
 0x200u

	)

26649 
	#MMDC_MADPCR0_SBS_SHIFT
 9

	)

26651 
	#MMDC_MADPCR1_PRF_AXI_ID_MASK
 0xFFFFu

	)

26652 
	#MMDC_MADPCR1_PRF_AXI_ID_SHIFT
 0

	)

26653 
	#MMDC_MADPCR1_PRF_AXI_ID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MADPCR1_PRF_AXI_ID_SHIFT
))&
MMDC_MADPCR1_PRF_AXI_ID_MASK
)

	)

26654 
	#MMDC_MADPCR1_PRF_AXI_IDMASK_MASK
 0xFFFF0000u

	)

26655 
	#MMDC_MADPCR1_PRF_AXI_IDMASK_SHIFT
 16

	)

26656 
	#MMDC_MADPCR1_PRF_AXI_IDMASK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MADPCR1_PRF_AXI_ID_MASK_SHIFT
))&
MMDC_MADPCR1_PRF_AXI_IDMASK_MASK
)

	)

26658 
	#MMDC_MADPSR0_CYC_COUNT_MASK
 0xFFFFFFFFu

	)

26659 
	#MMDC_MADPSR0_CYC_COUNT_SHIFT
 0

	)

26660 
	#MMDC_MADPSR0_CYC_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MADPSR0_CYC_COUNT_SHIFT
))&
MMDC_MADPSR0_CYC_COUNT_MASK
)

	)

26662 
	#MMDC_MADPSR1_BUSY_COUNT_MASK
 0xFFFFFFFFu

	)

26663 
	#MMDC_MADPSR1_BUSY_COUNT_SHIFT
 0

	)

26664 
	#MMDC_MADPSR1_BUSY_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MADPSR1_BUSY_COUNT_SHIFT
))&
MMDC_MADPSR1_BUSY_COUNT_MASK
)

	)

26666 
	#MMDC_MADPSR2_RD_ACC_COUNT_MASK
 0xFFFFFFFFu

	)

26667 
	#MMDC_MADPSR2_RD_ACC_COUNT_SHIFT
 0

	)

26668 
	#MMDC_MADPSR2_RD_ACC_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MADPSR2_RD_ACC_COUNT_SHIFT
))&
MMDC_MADPSR2_RD_ACC_COUNT_MASK
)

	)

26670 
	#MMDC_MADPSR3_WR_ACC_COUNT_MASK
 0xFFFFFFFFu

	)

26671 
	#MMDC_MADPSR3_WR_ACC_COUNT_SHIFT
 0

	)

26672 
	#MMDC_MADPSR3_WR_ACC_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MADPSR3_WR_ACC_COUNT_SHIFT
))&
MMDC_MADPSR3_WR_ACC_COUNT_MASK
)

	)

26674 
	#MMDC_MADPSR4_RD_BYTES_COUNT_MASK
 0xFFFFFFFFu

	)

26675 
	#MMDC_MADPSR4_RD_BYTES_COUNT_SHIFT
 0

	)

26676 
	#MMDC_MADPSR4_RD_BYTES_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MADPSR4_RD_BYTES_COUNT_SHIFT
))&
MMDC_MADPSR4_RD_BYTES_COUNT_MASK
)

	)

26678 
	#MMDC_MADPSR5_WR_BYTES_COUNT_MASK
 0xFFFFFFFFu

	)

26679 
	#MMDC_MADPSR5_WR_BYTES_COUNT_SHIFT
 0

	)

26680 
	#MMDC_MADPSR5_WR_BYTES_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MADPSR5_WR_BYTES_COUNT_SHIFT
))&
MMDC_MADPSR5_WR_BYTES_COUNT_MASK
)

	)

26682 
	#MMDC_MASBS0_SBS_ADDR_MASK
 0xFFFFFFFFu

	)

26683 
	#MMDC_MASBS0_SBS_ADDR_SHIFT
 0

	)

26684 
	#MMDC_MASBS0_SBS_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MASBS0_SBS_ADDR_SHIFT
))&
MMDC_MASBS0_SBS_ADDR_MASK
)

	)

26686 
	#MMDC_MASBS1_SBS_VLD_MASK
 0x1u

	)

26687 
	#MMDC_MASBS1_SBS_VLD_SHIFT
 0

	)

26688 
	#MMDC_MASBS1_SBS_TYPE_MASK
 0x2u

	)

26689 
	#MMDC_MASBS1_SBS_TYPE_SHIFT
 1

	)

26690 
	#MMDC_MASBS1_SBS_LOCK_MASK
 0xCu

	)

26691 
	#MMDC_MASBS1_SBS_LOCK_SHIFT
 2

	)

26692 
	#MMDC_MASBS1_SBS_LOCK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MASBS1_SBS_LOCK_SHIFT
))&
MMDC_MASBS1_SBS_LOCK_MASK
)

	)

26693 
	#MMDC_MASBS1_SBS_PROT_MASK
 0x70u

	)

26694 
	#MMDC_MASBS1_SBS_PROT_SHIFT
 4

	)

26695 
	#MMDC_MASBS1_SBS_PROT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MASBS1_SBS_PROT_SHIFT
))&
MMDC_MASBS1_SBS_PROT_MASK
)

	)

26696 
	#MMDC_MASBS1_SBS_SIZE_MASK
 0x380u

	)

26697 
	#MMDC_MASBS1_SBS_SIZE_SHIFT
 7

	)

26698 
	#MMDC_MASBS1_SBS_SIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MASBS1_SBS_SIZE_SHIFT
))&
MMDC_MASBS1_SBS_SIZE_MASK
)

	)

26699 
	#MMDC_MASBS1_SBS_BURST_MASK
 0xC00u

	)

26700 
	#MMDC_MASBS1_SBS_BURST_SHIFT
 10

	)

26701 
	#MMDC_MASBS1_SBS_BURST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MASBS1_SBS_BURST_SHIFT
))&
MMDC_MASBS1_SBS_BURST_MASK
)

	)

26702 
	#MMDC_MASBS1_SBS_BUFF_MASK
 0x1000u

	)

26703 
	#MMDC_MASBS1_SBS_BUFF_SHIFT
 12

	)

26704 
	#MMDC_MASBS1_SBS_LEN_MASK
 0xE000u

	)

26705 
	#MMDC_MASBS1_SBS_LEN_SHIFT
 13

	)

26706 
	#MMDC_MASBS1_SBS_LEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MASBS1_SBS_LEN_SHIFT
))&
MMDC_MASBS1_SBS_LEN_MASK
)

	)

26707 
	#MMDC_MASBS1_SBS_AXI_ID_MASK
 0xFFFF0000u

	)

26708 
	#MMDC_MASBS1_SBS_AXI_ID_SHIFT
 16

	)

26709 
	#MMDC_MASBS1_SBS_AXI_ID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MASBS1_SBS_AXI_ID_SHIFT
))&
MMDC_MASBS1_SBS_AXI_ID_MASK
)

	)

26711 
	#MMDC_MAGENP_GP31_GP0_MASK
 0xFFFFFFFFu

	)

26712 
	#MMDC_MAGENP_GP31_GP0_SHIFT
 0

	)

26713 
	#MMDC_MAGENP_GP31_GP0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MAGENP_GP31_GP0_SHIFT
))&
MMDC_MAGENP_GP31_GP0_MASK
)

	)

26715 
	#MMDC_MPZQHWCTRL_ZQ_MODE_MASK
 0x3u

	)

26716 
	#MMDC_MPZQHWCTRL_ZQ_MODE_SHIFT
 0

	)

26717 
	#MMDC_MPZQHWCTRL_ZQ_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPZQHWCTRL_ZQ_MODE_SHIFT
))&
MMDC_MPZQHWCTRL_ZQ_MODE_MASK
)

	)

26718 
	#MMDC_MPZQHWCTRL_ZQ_HW_PER_MASK
 0x3Cu

	)

26719 
	#MMDC_MPZQHWCTRL_ZQ_HW_PER_SHIFT
 2

	)

26720 
	#MMDC_MPZQHWCTRL_ZQ_HW_PER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPZQHWCTRL_ZQ_HW_PER_SHIFT
))&
MMDC_MPZQHWCTRL_ZQ_HW_PER_MASK
)

	)

26721 
	#MMDC_MPZQHWCTRL_ZQ_HW_PU_RES_MASK
 0x7C0u

	)

26722 
	#MMDC_MPZQHWCTRL_ZQ_HW_PU_RES_SHIFT
 6

	)

26723 
	#MMDC_MPZQHWCTRL_ZQ_HW_PU_RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPZQHWCTRL_ZQ_HW_PU_RES_SHIFT
))&
MMDC_MPZQHWCTRL_ZQ_HW_PU_RES_MASK
)

	)

26724 
	#MMDC_MPZQHWCTRL_ZQ_HW_PD_RES_MASK
 0xF800u

	)

26725 
	#MMDC_MPZQHWCTRL_ZQ_HW_PD_RES_SHIFT
 11

	)

26726 
	#MMDC_MPZQHWCTRL_ZQ_HW_PD_RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPZQHWCTRL_ZQ_HW_PD_RES_SHIFT
))&
MMDC_MPZQHWCTRL_ZQ_HW_PD_RES_MASK
)

	)

26727 
	#MMDC_MPZQHWCTRL_ZQ_HW_FOR_MASK
 0x10000u

	)

26728 
	#MMDC_MPZQHWCTRL_ZQ_HW_FOR_SHIFT
 16

	)

26729 
	#MMDC_MPZQHWCTRL_TZQ_INIT_MASK
 0xE0000u

	)

26730 
	#MMDC_MPZQHWCTRL_TZQ_INIT_SHIFT
 17

	)

26731 
	#MMDC_MPZQHWCTRL_TZQ_INIT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPZQHWCTRL_TZQ_INIT_SHIFT
))&
MMDC_MPZQHWCTRL_TZQ_INIT_MASK
)

	)

26732 
	#MMDC_MPZQHWCTRL_TZQ_OPER_MASK
 0x700000u

	)

26733 
	#MMDC_MPZQHWCTRL_TZQ_OPER_SHIFT
 20

	)

26734 
	#MMDC_MPZQHWCTRL_TZQ_OPER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPZQHWCTRL_TZQ_OPER_SHIFT
))&
MMDC_MPZQHWCTRL_TZQ_OPER_MASK
)

	)

26735 
	#MMDC_MPZQHWCTRL_TZQ_CS_MASK
 0x3800000u

	)

26736 
	#MMDC_MPZQHWCTRL_TZQ_CS_SHIFT
 23

	)

26737 
	#MMDC_MPZQHWCTRL_TZQ_CS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPZQHWCTRL_TZQ_CS_SHIFT
))&
MMDC_MPZQHWCTRL_TZQ_CS_MASK
)

	)

26738 
	#MMDC_MPZQHWCTRL_ZQ_EARLY_COMPARATOR_EN_TIMER_MASK
 0xF8000000u

	)

26739 
	#MMDC_MPZQHWCTRL_ZQ_EARLY_COMPARATOR_EN_TIMER_SHIFT
 27

	)

26740 
	#MMDC_MPZQHWCTRL_ZQ_EARLY_COMPARATOR_EN_TIMER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPZQHWCTRL_ZQ_EARLY_COMPARATOR_EN_TIMER_SHIFT
))&
MMDC_MPZQHWCTRL_ZQ_EARLY_COMPARATOR_EN_TIMER_MASK
)

	)

26742 
	#MMDC_MPZQSWCTRL_ZQ_SW_FOR_MASK
 0x1u

	)

26743 
	#MMDC_MPZQSWCTRL_ZQ_SW_FOR_SHIFT
 0

	)

26744 
	#MMDC_MPZQSWCTRL_ZQ_SW_RES_MASK
 0x2u

	)

26745 
	#MMDC_MPZQSWCTRL_ZQ_SW_RES_SHIFT
 1

	)

26746 
	#MMDC_MPZQSWCTRL_ZQ_SW_PU_VAL_MASK
 0x7Cu

	)

26747 
	#MMDC_MPZQSWCTRL_ZQ_SW_PU_VAL_SHIFT
 2

	)

26748 
	#MMDC_MPZQSWCTRL_ZQ_SW_PU_VAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPZQSWCTRL_ZQ_SW_PU_VAL_SHIFT
))&
MMDC_MPZQSWCTRL_ZQ_SW_PU_VAL_MASK
)

	)

26749 
	#MMDC_MPZQSWCTRL_ZQ_SW_PD_VAL_MASK
 0xF80u

	)

26750 
	#MMDC_MPZQSWCTRL_ZQ_SW_PD_VAL_SHIFT
 7

	)

26751 
	#MMDC_MPZQSWCTRL_ZQ_SW_PD_VAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPZQSWCTRL_ZQ_SW_PD_VAL_SHIFT
))&
MMDC_MPZQSWCTRL_ZQ_SW_PD_VAL_MASK
)

	)

26752 
	#MMDC_MPZQSWCTRL_ZQ_SW_PD_MASK
 0x1000u

	)

26753 
	#MMDC_MPZQSWCTRL_ZQ_SW_PD_SHIFT
 12

	)

26754 
	#MMDC_MPZQSWCTRL_USE_ZQ_SW_VAL_MASK
 0x2000u

	)

26755 
	#MMDC_MPZQSWCTRL_USE_ZQ_SW_VAL_SHIFT
 13

	)

26756 
	#MMDC_MPZQSWCTRL_ZQ_CMP_OUT_SMP_MASK
 0x30000u

	)

26757 
	#MMDC_MPZQSWCTRL_ZQ_CMP_OUT_SMP_SHIFT
 16

	)

26758 
	#MMDC_MPZQSWCTRL_ZQ_CMP_OUT_SMP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPZQSWCTRL_ZQ_CMP_OUT_SMP_SHIFT
))&
MMDC_MPZQSWCTRL_ZQ_CMP_OUT_SMP_MASK
)

	)

26760 
	#MMDC_MPWLGCR_HW_WL_EN_MASK
 0x1u

	)

26761 
	#MMDC_MPWLGCR_HW_WL_EN_SHIFT
 0

	)

26762 
	#MMDC_MPWLGCR_SW_WL_EN_MASK
 0x2u

	)

26763 
	#MMDC_MPWLGCR_SW_WL_EN_SHIFT
 1

	)

26764 
	#MMDC_MPWLGCR_SW_WL_CNT_EN_MASK
 0x4u

	)

26765 
	#MMDC_MPWLGCR_SW_WL_CNT_EN_SHIFT
 2

	)

26766 
	#MMDC_MPWLGCR_WL_SW_RES0_MASK
 0x10u

	)

26767 
	#MMDC_MPWLGCR_WL_SW_RES0_SHIFT
 4

	)

26768 
	#MMDC_MPWLGCR_WL_SW_RES1_MASK
 0x20u

	)

26769 
	#MMDC_MPWLGCR_WL_SW_RES1_SHIFT
 5

	)

26770 
	#MMDC_MPWLGCR_WL_SW_RES2_MASK
 0x40u

	)

26771 
	#MMDC_MPWLGCR_WL_SW_RES2_SHIFT
 6

	)

26772 
	#MMDC_MPWLGCR_WL_SW_RES3_MASK
 0x80u

	)

26773 
	#MMDC_MPWLGCR_WL_SW_RES3_SHIFT
 7

	)

26774 
	#MMDC_MPWLGCR_WL_HW_ERR0_MASK
 0x100u

	)

26775 
	#MMDC_MPWLGCR_WL_HW_ERR0_SHIFT
 8

	)

26776 
	#MMDC_MPWLGCR_WL_HW_ERR1_MASK
 0x200u

	)

26777 
	#MMDC_MPWLGCR_WL_HW_ERR1_SHIFT
 9

	)

26778 
	#MMDC_MPWLGCR_WL_HW_ERR2_MASK
 0x400u

	)

26779 
	#MMDC_MPWLGCR_WL_HW_ERR2_SHIFT
 10

	)

26780 
	#MMDC_MPWLGCR_WL_HW_ERR3_MASK
 0x800u

	)

26781 
	#MMDC_MPWLGCR_WL_HW_ERR3_SHIFT
 11

	)

26783 
	#MMDC_MPWLDECTRL0_WL_DL_ABS_OFFSET0_MASK
 0x7Fu

	)

26784 
	#MMDC_MPWLDECTRL0_WL_DL_ABS_OFFSET0_SHIFT
 0

	)

26785 
	#MMDC_MPWLDECTRL0_WL_DL_ABS_OFFSET0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWLDECTRL0_WL_DL_ABS_OFFSET0_SHIFT
))&
MMDC_MPWLDECTRL0_WL_DL_ABS_OFFSET0_MASK
)

	)

26786 
	#MMDC_MPWLDECTRL0_WL_HC_DEL0_MASK
 0x100u

	)

26787 
	#MMDC_MPWLDECTRL0_WL_HC_DEL0_SHIFT
 8

	)

26788 
	#MMDC_MPWLDECTRL0_WL_CYC_DEL0_MASK
 0x600u

	)

26789 
	#MMDC_MPWLDECTRL0_WL_CYC_DEL0_SHIFT
 9

	)

26790 
	#MMDC_MPWLDECTRL0_WL_CYC_DEL0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWLDECTRL0_WL_CYC_DEL0_SHIFT
))&
MMDC_MPWLDECTRL0_WL_CYC_DEL0_MASK
)

	)

26791 
	#MMDC_MPWLDECTRL0_WL_DL_ABS_OFFSET1_MASK
 0x7F0000u

	)

26792 
	#MMDC_MPWLDECTRL0_WL_DL_ABS_OFFSET1_SHIFT
 16

	)

26793 
	#MMDC_MPWLDECTRL0_WL_DL_ABS_OFFSET1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWLDECTRL0_WL_DL_ABS_OFFSET1_SHIFT
))&
MMDC_MPWLDECTRL0_WL_DL_ABS_OFFSET1_MASK
)

	)

26794 
	#MMDC_MPWLDECTRL0_WL_HC_DEL1_MASK
 0x1000000u

	)

26795 
	#MMDC_MPWLDECTRL0_WL_HC_DEL1_SHIFT
 24

	)

26796 
	#MMDC_MPWLDECTRL0_WL_CYC_DEL1_MASK
 0x6000000u

	)

26797 
	#MMDC_MPWLDECTRL0_WL_CYC_DEL1_SHIFT
 25

	)

26798 
	#MMDC_MPWLDECTRL0_WL_CYC_DEL1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWLDECTRL0_WL_CYC_DEL1_SHIFT
))&
MMDC_MPWLDECTRL0_WL_CYC_DEL1_MASK
)

	)

26800 
	#MMDC_MPWLDECTRL1_WL_DL_ABS_OFFSET2_MASK
 0x7Fu

	)

26801 
	#MMDC_MPWLDECTRL1_WL_DL_ABS_OFFSET2_SHIFT
 0

	)

26802 
	#MMDC_MPWLDECTRL1_WL_DL_ABS_OFFSET2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWLDECTRL1_WL_DL_ABS_OFFSET2_SHIFT
))&
MMDC_MPWLDECTRL1_WL_DL_ABS_OFFSET2_MASK
)

	)

26803 
	#MMDC_MPWLDECTRL1_WL_HC_DEL2_MASK
 0x100u

	)

26804 
	#MMDC_MPWLDECTRL1_WL_HC_DEL2_SHIFT
 8

	)

26805 
	#MMDC_MPWLDECTRL1_WL_CYC_DEL2_MASK
 0x600u

	)

26806 
	#MMDC_MPWLDECTRL1_WL_CYC_DEL2_SHIFT
 9

	)

26807 
	#MMDC_MPWLDECTRL1_WL_CYC_DEL2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWLDECTRL1_WL_CYC_DEL2_SHIFT
))&
MMDC_MPWLDECTRL1_WL_CYC_DEL2_MASK
)

	)

26808 
	#MMDC_MPWLDECTRL1_WL_DL_ABS_OFFSET3_MASK
 0x7F0000u

	)

26809 
	#MMDC_MPWLDECTRL1_WL_DL_ABS_OFFSET3_SHIFT
 16

	)

26810 
	#MMDC_MPWLDECTRL1_WL_DL_ABS_OFFSET3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWLDECTRL1_WL_DL_ABS_OFFSET3_SHIFT
))&
MMDC_MPWLDECTRL1_WL_DL_ABS_OFFSET3_MASK
)

	)

26811 
	#MMDC_MPWLDECTRL1_WL_HC_DEL3_MASK
 0x1000000u

	)

26812 
	#MMDC_MPWLDECTRL1_WL_HC_DEL3_SHIFT
 24

	)

26813 
	#MMDC_MPWLDECTRL1_WL_CYC_DEL3_MASK
 0x6000000u

	)

26814 
	#MMDC_MPWLDECTRL1_WL_CYC_DEL3_SHIFT
 25

	)

26815 
	#MMDC_MPWLDECTRL1_WL_CYC_DEL3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWLDECTRL1_WL_CYC_DEL3_SHIFT
))&
MMDC_MPWLDECTRL1_WL_CYC_DEL3_MASK
)

	)

26817 
	#MMDC_MPWLDLST_WL_DL_UNIT_NUM0_MASK
 0x7Fu

	)

26818 
	#MMDC_MPWLDLST_WL_DL_UNIT_NUM0_SHIFT
 0

	)

26819 
	#MMDC_MPWLDLST_WL_DL_UNIT_NUM0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWLDLST_WL_DL_UNIT_NUM0_SHIFT
))&
MMDC_MPWLDLST_WL_DL_UNIT_NUM0_MASK
)

	)

26820 
	#MMDC_MPWLDLST_WL_DL_UNIT_NUM1_MASK
 0x7F00u

	)

26821 
	#MMDC_MPWLDLST_WL_DL_UNIT_NUM1_SHIFT
 8

	)

26822 
	#MMDC_MPWLDLST_WL_DL_UNIT_NUM1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWLDLST_WL_DL_UNIT_NUM1_SHIFT
))&
MMDC_MPWLDLST_WL_DL_UNIT_NUM1_MASK
)

	)

26823 
	#MMDC_MPWLDLST_WL_DL_UNIT_NUM2_MASK
 0x7F0000u

	)

26824 
	#MMDC_MPWLDLST_WL_DL_UNIT_NUM2_SHIFT
 16

	)

26825 
	#MMDC_MPWLDLST_WL_DL_UNIT_NUM2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWLDLST_WL_DL_UNIT_NUM2_SHIFT
))&
MMDC_MPWLDLST_WL_DL_UNIT_NUM2_MASK
)

	)

26826 
	#MMDC_MPWLDLST_WL_DL_UNIT_NUM3_MASK
 0x7F000000u

	)

26827 
	#MMDC_MPWLDLST_WL_DL_UNIT_NUM3_SHIFT
 24

	)

26828 
	#MMDC_MPWLDLST_WL_DL_UNIT_NUM3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWLDLST_WL_DL_UNIT_NUM3_SHIFT
))&
MMDC_MPWLDLST_WL_DL_UNIT_NUM3_MASK
)

	)

26830 
	#MMDC_MPODTCTRL_ODT_WR_PAS_EN_MASK
 0x1u

	)

26831 
	#MMDC_MPODTCTRL_ODT_WR_PAS_EN_SHIFT
 0

	)

26832 
	#MMDC_MPODTCTRL_ODT_WR_ACT_EN_MASK
 0x2u

	)

26833 
	#MMDC_MPODTCTRL_ODT_WR_ACT_EN_SHIFT
 1

	)

26834 
	#MMDC_MPODTCTRL_ODT_RD_PAS_EN_MASK
 0x4u

	)

26835 
	#MMDC_MPODTCTRL_ODT_RD_PAS_EN_SHIFT
 2

	)

26836 
	#MMDC_MPODTCTRL_ODT_RD_ACT_EN_MASK
 0x8u

	)

26837 
	#MMDC_MPODTCTRL_ODT_RD_ACT_EN_SHIFT
 3

	)

26838 
	#MMDC_MPODTCTRL_ODT0_INT_RES_MASK
 0x70u

	)

26839 
	#MMDC_MPODTCTRL_ODT0_INT_RES_SHIFT
 4

	)

26840 
	#MMDC_MPODTCTRL_ODT0_INT_RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPODTCTRL_ODT0_INT_RES_SHIFT
))&
MMDC_MPODTCTRL_ODT0_INT_RES_MASK
)

	)

26841 
	#MMDC_MPODTCTRL_ODT1_INT_RES_MASK
 0x700u

	)

26842 
	#MMDC_MPODTCTRL_ODT1_INT_RES_SHIFT
 8

	)

26843 
	#MMDC_MPODTCTRL_ODT1_INT_RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPODTCTRL_ODT1_INT_RES_SHIFT
))&
MMDC_MPODTCTRL_ODT1_INT_RES_MASK
)

	)

26844 
	#MMDC_MPODTCTRL_ODT2_INT_RES_MASK
 0x7000u

	)

26845 
	#MMDC_MPODTCTRL_ODT2_INT_RES_SHIFT
 12

	)

26846 
	#MMDC_MPODTCTRL_ODT2_INT_RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPODTCTRL_ODT2_INT_RES_SHIFT
))&
MMDC_MPODTCTRL_ODT2_INT_RES_MASK
)

	)

26847 
	#MMDC_MPODTCTRL_ODT3_INT_RES_MASK
 0x70000u

	)

26848 
	#MMDC_MPODTCTRL_ODT3_INT_RES_SHIFT
 16

	)

26849 
	#MMDC_MPODTCTRL_ODT3_INT_RES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPODTCTRL_ODT3_INT_RES_SHIFT
))&
MMDC_MPODTCTRL_ODT3_INT_RES_MASK
)

	)

26851 
	#MMDC_MPRDDQBY0DL_rd_dq0_dñ_MASK
 0x7u

	)

26852 
	#MMDC_MPRDDQBY0DL_rd_dq0_dñ_SHIFT
 0

	)

26853 
	#MMDC_MPRDDQBY0DL_rd_dq0_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY0DL_rd_dq0_dñ_SHIFT
))&
MMDC_MPRDDQBY0DL_rd_dq0_dñ_MASK
)

	)

26854 
	#MMDC_MPRDDQBY0DL_rd_dq1_dñ_MASK
 0x70u

	)

26855 
	#MMDC_MPRDDQBY0DL_rd_dq1_dñ_SHIFT
 4

	)

26856 
	#MMDC_MPRDDQBY0DL_rd_dq1_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY0DL_rd_dq1_dñ_SHIFT
))&
MMDC_MPRDDQBY0DL_rd_dq1_dñ_MASK
)

	)

26857 
	#MMDC_MPRDDQBY0DL_rd_dq2_dñ_MASK
 0x700u

	)

26858 
	#MMDC_MPRDDQBY0DL_rd_dq2_dñ_SHIFT
 8

	)

26859 
	#MMDC_MPRDDQBY0DL_rd_dq2_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY0DL_rd_dq2_dñ_SHIFT
))&
MMDC_MPRDDQBY0DL_rd_dq2_dñ_MASK
)

	)

26860 
	#MMDC_MPRDDQBY0DL_rd_dq3_dñ_MASK
 0x7000u

	)

26861 
	#MMDC_MPRDDQBY0DL_rd_dq3_dñ_SHIFT
 12

	)

26862 
	#MMDC_MPRDDQBY0DL_rd_dq3_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY0DL_rd_dq3_dñ_SHIFT
))&
MMDC_MPRDDQBY0DL_rd_dq3_dñ_MASK
)

	)

26863 
	#MMDC_MPRDDQBY0DL_rd_dq4_dñ_MASK
 0x70000u

	)

26864 
	#MMDC_MPRDDQBY0DL_rd_dq4_dñ_SHIFT
 16

	)

26865 
	#MMDC_MPRDDQBY0DL_rd_dq4_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY0DL_rd_dq4_dñ_SHIFT
))&
MMDC_MPRDDQBY0DL_rd_dq4_dñ_MASK
)

	)

26866 
	#MMDC_MPRDDQBY0DL_rd_dq5_dñ_MASK
 0x700000u

	)

26867 
	#MMDC_MPRDDQBY0DL_rd_dq5_dñ_SHIFT
 20

	)

26868 
	#MMDC_MPRDDQBY0DL_rd_dq5_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY0DL_rd_dq5_dñ_SHIFT
))&
MMDC_MPRDDQBY0DL_rd_dq5_dñ_MASK
)

	)

26869 
	#MMDC_MPRDDQBY0DL_rd_dq6_dñ_MASK
 0x7000000u

	)

26870 
	#MMDC_MPRDDQBY0DL_rd_dq6_dñ_SHIFT
 24

	)

26871 
	#MMDC_MPRDDQBY0DL_rd_dq6_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY0DL_rd_dq6_dñ_SHIFT
))&
MMDC_MPRDDQBY0DL_rd_dq6_dñ_MASK
)

	)

26872 
	#MMDC_MPRDDQBY0DL_rd_dq7_dñ_MASK
 0x70000000u

	)

26873 
	#MMDC_MPRDDQBY0DL_rd_dq7_dñ_SHIFT
 28

	)

26874 
	#MMDC_MPRDDQBY0DL_rd_dq7_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY0DL_rd_dq7_dñ_SHIFT
))&
MMDC_MPRDDQBY0DL_rd_dq7_dñ_MASK
)

	)

26876 
	#MMDC_MPRDDQBY1DL_rd_dq8_dñ_MASK
 0x7u

	)

26877 
	#MMDC_MPRDDQBY1DL_rd_dq8_dñ_SHIFT
 0

	)

26878 
	#MMDC_MPRDDQBY1DL_rd_dq8_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY1DL_rd_dq8_dñ_SHIFT
))&
MMDC_MPRDDQBY1DL_rd_dq8_dñ_MASK
)

	)

26879 
	#MMDC_MPRDDQBY1DL_rd_dq9_dñ_MASK
 0x70u

	)

26880 
	#MMDC_MPRDDQBY1DL_rd_dq9_dñ_SHIFT
 4

	)

26881 
	#MMDC_MPRDDQBY1DL_rd_dq9_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY1DL_rd_dq9_dñ_SHIFT
))&
MMDC_MPRDDQBY1DL_rd_dq9_dñ_MASK
)

	)

26882 
	#MMDC_MPRDDQBY1DL_rd_dq10_dñ_MASK
 0x700u

	)

26883 
	#MMDC_MPRDDQBY1DL_rd_dq10_dñ_SHIFT
 8

	)

26884 
	#MMDC_MPRDDQBY1DL_rd_dq10_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY1DL_rd_dq10_dñ_SHIFT
))&
MMDC_MPRDDQBY1DL_rd_dq10_dñ_MASK
)

	)

26885 
	#MMDC_MPRDDQBY1DL_rd_dq11_dñ_MASK
 0x7000u

	)

26886 
	#MMDC_MPRDDQBY1DL_rd_dq11_dñ_SHIFT
 12

	)

26887 
	#MMDC_MPRDDQBY1DL_rd_dq11_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY1DL_rd_dq11_dñ_SHIFT
))&
MMDC_MPRDDQBY1DL_rd_dq11_dñ_MASK
)

	)

26888 
	#MMDC_MPRDDQBY1DL_rd_dq12_dñ_MASK
 0x70000u

	)

26889 
	#MMDC_MPRDDQBY1DL_rd_dq12_dñ_SHIFT
 16

	)

26890 
	#MMDC_MPRDDQBY1DL_rd_dq12_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY1DL_rd_dq12_dñ_SHIFT
))&
MMDC_MPRDDQBY1DL_rd_dq12_dñ_MASK
)

	)

26891 
	#MMDC_MPRDDQBY1DL_rd_dq13_dñ_MASK
 0x700000u

	)

26892 
	#MMDC_MPRDDQBY1DL_rd_dq13_dñ_SHIFT
 20

	)

26893 
	#MMDC_MPRDDQBY1DL_rd_dq13_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY1DL_rd_dq13_dñ_SHIFT
))&
MMDC_MPRDDQBY1DL_rd_dq13_dñ_MASK
)

	)

26894 
	#MMDC_MPRDDQBY1DL_rd_dq14_dñ_MASK
 0x7000000u

	)

26895 
	#MMDC_MPRDDQBY1DL_rd_dq14_dñ_SHIFT
 24

	)

26896 
	#MMDC_MPRDDQBY1DL_rd_dq14_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY1DL_rd_dq14_dñ_SHIFT
))&
MMDC_MPRDDQBY1DL_rd_dq14_dñ_MASK
)

	)

26897 
	#MMDC_MPRDDQBY1DL_rd_dq15_dñ_MASK
 0x70000000u

	)

26898 
	#MMDC_MPRDDQBY1DL_rd_dq15_dñ_SHIFT
 28

	)

26899 
	#MMDC_MPRDDQBY1DL_rd_dq15_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY1DL_rd_dq15_dñ_SHIFT
))&
MMDC_MPRDDQBY1DL_rd_dq15_dñ_MASK
)

	)

26901 
	#MMDC_MPRDDQBY2DL_rd_dq16_dñ_MASK
 0x7u

	)

26902 
	#MMDC_MPRDDQBY2DL_rd_dq16_dñ_SHIFT
 0

	)

26903 
	#MMDC_MPRDDQBY2DL_rd_dq16_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY2DL_rd_dq16_dñ_SHIFT
))&
MMDC_MPRDDQBY2DL_rd_dq16_dñ_MASK
)

	)

26904 
	#MMDC_MPRDDQBY2DL_rd_dq17_dñ_MASK
 0x70u

	)

26905 
	#MMDC_MPRDDQBY2DL_rd_dq17_dñ_SHIFT
 4

	)

26906 
	#MMDC_MPRDDQBY2DL_rd_dq17_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY2DL_rd_dq17_dñ_SHIFT
))&
MMDC_MPRDDQBY2DL_rd_dq17_dñ_MASK
)

	)

26907 
	#MMDC_MPRDDQBY2DL_rd_dq18_dñ_MASK
 0x700u

	)

26908 
	#MMDC_MPRDDQBY2DL_rd_dq18_dñ_SHIFT
 8

	)

26909 
	#MMDC_MPRDDQBY2DL_rd_dq18_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY2DL_rd_dq18_dñ_SHIFT
))&
MMDC_MPRDDQBY2DL_rd_dq18_dñ_MASK
)

	)

26910 
	#MMDC_MPRDDQBY2DL_rd_dq19_dñ_MASK
 0x7000u

	)

26911 
	#MMDC_MPRDDQBY2DL_rd_dq19_dñ_SHIFT
 12

	)

26912 
	#MMDC_MPRDDQBY2DL_rd_dq19_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY2DL_rd_dq19_dñ_SHIFT
))&
MMDC_MPRDDQBY2DL_rd_dq19_dñ_MASK
)

	)

26913 
	#MMDC_MPRDDQBY2DL_rd_dq20_dñ_MASK
 0x70000u

	)

26914 
	#MMDC_MPRDDQBY2DL_rd_dq20_dñ_SHIFT
 16

	)

26915 
	#MMDC_MPRDDQBY2DL_rd_dq20_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY2DL_rd_dq20_dñ_SHIFT
))&
MMDC_MPRDDQBY2DL_rd_dq20_dñ_MASK
)

	)

26916 
	#MMDC_MPRDDQBY2DL_rd_dq21_dñ_MASK
 0x700000u

	)

26917 
	#MMDC_MPRDDQBY2DL_rd_dq21_dñ_SHIFT
 20

	)

26918 
	#MMDC_MPRDDQBY2DL_rd_dq21_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY2DL_rd_dq21_dñ_SHIFT
))&
MMDC_MPRDDQBY2DL_rd_dq21_dñ_MASK
)

	)

26919 
	#MMDC_MPRDDQBY2DL_rd_dq22_dñ_MASK
 0x7000000u

	)

26920 
	#MMDC_MPRDDQBY2DL_rd_dq22_dñ_SHIFT
 24

	)

26921 
	#MMDC_MPRDDQBY2DL_rd_dq22_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY2DL_rd_dq22_dñ_SHIFT
))&
MMDC_MPRDDQBY2DL_rd_dq22_dñ_MASK
)

	)

26922 
	#MMDC_MPRDDQBY2DL_rd_dq23_dñ_MASK
 0x70000000u

	)

26923 
	#MMDC_MPRDDQBY2DL_rd_dq23_dñ_SHIFT
 28

	)

26924 
	#MMDC_MPRDDQBY2DL_rd_dq23_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY2DL_rd_dq23_dñ_SHIFT
))&
MMDC_MPRDDQBY2DL_rd_dq23_dñ_MASK
)

	)

26926 
	#MMDC_MPRDDQBY3DL_rd_dq24_dñ_MASK
 0x7u

	)

26927 
	#MMDC_MPRDDQBY3DL_rd_dq24_dñ_SHIFT
 0

	)

26928 
	#MMDC_MPRDDQBY3DL_rd_dq24_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY3DL_rd_dq24_dñ_SHIFT
))&
MMDC_MPRDDQBY3DL_rd_dq24_dñ_MASK
)

	)

26929 
	#MMDC_MPRDDQBY3DL_rd_dq25_dñ_MASK
 0x70u

	)

26930 
	#MMDC_MPRDDQBY3DL_rd_dq25_dñ_SHIFT
 4

	)

26931 
	#MMDC_MPRDDQBY3DL_rd_dq25_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY3DL_rd_dq25_dñ_SHIFT
))&
MMDC_MPRDDQBY3DL_rd_dq25_dñ_MASK
)

	)

26932 
	#MMDC_MPRDDQBY3DL_rd_dq26_dñ_MASK
 0x700u

	)

26933 
	#MMDC_MPRDDQBY3DL_rd_dq26_dñ_SHIFT
 8

	)

26934 
	#MMDC_MPRDDQBY3DL_rd_dq26_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY3DL_rd_dq26_dñ_SHIFT
))&
MMDC_MPRDDQBY3DL_rd_dq26_dñ_MASK
)

	)

26935 
	#MMDC_MPRDDQBY3DL_rd_dq27_dñ_MASK
 0x7000u

	)

26936 
	#MMDC_MPRDDQBY3DL_rd_dq27_dñ_SHIFT
 12

	)

26937 
	#MMDC_MPRDDQBY3DL_rd_dq27_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY3DL_rd_dq27_dñ_SHIFT
))&
MMDC_MPRDDQBY3DL_rd_dq27_dñ_MASK
)

	)

26938 
	#MMDC_MPRDDQBY3DL_rd_dq28_dñ_MASK
 0x70000u

	)

26939 
	#MMDC_MPRDDQBY3DL_rd_dq28_dñ_SHIFT
 16

	)

26940 
	#MMDC_MPRDDQBY3DL_rd_dq28_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY3DL_rd_dq28_dñ_SHIFT
))&
MMDC_MPRDDQBY3DL_rd_dq28_dñ_MASK
)

	)

26941 
	#MMDC_MPRDDQBY3DL_rd_dq29_dñ_MASK
 0x700000u

	)

26942 
	#MMDC_MPRDDQBY3DL_rd_dq29_dñ_SHIFT
 20

	)

26943 
	#MMDC_MPRDDQBY3DL_rd_dq29_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY3DL_rd_dq29_dñ_SHIFT
))&
MMDC_MPRDDQBY3DL_rd_dq29_dñ_MASK
)

	)

26944 
	#MMDC_MPRDDQBY3DL_rd_dq30_dñ_MASK
 0x7000000u

	)

26945 
	#MMDC_MPRDDQBY3DL_rd_dq30_dñ_SHIFT
 24

	)

26946 
	#MMDC_MPRDDQBY3DL_rd_dq30_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY3DL_rd_dq30_dñ_SHIFT
))&
MMDC_MPRDDQBY3DL_rd_dq30_dñ_MASK
)

	)

26947 
	#MMDC_MPRDDQBY3DL_rd_dq31_dñ_MASK
 0x70000000u

	)

26948 
	#MMDC_MPRDDQBY3DL_rd_dq31_dñ_SHIFT
 28

	)

26949 
	#MMDC_MPRDDQBY3DL_rd_dq31_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDQBY3DL_rd_dq31_dñ_SHIFT
))&
MMDC_MPRDDQBY3DL_rd_dq31_dñ_MASK
)

	)

26951 
	#MMDC_MPWRDQBY0DL_wr_dq0_dñ_MASK
 0x3u

	)

26952 
	#MMDC_MPWRDQBY0DL_wr_dq0_dñ_SHIFT
 0

	)

26953 
	#MMDC_MPWRDQBY0DL_wr_dq0_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY0DL_wr_dq0_dñ_SHIFT
))&
MMDC_MPWRDQBY0DL_wr_dq0_dñ_MASK
)

	)

26954 
	#MMDC_MPWRDQBY0DL_wr_dq1_dñ_MASK
 0x30u

	)

26955 
	#MMDC_MPWRDQBY0DL_wr_dq1_dñ_SHIFT
 4

	)

26956 
	#MMDC_MPWRDQBY0DL_wr_dq1_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY0DL_wr_dq1_dñ_SHIFT
))&
MMDC_MPWRDQBY0DL_wr_dq1_dñ_MASK
)

	)

26957 
	#MMDC_MPWRDQBY0DL_wr_dq2_dñ_MASK
 0x300u

	)

26958 
	#MMDC_MPWRDQBY0DL_wr_dq2_dñ_SHIFT
 8

	)

26959 
	#MMDC_MPWRDQBY0DL_wr_dq2_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY0DL_wr_dq2_dñ_SHIFT
))&
MMDC_MPWRDQBY0DL_wr_dq2_dñ_MASK
)

	)

26960 
	#MMDC_MPWRDQBY0DL_wr_dq3_dñ_MASK
 0x3000u

	)

26961 
	#MMDC_MPWRDQBY0DL_wr_dq3_dñ_SHIFT
 12

	)

26962 
	#MMDC_MPWRDQBY0DL_wr_dq3_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY0DL_wr_dq3_dñ_SHIFT
))&
MMDC_MPWRDQBY0DL_wr_dq3_dñ_MASK
)

	)

26963 
	#MMDC_MPWRDQBY0DL_wr_dq4_dñ_MASK
 0x30000u

	)

26964 
	#MMDC_MPWRDQBY0DL_wr_dq4_dñ_SHIFT
 16

	)

26965 
	#MMDC_MPWRDQBY0DL_wr_dq4_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY0DL_wr_dq4_dñ_SHIFT
))&
MMDC_MPWRDQBY0DL_wr_dq4_dñ_MASK
)

	)

26966 
	#MMDC_MPWRDQBY0DL_wr_dq5_dñ_MASK
 0x300000u

	)

26967 
	#MMDC_MPWRDQBY0DL_wr_dq5_dñ_SHIFT
 20

	)

26968 
	#MMDC_MPWRDQBY0DL_wr_dq5_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY0DL_wr_dq5_dñ_SHIFT
))&
MMDC_MPWRDQBY0DL_wr_dq5_dñ_MASK
)

	)

26969 
	#MMDC_MPWRDQBY0DL_wr_dq6_dñ_MASK
 0x3000000u

	)

26970 
	#MMDC_MPWRDQBY0DL_wr_dq6_dñ_SHIFT
 24

	)

26971 
	#MMDC_MPWRDQBY0DL_wr_dq6_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY0DL_wr_dq6_dñ_SHIFT
))&
MMDC_MPWRDQBY0DL_wr_dq6_dñ_MASK
)

	)

26972 
	#MMDC_MPWRDQBY0DL_wr_dq7_dñ_MASK
 0x30000000u

	)

26973 
	#MMDC_MPWRDQBY0DL_wr_dq7_dñ_SHIFT
 28

	)

26974 
	#MMDC_MPWRDQBY0DL_wr_dq7_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY0DL_wr_dq7_dñ_SHIFT
))&
MMDC_MPWRDQBY0DL_wr_dq7_dñ_MASK
)

	)

26975 
	#MMDC_MPWRDQBY0DL_wr_dm0_dñ_MASK
 0xC0000000u

	)

26976 
	#MMDC_MPWRDQBY0DL_wr_dm0_dñ_SHIFT
 30

	)

26977 
	#MMDC_MPWRDQBY0DL_wr_dm0_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY0DL_wr_dm0_dñ_SHIFT
))&
MMDC_MPWRDQBY0DL_wr_dm0_dñ_MASK
)

	)

26979 
	#MMDC_MPWRDQBY1DL_wr_dq8_dñ_MASK
 0x3u

	)

26980 
	#MMDC_MPWRDQBY1DL_wr_dq8_dñ_SHIFT
 0

	)

26981 
	#MMDC_MPWRDQBY1DL_wr_dq8_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY1DL_wr_dq8_dñ_SHIFT
))&
MMDC_MPWRDQBY1DL_wr_dq8_dñ_MASK
)

	)

26982 
	#MMDC_MPWRDQBY1DL_wr_dq9_dñ_MASK
 0x30u

	)

26983 
	#MMDC_MPWRDQBY1DL_wr_dq9_dñ_SHIFT
 4

	)

26984 
	#MMDC_MPWRDQBY1DL_wr_dq9_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY1DL_wr_dq9_dñ_SHIFT
))&
MMDC_MPWRDQBY1DL_wr_dq9_dñ_MASK
)

	)

26985 
	#MMDC_MPWRDQBY1DL_wr_dq10_dñ_MASK
 0x300u

	)

26986 
	#MMDC_MPWRDQBY1DL_wr_dq10_dñ_SHIFT
 8

	)

26987 
	#MMDC_MPWRDQBY1DL_wr_dq10_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY1DL_wr_dq10_dñ_SHIFT
))&
MMDC_MPWRDQBY1DL_wr_dq10_dñ_MASK
)

	)

26988 
	#MMDC_MPWRDQBY1DL_wr_dq11_dñ_MASK
 0x3000u

	)

26989 
	#MMDC_MPWRDQBY1DL_wr_dq11_dñ_SHIFT
 12

	)

26990 
	#MMDC_MPWRDQBY1DL_wr_dq11_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY1DL_wr_dq11_dñ_SHIFT
))&
MMDC_MPWRDQBY1DL_wr_dq11_dñ_MASK
)

	)

26991 
	#MMDC_MPWRDQBY1DL_wr_dq12_dñ_MASK
 0x30000u

	)

26992 
	#MMDC_MPWRDQBY1DL_wr_dq12_dñ_SHIFT
 16

	)

26993 
	#MMDC_MPWRDQBY1DL_wr_dq12_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY1DL_wr_dq12_dñ_SHIFT
))&
MMDC_MPWRDQBY1DL_wr_dq12_dñ_MASK
)

	)

26994 
	#MMDC_MPWRDQBY1DL_wr_dq13_dñ_MASK
 0x300000u

	)

26995 
	#MMDC_MPWRDQBY1DL_wr_dq13_dñ_SHIFT
 20

	)

26996 
	#MMDC_MPWRDQBY1DL_wr_dq13_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY1DL_wr_dq13_dñ_SHIFT
))&
MMDC_MPWRDQBY1DL_wr_dq13_dñ_MASK
)

	)

26997 
	#MMDC_MPWRDQBY1DL_wr_dq14_dñ_MASK
 0x3000000u

	)

26998 
	#MMDC_MPWRDQBY1DL_wr_dq14_dñ_SHIFT
 24

	)

26999 
	#MMDC_MPWRDQBY1DL_wr_dq14_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY1DL_wr_dq14_dñ_SHIFT
))&
MMDC_MPWRDQBY1DL_wr_dq14_dñ_MASK
)

	)

27000 
	#MMDC_MPWRDQBY1DL_wr_dq15_dñ_MASK
 0x30000000u

	)

27001 
	#MMDC_MPWRDQBY1DL_wr_dq15_dñ_SHIFT
 28

	)

27002 
	#MMDC_MPWRDQBY1DL_wr_dq15_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY1DL_wr_dq15_dñ_SHIFT
))&
MMDC_MPWRDQBY1DL_wr_dq15_dñ_MASK
)

	)

27003 
	#MMDC_MPWRDQBY1DL_wr_dm1_dñ_MASK
 0xC0000000u

	)

27004 
	#MMDC_MPWRDQBY1DL_wr_dm1_dñ_SHIFT
 30

	)

27005 
	#MMDC_MPWRDQBY1DL_wr_dm1_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY1DL_wr_dm1_dñ_SHIFT
))&
MMDC_MPWRDQBY1DL_wr_dm1_dñ_MASK
)

	)

27007 
	#MMDC_MPWRDQBY2DL_wr_dq16_dñ_MASK
 0x3u

	)

27008 
	#MMDC_MPWRDQBY2DL_wr_dq16_dñ_SHIFT
 0

	)

27009 
	#MMDC_MPWRDQBY2DL_wr_dq16_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY2DL_wr_dq16_dñ_SHIFT
))&
MMDC_MPWRDQBY2DL_wr_dq16_dñ_MASK
)

	)

27010 
	#MMDC_MPWRDQBY2DL_wr_dq17_dñ_MASK
 0x30u

	)

27011 
	#MMDC_MPWRDQBY2DL_wr_dq17_dñ_SHIFT
 4

	)

27012 
	#MMDC_MPWRDQBY2DL_wr_dq17_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY2DL_wr_dq17_dñ_SHIFT
))&
MMDC_MPWRDQBY2DL_wr_dq17_dñ_MASK
)

	)

27013 
	#MMDC_MPWRDQBY2DL_wr_dq18_dñ_MASK
 0x300u

	)

27014 
	#MMDC_MPWRDQBY2DL_wr_dq18_dñ_SHIFT
 8

	)

27015 
	#MMDC_MPWRDQBY2DL_wr_dq18_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY2DL_wr_dq18_dñ_SHIFT
))&
MMDC_MPWRDQBY2DL_wr_dq18_dñ_MASK
)

	)

27016 
	#MMDC_MPWRDQBY2DL_wr_dq19_dñ_MASK
 0x3000u

	)

27017 
	#MMDC_MPWRDQBY2DL_wr_dq19_dñ_SHIFT
 12

	)

27018 
	#MMDC_MPWRDQBY2DL_wr_dq19_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY2DL_wr_dq19_dñ_SHIFT
))&
MMDC_MPWRDQBY2DL_wr_dq19_dñ_MASK
)

	)

27019 
	#MMDC_MPWRDQBY2DL_wr_dq20_dñ_MASK
 0x30000u

	)

27020 
	#MMDC_MPWRDQBY2DL_wr_dq20_dñ_SHIFT
 16

	)

27021 
	#MMDC_MPWRDQBY2DL_wr_dq20_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY2DL_wr_dq20_dñ_SHIFT
))&
MMDC_MPWRDQBY2DL_wr_dq20_dñ_MASK
)

	)

27022 
	#MMDC_MPWRDQBY2DL_wr_dq21_dñ_MASK
 0x300000u

	)

27023 
	#MMDC_MPWRDQBY2DL_wr_dq21_dñ_SHIFT
 20

	)

27024 
	#MMDC_MPWRDQBY2DL_wr_dq21_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY2DL_wr_dq21_dñ_SHIFT
))&
MMDC_MPWRDQBY2DL_wr_dq21_dñ_MASK
)

	)

27025 
	#MMDC_MPWRDQBY2DL_wr_dq22_dñ_MASK
 0x3000000u

	)

27026 
	#MMDC_MPWRDQBY2DL_wr_dq22_dñ_SHIFT
 24

	)

27027 
	#MMDC_MPWRDQBY2DL_wr_dq22_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY2DL_wr_dq22_dñ_SHIFT
))&
MMDC_MPWRDQBY2DL_wr_dq22_dñ_MASK
)

	)

27028 
	#MMDC_MPWRDQBY2DL_wr_dq23_dñ_MASK
 0x30000000u

	)

27029 
	#MMDC_MPWRDQBY2DL_wr_dq23_dñ_SHIFT
 28

	)

27030 
	#MMDC_MPWRDQBY2DL_wr_dq23_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY2DL_wr_dq23_dñ_SHIFT
))&
MMDC_MPWRDQBY2DL_wr_dq23_dñ_MASK
)

	)

27031 
	#MMDC_MPWRDQBY2DL_wr_dm2_dñ_MASK
 0xC0000000u

	)

27032 
	#MMDC_MPWRDQBY2DL_wr_dm2_dñ_SHIFT
 30

	)

27033 
	#MMDC_MPWRDQBY2DL_wr_dm2_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY2DL_wr_dm2_dñ_SHIFT
))&
MMDC_MPWRDQBY2DL_wr_dm2_dñ_MASK
)

	)

27035 
	#MMDC_MPWRDQBY3DL_wr_dq24_dñ_MASK
 0x3u

	)

27036 
	#MMDC_MPWRDQBY3DL_wr_dq24_dñ_SHIFT
 0

	)

27037 
	#MMDC_MPWRDQBY3DL_wr_dq24_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY3DL_wr_dq24_dñ_SHIFT
))&
MMDC_MPWRDQBY3DL_wr_dq24_dñ_MASK
)

	)

27038 
	#MMDC_MPWRDQBY3DL_wr_dq25_dñ_MASK
 0x30u

	)

27039 
	#MMDC_MPWRDQBY3DL_wr_dq25_dñ_SHIFT
 4

	)

27040 
	#MMDC_MPWRDQBY3DL_wr_dq25_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY3DL_wr_dq25_dñ_SHIFT
))&
MMDC_MPWRDQBY3DL_wr_dq25_dñ_MASK
)

	)

27041 
	#MMDC_MPWRDQBY3DL_wr_dq26_dñ_MASK
 0x300u

	)

27042 
	#MMDC_MPWRDQBY3DL_wr_dq26_dñ_SHIFT
 8

	)

27043 
	#MMDC_MPWRDQBY3DL_wr_dq26_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY3DL_wr_dq26_dñ_SHIFT
))&
MMDC_MPWRDQBY3DL_wr_dq26_dñ_MASK
)

	)

27044 
	#MMDC_MPWRDQBY3DL_wr_dq27_dñ_MASK
 0x3000u

	)

27045 
	#MMDC_MPWRDQBY3DL_wr_dq27_dñ_SHIFT
 12

	)

27046 
	#MMDC_MPWRDQBY3DL_wr_dq27_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY3DL_wr_dq27_dñ_SHIFT
))&
MMDC_MPWRDQBY3DL_wr_dq27_dñ_MASK
)

	)

27047 
	#MMDC_MPWRDQBY3DL_wr_dq28_dñ_MASK
 0x30000u

	)

27048 
	#MMDC_MPWRDQBY3DL_wr_dq28_dñ_SHIFT
 16

	)

27049 
	#MMDC_MPWRDQBY3DL_wr_dq28_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY3DL_wr_dq28_dñ_SHIFT
))&
MMDC_MPWRDQBY3DL_wr_dq28_dñ_MASK
)

	)

27050 
	#MMDC_MPWRDQBY3DL_wr_dq29_dñ_MASK
 0x300000u

	)

27051 
	#MMDC_MPWRDQBY3DL_wr_dq29_dñ_SHIFT
 20

	)

27052 
	#MMDC_MPWRDQBY3DL_wr_dq29_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY3DL_wr_dq29_dñ_SHIFT
))&
MMDC_MPWRDQBY3DL_wr_dq29_dñ_MASK
)

	)

27053 
	#MMDC_MPWRDQBY3DL_wr_dq30_dñ_MASK
 0x3000000u

	)

27054 
	#MMDC_MPWRDQBY3DL_wr_dq30_dñ_SHIFT
 24

	)

27055 
	#MMDC_MPWRDQBY3DL_wr_dq30_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY3DL_wr_dq30_dñ_SHIFT
))&
MMDC_MPWRDQBY3DL_wr_dq30_dñ_MASK
)

	)

27056 
	#MMDC_MPWRDQBY3DL_wr_dq31_dñ_MASK
 0x30000000u

	)

27057 
	#MMDC_MPWRDQBY3DL_wr_dq31_dñ_SHIFT
 28

	)

27058 
	#MMDC_MPWRDQBY3DL_wr_dq31_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY3DL_wr_dq31_dñ_SHIFT
))&
MMDC_MPWRDQBY3DL_wr_dq31_dñ_MASK
)

	)

27059 
	#MMDC_MPWRDQBY3DL_wr_dm3_dñ_MASK
 0xC0000000u

	)

27060 
	#MMDC_MPWRDQBY3DL_wr_dm3_dñ_SHIFT
 30

	)

27061 
	#MMDC_MPWRDQBY3DL_wr_dm3_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDQBY3DL_wr_dm3_dñ_SHIFT
))&
MMDC_MPWRDQBY3DL_wr_dm3_dñ_MASK
)

	)

27063 
	#MMDC_MPDGCTRL0_DG_DL_ABS_OFFSET0_MASK
 0x7Fu

	)

27064 
	#MMDC_MPDGCTRL0_DG_DL_ABS_OFFSET0_SHIFT
 0

	)

27065 
	#MMDC_MPDGCTRL0_DG_DL_ABS_OFFSET0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGCTRL0_DG_DL_ABS_OFFSET0_SHIFT
))&
MMDC_MPDGCTRL0_DG_DL_ABS_OFFSET0_MASK
)

	)

27066 
	#MMDC_MPDGCTRL0_DG_HC_DEL0_MASK
 0xF00u

	)

27067 
	#MMDC_MPDGCTRL0_DG_HC_DEL0_SHIFT
 8

	)

27068 
	#MMDC_MPDGCTRL0_DG_HC_DEL0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGCTRL0_DG_HC_DEL0_SHIFT
))&
MMDC_MPDGCTRL0_DG_HC_DEL0_MASK
)

	)

27069 
	#MMDC_MPDGCTRL0_HW_DG_ERR_MASK
 0x1000u

	)

27070 
	#MMDC_MPDGCTRL0_HW_DG_ERR_SHIFT
 12

	)

27071 
	#MMDC_MPDGCTRL0_DG_DL_ABS_OFFSET1_MASK
 0x7F0000u

	)

27072 
	#MMDC_MPDGCTRL0_DG_DL_ABS_OFFSET1_SHIFT
 16

	)

27073 
	#MMDC_MPDGCTRL0_DG_DL_ABS_OFFSET1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGCTRL0_DG_DL_ABS_OFFSET1_SHIFT
))&
MMDC_MPDGCTRL0_DG_DL_ABS_OFFSET1_MASK
)

	)

27074 
	#MMDC_MPDGCTRL0_DG_EXT_UP_MASK
 0x800000u

	)

27075 
	#MMDC_MPDGCTRL0_DG_EXT_UP_SHIFT
 23

	)

27076 
	#MMDC_MPDGCTRL0_DG_HC_DEL1_MASK
 0xF000000u

	)

27077 
	#MMDC_MPDGCTRL0_DG_HC_DEL1_SHIFT
 24

	)

27078 
	#MMDC_MPDGCTRL0_DG_HC_DEL1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGCTRL0_DG_HC_DEL1_SHIFT
))&
MMDC_MPDGCTRL0_DG_HC_DEL1_MASK
)

	)

27079 
	#MMDC_MPDGCTRL0_HW_DG_EN_MASK
 0x10000000u

	)

27080 
	#MMDC_MPDGCTRL0_HW_DG_EN_SHIFT
 28

	)

27081 
	#MMDC_MPDGCTRL0_DG_DIS_MASK
 0x20000000u

	)

27082 
	#MMDC_MPDGCTRL0_DG_DIS_SHIFT
 29

	)

27083 
	#MMDC_MPDGCTRL0_DG_CMP_CYC_MASK
 0x40000000u

	)

27084 
	#MMDC_MPDGCTRL0_DG_CMP_CYC_SHIFT
 30

	)

27085 
	#MMDC_MPDGCTRL0_RST_RD_FIFO_MASK
 0x80000000u

	)

27086 
	#MMDC_MPDGCTRL0_RST_RD_FIFO_SHIFT
 31

	)

27088 
	#MMDC_MPDGCTRL1_DG_DL_ABS_OFFSET2_MASK
 0x7Fu

	)

27089 
	#MMDC_MPDGCTRL1_DG_DL_ABS_OFFSET2_SHIFT
 0

	)

27090 
	#MMDC_MPDGCTRL1_DG_DL_ABS_OFFSET2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGCTRL1_DG_DL_ABS_OFFSET2_SHIFT
))&
MMDC_MPDGCTRL1_DG_DL_ABS_OFFSET2_MASK
)

	)

27091 
	#MMDC_MPDGCTRL1_DG_HC_DEL2_MASK
 0xF00u

	)

27092 
	#MMDC_MPDGCTRL1_DG_HC_DEL2_SHIFT
 8

	)

27093 
	#MMDC_MPDGCTRL1_DG_HC_DEL2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGCTRL1_DG_HC_DEL2_SHIFT
))&
MMDC_MPDGCTRL1_DG_HC_DEL2_MASK
)

	)

27094 
	#MMDC_MPDGCTRL1_DG_DL_ABS_OFFSET3_MASK
 0x7F0000u

	)

27095 
	#MMDC_MPDGCTRL1_DG_DL_ABS_OFFSET3_SHIFT
 16

	)

27096 
	#MMDC_MPDGCTRL1_DG_DL_ABS_OFFSET3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGCTRL1_DG_DL_ABS_OFFSET3_SHIFT
))&
MMDC_MPDGCTRL1_DG_DL_ABS_OFFSET3_MASK
)

	)

27097 
	#MMDC_MPDGCTRL1_DG_HC_DEL3_MASK
 0xF000000u

	)

27098 
	#MMDC_MPDGCTRL1_DG_HC_DEL3_SHIFT
 24

	)

27099 
	#MMDC_MPDGCTRL1_DG_HC_DEL3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGCTRL1_DG_HC_DEL3_SHIFT
))&
MMDC_MPDGCTRL1_DG_HC_DEL3_MASK
)

	)

27101 
	#MMDC_MPDGDLST0_DG_DL_UNIT_NUM0_MASK
 0x7Fu

	)

27102 
	#MMDC_MPDGDLST0_DG_DL_UNIT_NUM0_SHIFT
 0

	)

27103 
	#MMDC_MPDGDLST0_DG_DL_UNIT_NUM0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGDLST0_DG_DL_UNIT_NUM0_SHIFT
))&
MMDC_MPDGDLST0_DG_DL_UNIT_NUM0_MASK
)

	)

27104 
	#MMDC_MPDGDLST0_DG_DL_UNIT_NUM1_MASK
 0x7F00u

	)

27105 
	#MMDC_MPDGDLST0_DG_DL_UNIT_NUM1_SHIFT
 8

	)

27106 
	#MMDC_MPDGDLST0_DG_DL_UNIT_NUM1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGDLST0_DG_DL_UNIT_NUM1_SHIFT
))&
MMDC_MPDGDLST0_DG_DL_UNIT_NUM1_MASK
)

	)

27107 
	#MMDC_MPDGDLST0_DG_DL_UNIT_NUM2_MASK
 0x7F0000u

	)

27108 
	#MMDC_MPDGDLST0_DG_DL_UNIT_NUM2_SHIFT
 16

	)

27109 
	#MMDC_MPDGDLST0_DG_DL_UNIT_NUM2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGDLST0_DG_DL_UNIT_NUM2_SHIFT
))&
MMDC_MPDGDLST0_DG_DL_UNIT_NUM2_MASK
)

	)

27110 
	#MMDC_MPDGDLST0_DG_DL_UNIT_NUM3_MASK
 0x7F000000u

	)

27111 
	#MMDC_MPDGDLST0_DG_DL_UNIT_NUM3_SHIFT
 24

	)

27112 
	#MMDC_MPDGDLST0_DG_DL_UNIT_NUM3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGDLST0_DG_DL_UNIT_NUM3_SHIFT
))&
MMDC_MPDGDLST0_DG_DL_UNIT_NUM3_MASK
)

	)

27114 
	#MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET0_MASK
 0x7Fu

	)

27115 
	#MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET0_SHIFT
 0

	)

27116 
	#MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET0_SHIFT
))&
MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET0_MASK
)

	)

27117 
	#MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET1_MASK
 0x7F00u

	)

27118 
	#MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET1_SHIFT
 8

	)

27119 
	#MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET1_SHIFT
))&
MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET1_MASK
)

	)

27120 
	#MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET2_MASK
 0x7F0000u

	)

27121 
	#MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET2_SHIFT
 16

	)

27122 
	#MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET2_SHIFT
))&
MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET2_MASK
)

	)

27123 
	#MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET3_MASK
 0x7F000000u

	)

27124 
	#MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET3_SHIFT
 24

	)

27125 
	#MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET3_SHIFT
))&
MMDC_MPRDDLCTL_RD_DL_ABS_OFFSET3_MASK
)

	)

27127 
	#MMDC_MPRDDLST_RD_DL_UNIT_NUM0_MASK
 0x7Fu

	)

27128 
	#MMDC_MPRDDLST_RD_DL_UNIT_NUM0_SHIFT
 0

	)

27129 
	#MMDC_MPRDDLST_RD_DL_UNIT_NUM0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDLST_RD_DL_UNIT_NUM0_SHIFT
))&
MMDC_MPRDDLST_RD_DL_UNIT_NUM0_MASK
)

	)

27130 
	#MMDC_MPRDDLST_RD_DL_UNIT_NUM1_MASK
 0x7F00u

	)

27131 
	#MMDC_MPRDDLST_RD_DL_UNIT_NUM1_SHIFT
 8

	)

27132 
	#MMDC_MPRDDLST_RD_DL_UNIT_NUM1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDLST_RD_DL_UNIT_NUM1_SHIFT
))&
MMDC_MPRDDLST_RD_DL_UNIT_NUM1_MASK
)

	)

27133 
	#MMDC_MPRDDLST_RD_DL_UNIT_NUM2_MASK
 0x7F0000u

	)

27134 
	#MMDC_MPRDDLST_RD_DL_UNIT_NUM2_SHIFT
 16

	)

27135 
	#MMDC_MPRDDLST_RD_DL_UNIT_NUM2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDLST_RD_DL_UNIT_NUM2_SHIFT
))&
MMDC_MPRDDLST_RD_DL_UNIT_NUM2_MASK
)

	)

27136 
	#MMDC_MPRDDLST_RD_DL_UNIT_NUM3_MASK
 0x7F000000u

	)

27137 
	#MMDC_MPRDDLST_RD_DL_UNIT_NUM3_SHIFT
 24

	)

27138 
	#MMDC_MPRDDLST_RD_DL_UNIT_NUM3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDLST_RD_DL_UNIT_NUM3_SHIFT
))&
MMDC_MPRDDLST_RD_DL_UNIT_NUM3_MASK
)

	)

27140 
	#MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET0_MASK
 0x7Fu

	)

27141 
	#MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET0_SHIFT
 0

	)

27142 
	#MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET0_SHIFT
))&
MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET0_MASK
)

	)

27143 
	#MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET1_MASK
 0x7F00u

	)

27144 
	#MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET1_SHIFT
 8

	)

27145 
	#MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET1_SHIFT
))&
MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET1_MASK
)

	)

27146 
	#MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET2_MASK
 0x7F0000u

	)

27147 
	#MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET2_SHIFT
 16

	)

27148 
	#MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET2_SHIFT
))&
MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET2_MASK
)

	)

27149 
	#MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET3_MASK
 0x7F000000u

	)

27150 
	#MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET3_SHIFT
 24

	)

27151 
	#MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET3_SHIFT
))&
MMDC_MPWRDLCTL_WR_DL_ABS_OFFSET3_MASK
)

	)

27153 
	#MMDC_MPWRDLST_WR_DL_UNIT_NUM0_MASK
 0x7Fu

	)

27154 
	#MMDC_MPWRDLST_WR_DL_UNIT_NUM0_SHIFT
 0

	)

27155 
	#MMDC_MPWRDLST_WR_DL_UNIT_NUM0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDLST_WR_DL_UNIT_NUM0_SHIFT
))&
MMDC_MPWRDLST_WR_DL_UNIT_NUM0_MASK
)

	)

27156 
	#MMDC_MPWRDLST_WR_DL_UNIT_NUM1_MASK
 0x7F00u

	)

27157 
	#MMDC_MPWRDLST_WR_DL_UNIT_NUM1_SHIFT
 8

	)

27158 
	#MMDC_MPWRDLST_WR_DL_UNIT_NUM1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDLST_WR_DL_UNIT_NUM1_SHIFT
))&
MMDC_MPWRDLST_WR_DL_UNIT_NUM1_MASK
)

	)

27159 
	#MMDC_MPWRDLST_WR_DL_UNIT_NUM2_MASK
 0x7F0000u

	)

27160 
	#MMDC_MPWRDLST_WR_DL_UNIT_NUM2_SHIFT
 16

	)

27161 
	#MMDC_MPWRDLST_WR_DL_UNIT_NUM2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDLST_WR_DL_UNIT_NUM2_SHIFT
))&
MMDC_MPWRDLST_WR_DL_UNIT_NUM2_MASK
)

	)

27162 
	#MMDC_MPWRDLST_WR_DL_UNIT_NUM3_MASK
 0x7F000000u

	)

27163 
	#MMDC_MPWRDLST_WR_DL_UNIT_NUM3_SHIFT
 24

	)

27164 
	#MMDC_MPWRDLST_WR_DL_UNIT_NUM3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDLST_WR_DL_UNIT_NUM3_SHIFT
))&
MMDC_MPWRDLST_WR_DL_UNIT_NUM3_MASK
)

	)

27166 
	#MMDC_MPSDCTRL_SD˛k0_dñ_MASK
 0x300u

	)

27167 
	#MMDC_MPSDCTRL_SD˛k0_dñ_SHIFT
 8

	)

27168 
	#MMDC_MPSDCTRL_SD˛k0_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPSDCTRL_SD˛k0_dñ_SHIFT
))&
MMDC_MPSDCTRL_SD˛k0_dñ_MASK
)

	)

27169 
	#MMDC_MPSDCTRL_SDCLK1_dñ_MASK
 0xC00u

	)

27170 
	#MMDC_MPSDCTRL_SDCLK1_dñ_SHIFT
 10

	)

27171 
	#MMDC_MPSDCTRL_SDCLK1_dñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPSDCTRL_SDCLK1_dñ_SHIFT
))&
MMDC_MPSDCTRL_SDCLK1_dñ_MASK
)

	)

27173 
	#MMDC_MPZQLP2CTL_ZQ_LP2_HW_ZQINIT_MASK
 0x1FFu

	)

27174 
	#MMDC_MPZQLP2CTL_ZQ_LP2_HW_ZQINIT_SHIFT
 0

	)

27175 
	#MMDC_MPZQLP2CTL_ZQ_LP2_HW_ZQINIT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPZQLP2CTL_ZQ_LP2_HW_ZQINIT_SHIFT
))&
MMDC_MPZQLP2CTL_ZQ_LP2_HW_ZQINIT_MASK
)

	)

27176 
	#MMDC_MPZQLP2CTL_ZQ_LP2_HW_ZQCL_MASK
 0xFF0000u

	)

27177 
	#MMDC_MPZQLP2CTL_ZQ_LP2_HW_ZQCL_SHIFT
 16

	)

27178 
	#MMDC_MPZQLP2CTL_ZQ_LP2_HW_ZQCL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPZQLP2CTL_ZQ_LP2_HW_ZQCL_SHIFT
))&
MMDC_MPZQLP2CTL_ZQ_LP2_HW_ZQCL_MASK
)

	)

27179 
	#MMDC_MPZQLP2CTL_ZQ_LP2_HW_ZQCS_MASK
 0x7F000000u

	)

27180 
	#MMDC_MPZQLP2CTL_ZQ_LP2_HW_ZQCS_SHIFT
 24

	)

27181 
	#MMDC_MPZQLP2CTL_ZQ_LP2_HW_ZQCS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPZQLP2CTL_ZQ_LP2_HW_ZQCS_SHIFT
))&
MMDC_MPZQLP2CTL_ZQ_LP2_HW_ZQCS_MASK
)

	)

27183 
	#MMDC_MPRDDLHWCTL_HW_RD_DL_ERR0_MASK
 0x1u

	)

27184 
	#MMDC_MPRDDLHWCTL_HW_RD_DL_ERR0_SHIFT
 0

	)

27185 
	#MMDC_MPRDDLHWCTL_HW_RD_DL_ERR1_MASK
 0x2u

	)

27186 
	#MMDC_MPRDDLHWCTL_HW_RD_DL_ERR1_SHIFT
 1

	)

27187 
	#MMDC_MPRDDLHWCTL_HW_RD_DL_ERR2_MASK
 0x4u

	)

27188 
	#MMDC_MPRDDLHWCTL_HW_RD_DL_ERR2_SHIFT
 2

	)

27189 
	#MMDC_MPRDDLHWCTL_HW_RD_DL_ERR3_MASK
 0x8u

	)

27190 
	#MMDC_MPRDDLHWCTL_HW_RD_DL_ERR3_SHIFT
 3

	)

27191 
	#MMDC_MPRDDLHWCTL_HW_RD_DL_EN_MASK
 0x10u

	)

27192 
	#MMDC_MPRDDLHWCTL_HW_RD_DL_EN_SHIFT
 4

	)

27193 
	#MMDC_MPRDDLHWCTL_HW_RD_DL_CMP_CYC_MASK
 0x20u

	)

27194 
	#MMDC_MPRDDLHWCTL_HW_RD_DL_CMP_CYC_SHIFT
 5

	)

27196 
	#MMDC_MPWRDLHWCTL_HW_WR_DL_ERR0_MASK
 0x1u

	)

27197 
	#MMDC_MPWRDLHWCTL_HW_WR_DL_ERR0_SHIFT
 0

	)

27198 
	#MMDC_MPWRDLHWCTL_HW_WR_DL_ERR1_MASK
 0x2u

	)

27199 
	#MMDC_MPWRDLHWCTL_HW_WR_DL_ERR1_SHIFT
 1

	)

27200 
	#MMDC_MPWRDLHWCTL_HW_WR_DL_ERR2_MASK
 0x4u

	)

27201 
	#MMDC_MPWRDLHWCTL_HW_WR_DL_ERR2_SHIFT
 2

	)

27202 
	#MMDC_MPWRDLHWCTL_HW_WR_DL_ERR3_MASK
 0x8u

	)

27203 
	#MMDC_MPWRDLHWCTL_HW_WR_DL_ERR3_SHIFT
 3

	)

27204 
	#MMDC_MPWRDLHWCTL_HW_WR_DL_EN_MASK
 0x10u

	)

27205 
	#MMDC_MPWRDLHWCTL_HW_WR_DL_EN_SHIFT
 4

	)

27206 
	#MMDC_MPWRDLHWCTL_HW_WR_DL_CMP_CYC_MASK
 0x20u

	)

27207 
	#MMDC_MPWRDLHWCTL_HW_WR_DL_CMP_CYC_SHIFT
 5

	)

27209 
	#MMDC_MPRDDLHWST0_HW_RD_DL_LOW0_MASK
 0x7Fu

	)

27210 
	#MMDC_MPRDDLHWST0_HW_RD_DL_LOW0_SHIFT
 0

	)

27211 
	#MMDC_MPRDDLHWST0_HW_RD_DL_LOW0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDLHWST0_HW_RD_DL_LOW0_SHIFT
))&
MMDC_MPRDDLHWST0_HW_RD_DL_LOW0_MASK
)

	)

27212 
	#MMDC_MPRDDLHWST0_HW_RD_DL_UP0_MASK
 0x7F00u

	)

27213 
	#MMDC_MPRDDLHWST0_HW_RD_DL_UP0_SHIFT
 8

	)

27214 
	#MMDC_MPRDDLHWST0_HW_RD_DL_UP0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDLHWST0_HW_RD_DL_UP0_SHIFT
))&
MMDC_MPRDDLHWST0_HW_RD_DL_UP0_MASK
)

	)

27215 
	#MMDC_MPRDDLHWST0_HW_RD_DL_LOW1_MASK
 0x7F0000u

	)

27216 
	#MMDC_MPRDDLHWST0_HW_RD_DL_LOW1_SHIFT
 16

	)

27217 
	#MMDC_MPRDDLHWST0_HW_RD_DL_LOW1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDLHWST0_HW_RD_DL_LOW1_SHIFT
))&
MMDC_MPRDDLHWST0_HW_RD_DL_LOW1_MASK
)

	)

27218 
	#MMDC_MPRDDLHWST0_HW_RD_DL_UP1_MASK
 0x7F000000u

	)

27219 
	#MMDC_MPRDDLHWST0_HW_RD_DL_UP1_SHIFT
 24

	)

27220 
	#MMDC_MPRDDLHWST0_HW_RD_DL_UP1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDLHWST0_HW_RD_DL_UP1_SHIFT
))&
MMDC_MPRDDLHWST0_HW_RD_DL_UP1_MASK
)

	)

27222 
	#MMDC_MPRDDLHWST1_HW_RD_DL_LOW2_MASK
 0x7Fu

	)

27223 
	#MMDC_MPRDDLHWST1_HW_RD_DL_LOW2_SHIFT
 0

	)

27224 
	#MMDC_MPRDDLHWST1_HW_RD_DL_LOW2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDLHWST1_HW_RD_DL_LOW2_SHIFT
))&
MMDC_MPRDDLHWST1_HW_RD_DL_LOW2_MASK
)

	)

27225 
	#MMDC_MPRDDLHWST1_HW_RD_DL_UP2_MASK
 0x7F00u

	)

27226 
	#MMDC_MPRDDLHWST1_HW_RD_DL_UP2_SHIFT
 8

	)

27227 
	#MMDC_MPRDDLHWST1_HW_RD_DL_UP2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDLHWST1_HW_RD_DL_UP2_SHIFT
))&
MMDC_MPRDDLHWST1_HW_RD_DL_UP2_MASK
)

	)

27228 
	#MMDC_MPRDDLHWST1_HW_RD_DL_LOW3_MASK
 0x7F0000u

	)

27229 
	#MMDC_MPRDDLHWST1_HW_RD_DL_LOW3_SHIFT
 16

	)

27230 
	#MMDC_MPRDDLHWST1_HW_RD_DL_LOW3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDLHWST1_HW_RD_DL_LOW3_SHIFT
))&
MMDC_MPRDDLHWST1_HW_RD_DL_LOW3_MASK
)

	)

27231 
	#MMDC_MPRDDLHWST1_HW_RD_DL_UP3_MASK
 0x7F000000u

	)

27232 
	#MMDC_MPRDDLHWST1_HW_RD_DL_UP3_SHIFT
 24

	)

27233 
	#MMDC_MPRDDLHWST1_HW_RD_DL_UP3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPRDDLHWST1_HW_RD_DL_UP3_SHIFT
))&
MMDC_MPRDDLHWST1_HW_RD_DL_UP3_MASK
)

	)

27235 
	#MMDC_MPWRDLHWST0_HW_WR_DL_LOW0_MASK
 0x7Fu

	)

27236 
	#MMDC_MPWRDLHWST0_HW_WR_DL_LOW0_SHIFT
 0

	)

27237 
	#MMDC_MPWRDLHWST0_HW_WR_DL_LOW0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDLHWST0_HW_WR_DL_LOW0_SHIFT
))&
MMDC_MPWRDLHWST0_HW_WR_DL_LOW0_MASK
)

	)

27238 
	#MMDC_MPWRDLHWST0_HW_WR_DL_UP0_MASK
 0x7F00u

	)

27239 
	#MMDC_MPWRDLHWST0_HW_WR_DL_UP0_SHIFT
 8

	)

27240 
	#MMDC_MPWRDLHWST0_HW_WR_DL_UP0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDLHWST0_HW_WR_DL_UP0_SHIFT
))&
MMDC_MPWRDLHWST0_HW_WR_DL_UP0_MASK
)

	)

27241 
	#MMDC_MPWRDLHWST0_HW_WR_DL_LOW1_MASK
 0x7F0000u

	)

27242 
	#MMDC_MPWRDLHWST0_HW_WR_DL_LOW1_SHIFT
 16

	)

27243 
	#MMDC_MPWRDLHWST0_HW_WR_DL_LOW1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDLHWST0_HW_WR_DL_LOW1_SHIFT
))&
MMDC_MPWRDLHWST0_HW_WR_DL_LOW1_MASK
)

	)

27244 
	#MMDC_MPWRDLHWST0_HW_WR_DL_UP1_MASK
 0x7F000000u

	)

27245 
	#MMDC_MPWRDLHWST0_HW_WR_DL_UP1_SHIFT
 24

	)

27246 
	#MMDC_MPWRDLHWST0_HW_WR_DL_UP1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDLHWST0_HW_WR_DL_UP1_SHIFT
))&
MMDC_MPWRDLHWST0_HW_WR_DL_UP1_MASK
)

	)

27248 
	#MMDC_MPWRDLHWST1_HW_WR_DL_LOW2_MASK
 0x7Fu

	)

27249 
	#MMDC_MPWRDLHWST1_HW_WR_DL_LOW2_SHIFT
 0

	)

27250 
	#MMDC_MPWRDLHWST1_HW_WR_DL_LOW2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDLHWST1_HW_WR_DL_LOW2_SHIFT
))&
MMDC_MPWRDLHWST1_HW_WR_DL_LOW2_MASK
)

	)

27251 
	#MMDC_MPWRDLHWST1_HW_WR_DL_UP2_MASK
 0x7F00u

	)

27252 
	#MMDC_MPWRDLHWST1_HW_WR_DL_UP2_SHIFT
 8

	)

27253 
	#MMDC_MPWRDLHWST1_HW_WR_DL_UP2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDLHWST1_HW_WR_DL_UP2_SHIFT
))&
MMDC_MPWRDLHWST1_HW_WR_DL_UP2_MASK
)

	)

27254 
	#MMDC_MPWRDLHWST1_HW_WR_DL_LOW3_MASK
 0x7F0000u

	)

27255 
	#MMDC_MPWRDLHWST1_HW_WR_DL_LOW3_SHIFT
 16

	)

27256 
	#MMDC_MPWRDLHWST1_HW_WR_DL_LOW3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDLHWST1_HW_WR_DL_LOW3_SHIFT
))&
MMDC_MPWRDLHWST1_HW_WR_DL_LOW3_MASK
)

	)

27257 
	#MMDC_MPWRDLHWST1_HW_WR_DL_UP3_MASK
 0x7F000000u

	)

27258 
	#MMDC_MPWRDLHWST1_HW_WR_DL_UP3_SHIFT
 24

	)

27259 
	#MMDC_MPWRDLHWST1_HW_WR_DL_UP3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRDLHWST1_HW_WR_DL_UP3_SHIFT
))&
MMDC_MPWRDLHWST1_HW_WR_DL_UP3_MASK
)

	)

27261 
	#MMDC_MPWLHWERR_HW_WL0_DQ_MASK
 0xFFu

	)

27262 
	#MMDC_MPWLHWERR_HW_WL0_DQ_SHIFT
 0

	)

27263 
	#MMDC_MPWLHWERR_HW_WL0_DQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWLHWERR_HW_WL0_DQ_SHIFT
))&
MMDC_MPWLHWERR_HW_WL0_DQ_MASK
)

	)

27264 
	#MMDC_MPWLHWERR_HW_WL1_DQ_MASK
 0xFF00u

	)

27265 
	#MMDC_MPWLHWERR_HW_WL1_DQ_SHIFT
 8

	)

27266 
	#MMDC_MPWLHWERR_HW_WL1_DQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWLHWERR_HW_WL1_DQ_SHIFT
))&
MMDC_MPWLHWERR_HW_WL1_DQ_MASK
)

	)

27267 
	#MMDC_MPWLHWERR_HW_WL2_DQ_MASK
 0xFF0000u

	)

27268 
	#MMDC_MPWLHWERR_HW_WL2_DQ_SHIFT
 16

	)

27269 
	#MMDC_MPWLHWERR_HW_WL2_DQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWLHWERR_HW_WL2_DQ_SHIFT
))&
MMDC_MPWLHWERR_HW_WL2_DQ_MASK
)

	)

27270 
	#MMDC_MPWLHWERR_HW_WL3_DQ_MASK
 0xFF000000u

	)

27271 
	#MMDC_MPWLHWERR_HW_WL3_DQ_SHIFT
 24

	)

27272 
	#MMDC_MPWLHWERR_HW_WL3_DQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWLHWERR_HW_WL3_DQ_SHIFT
))&
MMDC_MPWLHWERR_HW_WL3_DQ_MASK
)

	)

27274 
	#MMDC_MPDGHWST0_HW_DG_LOW0_MASK
 0x7FFu

	)

27275 
	#MMDC_MPDGHWST0_HW_DG_LOW0_SHIFT
 0

	)

27276 
	#MMDC_MPDGHWST0_HW_DG_LOW0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGHWST0_HW_DG_LOW0_SHIFT
))&
MMDC_MPDGHWST0_HW_DG_LOW0_MASK
)

	)

27277 
	#MMDC_MPDGHWST0_HW_DG_UP0_MASK
 0x7FF0000u

	)

27278 
	#MMDC_MPDGHWST0_HW_DG_UP0_SHIFT
 16

	)

27279 
	#MMDC_MPDGHWST0_HW_DG_UP0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGHWST0_HW_DG_UP0_SHIFT
))&
MMDC_MPDGHWST0_HW_DG_UP0_MASK
)

	)

27281 
	#MMDC_MPDGHWST1_HW_DG_LOW1_MASK
 0x7FFu

	)

27282 
	#MMDC_MPDGHWST1_HW_DG_LOW1_SHIFT
 0

	)

27283 
	#MMDC_MPDGHWST1_HW_DG_LOW1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGHWST1_HW_DG_LOW1_SHIFT
))&
MMDC_MPDGHWST1_HW_DG_LOW1_MASK
)

	)

27284 
	#MMDC_MPDGHWST1_HW_DG_UP1_MASK
 0x7FF0000u

	)

27285 
	#MMDC_MPDGHWST1_HW_DG_UP1_SHIFT
 16

	)

27286 
	#MMDC_MPDGHWST1_HW_DG_UP1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGHWST1_HW_DG_UP1_SHIFT
))&
MMDC_MPDGHWST1_HW_DG_UP1_MASK
)

	)

27288 
	#MMDC_MPDGHWST2_HW_DG_LOW2_MASK
 0x7FFu

	)

27289 
	#MMDC_MPDGHWST2_HW_DG_LOW2_SHIFT
 0

	)

27290 
	#MMDC_MPDGHWST2_HW_DG_LOW2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGHWST2_HW_DG_LOW2_SHIFT
))&
MMDC_MPDGHWST2_HW_DG_LOW2_MASK
)

	)

27291 
	#MMDC_MPDGHWST2_HW_DG_UP2_MASK
 0x7FF0000u

	)

27292 
	#MMDC_MPDGHWST2_HW_DG_UP2_SHIFT
 16

	)

27293 
	#MMDC_MPDGHWST2_HW_DG_UP2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGHWST2_HW_DG_UP2_SHIFT
))&
MMDC_MPDGHWST2_HW_DG_UP2_MASK
)

	)

27295 
	#MMDC_MPDGHWST3_HW_DG_LOW3_MASK
 0x7FFu

	)

27296 
	#MMDC_MPDGHWST3_HW_DG_LOW3_SHIFT
 0

	)

27297 
	#MMDC_MPDGHWST3_HW_DG_LOW3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGHWST3_HW_DG_LOW3_SHIFT
))&
MMDC_MPDGHWST3_HW_DG_LOW3_MASK
)

	)

27298 
	#MMDC_MPDGHWST3_HW_DG_UP3_MASK
 0x7FF0000u

	)

27299 
	#MMDC_MPDGHWST3_HW_DG_UP3_SHIFT
 16

	)

27300 
	#MMDC_MPDGHWST3_HW_DG_UP3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDGHWST3_HW_DG_UP3_SHIFT
))&
MMDC_MPDGHWST3_HW_DG_UP3_MASK
)

	)

27302 
	#MMDC_MPPDCMPR1_PDV1_MASK
 0xFFFFu

	)

27303 
	#MMDC_MPPDCMPR1_PDV1_SHIFT
 0

	)

27304 
	#MMDC_MPPDCMPR1_PDV1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPPDCMPR1_PDV1_SHIFT
))&
MMDC_MPPDCMPR1_PDV1_MASK
)

	)

27305 
	#MMDC_MPPDCMPR1_PDV2_MASK
 0xFFFF0000u

	)

27306 
	#MMDC_MPPDCMPR1_PDV2_SHIFT
 16

	)

27307 
	#MMDC_MPPDCMPR1_PDV2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPPDCMPR1_PDV2_SHIFT
))&
MMDC_MPPDCMPR1_PDV2_MASK
)

	)

27309 
	#MMDC_MPPDCMPR2_MPR_CMP_MASK
 0x1u

	)

27310 
	#MMDC_MPPDCMPR2_MPR_CMP_SHIFT
 0

	)

27311 
	#MMDC_MPPDCMPR2_MPR_FULL_CMP_MASK
 0x2u

	)

27312 
	#MMDC_MPPDCMPR2_MPR_FULL_CMP_SHIFT
 1

	)

27313 
	#MMDC_MPPDCMPR2_READ_LEVEL_PATTERN_MASK
 0x4u

	)

27314 
	#MMDC_MPPDCMPR2_READ_LEVEL_PATTERN_SHIFT
 2

	)

27315 
	#MMDC_MPPDCMPR2_CA_DL_ABS_OFFSET_MASK
 0x7F0000u

	)

27316 
	#MMDC_MPPDCMPR2_CA_DL_ABS_OFFSET_SHIFT
 16

	)

27317 
	#MMDC_MPPDCMPR2_CA_DL_ABS_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPPDCMPR2_CA_DL_ABS_OFFSET_SHIFT
))&
MMDC_MPPDCMPR2_CA_DL_ABS_OFFSET_MASK
)

	)

27318 
	#MMDC_MPPDCMPR2_PHY_CA_DL_UNIT_MASK
 0x7F000000u

	)

27319 
	#MMDC_MPPDCMPR2_PHY_CA_DL_UNIT_SHIFT
 24

	)

27320 
	#MMDC_MPPDCMPR2_PHY_CA_DL_UNIT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPPDCMPR2_PHY_CA_DL_UNIT_SHIFT
))&
MMDC_MPPDCMPR2_PHY_CA_DL_UNIT_MASK
)

	)

27322 
	#MMDC_MPSWDAR0_SW_DUMMY_WR_MASK
 0x1u

	)

27323 
	#MMDC_MPSWDAR0_SW_DUMMY_WR_SHIFT
 0

	)

27324 
	#MMDC_MPSWDAR0_SW_DUMMY_RD_MASK
 0x2u

	)

27325 
	#MMDC_MPSWDAR0_SW_DUMMY_RD_SHIFT
 1

	)

27326 
	#MMDC_MPSWDAR0_SW_DUM_CMP0_MASK
 0x4u

	)

27327 
	#MMDC_MPSWDAR0_SW_DUM_CMP0_SHIFT
 2

	)

27328 
	#MMDC_MPSWDAR0_SW_DUM_CMP1_MASK
 0x8u

	)

27329 
	#MMDC_MPSWDAR0_SW_DUM_CMP1_SHIFT
 3

	)

27330 
	#MMDC_MPSWDAR0_SW_DUM_CMP2_MASK
 0x10u

	)

27331 
	#MMDC_MPSWDAR0_SW_DUM_CMP2_SHIFT
 4

	)

27332 
	#MMDC_MPSWDAR0_SW_DUM_CMP3_MASK
 0x20u

	)

27333 
	#MMDC_MPSWDAR0_SW_DUM_CMP3_SHIFT
 5

	)

27335 
	#MMDC_MPSWDRDR0_DUM_RD0_MASK
 0xFFFFFFFFu

	)

27336 
	#MMDC_MPSWDRDR0_DUM_RD0_SHIFT
 0

	)

27337 
	#MMDC_MPSWDRDR0_DUM_RD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPSWDRDR0_DUM_RD0_SHIFT
))&
MMDC_MPSWDRDR0_DUM_RD0_MASK
)

	)

27339 
	#MMDC_MPSWDRDR1_DUM_RD1_MASK
 0xFFFFFFFFu

	)

27340 
	#MMDC_MPSWDRDR1_DUM_RD1_SHIFT
 0

	)

27341 
	#MMDC_MPSWDRDR1_DUM_RD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPSWDRDR1_DUM_RD1_SHIFT
))&
MMDC_MPSWDRDR1_DUM_RD1_MASK
)

	)

27343 
	#MMDC_MPSWDRDR2_DUM_RD2_MASK
 0xFFFFFFFFu

	)

27344 
	#MMDC_MPSWDRDR2_DUM_RD2_SHIFT
 0

	)

27345 
	#MMDC_MPSWDRDR2_DUM_RD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPSWDRDR2_DUM_RD2_SHIFT
))&
MMDC_MPSWDRDR2_DUM_RD2_MASK
)

	)

27347 
	#MMDC_MPSWDRDR3_DUM_RD3_MASK
 0xFFFFFFFFu

	)

27348 
	#MMDC_MPSWDRDR3_DUM_RD3_SHIFT
 0

	)

27349 
	#MMDC_MPSWDRDR3_DUM_RD3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPSWDRDR3_DUM_RD3_SHIFT
))&
MMDC_MPSWDRDR3_DUM_RD3_MASK
)

	)

27351 
	#MMDC_MPSWDRDR4_DUM_RD4_MASK
 0xFFFFFFFFu

	)

27352 
	#MMDC_MPSWDRDR4_DUM_RD4_SHIFT
 0

	)

27353 
	#MMDC_MPSWDRDR4_DUM_RD4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPSWDRDR4_DUM_RD4_SHIFT
))&
MMDC_MPSWDRDR4_DUM_RD4_MASK
)

	)

27355 
	#MMDC_MPSWDRDR5_DUM_RD5_MASK
 0xFFFFFFFFu

	)

27356 
	#MMDC_MPSWDRDR5_DUM_RD5_SHIFT
 0

	)

27357 
	#MMDC_MPSWDRDR5_DUM_RD5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPSWDRDR5_DUM_RD5_SHIFT
))&
MMDC_MPSWDRDR5_DUM_RD5_MASK
)

	)

27359 
	#MMDC_MPSWDRDR6_DUM_RD6_MASK
 0xFFFFFFFFu

	)

27360 
	#MMDC_MPSWDRDR6_DUM_RD6_SHIFT
 0

	)

27361 
	#MMDC_MPSWDRDR6_DUM_RD6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPSWDRDR6_DUM_RD6_SHIFT
))&
MMDC_MPSWDRDR6_DUM_RD6_MASK
)

	)

27363 
	#MMDC_MPSWDRDR7_DUM_RD7_MASK
 0xFFFFFFFFu

	)

27364 
	#MMDC_MPSWDRDR7_DUM_RD7_SHIFT
 0

	)

27365 
	#MMDC_MPSWDRDR7_DUM_RD7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPSWDRDR7_DUM_RD7_SHIFT
))&
MMDC_MPSWDRDR7_DUM_RD7_MASK
)

	)

27367 
	#MMDC_MPMUR0_MU_BYP_VAL_MASK
 0x3FFu

	)

27368 
	#MMDC_MPMUR0_MU_BYP_VAL_SHIFT
 0

	)

27369 
	#MMDC_MPMUR0_MU_BYP_VAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPMUR0_MU_BYP_VAL_SHIFT
))&
MMDC_MPMUR0_MU_BYP_VAL_MASK
)

	)

27370 
	#MMDC_MPMUR0_MU_BYP_EN_MASK
 0x400u

	)

27371 
	#MMDC_MPMUR0_MU_BYP_EN_SHIFT
 10

	)

27372 
	#MMDC_MPMUR0_FRC_MSR_MASK
 0x800u

	)

27373 
	#MMDC_MPMUR0_FRC_MSR_SHIFT
 11

	)

27374 
	#MMDC_MPMUR0_MU_UNIT_DEL_NUM_MASK
 0x3FF0000u

	)

27375 
	#MMDC_MPMUR0_MU_UNIT_DEL_NUM_SHIFT
 16

	)

27376 
	#MMDC_MPMUR0_MU_UNIT_DEL_NUM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPMUR0_MU_UNIT_DEL_NUM_SHIFT
))&
MMDC_MPMUR0_MU_UNIT_DEL_NUM_MASK
)

	)

27378 
	#MMDC_MPWRCADL_WR_CA0_DEL_MASK
 0x3u

	)

27379 
	#MMDC_MPWRCADL_WR_CA0_DEL_SHIFT
 0

	)

27380 
	#MMDC_MPWRCADL_WR_CA0_DEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRCADL_WR_CA0_DEL_SHIFT
))&
MMDC_MPWRCADL_WR_CA0_DEL_MASK
)

	)

27381 
	#MMDC_MPWRCADL_WR_CA1_DEL_MASK
 0xCu

	)

27382 
	#MMDC_MPWRCADL_WR_CA1_DEL_SHIFT
 2

	)

27383 
	#MMDC_MPWRCADL_WR_CA1_DEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRCADL_WR_CA1_DEL_SHIFT
))&
MMDC_MPWRCADL_WR_CA1_DEL_MASK
)

	)

27384 
	#MMDC_MPWRCADL_WR_CA2_DEL_MASK
 0x30u

	)

27385 
	#MMDC_MPWRCADL_WR_CA2_DEL_SHIFT
 4

	)

27386 
	#MMDC_MPWRCADL_WR_CA2_DEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRCADL_WR_CA2_DEL_SHIFT
))&
MMDC_MPWRCADL_WR_CA2_DEL_MASK
)

	)

27387 
	#MMDC_MPWRCADL_WR_CA3_DEL_MASK
 0xC0u

	)

27388 
	#MMDC_MPWRCADL_WR_CA3_DEL_SHIFT
 6

	)

27389 
	#MMDC_MPWRCADL_WR_CA3_DEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRCADL_WR_CA3_DEL_SHIFT
))&
MMDC_MPWRCADL_WR_CA3_DEL_MASK
)

	)

27390 
	#MMDC_MPWRCADL_WR_CA4_DEL_MASK
 0x300u

	)

27391 
	#MMDC_MPWRCADL_WR_CA4_DEL_SHIFT
 8

	)

27392 
	#MMDC_MPWRCADL_WR_CA4_DEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRCADL_WR_CA4_DEL_SHIFT
))&
MMDC_MPWRCADL_WR_CA4_DEL_MASK
)

	)

27393 
	#MMDC_MPWRCADL_WR_CA5_DEL_MASK
 0xC00u

	)

27394 
	#MMDC_MPWRCADL_WR_CA5_DEL_SHIFT
 10

	)

27395 
	#MMDC_MPWRCADL_WR_CA5_DEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRCADL_WR_CA5_DEL_SHIFT
))&
MMDC_MPWRCADL_WR_CA5_DEL_MASK
)

	)

27396 
	#MMDC_MPWRCADL_WR_CA6_DEL_MASK
 0x3000u

	)

27397 
	#MMDC_MPWRCADL_WR_CA6_DEL_SHIFT
 12

	)

27398 
	#MMDC_MPWRCADL_WR_CA6_DEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRCADL_WR_CA6_DEL_SHIFT
))&
MMDC_MPWRCADL_WR_CA6_DEL_MASK
)

	)

27399 
	#MMDC_MPWRCADL_WR_CA7_DEL_MASK
 0xC000u

	)

27400 
	#MMDC_MPWRCADL_WR_CA7_DEL_SHIFT
 14

	)

27401 
	#MMDC_MPWRCADL_WR_CA7_DEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRCADL_WR_CA7_DEL_SHIFT
))&
MMDC_MPWRCADL_WR_CA7_DEL_MASK
)

	)

27402 
	#MMDC_MPWRCADL_WR_CA8_DEL_MASK
 0x30000u

	)

27403 
	#MMDC_MPWRCADL_WR_CA8_DEL_SHIFT
 16

	)

27404 
	#MMDC_MPWRCADL_WR_CA8_DEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRCADL_WR_CA8_DEL_SHIFT
))&
MMDC_MPWRCADL_WR_CA8_DEL_MASK
)

	)

27405 
	#MMDC_MPWRCADL_WR_CA9_DEL_MASK
 0xC0000u

	)

27406 
	#MMDC_MPWRCADL_WR_CA9_DEL_SHIFT
 18

	)

27407 
	#MMDC_MPWRCADL_WR_CA9_DEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPWRCADL_WR_CA9_DEL_SHIFT
))&
MMDC_MPWRCADL_WR_CA9_DEL_MASK
)

	)

27409 
	#MMDC_MPDCCR_WR_DQS0_FT_DCC_MASK
 0x7u

	)

27410 
	#MMDC_MPDCCR_WR_DQS0_FT_DCC_SHIFT
 0

	)

27411 
	#MMDC_MPDCCR_WR_DQS0_FT_DCC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDCCR_WR_DQS0_FT_DCC_SHIFT
))&
MMDC_MPDCCR_WR_DQS0_FT_DCC_MASK
)

	)

27412 
	#MMDC_MPDCCR_WR_DQS1_FT_DCC_MASK
 0x38u

	)

27413 
	#MMDC_MPDCCR_WR_DQS1_FT_DCC_SHIFT
 3

	)

27414 
	#MMDC_MPDCCR_WR_DQS1_FT_DCC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDCCR_WR_DQS1_FT_DCC_SHIFT
))&
MMDC_MPDCCR_WR_DQS1_FT_DCC_MASK
)

	)

27415 
	#MMDC_MPDCCR_WR_DQS2_FT_DCC_MASK
 0x1C0u

	)

27416 
	#MMDC_MPDCCR_WR_DQS2_FT_DCC_SHIFT
 6

	)

27417 
	#MMDC_MPDCCR_WR_DQS2_FT_DCC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDCCR_WR_DQS2_FT_DCC_SHIFT
))&
MMDC_MPDCCR_WR_DQS2_FT_DCC_MASK
)

	)

27418 
	#MMDC_MPDCCR_WR_DQS3_FT_DCC_MASK
 0xE00u

	)

27419 
	#MMDC_MPDCCR_WR_DQS3_FT_DCC_SHIFT
 9

	)

27420 
	#MMDC_MPDCCR_WR_DQS3_FT_DCC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDCCR_WR_DQS3_FT_DCC_SHIFT
))&
MMDC_MPDCCR_WR_DQS3_FT_DCC_MASK
)

	)

27421 
	#MMDC_MPDCCR_CK_FT0_DCC_MASK
 0x7000u

	)

27422 
	#MMDC_MPDCCR_CK_FT0_DCC_SHIFT
 12

	)

27423 
	#MMDC_MPDCCR_CK_FT0_DCC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDCCR_CK_FT0_DCC_SHIFT
))&
MMDC_MPDCCR_CK_FT0_DCC_MASK
)

	)

27424 
	#MMDC_MPDCCR_CK_FT1_DCC_MASK
 0x70000u

	)

27425 
	#MMDC_MPDCCR_CK_FT1_DCC_SHIFT
 16

	)

27426 
	#MMDC_MPDCCR_CK_FT1_DCC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDCCR_CK_FT1_DCC_SHIFT
))&
MMDC_MPDCCR_CK_FT1_DCC_MASK
)

	)

27427 
	#MMDC_MPDCCR_RD_DQS0_FT_DCC_MASK
 0x380000u

	)

27428 
	#MMDC_MPDCCR_RD_DQS0_FT_DCC_SHIFT
 19

	)

27429 
	#MMDC_MPDCCR_RD_DQS0_FT_DCC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDCCR_RD_DQS0_FT_DCC_SHIFT
))&
MMDC_MPDCCR_RD_DQS0_FT_DCC_MASK
)

	)

27430 
	#MMDC_MPDCCR_RD_DQS1_FT_DCC_MASK
 0x1C00000u

	)

27431 
	#MMDC_MPDCCR_RD_DQS1_FT_DCC_SHIFT
 22

	)

27432 
	#MMDC_MPDCCR_RD_DQS1_FT_DCC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDCCR_RD_DQS1_FT_DCC_SHIFT
))&
MMDC_MPDCCR_RD_DQS1_FT_DCC_MASK
)

	)

27433 
	#MMDC_MPDCCR_RD_DQS2_FT_DCC_MASK
 0xE000000u

	)

27434 
	#MMDC_MPDCCR_RD_DQS2_FT_DCC_SHIFT
 25

	)

27435 
	#MMDC_MPDCCR_RD_DQS2_FT_DCC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDCCR_RD_DQS2_FT_DCC_SHIFT
))&
MMDC_MPDCCR_RD_DQS2_FT_DCC_MASK
)

	)

27436 
	#MMDC_MPDCCR_RD_DQS3_FT_DCC_MASK
 0x70000000u

	)

27437 
	#MMDC_MPDCCR_RD_DQS3_FT_DCC_SHIFT
 28

	)

27438 
	#MMDC_MPDCCR_RD_DQS3_FT_DCC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MMDC_MPDCCR_RD_DQS3_FT_DCC_SHIFT
))&
MMDC_MPDCCR_RD_DQS3_FT_DCC_MASK
)

	)

27446 
	#MMDC_BASE
 (0x421B0000u)

	)

27448 
	#MMDC
 ((
MMDC_Ty≥
 *)
MMDC_BASE
)

	)

27449 
	#MMDC_BASE_PTR
 (
MMDC
)

	)

27451 
	#MMDC_BASE_ADDRS
 { 
MMDC_BASE
 }

	)

27453 
	#MMDC_BASE_PTRS
 { 
MMDC
 }

	)

27466 
	#MMDC_MDCTL
 
	`MMDC_MDCTL_REG
(
MMDC_BASE_PTR
)

	)

27467 
	#MMDC_MDPDC
 
	`MMDC_MDPDC_REG
(
MMDC_BASE_PTR
)

	)

27468 
	#MMDC_MDOTC
 
	`MMDC_MDOTC_REG
(
MMDC_BASE_PTR
)

	)

27469 
	#MMDC_MDCFG0
 
	`MMDC_MDCFG0_REG
(
MMDC_BASE_PTR
)

	)

27470 
	#MMDC_MDCFG1
 
	`MMDC_MDCFG1_REG
(
MMDC_BASE_PTR
)

	)

27471 
	#MMDC_MDCFG2
 
	`MMDC_MDCFG2_REG
(
MMDC_BASE_PTR
)

	)

27472 
	#MMDC_MDMISC
 
	`MMDC_MDMISC_REG
(
MMDC_BASE_PTR
)

	)

27473 
	#MMDC_MDSCR
 
	`MMDC_MDSCR_REG
(
MMDC_BASE_PTR
)

	)

27474 
	#MMDC_MDREF
 
	`MMDC_MDREF_REG
(
MMDC_BASE_PTR
)

	)

27475 
	#MMDC_MDRWD
 
	`MMDC_MDRWD_REG
(
MMDC_BASE_PTR
)

	)

27476 
	#MMDC_MDOR
 
	`MMDC_MDOR_REG
(
MMDC_BASE_PTR
)

	)

27477 
	#MMDC_MDMRR
 
	`MMDC_MDMRR_REG
(
MMDC_BASE_PTR
)

	)

27478 
	#MMDC_MDCFG3LP
 
	`MMDC_MDCFG3LP_REG
(
MMDC_BASE_PTR
)

	)

27479 
	#MMDC_MDMR4
 
	`MMDC_MDMR4_REG
(
MMDC_BASE_PTR
)

	)

27480 
	#MMDC_MDASP
 
	`MMDC_MDASP_REG
(
MMDC_BASE_PTR
)

	)

27481 
	#MMDC_MAARCR
 
	`MMDC_MAARCR_REG
(
MMDC_BASE_PTR
)

	)

27482 
	#MMDC_MAPSR
 
	`MMDC_MAPSR_REG
(
MMDC_BASE_PTR
)

	)

27483 
	#MMDC_MAEXIDR0
 
	`MMDC_MAEXIDR0_REG
(
MMDC_BASE_PTR
)

	)

27484 
	#MMDC_MAEXIDR1
 
	`MMDC_MAEXIDR1_REG
(
MMDC_BASE_PTR
)

	)

27485 
	#MMDC_MADPCR0
 
	`MMDC_MADPCR0_REG
(
MMDC_BASE_PTR
)

	)

27486 
	#MMDC_MADPCR1
 
	`MMDC_MADPCR1_REG
(
MMDC_BASE_PTR
)

	)

27487 
	#MMDC_MADPSR0
 
	`MMDC_MADPSR0_REG
(
MMDC_BASE_PTR
)

	)

27488 
	#MMDC_MADPSR1
 
	`MMDC_MADPSR1_REG
(
MMDC_BASE_PTR
)

	)

27489 
	#MMDC_MADPSR2
 
	`MMDC_MADPSR2_REG
(
MMDC_BASE_PTR
)

	)

27490 
	#MMDC_MADPSR3
 
	`MMDC_MADPSR3_REG
(
MMDC_BASE_PTR
)

	)

27491 
	#MMDC_MADPSR4
 
	`MMDC_MADPSR4_REG
(
MMDC_BASE_PTR
)

	)

27492 
	#MMDC_MADPSR5
 
	`MMDC_MADPSR5_REG
(
MMDC_BASE_PTR
)

	)

27493 
	#MMDC_MASBS0
 
	`MMDC_MASBS0_REG
(
MMDC_BASE_PTR
)

	)

27494 
	#MMDC_MASBS1
 
	`MMDC_MASBS1_REG
(
MMDC_BASE_PTR
)

	)

27495 
	#MMDC_MAGENP
 
	`MMDC_MAGENP_REG
(
MMDC_BASE_PTR
)

	)

27496 
	#MMDC_MPZQHWCTRL
 
	`MMDC_MPZQHWCTRL_REG
(
MMDC_BASE_PTR
)

	)

27497 
	#MMDC_MPZQSWCTRL
 
	`MMDC_MPZQSWCTRL_REG
(
MMDC_BASE_PTR
)

	)

27498 
	#MMDC_MPWLGCR
 
	`MMDC_MPWLGCR_REG
(
MMDC_BASE_PTR
)

	)

27499 
	#MMDC_MPWLDECTRL0
 
	`MMDC_MPWLDECTRL0_REG
(
MMDC_BASE_PTR
)

	)

27500 
	#MMDC_MPWLDECTRL1
 
	`MMDC_MPWLDECTRL1_REG
(
MMDC_BASE_PTR
)

	)

27501 
	#MMDC_MPWLDLST
 
	`MMDC_MPWLDLST_REG
(
MMDC_BASE_PTR
)

	)

27502 
	#MMDC_MPODTCTRL
 
	`MMDC_MPODTCTRL_REG
(
MMDC_BASE_PTR
)

	)

27503 
	#MMDC_MPRDDQBY0DL
 
	`MMDC_MPRDDQBY0DL_REG
(
MMDC_BASE_PTR
)

	)

27504 
	#MMDC_MPRDDQBY1DL
 
	`MMDC_MPRDDQBY1DL_REG
(
MMDC_BASE_PTR
)

	)

27505 
	#MMDC_MPRDDQBY2DL
 
	`MMDC_MPRDDQBY2DL_REG
(
MMDC_BASE_PTR
)

	)

27506 
	#MMDC_MPRDDQBY3DL
 
	`MMDC_MPRDDQBY3DL_REG
(
MMDC_BASE_PTR
)

	)

27507 
	#MMDC_MPWRDQBY0DL
 
	`MMDC_MPWRDQBY0DL_REG
(
MMDC_BASE_PTR
)

	)

27508 
	#MMDC_MPWRDQBY1DL
 
	`MMDC_MPWRDQBY1DL_REG
(
MMDC_BASE_PTR
)

	)

27509 
	#MMDC_MPWRDQBY2DL
 
	`MMDC_MPWRDQBY2DL_REG
(
MMDC_BASE_PTR
)

	)

27510 
	#MMDC_MPWRDQBY3DL
 
	`MMDC_MPWRDQBY3DL_REG
(
MMDC_BASE_PTR
)

	)

27511 
	#MMDC_MPDGCTRL0
 
	`MMDC_MPDGCTRL0_REG
(
MMDC_BASE_PTR
)

	)

27512 
	#MMDC_MPDGCTRL1
 
	`MMDC_MPDGCTRL1_REG
(
MMDC_BASE_PTR
)

	)

27513 
	#MMDC_MPDGDLST0
 
	`MMDC_MPDGDLST0_REG
(
MMDC_BASE_PTR
)

	)

27514 
	#MMDC_MPRDDLCTL
 
	`MMDC_MPRDDLCTL_REG
(
MMDC_BASE_PTR
)

	)

27515 
	#MMDC_MPRDDLST
 
	`MMDC_MPRDDLST_REG
(
MMDC_BASE_PTR
)

	)

27516 
	#MMDC_MPWRDLCTL
 
	`MMDC_MPWRDLCTL_REG
(
MMDC_BASE_PTR
)

	)

27517 
	#MMDC_MPWRDLST
 
	`MMDC_MPWRDLST_REG
(
MMDC_BASE_PTR
)

	)

27518 
	#MMDC_MPSDCTRL
 
	`MMDC_MPSDCTRL_REG
(
MMDC_BASE_PTR
)

	)

27519 
	#MMDC_MPZQLP2CTL
 
	`MMDC_MPZQLP2CTL_REG
(
MMDC_BASE_PTR
)

	)

27520 
	#MMDC_MPRDDLHWCTL
 
	`MMDC_MPRDDLHWCTL_REG
(
MMDC_BASE_PTR
)

	)

27521 
	#MMDC_MPWRDLHWCTL
 
	`MMDC_MPWRDLHWCTL_REG
(
MMDC_BASE_PTR
)

	)

27522 
	#MMDC_MPRDDLHWST0
 
	`MMDC_MPRDDLHWST0_REG
(
MMDC_BASE_PTR
)

	)

27523 
	#MMDC_MPRDDLHWST1
 
	`MMDC_MPRDDLHWST1_REG
(
MMDC_BASE_PTR
)

	)

27524 
	#MMDC_MPWRDLHWST0
 
	`MMDC_MPWRDLHWST0_REG
(
MMDC_BASE_PTR
)

	)

27525 
	#MMDC_MPWRDLHWST1
 
	`MMDC_MPWRDLHWST1_REG
(
MMDC_BASE_PTR
)

	)

27526 
	#MMDC_MPWLHWERR
 
	`MMDC_MPWLHWERR_REG
(
MMDC_BASE_PTR
)

	)

27527 
	#MMDC_MPDGHWST0
 
	`MMDC_MPDGHWST0_REG
(
MMDC_BASE_PTR
)

	)

27528 
	#MMDC_MPDGHWST1
 
	`MMDC_MPDGHWST1_REG
(
MMDC_BASE_PTR
)

	)

27529 
	#MMDC_MPDGHWST2
 
	`MMDC_MPDGHWST2_REG
(
MMDC_BASE_PTR
)

	)

27530 
	#MMDC_MPDGHWST3
 
	`MMDC_MPDGHWST3_REG
(
MMDC_BASE_PTR
)

	)

27531 
	#MMDC_MPPDCMPR1
 
	`MMDC_MPPDCMPR1_REG
(
MMDC_BASE_PTR
)

	)

27532 
	#MMDC_MPPDCMPR2
 
	`MMDC_MPPDCMPR2_REG
(
MMDC_BASE_PTR
)

	)

27533 
	#MMDC_MPSWDAR0
 
	`MMDC_MPSWDAR0_REG
(
MMDC_BASE_PTR
)

	)

27534 
	#MMDC_MPSWDRDR0
 
	`MMDC_MPSWDRDR0_REG
(
MMDC_BASE_PTR
)

	)

27535 
	#MMDC_MPSWDRDR1
 
	`MMDC_MPSWDRDR1_REG
(
MMDC_BASE_PTR
)

	)

27536 
	#MMDC_MPSWDRDR2
 
	`MMDC_MPSWDRDR2_REG
(
MMDC_BASE_PTR
)

	)

27537 
	#MMDC_MPSWDRDR3
 
	`MMDC_MPSWDRDR3_REG
(
MMDC_BASE_PTR
)

	)

27538 
	#MMDC_MPSWDRDR4
 
	`MMDC_MPSWDRDR4_REG
(
MMDC_BASE_PTR
)

	)

27539 
	#MMDC_MPSWDRDR5
 
	`MMDC_MPSWDRDR5_REG
(
MMDC_BASE_PTR
)

	)

27540 
	#MMDC_MPSWDRDR6
 
	`MMDC_MPSWDRDR6_REG
(
MMDC_BASE_PTR
)

	)

27541 
	#MMDC_MPSWDRDR7
 
	`MMDC_MPSWDRDR7_REG
(
MMDC_BASE_PTR
)

	)

27542 
	#MMDC_MPMUR0
 
	`MMDC_MPMUR0_REG
(
MMDC_BASE_PTR
)

	)

27543 
	#MMDC_MPWRCADL
 
	`MMDC_MPWRCADL_REG
(
MMDC_BASE_PTR
)

	)

27544 
	#MMDC_MPDCCR
 
	`MMDC_MPDCCR_REG
(
MMDC_BASE_PTR
)

	)

27565 
__IO
 
uöt32_t
 
	mTR
[4];

27566 
__I
 
uöt32_t
 
	mRR
[4];

27567 
__IO
 
uöt32_t
 
	mSR
;

27568 
__IO
 
uöt32_t
 
	mCR
;

27569 } 
	tMU_Ty≥
, *
	tMU_MemM≠På
;

27581 
	#MU_TR_REG
(
ba£
,
ödex
Ë((ba£)->
TR
[ödex])

	)

27582 
	#MU_TR_COUNT
 4

	)

27583 
	#MU_RR_REG
(
ba£
,
ödex
Ë((ba£)->
RR
[ödex])

	)

27584 
	#MU_RR_COUNT
 4

	)

27585 
	#MU_SR_REG
(
ba£
Ë((ba£)->
SR
)

	)

27586 
	#MU_CR_REG
(
ba£
Ë((ba£)->
CR
)

	)

27602 
	#MU_TR_TR0_MASK
 0xFFFFFFFFu

	)

27603 
	#MU_TR_TR0_SHIFT
 0

	)

27604 
	#MU_TR_TR0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MU_TR_TR0_SHIFT
))&
MU_TR_TR0_MASK
)

	)

27606 
	#MU_RR_RR0_MASK
 0xFFFFFFFFu

	)

27607 
	#MU_RR_RR0_SHIFT
 0

	)

27608 
	#MU_RR_RR0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MU_RR_RR0_SHIFT
))&
MU_RR_RR0_MASK
)

	)

27610 
	#MU_SR_Fn_MASK
 0x7u

	)

27611 
	#MU_SR_Fn_SHIFT
 0

	)

27612 
	#MU_SR_Fn
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MU_SR_Fn_SHIFT
))&
MU_SR_Fn_MASK
)

	)

27613 
	#MU_SR_EP_MASK
 0x10u

	)

27614 
	#MU_SR_EP_SHIFT
 4

	)

27615 
	#MU_SR_PM_MASK
 0x60u

	)

27616 
	#MU_SR_PM_SHIFT
 5

	)

27617 
	#MU_SR_PM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MU_SR_PM_SHIFT
))&
MU_SR_PM_MASK
)

	)

27618 
	#MU_SR_RS_MASK
 0x80u

	)

27619 
	#MU_SR_RS_SHIFT
 7

	)

27620 
	#MU_SR_FUP_MASK
 0x100u

	)

27621 
	#MU_SR_FUP_SHIFT
 8

	)

27622 
	#MU_SR_TEn_MASK
 0xF00000u

	)

27623 
	#MU_SR_TEn_SHIFT
 20

	)

27624 
	#MU_SR_TEn
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MU_SR_TEn_SHIFT
))&
MU_SR_TEn_MASK
)

	)

27625 
	#MU_SR_RFn_MASK
 0xF000000u

	)

27626 
	#MU_SR_RFn_SHIFT
 24

	)

27627 
	#MU_SR_RFn
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MU_SR_RFn_SHIFT
))&
MU_SR_RFn_MASK
)

	)

27628 
	#MU_SR_GIPn_MASK
 0xF0000000u

	)

27629 
	#MU_SR_GIPn_SHIFT
 28

	)

27630 
	#MU_SR_GIPn
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MU_SR_GIPn_SHIFT
))&
MU_SR_GIPn_MASK
)

	)

27632 
	#MU_CR_Fn_MASK
 0x7u

	)

27633 
	#MU_CR_Fn_SHIFT
 0

	)

27634 
	#MU_CR_Fn
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MU_CR_Fn_SHIFT
))&
MU_CR_Fn_MASK
)

	)

27635 
	#MU_CR_GIRn_MASK
 0xF0000u

	)

27636 
	#MU_CR_GIRn_SHIFT
 16

	)

27637 
	#MU_CR_GIRn
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MU_CR_GIRn_SHIFT
))&
MU_CR_GIRn_MASK
)

	)

27638 
	#MU_CR_TIEn_MASK
 0xF00000u

	)

27639 
	#MU_CR_TIEn_SHIFT
 20

	)

27640 
	#MU_CR_TIEn
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MU_CR_TIEn_SHIFT
))&
MU_CR_TIEn_MASK
)

	)

27641 
	#MU_CR_RIEn_MASK
 0xF000000u

	)

27642 
	#MU_CR_RIEn_SHIFT
 24

	)

27643 
	#MU_CR_RIEn
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MU_CR_RIEn_SHIFT
))&
MU_CR_RIEn_MASK
)

	)

27644 
	#MU_CR_GIEn_MASK
 0xF0000000u

	)

27645 
	#MU_CR_GIEn_SHIFT
 28

	)

27646 
	#MU_CR_GIEn
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
MU_CR_GIEn_SHIFT
))&
MU_CR_GIEn_MASK
)

	)

27654 
	#MUB_BASE
 (0x4229C000u)

	)

27656 
	#MUB
 ((
MU_Ty≥
 *)
MUB_BASE
)

	)

27657 
	#MUB_BASE_PTR
 (
MUB
)

	)

27659 
	#MU_BASE_ADDRS
 { 
MUB_BASE
 }

	)

27661 
	#MU_BASE_PTRS
 { 
MUB
 }

	)

27663 
	#MU_IRQS
 { 
MU_M4_IRQn
 }

	)

27676 
	#MUB_TR0
 
	`MU_TR_REG
(
MUB_BASE_PTR
,0)

	)

27677 
	#MUB_TR1
 
	`MU_TR_REG
(
MUB_BASE_PTR
,1)

	)

27678 
	#MUB_TR2
 
	`MU_TR_REG
(
MUB_BASE_PTR
,2)

	)

27679 
	#MUB_TR3
 
	`MU_TR_REG
(
MUB_BASE_PTR
,3)

	)

27680 
	#MUB_RR0
 
	`MU_RR_REG
(
MUB_BASE_PTR
,0)

	)

27681 
	#MUB_RR1
 
	`MU_RR_REG
(
MUB_BASE_PTR
,1)

	)

27682 
	#MUB_RR2
 
	`MU_RR_REG
(
MUB_BASE_PTR
,2)

	)

27683 
	#MUB_RR3
 
	`MU_RR_REG
(
MUB_BASE_PTR
,3)

	)

27684 
	#MUB_SR
 
	`MU_SR_REG
(
MUB_BASE_PTR
)

	)

27685 
	#MUB_CR
 
	`MU_CR_REG
(
MUB_BASE_PTR
)

	)

27687 
	#MUB_TR
(
ödex
Ë
	`MU_TR_REG
(
MUB_BASE_PTR
,ödex)

	)

27688 
	#MUB_RR
(
ödex
Ë
	`MU_RR_REG
(
MUB_BASE_PTR
,ödex)

	)

27709 
__IO
 
uöt32_t
 
	mCTRL
;

27710 
__IO
 
uöt32_t
 
	mCTRL_SET
;

27711 
__IO
 
uöt32_t
 
	mCTRL_CLR
;

27712 
__IO
 
uöt32_t
 
	mCTRL_TOG
;

27713 
__IO
 
uöt32_t
 
	mTIMING
;

27714 
uöt8_t
 
	mRESERVED_0
[12];

27715 
__IO
 
uöt32_t
 
	mDATA
;

27716 
uöt8_t
 
	mRESERVED_1
[12];

27717 
__IO
 
uöt32_t
 
	mREAD_CTRL
;

27718 
uöt8_t
 
	mRESERVED_2
[12];

27719 
__IO
 
uöt32_t
 
	mREAD_FUSE_DATA
;

27720 
uöt8_t
 
	mRESERVED_3
[12];

27721 
__IO
 
uöt32_t
 
	mSW_STICKY
;

27722 
uöt8_t
 
	mRESERVED_4
[12];

27723 
__IO
 
uöt32_t
 
	mSCS
;

27724 
__IO
 
uöt32_t
 
	mSCS_SET
;

27725 
__IO
 
uöt32_t
 
	mSCS_CLR
;

27726 
__IO
 
uöt32_t
 
	mSCS_TOG
;

27727 
uöt8_t
 
	mRESERVED_5
[32];

27728 
__I
 
uöt32_t
 
	mVERSION
;

27729 
uöt8_t
 
	mRESERVED_6
[876];

27730 
__I
 
uöt32_t
 
	mLOCK
;

27731 
uöt8_t
 
	mRESERVED_7
[12];

27732 
__IO
 
uöt32_t
 
	mCFG0
;

27733 
uöt8_t
 
	mRESERVED_8
[12];

27734 
__IO
 
uöt32_t
 
	mCFG1
;

27735 
uöt8_t
 
	mRESERVED_9
[12];

27736 
__IO
 
uöt32_t
 
	mCFG2
;

27737 
uöt8_t
 
	mRESERVED_10
[12];

27738 
__IO
 
uöt32_t
 
	mCFG3
;

27739 
uöt8_t
 
	mRESERVED_11
[12];

27740 
__IO
 
uöt32_t
 
	mCFG4
;

27741 
uöt8_t
 
	mRESERVED_12
[12];

27742 
__IO
 
uöt32_t
 
	mCFG5
;

27743 
uöt8_t
 
	mRESERVED_13
[12];

27744 
__IO
 
uöt32_t
 
	mCFG6
;

27745 
uöt8_t
 
	mRESERVED_14
[12];

27746 
__IO
 
uöt32_t
 
	mMEM0
;

27747 
uöt8_t
 
	mRESERVED_15
[12];

27748 
__IO
 
uöt32_t
 
	mMEM1
;

27749 
uöt8_t
 
	mRESERVED_16
[12];

27750 
__IO
 
uöt32_t
 
	mMEM2
;

27751 
uöt8_t
 
	mRESERVED_17
[12];

27752 
__IO
 
uöt32_t
 
	mMEM3
;

27753 
uöt8_t
 
	mRESERVED_18
[12];

27754 
__IO
 
uöt32_t
 
	mMEM4
;

27755 
uöt8_t
 
	mRESERVED_19
[12];

27756 
__IO
 
uöt32_t
 
	mANA0
;

27757 
uöt8_t
 
	mRESERVED_20
[12];

27758 
__IO
 
uöt32_t
 
	mANA1
;

27759 
uöt8_t
 
	mRESERVED_21
[12];

27760 
__IO
 
uöt32_t
 
	mANA2
;

27761 
uöt8_t
 
	mRESERVED_22
[140];

27762 
__IO
 
uöt32_t
 
	mSRK0
;

27763 
uöt8_t
 
	mRESERVED_23
[12];

27764 
__IO
 
uöt32_t
 
	mSRK1
;

27765 
uöt8_t
 
	mRESERVED_24
[12];

27766 
__IO
 
uöt32_t
 
	mSRK2
;

27767 
uöt8_t
 
	mRESERVED_25
[12];

27768 
__IO
 
uöt32_t
 
	mSRK3
;

27769 
uöt8_t
 
	mRESERVED_26
[12];

27770 
__IO
 
uöt32_t
 
	mSRK4
;

27771 
uöt8_t
 
	mRESERVED_27
[12];

27772 
__IO
 
uöt32_t
 
	mSRK5
;

27773 
uöt8_t
 
	mRESERVED_28
[12];

27774 
__IO
 
uöt32_t
 
	mSRK6
;

27775 
uöt8_t
 
	mRESERVED_29
[12];

27776 
__IO
 
uöt32_t
 
	mSRK7
;

27777 
uöt8_t
 
	mRESERVED_30
[12];

27778 
__IO
 
uöt32_t
 
	mRESP0
;

27779 
uöt8_t
 
	mRESERVED_31
[12];

27780 
__IO
 
uöt32_t
 
	mHSJC_RESP1
;

27781 
uöt8_t
 
	mRESERVED_32
[12];

27782 
__IO
 
uöt32_t
 
	mMAC0
;

27783 
uöt8_t
 
	mRESERVED_33
[12];

27784 
__IO
 
uöt32_t
 
	mMAC1
;

27785 
uöt8_t
 
	mRESERVED_34
[12];

27786 
__IO
 
uöt32_t
 
	mMAC2
;

27787 
uöt8_t
 
	mRESERVED_35
[28];

27788 
__IO
 
uöt32_t
 
	mGP1
;

27789 
uöt8_t
 
	mRESERVED_36
[12];

27790 
__IO
 
uöt32_t
 
	mGP2
;

27791 
uöt8_t
 
	mRESERVED_37
[92];

27792 
__IO
 
uöt32_t
 
	mMISC_CONF
;

27793 
uöt8_t
 
	mRESERVED_38
[12];

27794 
__IO
 
uöt32_t
 
	mFIELD_RETURN
;

27795 
uöt8_t
 
	mRESERVED_39
[12];

27796 
__IO
 
uöt32_t
 
	mSRK_REVOKE
;

27797 
uöt8_t
 
	mRESERVED_40
[796];

27798 
__IO
 
uöt32_t
 
	mGP30
;

27799 
uöt8_t
 
	mRESERVED_41
[12];

27800 
__IO
 
uöt32_t
 
	mGP31
;

27801 
uöt8_t
 
	mRESERVED_42
[12];

27802 
__IO
 
uöt32_t
 
	mGP32
;

27803 
uöt8_t
 
	mRESERVED_43
[12];

27804 
__IO
 
uöt32_t
 
	mGP33
;

27805 
uöt8_t
 
	mRESERVED_44
[12];

27806 
__IO
 
uöt32_t
 
	mGP34
;

27807 
uöt8_t
 
	mRESERVED_45
[12];

27808 
__IO
 
uöt32_t
 
	mGP35
;

27809 
uöt8_t
 
	mRESERVED_46
[12];

27810 
__IO
 
uöt32_t
 
	mGP36
;

27811 } 
	tOCOTP_Ty≥
, *
	tOCOTP_MemM≠På
;

27823 
	#OCOTP_CTRL_REG
(
ba£
Ë((ba£)->
CTRL
)

	)

27824 
	#OCOTP_CTRL_SET_REG
(
ba£
Ë((ba£)->
CTRL_SET
)

	)

27825 
	#OCOTP_CTRL_CLR_REG
(
ba£
Ë((ba£)->
CTRL_CLR
)

	)

27826 
	#OCOTP_CTRL_TOG_REG
(
ba£
Ë((ba£)->
CTRL_TOG
)

	)

27827 
	#OCOTP_TIMING_REG
(
ba£
Ë((ba£)->
TIMING
)

	)

27828 
	#OCOTP_DATA_REG
(
ba£
Ë((ba£)->
DATA
)

	)

27829 
	#OCOTP_READ_CTRL_REG
(
ba£
Ë((ba£)->
READ_CTRL
)

	)

27830 
	#OCOTP_READ_FUSE_DATA_REG
(
ba£
Ë((ba£)->
READ_FUSE_DATA
)

	)

27831 
	#OCOTP_SW_STICKY_REG
(
ba£
Ë((ba£)->
SW_STICKY
)

	)

27832 
	#OCOTP_SCS_REG
(
ba£
Ë((ba£)->
SCS
)

	)

27833 
	#OCOTP_SCS_SET_REG
(
ba£
Ë((ba£)->
SCS_SET
)

	)

27834 
	#OCOTP_SCS_CLR_REG
(
ba£
Ë((ba£)->
SCS_CLR
)

	)

27835 
	#OCOTP_SCS_TOG_REG
(
ba£
Ë((ba£)->
SCS_TOG
)

	)

27836 
	#OCOTP_VERSION_REG
(
ba£
Ë((ba£)->
VERSION
)

	)

27837 
	#OCOTP_LOCK_REG
(
ba£
Ë((ba£)->
LOCK
)

	)

27838 
	#OCOTP_CFG0_REG
(
ba£
Ë((ba£)->
CFG0
)

	)

27839 
	#OCOTP_CFG1_REG
(
ba£
Ë((ba£)->
CFG1
)

	)

27840 
	#OCOTP_CFG2_REG
(
ba£
Ë((ba£)->
CFG2
)

	)

27841 
	#OCOTP_CFG3_REG
(
ba£
Ë((ba£)->
CFG3
)

	)

27842 
	#OCOTP_CFG4_REG
(
ba£
Ë((ba£)->
CFG4
)

	)

27843 
	#OCOTP_CFG5_REG
(
ba£
Ë((ba£)->
CFG5
)

	)

27844 
	#OCOTP_CFG6_REG
(
ba£
Ë((ba£)->
CFG6
)

	)

27845 
	#OCOTP_MEM0_REG
(
ba£
Ë((ba£)->
MEM0
)

	)

27846 
	#OCOTP_MEM1_REG
(
ba£
Ë((ba£)->
MEM1
)

	)

27847 
	#OCOTP_MEM2_REG
(
ba£
Ë((ba£)->
MEM2
)

	)

27848 
	#OCOTP_MEM3_REG
(
ba£
Ë((ba£)->
MEM3
)

	)

27849 
	#OCOTP_MEM4_REG
(
ba£
Ë((ba£)->
MEM4
)

	)

27850 
	#OCOTP_ANA0_REG
(
ba£
Ë((ba£)->
ANA0
)

	)

27851 
	#OCOTP_ANA1_REG
(
ba£
Ë((ba£)->
ANA1
)

	)

27852 
	#OCOTP_ANA2_REG
(
ba£
Ë((ba£)->
ANA2
)

	)

27853 
	#OCOTP_SRK0_REG
(
ba£
Ë((ba£)->
SRK0
)

	)

27854 
	#OCOTP_SRK1_REG
(
ba£
Ë((ba£)->
SRK1
)

	)

27855 
	#OCOTP_SRK2_REG
(
ba£
Ë((ba£)->
SRK2
)

	)

27856 
	#OCOTP_SRK3_REG
(
ba£
Ë((ba£)->
SRK3
)

	)

27857 
	#OCOTP_SRK4_REG
(
ba£
Ë((ba£)->
SRK4
)

	)

27858 
	#OCOTP_SRK5_REG
(
ba£
Ë((ba£)->
SRK5
)

	)

27859 
	#OCOTP_SRK6_REG
(
ba£
Ë((ba£)->
SRK6
)

	)

27860 
	#OCOTP_SRK7_REG
(
ba£
Ë((ba£)->
SRK7
)

	)

27861 
	#OCOTP_RESP0_REG
(
ba£
Ë((ba£)->
RESP0
)

	)

27862 
	#OCOTP_HSJC_RESP1_REG
(
ba£
Ë((ba£)->
HSJC_RESP1
)

	)

27863 
	#OCOTP_MAC0_REG
(
ba£
Ë((ba£)->
MAC0
)

	)

27864 
	#OCOTP_MAC1_REG
(
ba£
Ë((ba£)->
MAC1
)

	)

27865 
	#OCOTP_MAC2_REG
(
ba£
Ë((ba£)->
MAC2
)

	)

27866 
	#OCOTP_GP1_REG
(
ba£
Ë((ba£)->
GP1
)

	)

27867 
	#OCOTP_GP2_REG
(
ba£
Ë((ba£)->
GP2
)

	)

27868 
	#OCOTP_MISC_CONF_REG
(
ba£
Ë((ba£)->
MISC_CONF
)

	)

27869 
	#OCOTP_FIELD_RETURN_REG
(
ba£
Ë((ba£)->
FIELD_RETURN
)

	)

27870 
	#OCOTP_SRK_REVOKE_REG
(
ba£
Ë((ba£)->
SRK_REVOKE
)

	)

27871 
	#OCOTP_GP30_REG
(
ba£
Ë((ba£)->
GP30
)

	)

27872 
	#OCOTP_GP31_REG
(
ba£
Ë((ba£)->
GP31
)

	)

27873 
	#OCOTP_GP32_REG
(
ba£
Ë((ba£)->
GP32
)

	)

27874 
	#OCOTP_GP33_REG
(
ba£
Ë((ba£)->
GP33
)

	)

27875 
	#OCOTP_GP34_REG
(
ba£
Ë((ba£)->
GP34
)

	)

27876 
	#OCOTP_GP35_REG
(
ba£
Ë((ba£)->
GP35
)

	)

27877 
	#OCOTP_GP36_REG
(
ba£
Ë((ba£)->
GP36
)

	)

27893 
	#OCOTP_CTRL_ADDR_MASK
 0x7Fu

	)

27894 
	#OCOTP_CTRL_ADDR_SHIFT
 0

	)

27895 
	#OCOTP_CTRL_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_CTRL_ADDR_SHIFT
))&
OCOTP_CTRL_ADDR_MASK
)

	)

27896 
	#OCOTP_CTRL_BUSY_MASK
 0x100u

	)

27897 
	#OCOTP_CTRL_BUSY_SHIFT
 8

	)

27898 
	#OCOTP_CTRL_ERROR_MASK
 0x200u

	)

27899 
	#OCOTP_CTRL_ERROR_SHIFT
 9

	)

27900 
	#OCOTP_CTRL_RELOAD_SHADOWS_MASK
 0x400u

	)

27901 
	#OCOTP_CTRL_RELOAD_SHADOWS_SHIFT
 10

	)

27902 
	#OCOTP_CTRL_WR_UNLOCK_MASK
 0xFFFF0000u

	)

27903 
	#OCOTP_CTRL_WR_UNLOCK_SHIFT
 16

	)

27904 
	#OCOTP_CTRL_WR_UNLOCK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_CTRL_WR_UNLOCK_SHIFT
))&
OCOTP_CTRL_WR_UNLOCK_MASK
)

	)

27906 
	#OCOTP_CTRL_SET_ADDR_MASK
 0x7Fu

	)

27907 
	#OCOTP_CTRL_SET_ADDR_SHIFT
 0

	)

27908 
	#OCOTP_CTRL_SET_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_CTRL_SET_ADDR_SHIFT
))&
OCOTP_CTRL_SET_ADDR_MASK
)

	)

27909 
	#OCOTP_CTRL_SET_BUSY_MASK
 0x100u

	)

27910 
	#OCOTP_CTRL_SET_BUSY_SHIFT
 8

	)

27911 
	#OCOTP_CTRL_SET_ERROR_MASK
 0x200u

	)

27912 
	#OCOTP_CTRL_SET_ERROR_SHIFT
 9

	)

27913 
	#OCOTP_CTRL_SET_RELOAD_SHADOWS_MASK
 0x400u

	)

27914 
	#OCOTP_CTRL_SET_RELOAD_SHADOWS_SHIFT
 10

	)

27915 
	#OCOTP_CTRL_SET_WR_UNLOCK_MASK
 0xFFFF0000u

	)

27916 
	#OCOTP_CTRL_SET_WR_UNLOCK_SHIFT
 16

	)

27917 
	#OCOTP_CTRL_SET_WR_UNLOCK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_CTRL_SET_WR_UNLOCK_SHIFT
))&
OCOTP_CTRL_SET_WR_UNLOCK_MASK
)

	)

27919 
	#OCOTP_CTRL_CLR_ADDR_MASK
 0x7Fu

	)

27920 
	#OCOTP_CTRL_CLR_ADDR_SHIFT
 0

	)

27921 
	#OCOTP_CTRL_CLR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_CTRL_CLR_ADDR_SHIFT
))&
OCOTP_CTRL_CLR_ADDR_MASK
)

	)

27922 
	#OCOTP_CTRL_CLR_BUSY_MASK
 0x100u

	)

27923 
	#OCOTP_CTRL_CLR_BUSY_SHIFT
 8

	)

27924 
	#OCOTP_CTRL_CLR_ERROR_MASK
 0x200u

	)

27925 
	#OCOTP_CTRL_CLR_ERROR_SHIFT
 9

	)

27926 
	#OCOTP_CTRL_CLR_RELOAD_SHADOWS_MASK
 0x400u

	)

27927 
	#OCOTP_CTRL_CLR_RELOAD_SHADOWS_SHIFT
 10

	)

27928 
	#OCOTP_CTRL_CLR_WR_UNLOCK_MASK
 0xFFFF0000u

	)

27929 
	#OCOTP_CTRL_CLR_WR_UNLOCK_SHIFT
 16

	)

27930 
	#OCOTP_CTRL_CLR_WR_UNLOCK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_CTRL_CLR_WR_UNLOCK_SHIFT
))&
OCOTP_CTRL_CLR_WR_UNLOCK_MASK
)

	)

27932 
	#OCOTP_CTRL_TOG_ADDR_MASK
 0x7Fu

	)

27933 
	#OCOTP_CTRL_TOG_ADDR_SHIFT
 0

	)

27934 
	#OCOTP_CTRL_TOG_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_CTRL_TOG_ADDR_SHIFT
))&
OCOTP_CTRL_TOG_ADDR_MASK
)

	)

27935 
	#OCOTP_CTRL_TOG_BUSY_MASK
 0x100u

	)

27936 
	#OCOTP_CTRL_TOG_BUSY_SHIFT
 8

	)

27937 
	#OCOTP_CTRL_TOG_ERROR_MASK
 0x200u

	)

27938 
	#OCOTP_CTRL_TOG_ERROR_SHIFT
 9

	)

27939 
	#OCOTP_CTRL_TOG_RELOAD_SHADOWS_MASK
 0x400u

	)

27940 
	#OCOTP_CTRL_TOG_RELOAD_SHADOWS_SHIFT
 10

	)

27941 
	#OCOTP_CTRL_TOG_WR_UNLOCK_MASK
 0xFFFF0000u

	)

27942 
	#OCOTP_CTRL_TOG_WR_UNLOCK_SHIFT
 16

	)

27943 
	#OCOTP_CTRL_TOG_WR_UNLOCK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_CTRL_TOG_WR_UNLOCK_SHIFT
))&
OCOTP_CTRL_TOG_WR_UNLOCK_MASK
)

	)

27945 
	#OCOTP_TIMING_STROBE_PROG_MASK
 0xFFFu

	)

27946 
	#OCOTP_TIMING_STROBE_PROG_SHIFT
 0

	)

27947 
	#OCOTP_TIMING_STROBE_PROG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_TIMING_STROBE_PROG_SHIFT
))&
OCOTP_TIMING_STROBE_PROG_MASK
)

	)

27948 
	#OCOTP_TIMING_RELAX_MASK
 0xF000u

	)

27949 
	#OCOTP_TIMING_RELAX_SHIFT
 12

	)

27950 
	#OCOTP_TIMING_RELAX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_TIMING_RELAX_SHIFT
))&
OCOTP_TIMING_RELAX_MASK
)

	)

27951 
	#OCOTP_TIMING_STROBE_READ_MASK
 0x3F0000u

	)

27952 
	#OCOTP_TIMING_STROBE_READ_SHIFT
 16

	)

27953 
	#OCOTP_TIMING_STROBE_READ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_TIMING_STROBE_READ_SHIFT
))&
OCOTP_TIMING_STROBE_READ_MASK
)

	)

27954 
	#OCOTP_TIMING_WAIT_MASK
 0xFC00000u

	)

27955 
	#OCOTP_TIMING_WAIT_SHIFT
 22

	)

27956 
	#OCOTP_TIMING_WAIT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_TIMING_WAIT_SHIFT
))&
OCOTP_TIMING_WAIT_MASK
)

	)

27958 
	#OCOTP_DATA_DATA_MASK
 0xFFFFFFFFu

	)

27959 
	#OCOTP_DATA_DATA_SHIFT
 0

	)

27960 
	#OCOTP_DATA_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_DATA_DATA_SHIFT
))&
OCOTP_DATA_DATA_MASK
)

	)

27962 
	#OCOTP_READ_CTRL_READ_FUSE_MASK
 0x1u

	)

27963 
	#OCOTP_READ_CTRL_READ_FUSE_SHIFT
 0

	)

27965 
	#OCOTP_READ_FUSE_DATA_DATA_MASK
 0xFFFFFFFFu

	)

27966 
	#OCOTP_READ_FUSE_DATA_DATA_SHIFT
 0

	)

27967 
	#OCOTP_READ_FUSE_DATA_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_READ_FUSE_DATA_DATA_SHIFT
))&
OCOTP_READ_FUSE_DATA_DATA_MASK
)

	)

27969 
	#OCOTP_SW_STICKY_BLOCK_DTCP_KEY_MASK
 0x1u

	)

27970 
	#OCOTP_SW_STICKY_BLOCK_DTCP_KEY_SHIFT
 0

	)

27971 
	#OCOTP_SW_STICKY_SRK_REVOKE_LOCK_MASK
 0x2u

	)

27972 
	#OCOTP_SW_STICKY_SRK_REVOKE_LOCK_SHIFT
 1

	)

27973 
	#OCOTP_SW_STICKY_FIELD_RETURN_LOCK_MASK
 0x4u

	)

27974 
	#OCOTP_SW_STICKY_FIELD_RETURN_LOCK_SHIFT
 2

	)

27975 
	#OCOTP_SW_STICKY_BLOCK_ROM_PART_MASK
 0x8u

	)

27976 
	#OCOTP_SW_STICKY_BLOCK_ROM_PART_SHIFT
 3

	)

27977 
	#OCOTP_SW_STICKY_JTAG_BLOCK_RELEASE_MASK
 0x10u

	)

27978 
	#OCOTP_SW_STICKY_JTAG_BLOCK_RELEASE_SHIFT
 4

	)

27980 
	#OCOTP_SCS_HAB_JDE_MASK
 0x1u

	)

27981 
	#OCOTP_SCS_HAB_JDE_SHIFT
 0

	)

27982 
	#OCOTP_SCS_SPARE_MASK
 0x7FFFFFFEu

	)

27983 
	#OCOTP_SCS_SPARE_SHIFT
 1

	)

27984 
	#OCOTP_SCS_SPARE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_SCS_SPARE_SHIFT
))&
OCOTP_SCS_SPARE_MASK
)

	)

27985 
	#OCOTP_SCS_LOCK_MASK
 0x80000000u

	)

27986 
	#OCOTP_SCS_LOCK_SHIFT
 31

	)

27988 
	#OCOTP_SCS_SET_HAB_JDE_MASK
 0x1u

	)

27989 
	#OCOTP_SCS_SET_HAB_JDE_SHIFT
 0

	)

27990 
	#OCOTP_SCS_SET_SPARE_MASK
 0x7FFFFFFEu

	)

27991 
	#OCOTP_SCS_SET_SPARE_SHIFT
 1

	)

27992 
	#OCOTP_SCS_SET_SPARE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_SCS_SET_SPARE_SHIFT
))&
OCOTP_SCS_SET_SPARE_MASK
)

	)

27993 
	#OCOTP_SCS_SET_LOCK_MASK
 0x80000000u

	)

27994 
	#OCOTP_SCS_SET_LOCK_SHIFT
 31

	)

27996 
	#OCOTP_SCS_CLR_HAB_JDE_MASK
 0x1u

	)

27997 
	#OCOTP_SCS_CLR_HAB_JDE_SHIFT
 0

	)

27998 
	#OCOTP_SCS_CLR_SPARE_MASK
 0x7FFFFFFEu

	)

27999 
	#OCOTP_SCS_CLR_SPARE_SHIFT
 1

	)

28000 
	#OCOTP_SCS_CLR_SPARE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_SCS_CLR_SPARE_SHIFT
))&
OCOTP_SCS_CLR_SPARE_MASK
)

	)

28001 
	#OCOTP_SCS_CLR_LOCK_MASK
 0x80000000u

	)

28002 
	#OCOTP_SCS_CLR_LOCK_SHIFT
 31

	)

28004 
	#OCOTP_SCS_TOG_HAB_JDE_MASK
 0x1u

	)

28005 
	#OCOTP_SCS_TOG_HAB_JDE_SHIFT
 0

	)

28006 
	#OCOTP_SCS_TOG_SPARE_MASK
 0x7FFFFFFEu

	)

28007 
	#OCOTP_SCS_TOG_SPARE_SHIFT
 1

	)

28008 
	#OCOTP_SCS_TOG_SPARE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_SCS_TOG_SPARE_SHIFT
))&
OCOTP_SCS_TOG_SPARE_MASK
)

	)

28009 
	#OCOTP_SCS_TOG_LOCK_MASK
 0x80000000u

	)

28010 
	#OCOTP_SCS_TOG_LOCK_SHIFT
 31

	)

28012 
	#OCOTP_VERSION_STEP_MASK
 0xFFFFu

	)

28013 
	#OCOTP_VERSION_STEP_SHIFT
 0

	)

28014 
	#OCOTP_VERSION_STEP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_VERSION_STEP_SHIFT
))&
OCOTP_VERSION_STEP_MASK
)

	)

28015 
	#OCOTP_VERSION_MINOR_MASK
 0xFF0000u

	)

28016 
	#OCOTP_VERSION_MINOR_SHIFT
 16

	)

28017 
	#OCOTP_VERSION_MINOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_VERSION_MINOR_SHIFT
))&
OCOTP_VERSION_MINOR_MASK
)

	)

28018 
	#OCOTP_VERSION_MAJOR_MASK
 0xFF000000u

	)

28019 
	#OCOTP_VERSION_MAJOR_SHIFT
 24

	)

28020 
	#OCOTP_VERSION_MAJOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_VERSION_MAJOR_SHIFT
))&
OCOTP_VERSION_MAJOR_MASK
)

	)

28022 
	#OCOTP_LOCK_TESTER_MASK
 0x3u

	)

28023 
	#OCOTP_LOCK_TESTER_SHIFT
 0

	)

28024 
	#OCOTP_LOCK_TESTER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_LOCK_TESTER_SHIFT
))&
OCOTP_LOCK_TESTER_MASK
)

	)

28025 
	#OCOTP_LOCK_BOOT_CFG_MASK
 0xCu

	)

28026 
	#OCOTP_LOCK_BOOT_CFG_SHIFT
 2

	)

28027 
	#OCOTP_LOCK_BOOT_CFG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_LOCK_BOOT_CFG_SHIFT
))&
OCOTP_LOCK_BOOT_CFG_MASK
)

	)

28028 
	#OCOTP_LOCK_MEM_TRIM_MASK
 0x30u

	)

28029 
	#OCOTP_LOCK_MEM_TRIM_SHIFT
 4

	)

28030 
	#OCOTP_LOCK_MEM_TRIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_LOCK_MEM_TRIM_SHIFT
))&
OCOTP_LOCK_MEM_TRIM_MASK
)

	)

28031 
	#OCOTP_LOCK_SJC_RESP_MASK
 0x40u

	)

28032 
	#OCOTP_LOCK_SJC_RESP_SHIFT
 6

	)

28033 
	#OCOTP_LOCK_MAC_ADDR_MASK
 0x300u

	)

28034 
	#OCOTP_LOCK_MAC_ADDR_SHIFT
 8

	)

28035 
	#OCOTP_LOCK_MAC_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_LOCK_MAC_ADDR_SHIFT
))&
OCOTP_LOCK_MAC_ADDR_MASK
)

	)

28036 
	#OCOTP_LOCK_GP1_MASK
 0xC00u

	)

28037 
	#OCOTP_LOCK_GP1_SHIFT
 10

	)

28038 
	#OCOTP_LOCK_GP1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_LOCK_GP1_SHIFT
))&
OCOTP_LOCK_GP1_MASK
)

	)

28039 
	#OCOTP_LOCK_GP2_MASK
 0x3000u

	)

28040 
	#OCOTP_LOCK_GP2_SHIFT
 12

	)

28041 
	#OCOTP_LOCK_GP2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_LOCK_GP2_SHIFT
))&
OCOTP_LOCK_GP2_MASK
)

	)

28042 
	#OCOTP_LOCK_SRK_MASK
 0x4000u

	)

28043 
	#OCOTP_LOCK_SRK_SHIFT
 14

	)

28044 
	#OCOTP_LOCK_ANALOG_MASK
 0xC0000u

	)

28045 
	#OCOTP_LOCK_ANALOG_SHIFT
 18

	)

28046 
	#OCOTP_LOCK_ANALOG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_LOCK_ANALOG_SHIFT
))&
OCOTP_LOCK_ANALOG_MASK
)

	)

28047 
	#OCOTP_LOCK_MISC_CONF_MASK
 0x400000u

	)

28048 
	#OCOTP_LOCK_MISC_CONF_SHIFT
 22

	)

28049 
	#OCOTP_LOCK_GP3_MASK
 0xC0000000u

	)

28050 
	#OCOTP_LOCK_GP3_SHIFT
 30

	)

28051 
	#OCOTP_LOCK_GP3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_LOCK_GP3_SHIFT
))&
OCOTP_LOCK_GP3_MASK
)

	)

28053 
	#OCOTP_CFG0_BITS_MASK
 0xFFFFFFFFu

	)

28054 
	#OCOTP_CFG0_BITS_SHIFT
 0

	)

28055 
	#OCOTP_CFG0_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_CFG0_BITS_SHIFT
))&
OCOTP_CFG0_BITS_MASK
)

	)

28057 
	#OCOTP_CFG1_BITS_MASK
 0xFFFFFFFFu

	)

28058 
	#OCOTP_CFG1_BITS_SHIFT
 0

	)

28059 
	#OCOTP_CFG1_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_CFG1_BITS_SHIFT
))&
OCOTP_CFG1_BITS_MASK
)

	)

28061 
	#OCOTP_CFG2_BITS_MASK
 0xFFFFFFFFu

	)

28062 
	#OCOTP_CFG2_BITS_SHIFT
 0

	)

28063 
	#OCOTP_CFG2_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_CFG2_BITS_SHIFT
))&
OCOTP_CFG2_BITS_MASK
)

	)

28065 
	#OCOTP_CFG3_BITS_MASK
 0xFFFFFFFFu

	)

28066 
	#OCOTP_CFG3_BITS_SHIFT
 0

	)

28067 
	#OCOTP_CFG3_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_CFG3_BITS_SHIFT
))&
OCOTP_CFG3_BITS_MASK
)

	)

28069 
	#OCOTP_CFG4_BITS_MASK
 0xFFFFFFFFu

	)

28070 
	#OCOTP_CFG4_BITS_SHIFT
 0

	)

28071 
	#OCOTP_CFG4_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_CFG4_BITS_SHIFT
))&
OCOTP_CFG4_BITS_MASK
)

	)

28073 
	#OCOTP_CFG5_BITS_MASK
 0xFFFFFFFFu

	)

28074 
	#OCOTP_CFG5_BITS_SHIFT
 0

	)

28075 
	#OCOTP_CFG5_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_CFG5_BITS_SHIFT
))&
OCOTP_CFG5_BITS_MASK
)

	)

28077 
	#OCOTP_CFG6_BITS_MASK
 0xFFFFFFFFu

	)

28078 
	#OCOTP_CFG6_BITS_SHIFT
 0

	)

28079 
	#OCOTP_CFG6_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_CFG6_BITS_SHIFT
))&
OCOTP_CFG6_BITS_MASK
)

	)

28081 
	#OCOTP_MEM0_BITS_MASK
 0xFFFFFFFFu

	)

28082 
	#OCOTP_MEM0_BITS_SHIFT
 0

	)

28083 
	#OCOTP_MEM0_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_MEM0_BITS_SHIFT
))&
OCOTP_MEM0_BITS_MASK
)

	)

28085 
	#OCOTP_MEM1_BITS_MASK
 0xFFFFFFFFu

	)

28086 
	#OCOTP_MEM1_BITS_SHIFT
 0

	)

28087 
	#OCOTP_MEM1_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_MEM1_BITS_SHIFT
))&
OCOTP_MEM1_BITS_MASK
)

	)

28089 
	#OCOTP_MEM2_BITS_MASK
 0xFFFFFFFFu

	)

28090 
	#OCOTP_MEM2_BITS_SHIFT
 0

	)

28091 
	#OCOTP_MEM2_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_MEM2_BITS_SHIFT
))&
OCOTP_MEM2_BITS_MASK
)

	)

28093 
	#OCOTP_MEM3_BITS_MASK
 0xFFFFFFFFu

	)

28094 
	#OCOTP_MEM3_BITS_SHIFT
 0

	)

28095 
	#OCOTP_MEM3_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_MEM3_BITS_SHIFT
))&
OCOTP_MEM3_BITS_MASK
)

	)

28097 
	#OCOTP_MEM4_BITS_MASK
 0xFFFFFFFFu

	)

28098 
	#OCOTP_MEM4_BITS_SHIFT
 0

	)

28099 
	#OCOTP_MEM4_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_MEM4_BITS_SHIFT
))&
OCOTP_MEM4_BITS_MASK
)

	)

28101 
	#OCOTP_ANA0_BITS_MASK
 0xFFFFFFFFu

	)

28102 
	#OCOTP_ANA0_BITS_SHIFT
 0

	)

28103 
	#OCOTP_ANA0_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_ANA0_BITS_SHIFT
))&
OCOTP_ANA0_BITS_MASK
)

	)

28105 
	#OCOTP_ANA1_BITS_MASK
 0xFFFFFFFFu

	)

28106 
	#OCOTP_ANA1_BITS_SHIFT
 0

	)

28107 
	#OCOTP_ANA1_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_ANA1_BITS_SHIFT
))&
OCOTP_ANA1_BITS_MASK
)

	)

28109 
	#OCOTP_ANA2_BITS_MASK
 0xFFFFFFFFu

	)

28110 
	#OCOTP_ANA2_BITS_SHIFT
 0

	)

28111 
	#OCOTP_ANA2_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_ANA2_BITS_SHIFT
))&
OCOTP_ANA2_BITS_MASK
)

	)

28113 
	#OCOTP_SRK0_BITS_MASK
 0xFFFFFFFFu

	)

28114 
	#OCOTP_SRK0_BITS_SHIFT
 0

	)

28115 
	#OCOTP_SRK0_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_SRK0_BITS_SHIFT
))&
OCOTP_SRK0_BITS_MASK
)

	)

28117 
	#OCOTP_SRK1_BITS_MASK
 0xFFFFFFFFu

	)

28118 
	#OCOTP_SRK1_BITS_SHIFT
 0

	)

28119 
	#OCOTP_SRK1_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_SRK1_BITS_SHIFT
))&
OCOTP_SRK1_BITS_MASK
)

	)

28121 
	#OCOTP_SRK2_BITS_MASK
 0xFFFFFFFFu

	)

28122 
	#OCOTP_SRK2_BITS_SHIFT
 0

	)

28123 
	#OCOTP_SRK2_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_SRK2_BITS_SHIFT
))&
OCOTP_SRK2_BITS_MASK
)

	)

28125 
	#OCOTP_SRK3_BITS_MASK
 0xFFFFFFFFu

	)

28126 
	#OCOTP_SRK3_BITS_SHIFT
 0

	)

28127 
	#OCOTP_SRK3_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_SRK3_BITS_SHIFT
))&
OCOTP_SRK3_BITS_MASK
)

	)

28129 
	#OCOTP_SRK4_BITS_MASK
 0xFFFFFFFFu

	)

28130 
	#OCOTP_SRK4_BITS_SHIFT
 0

	)

28131 
	#OCOTP_SRK4_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_SRK4_BITS_SHIFT
))&
OCOTP_SRK4_BITS_MASK
)

	)

28133 
	#OCOTP_SRK5_BITS_MASK
 0xFFFFFFFFu

	)

28134 
	#OCOTP_SRK5_BITS_SHIFT
 0

	)

28135 
	#OCOTP_SRK5_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_SRK5_BITS_SHIFT
))&
OCOTP_SRK5_BITS_MASK
)

	)

28137 
	#OCOTP_SRK6_BITS_MASK
 0xFFFFFFFFu

	)

28138 
	#OCOTP_SRK6_BITS_SHIFT
 0

	)

28139 
	#OCOTP_SRK6_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_SRK6_BITS_SHIFT
))&
OCOTP_SRK6_BITS_MASK
)

	)

28141 
	#OCOTP_SRK7_BITS_MASK
 0xFFFFFFFFu

	)

28142 
	#OCOTP_SRK7_BITS_SHIFT
 0

	)

28143 
	#OCOTP_SRK7_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_SRK7_BITS_SHIFT
))&
OCOTP_SRK7_BITS_MASK
)

	)

28145 
	#OCOTP_RESP0_BITS_MASK
 0xFFFFFFFFu

	)

28146 
	#OCOTP_RESP0_BITS_SHIFT
 0

	)

28147 
	#OCOTP_RESP0_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_RESP0_BITS_SHIFT
))&
OCOTP_RESP0_BITS_MASK
)

	)

28149 
	#OCOTP_HSJC_RESP1_BITS_MASK
 0xFFFFFFFFu

	)

28150 
	#OCOTP_HSJC_RESP1_BITS_SHIFT
 0

	)

28151 
	#OCOTP_HSJC_RESP1_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_HSJC_RESP1_BITS_SHIFT
))&
OCOTP_HSJC_RESP1_BITS_MASK
)

	)

28153 
	#OCOTP_MAC0_BITS_MASK
 0xFFFFFFFFu

	)

28154 
	#OCOTP_MAC0_BITS_SHIFT
 0

	)

28155 
	#OCOTP_MAC0_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_MAC0_BITS_SHIFT
))&
OCOTP_MAC0_BITS_MASK
)

	)

28157 
	#OCOTP_MAC1_BITS_MASK
 0xFFFFFFFFu

	)

28158 
	#OCOTP_MAC1_BITS_SHIFT
 0

	)

28159 
	#OCOTP_MAC1_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_MAC1_BITS_SHIFT
))&
OCOTP_MAC1_BITS_MASK
)

	)

28161 
	#OCOTP_MAC2_BITS_MASK
 0xFFFFFFFFu

	)

28162 
	#OCOTP_MAC2_BITS_SHIFT
 0

	)

28163 
	#OCOTP_MAC2_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_MAC2_BITS_SHIFT
))&
OCOTP_MAC2_BITS_MASK
)

	)

28165 
	#OCOTP_GP1_BITS_MASK
 0xFFFFFFFFu

	)

28166 
	#OCOTP_GP1_BITS_SHIFT
 0

	)

28167 
	#OCOTP_GP1_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_GP1_BITS_SHIFT
))&
OCOTP_GP1_BITS_MASK
)

	)

28169 
	#OCOTP_GP2_BITS_MASK
 0xFFFFFFFFu

	)

28170 
	#OCOTP_GP2_BITS_SHIFT
 0

	)

28171 
	#OCOTP_GP2_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_GP2_BITS_SHIFT
))&
OCOTP_GP2_BITS_MASK
)

	)

28173 
	#OCOTP_MISC_CONF_BITS_MASK
 0xFFFFFFFFu

	)

28174 
	#OCOTP_MISC_CONF_BITS_SHIFT
 0

	)

28175 
	#OCOTP_MISC_CONF_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_MISC_CONF_BITS_SHIFT
))&
OCOTP_MISC_CONF_BITS_MASK
)

	)

28177 
	#OCOTP_FIELD_RETURN_BITS_MASK
 0xFFFFFFFFu

	)

28178 
	#OCOTP_FIELD_RETURN_BITS_SHIFT
 0

	)

28179 
	#OCOTP_FIELD_RETURN_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_FIELD_RETURN_BITS_SHIFT
))&
OCOTP_FIELD_RETURN_BITS_MASK
)

	)

28181 
	#OCOTP_SRK_REVOKE_BITS_MASK
 0xFFFFFFFFu

	)

28182 
	#OCOTP_SRK_REVOKE_BITS_SHIFT
 0

	)

28183 
	#OCOTP_SRK_REVOKE_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_SRK_REVOKE_BITS_SHIFT
))&
OCOTP_SRK_REVOKE_BITS_MASK
)

	)

28185 
	#OCOTP_GP30_BITS_MASK
 0xFFFFFFFFu

	)

28186 
	#OCOTP_GP30_BITS_SHIFT
 0

	)

28187 
	#OCOTP_GP30_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_GP30_BITS_SHIFT
))&
OCOTP_GP30_BITS_MASK
)

	)

28189 
	#OCOTP_GP31_BITS_MASK
 0xFFFFFFFFu

	)

28190 
	#OCOTP_GP31_BITS_SHIFT
 0

	)

28191 
	#OCOTP_GP31_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_GP31_BITS_SHIFT
))&
OCOTP_GP31_BITS_MASK
)

	)

28193 
	#OCOTP_GP32_BITS_MASK
 0xFFFFFFFFu

	)

28194 
	#OCOTP_GP32_BITS_SHIFT
 0

	)

28195 
	#OCOTP_GP32_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_GP32_BITS_SHIFT
))&
OCOTP_GP32_BITS_MASK
)

	)

28197 
	#OCOTP_GP33_BITS_MASK
 0xFFFFFFFFu

	)

28198 
	#OCOTP_GP33_BITS_SHIFT
 0

	)

28199 
	#OCOTP_GP33_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_GP33_BITS_SHIFT
))&
OCOTP_GP33_BITS_MASK
)

	)

28201 
	#OCOTP_GP34_BITS_MASK
 0xFFFFFFFFu

	)

28202 
	#OCOTP_GP34_BITS_SHIFT
 0

	)

28203 
	#OCOTP_GP34_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_GP34_BITS_SHIFT
))&
OCOTP_GP34_BITS_MASK
)

	)

28205 
	#OCOTP_GP35_BITS_MASK
 0xFFFFFFFFu

	)

28206 
	#OCOTP_GP35_BITS_SHIFT
 0

	)

28207 
	#OCOTP_GP35_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_GP35_BITS_SHIFT
))&
OCOTP_GP35_BITS_MASK
)

	)

28209 
	#OCOTP_GP36_BITS_MASK
 0xFFFFFFFFu

	)

28210 
	#OCOTP_GP36_BITS_SHIFT
 0

	)

28211 
	#OCOTP_GP36_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
OCOTP_GP36_BITS_SHIFT
))&
OCOTP_GP36_BITS_MASK
)

	)

28219 
	#OCOTP_BASE
 (0x421BC000u)

	)

28221 
	#OCOTP
 ((
OCOTP_Ty≥
 *)
OCOTP_BASE
)

	)

28222 
	#OCOTP_BASE_PTR
 (
OCOTP
)

	)

28224 
	#OCOTP_BASE_ADDRS
 { 
OCOTP_BASE
 }

	)

28226 
	#OCOTP_BASE_PTRS
 { 
OCOTP
 }

	)

28239 
	#OCOTP_CTRL
 
	`OCOTP_CTRL_REG
(
OCOTP_BASE_PTR
)

	)

28240 
	#OCOTP_CTRL_SET
 
	`OCOTP_CTRL_SET_REG
(
OCOTP_BASE_PTR
)

	)

28241 
	#OCOTP_CTRL_CLR
 
	`OCOTP_CTRL_CLR_REG
(
OCOTP_BASE_PTR
)

	)

28242 
	#OCOTP_CTRL_TOG
 
	`OCOTP_CTRL_TOG_REG
(
OCOTP_BASE_PTR
)

	)

28243 
	#OCOTP_TIMING
 
	`OCOTP_TIMING_REG
(
OCOTP_BASE_PTR
)

	)

28244 
	#OCOTP_DATA
 
	`OCOTP_DATA_REG
(
OCOTP_BASE_PTR
)

	)

28245 
	#OCOTP_READ_CTRL
 
	`OCOTP_READ_CTRL_REG
(
OCOTP_BASE_PTR
)

	)

28246 
	#OCOTP_READ_FUSE_DATA
 
	`OCOTP_READ_FUSE_DATA_REG
(
OCOTP_BASE_PTR
)

	)

28247 
	#OCOTP_SW_STICKY
 
	`OCOTP_SW_STICKY_REG
(
OCOTP_BASE_PTR
)

	)

28248 
	#OCOTP_SCS
 
	`OCOTP_SCS_REG
(
OCOTP_BASE_PTR
)

	)

28249 
	#OCOTP_SCS_SET
 
	`OCOTP_SCS_SET_REG
(
OCOTP_BASE_PTR
)

	)

28250 
	#OCOTP_SCS_CLR
 
	`OCOTP_SCS_CLR_REG
(
OCOTP_BASE_PTR
)

	)

28251 
	#OCOTP_SCS_TOG
 
	`OCOTP_SCS_TOG_REG
(
OCOTP_BASE_PTR
)

	)

28252 
	#OCOTP_VERSION
 
	`OCOTP_VERSION_REG
(
OCOTP_BASE_PTR
)

	)

28253 
	#OCOTP_LOCK
 
	`OCOTP_LOCK_REG
(
OCOTP_BASE_PTR
)

	)

28254 
	#OCOTP_CFG0
 
	`OCOTP_CFG0_REG
(
OCOTP_BASE_PTR
)

	)

28255 
	#OCOTP_CFG1
 
	`OCOTP_CFG1_REG
(
OCOTP_BASE_PTR
)

	)

28256 
	#OCOTP_CFG2
 
	`OCOTP_CFG2_REG
(
OCOTP_BASE_PTR
)

	)

28257 
	#OCOTP_CFG3
 
	`OCOTP_CFG3_REG
(
OCOTP_BASE_PTR
)

	)

28258 
	#OCOTP_CFG4
 
	`OCOTP_CFG4_REG
(
OCOTP_BASE_PTR
)

	)

28259 
	#OCOTP_CFG5
 
	`OCOTP_CFG5_REG
(
OCOTP_BASE_PTR
)

	)

28260 
	#OCOTP_CFG6
 
	`OCOTP_CFG6_REG
(
OCOTP_BASE_PTR
)

	)

28261 
	#OCOTP_MEM0
 
	`OCOTP_MEM0_REG
(
OCOTP_BASE_PTR
)

	)

28262 
	#OCOTP_MEM1
 
	`OCOTP_MEM1_REG
(
OCOTP_BASE_PTR
)

	)

28263 
	#OCOTP_MEM2
 
	`OCOTP_MEM2_REG
(
OCOTP_BASE_PTR
)

	)

28264 
	#OCOTP_MEM3
 
	`OCOTP_MEM3_REG
(
OCOTP_BASE_PTR
)

	)

28265 
	#OCOTP_MEM4
 
	`OCOTP_MEM4_REG
(
OCOTP_BASE_PTR
)

	)

28266 
	#OCOTP_ANA0
 
	`OCOTP_ANA0_REG
(
OCOTP_BASE_PTR
)

	)

28267 
	#OCOTP_ANA1
 
	`OCOTP_ANA1_REG
(
OCOTP_BASE_PTR
)

	)

28268 
	#OCOTP_ANA2
 
	`OCOTP_ANA2_REG
(
OCOTP_BASE_PTR
)

	)

28269 
	#OCOTP_SRK0
 
	`OCOTP_SRK0_REG
(
OCOTP_BASE_PTR
)

	)

28270 
	#OCOTP_SRK1
 
	`OCOTP_SRK1_REG
(
OCOTP_BASE_PTR
)

	)

28271 
	#OCOTP_SRK2
 
	`OCOTP_SRK2_REG
(
OCOTP_BASE_PTR
)

	)

28272 
	#OCOTP_SRK3
 
	`OCOTP_SRK3_REG
(
OCOTP_BASE_PTR
)

	)

28273 
	#OCOTP_SRK4
 
	`OCOTP_SRK4_REG
(
OCOTP_BASE_PTR
)

	)

28274 
	#OCOTP_SRK5
 
	`OCOTP_SRK5_REG
(
OCOTP_BASE_PTR
)

	)

28275 
	#OCOTP_SRK6
 
	`OCOTP_SRK6_REG
(
OCOTP_BASE_PTR
)

	)

28276 
	#OCOTP_SRK7
 
	`OCOTP_SRK7_REG
(
OCOTP_BASE_PTR
)

	)

28277 
	#OCOTP_RESP0
 
	`OCOTP_RESP0_REG
(
OCOTP_BASE_PTR
)

	)

28278 
	#OCOTP_HSJC_RESP1
 
	`OCOTP_HSJC_RESP1_REG
(
OCOTP_BASE_PTR
)

	)

28279 
	#OCOTP_MAC0
 
	`OCOTP_MAC0_REG
(
OCOTP_BASE_PTR
)

	)

28280 
	#OCOTP_MAC1
 
	`OCOTP_MAC1_REG
(
OCOTP_BASE_PTR
)

	)

28281 
	#OCOTP_MAC2
 
	`OCOTP_MAC2_REG
(
OCOTP_BASE_PTR
)

	)

28282 
	#OCOTP_GP1
 
	`OCOTP_GP1_REG
(
OCOTP_BASE_PTR
)

	)

28283 
	#OCOTP_GP2
 
	`OCOTP_GP2_REG
(
OCOTP_BASE_PTR
)

	)

28284 
	#OCOTP_MISC_CONF
 
	`OCOTP_MISC_CONF_REG
(
OCOTP_BASE_PTR
)

	)

28285 
	#OCOTP_FIELD_RETURN
 
	`OCOTP_FIELD_RETURN_REG
(
OCOTP_BASE_PTR
)

	)

28286 
	#OCOTP_SRK_REVOKE
 
	`OCOTP_SRK_REVOKE_REG
(
OCOTP_BASE_PTR
)

	)

28287 
	#OCOTP_GP30
 
	`OCOTP_GP30_REG
(
OCOTP_BASE_PTR
)

	)

28288 
	#OCOTP_GP31
 
	`OCOTP_GP31_REG
(
OCOTP_BASE_PTR
)

	)

28289 
	#OCOTP_GP32
 
	`OCOTP_GP32_REG
(
OCOTP_BASE_PTR
)

	)

28290 
	#OCOTP_GP33
 
	`OCOTP_GP33_REG
(
OCOTP_BASE_PTR
)

	)

28291 
	#OCOTP_GP34
 
	`OCOTP_GP34_REG
(
OCOTP_BASE_PTR
)

	)

28292 
	#OCOTP_GP35
 
	`OCOTP_GP35_REG
(
OCOTP_BASE_PTR
)

	)

28293 
	#OCOTP_GP36
 
	`OCOTP_GP36_REG
(
OCOTP_BASE_PTR
)

	)

28314 
uöt8_t
 
	mRESERVED_0
[512];

28315 
__IO
 
uöt32_t
 
	mPCIE_PHY_CTRL
;

28316 
__IO
 
uöt32_t
 
	mPCIE_PHY_PUPSCR
;

28317 
__IO
 
uöt32_t
 
	mPCIE_PHY_PDNSCR
;

28318 
__IO
 
uöt32_t
 
	mPCIE_PHY_SR
;

28319 
uöt8_t
 
	mRESERVED_1
[16];

28320 
__IO
 
uöt32_t
 
	mMEGA_CTRL
;

28321 
__IO
 
uöt32_t
 
	mMEGA_PUPSCR
;

28322 
__IO
 
uöt32_t
 
	mMEGA_PDNSCR
;

28323 
__IO
 
uöt32_t
 
	mMEGA_SR
;

28324 
uöt8_t
 
	mRESERVED_2
[16];

28325 
__IO
 
uöt32_t
 
	mDISPLAY_CTRL
;

28326 
__IO
 
uöt32_t
 
	mDISPLAY_PUPSCR
;

28327 
__IO
 
uöt32_t
 
	mDISPLAY_PDNSCR
;

28328 
__IO
 
uöt32_t
 
	mDISPLAY_SR
;

28329 
uöt8_t
 
	mRESERVED_3
[16];

28330 
__IO
 
uöt32_t
 
	mGPU_CTRL
;

28331 
__IO
 
uöt32_t
 
	mGPU_PUPSCR
;

28332 
__IO
 
uöt32_t
 
	mGPU_PDNSCR
;

28333 
__IO
 
uöt32_t
 
	mGPU_SR
;

28334 
uöt8_t
 
	mRESERVED_4
[48];

28335 
__IO
 
uöt32_t
 
	mCPU_CTRL
;

28336 
__IO
 
uöt32_t
 
	mCPU_PUPSCR
;

28337 
__IO
 
uöt32_t
 
	mCPU_PDNSCR
;

28338 
__IO
 
uöt32_t
 
	mCPU_SR
;

28339 } 
	tPGC_Ty≥
, *
	tPGC_MemM≠På
;

28351 
	#PGC_PCIE_PHY_CTRL_REG
(
ba£
Ë((ba£)->
PCIE_PHY_CTRL
)

	)

28352 
	#PGC_PCIE_PHY_PUPSCR_REG
(
ba£
Ë((ba£)->
PCIE_PHY_PUPSCR
)

	)

28353 
	#PGC_PCIE_PHY_PDNSCR_REG
(
ba£
Ë((ba£)->
PCIE_PHY_PDNSCR
)

	)

28354 
	#PGC_PCIE_PHY_SR_REG
(
ba£
Ë((ba£)->
PCIE_PHY_SR
)

	)

28355 
	#PGC_MEGA_CTRL_REG
(
ba£
Ë((ba£)->
MEGA_CTRL
)

	)

28356 
	#PGC_MEGA_PUPSCR_REG
(
ba£
Ë((ba£)->
MEGA_PUPSCR
)

	)

28357 
	#PGC_MEGA_PDNSCR_REG
(
ba£
Ë((ba£)->
MEGA_PDNSCR
)

	)

28358 
	#PGC_MEGA_SR_REG
(
ba£
Ë((ba£)->
MEGA_SR
)

	)

28359 
	#PGC_DISPLAY_CTRL_REG
(
ba£
Ë((ba£)->
DISPLAY_CTRL
)

	)

28360 
	#PGC_DISPLAY_PUPSCR_REG
(
ba£
Ë((ba£)->
DISPLAY_PUPSCR
)

	)

28361 
	#PGC_DISPLAY_PDNSCR_REG
(
ba£
Ë((ba£)->
DISPLAY_PDNSCR
)

	)

28362 
	#PGC_DISPLAY_SR_REG
(
ba£
Ë((ba£)->
DISPLAY_SR
)

	)

28363 
	#PGC_GPU_CTRL_REG
(
ba£
Ë((ba£)->
GPU_CTRL
)

	)

28364 
	#PGC_GPU_PUPSCR_REG
(
ba£
Ë((ba£)->
GPU_PUPSCR
)

	)

28365 
	#PGC_GPU_PDNSCR_REG
(
ba£
Ë((ba£)->
GPU_PDNSCR
)

	)

28366 
	#PGC_GPU_SR_REG
(
ba£
Ë((ba£)->
GPU_SR
)

	)

28367 
	#PGC_CPU_CTRL_REG
(
ba£
Ë((ba£)->
CPU_CTRL
)

	)

28368 
	#PGC_CPU_PUPSCR_REG
(
ba£
Ë((ba£)->
CPU_PUPSCR
)

	)

28369 
	#PGC_CPU_PDNSCR_REG
(
ba£
Ë((ba£)->
CPU_PDNSCR
)

	)

28370 
	#PGC_CPU_SR_REG
(
ba£
Ë((ba£)->
CPU_SR
)

	)

28386 
	#PGC_PCIE_PHY_CTRL_PCR_MASK
 0x1u

	)

28387 
	#PGC_PCIE_PHY_CTRL_PCR_SHIFT
 0

	)

28389 
	#PGC_PCIE_PHY_PUPSCR_SW_MASK
 0x3Fu

	)

28390 
	#PGC_PCIE_PHY_PUPSCR_SW_SHIFT
 0

	)

28391 
	#PGC_PCIE_PHY_PUPSCR_SW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_PCIE_PHY_PUPSCR_SW_SHIFT
))&
PGC_PCIE_PHY_PUPSCR_SW_MASK
)

	)

28392 
	#PGC_PCIE_PHY_PUPSCR_SW2ISO_MASK
 0x3F00u

	)

28393 
	#PGC_PCIE_PHY_PUPSCR_SW2ISO_SHIFT
 8

	)

28394 
	#PGC_PCIE_PHY_PUPSCR_SW2ISO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_PCIE_PHY_PUPSCR_SW2ISO_SHIFT
))&
PGC_PCIE_PHY_PUPSCR_SW2ISO_MASK
)

	)

28396 
	#PGC_PCIE_PHY_PDNSCR_ISO_MASK
 0x3Fu

	)

28397 
	#PGC_PCIE_PHY_PDNSCR_ISO_SHIFT
 0

	)

28398 
	#PGC_PCIE_PHY_PDNSCR_ISO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_PCIE_PHY_PDNSCR_ISO_SHIFT
))&
PGC_PCIE_PHY_PDNSCR_ISO_MASK
)

	)

28399 
	#PGC_PCIE_PHY_PDNSCR_ISO2SW_MASK
 0x3F00u

	)

28400 
	#PGC_PCIE_PHY_PDNSCR_ISO2SW_SHIFT
 8

	)

28401 
	#PGC_PCIE_PHY_PDNSCR_ISO2SW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_PCIE_PHY_PDNSCR_ISO2SW_SHIFT
))&
PGC_PCIE_PHY_PDNSCR_ISO2SW_MASK
)

	)

28403 
	#PGC_PCIE_PHY_SR_PSR_MASK
 0x1u

	)

28404 
	#PGC_PCIE_PHY_SR_PSR_SHIFT
 0

	)

28406 
	#PGC_MEGA_CTRL_PCR_MASK
 0x1u

	)

28407 
	#PGC_MEGA_CTRL_PCR_SHIFT
 0

	)

28409 
	#PGC_MEGA_PUPSCR_SW_MASK
 0x3Fu

	)

28410 
	#PGC_MEGA_PUPSCR_SW_SHIFT
 0

	)

28411 
	#PGC_MEGA_PUPSCR_SW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_MEGA_PUPSCR_SW_SHIFT
))&
PGC_MEGA_PUPSCR_SW_MASK
)

	)

28412 
	#PGC_MEGA_PUPSCR_SW2ISO_MASK
 0x3F00u

	)

28413 
	#PGC_MEGA_PUPSCR_SW2ISO_SHIFT
 8

	)

28414 
	#PGC_MEGA_PUPSCR_SW2ISO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_MEGA_PUPSCR_SW2ISO_SHIFT
))&
PGC_MEGA_PUPSCR_SW2ISO_MASK
)

	)

28416 
	#PGC_MEGA_PDNSCR_ISO_MASK
 0x3Fu

	)

28417 
	#PGC_MEGA_PDNSCR_ISO_SHIFT
 0

	)

28418 
	#PGC_MEGA_PDNSCR_ISO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_MEGA_PDNSCR_ISO_SHIFT
))&
PGC_MEGA_PDNSCR_ISO_MASK
)

	)

28419 
	#PGC_MEGA_PDNSCR_ISO2SW_MASK
 0x3F00u

	)

28420 
	#PGC_MEGA_PDNSCR_ISO2SW_SHIFT
 8

	)

28421 
	#PGC_MEGA_PDNSCR_ISO2SW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_MEGA_PDNSCR_ISO2SW_SHIFT
))&
PGC_MEGA_PDNSCR_ISO2SW_MASK
)

	)

28423 
	#PGC_MEGA_SR_PSR_MASK
 0x1u

	)

28424 
	#PGC_MEGA_SR_PSR_SHIFT
 0

	)

28426 
	#PGC_DISPLAY_CTRL_PCR_MASK
 0x1u

	)

28427 
	#PGC_DISPLAY_CTRL_PCR_SHIFT
 0

	)

28429 
	#PGC_DISPLAY_PUPSCR_SW_MASK
 0x3Fu

	)

28430 
	#PGC_DISPLAY_PUPSCR_SW_SHIFT
 0

	)

28431 
	#PGC_DISPLAY_PUPSCR_SW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_DISPLAY_PUPSCR_SW_SHIFT
))&
PGC_DISPLAY_PUPSCR_SW_MASK
)

	)

28432 
	#PGC_DISPLAY_PUPSCR_SW2ISO_MASK
 0x3F00u

	)

28433 
	#PGC_DISPLAY_PUPSCR_SW2ISO_SHIFT
 8

	)

28434 
	#PGC_DISPLAY_PUPSCR_SW2ISO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_DISPLAY_PUPSCR_SW2ISO_SHIFT
))&
PGC_DISPLAY_PUPSCR_SW2ISO_MASK
)

	)

28436 
	#PGC_DISPLAY_PDNSCR_ISO_MASK
 0x3Fu

	)

28437 
	#PGC_DISPLAY_PDNSCR_ISO_SHIFT
 0

	)

28438 
	#PGC_DISPLAY_PDNSCR_ISO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_DISPLAY_PDNSCR_ISO_SHIFT
))&
PGC_DISPLAY_PDNSCR_ISO_MASK
)

	)

28439 
	#PGC_DISPLAY_PDNSCR_ISO2SW_MASK
 0x3F00u

	)

28440 
	#PGC_DISPLAY_PDNSCR_ISO2SW_SHIFT
 8

	)

28441 
	#PGC_DISPLAY_PDNSCR_ISO2SW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_DISPLAY_PDNSCR_ISO2SW_SHIFT
))&
PGC_DISPLAY_PDNSCR_ISO2SW_MASK
)

	)

28443 
	#PGC_DISPLAY_SR_PSR_MASK
 0x1u

	)

28444 
	#PGC_DISPLAY_SR_PSR_SHIFT
 0

	)

28446 
	#PGC_GPU_CTRL_PCR_MASK
 0x1u

	)

28447 
	#PGC_GPU_CTRL_PCR_SHIFT
 0

	)

28449 
	#PGC_GPU_PUPSCR_SW_MASK
 0x3Fu

	)

28450 
	#PGC_GPU_PUPSCR_SW_SHIFT
 0

	)

28451 
	#PGC_GPU_PUPSCR_SW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_GPU_PUPSCR_SW_SHIFT
))&
PGC_GPU_PUPSCR_SW_MASK
)

	)

28452 
	#PGC_GPU_PUPSCR_SW2ISO_MASK
 0x3F00u

	)

28453 
	#PGC_GPU_PUPSCR_SW2ISO_SHIFT
 8

	)

28454 
	#PGC_GPU_PUPSCR_SW2ISO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_GPU_PUPSCR_SW2ISO_SHIFT
))&
PGC_GPU_PUPSCR_SW2ISO_MASK
)

	)

28456 
	#PGC_GPU_PDNSCR_ISO_MASK
 0x3Fu

	)

28457 
	#PGC_GPU_PDNSCR_ISO_SHIFT
 0

	)

28458 
	#PGC_GPU_PDNSCR_ISO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_GPU_PDNSCR_ISO_SHIFT
))&
PGC_GPU_PDNSCR_ISO_MASK
)

	)

28459 
	#PGC_GPU_PDNSCR_ISO2SW_MASK
 0x3F00u

	)

28460 
	#PGC_GPU_PDNSCR_ISO2SW_SHIFT
 8

	)

28461 
	#PGC_GPU_PDNSCR_ISO2SW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_GPU_PDNSCR_ISO2SW_SHIFT
))&
PGC_GPU_PDNSCR_ISO2SW_MASK
)

	)

28463 
	#PGC_GPU_SR_PSR_MASK
 0x1u

	)

28464 
	#PGC_GPU_SR_PSR_SHIFT
 0

	)

28466 
	#PGC_CPU_CTRL_PCR_MASK
 0x1u

	)

28467 
	#PGC_CPU_CTRL_PCR_SHIFT
 0

	)

28469 
	#PGC_CPU_PUPSCR_SW_MASK
 0x3Fu

	)

28470 
	#PGC_CPU_PUPSCR_SW_SHIFT
 0

	)

28471 
	#PGC_CPU_PUPSCR_SW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_CPU_PUPSCR_SW_SHIFT
))&
PGC_CPU_PUPSCR_SW_MASK
)

	)

28472 
	#PGC_CPU_PUPSCR_SW2ISO_MASK
 0x3F00u

	)

28473 
	#PGC_CPU_PUPSCR_SW2ISO_SHIFT
 8

	)

28474 
	#PGC_CPU_PUPSCR_SW2ISO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_CPU_PUPSCR_SW2ISO_SHIFT
))&
PGC_CPU_PUPSCR_SW2ISO_MASK
)

	)

28476 
	#PGC_CPU_PDNSCR_ISO_MASK
 0x3Fu

	)

28477 
	#PGC_CPU_PDNSCR_ISO_SHIFT
 0

	)

28478 
	#PGC_CPU_PDNSCR_ISO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_CPU_PDNSCR_ISO_SHIFT
))&
PGC_CPU_PDNSCR_ISO_MASK
)

	)

28479 
	#PGC_CPU_PDNSCR_ISO2SW_MASK
 0x3F00u

	)

28480 
	#PGC_CPU_PDNSCR_ISO2SW_SHIFT
 8

	)

28481 
	#PGC_CPU_PDNSCR_ISO2SW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PGC_CPU_PDNSCR_ISO2SW_SHIFT
))&
PGC_CPU_PDNSCR_ISO2SW_MASK
)

	)

28483 
	#PGC_CPU_SR_PSR_MASK
 0x1u

	)

28484 
	#PGC_CPU_SR_PSR_SHIFT
 0

	)

28492 
	#PGC_ARM_BASE
 (0x420DC040u)

	)

28494 
	#PGC_ARM
 ((
PGC_Ty≥
 *)
PGC_ARM_BASE
)

	)

28495 
	#PGC_ARM_BASE_PTR
 (
PGC_ARM
)

	)

28497 
	#PGC_GPU_BASE
 (0x420DC000u)

	)

28499 
	#PGC_GPU
 ((
PGC_Ty≥
 *)
PGC_GPU_BASE
)

	)

28500 
	#PGC_GPU_BASE_PTR
 (
PGC_GPU
)

	)

28502 
	#PGC_BASE_ADDRS
 { 
PGC_ARM_BASE
, 
PGC_GPU_BASE
 }

	)

28504 
	#PGC_BASE_PTRS
 { 
PGC_ARM
, 
PGC_GPU
 }

	)

28517 
	#PGC_ARM_PCIE_PHY_CTRL
 
	`PGC_PCIE_PHY_CTRL_REG
(
PGC_ARM_BASE_PTR
)

	)

28518 
	#PGC_ARM_PCIE_PHY_PUPSCR
 
	`PGC_PCIE_PHY_PUPSCR_REG
(
PGC_ARM_BASE_PTR
)

	)

28519 
	#PGC_ARM_PCIE_PHY_PDNSCR
 
	`PGC_PCIE_PHY_PDNSCR_REG
(
PGC_ARM_BASE_PTR
)

	)

28520 
	#PGC_ARM_PCIE_PHY_SR
 
	`PGC_PCIE_PHY_SR_REG
(
PGC_ARM_BASE_PTR
)

	)

28521 
	#PGC_ARM_MEGA_CTRL
 
	`PGC_MEGA_CTRL_REG
(
PGC_ARM_BASE_PTR
)

	)

28522 
	#PGC_ARM_MEGA_PUPSCR
 
	`PGC_MEGA_PUPSCR_REG
(
PGC_ARM_BASE_PTR
)

	)

28523 
	#PGC_ARM_MEGA_PDNSCR
 
	`PGC_MEGA_PDNSCR_REG
(
PGC_ARM_BASE_PTR
)

	)

28524 
	#PGC_ARM_MEGA_SR
 
	`PGC_MEGA_SR_REG
(
PGC_ARM_BASE_PTR
)

	)

28525 
	#PGC_ARM_DISPLAY_CTRL
 
	`PGC_DISPLAY_CTRL_REG
(
PGC_ARM_BASE_PTR
)

	)

28526 
	#PGC_ARM_DISPLAY_PUPSCR
 
	`PGC_DISPLAY_PUPSCR_REG
(
PGC_ARM_BASE_PTR
)

	)

28527 
	#PGC_ARM_DISPLAY_PDNSCR
 
	`PGC_DISPLAY_PDNSCR_REG
(
PGC_ARM_BASE_PTR
)

	)

28528 
	#PGC_ARM_DISPLAY_SR
 
	`PGC_DISPLAY_SR_REG
(
PGC_ARM_BASE_PTR
)

	)

28529 
	#PGC_ARM_GPU_CTRL
 
	`PGC_GPU_CTRL_REG
(
PGC_ARM_BASE_PTR
)

	)

28530 
	#PGC_ARM_GPU_PUPSCR
 
	`PGC_GPU_PUPSCR_REG
(
PGC_ARM_BASE_PTR
)

	)

28531 
	#PGC_ARM_GPU_PDNSCR
 
	`PGC_GPU_PDNSCR_REG
(
PGC_ARM_BASE_PTR
)

	)

28532 
	#PGC_ARM_GPU_SR
 
	`PGC_GPU_SR_REG
(
PGC_ARM_BASE_PTR
)

	)

28533 
	#PGC_ARM_CPU_CTRL
 
	`PGC_CPU_CTRL_REG
(
PGC_ARM_BASE_PTR
)

	)

28534 
	#PGC_ARM_CPU_PUPSCR
 
	`PGC_CPU_PUPSCR_REG
(
PGC_ARM_BASE_PTR
)

	)

28535 
	#PGC_ARM_CPU_PDNSCR
 
	`PGC_CPU_PDNSCR_REG
(
PGC_ARM_BASE_PTR
)

	)

28536 
	#PGC_ARM_CPU_SR
 
	`PGC_CPU_SR_REG
(
PGC_ARM_BASE_PTR
)

	)

28538 
	#PGC_GPU_PCIE_PHY_CTRL
 
	`PGC_PCIE_PHY_CTRL_REG
(
PGC_GPU_BASE_PTR
)

	)

28539 
	#PGC_GPU_PCIE_PHY_PUPSCR
 
	`PGC_PCIE_PHY_PUPSCR_REG
(
PGC_GPU_BASE_PTR
)

	)

28540 
	#PGC_GPU_PCIE_PHY_PDNSCR
 
	`PGC_PCIE_PHY_PDNSCR_REG
(
PGC_GPU_BASE_PTR
)

	)

28541 
	#PGC_GPU_PCIE_PHY_SR
 
	`PGC_PCIE_PHY_SR_REG
(
PGC_GPU_BASE_PTR
)

	)

28542 
	#PGC_GPU_MEGA_CTRL
 
	`PGC_MEGA_CTRL_REG
(
PGC_GPU_BASE_PTR
)

	)

28543 
	#PGC_GPU_MEGA_PUPSCR
 
	`PGC_MEGA_PUPSCR_REG
(
PGC_GPU_BASE_PTR
)

	)

28544 
	#PGC_GPU_MEGA_PDNSCR
 
	`PGC_MEGA_PDNSCR_REG
(
PGC_GPU_BASE_PTR
)

	)

28545 
	#PGC_GPU_MEGA_SR
 
	`PGC_MEGA_SR_REG
(
PGC_GPU_BASE_PTR
)

	)

28546 
	#PGC_GPU_DISPLAY_CTRL
 
	`PGC_DISPLAY_CTRL_REG
(
PGC_GPU_BASE_PTR
)

	)

28547 
	#PGC_GPU_DISPLAY_PUPSCR
 
	`PGC_DISPLAY_PUPSCR_REG
(
PGC_GPU_BASE_PTR
)

	)

28548 
	#PGC_GPU_DISPLAY_PDNSCR
 
	`PGC_DISPLAY_PDNSCR_REG
(
PGC_GPU_BASE_PTR
)

	)

28549 
	#PGC_GPU_DISPLAY_SR
 
	`PGC_DISPLAY_SR_REG
(
PGC_GPU_BASE_PTR
)

	)

28550 
	#PGC_GPU_GPU_CTRL
 
	`PGC_GPU_CTRL_REG
(
PGC_GPU_BASE_PTR
)

	)

28551 
	#PGC_GPU_GPU_PUPSCR
 
	`PGC_GPU_PUPSCR_REG
(
PGC_GPU_BASE_PTR
)

	)

28552 
	#PGC_GPU_GPU_PDNSCR
 
	`PGC_GPU_PDNSCR_REG
(
PGC_GPU_BASE_PTR
)

	)

28553 
	#PGC_GPU_GPU_SR
 
	`PGC_GPU_SR_REG
(
PGC_GPU_BASE_PTR
)

	)

28554 
	#PGC_GPU_CPU_CTRL
 
	`PGC_CPU_CTRL_REG
(
PGC_GPU_BASE_PTR
)

	)

28555 
	#PGC_GPU_CPU_PUPSCR
 
	`PGC_CPU_PUPSCR_REG
(
PGC_GPU_BASE_PTR
)

	)

28556 
	#PGC_GPU_CPU_PDNSCR
 
	`PGC_CPU_PDNSCR_REG
(
PGC_GPU_BASE_PTR
)

	)

28557 
	#PGC_GPU_CPU_SR
 
	`PGC_CPU_SR_REG
(
PGC_GPU_BASE_PTR
)

	)

28578 
uöt8_t
 
	mRESERVED_0
[272];

28579 
__IO
 
uöt32_t
 
	mREG_1P1
;

28580 
uöt8_t
 
	mRESERVED_1
[12];

28581 
__IO
 
uöt32_t
 
	mREG_3P0
;

28582 
uöt8_t
 
	mRESERVED_2
[12];

28583 
__IO
 
uöt32_t
 
	mREG_2P5
;

28584 
uöt8_t
 
	mRESERVED_3
[12];

28585 
__IO
 
uöt32_t
 
	mREG_CORE
;

28586 
uöt8_t
 
	mRESERVED_4
[12];

28587 
__IO
 
uöt32_t
 
	mMISC0
;

28588 
uöt8_t
 
	mRESERVED_5
[12];

28589 
__IO
 
uöt32_t
 
	mMISC1
;

28590 
__IO
 
uöt32_t
 
	mMISC1_SET
;

28591 
__IO
 
uöt32_t
 
	mMISC1_CLR
;

28592 
__IO
 
uöt32_t
 
	mMISC1_TOG
;

28593 
__IO
 
uöt32_t
 
	mMISC2
;

28594 
__IO
 
uöt32_t
 
	mMISC2_SET
;

28595 
__IO
 
uöt32_t
 
	mMISC2_CLR
;

28596 
__IO
 
uöt32_t
 
	mMISC2_TOG
;

28597 
uöt8_t
 
	mRESERVED_6
[240];

28598 
__IO
 
uöt32_t
 
	mLOWPWR_CTRL_SET
;

28599 
__IO
 
uöt32_t
 
	mLOWPWR_CTRL_CLR
;

28600 
__IO
 
uöt32_t
 
	mLOWPWR_CTRL_TOG
;

28601 } 
	tPMU_Ty≥
, *
	tPMU_MemM≠På
;

28613 
	#PMU_REG_1P1_REG
(
ba£
Ë((ba£)->
REG_1P1
)

	)

28614 
	#PMU_REG_3P0_REG
(
ba£
Ë((ba£)->
REG_3P0
)

	)

28615 
	#PMU_REG_2P5_REG
(
ba£
Ë((ba£)->
REG_2P5
)

	)

28616 
	#PMU_REG_CORE_REG
(
ba£
Ë((ba£)->
REG_CORE
)

	)

28617 
	#PMU_MISC0_REG
(
ba£
Ë((ba£)->
MISC0
)

	)

28618 
	#PMU_MISC1_REG
(
ba£
Ë((ba£)->
MISC1
)

	)

28619 
	#PMU_MISC1_SET_REG
(
ba£
Ë((ba£)->
MISC1_SET
)

	)

28620 
	#PMU_MISC1_CLR_REG
(
ba£
Ë((ba£)->
MISC1_CLR
)

	)

28621 
	#PMU_MISC1_TOG_REG
(
ba£
Ë((ba£)->
MISC1_TOG
)

	)

28622 
	#PMU_MISC2_REG
(
ba£
Ë((ba£)->
MISC2
)

	)

28623 
	#PMU_MISC2_SET_REG
(
ba£
Ë((ba£)->
MISC2_SET
)

	)

28624 
	#PMU_MISC2_CLR_REG
(
ba£
Ë((ba£)->
MISC2_CLR
)

	)

28625 
	#PMU_MISC2_TOG_REG
(
ba£
Ë((ba£)->
MISC2_TOG
)

	)

28626 
	#PMU_LOWPWR_CTRL_SET_REG
(
ba£
Ë((ba£)->
LOWPWR_CTRL_SET
)

	)

28627 
	#PMU_LOWPWR_CTRL_CLR_REG
(
ba£
Ë((ba£)->
LOWPWR_CTRL_CLR
)

	)

28628 
	#PMU_LOWPWR_CTRL_TOG_REG
(
ba£
Ë((ba£)->
LOWPWR_CTRL_TOG
)

	)

28644 
	#PMU_REG_1P1_ENABLE_LINREG_MASK
 0x1u

	)

28645 
	#PMU_REG_1P1_ENABLE_LINREG_SHIFT
 0

	)

28646 
	#PMU_REG_1P1_ENABLE_BO_MASK
 0x2u

	)

28647 
	#PMU_REG_1P1_ENABLE_BO_SHIFT
 1

	)

28648 
	#PMU_REG_1P1_ENABLE_ILIMIT_MASK
 0x4u

	)

28649 
	#PMU_REG_1P1_ENABLE_ILIMIT_SHIFT
 2

	)

28650 
	#PMU_REG_1P1_ENABLE_PULLDOWN_MASK
 0x8u

	)

28651 
	#PMU_REG_1P1_ENABLE_PULLDOWN_SHIFT
 3

	)

28652 
	#PMU_REG_1P1_BO_OFFSET_MASK
 0x70u

	)

28653 
	#PMU_REG_1P1_BO_OFFSET_SHIFT
 4

	)

28654 
	#PMU_REG_1P1_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_REG_1P1_BO_OFFSET_SHIFT
))&
PMU_REG_1P1_BO_OFFSET_MASK
)

	)

28655 
	#PMU_REG_1P1_OUTPUT_TRG_MASK
 0x1F00u

	)

28656 
	#PMU_REG_1P1_OUTPUT_TRG_SHIFT
 8

	)

28657 
	#PMU_REG_1P1_OUTPUT_TRG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_REG_1P1_OUTPUT_TRG_SHIFT
))&
PMU_REG_1P1_OUTPUT_TRG_MASK
)

	)

28658 
	#PMU_REG_1P1_BO_VDD1P1_MASK
 0x10000u

	)

28659 
	#PMU_REG_1P1_BO_VDD1P1_SHIFT
 16

	)

28660 
	#PMU_REG_1P1_OK_VDD1P1_MASK
 0x20000u

	)

28661 
	#PMU_REG_1P1_OK_VDD1P1_SHIFT
 17

	)

28662 
	#PMU_REG_1P1_ENABLE_WEAK_LINREG_MASK
 0x40000u

	)

28663 
	#PMU_REG_1P1_ENABLE_WEAK_LINREG_SHIFT
 18

	)

28664 
	#PMU_REG_1P1_SELREF_WEAK_LINREG_MASK
 0x80000u

	)

28665 
	#PMU_REG_1P1_SELREF_WEAK_LINREG_SHIFT
 19

	)

28667 
	#PMU_REG_3P0_ENABLE_LINREG_MASK
 0x1u

	)

28668 
	#PMU_REG_3P0_ENABLE_LINREG_SHIFT
 0

	)

28669 
	#PMU_REG_3P0_ENABLE_BO_MASK
 0x2u

	)

28670 
	#PMU_REG_3P0_ENABLE_BO_SHIFT
 1

	)

28671 
	#PMU_REG_3P0_ENABLE_ILIMIT_MASK
 0x4u

	)

28672 
	#PMU_REG_3P0_ENABLE_ILIMIT_SHIFT
 2

	)

28673 
	#PMU_REG_3P0_BO_OFFSET_MASK
 0x70u

	)

28674 
	#PMU_REG_3P0_BO_OFFSET_SHIFT
 4

	)

28675 
	#PMU_REG_3P0_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_REG_3P0_BO_OFFSET_SHIFT
))&
PMU_REG_3P0_BO_OFFSET_MASK
)

	)

28676 
	#PMU_REG_3P0_VBUS_SEL_MASK
 0x80u

	)

28677 
	#PMU_REG_3P0_VBUS_SEL_SHIFT
 7

	)

28678 
	#PMU_REG_3P0_OUTPUT_TRG_MASK
 0x1F00u

	)

28679 
	#PMU_REG_3P0_OUTPUT_TRG_SHIFT
 8

	)

28680 
	#PMU_REG_3P0_OUTPUT_TRG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_REG_3P0_OUTPUT_TRG_SHIFT
))&
PMU_REG_3P0_OUTPUT_TRG_MASK
)

	)

28681 
	#PMU_REG_3P0_BO_VDD3P0_MASK
 0x10000u

	)

28682 
	#PMU_REG_3P0_BO_VDD3P0_SHIFT
 16

	)

28683 
	#PMU_REG_3P0_OK_VDD3P0_MASK
 0x20000u

	)

28684 
	#PMU_REG_3P0_OK_VDD3P0_SHIFT
 17

	)

28686 
	#PMU_REG_2P5_ENABLE_LINREG_MASK
 0x1u

	)

28687 
	#PMU_REG_2P5_ENABLE_LINREG_SHIFT
 0

	)

28688 
	#PMU_REG_2P5_ENABLE_BO_MASK
 0x2u

	)

28689 
	#PMU_REG_2P5_ENABLE_BO_SHIFT
 1

	)

28690 
	#PMU_REG_2P5_ENABLE_ILIMIT_MASK
 0x4u

	)

28691 
	#PMU_REG_2P5_ENABLE_ILIMIT_SHIFT
 2

	)

28692 
	#PMU_REG_2P5_ENABLE_PULLDOWN_MASK
 0x8u

	)

28693 
	#PMU_REG_2P5_ENABLE_PULLDOWN_SHIFT
 3

	)

28694 
	#PMU_REG_2P5_BO_OFFSET_MASK
 0x70u

	)

28695 
	#PMU_REG_2P5_BO_OFFSET_SHIFT
 4

	)

28696 
	#PMU_REG_2P5_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_REG_2P5_BO_OFFSET_SHIFT
))&
PMU_REG_2P5_BO_OFFSET_MASK
)

	)

28697 
	#PMU_REG_2P5_OUTPUT_TRG_MASK
 0x1F00u

	)

28698 
	#PMU_REG_2P5_OUTPUT_TRG_SHIFT
 8

	)

28699 
	#PMU_REG_2P5_OUTPUT_TRG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_REG_2P5_OUTPUT_TRG_SHIFT
))&
PMU_REG_2P5_OUTPUT_TRG_MASK
)

	)

28700 
	#PMU_REG_2P5_BO_VDD2P5_MASK
 0x10000u

	)

28701 
	#PMU_REG_2P5_BO_VDD2P5_SHIFT
 16

	)

28702 
	#PMU_REG_2P5_OK_VDD2P5_MASK
 0x20000u

	)

28703 
	#PMU_REG_2P5_OK_VDD2P5_SHIFT
 17

	)

28704 
	#PMU_REG_2P5_ENABLE_WEAK_LINREG_MASK
 0x40000u

	)

28705 
	#PMU_REG_2P5_ENABLE_WEAK_LINREG_SHIFT
 18

	)

28707 
	#PMU_REG_CORE_REG0_TARG_MASK
 0x1Fu

	)

28708 
	#PMU_REG_CORE_REG0_TARG_SHIFT
 0

	)

28709 
	#PMU_REG_CORE_REG0_TARG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_REG_CORE_REG0_TARG_SHIFT
))&
PMU_REG_CORE_REG0_TARG_MASK
)

	)

28710 
	#PMU_REG_CORE_REG1_TARG_MASK
 0x3E00u

	)

28711 
	#PMU_REG_CORE_REG1_TARG_SHIFT
 9

	)

28712 
	#PMU_REG_CORE_REG1_TARG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_REG_CORE_REG1_TARG_SHIFT
))&
PMU_REG_CORE_REG1_TARG_MASK
)

	)

28713 
	#PMU_REG_CORE_REG2_TARG_MASK
 0x7C0000u

	)

28714 
	#PMU_REG_CORE_REG2_TARG_SHIFT
 18

	)

28715 
	#PMU_REG_CORE_REG2_TARG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_REG_CORE_REG2_TARG_SHIFT
))&
PMU_REG_CORE_REG2_TARG_MASK
)

	)

28716 
	#PMU_REG_CORE_RAMP_RATE_MASK
 0x18000000u

	)

28717 
	#PMU_REG_CORE_RAMP_RATE_SHIFT
 27

	)

28718 
	#PMU_REG_CORE_RAMP_RATE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_REG_CORE_RAMP_RATE_SHIFT
))&
PMU_REG_CORE_RAMP_RATE_MASK
)

	)

28719 
	#PMU_REG_CORE_FET_ODRIVE_MASK
 0x20000000u

	)

28720 
	#PMU_REG_CORE_FET_ODRIVE_SHIFT
 29

	)

28722 
	#PMU_MISC0_REFTOP_PWD_MASK
 0x1u

	)

28723 
	#PMU_MISC0_REFTOP_PWD_SHIFT
 0

	)

28724 
	#PMU_MISC0_REFTOP_SELFBIASOFF_MASK
 0x8u

	)

28725 
	#PMU_MISC0_REFTOP_SELFBIASOFF_SHIFT
 3

	)

28726 
	#PMU_MISC0_REFTOP_VBGADJ_MASK
 0x70u

	)

28727 
	#PMU_MISC0_REFTOP_VBGADJ_SHIFT
 4

	)

28728 
	#PMU_MISC0_REFTOP_VBGADJ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC0_REFTOP_VBGADJ_SHIFT
))&
PMU_MISC0_REFTOP_VBGADJ_MASK
)

	)

28729 
	#PMU_MISC0_REFTOP_VBGUP_MASK
 0x80u

	)

28730 
	#PMU_MISC0_REFTOP_VBGUP_SHIFT
 7

	)

28731 
	#PMU_MISC0_STOP_MODE_CONFIG_MASK
 0xC00u

	)

28732 
	#PMU_MISC0_STOP_MODE_CONFIG_SHIFT
 10

	)

28733 
	#PMU_MISC0_STOP_MODE_CONFIG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC0_STOP_MODE_CONFIG_SHIFT
))&
PMU_MISC0_STOP_MODE_CONFIG_MASK
)

	)

28734 
	#PMU_MISC0_RTC_RINGOSC_EN_MASK
 0x1000u

	)

28735 
	#PMU_MISC0_RTC_RINGOSC_EN_SHIFT
 12

	)

28736 
	#PMU_MISC0_OSC_I_MASK
 0x6000u

	)

28737 
	#PMU_MISC0_OSC_I_SHIFT
 13

	)

28738 
	#PMU_MISC0_OSC_I
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC0_OSC_I_SHIFT
))&
PMU_MISC0_OSC_I_MASK
)

	)

28739 
	#PMU_MISC0_OSC_XTALOK_MASK
 0x8000u

	)

28740 
	#PMU_MISC0_OSC_XTALOK_SHIFT
 15

	)

28741 
	#PMU_MISC0_OSC_XTALOK_EN_MASK
 0x10000u

	)

28742 
	#PMU_MISC0_OSC_XTALOK_EN_SHIFT
 16

	)

28743 
	#PMU_MISC0_CLKGATE_CTRL_MASK
 0x2000000u

	)

28744 
	#PMU_MISC0_CLKGATE_CTRL_SHIFT
 25

	)

28745 
	#PMU_MISC0_CLKGATE_DELAY_MASK
 0x1C000000u

	)

28746 
	#PMU_MISC0_CLKGATE_DELAY_SHIFT
 26

	)

28747 
	#PMU_MISC0_CLKGATE_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC0_CLKGATE_DELAY_SHIFT
))&
PMU_MISC0_CLKGATE_DELAY_MASK
)

	)

28748 
	#PMU_MISC0_RTC_XTAL_SOURCE_MASK
 0x20000000u

	)

28749 
	#PMU_MISC0_RTC_XTAL_SOURCE_SHIFT
 29

	)

28750 
	#PMU_MISC0_XTAL_24M_PWD_MASK
 0x40000000u

	)

28751 
	#PMU_MISC0_XTAL_24M_PWD_SHIFT
 30

	)

28752 
	#PMU_MISC0_VID_PLL_PREDIV_MASK
 0x80000000u

	)

28753 
	#PMU_MISC0_VID_PLL_PREDIV_SHIFT
 31

	)

28755 
	#PMU_MISC1_LVDS1_CLK_SEL_MASK
 0x1Fu

	)

28756 
	#PMU_MISC1_LVDS1_CLK_SEL_SHIFT
 0

	)

28757 
	#PMU_MISC1_LVDS1_CLK_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC1_LVDS1_CLK_SEL_SHIFT
))&
PMU_MISC1_LVDS1_CLK_SEL_MASK
)

	)

28758 
	#PMU_MISC1_LVDS2_CLK_SEL_MASK
 0x3E0u

	)

28759 
	#PMU_MISC1_LVDS2_CLK_SEL_SHIFT
 5

	)

28760 
	#PMU_MISC1_LVDS2_CLK_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC1_LVDS2_CLK_SEL_SHIFT
))&
PMU_MISC1_LVDS2_CLK_SEL_MASK
)

	)

28761 
	#PMU_MISC1_LVDSCLK1_OBEN_MASK
 0x400u

	)

28762 
	#PMU_MISC1_LVDSCLK1_OBEN_SHIFT
 10

	)

28763 
	#PMU_MISC1_LVDSCLK2_OBEN_MASK
 0x800u

	)

28764 
	#PMU_MISC1_LVDSCLK2_OBEN_SHIFT
 11

	)

28765 
	#PMU_MISC1_LVDSCLK1_IBEN_MASK
 0x1000u

	)

28766 
	#PMU_MISC1_LVDSCLK1_IBEN_SHIFT
 12

	)

28767 
	#PMU_MISC1_LVDSCLK2_IBEN_MASK
 0x2000u

	)

28768 
	#PMU_MISC1_LVDSCLK2_IBEN_SHIFT
 13

	)

28769 
	#PMU_MISC1_PFD_480_AUTOGATE_EN_MASK
 0x10000u

	)

28770 
	#PMU_MISC1_PFD_480_AUTOGATE_EN_SHIFT
 16

	)

28771 
	#PMU_MISC1_PFD_528_AUTOGATE_EN_MASK
 0x20000u

	)

28772 
	#PMU_MISC1_PFD_528_AUTOGATE_EN_SHIFT
 17

	)

28773 
	#PMU_MISC1_IRQ_TEMPPANIC_MASK
 0x8000000u

	)

28774 
	#PMU_MISC1_IRQ_TEMPPANIC_SHIFT
 27

	)

28775 
	#PMU_MISC1_IRQ_TEMPLOW_MASK
 0x10000000u

	)

28776 
	#PMU_MISC1_IRQ_TEMPLOW_SHIFT
 28

	)

28777 
	#PMU_MISC1_IRQ_TEMPHIGH_MASK
 0x20000000u

	)

28778 
	#PMU_MISC1_IRQ_TEMPHIGH_SHIFT
 29

	)

28779 
	#PMU_MISC1_IRQ_ANA_BO_MASK
 0x40000000u

	)

28780 
	#PMU_MISC1_IRQ_ANA_BO_SHIFT
 30

	)

28781 
	#PMU_MISC1_IRQ_DIG_BO_MASK
 0x80000000u

	)

28782 
	#PMU_MISC1_IRQ_DIG_BO_SHIFT
 31

	)

28784 
	#PMU_MISC1_SET_LVDS1_CLK_SEL_MASK
 0x1Fu

	)

28785 
	#PMU_MISC1_SET_LVDS1_CLK_SEL_SHIFT
 0

	)

28786 
	#PMU_MISC1_SET_LVDS1_CLK_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC1_SET_LVDS1_CLK_SEL_SHIFT
))&
PMU_MISC1_SET_LVDS1_CLK_SEL_MASK
)

	)

28787 
	#PMU_MISC1_SET_LVDS2_CLK_SEL_MASK
 0x3E0u

	)

28788 
	#PMU_MISC1_SET_LVDS2_CLK_SEL_SHIFT
 5

	)

28789 
	#PMU_MISC1_SET_LVDS2_CLK_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC1_SET_LVDS2_CLK_SEL_SHIFT
))&
PMU_MISC1_SET_LVDS2_CLK_SEL_MASK
)

	)

28790 
	#PMU_MISC1_SET_LVDSCLK1_OBEN_MASK
 0x400u

	)

28791 
	#PMU_MISC1_SET_LVDSCLK1_OBEN_SHIFT
 10

	)

28792 
	#PMU_MISC1_SET_LVDSCLK2_OBEN_MASK
 0x800u

	)

28793 
	#PMU_MISC1_SET_LVDSCLK2_OBEN_SHIFT
 11

	)

28794 
	#PMU_MISC1_SET_LVDSCLK1_IBEN_MASK
 0x1000u

	)

28795 
	#PMU_MISC1_SET_LVDSCLK1_IBEN_SHIFT
 12

	)

28796 
	#PMU_MISC1_SET_LVDSCLK2_IBEN_MASK
 0x2000u

	)

28797 
	#PMU_MISC1_SET_LVDSCLK2_IBEN_SHIFT
 13

	)

28798 
	#PMU_MISC1_SET_PFD_480_AUTOGATE_EN_MASK
 0x10000u

	)

28799 
	#PMU_MISC1_SET_PFD_480_AUTOGATE_EN_SHIFT
 16

	)

28800 
	#PMU_MISC1_SET_PFD_528_AUTOGATE_EN_MASK
 0x20000u

	)

28801 
	#PMU_MISC1_SET_PFD_528_AUTOGATE_EN_SHIFT
 17

	)

28802 
	#PMU_MISC1_SET_IRQ_TEMPPANIC_MASK
 0x8000000u

	)

28803 
	#PMU_MISC1_SET_IRQ_TEMPPANIC_SHIFT
 27

	)

28804 
	#PMU_MISC1_SET_IRQ_TEMPLOW_MASK
 0x10000000u

	)

28805 
	#PMU_MISC1_SET_IRQ_TEMPLOW_SHIFT
 28

	)

28806 
	#PMU_MISC1_SET_IRQ_TEMPHIGH_MASK
 0x20000000u

	)

28807 
	#PMU_MISC1_SET_IRQ_TEMPHIGH_SHIFT
 29

	)

28808 
	#PMU_MISC1_SET_IRQ_ANA_BO_MASK
 0x40000000u

	)

28809 
	#PMU_MISC1_SET_IRQ_ANA_BO_SHIFT
 30

	)

28810 
	#PMU_MISC1_SET_IRQ_DIG_BO_MASK
 0x80000000u

	)

28811 
	#PMU_MISC1_SET_IRQ_DIG_BO_SHIFT
 31

	)

28813 
	#PMU_MISC1_CLR_LVDS1_CLK_SEL_MASK
 0x1Fu

	)

28814 
	#PMU_MISC1_CLR_LVDS1_CLK_SEL_SHIFT
 0

	)

28815 
	#PMU_MISC1_CLR_LVDS1_CLK_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC1_CLR_LVDS1_CLK_SEL_SHIFT
))&
PMU_MISC1_CLR_LVDS1_CLK_SEL_MASK
)

	)

28816 
	#PMU_MISC1_CLR_LVDS2_CLK_SEL_MASK
 0x3E0u

	)

28817 
	#PMU_MISC1_CLR_LVDS2_CLK_SEL_SHIFT
 5

	)

28818 
	#PMU_MISC1_CLR_LVDS2_CLK_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC1_CLR_LVDS2_CLK_SEL_SHIFT
))&
PMU_MISC1_CLR_LVDS2_CLK_SEL_MASK
)

	)

28819 
	#PMU_MISC1_CLR_LVDSCLK1_OBEN_MASK
 0x400u

	)

28820 
	#PMU_MISC1_CLR_LVDSCLK1_OBEN_SHIFT
 10

	)

28821 
	#PMU_MISC1_CLR_LVDSCLK2_OBEN_MASK
 0x800u

	)

28822 
	#PMU_MISC1_CLR_LVDSCLK2_OBEN_SHIFT
 11

	)

28823 
	#PMU_MISC1_CLR_LVDSCLK1_IBEN_MASK
 0x1000u

	)

28824 
	#PMU_MISC1_CLR_LVDSCLK1_IBEN_SHIFT
 12

	)

28825 
	#PMU_MISC1_CLR_LVDSCLK2_IBEN_MASK
 0x2000u

	)

28826 
	#PMU_MISC1_CLR_LVDSCLK2_IBEN_SHIFT
 13

	)

28827 
	#PMU_MISC1_CLR_PFD_480_AUTOGATE_EN_MASK
 0x10000u

	)

28828 
	#PMU_MISC1_CLR_PFD_480_AUTOGATE_EN_SHIFT
 16

	)

28829 
	#PMU_MISC1_CLR_PFD_528_AUTOGATE_EN_MASK
 0x20000u

	)

28830 
	#PMU_MISC1_CLR_PFD_528_AUTOGATE_EN_SHIFT
 17

	)

28831 
	#PMU_MISC1_CLR_IRQ_TEMPPANIC_MASK
 0x8000000u

	)

28832 
	#PMU_MISC1_CLR_IRQ_TEMPPANIC_SHIFT
 27

	)

28833 
	#PMU_MISC1_CLR_IRQ_TEMPLOW_MASK
 0x10000000u

	)

28834 
	#PMU_MISC1_CLR_IRQ_TEMPLOW_SHIFT
 28

	)

28835 
	#PMU_MISC1_CLR_IRQ_TEMPHIGH_MASK
 0x20000000u

	)

28836 
	#PMU_MISC1_CLR_IRQ_TEMPHIGH_SHIFT
 29

	)

28837 
	#PMU_MISC1_CLR_IRQ_ANA_BO_MASK
 0x40000000u

	)

28838 
	#PMU_MISC1_CLR_IRQ_ANA_BO_SHIFT
 30

	)

28839 
	#PMU_MISC1_CLR_IRQ_DIG_BO_MASK
 0x80000000u

	)

28840 
	#PMU_MISC1_CLR_IRQ_DIG_BO_SHIFT
 31

	)

28842 
	#PMU_MISC1_TOG_LVDS1_CLK_SEL_MASK
 0x1Fu

	)

28843 
	#PMU_MISC1_TOG_LVDS1_CLK_SEL_SHIFT
 0

	)

28844 
	#PMU_MISC1_TOG_LVDS1_CLK_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC1_TOG_LVDS1_CLK_SEL_SHIFT
))&
PMU_MISC1_TOG_LVDS1_CLK_SEL_MASK
)

	)

28845 
	#PMU_MISC1_TOG_LVDS2_CLK_SEL_MASK
 0x3E0u

	)

28846 
	#PMU_MISC1_TOG_LVDS2_CLK_SEL_SHIFT
 5

	)

28847 
	#PMU_MISC1_TOG_LVDS2_CLK_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC1_TOG_LVDS2_CLK_SEL_SHIFT
))&
PMU_MISC1_TOG_LVDS2_CLK_SEL_MASK
)

	)

28848 
	#PMU_MISC1_TOG_LVDSCLK1_OBEN_MASK
 0x400u

	)

28849 
	#PMU_MISC1_TOG_LVDSCLK1_OBEN_SHIFT
 10

	)

28850 
	#PMU_MISC1_TOG_LVDSCLK2_OBEN_MASK
 0x800u

	)

28851 
	#PMU_MISC1_TOG_LVDSCLK2_OBEN_SHIFT
 11

	)

28852 
	#PMU_MISC1_TOG_LVDSCLK1_IBEN_MASK
 0x1000u

	)

28853 
	#PMU_MISC1_TOG_LVDSCLK1_IBEN_SHIFT
 12

	)

28854 
	#PMU_MISC1_TOG_LVDSCLK2_IBEN_MASK
 0x2000u

	)

28855 
	#PMU_MISC1_TOG_LVDSCLK2_IBEN_SHIFT
 13

	)

28856 
	#PMU_MISC1_TOG_PFD_480_AUTOGATE_EN_MASK
 0x10000u

	)

28857 
	#PMU_MISC1_TOG_PFD_480_AUTOGATE_EN_SHIFT
 16

	)

28858 
	#PMU_MISC1_TOG_PFD_528_AUTOGATE_EN_MASK
 0x20000u

	)

28859 
	#PMU_MISC1_TOG_PFD_528_AUTOGATE_EN_SHIFT
 17

	)

28860 
	#PMU_MISC1_TOG_IRQ_TEMPPANIC_MASK
 0x8000000u

	)

28861 
	#PMU_MISC1_TOG_IRQ_TEMPPANIC_SHIFT
 27

	)

28862 
	#PMU_MISC1_TOG_IRQ_TEMPLOW_MASK
 0x10000000u

	)

28863 
	#PMU_MISC1_TOG_IRQ_TEMPLOW_SHIFT
 28

	)

28864 
	#PMU_MISC1_TOG_IRQ_TEMPHIGH_MASK
 0x20000000u

	)

28865 
	#PMU_MISC1_TOG_IRQ_TEMPHIGH_SHIFT
 29

	)

28866 
	#PMU_MISC1_TOG_IRQ_ANA_BO_MASK
 0x40000000u

	)

28867 
	#PMU_MISC1_TOG_IRQ_ANA_BO_SHIFT
 30

	)

28868 
	#PMU_MISC1_TOG_IRQ_DIG_BO_MASK
 0x80000000u

	)

28869 
	#PMU_MISC1_TOG_IRQ_DIG_BO_SHIFT
 31

	)

28871 
	#PMU_MISC2_REG0_BO_OFFSET_MASK
 0x7u

	)

28872 
	#PMU_MISC2_REG0_BO_OFFSET_SHIFT
 0

	)

28873 
	#PMU_MISC2_REG0_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_REG0_BO_OFFSET_SHIFT
))&
PMU_MISC2_REG0_BO_OFFSET_MASK
)

	)

28874 
	#PMU_MISC2_REG0_BO_STATUS_MASK
 0x8u

	)

28875 
	#PMU_MISC2_REG0_BO_STATUS_SHIFT
 3

	)

28876 
	#PMU_MISC2_REG0_ENABLE_BO_MASK
 0x20u

	)

28877 
	#PMU_MISC2_REG0_ENABLE_BO_SHIFT
 5

	)

28878 
	#PMU_MISC2_PLL3_dißbÀ_MASK
 0x80u

	)

28879 
	#PMU_MISC2_PLL3_dißbÀ_SHIFT
 7

	)

28880 
	#PMU_MISC2_REG1_BO_OFFSET_MASK
 0x700u

	)

28881 
	#PMU_MISC2_REG1_BO_OFFSET_SHIFT
 8

	)

28882 
	#PMU_MISC2_REG1_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_REG1_BO_OFFSET_SHIFT
))&
PMU_MISC2_REG1_BO_OFFSET_MASK
)

	)

28883 
	#PMU_MISC2_REG1_BO_STATUS_MASK
 0x800u

	)

28884 
	#PMU_MISC2_REG1_BO_STATUS_SHIFT
 11

	)

28885 
	#PMU_MISC2_REG1_ENABLE_BO_MASK
 0x2000u

	)

28886 
	#PMU_MISC2_REG1_ENABLE_BO_SHIFT
 13

	)

28887 
	#PMU_MISC2_AUDIO_DIV_LSB_MASK
 0x8000u

	)

28888 
	#PMU_MISC2_AUDIO_DIV_LSB_SHIFT
 15

	)

28889 
	#PMU_MISC2_REG2_BO_OFFSET_MASK
 0x70000u

	)

28890 
	#PMU_MISC2_REG2_BO_OFFSET_SHIFT
 16

	)

28891 
	#PMU_MISC2_REG2_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_REG2_BO_OFFSET_SHIFT
))&
PMU_MISC2_REG2_BO_OFFSET_MASK
)

	)

28892 
	#PMU_MISC2_REG2_BO_STATUS_MASK
 0x80000u

	)

28893 
	#PMU_MISC2_REG2_BO_STATUS_SHIFT
 19

	)

28894 
	#PMU_MISC2_REG2_ENABLE_BO_MASK
 0x200000u

	)

28895 
	#PMU_MISC2_REG2_ENABLE_BO_SHIFT
 21

	)

28896 
	#PMU_MISC2_REG2_OK_MASK
 0x400000u

	)

28897 
	#PMU_MISC2_REG2_OK_SHIFT
 22

	)

28898 
	#PMU_MISC2_AUDIO_DIV_MSB_MASK
 0x800000u

	)

28899 
	#PMU_MISC2_AUDIO_DIV_MSB_SHIFT
 23

	)

28900 
	#PMU_MISC2_REG0_STEP_TIME_MASK
 0x3000000u

	)

28901 
	#PMU_MISC2_REG0_STEP_TIME_SHIFT
 24

	)

28902 
	#PMU_MISC2_REG0_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_REG0_STEP_TIME_SHIFT
))&
PMU_MISC2_REG0_STEP_TIME_MASK
)

	)

28903 
	#PMU_MISC2_REG1_STEP_TIME_MASK
 0xC000000u

	)

28904 
	#PMU_MISC2_REG1_STEP_TIME_SHIFT
 26

	)

28905 
	#PMU_MISC2_REG1_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_REG1_STEP_TIME_SHIFT
))&
PMU_MISC2_REG1_STEP_TIME_MASK
)

	)

28906 
	#PMU_MISC2_REG2_STEP_TIME_MASK
 0x30000000u

	)

28907 
	#PMU_MISC2_REG2_STEP_TIME_SHIFT
 28

	)

28908 
	#PMU_MISC2_REG2_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_REG2_STEP_TIME_SHIFT
))&
PMU_MISC2_REG2_STEP_TIME_MASK
)

	)

28909 
	#PMU_MISC2_VIDEO_DIV_MASK
 0xC0000000u

	)

28910 
	#PMU_MISC2_VIDEO_DIV_SHIFT
 30

	)

28911 
	#PMU_MISC2_VIDEO_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_VIDEO_DIV_SHIFT
))&
PMU_MISC2_VIDEO_DIV_MASK
)

	)

28913 
	#PMU_MISC2_SET_REG0_BO_OFFSET_MASK
 0x7u

	)

28914 
	#PMU_MISC2_SET_REG0_BO_OFFSET_SHIFT
 0

	)

28915 
	#PMU_MISC2_SET_REG0_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_SET_REG0_BO_OFFSET_SHIFT
))&
PMU_MISC2_SET_REG0_BO_OFFSET_MASK
)

	)

28916 
	#PMU_MISC2_SET_REG0_BO_STATUS_MASK
 0x8u

	)

28917 
	#PMU_MISC2_SET_REG0_BO_STATUS_SHIFT
 3

	)

28918 
	#PMU_MISC2_SET_REG0_ENABLE_BO_MASK
 0x20u

	)

28919 
	#PMU_MISC2_SET_REG0_ENABLE_BO_SHIFT
 5

	)

28920 
	#PMU_MISC2_SET_PLL3_dißbÀ_MASK
 0x80u

	)

28921 
	#PMU_MISC2_SET_PLL3_dißbÀ_SHIFT
 7

	)

28922 
	#PMU_MISC2_SET_REG1_BO_OFFSET_MASK
 0x700u

	)

28923 
	#PMU_MISC2_SET_REG1_BO_OFFSET_SHIFT
 8

	)

28924 
	#PMU_MISC2_SET_REG1_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_SET_REG1_BO_OFFSET_SHIFT
))&
PMU_MISC2_SET_REG1_BO_OFFSET_MASK
)

	)

28925 
	#PMU_MISC2_SET_REG1_BO_STATUS_MASK
 0x800u

	)

28926 
	#PMU_MISC2_SET_REG1_BO_STATUS_SHIFT
 11

	)

28927 
	#PMU_MISC2_SET_REG1_ENABLE_BO_MASK
 0x2000u

	)

28928 
	#PMU_MISC2_SET_REG1_ENABLE_BO_SHIFT
 13

	)

28929 
	#PMU_MISC2_SET_AUDIO_DIV_LSB_MASK
 0x8000u

	)

28930 
	#PMU_MISC2_SET_AUDIO_DIV_LSB_SHIFT
 15

	)

28931 
	#PMU_MISC2_SET_REG2_BO_OFFSET_MASK
 0x70000u

	)

28932 
	#PMU_MISC2_SET_REG2_BO_OFFSET_SHIFT
 16

	)

28933 
	#PMU_MISC2_SET_REG2_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_SET_REG2_BO_OFFSET_SHIFT
))&
PMU_MISC2_SET_REG2_BO_OFFSET_MASK
)

	)

28934 
	#PMU_MISC2_SET_REG2_BO_STATUS_MASK
 0x80000u

	)

28935 
	#PMU_MISC2_SET_REG2_BO_STATUS_SHIFT
 19

	)

28936 
	#PMU_MISC2_SET_REG2_ENABLE_BO_MASK
 0x200000u

	)

28937 
	#PMU_MISC2_SET_REG2_ENABLE_BO_SHIFT
 21

	)

28938 
	#PMU_MISC2_SET_REG2_OK_MASK
 0x400000u

	)

28939 
	#PMU_MISC2_SET_REG2_OK_SHIFT
 22

	)

28940 
	#PMU_MISC2_SET_AUDIO_DIV_MSB_MASK
 0x800000u

	)

28941 
	#PMU_MISC2_SET_AUDIO_DIV_MSB_SHIFT
 23

	)

28942 
	#PMU_MISC2_SET_REG0_STEP_TIME_MASK
 0x3000000u

	)

28943 
	#PMU_MISC2_SET_REG0_STEP_TIME_SHIFT
 24

	)

28944 
	#PMU_MISC2_SET_REG0_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_SET_REG0_STEP_TIME_SHIFT
))&
PMU_MISC2_SET_REG0_STEP_TIME_MASK
)

	)

28945 
	#PMU_MISC2_SET_REG1_STEP_TIME_MASK
 0xC000000u

	)

28946 
	#PMU_MISC2_SET_REG1_STEP_TIME_SHIFT
 26

	)

28947 
	#PMU_MISC2_SET_REG1_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_SET_REG1_STEP_TIME_SHIFT
))&
PMU_MISC2_SET_REG1_STEP_TIME_MASK
)

	)

28948 
	#PMU_MISC2_SET_REG2_STEP_TIME_MASK
 0x30000000u

	)

28949 
	#PMU_MISC2_SET_REG2_STEP_TIME_SHIFT
 28

	)

28950 
	#PMU_MISC2_SET_REG2_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_SET_REG2_STEP_TIME_SHIFT
))&
PMU_MISC2_SET_REG2_STEP_TIME_MASK
)

	)

28951 
	#PMU_MISC2_SET_VIDEO_DIV_MASK
 0xC0000000u

	)

28952 
	#PMU_MISC2_SET_VIDEO_DIV_SHIFT
 30

	)

28953 
	#PMU_MISC2_SET_VIDEO_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_SET_VIDEO_DIV_SHIFT
))&
PMU_MISC2_SET_VIDEO_DIV_MASK
)

	)

28955 
	#PMU_MISC2_CLR_REG0_BO_OFFSET_MASK
 0x7u

	)

28956 
	#PMU_MISC2_CLR_REG0_BO_OFFSET_SHIFT
 0

	)

28957 
	#PMU_MISC2_CLR_REG0_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_CLR_REG0_BO_OFFSET_SHIFT
))&
PMU_MISC2_CLR_REG0_BO_OFFSET_MASK
)

	)

28958 
	#PMU_MISC2_CLR_REG0_BO_STATUS_MASK
 0x8u

	)

28959 
	#PMU_MISC2_CLR_REG0_BO_STATUS_SHIFT
 3

	)

28960 
	#PMU_MISC2_CLR_REG0_ENABLE_BO_MASK
 0x20u

	)

28961 
	#PMU_MISC2_CLR_REG0_ENABLE_BO_SHIFT
 5

	)

28962 
	#PMU_MISC2_CLR_PLL3_dißbÀ_MASK
 0x80u

	)

28963 
	#PMU_MISC2_CLR_PLL3_dißbÀ_SHIFT
 7

	)

28964 
	#PMU_MISC2_CLR_REG1_BO_OFFSET_MASK
 0x700u

	)

28965 
	#PMU_MISC2_CLR_REG1_BO_OFFSET_SHIFT
 8

	)

28966 
	#PMU_MISC2_CLR_REG1_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_CLR_REG1_BO_OFFSET_SHIFT
))&
PMU_MISC2_CLR_REG1_BO_OFFSET_MASK
)

	)

28967 
	#PMU_MISC2_CLR_REG1_BO_STATUS_MASK
 0x800u

	)

28968 
	#PMU_MISC2_CLR_REG1_BO_STATUS_SHIFT
 11

	)

28969 
	#PMU_MISC2_CLR_REG1_ENABLE_BO_MASK
 0x2000u

	)

28970 
	#PMU_MISC2_CLR_REG1_ENABLE_BO_SHIFT
 13

	)

28971 
	#PMU_MISC2_CLR_AUDIO_DIV_LSB_MASK
 0x8000u

	)

28972 
	#PMU_MISC2_CLR_AUDIO_DIV_LSB_SHIFT
 15

	)

28973 
	#PMU_MISC2_CLR_REG2_BO_OFFSET_MASK
 0x70000u

	)

28974 
	#PMU_MISC2_CLR_REG2_BO_OFFSET_SHIFT
 16

	)

28975 
	#PMU_MISC2_CLR_REG2_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_CLR_REG2_BO_OFFSET_SHIFT
))&
PMU_MISC2_CLR_REG2_BO_OFFSET_MASK
)

	)

28976 
	#PMU_MISC2_CLR_REG2_BO_STATUS_MASK
 0x80000u

	)

28977 
	#PMU_MISC2_CLR_REG2_BO_STATUS_SHIFT
 19

	)

28978 
	#PMU_MISC2_CLR_REG2_ENABLE_BO_MASK
 0x200000u

	)

28979 
	#PMU_MISC2_CLR_REG2_ENABLE_BO_SHIFT
 21

	)

28980 
	#PMU_MISC2_CLR_REG2_OK_MASK
 0x400000u

	)

28981 
	#PMU_MISC2_CLR_REG2_OK_SHIFT
 22

	)

28982 
	#PMU_MISC2_CLR_AUDIO_DIV_MSB_MASK
 0x800000u

	)

28983 
	#PMU_MISC2_CLR_AUDIO_DIV_MSB_SHIFT
 23

	)

28984 
	#PMU_MISC2_CLR_REG0_STEP_TIME_MASK
 0x3000000u

	)

28985 
	#PMU_MISC2_CLR_REG0_STEP_TIME_SHIFT
 24

	)

28986 
	#PMU_MISC2_CLR_REG0_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_CLR_REG0_STEP_TIME_SHIFT
))&
PMU_MISC2_CLR_REG0_STEP_TIME_MASK
)

	)

28987 
	#PMU_MISC2_CLR_REG1_STEP_TIME_MASK
 0xC000000u

	)

28988 
	#PMU_MISC2_CLR_REG1_STEP_TIME_SHIFT
 26

	)

28989 
	#PMU_MISC2_CLR_REG1_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_CLR_REG1_STEP_TIME_SHIFT
))&
PMU_MISC2_CLR_REG1_STEP_TIME_MASK
)

	)

28990 
	#PMU_MISC2_CLR_REG2_STEP_TIME_MASK
 0x30000000u

	)

28991 
	#PMU_MISC2_CLR_REG2_STEP_TIME_SHIFT
 28

	)

28992 
	#PMU_MISC2_CLR_REG2_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_CLR_REG2_STEP_TIME_SHIFT
))&
PMU_MISC2_CLR_REG2_STEP_TIME_MASK
)

	)

28993 
	#PMU_MISC2_CLR_VIDEO_DIV_MASK
 0xC0000000u

	)

28994 
	#PMU_MISC2_CLR_VIDEO_DIV_SHIFT
 30

	)

28995 
	#PMU_MISC2_CLR_VIDEO_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_CLR_VIDEO_DIV_SHIFT
))&
PMU_MISC2_CLR_VIDEO_DIV_MASK
)

	)

28997 
	#PMU_MISC2_TOG_REG0_BO_OFFSET_MASK
 0x7u

	)

28998 
	#PMU_MISC2_TOG_REG0_BO_OFFSET_SHIFT
 0

	)

28999 
	#PMU_MISC2_TOG_REG0_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_TOG_REG0_BO_OFFSET_SHIFT
))&
PMU_MISC2_TOG_REG0_BO_OFFSET_MASK
)

	)

29000 
	#PMU_MISC2_TOG_REG0_BO_STATUS_MASK
 0x8u

	)

29001 
	#PMU_MISC2_TOG_REG0_BO_STATUS_SHIFT
 3

	)

29002 
	#PMU_MISC2_TOG_REG0_ENABLE_BO_MASK
 0x20u

	)

29003 
	#PMU_MISC2_TOG_REG0_ENABLE_BO_SHIFT
 5

	)

29004 
	#PMU_MISC2_TOG_PLL3_dißbÀ_MASK
 0x80u

	)

29005 
	#PMU_MISC2_TOG_PLL3_dißbÀ_SHIFT
 7

	)

29006 
	#PMU_MISC2_TOG_REG1_BO_OFFSET_MASK
 0x700u

	)

29007 
	#PMU_MISC2_TOG_REG1_BO_OFFSET_SHIFT
 8

	)

29008 
	#PMU_MISC2_TOG_REG1_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_TOG_REG1_BO_OFFSET_SHIFT
))&
PMU_MISC2_TOG_REG1_BO_OFFSET_MASK
)

	)

29009 
	#PMU_MISC2_TOG_REG1_BO_STATUS_MASK
 0x800u

	)

29010 
	#PMU_MISC2_TOG_REG1_BO_STATUS_SHIFT
 11

	)

29011 
	#PMU_MISC2_TOG_REG1_ENABLE_BO_MASK
 0x2000u

	)

29012 
	#PMU_MISC2_TOG_REG1_ENABLE_BO_SHIFT
 13

	)

29013 
	#PMU_MISC2_TOG_AUDIO_DIV_LSB_MASK
 0x8000u

	)

29014 
	#PMU_MISC2_TOG_AUDIO_DIV_LSB_SHIFT
 15

	)

29015 
	#PMU_MISC2_TOG_REG2_BO_OFFSET_MASK
 0x70000u

	)

29016 
	#PMU_MISC2_TOG_REG2_BO_OFFSET_SHIFT
 16

	)

29017 
	#PMU_MISC2_TOG_REG2_BO_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_TOG_REG2_BO_OFFSET_SHIFT
))&
PMU_MISC2_TOG_REG2_BO_OFFSET_MASK
)

	)

29018 
	#PMU_MISC2_TOG_REG2_BO_STATUS_MASK
 0x80000u

	)

29019 
	#PMU_MISC2_TOG_REG2_BO_STATUS_SHIFT
 19

	)

29020 
	#PMU_MISC2_TOG_REG2_ENABLE_BO_MASK
 0x200000u

	)

29021 
	#PMU_MISC2_TOG_REG2_ENABLE_BO_SHIFT
 21

	)

29022 
	#PMU_MISC2_TOG_REG2_OK_MASK
 0x400000u

	)

29023 
	#PMU_MISC2_TOG_REG2_OK_SHIFT
 22

	)

29024 
	#PMU_MISC2_TOG_AUDIO_DIV_MSB_MASK
 0x800000u

	)

29025 
	#PMU_MISC2_TOG_AUDIO_DIV_MSB_SHIFT
 23

	)

29026 
	#PMU_MISC2_TOG_REG0_STEP_TIME_MASK
 0x3000000u

	)

29027 
	#PMU_MISC2_TOG_REG0_STEP_TIME_SHIFT
 24

	)

29028 
	#PMU_MISC2_TOG_REG0_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_TOG_REG0_STEP_TIME_SHIFT
))&
PMU_MISC2_TOG_REG0_STEP_TIME_MASK
)

	)

29029 
	#PMU_MISC2_TOG_REG1_STEP_TIME_MASK
 0xC000000u

	)

29030 
	#PMU_MISC2_TOG_REG1_STEP_TIME_SHIFT
 26

	)

29031 
	#PMU_MISC2_TOG_REG1_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_TOG_REG1_STEP_TIME_SHIFT
))&
PMU_MISC2_TOG_REG1_STEP_TIME_MASK
)

	)

29032 
	#PMU_MISC2_TOG_REG2_STEP_TIME_MASK
 0x30000000u

	)

29033 
	#PMU_MISC2_TOG_REG2_STEP_TIME_SHIFT
 28

	)

29034 
	#PMU_MISC2_TOG_REG2_STEP_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_TOG_REG2_STEP_TIME_SHIFT
))&
PMU_MISC2_TOG_REG2_STEP_TIME_MASK
)

	)

29035 
	#PMU_MISC2_TOG_VIDEO_DIV_MASK
 0xC0000000u

	)

29036 
	#PMU_MISC2_TOG_VIDEO_DIV_SHIFT
 30

	)

29037 
	#PMU_MISC2_TOG_VIDEO_DIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_MISC2_TOG_VIDEO_DIV_SHIFT
))&
PMU_MISC2_TOG_VIDEO_DIV_MASK
)

	)

29039 
	#PMU_LOWPWR_CTRL_SET_RC_OSC_EN_MASK
 0x1u

	)

29040 
	#PMU_LOWPWR_CTRL_SET_RC_OSC_EN_SHIFT
 0

	)

29041 
	#PMU_LOWPWR_CTRL_SET_RC_OSC_PROG_MASK
 0xEu

	)

29042 
	#PMU_LOWPWR_CTRL_SET_RC_OSC_PROG_SHIFT
 1

	)

29043 
	#PMU_LOWPWR_CTRL_SET_RC_OSC_PROG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_LOWPWR_CTRL_SET_RC_OSC_PROG_SHIFT
))&
PMU_LOWPWR_CTRL_SET_RC_OSC_PROG_MASK
)

	)

29044 
	#PMU_LOWPWR_CTRL_SET_OSC_SEL_MASK
 0x10u

	)

29045 
	#PMU_LOWPWR_CTRL_SET_OSC_SEL_SHIFT
 4

	)

29046 
	#PMU_LOWPWR_CTRL_SET_LPBG_SEL_MASK
 0x20u

	)

29047 
	#PMU_LOWPWR_CTRL_SET_LPBG_SEL_SHIFT
 5

	)

29048 
	#PMU_LOWPWR_CTRL_SET_LPBG_TEST_MASK
 0x40u

	)

29049 
	#PMU_LOWPWR_CTRL_SET_LPBG_TEST_SHIFT
 6

	)

29050 
	#PMU_LOWPWR_CTRL_SET_REFTOP_IBIAS_OFF_MASK
 0x80u

	)

29051 
	#PMU_LOWPWR_CTRL_SET_REFTOP_IBIAS_OFF_SHIFT
 7

	)

29052 
	#PMU_LOWPWR_CTRL_SET_L1_PWRGATE_MASK
 0x100u

	)

29053 
	#PMU_LOWPWR_CTRL_SET_L1_PWRGATE_SHIFT
 8

	)

29054 
	#PMU_LOWPWR_CTRL_SET_L2_PWRGATE_MASK
 0x200u

	)

29055 
	#PMU_LOWPWR_CTRL_SET_L2_PWRGATE_SHIFT
 9

	)

29056 
	#PMU_LOWPWR_CTRL_SET_CPU_PWRGATE_MASK
 0x400u

	)

29057 
	#PMU_LOWPWR_CTRL_SET_CPU_PWRGATE_SHIFT
 10

	)

29058 
	#PMU_LOWPWR_CTRL_SET_DISPLAY_PWRGATE_MASK
 0x800u

	)

29059 
	#PMU_LOWPWR_CTRL_SET_DISPLAY_PWRGATE_SHIFT
 11

	)

29060 
	#PMU_LOWPWR_CTRL_SET_RCOSC_CG_OVERRIDE_MASK
 0x2000u

	)

29061 
	#PMU_LOWPWR_CTRL_SET_RCOSC_CG_OVERRIDE_SHIFT
 13

	)

29062 
	#PMU_LOWPWR_CTRL_SET_XTALOSC_PWRUP_DELAY_MASK
 0xC000u

	)

29063 
	#PMU_LOWPWR_CTRL_SET_XTALOSC_PWRUP_DELAY_SHIFT
 14

	)

29064 
	#PMU_LOWPWR_CTRL_SET_XTALOSC_PWRUP_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_LOWPWR_CTRL_SET_XTALOSC_PWRUP_DELAY_SHIFT
))&
PMU_LOWPWR_CTRL_SET_XTALOSC_PWRUP_DELAY_MASK
)

	)

29065 
	#PMU_LOWPWR_CTRL_SET_XTALOSC_PWRUP_STAT_MASK
 0x10000u

	)

29066 
	#PMU_LOWPWR_CTRL_SET_XTALOSC_PWRUP_STAT_SHIFT
 16

	)

29067 
	#PMU_LOWPWR_CTRL_SET_MIX_PWRGATE_MASK
 0x20000u

	)

29068 
	#PMU_LOWPWR_CTRL_SET_MIX_PWRGATE_SHIFT
 17

	)

29069 
	#PMU_LOWPWR_CTRL_SET_GPU_PWRGATE_MASK
 0x40000u

	)

29070 
	#PMU_LOWPWR_CTRL_SET_GPU_PWRGATE_SHIFT
 18

	)

29072 
	#PMU_LOWPWR_CTRL_CLR_RC_OSC_EN_MASK
 0x1u

	)

29073 
	#PMU_LOWPWR_CTRL_CLR_RC_OSC_EN_SHIFT
 0

	)

29074 
	#PMU_LOWPWR_CTRL_CLR_RC_OSC_PROG_MASK
 0xEu

	)

29075 
	#PMU_LOWPWR_CTRL_CLR_RC_OSC_PROG_SHIFT
 1

	)

29076 
	#PMU_LOWPWR_CTRL_CLR_RC_OSC_PROG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_LOWPWR_CTRL_CLR_RC_OSC_PROG_SHIFT
))&
PMU_LOWPWR_CTRL_CLR_RC_OSC_PROG_MASK
)

	)

29077 
	#PMU_LOWPWR_CTRL_CLR_OSC_SEL_MASK
 0x10u

	)

29078 
	#PMU_LOWPWR_CTRL_CLR_OSC_SEL_SHIFT
 4

	)

29079 
	#PMU_LOWPWR_CTRL_CLR_LPBG_SEL_MASK
 0x20u

	)

29080 
	#PMU_LOWPWR_CTRL_CLR_LPBG_SEL_SHIFT
 5

	)

29081 
	#PMU_LOWPWR_CTRL_CLR_LPBG_TEST_MASK
 0x40u

	)

29082 
	#PMU_LOWPWR_CTRL_CLR_LPBG_TEST_SHIFT
 6

	)

29083 
	#PMU_LOWPWR_CTRL_CLR_REFTOP_IBIAS_OFF_MASK
 0x80u

	)

29084 
	#PMU_LOWPWR_CTRL_CLR_REFTOP_IBIAS_OFF_SHIFT
 7

	)

29085 
	#PMU_LOWPWR_CTRL_CLR_L1_PWRGATE_MASK
 0x100u

	)

29086 
	#PMU_LOWPWR_CTRL_CLR_L1_PWRGATE_SHIFT
 8

	)

29087 
	#PMU_LOWPWR_CTRL_CLR_L2_PWRGATE_MASK
 0x200u

	)

29088 
	#PMU_LOWPWR_CTRL_CLR_L2_PWRGATE_SHIFT
 9

	)

29089 
	#PMU_LOWPWR_CTRL_CLR_CPU_PWRGATE_MASK
 0x400u

	)

29090 
	#PMU_LOWPWR_CTRL_CLR_CPU_PWRGATE_SHIFT
 10

	)

29091 
	#PMU_LOWPWR_CTRL_CLR_DISPLAY_PWRGATE_MASK
 0x800u

	)

29092 
	#PMU_LOWPWR_CTRL_CLR_DISPLAY_PWRGATE_SHIFT
 11

	)

29093 
	#PMU_LOWPWR_CTRL_CLR_RCOSC_CG_OVERRIDE_MASK
 0x2000u

	)

29094 
	#PMU_LOWPWR_CTRL_CLR_RCOSC_CG_OVERRIDE_SHIFT
 13

	)

29095 
	#PMU_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_DELAY_MASK
 0xC000u

	)

29096 
	#PMU_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_DELAY_SHIFT
 14

	)

29097 
	#PMU_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_DELAY_SHIFT
))&
PMU_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_DELAY_MASK
)

	)

29098 
	#PMU_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_STAT_MASK
 0x10000u

	)

29099 
	#PMU_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_STAT_SHIFT
 16

	)

29100 
	#PMU_LOWPWR_CTRL_CLR_MIX_PWRGATE_MASK
 0x20000u

	)

29101 
	#PMU_LOWPWR_CTRL_CLR_MIX_PWRGATE_SHIFT
 17

	)

29102 
	#PMU_LOWPWR_CTRL_CLR_GPU_PWRGATE_MASK
 0x40000u

	)

29103 
	#PMU_LOWPWR_CTRL_CLR_GPU_PWRGATE_SHIFT
 18

	)

29105 
	#PMU_LOWPWR_CTRL_TOG_RC_OSC_EN_MASK
 0x1u

	)

29106 
	#PMU_LOWPWR_CTRL_TOG_RC_OSC_EN_SHIFT
 0

	)

29107 
	#PMU_LOWPWR_CTRL_TOG_RC_OSC_PROG_MASK
 0xEu

	)

29108 
	#PMU_LOWPWR_CTRL_TOG_RC_OSC_PROG_SHIFT
 1

	)

29109 
	#PMU_LOWPWR_CTRL_TOG_RC_OSC_PROG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_LOWPWR_CTRL_TOG_RC_OSC_PROG_SHIFT
))&
PMU_LOWPWR_CTRL_TOG_RC_OSC_PROG_MASK
)

	)

29110 
	#PMU_LOWPWR_CTRL_TOG_OSC_SEL_MASK
 0x10u

	)

29111 
	#PMU_LOWPWR_CTRL_TOG_OSC_SEL_SHIFT
 4

	)

29112 
	#PMU_LOWPWR_CTRL_TOG_LPBG_SEL_MASK
 0x20u

	)

29113 
	#PMU_LOWPWR_CTRL_TOG_LPBG_SEL_SHIFT
 5

	)

29114 
	#PMU_LOWPWR_CTRL_TOG_LPBG_TEST_MASK
 0x40u

	)

29115 
	#PMU_LOWPWR_CTRL_TOG_LPBG_TEST_SHIFT
 6

	)

29116 
	#PMU_LOWPWR_CTRL_TOG_REFTOP_IBIAS_OFF_MASK
 0x80u

	)

29117 
	#PMU_LOWPWR_CTRL_TOG_REFTOP_IBIAS_OFF_SHIFT
 7

	)

29118 
	#PMU_LOWPWR_CTRL_TOG_L1_PWRGATE_MASK
 0x100u

	)

29119 
	#PMU_LOWPWR_CTRL_TOG_L1_PWRGATE_SHIFT
 8

	)

29120 
	#PMU_LOWPWR_CTRL_TOG_L2_PWRGATE_MASK
 0x200u

	)

29121 
	#PMU_LOWPWR_CTRL_TOG_L2_PWRGATE_SHIFT
 9

	)

29122 
	#PMU_LOWPWR_CTRL_TOG_CPU_PWRGATE_MASK
 0x400u

	)

29123 
	#PMU_LOWPWR_CTRL_TOG_CPU_PWRGATE_SHIFT
 10

	)

29124 
	#PMU_LOWPWR_CTRL_TOG_DISPLAY_PWRGATE_MASK
 0x800u

	)

29125 
	#PMU_LOWPWR_CTRL_TOG_DISPLAY_PWRGATE_SHIFT
 11

	)

29126 
	#PMU_LOWPWR_CTRL_TOG_RCOSC_CG_OVERRIDE_MASK
 0x2000u

	)

29127 
	#PMU_LOWPWR_CTRL_TOG_RCOSC_CG_OVERRIDE_SHIFT
 13

	)

29128 
	#PMU_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_DELAY_MASK
 0xC000u

	)

29129 
	#PMU_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_DELAY_SHIFT
 14

	)

29130 
	#PMU_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PMU_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_DELAY_SHIFT
))&
PMU_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_DELAY_MASK
)

	)

29131 
	#PMU_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_STAT_MASK
 0x10000u

	)

29132 
	#PMU_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_STAT_SHIFT
 16

	)

29133 
	#PMU_LOWPWR_CTRL_TOG_MIX_PWRGATE_MASK
 0x20000u

	)

29134 
	#PMU_LOWPWR_CTRL_TOG_MIX_PWRGATE_SHIFT
 17

	)

29135 
	#PMU_LOWPWR_CTRL_TOG_GPU_PWRGATE_MASK
 0x40000u

	)

29136 
	#PMU_LOWPWR_CTRL_TOG_GPU_PWRGATE_SHIFT
 18

	)

29144 
	#PMU_BASE
 (0x420C8000u)

	)

29146 
	#PMU
 ((
PMU_Ty≥
 *)
PMU_BASE
)

	)

29147 
	#PMU_BASE_PTR
 (
PMU
)

	)

29149 
	#PMU_BASE_ADDRS
 { 
PMU_BASE
 }

	)

29151 
	#PMU_BASE_PTRS
 { 
PMU
 }

	)

29153 
	#PMU_IRQS
 { 
PMU1_IRQn
 }

	)

29166 
	#PMU_REG_1P1
 
	`PMU_REG_1P1_REG
(
PMU_BASE_PTR
)

	)

29167 
	#PMU_REG_3P0
 
	`PMU_REG_3P0_REG
(
PMU_BASE_PTR
)

	)

29168 
	#PMU_REG_2P5
 
	`PMU_REG_2P5_REG
(
PMU_BASE_PTR
)

	)

29169 
	#PMU_REG_CORE
 
	`PMU_REG_CORE_REG
(
PMU_BASE_PTR
)

	)

29170 
	#PMU_MISC0
 
	`PMU_MISC0_REG
(
PMU_BASE_PTR
)

	)

29171 
	#PMU_MISC1
 
	`PMU_MISC1_REG
(
PMU_BASE_PTR
)

	)

29172 
	#PMU_MISC1_SET
 
	`PMU_MISC1_SET_REG
(
PMU_BASE_PTR
)

	)

29173 
	#PMU_MISC1_CLR
 
	`PMU_MISC1_CLR_REG
(
PMU_BASE_PTR
)

	)

29174 
	#PMU_MISC1_TOG
 
	`PMU_MISC1_TOG_REG
(
PMU_BASE_PTR
)

	)

29175 
	#PMU_MISC2
 
	`PMU_MISC2_REG
(
PMU_BASE_PTR
)

	)

29176 
	#PMU_MISC2_SET
 
	`PMU_MISC2_SET_REG
(
PMU_BASE_PTR
)

	)

29177 
	#PMU_MISC2_CLR
 
	`PMU_MISC2_CLR_REG
(
PMU_BASE_PTR
)

	)

29178 
	#PMU_MISC2_TOG
 
	`PMU_MISC2_TOG_REG
(
PMU_BASE_PTR
)

	)

29179 
	#PMU_LOWPWR_CTRL_SET
 
	`PMU_LOWPWR_CTRL_SET_REG
(
PMU_BASE_PTR
)

	)

29180 
	#PMU_LOWPWR_CTRL_CLR
 
	`PMU_LOWPWR_CTRL_CLR_REG
(
PMU_BASE_PTR
)

	)

29181 
	#PMU_LOWPWR_CTRL_TOG
 
	`PMU_LOWPWR_CTRL_TOG_REG
(
PMU_BASE_PTR
)

	)

29202 
__IO
 
uöt32_t
 
	mPWMCR
;

29203 
__IO
 
uöt32_t
 
	mPWMSR
;

29204 
__IO
 
uöt32_t
 
	mPWMIR
;

29205 
__IO
 
uöt32_t
 
	mPWMSAR
;

29206 
__IO
 
uöt32_t
 
	mPWMPR
;

29207 
__I
 
uöt32_t
 
	mPWMCNR
;

29208 } 
	tPWM_Ty≥
, *
	tPWM_MemM≠På
;

29220 
	#PWM_PWMCR_REG
(
ba£
Ë((ba£)->
PWMCR
)

	)

29221 
	#PWM_PWMSR_REG
(
ba£
Ë((ba£)->
PWMSR
)

	)

29222 
	#PWM_PWMIR_REG
(
ba£
Ë((ba£)->
PWMIR
)

	)

29223 
	#PWM_PWMSAR_REG
(
ba£
Ë((ba£)->
PWMSAR
)

	)

29224 
	#PWM_PWMPR_REG
(
ba£
Ë((ba£)->
PWMPR
)

	)

29225 
	#PWM_PWMCNR_REG
(
ba£
Ë((ba£)->
PWMCNR
)

	)

29241 
	#PWM_PWMCR_EN_MASK
 0x1u

	)

29242 
	#PWM_PWMCR_EN_SHIFT
 0

	)

29243 
	#PWM_PWMCR_REPEAT_MASK
 0x6u

	)

29244 
	#PWM_PWMCR_REPEAT_SHIFT
 1

	)

29245 
	#PWM_PWMCR_REPEAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PWM_PWMCR_REPEAT_SHIFT
))&
PWM_PWMCR_REPEAT_MASK
)

	)

29246 
	#PWM_PWMCR_SWR_MASK
 0x8u

	)

29247 
	#PWM_PWMCR_SWR_SHIFT
 3

	)

29248 
	#PWM_PWMCR_PRESCALER_MASK
 0xFFF0u

	)

29249 
	#PWM_PWMCR_PRESCALER_SHIFT
 4

	)

29250 
	#PWM_PWMCR_PRESCALER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PWM_PWMCR_PRESCALER_SHIFT
))&
PWM_PWMCR_PRESCALER_MASK
)

	)

29251 
	#PWM_PWMCR_CLKSRC_MASK
 0x30000u

	)

29252 
	#PWM_PWMCR_CLKSRC_SHIFT
 16

	)

29253 
	#PWM_PWMCR_CLKSRC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PWM_PWMCR_CLKSRC_SHIFT
))&
PWM_PWMCR_CLKSRC_MASK
)

	)

29254 
	#PWM_PWMCR_POUTC_MASK
 0xC0000u

	)

29255 
	#PWM_PWMCR_POUTC_SHIFT
 18

	)

29256 
	#PWM_PWMCR_POUTC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PWM_PWMCR_POUTC_SHIFT
))&
PWM_PWMCR_POUTC_MASK
)

	)

29257 
	#PWM_PWMCR_HCTR_MASK
 0x100000u

	)

29258 
	#PWM_PWMCR_HCTR_SHIFT
 20

	)

29259 
	#PWM_PWMCR_BCTR_MASK
 0x200000u

	)

29260 
	#PWM_PWMCR_BCTR_SHIFT
 21

	)

29261 
	#PWM_PWMCR_DBGEN_MASK
 0x400000u

	)

29262 
	#PWM_PWMCR_DBGEN_SHIFT
 22

	)

29263 
	#PWM_PWMCR_WAITEN_MASK
 0x800000u

	)

29264 
	#PWM_PWMCR_WAITEN_SHIFT
 23

	)

29265 
	#PWM_PWMCR_DOZEN_MASK
 0x1000000u

	)

29266 
	#PWM_PWMCR_DOZEN_SHIFT
 24

	)

29267 
	#PWM_PWMCR_STOPEN_MASK
 0x2000000u

	)

29268 
	#PWM_PWMCR_STOPEN_SHIFT
 25

	)

29269 
	#PWM_PWMCR_FWM_MASK
 0xC000000u

	)

29270 
	#PWM_PWMCR_FWM_SHIFT
 26

	)

29271 
	#PWM_PWMCR_FWM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PWM_PWMCR_FWM_SHIFT
))&
PWM_PWMCR_FWM_MASK
)

	)

29273 
	#PWM_PWMSR_FIFOAV_MASK
 0x7u

	)

29274 
	#PWM_PWMSR_FIFOAV_SHIFT
 0

	)

29275 
	#PWM_PWMSR_FIFOAV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PWM_PWMSR_FIFOAV_SHIFT
))&
PWM_PWMSR_FIFOAV_MASK
)

	)

29276 
	#PWM_PWMSR_FE_MASK
 0x8u

	)

29277 
	#PWM_PWMSR_FE_SHIFT
 3

	)

29278 
	#PWM_PWMSR_ROV_MASK
 0x10u

	)

29279 
	#PWM_PWMSR_ROV_SHIFT
 4

	)

29280 
	#PWM_PWMSR_CMP_MASK
 0x20u

	)

29281 
	#PWM_PWMSR_CMP_SHIFT
 5

	)

29282 
	#PWM_PWMSR_FWE_MASK
 0x40u

	)

29283 
	#PWM_PWMSR_FWE_SHIFT
 6

	)

29285 
	#PWM_PWMIR_FIE_MASK
 0x1u

	)

29286 
	#PWM_PWMIR_FIE_SHIFT
 0

	)

29287 
	#PWM_PWMIR_RIE_MASK
 0x2u

	)

29288 
	#PWM_PWMIR_RIE_SHIFT
 1

	)

29289 
	#PWM_PWMIR_CIE_MASK
 0x4u

	)

29290 
	#PWM_PWMIR_CIE_SHIFT
 2

	)

29292 
	#PWM_PWMSAR_SAMPLE_MASK
 0xFFFFu

	)

29293 
	#PWM_PWMSAR_SAMPLE_SHIFT
 0

	)

29294 
	#PWM_PWMSAR_SAMPLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PWM_PWMSAR_SAMPLE_SHIFT
))&
PWM_PWMSAR_SAMPLE_MASK
)

	)

29296 
	#PWM_PWMPR_PERIOD_MASK
 0xFFFFu

	)

29297 
	#PWM_PWMPR_PERIOD_SHIFT
 0

	)

29298 
	#PWM_PWMPR_PERIOD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PWM_PWMPR_PERIOD_SHIFT
))&
PWM_PWMPR_PERIOD_MASK
)

	)

29300 
	#PWM_PWMCNR_COUNT_MASK
 0xFFFFu

	)

29301 
	#PWM_PWMCNR_COUNT_SHIFT
 0

	)

29302 
	#PWM_PWMCNR_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PWM_PWMCNR_COUNT_SHIFT
))&
PWM_PWMCNR_COUNT_MASK
)

	)

29310 
	#PWM1_BASE
 (0x42080000u)

	)

29312 
	#PWM1
 ((
PWM_Ty≥
 *)
PWM1_BASE
)

	)

29313 
	#PWM1_BASE_PTR
 (
PWM1
)

	)

29315 
	#PWM2_BASE
 (0x42084000u)

	)

29317 
	#PWM2
 ((
PWM_Ty≥
 *)
PWM2_BASE
)

	)

29318 
	#PWM2_BASE_PTR
 (
PWM2
)

	)

29320 
	#PWM3_BASE
 (0x42088000u)

	)

29322 
	#PWM3
 ((
PWM_Ty≥
 *)
PWM3_BASE
)

	)

29323 
	#PWM3_BASE_PTR
 (
PWM3
)

	)

29325 
	#PWM4_BASE
 (0x4208C000u)

	)

29327 
	#PWM4
 ((
PWM_Ty≥
 *)
PWM4_BASE
)

	)

29328 
	#PWM4_BASE_PTR
 (
PWM4
)

	)

29330 
	#PWM5_BASE
 (0x422A4000u)

	)

29332 
	#PWM5
 ((
PWM_Ty≥
 *)
PWM5_BASE
)

	)

29333 
	#PWM5_BASE_PTR
 (
PWM5
)

	)

29335 
	#PWM6_BASE
 (0x422A8000u)

	)

29337 
	#PWM6
 ((
PWM_Ty≥
 *)
PWM6_BASE
)

	)

29338 
	#PWM6_BASE_PTR
 (
PWM6
)

	)

29340 
	#PWM7_BASE
 (0x422AC000u)

	)

29342 
	#PWM7
 ((
PWM_Ty≥
 *)
PWM7_BASE
)

	)

29343 
	#PWM7_BASE_PTR
 (
PWM7
)

	)

29345 
	#PWM8_BASE
 (0x422B0000u)

	)

29347 
	#PWM8
 ((
PWM_Ty≥
 *)
PWM8_BASE
)

	)

29348 
	#PWM8_BASE_PTR
 (
PWM8
)

	)

29350 
	#PWM_BASE_ADDRS
 { 
PWM1_BASE
, 
PWM2_BASE
, 
PWM3_BASE
, 
PWM4_BASE
, 
PWM5_BASE
, 
PWM6_BASE
, 
PWM7_BASE
, 
PWM8_BASE
 }

	)

29352 
	#PWM_BASE_PTRS
 { 
PWM1
, 
PWM2
, 
PWM3
, 
PWM4
, 
PWM5
, 
PWM6
, 
PWM7
, 
PWM8
 }

	)

29365 
	#PWM1_PWMCR
 
	`PWM_PWMCR_REG
(
PWM1_BASE_PTR
)

	)

29366 
	#PWM1_PWMSR
 
	`PWM_PWMSR_REG
(
PWM1_BASE_PTR
)

	)

29367 
	#PWM1_PWMIR
 
	`PWM_PWMIR_REG
(
PWM1_BASE_PTR
)

	)

29368 
	#PWM1_PWMSAR
 
	`PWM_PWMSAR_REG
(
PWM1_BASE_PTR
)

	)

29369 
	#PWM1_PWMPR
 
	`PWM_PWMPR_REG
(
PWM1_BASE_PTR
)

	)

29370 
	#PWM1_PWMCNR
 
	`PWM_PWMCNR_REG
(
PWM1_BASE_PTR
)

	)

29372 
	#PWM2_PWMCR
 
	`PWM_PWMCR_REG
(
PWM2_BASE_PTR
)

	)

29373 
	#PWM2_PWMSR
 
	`PWM_PWMSR_REG
(
PWM2_BASE_PTR
)

	)

29374 
	#PWM2_PWMIR
 
	`PWM_PWMIR_REG
(
PWM2_BASE_PTR
)

	)

29375 
	#PWM2_PWMSAR
 
	`PWM_PWMSAR_REG
(
PWM2_BASE_PTR
)

	)

29376 
	#PWM2_PWMPR
 
	`PWM_PWMPR_REG
(
PWM2_BASE_PTR
)

	)

29377 
	#PWM2_PWMCNR
 
	`PWM_PWMCNR_REG
(
PWM2_BASE_PTR
)

	)

29379 
	#PWM3_PWMCR
 
	`PWM_PWMCR_REG
(
PWM3_BASE_PTR
)

	)

29380 
	#PWM3_PWMSR
 
	`PWM_PWMSR_REG
(
PWM3_BASE_PTR
)

	)

29381 
	#PWM3_PWMIR
 
	`PWM_PWMIR_REG
(
PWM3_BASE_PTR
)

	)

29382 
	#PWM3_PWMSAR
 
	`PWM_PWMSAR_REG
(
PWM3_BASE_PTR
)

	)

29383 
	#PWM3_PWMPR
 
	`PWM_PWMPR_REG
(
PWM3_BASE_PTR
)

	)

29384 
	#PWM3_PWMCNR
 
	`PWM_PWMCNR_REG
(
PWM3_BASE_PTR
)

	)

29386 
	#PWM4_PWMCR
 
	`PWM_PWMCR_REG
(
PWM4_BASE_PTR
)

	)

29387 
	#PWM4_PWMSR
 
	`PWM_PWMSR_REG
(
PWM4_BASE_PTR
)

	)

29388 
	#PWM4_PWMIR
 
	`PWM_PWMIR_REG
(
PWM4_BASE_PTR
)

	)

29389 
	#PWM4_PWMSAR
 
	`PWM_PWMSAR_REG
(
PWM4_BASE_PTR
)

	)

29390 
	#PWM4_PWMPR
 
	`PWM_PWMPR_REG
(
PWM4_BASE_PTR
)

	)

29391 
	#PWM4_PWMCNR
 
	`PWM_PWMCNR_REG
(
PWM4_BASE_PTR
)

	)

29393 
	#PWM5_PWMCR
 
	`PWM_PWMCR_REG
(
PWM5_BASE_PTR
)

	)

29394 
	#PWM5_PWMSR
 
	`PWM_PWMSR_REG
(
PWM5_BASE_PTR
)

	)

29395 
	#PWM5_PWMIR
 
	`PWM_PWMIR_REG
(
PWM5_BASE_PTR
)

	)

29396 
	#PWM5_PWMSAR
 
	`PWM_PWMSAR_REG
(
PWM5_BASE_PTR
)

	)

29397 
	#PWM5_PWMPR
 
	`PWM_PWMPR_REG
(
PWM5_BASE_PTR
)

	)

29398 
	#PWM5_PWMCNR
 
	`PWM_PWMCNR_REG
(
PWM5_BASE_PTR
)

	)

29400 
	#PWM6_PWMCR
 
	`PWM_PWMCR_REG
(
PWM6_BASE_PTR
)

	)

29401 
	#PWM6_PWMSR
 
	`PWM_PWMSR_REG
(
PWM6_BASE_PTR
)

	)

29402 
	#PWM6_PWMIR
 
	`PWM_PWMIR_REG
(
PWM6_BASE_PTR
)

	)

29403 
	#PWM6_PWMSAR
 
	`PWM_PWMSAR_REG
(
PWM6_BASE_PTR
)

	)

29404 
	#PWM6_PWMPR
 
	`PWM_PWMPR_REG
(
PWM6_BASE_PTR
)

	)

29405 
	#PWM6_PWMCNR
 
	`PWM_PWMCNR_REG
(
PWM6_BASE_PTR
)

	)

29407 
	#PWM7_PWMCR
 
	`PWM_PWMCR_REG
(
PWM7_BASE_PTR
)

	)

29408 
	#PWM7_PWMSR
 
	`PWM_PWMSR_REG
(
PWM7_BASE_PTR
)

	)

29409 
	#PWM7_PWMIR
 
	`PWM_PWMIR_REG
(
PWM7_BASE_PTR
)

	)

29410 
	#PWM7_PWMSAR
 
	`PWM_PWMSAR_REG
(
PWM7_BASE_PTR
)

	)

29411 
	#PWM7_PWMPR
 
	`PWM_PWMPR_REG
(
PWM7_BASE_PTR
)

	)

29412 
	#PWM7_PWMCNR
 
	`PWM_PWMCNR_REG
(
PWM7_BASE_PTR
)

	)

29414 
	#PWM8_PWMCR
 
	`PWM_PWMCR_REG
(
PWM8_BASE_PTR
)

	)

29415 
	#PWM8_PWMSR
 
	`PWM_PWMSR_REG
(
PWM8_BASE_PTR
)

	)

29416 
	#PWM8_PWMIR
 
	`PWM_PWMIR_REG
(
PWM8_BASE_PTR
)

	)

29417 
	#PWM8_PWMSAR
 
	`PWM_PWMSAR_REG
(
PWM8_BASE_PTR
)

	)

29418 
	#PWM8_PWMPR
 
	`PWM_PWMPR_REG
(
PWM8_BASE_PTR
)

	)

29419 
	#PWM8_PWMCNR
 
	`PWM_PWMCNR_REG
(
PWM8_BASE_PTR
)

	)

29440 
__IO
 
uöt32_t
 
	mCTRL
;

29441 
uöt8_t
 
	mRESERVED_0
[12];

29442 
__IO
 
uöt32_t
 
	mSTAT
;

29443 
uöt8_t
 
	mRESERVED_1
[12];

29444 
__IO
 
uöt32_t
 
	mOUT_CTRL
;

29445 
uöt8_t
 
	mRESERVED_2
[12];

29446 
__IO
 
uöt32_t
 
	mOUT_BUF
;

29447 
uöt8_t
 
	mRESERVED_3
[12];

29448 
__IO
 
uöt32_t
 
	mOUT_BUF2
;

29449 
uöt8_t
 
	mRESERVED_4
[12];

29450 
__IO
 
uöt32_t
 
	mOUT_PITCH
;

29451 
uöt8_t
 
	mRESERVED_5
[12];

29452 
__IO
 
uöt32_t
 
	mOUT_LRC
;

29453 
uöt8_t
 
	mRESERVED_6
[12];

29454 
__IO
 
uöt32_t
 
	mOUT_PS_ULC
;

29455 
uöt8_t
 
	mRESERVED_7
[12];

29456 
__IO
 
uöt32_t
 
	mOUT_PS_LRC
;

29457 
uöt8_t
 
	mRESERVED_8
[12];

29458 
__IO
 
uöt32_t
 
	mOUT_AS_ULC
;

29459 
uöt8_t
 
	mRESERVED_9
[12];

29460 
__IO
 
uöt32_t
 
	mOUT_AS_LRC
;

29461 
uöt8_t
 
	mRESERVED_10
[12];

29462 
__IO
 
uöt32_t
 
	mPS_CTRL
;

29463 
uöt8_t
 
	mRESERVED_11
[12];

29464 
__IO
 
uöt32_t
 
	mPS_BUF
;

29465 
uöt8_t
 
	mRESERVED_12
[12];

29466 
__IO
 
uöt32_t
 
	mPS_UBUF
;

29467 
uöt8_t
 
	mRESERVED_13
[12];

29468 
__IO
 
uöt32_t
 
	mPS_VBUF
;

29469 
uöt8_t
 
	mRESERVED_14
[12];

29470 
__IO
 
uöt32_t
 
	mPS_PITCH
;

29471 
uöt8_t
 
	mRESERVED_15
[12];

29472 
__IO
 
uöt32_t
 
	mPS_BACKGROUND
;

29473 
uöt8_t
 
	mRESERVED_16
[12];

29474 
__IO
 
uöt32_t
 
	mPS_SCALE
;

29475 
uöt8_t
 
	mRESERVED_17
[12];

29476 
__IO
 
uöt32_t
 
	mPS_OFFSET
;

29477 
uöt8_t
 
	mRESERVED_18
[12];

29478 
__IO
 
uöt32_t
 
	mPS_CLRKEYLOW
;

29479 
uöt8_t
 
	mRESERVED_19
[12];

29480 
__IO
 
uöt32_t
 
	mPS_CLRKEYHIGH
;

29481 
uöt8_t
 
	mRESERVED_20
[12];

29482 
__IO
 
uöt32_t
 
	mAS_CTRL
;

29483 
uöt8_t
 
	mRESERVED_21
[12];

29484 
__IO
 
uöt32_t
 
	mAS_BUF
;

29485 
uöt8_t
 
	mRESERVED_22
[12];

29486 
__IO
 
uöt32_t
 
	mAS_PITCH
;

29487 
uöt8_t
 
	mRESERVED_23
[12];

29488 
__IO
 
uöt32_t
 
	mAS_CLRKEYLOW
;

29489 
uöt8_t
 
	mRESERVED_24
[12];

29490 
__IO
 
uöt32_t
 
	mAS_CLRKEYHIGH
;

29491 
uöt8_t
 
	mRESERVED_25
[12];

29492 
__IO
 
uöt32_t
 
	mCSC1_COEF0
;

29493 
uöt8_t
 
	mRESERVED_26
[12];

29494 
__IO
 
uöt32_t
 
	mCSC1_COEF1
;

29495 
uöt8_t
 
	mRESERVED_27
[12];

29496 
__IO
 
uöt32_t
 
	mCSC1_COEF2
;

29497 
uöt8_t
 
	mRESERVED_28
[12];

29498 
__IO
 
uöt32_t
 
	mCSC2_CTRL
;

29499 
uöt8_t
 
	mRESERVED_29
[12];

29500 
__IO
 
uöt32_t
 
	mCSC2_COEF0
;

29501 
uöt8_t
 
	mRESERVED_30
[12];

29502 
__IO
 
uöt32_t
 
	mCSC2_COEF1
;

29503 
uöt8_t
 
	mRESERVED_31
[12];

29504 
__IO
 
uöt32_t
 
	mCSC2_COEF2
;

29505 
uöt8_t
 
	mRESERVED_32
[12];

29506 
__IO
 
uöt32_t
 
	mCSC2_COEF3
;

29507 
uöt8_t
 
	mRESERVED_33
[12];

29508 
__IO
 
uöt32_t
 
	mCSC2_COEF4
;

29509 
uöt8_t
 
	mRESERVED_34
[12];

29510 
__IO
 
uöt32_t
 
	mCSC2_COEF5
;

29511 
uöt8_t
 
	mRESERVED_35
[12];

29512 
__IO
 
uöt32_t
 
	mLUT_CTRL
;

29513 
uöt8_t
 
	mRESERVED_36
[12];

29514 
__IO
 
uöt32_t
 
	mLUT_ADDR
;

29515 
uöt8_t
 
	mRESERVED_37
[12];

29516 
__IO
 
uöt32_t
 
	mLUT_DATA
;

29517 
uöt8_t
 
	mRESERVED_38
[12];

29518 
__IO
 
uöt32_t
 
	mLUT_EXTMEM
;

29519 
uöt8_t
 
	mRESERVED_39
[12];

29520 
__IO
 
uöt32_t
 
	mCFA
;

29521 
uöt8_t
 
	mRESERVED_40
[12];

29522 
__IO
 
uöt32_t
 
	mHIST_CTRL
;

29523 
uöt8_t
 
	mRESERVED_41
[12];

29524 
__IO
 
uöt32_t
 
	mHIST2_PARAM
;

29525 
uöt8_t
 
	mRESERVED_42
[12];

29526 
__IO
 
uöt32_t
 
	mHIST4_PARAM
;

29527 
uöt8_t
 
	mRESERVED_43
[12];

29528 
__IO
 
uöt32_t
 
	mHIST8_PARAM0
;

29529 
uöt8_t
 
	mRESERVED_44
[12];

29530 
__IO
 
uöt32_t
 
	mHIST8_PARAM1
;

29531 
uöt8_t
 
	mRESERVED_45
[12];

29532 
__IO
 
uöt32_t
 
	mHIST16_PARAM0
;

29533 
uöt8_t
 
	mRESERVED_46
[12];

29534 
__IO
 
uöt32_t
 
	mHIST16_PARAM1
;

29535 
uöt8_t
 
	mRESERVED_47
[12];

29536 
__IO
 
uöt32_t
 
	mHIST16_PARAM2
;

29537 
uöt8_t
 
	mRESERVED_48
[12];

29538 
__IO
 
uöt32_t
 
	mHIST16_PARAM3
;

29539 
uöt8_t
 
	mRESERVED_49
[12];

29540 
__IO
 
uöt32_t
 
	mPOWER
;

29541 
uöt8_t
 
	mRESERVED_50
[220];

29542 
__IO
 
uöt32_t
 
	mNEXT
;

29543 } 
	tPXP_Ty≥
, *
	tPXP_MemM≠På
;

29555 
	#PXP_CTRL_REG
(
ba£
Ë((ba£)->
CTRL
)

	)

29556 
	#PXP_STAT_REG
(
ba£
Ë((ba£)->
STAT
)

	)

29557 
	#PXP_OUT_CTRL_REG
(
ba£
Ë((ba£)->
OUT_CTRL
)

	)

29558 
	#PXP_OUT_BUF_REG
(
ba£
Ë((ba£)->
OUT_BUF
)

	)

29559 
	#PXP_OUT_BUF2_REG
(
ba£
Ë((ba£)->
OUT_BUF2
)

	)

29560 
	#PXP_OUT_PITCH_REG
(
ba£
Ë((ba£)->
OUT_PITCH
)

	)

29561 
	#PXP_OUT_LRC_REG
(
ba£
Ë((ba£)->
OUT_LRC
)

	)

29562 
	#PXP_OUT_PS_ULC_REG
(
ba£
Ë((ba£)->
OUT_PS_ULC
)

	)

29563 
	#PXP_OUT_PS_LRC_REG
(
ba£
Ë((ba£)->
OUT_PS_LRC
)

	)

29564 
	#PXP_OUT_AS_ULC_REG
(
ba£
Ë((ba£)->
OUT_AS_ULC
)

	)

29565 
	#PXP_OUT_AS_LRC_REG
(
ba£
Ë((ba£)->
OUT_AS_LRC
)

	)

29566 
	#PXP_PS_CTRL_REG
(
ba£
Ë((ba£)->
PS_CTRL
)

	)

29567 
	#PXP_PS_BUF_REG
(
ba£
Ë((ba£)->
PS_BUF
)

	)

29568 
	#PXP_PS_UBUF_REG
(
ba£
Ë((ba£)->
PS_UBUF
)

	)

29569 
	#PXP_PS_VBUF_REG
(
ba£
Ë((ba£)->
PS_VBUF
)

	)

29570 
	#PXP_PS_PITCH_REG
(
ba£
Ë((ba£)->
PS_PITCH
)

	)

29571 
	#PXP_PS_BACKGROUND_REG
(
ba£
Ë((ba£)->
PS_BACKGROUND
)

	)

29572 
	#PXP_PS_SCALE_REG
(
ba£
Ë((ba£)->
PS_SCALE
)

	)

29573 
	#PXP_PS_OFFSET_REG
(
ba£
Ë((ba£)->
PS_OFFSET
)

	)

29574 
	#PXP_PS_CLRKEYLOW_REG
(
ba£
Ë((ba£)->
PS_CLRKEYLOW
)

	)

29575 
	#PXP_PS_CLRKEYHIGH_REG
(
ba£
Ë((ba£)->
PS_CLRKEYHIGH
)

	)

29576 
	#PXP_AS_CTRL_REG
(
ba£
Ë((ba£)->
AS_CTRL
)

	)

29577 
	#PXP_AS_BUF_REG
(
ba£
Ë((ba£)->
AS_BUF
)

	)

29578 
	#PXP_AS_PITCH_REG
(
ba£
Ë((ba£)->
AS_PITCH
)

	)

29579 
	#PXP_AS_CLRKEYLOW_REG
(
ba£
Ë((ba£)->
AS_CLRKEYLOW
)

	)

29580 
	#PXP_AS_CLRKEYHIGH_REG
(
ba£
Ë((ba£)->
AS_CLRKEYHIGH
)

	)

29581 
	#PXP_CSC1_COEF0_REG
(
ba£
Ë((ba£)->
CSC1_COEF0
)

	)

29582 
	#PXP_CSC1_COEF1_REG
(
ba£
Ë((ba£)->
CSC1_COEF1
)

	)

29583 
	#PXP_CSC1_COEF2_REG
(
ba£
Ë((ba£)->
CSC1_COEF2
)

	)

29584 
	#PXP_CSC2_CTRL_REG
(
ba£
Ë((ba£)->
CSC2_CTRL
)

	)

29585 
	#PXP_CSC2_COEF0_REG
(
ba£
Ë((ba£)->
CSC2_COEF0
)

	)

29586 
	#PXP_CSC2_COEF1_REG
(
ba£
Ë((ba£)->
CSC2_COEF1
)

	)

29587 
	#PXP_CSC2_COEF2_REG
(
ba£
Ë((ba£)->
CSC2_COEF2
)

	)

29588 
	#PXP_CSC2_COEF3_REG
(
ba£
Ë((ba£)->
CSC2_COEF3
)

	)

29589 
	#PXP_CSC2_COEF4_REG
(
ba£
Ë((ba£)->
CSC2_COEF4
)

	)

29590 
	#PXP_CSC2_COEF5_REG
(
ba£
Ë((ba£)->
CSC2_COEF5
)

	)

29591 
	#PXP_LUT_CTRL_REG
(
ba£
Ë((ba£)->
LUT_CTRL
)

	)

29592 
	#PXP_LUT_ADDR_REG
(
ba£
Ë((ba£)->
LUT_ADDR
)

	)

29593 
	#PXP_LUT_DATA_REG
(
ba£
Ë((ba£)->
LUT_DATA
)

	)

29594 
	#PXP_LUT_EXTMEM_REG
(
ba£
Ë((ba£)->
LUT_EXTMEM
)

	)

29595 
	#PXP_CFA_REG
(
ba£
Ë((ba£)->
CFA
)

	)

29596 
	#PXP_HIST_CTRL_REG
(
ba£
Ë((ba£)->
HIST_CTRL
)

	)

29597 
	#PXP_HIST2_PARAM_REG
(
ba£
Ë((ba£)->
HIST2_PARAM
)

	)

29598 
	#PXP_HIST4_PARAM_REG
(
ba£
Ë((ba£)->
HIST4_PARAM
)

	)

29599 
	#PXP_HIST8_PARAM0_REG
(
ba£
Ë((ba£)->
HIST8_PARAM0
)

	)

29600 
	#PXP_HIST8_PARAM1_REG
(
ba£
Ë((ba£)->
HIST8_PARAM1
)

	)

29601 
	#PXP_HIST16_PARAM0_REG
(
ba£
Ë((ba£)->
HIST16_PARAM0
)

	)

29602 
	#PXP_HIST16_PARAM1_REG
(
ba£
Ë((ba£)->
HIST16_PARAM1
)

	)

29603 
	#PXP_HIST16_PARAM2_REG
(
ba£
Ë((ba£)->
HIST16_PARAM2
)

	)

29604 
	#PXP_HIST16_PARAM3_REG
(
ba£
Ë((ba£)->
HIST16_PARAM3
)

	)

29605 
	#PXP_POWER_REG
(
ba£
Ë((ba£)->
POWER
)

	)

29606 
	#PXP_NEXT_REG
(
ba£
Ë((ba£)->
NEXT
)

	)

29622 
	#PXP_CTRL_ENABLE_MASK
 0x1u

	)

29623 
	#PXP_CTRL_ENABLE_SHIFT
 0

	)

29624 
	#PXP_CTRL_IRQ_ENABLE_MASK
 0x2u

	)

29625 
	#PXP_CTRL_IRQ_ENABLE_SHIFT
 1

	)

29626 
	#PXP_CTRL_NEXT_IRQ_ENABLE_MASK
 0x4u

	)

29627 
	#PXP_CTRL_NEXT_IRQ_ENABLE_SHIFT
 2

	)

29628 
	#PXP_CTRL_LUT_DMA_IRQ_ENABLE_MASK
 0x8u

	)

29629 
	#PXP_CTRL_LUT_DMA_IRQ_ENABLE_SHIFT
 3

	)

29630 
	#PXP_CTRL_ENABLE_LCD_HANDSHAKE_MASK
 0x10u

	)

29631 
	#PXP_CTRL_ENABLE_LCD_HANDSHAKE_SHIFT
 4

	)

29632 
	#PXP_CTRL_RSVD0_MASK
 0xE0u

	)

29633 
	#PXP_CTRL_RSVD0_SHIFT
 5

	)

29634 
	#PXP_CTRL_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CTRL_RSVD0_SHIFT
))&
PXP_CTRL_RSVD0_MASK
)

	)

29635 
	#PXP_CTRL_ROTATE_MASK
 0x300u

	)

29636 
	#PXP_CTRL_ROTATE_SHIFT
 8

	)

29637 
	#PXP_CTRL_ROTATE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CTRL_ROTATE_SHIFT
))&
PXP_CTRL_ROTATE_MASK
)

	)

29638 
	#PXP_CTRL_HFLIP_MASK
 0x400u

	)

29639 
	#PXP_CTRL_HFLIP_SHIFT
 10

	)

29640 
	#PXP_CTRL_VFLIP_MASK
 0x800u

	)

29641 
	#PXP_CTRL_VFLIP_SHIFT
 11

	)

29642 
	#PXP_CTRL_RSVD1_MASK
 0x3FF000u

	)

29643 
	#PXP_CTRL_RSVD1_SHIFT
 12

	)

29644 
	#PXP_CTRL_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CTRL_RSVD1_SHIFT
))&
PXP_CTRL_RSVD1_MASK
)

	)

29645 
	#PXP_CTRL_ROT_POS_MASK
 0x400000u

	)

29646 
	#PXP_CTRL_ROT_POS_SHIFT
 22

	)

29647 
	#PXP_CTRL_BLOCK_SIZE_MASK
 0x800000u

	)

29648 
	#PXP_CTRL_BLOCK_SIZE_SHIFT
 23

	)

29649 
	#PXP_CTRL_RSVD3_MASK
 0xF000000u

	)

29650 
	#PXP_CTRL_RSVD3_SHIFT
 24

	)

29651 
	#PXP_CTRL_RSVD3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CTRL_RSVD3_SHIFT
))&
PXP_CTRL_RSVD3_MASK
)

	)

29652 
	#PXP_CTRL_EN_REPEAT_MASK
 0x10000000u

	)

29653 
	#PXP_CTRL_EN_REPEAT_SHIFT
 28

	)

29654 
	#PXP_CTRL_RSVD4_MASK
 0x20000000u

	)

29655 
	#PXP_CTRL_RSVD4_SHIFT
 29

	)

29656 
	#PXP_CTRL_CLKGATE_MASK
 0x40000000u

	)

29657 
	#PXP_CTRL_CLKGATE_SHIFT
 30

	)

29658 
	#PXP_CTRL_SFTRST_MASK
 0x80000000u

	)

29659 
	#PXP_CTRL_SFTRST_SHIFT
 31

	)

29661 
	#PXP_STAT_IRQ_MASK
 0x1u

	)

29662 
	#PXP_STAT_IRQ_SHIFT
 0

	)

29663 
	#PXP_STAT_AXI_WRITE_ERROR_MASK
 0x2u

	)

29664 
	#PXP_STAT_AXI_WRITE_ERROR_SHIFT
 1

	)

29665 
	#PXP_STAT_AXI_READ_ERROR_MASK
 0x4u

	)

29666 
	#PXP_STAT_AXI_READ_ERROR_SHIFT
 2

	)

29667 
	#PXP_STAT_NEXT_IRQ_MASK
 0x8u

	)

29668 
	#PXP_STAT_NEXT_IRQ_SHIFT
 3

	)

29669 
	#PXP_STAT_AXI_ERROR_ID_MASK
 0xF0u

	)

29670 
	#PXP_STAT_AXI_ERROR_ID_SHIFT
 4

	)

29671 
	#PXP_STAT_AXI_ERROR_ID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_STAT_AXI_ERROR_ID_SHIFT
))&
PXP_STAT_AXI_ERROR_ID_MASK
)

	)

29672 
	#PXP_STAT_LUT_DMA_LOAD_DONE_IRQ_MASK
 0x100u

	)

29673 
	#PXP_STAT_LUT_DMA_LOAD_DONE_IRQ_SHIFT
 8

	)

29674 
	#PXP_STAT_RSVD2_MASK
 0xFE00u

	)

29675 
	#PXP_STAT_RSVD2_SHIFT
 9

	)

29676 
	#PXP_STAT_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_STAT_RSVD2_SHIFT
))&
PXP_STAT_RSVD2_MASK
)

	)

29677 
	#PXP_STAT_BLOCKY_MASK
 0xFF0000u

	)

29678 
	#PXP_STAT_BLOCKY_SHIFT
 16

	)

29679 
	#PXP_STAT_BLOCKY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_STAT_BLOCKY_SHIFT
))&
PXP_STAT_BLOCKY_MASK
)

	)

29680 
	#PXP_STAT_BLOCKX_MASK
 0xFF000000u

	)

29681 
	#PXP_STAT_BLOCKX_SHIFT
 24

	)

29682 
	#PXP_STAT_BLOCKX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_STAT_BLOCKX_SHIFT
))&
PXP_STAT_BLOCKX_MASK
)

	)

29684 
	#PXP_OUT_CTRL_FORMAT_MASK
 0x1Fu

	)

29685 
	#PXP_OUT_CTRL_FORMAT_SHIFT
 0

	)

29686 
	#PXP_OUT_CTRL_FORMAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_CTRL_FORMAT_SHIFT
))&
PXP_OUT_CTRL_FORMAT_MASK
)

	)

29687 
	#PXP_OUT_CTRL_RSVD0_MASK
 0xE0u

	)

29688 
	#PXP_OUT_CTRL_RSVD0_SHIFT
 5

	)

29689 
	#PXP_OUT_CTRL_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_CTRL_RSVD0_SHIFT
))&
PXP_OUT_CTRL_RSVD0_MASK
)

	)

29690 
	#PXP_OUT_CTRL_INTERLACED_OUTPUT_MASK
 0x300u

	)

29691 
	#PXP_OUT_CTRL_INTERLACED_OUTPUT_SHIFT
 8

	)

29692 
	#PXP_OUT_CTRL_INTERLACED_OUTPUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_CTRL_INTERLACED_OUTPUT_SHIFT
))&
PXP_OUT_CTRL_INTERLACED_OUTPUT_MASK
)

	)

29693 
	#PXP_OUT_CTRL_RSVD1_MASK
 0x7FFC00u

	)

29694 
	#PXP_OUT_CTRL_RSVD1_SHIFT
 10

	)

29695 
	#PXP_OUT_CTRL_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_CTRL_RSVD1_SHIFT
))&
PXP_OUT_CTRL_RSVD1_MASK
)

	)

29696 
	#PXP_OUT_CTRL_ALPHA_OUTPUT_MASK
 0x800000u

	)

29697 
	#PXP_OUT_CTRL_ALPHA_OUTPUT_SHIFT
 23

	)

29698 
	#PXP_OUT_CTRL_ALPHA_MASK
 0xFF000000u

	)

29699 
	#PXP_OUT_CTRL_ALPHA_SHIFT
 24

	)

29700 
	#PXP_OUT_CTRL_ALPHA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_CTRL_ALPHA_SHIFT
))&
PXP_OUT_CTRL_ALPHA_MASK
)

	)

29702 
	#PXP_OUT_BUF_ADDR_MASK
 0xFFFFFFFFu

	)

29703 
	#PXP_OUT_BUF_ADDR_SHIFT
 0

	)

29704 
	#PXP_OUT_BUF_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_BUF_ADDR_SHIFT
))&
PXP_OUT_BUF_ADDR_MASK
)

	)

29706 
	#PXP_OUT_BUF2_ADDR_MASK
 0xFFFFFFFFu

	)

29707 
	#PXP_OUT_BUF2_ADDR_SHIFT
 0

	)

29708 
	#PXP_OUT_BUF2_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_BUF2_ADDR_SHIFT
))&
PXP_OUT_BUF2_ADDR_MASK
)

	)

29710 
	#PXP_OUT_PITCH_PITCH_MASK
 0xFFFFu

	)

29711 
	#PXP_OUT_PITCH_PITCH_SHIFT
 0

	)

29712 
	#PXP_OUT_PITCH_PITCH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_PITCH_PITCH_SHIFT
))&
PXP_OUT_PITCH_PITCH_MASK
)

	)

29713 
	#PXP_OUT_PITCH_RSVD_MASK
 0xFFFF0000u

	)

29714 
	#PXP_OUT_PITCH_RSVD_SHIFT
 16

	)

29715 
	#PXP_OUT_PITCH_RSVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_PITCH_RSVD_SHIFT
))&
PXP_OUT_PITCH_RSVD_MASK
)

	)

29717 
	#PXP_OUT_LRC_Y_MASK
 0x3FFFu

	)

29718 
	#PXP_OUT_LRC_Y_SHIFT
 0

	)

29719 
	#PXP_OUT_LRC_Y
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_LRC_Y_SHIFT
))&
PXP_OUT_LRC_Y_MASK
)

	)

29720 
	#PXP_OUT_LRC_RSVD0_MASK
 0xC000u

	)

29721 
	#PXP_OUT_LRC_RSVD0_SHIFT
 14

	)

29722 
	#PXP_OUT_LRC_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_LRC_RSVD0_SHIFT
))&
PXP_OUT_LRC_RSVD0_MASK
)

	)

29723 
	#PXP_OUT_LRC_X_MASK
 0x3FFF0000u

	)

29724 
	#PXP_OUT_LRC_X_SHIFT
 16

	)

29725 
	#PXP_OUT_LRC_X
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_LRC_X_SHIFT
))&
PXP_OUT_LRC_X_MASK
)

	)

29726 
	#PXP_OUT_LRC_RSVD1_MASK
 0xC0000000u

	)

29727 
	#PXP_OUT_LRC_RSVD1_SHIFT
 30

	)

29728 
	#PXP_OUT_LRC_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_LRC_RSVD1_SHIFT
))&
PXP_OUT_LRC_RSVD1_MASK
)

	)

29730 
	#PXP_OUT_PS_ULC_Y_MASK
 0x3FFFu

	)

29731 
	#PXP_OUT_PS_ULC_Y_SHIFT
 0

	)

29732 
	#PXP_OUT_PS_ULC_Y
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_PS_ULC_Y_SHIFT
))&
PXP_OUT_PS_ULC_Y_MASK
)

	)

29733 
	#PXP_OUT_PS_ULC_RSVD0_MASK
 0xC000u

	)

29734 
	#PXP_OUT_PS_ULC_RSVD0_SHIFT
 14

	)

29735 
	#PXP_OUT_PS_ULC_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_PS_ULC_RSVD0_SHIFT
))&
PXP_OUT_PS_ULC_RSVD0_MASK
)

	)

29736 
	#PXP_OUT_PS_ULC_X_MASK
 0x3FFF0000u

	)

29737 
	#PXP_OUT_PS_ULC_X_SHIFT
 16

	)

29738 
	#PXP_OUT_PS_ULC_X
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_PS_ULC_X_SHIFT
))&
PXP_OUT_PS_ULC_X_MASK
)

	)

29739 
	#PXP_OUT_PS_ULC_RSVD1_MASK
 0xC0000000u

	)

29740 
	#PXP_OUT_PS_ULC_RSVD1_SHIFT
 30

	)

29741 
	#PXP_OUT_PS_ULC_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_PS_ULC_RSVD1_SHIFT
))&
PXP_OUT_PS_ULC_RSVD1_MASK
)

	)

29743 
	#PXP_OUT_PS_LRC_Y_MASK
 0x3FFFu

	)

29744 
	#PXP_OUT_PS_LRC_Y_SHIFT
 0

	)

29745 
	#PXP_OUT_PS_LRC_Y
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_PS_LRC_Y_SHIFT
))&
PXP_OUT_PS_LRC_Y_MASK
)

	)

29746 
	#PXP_OUT_PS_LRC_RSVD0_MASK
 0xC000u

	)

29747 
	#PXP_OUT_PS_LRC_RSVD0_SHIFT
 14

	)

29748 
	#PXP_OUT_PS_LRC_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_PS_LRC_RSVD0_SHIFT
))&
PXP_OUT_PS_LRC_RSVD0_MASK
)

	)

29749 
	#PXP_OUT_PS_LRC_X_MASK
 0x3FFF0000u

	)

29750 
	#PXP_OUT_PS_LRC_X_SHIFT
 16

	)

29751 
	#PXP_OUT_PS_LRC_X
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_PS_LRC_X_SHIFT
))&
PXP_OUT_PS_LRC_X_MASK
)

	)

29752 
	#PXP_OUT_PS_LRC_RSVD1_MASK
 0xC0000000u

	)

29753 
	#PXP_OUT_PS_LRC_RSVD1_SHIFT
 30

	)

29754 
	#PXP_OUT_PS_LRC_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_PS_LRC_RSVD1_SHIFT
))&
PXP_OUT_PS_LRC_RSVD1_MASK
)

	)

29756 
	#PXP_OUT_AS_ULC_Y_MASK
 0x3FFFu

	)

29757 
	#PXP_OUT_AS_ULC_Y_SHIFT
 0

	)

29758 
	#PXP_OUT_AS_ULC_Y
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_AS_ULC_Y_SHIFT
))&
PXP_OUT_AS_ULC_Y_MASK
)

	)

29759 
	#PXP_OUT_AS_ULC_RSVD0_MASK
 0xC000u

	)

29760 
	#PXP_OUT_AS_ULC_RSVD0_SHIFT
 14

	)

29761 
	#PXP_OUT_AS_ULC_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_AS_ULC_RSVD0_SHIFT
))&
PXP_OUT_AS_ULC_RSVD0_MASK
)

	)

29762 
	#PXP_OUT_AS_ULC_X_MASK
 0x3FFF0000u

	)

29763 
	#PXP_OUT_AS_ULC_X_SHIFT
 16

	)

29764 
	#PXP_OUT_AS_ULC_X
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_AS_ULC_X_SHIFT
))&
PXP_OUT_AS_ULC_X_MASK
)

	)

29765 
	#PXP_OUT_AS_ULC_RSVD1_MASK
 0xC0000000u

	)

29766 
	#PXP_OUT_AS_ULC_RSVD1_SHIFT
 30

	)

29767 
	#PXP_OUT_AS_ULC_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_AS_ULC_RSVD1_SHIFT
))&
PXP_OUT_AS_ULC_RSVD1_MASK
)

	)

29769 
	#PXP_OUT_AS_LRC_Y_MASK
 0x3FFFu

	)

29770 
	#PXP_OUT_AS_LRC_Y_SHIFT
 0

	)

29771 
	#PXP_OUT_AS_LRC_Y
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_AS_LRC_Y_SHIFT
))&
PXP_OUT_AS_LRC_Y_MASK
)

	)

29772 
	#PXP_OUT_AS_LRC_RSVD0_MASK
 0xC000u

	)

29773 
	#PXP_OUT_AS_LRC_RSVD0_SHIFT
 14

	)

29774 
	#PXP_OUT_AS_LRC_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_AS_LRC_RSVD0_SHIFT
))&
PXP_OUT_AS_LRC_RSVD0_MASK
)

	)

29775 
	#PXP_OUT_AS_LRC_X_MASK
 0x3FFF0000u

	)

29776 
	#PXP_OUT_AS_LRC_X_SHIFT
 16

	)

29777 
	#PXP_OUT_AS_LRC_X
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_AS_LRC_X_SHIFT
))&
PXP_OUT_AS_LRC_X_MASK
)

	)

29778 
	#PXP_OUT_AS_LRC_RSVD1_MASK
 0xC0000000u

	)

29779 
	#PXP_OUT_AS_LRC_RSVD1_SHIFT
 30

	)

29780 
	#PXP_OUT_AS_LRC_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_OUT_AS_LRC_RSVD1_SHIFT
))&
PXP_OUT_AS_LRC_RSVD1_MASK
)

	)

29782 
	#PXP_PS_CTRL_FORMAT_MASK
 0x1Fu

	)

29783 
	#PXP_PS_CTRL_FORMAT_SHIFT
 0

	)

29784 
	#PXP_PS_CTRL_FORMAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_CTRL_FORMAT_SHIFT
))&
PXP_PS_CTRL_FORMAT_MASK
)

	)

29785 
	#PXP_PS_CTRL_WB_SWAP_MASK
 0x20u

	)

29786 
	#PXP_PS_CTRL_WB_SWAP_SHIFT
 5

	)

29787 
	#PXP_PS_CTRL_RSVD0_MASK
 0xC0u

	)

29788 
	#PXP_PS_CTRL_RSVD0_SHIFT
 6

	)

29789 
	#PXP_PS_CTRL_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_CTRL_RSVD0_SHIFT
))&
PXP_PS_CTRL_RSVD0_MASK
)

	)

29790 
	#PXP_PS_CTRL_DECY_MASK
 0x300u

	)

29791 
	#PXP_PS_CTRL_DECY_SHIFT
 8

	)

29792 
	#PXP_PS_CTRL_DECY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_CTRL_DECY_SHIFT
))&
PXP_PS_CTRL_DECY_MASK
)

	)

29793 
	#PXP_PS_CTRL_DECX_MASK
 0xC00u

	)

29794 
	#PXP_PS_CTRL_DECX_SHIFT
 10

	)

29795 
	#PXP_PS_CTRL_DECX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_CTRL_DECX_SHIFT
))&
PXP_PS_CTRL_DECX_MASK
)

	)

29796 
	#PXP_PS_CTRL_RSVD1_MASK
 0xFFFFF000u

	)

29797 
	#PXP_PS_CTRL_RSVD1_SHIFT
 12

	)

29798 
	#PXP_PS_CTRL_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_CTRL_RSVD1_SHIFT
))&
PXP_PS_CTRL_RSVD1_MASK
)

	)

29800 
	#PXP_PS_BUF_ADDR_MASK
 0xFFFFFFFFu

	)

29801 
	#PXP_PS_BUF_ADDR_SHIFT
 0

	)

29802 
	#PXP_PS_BUF_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_BUF_ADDR_SHIFT
))&
PXP_PS_BUF_ADDR_MASK
)

	)

29804 
	#PXP_PS_UBUF_ADDR_MASK
 0xFFFFFFFFu

	)

29805 
	#PXP_PS_UBUF_ADDR_SHIFT
 0

	)

29806 
	#PXP_PS_UBUF_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_UBUF_ADDR_SHIFT
))&
PXP_PS_UBUF_ADDR_MASK
)

	)

29808 
	#PXP_PS_VBUF_ADDR_MASK
 0xFFFFFFFFu

	)

29809 
	#PXP_PS_VBUF_ADDR_SHIFT
 0

	)

29810 
	#PXP_PS_VBUF_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_VBUF_ADDR_SHIFT
))&
PXP_PS_VBUF_ADDR_MASK
)

	)

29812 
	#PXP_PS_PITCH_PITCH_MASK
 0xFFFFu

	)

29813 
	#PXP_PS_PITCH_PITCH_SHIFT
 0

	)

29814 
	#PXP_PS_PITCH_PITCH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_PITCH_PITCH_SHIFT
))&
PXP_PS_PITCH_PITCH_MASK
)

	)

29815 
	#PXP_PS_PITCH_RSVD_MASK
 0xFFFF0000u

	)

29816 
	#PXP_PS_PITCH_RSVD_SHIFT
 16

	)

29817 
	#PXP_PS_PITCH_RSVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_PITCH_RSVD_SHIFT
))&
PXP_PS_PITCH_RSVD_MASK
)

	)

29819 
	#PXP_PS_BACKGROUND_COLOR_MASK
 0xFFFFFFu

	)

29820 
	#PXP_PS_BACKGROUND_COLOR_SHIFT
 0

	)

29821 
	#PXP_PS_BACKGROUND_COLOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_BACKGROUND_COLOR_SHIFT
))&
PXP_PS_BACKGROUND_COLOR_MASK
)

	)

29822 
	#PXP_PS_BACKGROUND_RSVD_MASK
 0xFF000000u

	)

29823 
	#PXP_PS_BACKGROUND_RSVD_SHIFT
 24

	)

29824 
	#PXP_PS_BACKGROUND_RSVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_BACKGROUND_RSVD_SHIFT
))&
PXP_PS_BACKGROUND_RSVD_MASK
)

	)

29826 
	#PXP_PS_SCALE_XSCALE_MASK
 0x7FFFu

	)

29827 
	#PXP_PS_SCALE_XSCALE_SHIFT
 0

	)

29828 
	#PXP_PS_SCALE_XSCALE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_SCALE_XSCALE_SHIFT
))&
PXP_PS_SCALE_XSCALE_MASK
)

	)

29829 
	#PXP_PS_SCALE_RSVD1_MASK
 0x8000u

	)

29830 
	#PXP_PS_SCALE_RSVD1_SHIFT
 15

	)

29831 
	#PXP_PS_SCALE_YSCALE_MASK
 0x7FFF0000u

	)

29832 
	#PXP_PS_SCALE_YSCALE_SHIFT
 16

	)

29833 
	#PXP_PS_SCALE_YSCALE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_SCALE_YSCALE_SHIFT
))&
PXP_PS_SCALE_YSCALE_MASK
)

	)

29834 
	#PXP_PS_SCALE_RSVD2_MASK
 0x80000000u

	)

29835 
	#PXP_PS_SCALE_RSVD2_SHIFT
 31

	)

29837 
	#PXP_PS_OFFSET_XOFFSET_MASK
 0xFFFu

	)

29838 
	#PXP_PS_OFFSET_XOFFSET_SHIFT
 0

	)

29839 
	#PXP_PS_OFFSET_XOFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_OFFSET_XOFFSET_SHIFT
))&
PXP_PS_OFFSET_XOFFSET_MASK
)

	)

29840 
	#PXP_PS_OFFSET_RSVD1_MASK
 0xF000u

	)

29841 
	#PXP_PS_OFFSET_RSVD1_SHIFT
 12

	)

29842 
	#PXP_PS_OFFSET_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_OFFSET_RSVD1_SHIFT
))&
PXP_PS_OFFSET_RSVD1_MASK
)

	)

29843 
	#PXP_PS_OFFSET_YOFFSET_MASK
 0xFFF0000u

	)

29844 
	#PXP_PS_OFFSET_YOFFSET_SHIFT
 16

	)

29845 
	#PXP_PS_OFFSET_YOFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_OFFSET_YOFFSET_SHIFT
))&
PXP_PS_OFFSET_YOFFSET_MASK
)

	)

29846 
	#PXP_PS_OFFSET_RSVD2_MASK
 0xF0000000u

	)

29847 
	#PXP_PS_OFFSET_RSVD2_SHIFT
 28

	)

29848 
	#PXP_PS_OFFSET_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_OFFSET_RSVD2_SHIFT
))&
PXP_PS_OFFSET_RSVD2_MASK
)

	)

29850 
	#PXP_PS_CLRKEYLOW_PIXEL_MASK
 0xFFFFFFu

	)

29851 
	#PXP_PS_CLRKEYLOW_PIXEL_SHIFT
 0

	)

29852 
	#PXP_PS_CLRKEYLOW_PIXEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_CLRKEYLOW_PIXEL_SHIFT
))&
PXP_PS_CLRKEYLOW_PIXEL_MASK
)

	)

29853 
	#PXP_PS_CLRKEYLOW_RSVD1_MASK
 0xFF000000u

	)

29854 
	#PXP_PS_CLRKEYLOW_RSVD1_SHIFT
 24

	)

29855 
	#PXP_PS_CLRKEYLOW_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_CLRKEYLOW_RSVD1_SHIFT
))&
PXP_PS_CLRKEYLOW_RSVD1_MASK
)

	)

29857 
	#PXP_PS_CLRKEYHIGH_PIXEL_MASK
 0xFFFFFFu

	)

29858 
	#PXP_PS_CLRKEYHIGH_PIXEL_SHIFT
 0

	)

29859 
	#PXP_PS_CLRKEYHIGH_PIXEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_CLRKEYHIGH_PIXEL_SHIFT
))&
PXP_PS_CLRKEYHIGH_PIXEL_MASK
)

	)

29860 
	#PXP_PS_CLRKEYHIGH_RSVD1_MASK
 0xFF000000u

	)

29861 
	#PXP_PS_CLRKEYHIGH_RSVD1_SHIFT
 24

	)

29862 
	#PXP_PS_CLRKEYHIGH_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_PS_CLRKEYHIGH_RSVD1_SHIFT
))&
PXP_PS_CLRKEYHIGH_RSVD1_MASK
)

	)

29864 
	#PXP_AS_CTRL_RSVD0_MASK
 0x1u

	)

29865 
	#PXP_AS_CTRL_RSVD0_SHIFT
 0

	)

29866 
	#PXP_AS_CTRL_ALPHA_CTRL_MASK
 0x6u

	)

29867 
	#PXP_AS_CTRL_ALPHA_CTRL_SHIFT
 1

	)

29868 
	#PXP_AS_CTRL_ALPHA_CTRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_AS_CTRL_ALPHA_CTRL_SHIFT
))&
PXP_AS_CTRL_ALPHA_CTRL_MASK
)

	)

29869 
	#PXP_AS_CTRL_ENABLE_COLORKEY_MASK
 0x8u

	)

29870 
	#PXP_AS_CTRL_ENABLE_COLORKEY_SHIFT
 3

	)

29871 
	#PXP_AS_CTRL_FORMAT_MASK
 0xF0u

	)

29872 
	#PXP_AS_CTRL_FORMAT_SHIFT
 4

	)

29873 
	#PXP_AS_CTRL_FORMAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_AS_CTRL_FORMAT_SHIFT
))&
PXP_AS_CTRL_FORMAT_MASK
)

	)

29874 
	#PXP_AS_CTRL_ALPHA_MASK
 0xFF00u

	)

29875 
	#PXP_AS_CTRL_ALPHA_SHIFT
 8

	)

29876 
	#PXP_AS_CTRL_ALPHA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_AS_CTRL_ALPHA_SHIFT
))&
PXP_AS_CTRL_ALPHA_MASK
)

	)

29877 
	#PXP_AS_CTRL_ROP_MASK
 0xF0000u

	)

29878 
	#PXP_AS_CTRL_ROP_SHIFT
 16

	)

29879 
	#PXP_AS_CTRL_ROP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_AS_CTRL_ROP_SHIFT
))&
PXP_AS_CTRL_ROP_MASK
)

	)

29880 
	#PXP_AS_CTRL_ALPHA_INVERT_MASK
 0x100000u

	)

29881 
	#PXP_AS_CTRL_ALPHA_INVERT_SHIFT
 20

	)

29882 
	#PXP_AS_CTRL_RSVD1_MASK
 0xFFE00000u

	)

29883 
	#PXP_AS_CTRL_RSVD1_SHIFT
 21

	)

29884 
	#PXP_AS_CTRL_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_AS_CTRL_RSVD1_SHIFT
))&
PXP_AS_CTRL_RSVD1_MASK
)

	)

29886 
	#PXP_AS_BUF_ADDR_MASK
 0xFFFFFFFFu

	)

29887 
	#PXP_AS_BUF_ADDR_SHIFT
 0

	)

29888 
	#PXP_AS_BUF_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_AS_BUF_ADDR_SHIFT
))&
PXP_AS_BUF_ADDR_MASK
)

	)

29890 
	#PXP_AS_PITCH_PITCH_MASK
 0xFFFFu

	)

29891 
	#PXP_AS_PITCH_PITCH_SHIFT
 0

	)

29892 
	#PXP_AS_PITCH_PITCH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_AS_PITCH_PITCH_SHIFT
))&
PXP_AS_PITCH_PITCH_MASK
)

	)

29893 
	#PXP_AS_PITCH_RSVD_MASK
 0xFFFF0000u

	)

29894 
	#PXP_AS_PITCH_RSVD_SHIFT
 16

	)

29895 
	#PXP_AS_PITCH_RSVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_AS_PITCH_RSVD_SHIFT
))&
PXP_AS_PITCH_RSVD_MASK
)

	)

29897 
	#PXP_AS_CLRKEYLOW_PIXEL_MASK
 0xFFFFFFu

	)

29898 
	#PXP_AS_CLRKEYLOW_PIXEL_SHIFT
 0

	)

29899 
	#PXP_AS_CLRKEYLOW_PIXEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_AS_CLRKEYLOW_PIXEL_SHIFT
))&
PXP_AS_CLRKEYLOW_PIXEL_MASK
)

	)

29900 
	#PXP_AS_CLRKEYLOW_RSVD1_MASK
 0xFF000000u

	)

29901 
	#PXP_AS_CLRKEYLOW_RSVD1_SHIFT
 24

	)

29902 
	#PXP_AS_CLRKEYLOW_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_AS_CLRKEYLOW_RSVD1_SHIFT
))&
PXP_AS_CLRKEYLOW_RSVD1_MASK
)

	)

29904 
	#PXP_AS_CLRKEYHIGH_PIXEL_MASK
 0xFFFFFFu

	)

29905 
	#PXP_AS_CLRKEYHIGH_PIXEL_SHIFT
 0

	)

29906 
	#PXP_AS_CLRKEYHIGH_PIXEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_AS_CLRKEYHIGH_PIXEL_SHIFT
))&
PXP_AS_CLRKEYHIGH_PIXEL_MASK
)

	)

29907 
	#PXP_AS_CLRKEYHIGH_RSVD1_MASK
 0xFF000000u

	)

29908 
	#PXP_AS_CLRKEYHIGH_RSVD1_SHIFT
 24

	)

29909 
	#PXP_AS_CLRKEYHIGH_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_AS_CLRKEYHIGH_RSVD1_SHIFT
))&
PXP_AS_CLRKEYHIGH_RSVD1_MASK
)

	)

29911 
	#PXP_CSC1_COEF0_Y_OFFSET_MASK
 0x1FFu

	)

29912 
	#PXP_CSC1_COEF0_Y_OFFSET_SHIFT
 0

	)

29913 
	#PXP_CSC1_COEF0_Y_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC1_COEF0_Y_OFFSET_SHIFT
))&
PXP_CSC1_COEF0_Y_OFFSET_MASK
)

	)

29914 
	#PXP_CSC1_COEF0_UV_OFFSET_MASK
 0x3FE00u

	)

29915 
	#PXP_CSC1_COEF0_UV_OFFSET_SHIFT
 9

	)

29916 
	#PXP_CSC1_COEF0_UV_OFFSET
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC1_COEF0_UV_OFFSET_SHIFT
))&
PXP_CSC1_COEF0_UV_OFFSET_MASK
)

	)

29917 
	#PXP_CSC1_COEF0_C0_MASK
 0x1FFC0000u

	)

29918 
	#PXP_CSC1_COEF0_C0_SHIFT
 18

	)

29919 
	#PXP_CSC1_COEF0_C0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC1_COEF0_C0_SHIFT
))&
PXP_CSC1_COEF0_C0_MASK
)

	)

29920 
	#PXP_CSC1_COEF0_RSVD1_MASK
 0x20000000u

	)

29921 
	#PXP_CSC1_COEF0_RSVD1_SHIFT
 29

	)

29922 
	#PXP_CSC1_COEF0_BYPASS_MASK
 0x40000000u

	)

29923 
	#PXP_CSC1_COEF0_BYPASS_SHIFT
 30

	)

29924 
	#PXP_CSC1_COEF0_YCBCR_MODE_MASK
 0x80000000u

	)

29925 
	#PXP_CSC1_COEF0_YCBCR_MODE_SHIFT
 31

	)

29927 
	#PXP_CSC1_COEF1_C4_MASK
 0x7FFu

	)

29928 
	#PXP_CSC1_COEF1_C4_SHIFT
 0

	)

29929 
	#PXP_CSC1_COEF1_C4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC1_COEF1_C4_SHIFT
))&
PXP_CSC1_COEF1_C4_MASK
)

	)

29930 
	#PXP_CSC1_COEF1_RSVD0_MASK
 0xF800u

	)

29931 
	#PXP_CSC1_COEF1_RSVD0_SHIFT
 11

	)

29932 
	#PXP_CSC1_COEF1_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC1_COEF1_RSVD0_SHIFT
))&
PXP_CSC1_COEF1_RSVD0_MASK
)

	)

29933 
	#PXP_CSC1_COEF1_C1_MASK
 0x7FF0000u

	)

29934 
	#PXP_CSC1_COEF1_C1_SHIFT
 16

	)

29935 
	#PXP_CSC1_COEF1_C1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC1_COEF1_C1_SHIFT
))&
PXP_CSC1_COEF1_C1_MASK
)

	)

29936 
	#PXP_CSC1_COEF1_RSVD1_MASK
 0xF8000000u

	)

29937 
	#PXP_CSC1_COEF1_RSVD1_SHIFT
 27

	)

29938 
	#PXP_CSC1_COEF1_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC1_COEF1_RSVD1_SHIFT
))&
PXP_CSC1_COEF1_RSVD1_MASK
)

	)

29940 
	#PXP_CSC1_COEF2_C3_MASK
 0x7FFu

	)

29941 
	#PXP_CSC1_COEF2_C3_SHIFT
 0

	)

29942 
	#PXP_CSC1_COEF2_C3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC1_COEF2_C3_SHIFT
))&
PXP_CSC1_COEF2_C3_MASK
)

	)

29943 
	#PXP_CSC1_COEF2_RSVD0_MASK
 0xF800u

	)

29944 
	#PXP_CSC1_COEF2_RSVD0_SHIFT
 11

	)

29945 
	#PXP_CSC1_COEF2_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC1_COEF2_RSVD0_SHIFT
))&
PXP_CSC1_COEF2_RSVD0_MASK
)

	)

29946 
	#PXP_CSC1_COEF2_C2_MASK
 0x7FF0000u

	)

29947 
	#PXP_CSC1_COEF2_C2_SHIFT
 16

	)

29948 
	#PXP_CSC1_COEF2_C2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC1_COEF2_C2_SHIFT
))&
PXP_CSC1_COEF2_C2_MASK
)

	)

29949 
	#PXP_CSC1_COEF2_RSVD1_MASK
 0xF8000000u

	)

29950 
	#PXP_CSC1_COEF2_RSVD1_SHIFT
 27

	)

29951 
	#PXP_CSC1_COEF2_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC1_COEF2_RSVD1_SHIFT
))&
PXP_CSC1_COEF2_RSVD1_MASK
)

	)

29953 
	#PXP_CSC2_CTRL_BYPASS_MASK
 0x1u

	)

29954 
	#PXP_CSC2_CTRL_BYPASS_SHIFT
 0

	)

29955 
	#PXP_CSC2_CTRL_CSC_MODE_MASK
 0x6u

	)

29956 
	#PXP_CSC2_CTRL_CSC_MODE_SHIFT
 1

	)

29957 
	#PXP_CSC2_CTRL_CSC_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_CTRL_CSC_MODE_SHIFT
))&
PXP_CSC2_CTRL_CSC_MODE_MASK
)

	)

29958 
	#PXP_CSC2_CTRL_RSVD_MASK
 0xFFFFFFF8u

	)

29959 
	#PXP_CSC2_CTRL_RSVD_SHIFT
 3

	)

29960 
	#PXP_CSC2_CTRL_RSVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_CTRL_RSVD_SHIFT
))&
PXP_CSC2_CTRL_RSVD_MASK
)

	)

29962 
	#PXP_CSC2_COEF0_A1_MASK
 0x7FFu

	)

29963 
	#PXP_CSC2_COEF0_A1_SHIFT
 0

	)

29964 
	#PXP_CSC2_COEF0_A1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF0_A1_SHIFT
))&
PXP_CSC2_COEF0_A1_MASK
)

	)

29965 
	#PXP_CSC2_COEF0_RSVD0_MASK
 0xF800u

	)

29966 
	#PXP_CSC2_COEF0_RSVD0_SHIFT
 11

	)

29967 
	#PXP_CSC2_COEF0_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF0_RSVD0_SHIFT
))&
PXP_CSC2_COEF0_RSVD0_MASK
)

	)

29968 
	#PXP_CSC2_COEF0_A2_MASK
 0x7FF0000u

	)

29969 
	#PXP_CSC2_COEF0_A2_SHIFT
 16

	)

29970 
	#PXP_CSC2_COEF0_A2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF0_A2_SHIFT
))&
PXP_CSC2_COEF0_A2_MASK
)

	)

29971 
	#PXP_CSC2_COEF0_RSVD1_MASK
 0xF8000000u

	)

29972 
	#PXP_CSC2_COEF0_RSVD1_SHIFT
 27

	)

29973 
	#PXP_CSC2_COEF0_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF0_RSVD1_SHIFT
))&
PXP_CSC2_COEF0_RSVD1_MASK
)

	)

29975 
	#PXP_CSC2_COEF1_A3_MASK
 0x7FFu

	)

29976 
	#PXP_CSC2_COEF1_A3_SHIFT
 0

	)

29977 
	#PXP_CSC2_COEF1_A3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF1_A3_SHIFT
))&
PXP_CSC2_COEF1_A3_MASK
)

	)

29978 
	#PXP_CSC2_COEF1_RSVD0_MASK
 0xF800u

	)

29979 
	#PXP_CSC2_COEF1_RSVD0_SHIFT
 11

	)

29980 
	#PXP_CSC2_COEF1_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF1_RSVD0_SHIFT
))&
PXP_CSC2_COEF1_RSVD0_MASK
)

	)

29981 
	#PXP_CSC2_COEF1_B1_MASK
 0x7FF0000u

	)

29982 
	#PXP_CSC2_COEF1_B1_SHIFT
 16

	)

29983 
	#PXP_CSC2_COEF1_B1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF1_B1_SHIFT
))&
PXP_CSC2_COEF1_B1_MASK
)

	)

29984 
	#PXP_CSC2_COEF1_RSVD1_MASK
 0xF8000000u

	)

29985 
	#PXP_CSC2_COEF1_RSVD1_SHIFT
 27

	)

29986 
	#PXP_CSC2_COEF1_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF1_RSVD1_SHIFT
))&
PXP_CSC2_COEF1_RSVD1_MASK
)

	)

29988 
	#PXP_CSC2_COEF2_B2_MASK
 0x7FFu

	)

29989 
	#PXP_CSC2_COEF2_B2_SHIFT
 0

	)

29990 
	#PXP_CSC2_COEF2_B2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF2_B2_SHIFT
))&
PXP_CSC2_COEF2_B2_MASK
)

	)

29991 
	#PXP_CSC2_COEF2_RSVD0_MASK
 0xF800u

	)

29992 
	#PXP_CSC2_COEF2_RSVD0_SHIFT
 11

	)

29993 
	#PXP_CSC2_COEF2_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF2_RSVD0_SHIFT
))&
PXP_CSC2_COEF2_RSVD0_MASK
)

	)

29994 
	#PXP_CSC2_COEF2_B3_MASK
 0x7FF0000u

	)

29995 
	#PXP_CSC2_COEF2_B3_SHIFT
 16

	)

29996 
	#PXP_CSC2_COEF2_B3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF2_B3_SHIFT
))&
PXP_CSC2_COEF2_B3_MASK
)

	)

29997 
	#PXP_CSC2_COEF2_RSVD1_MASK
 0xF8000000u

	)

29998 
	#PXP_CSC2_COEF2_RSVD1_SHIFT
 27

	)

29999 
	#PXP_CSC2_COEF2_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF2_RSVD1_SHIFT
))&
PXP_CSC2_COEF2_RSVD1_MASK
)

	)

30001 
	#PXP_CSC2_COEF3_C1_MASK
 0x7FFu

	)

30002 
	#PXP_CSC2_COEF3_C1_SHIFT
 0

	)

30003 
	#PXP_CSC2_COEF3_C1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF3_C1_SHIFT
))&
PXP_CSC2_COEF3_C1_MASK
)

	)

30004 
	#PXP_CSC2_COEF3_RSVD0_MASK
 0xF800u

	)

30005 
	#PXP_CSC2_COEF3_RSVD0_SHIFT
 11

	)

30006 
	#PXP_CSC2_COEF3_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF3_RSVD0_SHIFT
))&
PXP_CSC2_COEF3_RSVD0_MASK
)

	)

30007 
	#PXP_CSC2_COEF3_C2_MASK
 0x7FF0000u

	)

30008 
	#PXP_CSC2_COEF3_C2_SHIFT
 16

	)

30009 
	#PXP_CSC2_COEF3_C2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF3_C2_SHIFT
))&
PXP_CSC2_COEF3_C2_MASK
)

	)

30010 
	#PXP_CSC2_COEF3_RSVD1_MASK
 0xF8000000u

	)

30011 
	#PXP_CSC2_COEF3_RSVD1_SHIFT
 27

	)

30012 
	#PXP_CSC2_COEF3_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF3_RSVD1_SHIFT
))&
PXP_CSC2_COEF3_RSVD1_MASK
)

	)

30014 
	#PXP_CSC2_COEF4_C3_MASK
 0x7FFu

	)

30015 
	#PXP_CSC2_COEF4_C3_SHIFT
 0

	)

30016 
	#PXP_CSC2_COEF4_C3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF4_C3_SHIFT
))&
PXP_CSC2_COEF4_C3_MASK
)

	)

30017 
	#PXP_CSC2_COEF4_RSVD0_MASK
 0xF800u

	)

30018 
	#PXP_CSC2_COEF4_RSVD0_SHIFT
 11

	)

30019 
	#PXP_CSC2_COEF4_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF4_RSVD0_SHIFT
))&
PXP_CSC2_COEF4_RSVD0_MASK
)

	)

30020 
	#PXP_CSC2_COEF4_D1_MASK
 0x1FF0000u

	)

30021 
	#PXP_CSC2_COEF4_D1_SHIFT
 16

	)

30022 
	#PXP_CSC2_COEF4_D1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF4_D1_SHIFT
))&
PXP_CSC2_COEF4_D1_MASK
)

	)

30023 
	#PXP_CSC2_COEF4_RSVD1_MASK
 0xFE000000u

	)

30024 
	#PXP_CSC2_COEF4_RSVD1_SHIFT
 25

	)

30025 
	#PXP_CSC2_COEF4_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF4_RSVD1_SHIFT
))&
PXP_CSC2_COEF4_RSVD1_MASK
)

	)

30027 
	#PXP_CSC2_COEF5_D2_MASK
 0x1FFu

	)

30028 
	#PXP_CSC2_COEF5_D2_SHIFT
 0

	)

30029 
	#PXP_CSC2_COEF5_D2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF5_D2_SHIFT
))&
PXP_CSC2_COEF5_D2_MASK
)

	)

30030 
	#PXP_CSC2_COEF5_RSVD0_MASK
 0xFE00u

	)

30031 
	#PXP_CSC2_COEF5_RSVD0_SHIFT
 9

	)

30032 
	#PXP_CSC2_COEF5_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF5_RSVD0_SHIFT
))&
PXP_CSC2_COEF5_RSVD0_MASK
)

	)

30033 
	#PXP_CSC2_COEF5_D3_MASK
 0x1FF0000u

	)

30034 
	#PXP_CSC2_COEF5_D3_SHIFT
 16

	)

30035 
	#PXP_CSC2_COEF5_D3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF5_D3_SHIFT
))&
PXP_CSC2_COEF5_D3_MASK
)

	)

30036 
	#PXP_CSC2_COEF5_RSVD1_MASK
 0xFE000000u

	)

30037 
	#PXP_CSC2_COEF5_RSVD1_SHIFT
 25

	)

30038 
	#PXP_CSC2_COEF5_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CSC2_COEF5_RSVD1_SHIFT
))&
PXP_CSC2_COEF5_RSVD1_MASK
)

	)

30040 
	#PXP_LUT_CTRL_DMA_START_MASK
 0x1u

	)

30041 
	#PXP_LUT_CTRL_DMA_START_SHIFT
 0

	)

30042 
	#PXP_LUT_CTRL_RSVD0_MASK
 0xFEu

	)

30043 
	#PXP_LUT_CTRL_RSVD0_SHIFT
 1

	)

30044 
	#PXP_LUT_CTRL_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_LUT_CTRL_RSVD0_SHIFT
))&
PXP_LUT_CTRL_RSVD0_MASK
)

	)

30045 
	#PXP_LUT_CTRL_INVALID_MASK
 0x100u

	)

30046 
	#PXP_LUT_CTRL_INVALID_SHIFT
 8

	)

30047 
	#PXP_LUT_CTRL_LRU_UPD_MASK
 0x200u

	)

30048 
	#PXP_LUT_CTRL_LRU_UPD_SHIFT
 9

	)

30049 
	#PXP_LUT_CTRL_SEL_8KB_MASK
 0x400u

	)

30050 
	#PXP_LUT_CTRL_SEL_8KB_SHIFT
 10

	)

30051 
	#PXP_LUT_CTRL_RSVD1_MASK
 0xF800u

	)

30052 
	#PXP_LUT_CTRL_RSVD1_SHIFT
 11

	)

30053 
	#PXP_LUT_CTRL_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_LUT_CTRL_RSVD1_SHIFT
))&
PXP_LUT_CTRL_RSVD1_MASK
)

	)

30054 
	#PXP_LUT_CTRL_OUT_MODE_MASK
 0x30000u

	)

30055 
	#PXP_LUT_CTRL_OUT_MODE_SHIFT
 16

	)

30056 
	#PXP_LUT_CTRL_OUT_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_LUT_CTRL_OUT_MODE_SHIFT
))&
PXP_LUT_CTRL_OUT_MODE_MASK
)

	)

30057 
	#PXP_LUT_CTRL_RSVD2_MASK
 0xFC0000u

	)

30058 
	#PXP_LUT_CTRL_RSVD2_SHIFT
 18

	)

30059 
	#PXP_LUT_CTRL_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_LUT_CTRL_RSVD2_SHIFT
))&
PXP_LUT_CTRL_RSVD2_MASK
)

	)

30060 
	#PXP_LUT_CTRL_LOOKUP_MODE_MASK
 0x3000000u

	)

30061 
	#PXP_LUT_CTRL_LOOKUP_MODE_SHIFT
 24

	)

30062 
	#PXP_LUT_CTRL_LOOKUP_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_LUT_CTRL_LOOKUP_MODE_SHIFT
))&
PXP_LUT_CTRL_LOOKUP_MODE_MASK
)

	)

30063 
	#PXP_LUT_CTRL_RSVD3_MASK
 0x7C000000u

	)

30064 
	#PXP_LUT_CTRL_RSVD3_SHIFT
 26

	)

30065 
	#PXP_LUT_CTRL_RSVD3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_LUT_CTRL_RSVD3_SHIFT
))&
PXP_LUT_CTRL_RSVD3_MASK
)

	)

30066 
	#PXP_LUT_CTRL_BYPASS_MASK
 0x80000000u

	)

30067 
	#PXP_LUT_CTRL_BYPASS_SHIFT
 31

	)

30069 
	#PXP_LUT_ADDR_ADDR_MASK
 0x3FFFu

	)

30070 
	#PXP_LUT_ADDR_ADDR_SHIFT
 0

	)

30071 
	#PXP_LUT_ADDR_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_LUT_ADDR_ADDR_SHIFT
))&
PXP_LUT_ADDR_ADDR_MASK
)

	)

30072 
	#PXP_LUT_ADDR_RSVD1_MASK
 0xC000u

	)

30073 
	#PXP_LUT_ADDR_RSVD1_SHIFT
 14

	)

30074 
	#PXP_LUT_ADDR_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_LUT_ADDR_RSVD1_SHIFT
))&
PXP_LUT_ADDR_RSVD1_MASK
)

	)

30075 
	#PXP_LUT_ADDR_NUM_BYTES_MASK
 0x7FFF0000u

	)

30076 
	#PXP_LUT_ADDR_NUM_BYTES_SHIFT
 16

	)

30077 
	#PXP_LUT_ADDR_NUM_BYTES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_LUT_ADDR_NUM_BYTES_SHIFT
))&
PXP_LUT_ADDR_NUM_BYTES_MASK
)

	)

30078 
	#PXP_LUT_ADDR_RSVD2_MASK
 0x80000000u

	)

30079 
	#PXP_LUT_ADDR_RSVD2_SHIFT
 31

	)

30081 
	#PXP_LUT_DATA_DATA_MASK
 0xFFFFFFFFu

	)

30082 
	#PXP_LUT_DATA_DATA_SHIFT
 0

	)

30083 
	#PXP_LUT_DATA_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_LUT_DATA_DATA_SHIFT
))&
PXP_LUT_DATA_DATA_MASK
)

	)

30085 
	#PXP_LUT_EXTMEM_ADDR_MASK
 0xFFFFFFFFu

	)

30086 
	#PXP_LUT_EXTMEM_ADDR_SHIFT
 0

	)

30087 
	#PXP_LUT_EXTMEM_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_LUT_EXTMEM_ADDR_SHIFT
))&
PXP_LUT_EXTMEM_ADDR_MASK
)

	)

30089 
	#PXP_CFA_DATA_MASK
 0xFFFFFFFFu

	)

30090 
	#PXP_CFA_DATA_SHIFT
 0

	)

30091 
	#PXP_CFA_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_CFA_DATA_SHIFT
))&
PXP_CFA_DATA_MASK
)

	)

30093 
	#PXP_HIST_CTRL_STATUS_MASK
 0xFu

	)

30094 
	#PXP_HIST_CTRL_STATUS_SHIFT
 0

	)

30095 
	#PXP_HIST_CTRL_STATUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST_CTRL_STATUS_SHIFT
))&
PXP_HIST_CTRL_STATUS_MASK
)

	)

30096 
	#PXP_HIST_CTRL_PANEL_MODE_MASK
 0x30u

	)

30097 
	#PXP_HIST_CTRL_PANEL_MODE_SHIFT
 4

	)

30098 
	#PXP_HIST_CTRL_PANEL_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST_CTRL_PANEL_MODE_SHIFT
))&
PXP_HIST_CTRL_PANEL_MODE_MASK
)

	)

30099 
	#PXP_HIST_CTRL_RSVD_MASK
 0xFFFFFFC0u

	)

30100 
	#PXP_HIST_CTRL_RSVD_SHIFT
 6

	)

30101 
	#PXP_HIST_CTRL_RSVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST_CTRL_RSVD_SHIFT
))&
PXP_HIST_CTRL_RSVD_MASK
)

	)

30103 
	#PXP_HIST2_PARAM_VALUE0_MASK
 0x1Fu

	)

30104 
	#PXP_HIST2_PARAM_VALUE0_SHIFT
 0

	)

30105 
	#PXP_HIST2_PARAM_VALUE0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST2_PARAM_VALUE0_SHIFT
))&
PXP_HIST2_PARAM_VALUE0_MASK
)

	)

30106 
	#PXP_HIST2_PARAM_RSVD0_MASK
 0xE0u

	)

30107 
	#PXP_HIST2_PARAM_RSVD0_SHIFT
 5

	)

30108 
	#PXP_HIST2_PARAM_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST2_PARAM_RSVD0_SHIFT
))&
PXP_HIST2_PARAM_RSVD0_MASK
)

	)

30109 
	#PXP_HIST2_PARAM_VALUE1_MASK
 0x1F00u

	)

30110 
	#PXP_HIST2_PARAM_VALUE1_SHIFT
 8

	)

30111 
	#PXP_HIST2_PARAM_VALUE1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST2_PARAM_VALUE1_SHIFT
))&
PXP_HIST2_PARAM_VALUE1_MASK
)

	)

30112 
	#PXP_HIST2_PARAM_RSVD1_MASK
 0xE000u

	)

30113 
	#PXP_HIST2_PARAM_RSVD1_SHIFT
 13

	)

30114 
	#PXP_HIST2_PARAM_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST2_PARAM_RSVD1_SHIFT
))&
PXP_HIST2_PARAM_RSVD1_MASK
)

	)

30115 
	#PXP_HIST2_PARAM_RSVD_MASK
 0xFFFF0000u

	)

30116 
	#PXP_HIST2_PARAM_RSVD_SHIFT
 16

	)

30117 
	#PXP_HIST2_PARAM_RSVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST2_PARAM_RSVD_SHIFT
))&
PXP_HIST2_PARAM_RSVD_MASK
)

	)

30119 
	#PXP_HIST4_PARAM_VALUE0_MASK
 0x1Fu

	)

30120 
	#PXP_HIST4_PARAM_VALUE0_SHIFT
 0

	)

30121 
	#PXP_HIST4_PARAM_VALUE0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST4_PARAM_VALUE0_SHIFT
))&
PXP_HIST4_PARAM_VALUE0_MASK
)

	)

30122 
	#PXP_HIST4_PARAM_RSVD0_MASK
 0xE0u

	)

30123 
	#PXP_HIST4_PARAM_RSVD0_SHIFT
 5

	)

30124 
	#PXP_HIST4_PARAM_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST4_PARAM_RSVD0_SHIFT
))&
PXP_HIST4_PARAM_RSVD0_MASK
)

	)

30125 
	#PXP_HIST4_PARAM_VALUE1_MASK
 0x1F00u

	)

30126 
	#PXP_HIST4_PARAM_VALUE1_SHIFT
 8

	)

30127 
	#PXP_HIST4_PARAM_VALUE1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST4_PARAM_VALUE1_SHIFT
))&
PXP_HIST4_PARAM_VALUE1_MASK
)

	)

30128 
	#PXP_HIST4_PARAM_RSVD1_MASK
 0xE000u

	)

30129 
	#PXP_HIST4_PARAM_RSVD1_SHIFT
 13

	)

30130 
	#PXP_HIST4_PARAM_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST4_PARAM_RSVD1_SHIFT
))&
PXP_HIST4_PARAM_RSVD1_MASK
)

	)

30131 
	#PXP_HIST4_PARAM_VALUE2_MASK
 0x1F0000u

	)

30132 
	#PXP_HIST4_PARAM_VALUE2_SHIFT
 16

	)

30133 
	#PXP_HIST4_PARAM_VALUE2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST4_PARAM_VALUE2_SHIFT
))&
PXP_HIST4_PARAM_VALUE2_MASK
)

	)

30134 
	#PXP_HIST4_PARAM_RSVD2_MASK
 0xE00000u

	)

30135 
	#PXP_HIST4_PARAM_RSVD2_SHIFT
 21

	)

30136 
	#PXP_HIST4_PARAM_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST4_PARAM_RSVD2_SHIFT
))&
PXP_HIST4_PARAM_RSVD2_MASK
)

	)

30137 
	#PXP_HIST4_PARAM_VALUE3_MASK
 0x1F000000u

	)

30138 
	#PXP_HIST4_PARAM_VALUE3_SHIFT
 24

	)

30139 
	#PXP_HIST4_PARAM_VALUE3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST4_PARAM_VALUE3_SHIFT
))&
PXP_HIST4_PARAM_VALUE3_MASK
)

	)

30140 
	#PXP_HIST4_PARAM_RSVD3_MASK
 0xE0000000u

	)

30141 
	#PXP_HIST4_PARAM_RSVD3_SHIFT
 29

	)

30142 
	#PXP_HIST4_PARAM_RSVD3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST4_PARAM_RSVD3_SHIFT
))&
PXP_HIST4_PARAM_RSVD3_MASK
)

	)

30144 
	#PXP_HIST8_PARAM0_VALUE0_MASK
 0x1Fu

	)

30145 
	#PXP_HIST8_PARAM0_VALUE0_SHIFT
 0

	)

30146 
	#PXP_HIST8_PARAM0_VALUE0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST8_PARAM0_VALUE0_SHIFT
))&
PXP_HIST8_PARAM0_VALUE0_MASK
)

	)

30147 
	#PXP_HIST8_PARAM0_RSVD0_MASK
 0xE0u

	)

30148 
	#PXP_HIST8_PARAM0_RSVD0_SHIFT
 5

	)

30149 
	#PXP_HIST8_PARAM0_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST8_PARAM0_RSVD0_SHIFT
))&
PXP_HIST8_PARAM0_RSVD0_MASK
)

	)

30150 
	#PXP_HIST8_PARAM0_VALUE1_MASK
 0x1F00u

	)

30151 
	#PXP_HIST8_PARAM0_VALUE1_SHIFT
 8

	)

30152 
	#PXP_HIST8_PARAM0_VALUE1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST8_PARAM0_VALUE1_SHIFT
))&
PXP_HIST8_PARAM0_VALUE1_MASK
)

	)

30153 
	#PXP_HIST8_PARAM0_RSVD1_MASK
 0xE000u

	)

30154 
	#PXP_HIST8_PARAM0_RSVD1_SHIFT
 13

	)

30155 
	#PXP_HIST8_PARAM0_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST8_PARAM0_RSVD1_SHIFT
))&
PXP_HIST8_PARAM0_RSVD1_MASK
)

	)

30156 
	#PXP_HIST8_PARAM0_VALUE2_MASK
 0x1F0000u

	)

30157 
	#PXP_HIST8_PARAM0_VALUE2_SHIFT
 16

	)

30158 
	#PXP_HIST8_PARAM0_VALUE2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST8_PARAM0_VALUE2_SHIFT
))&
PXP_HIST8_PARAM0_VALUE2_MASK
)

	)

30159 
	#PXP_HIST8_PARAM0_RSVD2_MASK
 0xE00000u

	)

30160 
	#PXP_HIST8_PARAM0_RSVD2_SHIFT
 21

	)

30161 
	#PXP_HIST8_PARAM0_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST8_PARAM0_RSVD2_SHIFT
))&
PXP_HIST8_PARAM0_RSVD2_MASK
)

	)

30162 
	#PXP_HIST8_PARAM0_VALUE3_MASK
 0x1F000000u

	)

30163 
	#PXP_HIST8_PARAM0_VALUE3_SHIFT
 24

	)

30164 
	#PXP_HIST8_PARAM0_VALUE3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST8_PARAM0_VALUE3_SHIFT
))&
PXP_HIST8_PARAM0_VALUE3_MASK
)

	)

30165 
	#PXP_HIST8_PARAM0_RSVD3_MASK
 0xE0000000u

	)

30166 
	#PXP_HIST8_PARAM0_RSVD3_SHIFT
 29

	)

30167 
	#PXP_HIST8_PARAM0_RSVD3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST8_PARAM0_RSVD3_SHIFT
))&
PXP_HIST8_PARAM0_RSVD3_MASK
)

	)

30169 
	#PXP_HIST8_PARAM1_VALUE4_MASK
 0x1Fu

	)

30170 
	#PXP_HIST8_PARAM1_VALUE4_SHIFT
 0

	)

30171 
	#PXP_HIST8_PARAM1_VALUE4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST8_PARAM1_VALUE4_SHIFT
))&
PXP_HIST8_PARAM1_VALUE4_MASK
)

	)

30172 
	#PXP_HIST8_PARAM1_RSVD4_MASK
 0xE0u

	)

30173 
	#PXP_HIST8_PARAM1_RSVD4_SHIFT
 5

	)

30174 
	#PXP_HIST8_PARAM1_RSVD4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST8_PARAM1_RSVD4_SHIFT
))&
PXP_HIST8_PARAM1_RSVD4_MASK
)

	)

30175 
	#PXP_HIST8_PARAM1_VALUE5_MASK
 0x1F00u

	)

30176 
	#PXP_HIST8_PARAM1_VALUE5_SHIFT
 8

	)

30177 
	#PXP_HIST8_PARAM1_VALUE5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST8_PARAM1_VALUE5_SHIFT
))&
PXP_HIST8_PARAM1_VALUE5_MASK
)

	)

30178 
	#PXP_HIST8_PARAM1_RSVD5_MASK
 0xE000u

	)

30179 
	#PXP_HIST8_PARAM1_RSVD5_SHIFT
 13

	)

30180 
	#PXP_HIST8_PARAM1_RSVD5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST8_PARAM1_RSVD5_SHIFT
))&
PXP_HIST8_PARAM1_RSVD5_MASK
)

	)

30181 
	#PXP_HIST8_PARAM1_VALUE6_MASK
 0x1F0000u

	)

30182 
	#PXP_HIST8_PARAM1_VALUE6_SHIFT
 16

	)

30183 
	#PXP_HIST8_PARAM1_VALUE6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST8_PARAM1_VALUE6_SHIFT
))&
PXP_HIST8_PARAM1_VALUE6_MASK
)

	)

30184 
	#PXP_HIST8_PARAM1_RSVD6_MASK
 0xE00000u

	)

30185 
	#PXP_HIST8_PARAM1_RSVD6_SHIFT
 21

	)

30186 
	#PXP_HIST8_PARAM1_RSVD6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST8_PARAM1_RSVD6_SHIFT
))&
PXP_HIST8_PARAM1_RSVD6_MASK
)

	)

30187 
	#PXP_HIST8_PARAM1_VALUE7_MASK
 0x1F000000u

	)

30188 
	#PXP_HIST8_PARAM1_VALUE7_SHIFT
 24

	)

30189 
	#PXP_HIST8_PARAM1_VALUE7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST8_PARAM1_VALUE7_SHIFT
))&
PXP_HIST8_PARAM1_VALUE7_MASK
)

	)

30190 
	#PXP_HIST8_PARAM1_RSVD7_MASK
 0xE0000000u

	)

30191 
	#PXP_HIST8_PARAM1_RSVD7_SHIFT
 29

	)

30192 
	#PXP_HIST8_PARAM1_RSVD7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST8_PARAM1_RSVD7_SHIFT
))&
PXP_HIST8_PARAM1_RSVD7_MASK
)

	)

30194 
	#PXP_HIST16_PARAM0_VALUE0_MASK
 0x1Fu

	)

30195 
	#PXP_HIST16_PARAM0_VALUE0_SHIFT
 0

	)

30196 
	#PXP_HIST16_PARAM0_VALUE0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM0_VALUE0_SHIFT
))&
PXP_HIST16_PARAM0_VALUE0_MASK
)

	)

30197 
	#PXP_HIST16_PARAM0_RSVD0_MASK
 0xE0u

	)

30198 
	#PXP_HIST16_PARAM0_RSVD0_SHIFT
 5

	)

30199 
	#PXP_HIST16_PARAM0_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM0_RSVD0_SHIFT
))&
PXP_HIST16_PARAM0_RSVD0_MASK
)

	)

30200 
	#PXP_HIST16_PARAM0_VALUE1_MASK
 0x1F00u

	)

30201 
	#PXP_HIST16_PARAM0_VALUE1_SHIFT
 8

	)

30202 
	#PXP_HIST16_PARAM0_VALUE1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM0_VALUE1_SHIFT
))&
PXP_HIST16_PARAM0_VALUE1_MASK
)

	)

30203 
	#PXP_HIST16_PARAM0_RSVD1_MASK
 0xE000u

	)

30204 
	#PXP_HIST16_PARAM0_RSVD1_SHIFT
 13

	)

30205 
	#PXP_HIST16_PARAM0_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM0_RSVD1_SHIFT
))&
PXP_HIST16_PARAM0_RSVD1_MASK
)

	)

30206 
	#PXP_HIST16_PARAM0_VALUE2_MASK
 0x1F0000u

	)

30207 
	#PXP_HIST16_PARAM0_VALUE2_SHIFT
 16

	)

30208 
	#PXP_HIST16_PARAM0_VALUE2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM0_VALUE2_SHIFT
))&
PXP_HIST16_PARAM0_VALUE2_MASK
)

	)

30209 
	#PXP_HIST16_PARAM0_RSVD2_MASK
 0xE00000u

	)

30210 
	#PXP_HIST16_PARAM0_RSVD2_SHIFT
 21

	)

30211 
	#PXP_HIST16_PARAM0_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM0_RSVD2_SHIFT
))&
PXP_HIST16_PARAM0_RSVD2_MASK
)

	)

30212 
	#PXP_HIST16_PARAM0_VALUE3_MASK
 0x1F000000u

	)

30213 
	#PXP_HIST16_PARAM0_VALUE3_SHIFT
 24

	)

30214 
	#PXP_HIST16_PARAM0_VALUE3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM0_VALUE3_SHIFT
))&
PXP_HIST16_PARAM0_VALUE3_MASK
)

	)

30215 
	#PXP_HIST16_PARAM0_RSVD3_MASK
 0xE0000000u

	)

30216 
	#PXP_HIST16_PARAM0_RSVD3_SHIFT
 29

	)

30217 
	#PXP_HIST16_PARAM0_RSVD3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM0_RSVD3_SHIFT
))&
PXP_HIST16_PARAM0_RSVD3_MASK
)

	)

30219 
	#PXP_HIST16_PARAM1_VALUE4_MASK
 0x1Fu

	)

30220 
	#PXP_HIST16_PARAM1_VALUE4_SHIFT
 0

	)

30221 
	#PXP_HIST16_PARAM1_VALUE4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM1_VALUE4_SHIFT
))&
PXP_HIST16_PARAM1_VALUE4_MASK
)

	)

30222 
	#PXP_HIST16_PARAM1_RSVD4_MASK
 0xE0u

	)

30223 
	#PXP_HIST16_PARAM1_RSVD4_SHIFT
 5

	)

30224 
	#PXP_HIST16_PARAM1_RSVD4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM1_RSVD4_SHIFT
))&
PXP_HIST16_PARAM1_RSVD4_MASK
)

	)

30225 
	#PXP_HIST16_PARAM1_VALUE5_MASK
 0x1F00u

	)

30226 
	#PXP_HIST16_PARAM1_VALUE5_SHIFT
 8

	)

30227 
	#PXP_HIST16_PARAM1_VALUE5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM1_VALUE5_SHIFT
))&
PXP_HIST16_PARAM1_VALUE5_MASK
)

	)

30228 
	#PXP_HIST16_PARAM1_RSVD5_MASK
 0xE000u

	)

30229 
	#PXP_HIST16_PARAM1_RSVD5_SHIFT
 13

	)

30230 
	#PXP_HIST16_PARAM1_RSVD5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM1_RSVD5_SHIFT
))&
PXP_HIST16_PARAM1_RSVD5_MASK
)

	)

30231 
	#PXP_HIST16_PARAM1_VALUE6_MASK
 0x1F0000u

	)

30232 
	#PXP_HIST16_PARAM1_VALUE6_SHIFT
 16

	)

30233 
	#PXP_HIST16_PARAM1_VALUE6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM1_VALUE6_SHIFT
))&
PXP_HIST16_PARAM1_VALUE6_MASK
)

	)

30234 
	#PXP_HIST16_PARAM1_RSVD6_MASK
 0xE00000u

	)

30235 
	#PXP_HIST16_PARAM1_RSVD6_SHIFT
 21

	)

30236 
	#PXP_HIST16_PARAM1_RSVD6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM1_RSVD6_SHIFT
))&
PXP_HIST16_PARAM1_RSVD6_MASK
)

	)

30237 
	#PXP_HIST16_PARAM1_VALUE7_MASK
 0x1F000000u

	)

30238 
	#PXP_HIST16_PARAM1_VALUE7_SHIFT
 24

	)

30239 
	#PXP_HIST16_PARAM1_VALUE7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM1_VALUE7_SHIFT
))&
PXP_HIST16_PARAM1_VALUE7_MASK
)

	)

30240 
	#PXP_HIST16_PARAM1_RSVD7_MASK
 0xE0000000u

	)

30241 
	#PXP_HIST16_PARAM1_RSVD7_SHIFT
 29

	)

30242 
	#PXP_HIST16_PARAM1_RSVD7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM1_RSVD7_SHIFT
))&
PXP_HIST16_PARAM1_RSVD7_MASK
)

	)

30244 
	#PXP_HIST16_PARAM2_VALUE8_MASK
 0x1Fu

	)

30245 
	#PXP_HIST16_PARAM2_VALUE8_SHIFT
 0

	)

30246 
	#PXP_HIST16_PARAM2_VALUE8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM2_VALUE8_SHIFT
))&
PXP_HIST16_PARAM2_VALUE8_MASK
)

	)

30247 
	#PXP_HIST16_PARAM2_RSVD8_MASK
 0xE0u

	)

30248 
	#PXP_HIST16_PARAM2_RSVD8_SHIFT
 5

	)

30249 
	#PXP_HIST16_PARAM2_RSVD8
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM2_RSVD8_SHIFT
))&
PXP_HIST16_PARAM2_RSVD8_MASK
)

	)

30250 
	#PXP_HIST16_PARAM2_VALUE9_MASK
 0x1F00u

	)

30251 
	#PXP_HIST16_PARAM2_VALUE9_SHIFT
 8

	)

30252 
	#PXP_HIST16_PARAM2_VALUE9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM2_VALUE9_SHIFT
))&
PXP_HIST16_PARAM2_VALUE9_MASK
)

	)

30253 
	#PXP_HIST16_PARAM2_RSVD9_MASK
 0xE000u

	)

30254 
	#PXP_HIST16_PARAM2_RSVD9_SHIFT
 13

	)

30255 
	#PXP_HIST16_PARAM2_RSVD9
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM2_RSVD9_SHIFT
))&
PXP_HIST16_PARAM2_RSVD9_MASK
)

	)

30256 
	#PXP_HIST16_PARAM2_VALUE10_MASK
 0x1F0000u

	)

30257 
	#PXP_HIST16_PARAM2_VALUE10_SHIFT
 16

	)

30258 
	#PXP_HIST16_PARAM2_VALUE10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM2_VALUE10_SHIFT
))&
PXP_HIST16_PARAM2_VALUE10_MASK
)

	)

30259 
	#PXP_HIST16_PARAM2_RSVD10_MASK
 0xE00000u

	)

30260 
	#PXP_HIST16_PARAM2_RSVD10_SHIFT
 21

	)

30261 
	#PXP_HIST16_PARAM2_RSVD10
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM2_RSVD10_SHIFT
))&
PXP_HIST16_PARAM2_RSVD10_MASK
)

	)

30262 
	#PXP_HIST16_PARAM2_VALUE11_MASK
 0x1F000000u

	)

30263 
	#PXP_HIST16_PARAM2_VALUE11_SHIFT
 24

	)

30264 
	#PXP_HIST16_PARAM2_VALUE11
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM2_VALUE11_SHIFT
))&
PXP_HIST16_PARAM2_VALUE11_MASK
)

	)

30265 
	#PXP_HIST16_PARAM2_RSVD11_MASK
 0xE0000000u

	)

30266 
	#PXP_HIST16_PARAM2_RSVD11_SHIFT
 29

	)

30267 
	#PXP_HIST16_PARAM2_RSVD11
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM2_RSVD11_SHIFT
))&
PXP_HIST16_PARAM2_RSVD11_MASK
)

	)

30269 
	#PXP_HIST16_PARAM3_VALUE12_MASK
 0x1Fu

	)

30270 
	#PXP_HIST16_PARAM3_VALUE12_SHIFT
 0

	)

30271 
	#PXP_HIST16_PARAM3_VALUE12
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM3_VALUE12_SHIFT
))&
PXP_HIST16_PARAM3_VALUE12_MASK
)

	)

30272 
	#PXP_HIST16_PARAM3_RSVD12_MASK
 0xE0u

	)

30273 
	#PXP_HIST16_PARAM3_RSVD12_SHIFT
 5

	)

30274 
	#PXP_HIST16_PARAM3_RSVD12
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM3_RSVD12_SHIFT
))&
PXP_HIST16_PARAM3_RSVD12_MASK
)

	)

30275 
	#PXP_HIST16_PARAM3_VALUE13_MASK
 0x1F00u

	)

30276 
	#PXP_HIST16_PARAM3_VALUE13_SHIFT
 8

	)

30277 
	#PXP_HIST16_PARAM3_VALUE13
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM3_VALUE13_SHIFT
))&
PXP_HIST16_PARAM3_VALUE13_MASK
)

	)

30278 
	#PXP_HIST16_PARAM3_RSVD13_MASK
 0xE000u

	)

30279 
	#PXP_HIST16_PARAM3_RSVD13_SHIFT
 13

	)

30280 
	#PXP_HIST16_PARAM3_RSVD13
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM3_RSVD13_SHIFT
))&
PXP_HIST16_PARAM3_RSVD13_MASK
)

	)

30281 
	#PXP_HIST16_PARAM3_VALUE14_MASK
 0x1F0000u

	)

30282 
	#PXP_HIST16_PARAM3_VALUE14_SHIFT
 16

	)

30283 
	#PXP_HIST16_PARAM3_VALUE14
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM3_VALUE14_SHIFT
))&
PXP_HIST16_PARAM3_VALUE14_MASK
)

	)

30284 
	#PXP_HIST16_PARAM3_RSVD14_MASK
 0xE00000u

	)

30285 
	#PXP_HIST16_PARAM3_RSVD14_SHIFT
 21

	)

30286 
	#PXP_HIST16_PARAM3_RSVD14
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM3_RSVD14_SHIFT
))&
PXP_HIST16_PARAM3_RSVD14_MASK
)

	)

30287 
	#PXP_HIST16_PARAM3_VALUE15_MASK
 0x1F000000u

	)

30288 
	#PXP_HIST16_PARAM3_VALUE15_SHIFT
 24

	)

30289 
	#PXP_HIST16_PARAM3_VALUE15
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM3_VALUE15_SHIFT
))&
PXP_HIST16_PARAM3_VALUE15_MASK
)

	)

30290 
	#PXP_HIST16_PARAM3_RSVD15_MASK
 0xE0000000u

	)

30291 
	#PXP_HIST16_PARAM3_RSVD15_SHIFT
 29

	)

30292 
	#PXP_HIST16_PARAM3_RSVD15
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_HIST16_PARAM3_RSVD15_SHIFT
))&
PXP_HIST16_PARAM3_RSVD15_MASK
)

	)

30294 
	#PXP_POWER_LUT_LP_STATE_WAY0_BANK0_MASK
 0x7u

	)

30295 
	#PXP_POWER_LUT_LP_STATE_WAY0_BANK0_SHIFT
 0

	)

30296 
	#PXP_POWER_LUT_LP_STATE_WAY0_BANK0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_POWER_LUT_LP_STATE_WAY0_BANK0_SHIFT
))&
PXP_POWER_LUT_LP_STATE_WAY0_BANK0_MASK
)

	)

30297 
	#PXP_POWER_LUT_LP_STATE_WAY0_BANKN_MASK
 0x38u

	)

30298 
	#PXP_POWER_LUT_LP_STATE_WAY0_BANKN_SHIFT
 3

	)

30299 
	#PXP_POWER_LUT_LP_STATE_WAY0_BANKN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_POWER_LUT_LP_STATE_WAY0_BANKN_SHIFT
))&
PXP_POWER_LUT_LP_STATE_WAY0_BANKN_MASK
)

	)

30300 
	#PXP_POWER_LUT_LP_STATE_WAY1_BANKN_MASK
 0x1C0u

	)

30301 
	#PXP_POWER_LUT_LP_STATE_WAY1_BANKN_SHIFT
 6

	)

30302 
	#PXP_POWER_LUT_LP_STATE_WAY1_BANKN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_POWER_LUT_LP_STATE_WAY1_BANKN_SHIFT
))&
PXP_POWER_LUT_LP_STATE_WAY1_BANKN_MASK
)

	)

30303 
	#PXP_POWER_ROT_MEM_LP_STATE_MASK
 0xE00u

	)

30304 
	#PXP_POWER_ROT_MEM_LP_STATE_SHIFT
 9

	)

30305 
	#PXP_POWER_ROT_MEM_LP_STATE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_POWER_ROT_MEM_LP_STATE_SHIFT
))&
PXP_POWER_ROT_MEM_LP_STATE_MASK
)

	)

30306 
	#PXP_POWER_CTRL_MASK
 0xFFFFF000u

	)

30307 
	#PXP_POWER_CTRL_SHIFT
 12

	)

30308 
	#PXP_POWER_CTRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_POWER_CTRL_SHIFT
))&
PXP_POWER_CTRL_MASK
)

	)

30310 
	#PXP_NEXT_ENABLED_MASK
 0x1u

	)

30311 
	#PXP_NEXT_ENABLED_SHIFT
 0

	)

30312 
	#PXP_NEXT_RSVD_MASK
 0x2u

	)

30313 
	#PXP_NEXT_RSVD_SHIFT
 1

	)

30314 
	#PXP_NEXT_POINTER_MASK
 0xFFFFFFFCu

	)

30315 
	#PXP_NEXT_POINTER_SHIFT
 2

	)

30316 
	#PXP_NEXT_POINTER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
PXP_NEXT_POINTER_SHIFT
))&
PXP_NEXT_POINTER_MASK
)

	)

30324 
	#PXP_BASE
 (0x42218000u)

	)

30326 
	#PXP
 ((
PXP_Ty≥
 *)
PXP_BASE
)

	)

30327 
	#PXP_BASE_PTR
 (
PXP
)

	)

30329 
	#PXP_BASE_ADDRS
 { 
PXP_BASE
 }

	)

30331 
	#PXP_BASE_PTRS
 { 
PXP
 }

	)

30333 
	#PXP_IRQS
 { 
PXP_IRQn
 }

	)

30346 
	#PXP_CTRL
 
	`PXP_CTRL_REG
(
PXP_BASE_PTR
)

	)

30347 
	#PXP_STAT
 
	`PXP_STAT_REG
(
PXP_BASE_PTR
)

	)

30348 
	#PXP_OUT_CTRL
 
	`PXP_OUT_CTRL_REG
(
PXP_BASE_PTR
)

	)

30349 
	#PXP_OUT_BUF
 
	`PXP_OUT_BUF_REG
(
PXP_BASE_PTR
)

	)

30350 
	#PXP_OUT_BUF2
 
	`PXP_OUT_BUF2_REG
(
PXP_BASE_PTR
)

	)

30351 
	#PXP_OUT_PITCH
 
	`PXP_OUT_PITCH_REG
(
PXP_BASE_PTR
)

	)

30352 
	#PXP_OUT_LRC
 
	`PXP_OUT_LRC_REG
(
PXP_BASE_PTR
)

	)

30353 
	#PXP_OUT_PS_ULC
 
	`PXP_OUT_PS_ULC_REG
(
PXP_BASE_PTR
)

	)

30354 
	#PXP_OUT_PS_LRC
 
	`PXP_OUT_PS_LRC_REG
(
PXP_BASE_PTR
)

	)

30355 
	#PXP_OUT_AS_ULC
 
	`PXP_OUT_AS_ULC_REG
(
PXP_BASE_PTR
)

	)

30356 
	#PXP_OUT_AS_LRC
 
	`PXP_OUT_AS_LRC_REG
(
PXP_BASE_PTR
)

	)

30357 
	#PXP_PS_CTRL
 
	`PXP_PS_CTRL_REG
(
PXP_BASE_PTR
)

	)

30358 
	#PXP_PS_BUF
 
	`PXP_PS_BUF_REG
(
PXP_BASE_PTR
)

	)

30359 
	#PXP_PS_UBUF
 
	`PXP_PS_UBUF_REG
(
PXP_BASE_PTR
)

	)

30360 
	#PXP_PS_VBUF
 
	`PXP_PS_VBUF_REG
(
PXP_BASE_PTR
)

	)

30361 
	#PXP_PS_PITCH
 
	`PXP_PS_PITCH_REG
(
PXP_BASE_PTR
)

	)

30362 
	#PXP_PS_BACKGROUND
 
	`PXP_PS_BACKGROUND_REG
(
PXP_BASE_PTR
)

	)

30363 
	#PXP_PS_SCALE
 
	`PXP_PS_SCALE_REG
(
PXP_BASE_PTR
)

	)

30364 
	#PXP_PS_OFFSET
 
	`PXP_PS_OFFSET_REG
(
PXP_BASE_PTR
)

	)

30365 
	#PXP_PS_CLRKEYLOW
 
	`PXP_PS_CLRKEYLOW_REG
(
PXP_BASE_PTR
)

	)

30366 
	#PXP_PS_CLRKEYHIGH
 
	`PXP_PS_CLRKEYHIGH_REG
(
PXP_BASE_PTR
)

	)

30367 
	#PXP_AS_CTRL
 
	`PXP_AS_CTRL_REG
(
PXP_BASE_PTR
)

	)

30368 
	#PXP_AS_BUF
 
	`PXP_AS_BUF_REG
(
PXP_BASE_PTR
)

	)

30369 
	#PXP_AS_PITCH
 
	`PXP_AS_PITCH_REG
(
PXP_BASE_PTR
)

	)

30370 
	#PXP_AS_CLRKEYLOW
 
	`PXP_AS_CLRKEYLOW_REG
(
PXP_BASE_PTR
)

	)

30371 
	#PXP_AS_CLRKEYHIGH
 
	`PXP_AS_CLRKEYHIGH_REG
(
PXP_BASE_PTR
)

	)

30372 
	#PXP_CSC1_COEF0
 
	`PXP_CSC1_COEF0_REG
(
PXP_BASE_PTR
)

	)

30373 
	#PXP_CSC1_COEF1
 
	`PXP_CSC1_COEF1_REG
(
PXP_BASE_PTR
)

	)

30374 
	#PXP_CSC1_COEF2
 
	`PXP_CSC1_COEF2_REG
(
PXP_BASE_PTR
)

	)

30375 
	#PXP_CSC2_CTRL
 
	`PXP_CSC2_CTRL_REG
(
PXP_BASE_PTR
)

	)

30376 
	#PXP_CSC2_COEF0
 
	`PXP_CSC2_COEF0_REG
(
PXP_BASE_PTR
)

	)

30377 
	#PXP_CSC2_COEF1
 
	`PXP_CSC2_COEF1_REG
(
PXP_BASE_PTR
)

	)

30378 
	#PXP_CSC2_COEF2
 
	`PXP_CSC2_COEF2_REG
(
PXP_BASE_PTR
)

	)

30379 
	#PXP_CSC2_COEF3
 
	`PXP_CSC2_COEF3_REG
(
PXP_BASE_PTR
)

	)

30380 
	#PXP_CSC2_COEF4
 
	`PXP_CSC2_COEF4_REG
(
PXP_BASE_PTR
)

	)

30381 
	#PXP_CSC2_COEF5
 
	`PXP_CSC2_COEF5_REG
(
PXP_BASE_PTR
)

	)

30382 
	#PXP_LUT_CTRL
 
	`PXP_LUT_CTRL_REG
(
PXP_BASE_PTR
)

	)

30383 
	#PXP_LUT_ADDR
 
	`PXP_LUT_ADDR_REG
(
PXP_BASE_PTR
)

	)

30384 
	#PXP_LUT_DATA
 
	`PXP_LUT_DATA_REG
(
PXP_BASE_PTR
)

	)

30385 
	#PXP_LUT_EXTMEM
 
	`PXP_LUT_EXTMEM_REG
(
PXP_BASE_PTR
)

	)

30386 
	#PXP_CFA
 
	`PXP_CFA_REG
(
PXP_BASE_PTR
)

	)

30387 
	#PXP_HIST_CTRL
 
	`PXP_HIST_CTRL_REG
(
PXP_BASE_PTR
)

	)

30388 
	#PXP_HIST2_PARAM
 
	`PXP_HIST2_PARAM_REG
(
PXP_BASE_PTR
)

	)

30389 
	#PXP_HIST4_PARAM
 
	`PXP_HIST4_PARAM_REG
(
PXP_BASE_PTR
)

	)

30390 
	#PXP_HIST8_PARAM0
 
	`PXP_HIST8_PARAM0_REG
(
PXP_BASE_PTR
)

	)

30391 
	#PXP_HIST8_PARAM1
 
	`PXP_HIST8_PARAM1_REG
(
PXP_BASE_PTR
)

	)

30392 
	#PXP_HIST16_PARAM0
 
	`PXP_HIST16_PARAM0_REG
(
PXP_BASE_PTR
)

	)

30393 
	#PXP_HIST16_PARAM1
 
	`PXP_HIST16_PARAM1_REG
(
PXP_BASE_PTR
)

	)

30394 
	#PXP_HIST16_PARAM2
 
	`PXP_HIST16_PARAM2_REG
(
PXP_BASE_PTR
)

	)

30395 
	#PXP_HIST16_PARAM3
 
	`PXP_HIST16_PARAM3_REG
(
PXP_BASE_PTR
)

	)

30396 
	#PXP_POWER
 
	`PXP_POWER_REG
(
PXP_BASE_PTR
)

	)

30397 
	#PXP_NEXT
 
	`PXP_NEXT_REG
(
PXP_BASE_PTR
)

	)

30418 
__IO
 
uöt32_t
 
	mMCR
;

30419 
uöt8_t
 
	mRESERVED_0
[4];

30420 
__IO
 
uöt32_t
 
	mIPCR
;

30421 
__IO
 
uöt32_t
 
	mFLSHCR
;

30422 
__IO
 
uöt32_t
 
	mBUF0CR
;

30423 
__IO
 
uöt32_t
 
	mBUF1CR
;

30424 
__IO
 
uöt32_t
 
	mBUF2CR
;

30425 
__IO
 
uöt32_t
 
	mBUF3CR
;

30426 
__IO
 
uöt32_t
 
	mBFGENCR
;

30427 
uöt8_t
 
	mRESERVED_1
[12];

30428 
__IO
 
uöt32_t
 
	mBUF0IND
;

30429 
__IO
 
uöt32_t
 
	mBUF1IND
;

30430 
__IO
 
uöt32_t
 
	mBUF2IND
;

30431 
uöt8_t
 
	mRESERVED_2
[196];

30432 
__IO
 
uöt32_t
 
	mSFAR
;

30433 
uöt8_t
 
	mRESERVED_3
[4];

30434 
__IO
 
uöt32_t
 
	mSMPR
;

30435 
__I
 
uöt32_t
 
	mRBSR
;

30436 
__IO
 
uöt32_t
 
	mRBCT
;

30437 
uöt8_t
 
	mRESERVED_4
[60];

30438 
__I
 
uöt32_t
 
	mTBSR
;

30439 
__IO
 
uöt32_t
 
	mTBDR
;

30440 
uöt8_t
 
	mRESERVED_5
[4];

30441 
__I
 
uöt32_t
 
	mSR
;

30442 
__IO
 
uöt32_t
 
	mFR
;

30443 
__IO
 
uöt32_t
 
	mRSER
;

30444 
__I
 
uöt32_t
 
	mSPNDST
;

30445 
__IO
 
uöt32_t
 
	mSPTRCLR
;

30446 
uöt8_t
 
	mRESERVED_6
[16];

30447 
__IO
 
uöt32_t
 
	mSFA1AD
;

30448 
__IO
 
uöt32_t
 
	mSFA2AD
;

30449 
__IO
 
uöt32_t
 
	mSFB1AD
;

30450 
__IO
 
uöt32_t
 
	mSFB2AD
;

30451 
uöt8_t
 
	mRESERVED_7
[112];

30452 
__IO
 
uöt32_t
 
	mRBDR
[32];

30453 
uöt8_t
 
	mRESERVED_8
[128];

30454 
__IO
 
uöt32_t
 
	mLUTKEY
;

30455 
__IO
 
uöt32_t
 
	mLCKCR
;

30456 
uöt8_t
 
	mRESERVED_9
[8];

30457 
__IO
 
uöt32_t
 
	mLUT
[64];

30458 } 
	tQuadSPI_Ty≥
, *
	tQuadSPI_MemM≠På
;

30470 
	#QuadSPI_MCR_REG
(
ba£
Ë((ba£)->
MCR
)

	)

30471 
	#QuadSPI_IPCR_REG
(
ba£
Ë((ba£)->
IPCR
)

	)

30472 
	#QuadSPI_FLSHCR_REG
(
ba£
Ë((ba£)->
FLSHCR
)

	)

30473 
	#QuadSPI_BUF0CR_REG
(
ba£
Ë((ba£)->
BUF0CR
)

	)

30474 
	#QuadSPI_BUF1CR_REG
(
ba£
Ë((ba£)->
BUF1CR
)

	)

30475 
	#QuadSPI_BUF2CR_REG
(
ba£
Ë((ba£)->
BUF2CR
)

	)

30476 
	#QuadSPI_BUF3CR_REG
(
ba£
Ë((ba£)->
BUF3CR
)

	)

30477 
	#QuadSPI_BFGENCR_REG
(
ba£
Ë((ba£)->
BFGENCR
)

	)

30478 
	#QuadSPI_BUF0IND_REG
(
ba£
Ë((ba£)->
BUF0IND
)

	)

30479 
	#QuadSPI_BUF1IND_REG
(
ba£
Ë((ba£)->
BUF1IND
)

	)

30480 
	#QuadSPI_BUF2IND_REG
(
ba£
Ë((ba£)->
BUF2IND
)

	)

30481 
	#QuadSPI_SFAR_REG
(
ba£
Ë((ba£)->
SFAR
)

	)

30482 
	#QuadSPI_SMPR_REG
(
ba£
Ë((ba£)->
SMPR
)

	)

30483 
	#QuadSPI_RBSR_REG
(
ba£
Ë((ba£)->
RBSR
)

	)

30484 
	#QuadSPI_RBCT_REG
(
ba£
Ë((ba£)->
RBCT
)

	)

30485 
	#QuadSPI_TBSR_REG
(
ba£
Ë((ba£)->
TBSR
)

	)

30486 
	#QuadSPI_TBDR_REG
(
ba£
Ë((ba£)->
TBDR
)

	)

30487 
	#QuadSPI_SR_REG
(
ba£
Ë((ba£)->
SR
)

	)

30488 
	#QuadSPI_FR_REG
(
ba£
Ë((ba£)->
FR
)

	)

30489 
	#QuadSPI_RSER_REG
(
ba£
Ë((ba£)->
RSER
)

	)

30490 
	#QuadSPI_SPNDST_REG
(
ba£
Ë((ba£)->
SPNDST
)

	)

30491 
	#QuadSPI_SPTRCLR_REG
(
ba£
Ë((ba£)->
SPTRCLR
)

	)

30492 
	#QuadSPI_SFA1AD_REG
(
ba£
Ë((ba£)->
SFA1AD
)

	)

30493 
	#QuadSPI_SFA2AD_REG
(
ba£
Ë((ba£)->
SFA2AD
)

	)

30494 
	#QuadSPI_SFB1AD_REG
(
ba£
Ë((ba£)->
SFB1AD
)

	)

30495 
	#QuadSPI_SFB2AD_REG
(
ba£
Ë((ba£)->
SFB2AD
)

	)

30496 
	#QuadSPI_RBDR_REG
(
ba£
,
ödex
Ë((ba£)->
RBDR
[ödex])

	)

30497 
	#QuadSPI_LUTKEY_REG
(
ba£
Ë((ba£)->
LUTKEY
)

	)

30498 
	#QuadSPI_LCKCR_REG
(
ba£
Ë((ba£)->
LCKCR
)

	)

30499 
	#QuadSPI_LUT_REG
(
ba£
,
ödex
Ë((ba£)->
LUT
[ödex])

	)

30515 
	#QuadSPI_MCR_SWRSTSD_MASK
 0x1u

	)

30516 
	#QuadSPI_MCR_SWRSTSD_SHIFT
 0

	)

30517 
	#QuadSPI_MCR_SWRSTHD_MASK
 0x2u

	)

30518 
	#QuadSPI_MCR_SWRSTHD_SHIFT
 1

	)

30519 
	#QuadSPI_MCR_DQS_EN_MASK
 0x40u

	)

30520 
	#QuadSPI_MCR_DQS_EN_SHIFT
 6

	)

30521 
	#QuadSPI_MCR_DDR_EN_MASK
 0x80u

	)

30522 
	#QuadSPI_MCR_DDR_EN_SHIFT
 7

	)

30523 
	#QuadSPI_MCR_CLR_RXF_MASK
 0x400u

	)

30524 
	#QuadSPI_MCR_CLR_RXF_SHIFT
 10

	)

30525 
	#QuadSPI_MCR_CLR_TXF_MASK
 0x800u

	)

30526 
	#QuadSPI_MCR_CLR_TXF_SHIFT
 11

	)

30527 
	#QuadSPI_MCR_MDIS_MASK
 0x4000u

	)

30528 
	#QuadSPI_MCR_MDIS_SHIFT
 14

	)

30529 
	#QuadSPI_MCR_SCLKCFG_MASK
 0xFF000000u

	)

30530 
	#QuadSPI_MCR_SCLKCFG_SHIFT
 24

	)

30531 
	#QuadSPI_MCR_SCLKCFG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_MCR_SCLKCFG_SHIFT
))&
QuadSPI_MCR_SCLKCFG_MASK
)

	)

30533 
	#QuadSPI_IPCR_IDATSZ_MASK
 0xFFFFu

	)

30534 
	#QuadSPI_IPCR_IDATSZ_SHIFT
 0

	)

30535 
	#QuadSPI_IPCR_IDATSZ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_IPCR_IDATSZ_SHIFT
))&
QuadSPI_IPCR_IDATSZ_MASK
)

	)

30536 
	#QuadSPI_IPCR_PAR_EN_MASK
 0x10000u

	)

30537 
	#QuadSPI_IPCR_PAR_EN_SHIFT
 16

	)

30538 
	#QuadSPI_IPCR_SEQID_MASK
 0xF000000u

	)

30539 
	#QuadSPI_IPCR_SEQID_SHIFT
 24

	)

30540 
	#QuadSPI_IPCR_SEQID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_IPCR_SEQID_SHIFT
))&
QuadSPI_IPCR_SEQID_MASK
)

	)

30542 
	#QuadSPI_FLSHCR_TCSS_MASK
 0xFu

	)

30543 
	#QuadSPI_FLSHCR_TCSS_SHIFT
 0

	)

30544 
	#QuadSPI_FLSHCR_TCSS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_FLSHCR_TCSS_SHIFT
))&
QuadSPI_FLSHCR_TCSS_MASK
)

	)

30545 
	#QuadSPI_FLSHCR_TCSH_MASK
 0xF00u

	)

30546 
	#QuadSPI_FLSHCR_TCSH_SHIFT
 8

	)

30547 
	#QuadSPI_FLSHCR_TCSH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_FLSHCR_TCSH_SHIFT
))&
QuadSPI_FLSHCR_TCSH_MASK
)

	)

30549 
	#QuadSPI_BUF0CR_MSTRID_MASK
 0xFu

	)

30550 
	#QuadSPI_BUF0CR_MSTRID_SHIFT
 0

	)

30551 
	#QuadSPI_BUF0CR_MSTRID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_BUF0CR_MSTRID_SHIFT
))&
QuadSPI_BUF0CR_MSTRID_MASK
)

	)

30552 
	#QuadSPI_BUF0CR_ADATSZ_MASK
 0xFF00u

	)

30553 
	#QuadSPI_BUF0CR_ADATSZ_SHIFT
 8

	)

30554 
	#QuadSPI_BUF0CR_ADATSZ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_BUF0CR_ADATSZ_SHIFT
))&
QuadSPI_BUF0CR_ADATSZ_MASK
)

	)

30555 
	#QuadSPI_BUF0CR_HP_EN_MASK
 0x80000000u

	)

30556 
	#QuadSPI_BUF0CR_HP_EN_SHIFT
 31

	)

30558 
	#QuadSPI_BUF1CR_MSTRID_MASK
 0xFu

	)

30559 
	#QuadSPI_BUF1CR_MSTRID_SHIFT
 0

	)

30560 
	#QuadSPI_BUF1CR_MSTRID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_BUF1CR_MSTRID_SHIFT
))&
QuadSPI_BUF1CR_MSTRID_MASK
)

	)

30561 
	#QuadSPI_BUF1CR_ADATSZ_MASK
 0xFF00u

	)

30562 
	#QuadSPI_BUF1CR_ADATSZ_SHIFT
 8

	)

30563 
	#QuadSPI_BUF1CR_ADATSZ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_BUF1CR_ADATSZ_SHIFT
))&
QuadSPI_BUF1CR_ADATSZ_MASK
)

	)

30565 
	#QuadSPI_BUF2CR_MSTRID_MASK
 0xFu

	)

30566 
	#QuadSPI_BUF2CR_MSTRID_SHIFT
 0

	)

30567 
	#QuadSPI_BUF2CR_MSTRID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_BUF2CR_MSTRID_SHIFT
))&
QuadSPI_BUF2CR_MSTRID_MASK
)

	)

30568 
	#QuadSPI_BUF2CR_ADATSZ_MASK
 0xFF00u

	)

30569 
	#QuadSPI_BUF2CR_ADATSZ_SHIFT
 8

	)

30570 
	#QuadSPI_BUF2CR_ADATSZ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_BUF2CR_ADATSZ_SHIFT
))&
QuadSPI_BUF2CR_ADATSZ_MASK
)

	)

30572 
	#QuadSPI_BUF3CR_MSTRID_MASK
 0xFu

	)

30573 
	#QuadSPI_BUF3CR_MSTRID_SHIFT
 0

	)

30574 
	#QuadSPI_BUF3CR_MSTRID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_BUF3CR_MSTRID_SHIFT
))&
QuadSPI_BUF3CR_MSTRID_MASK
)

	)

30575 
	#QuadSPI_BUF3CR_ADATSZ_MASK
 0xFF00u

	)

30576 
	#QuadSPI_BUF3CR_ADATSZ_SHIFT
 8

	)

30577 
	#QuadSPI_BUF3CR_ADATSZ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_BUF3CR_ADATSZ_SHIFT
))&
QuadSPI_BUF3CR_ADATSZ_MASK
)

	)

30578 
	#QuadSPI_BUF3CR_ALLMST_MASK
 0x80000000u

	)

30579 
	#QuadSPI_BUF3CR_ALLMST_SHIFT
 31

	)

30581 
	#QuadSPI_BFGENCR_SEQID_MASK
 0xF000u

	)

30582 
	#QuadSPI_BFGENCR_SEQID_SHIFT
 12

	)

30583 
	#QuadSPI_BFGENCR_SEQID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_BFGENCR_SEQID_SHIFT
))&
QuadSPI_BFGENCR_SEQID_MASK
)

	)

30584 
	#QuadSPI_BFGENCR_PAR_EN_MASK
 0x10000u

	)

30585 
	#QuadSPI_BFGENCR_PAR_EN_SHIFT
 16

	)

30587 
	#QuadSPI_BUF0IND_TPINDX0_MASK
 0xFFFFFFF8u

	)

30588 
	#QuadSPI_BUF0IND_TPINDX0_SHIFT
 3

	)

30589 
	#QuadSPI_BUF0IND_TPINDX0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_BUF0IND_TPINDX0_SHIFT
))&
QuadSPI_BUF0IND_TPINDX0_MASK
)

	)

30591 
	#QuadSPI_BUF1IND_TPINDX1_MASK
 0xFFFFFFF8u

	)

30592 
	#QuadSPI_BUF1IND_TPINDX1_SHIFT
 3

	)

30593 
	#QuadSPI_BUF1IND_TPINDX1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_BUF1IND_TPINDX1_SHIFT
))&
QuadSPI_BUF1IND_TPINDX1_MASK
)

	)

30595 
	#QuadSPI_BUF2IND_TPINDX2_MASK
 0xFFFFFFF8u

	)

30596 
	#QuadSPI_BUF2IND_TPINDX2_SHIFT
 3

	)

30597 
	#QuadSPI_BUF2IND_TPINDX2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_BUF2IND_TPINDX2_SHIFT
))&
QuadSPI_BUF2IND_TPINDX2_MASK
)

	)

30599 
	#QuadSPI_SFAR_SFADR_MASK
 0xFFFFFFFFu

	)

30600 
	#QuadSPI_SFAR_SFADR_SHIFT
 0

	)

30601 
	#QuadSPI_SFAR_SFADR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_SFAR_SFADR_SHIFT
))&
QuadSPI_SFAR_SFADR_MASK
)

	)

30603 
	#QuadSPI_SMPR_HSENA_MASK
 0x1u

	)

30604 
	#QuadSPI_SMPR_HSENA_SHIFT
 0

	)

30605 
	#QuadSPI_SMPR_HSPHS_MASK
 0x2u

	)

30606 
	#QuadSPI_SMPR_HSPHS_SHIFT
 1

	)

30607 
	#QuadSPI_SMPR_HSDLY_MASK
 0x4u

	)

30608 
	#QuadSPI_SMPR_HSDLY_SHIFT
 2

	)

30609 
	#QuadSPI_SMPR_FSPHS_MASK
 0x20u

	)

30610 
	#QuadSPI_SMPR_FSPHS_SHIFT
 5

	)

30611 
	#QuadSPI_SMPR_FSDLY_MASK
 0x40u

	)

30612 
	#QuadSPI_SMPR_FSDLY_SHIFT
 6

	)

30613 
	#QuadSPI_SMPR_DDRSMP_MASK
 0x70000u

	)

30614 
	#QuadSPI_SMPR_DDRSMP_SHIFT
 16

	)

30615 
	#QuadSPI_SMPR_DDRSMP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_SMPR_DDRSMP_SHIFT
))&
QuadSPI_SMPR_DDRSMP_MASK
)

	)

30617 
	#QuadSPI_RBSR_RDBFL_MASK
 0x3F00u

	)

30618 
	#QuadSPI_RBSR_RDBFL_SHIFT
 8

	)

30619 
	#QuadSPI_RBSR_RDBFL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_RBSR_RDBFL_SHIFT
))&
QuadSPI_RBSR_RDBFL_MASK
)

	)

30620 
	#QuadSPI_RBSR_RDCTR_MASK
 0xFFFF0000u

	)

30621 
	#QuadSPI_RBSR_RDCTR_SHIFT
 16

	)

30622 
	#QuadSPI_RBSR_RDCTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_RBSR_RDCTR_SHIFT
))&
QuadSPI_RBSR_RDCTR_MASK
)

	)

30624 
	#QuadSPI_RBCT_WMRK_MASK
 0x1Fu

	)

30625 
	#QuadSPI_RBCT_WMRK_SHIFT
 0

	)

30626 
	#QuadSPI_RBCT_WMRK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_RBCT_WMRK_SHIFT
))&
QuadSPI_RBCT_WMRK_MASK
)

	)

30627 
	#QuadSPI_RBCT_RXBRD_MASK
 0x100u

	)

30628 
	#QuadSPI_RBCT_RXBRD_SHIFT
 8

	)

30630 
	#QuadSPI_TBSR_TRBFL_MASK
 0x3F00u

	)

30631 
	#QuadSPI_TBSR_TRBFL_SHIFT
 8

	)

30632 
	#QuadSPI_TBSR_TRBFL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_TBSR_TRBFL_SHIFT
))&
QuadSPI_TBSR_TRBFL_MASK
)

	)

30633 
	#QuadSPI_TBSR_TRCTR_MASK
 0xFFFF0000u

	)

30634 
	#QuadSPI_TBSR_TRCTR_SHIFT
 16

	)

30635 
	#QuadSPI_TBSR_TRCTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_TBSR_TRCTR_SHIFT
))&
QuadSPI_TBSR_TRCTR_MASK
)

	)

30637 
	#QuadSPI_TBDR_TXDATA_MASK
 0xFFFFFFFFu

	)

30638 
	#QuadSPI_TBDR_TXDATA_SHIFT
 0

	)

30639 
	#QuadSPI_TBDR_TXDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_TBDR_TXDATA_SHIFT
))&
QuadSPI_TBDR_TXDATA_MASK
)

	)

30641 
	#QuadSPI_SR_BUSY_MASK
 0x1u

	)

30642 
	#QuadSPI_SR_BUSY_SHIFT
 0

	)

30643 
	#QuadSPI_SR_IP_ACC_MASK
 0x2u

	)

30644 
	#QuadSPI_SR_IP_ACC_SHIFT
 1

	)

30645 
	#QuadSPI_SR_AHB_ACC_MASK
 0x4u

	)

30646 
	#QuadSPI_SR_AHB_ACC_SHIFT
 2

	)

30647 
	#QuadSPI_SR_RESERVED_MASK
 0x8u

	)

30648 
	#QuadSPI_SR_RESERVED_SHIFT
 3

	)

30649 
	#QuadSPI_SR_AHBGNT_MASK
 0x20u

	)

30650 
	#QuadSPI_SR_AHBGNT_SHIFT
 5

	)

30651 
	#QuadSPI_SR_AHBTRN_MASK
 0x40u

	)

30652 
	#QuadSPI_SR_AHBTRN_SHIFT
 6

	)

30653 
	#QuadSPI_SR_AHB0NE_MASK
 0x80u

	)

30654 
	#QuadSPI_SR_AHB0NE_SHIFT
 7

	)

30655 
	#QuadSPI_SR_AHB1NE_MASK
 0x100u

	)

30656 
	#QuadSPI_SR_AHB1NE_SHIFT
 8

	)

30657 
	#QuadSPI_SR_AHB2NE_MASK
 0x200u

	)

30658 
	#QuadSPI_SR_AHB2NE_SHIFT
 9

	)

30659 
	#QuadSPI_SR_AHB3NE_MASK
 0x400u

	)

30660 
	#QuadSPI_SR_AHB3NE_SHIFT
 10

	)

30661 
	#QuadSPI_SR_AHB0FUL_MASK
 0x800u

	)

30662 
	#QuadSPI_SR_AHB0FUL_SHIFT
 11

	)

30663 
	#QuadSPI_SR_AHB1FUL_MASK
 0x1000u

	)

30664 
	#QuadSPI_SR_AHB1FUL_SHIFT
 12

	)

30665 
	#QuadSPI_SR_AHB2FUL_MASK
 0x2000u

	)

30666 
	#QuadSPI_SR_AHB2FUL_SHIFT
 13

	)

30667 
	#QuadSPI_SR_AHB3FUL_MASK
 0x4000u

	)

30668 
	#QuadSPI_SR_AHB3FUL_SHIFT
 14

	)

30669 
	#QuadSPI_SR_RXWE_MASK
 0x10000u

	)

30670 
	#QuadSPI_SR_RXWE_SHIFT
 16

	)

30671 
	#QuadSPI_SR_RXFULL_MASK
 0x80000u

	)

30672 
	#QuadSPI_SR_RXFULL_SHIFT
 19

	)

30673 
	#QuadSPI_SR_RXDMA_MASK
 0x800000u

	)

30674 
	#QuadSPI_SR_RXDMA_SHIFT
 23

	)

30675 
	#QuadSPI_SR_TXEDA_MASK
 0x1000000u

	)

30676 
	#QuadSPI_SR_TXEDA_SHIFT
 24

	)

30677 
	#QuadSPI_SR_TXFULL_MASK
 0x8000000u

	)

30678 
	#QuadSPI_SR_TXFULL_SHIFT
 27

	)

30679 
	#QuadSPI_SR_DLPSMP_MASK
 0xE0000000u

	)

30680 
	#QuadSPI_SR_DLPSMP_SHIFT
 29

	)

30681 
	#QuadSPI_SR_DLPSMP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_SR_DLPSMP_SHIFT
))&
QuadSPI_SR_DLPSMP_MASK
)

	)

30683 
	#QuadSPI_FR_TFF_MASK
 0x1u

	)

30684 
	#QuadSPI_FR_TFF_SHIFT
 0

	)

30685 
	#QuadSPI_FR_IPGEF_MASK
 0x10u

	)

30686 
	#QuadSPI_FR_IPGEF_SHIFT
 4

	)

30687 
	#QuadSPI_FR_IPIEF_MASK
 0x40u

	)

30688 
	#QuadSPI_FR_IPIEF_SHIFT
 6

	)

30689 
	#QuadSPI_FR_IPAEF_MASK
 0x80u

	)

30690 
	#QuadSPI_FR_IPAEF_SHIFT
 7

	)

30691 
	#QuadSPI_FR_IUEF_MASK
 0x800u

	)

30692 
	#QuadSPI_FR_IUEF_SHIFT
 11

	)

30693 
	#QuadSPI_FR_ABOF_MASK
 0x1000u

	)

30694 
	#QuadSPI_FR_ABOF_SHIFT
 12

	)

30695 
	#QuadSPI_FR_ABSEF_MASK
 0x8000u

	)

30696 
	#QuadSPI_FR_ABSEF_SHIFT
 15

	)

30697 
	#QuadSPI_FR_RBDF_MASK
 0x10000u

	)

30698 
	#QuadSPI_FR_RBDF_SHIFT
 16

	)

30699 
	#QuadSPI_FR_RBOF_MASK
 0x20000u

	)

30700 
	#QuadSPI_FR_RBOF_SHIFT
 17

	)

30701 
	#QuadSPI_FR_ILLINE_MASK
 0x800000u

	)

30702 
	#QuadSPI_FR_ILLINE_SHIFT
 23

	)

30703 
	#QuadSPI_FR_TBUF_MASK
 0x4000000u

	)

30704 
	#QuadSPI_FR_TBUF_SHIFT
 26

	)

30705 
	#QuadSPI_FR_TBFF_MASK
 0x8000000u

	)

30706 
	#QuadSPI_FR_TBFF_SHIFT
 27

	)

30707 
	#QuadSPI_FR_RESERVED_MASK
 0x60000000u

	)

30708 
	#QuadSPI_FR_RESERVED_SHIFT
 29

	)

30709 
	#QuadSPI_FR_RESERVED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_FR_RESERVED_SHIFT
))&
QuadSPI_FR_RESERVED_MASK
)

	)

30710 
	#QuadSPI_FR_DLPFF_MASK
 0x80000000u

	)

30711 
	#QuadSPI_FR_DLPFF_SHIFT
 31

	)

30713 
	#QuadSPI_RSER_TFIE_MASK
 0x1u

	)

30714 
	#QuadSPI_RSER_TFIE_SHIFT
 0

	)

30715 
	#QuadSPI_RSER_IPGEIE_MASK
 0x10u

	)

30716 
	#QuadSPI_RSER_IPGEIE_SHIFT
 4

	)

30717 
	#QuadSPI_RSER_IPIEIE_MASK
 0x40u

	)

30718 
	#QuadSPI_RSER_IPIEIE_SHIFT
 6

	)

30719 
	#QuadSPI_RSER_IPAEIE_MASK
 0x80u

	)

30720 
	#QuadSPI_RSER_IPAEIE_SHIFT
 7

	)

30721 
	#QuadSPI_RSER_IUEIE_MASK
 0x800u

	)

30722 
	#QuadSPI_RSER_IUEIE_SHIFT
 11

	)

30723 
	#QuadSPI_RSER_ABOIE_MASK
 0x1000u

	)

30724 
	#QuadSPI_RSER_ABOIE_SHIFT
 12

	)

30725 
	#QuadSPI_RSER_ABSEIE_MASK
 0x8000u

	)

30726 
	#QuadSPI_RSER_ABSEIE_SHIFT
 15

	)

30727 
	#QuadSPI_RSER_RBDIE_MASK
 0x10000u

	)

30728 
	#QuadSPI_RSER_RBDIE_SHIFT
 16

	)

30729 
	#QuadSPI_RSER_RBOIE_MASK
 0x20000u

	)

30730 
	#QuadSPI_RSER_RBOIE_SHIFT
 17

	)

30731 
	#QuadSPI_RSER_RBDDE_MASK
 0x200000u

	)

30732 
	#QuadSPI_RSER_RBDDE_SHIFT
 21

	)

30733 
	#QuadSPI_RSER_ILLINIE_MASK
 0x800000u

	)

30734 
	#QuadSPI_RSER_ILLINIE_SHIFT
 23

	)

30735 
	#QuadSPI_RSER_TBUIE_MASK
 0x4000000u

	)

30736 
	#QuadSPI_RSER_TBUIE_SHIFT
 26

	)

30737 
	#QuadSPI_RSER_TBFIE_MASK
 0x8000000u

	)

30738 
	#QuadSPI_RSER_TBFIE_SHIFT
 27

	)

30739 
	#QuadSPI_RSER_RESERVED_MASK
 0x10000000u

	)

30740 
	#QuadSPI_RSER_RESERVED_SHIFT
 28

	)

30741 
	#QuadSPI_RSER_DLPFIE_MASK
 0x80000000u

	)

30742 
	#QuadSPI_RSER_DLPFIE_SHIFT
 31

	)

30744 
	#QuadSPI_SPNDST_SUSPND_MASK
 0x1u

	)

30745 
	#QuadSPI_SPNDST_SUSPND_SHIFT
 0

	)

30746 
	#QuadSPI_SPNDST_SPDBUF_MASK
 0xC0u

	)

30747 
	#QuadSPI_SPNDST_SPDBUF_SHIFT
 6

	)

30748 
	#QuadSPI_SPNDST_SPDBUF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_SPNDST_SPDBUF_SHIFT
))&
QuadSPI_SPNDST_SPDBUF_MASK
)

	)

30749 
	#QuadSPI_SPNDST_DATLFT_MASK
 0xFE00u

	)

30750 
	#QuadSPI_SPNDST_DATLFT_SHIFT
 9

	)

30751 
	#QuadSPI_SPNDST_DATLFT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_SPNDST_DATLFT_SHIFT
))&
QuadSPI_SPNDST_DATLFT_MASK
)

	)

30753 
	#QuadSPI_SPTRCLR_BFPTRC_MASK
 0x1u

	)

30754 
	#QuadSPI_SPTRCLR_BFPTRC_SHIFT
 0

	)

30755 
	#QuadSPI_SPTRCLR_IPPTRC_MASK
 0x100u

	)

30756 
	#QuadSPI_SPTRCLR_IPPTRC_SHIFT
 8

	)

30758 
	#QuadSPI_SFA1AD_TPADA1_MASK
 0xFFFFFC00u

	)

30759 
	#QuadSPI_SFA1AD_TPADA1_SHIFT
 10

	)

30760 
	#QuadSPI_SFA1AD_TPADA1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_SFA1AD_TPADA1_SHIFT
))&
QuadSPI_SFA1AD_TPADA1_MASK
)

	)

30762 
	#QuadSPI_SFA2AD_TPADA2_MASK
 0xFFFFFC00u

	)

30763 
	#QuadSPI_SFA2AD_TPADA2_SHIFT
 10

	)

30764 
	#QuadSPI_SFA2AD_TPADA2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_SFA2AD_TPADA2_SHIFT
))&
QuadSPI_SFA2AD_TPADA2_MASK
)

	)

30766 
	#QuadSPI_SFB1AD_TPADB1_MASK
 0xFFFFFC00u

	)

30767 
	#QuadSPI_SFB1AD_TPADB1_SHIFT
 10

	)

30768 
	#QuadSPI_SFB1AD_TPADB1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_SFB1AD_TPADB1_SHIFT
))&
QuadSPI_SFB1AD_TPADB1_MASK
)

	)

30770 
	#QuadSPI_SFB2AD_TPADB2_MASK
 0xFFFFFC00u

	)

30771 
	#QuadSPI_SFB2AD_TPADB2_SHIFT
 10

	)

30772 
	#QuadSPI_SFB2AD_TPADB2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_SFB2AD_TPADB2_SHIFT
))&
QuadSPI_SFB2AD_TPADB2_MASK
)

	)

30774 
	#QuadSPI_RBDR_RXDATA_MASK
 0xFFFFFFFFu

	)

30775 
	#QuadSPI_RBDR_RXDATA_SHIFT
 0

	)

30776 
	#QuadSPI_RBDR_RXDATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_RBDR_RXDATA_SHIFT
))&
QuadSPI_RBDR_RXDATA_MASK
)

	)

30778 
	#QuadSPI_LUTKEY_KEY_MASK
 0xFFFFFFFFu

	)

30779 
	#QuadSPI_LUTKEY_KEY_SHIFT
 0

	)

30780 
	#QuadSPI_LUTKEY_KEY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_LUTKEY_KEY_SHIFT
))&
QuadSPI_LUTKEY_KEY_MASK
)

	)

30782 
	#QuadSPI_LCKCR_LOCK_MASK
 0x1u

	)

30783 
	#QuadSPI_LCKCR_LOCK_SHIFT
 0

	)

30784 
	#QuadSPI_LCKCR_UNLOCK_MASK
 0x2u

	)

30785 
	#QuadSPI_LCKCR_UNLOCK_SHIFT
 1

	)

30787 
	#QuadSPI_LUT_OPRND0_MASK
 0xFFu

	)

30788 
	#QuadSPI_LUT_OPRND0_SHIFT
 0

	)

30789 
	#QuadSPI_LUT_OPRND0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_LUT_OPRND0_SHIFT
))&
QuadSPI_LUT_OPRND0_MASK
)

	)

30790 
	#QuadSPI_LUT_PAD0_MASK
 0x300u

	)

30791 
	#QuadSPI_LUT_PAD0_SHIFT
 8

	)

30792 
	#QuadSPI_LUT_PAD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_LUT_PAD0_SHIFT
))&
QuadSPI_LUT_PAD0_MASK
)

	)

30793 
	#QuadSPI_LUT_INSTR0_MASK
 0xFC00u

	)

30794 
	#QuadSPI_LUT_INSTR0_SHIFT
 10

	)

30795 
	#QuadSPI_LUT_INSTR0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_LUT_INSTR0_SHIFT
))&
QuadSPI_LUT_INSTR0_MASK
)

	)

30796 
	#QuadSPI_LUT_OPRND1_MASK
 0xFF0000u

	)

30797 
	#QuadSPI_LUT_OPRND1_SHIFT
 16

	)

30798 
	#QuadSPI_LUT_OPRND1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_LUT_OPRND1_SHIFT
))&
QuadSPI_LUT_OPRND1_MASK
)

	)

30799 
	#QuadSPI_LUT_PAD1_MASK
 0x3000000u

	)

30800 
	#QuadSPI_LUT_PAD1_SHIFT
 24

	)

30801 
	#QuadSPI_LUT_PAD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_LUT_PAD1_SHIFT
))&
QuadSPI_LUT_PAD1_MASK
)

	)

30802 
	#QuadSPI_LUT_INSTR1_MASK
 0xFC000000u

	)

30803 
	#QuadSPI_LUT_INSTR1_SHIFT
 26

	)

30804 
	#QuadSPI_LUT_INSTR1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
QuadSPI_LUT_INSTR1_SHIFT
))&
QuadSPI_LUT_INSTR1_MASK
)

	)

30812 
	#QuadSPI1_BASE
 (0x421E0000u)

	)

30814 
	#QuadSPI1
 ((
QuadSPI_Ty≥
 *)
QuadSPI1_BASE
)

	)

30815 
	#QuadSPI1_BASE_PTR
 (
QuadSPI1
)

	)

30817 
	#QuadSPI2_BASE
 (0x421E4000u)

	)

30819 
	#QuadSPI2
 ((
QuadSPI_Ty≥
 *)
QuadSPI2_BASE
)

	)

30820 
	#QuadSPI2_BASE_PTR
 (
QuadSPI2
)

	)

30822 
	#QuadSPI_BASE_ADDRS
 { 
QuadSPI1_BASE
, 
QuadSPI2_BASE
 }

	)

30824 
	#QuadSPI_BASE_PTRS
 { 
QuadSPI1
, 
QuadSPI2
 }

	)

30826 
	#QSPI_IRQS
 { 
QSPI1_IRQn
, 
QSPI2_IRQn
 }

	)

30839 
	#QuadSPI1_MCR
 
	`QuadSPI_MCR_REG
(
QuadSPI1_BASE_PTR
)

	)

30840 
	#QuadSPI1_IPCR
 
	`QuadSPI_IPCR_REG
(
QuadSPI1_BASE_PTR
)

	)

30841 
	#QuadSPI1_FLSHCR
 
	`QuadSPI_FLSHCR_REG
(
QuadSPI1_BASE_PTR
)

	)

30842 
	#QuadSPI1_BUF0CR
 
	`QuadSPI_BUF0CR_REG
(
QuadSPI1_BASE_PTR
)

	)

30843 
	#QuadSPI1_BUF1CR
 
	`QuadSPI_BUF1CR_REG
(
QuadSPI1_BASE_PTR
)

	)

30844 
	#QuadSPI1_BUF2CR
 
	`QuadSPI_BUF2CR_REG
(
QuadSPI1_BASE_PTR
)

	)

30845 
	#QuadSPI1_BUF3CR
 
	`QuadSPI_BUF3CR_REG
(
QuadSPI1_BASE_PTR
)

	)

30846 
	#QuadSPI1_BFGENCR
 
	`QuadSPI_BFGENCR_REG
(
QuadSPI1_BASE_PTR
)

	)

30847 
	#QuadSPI1_BUF0IND
 
	`QuadSPI_BUF0IND_REG
(
QuadSPI1_BASE_PTR
)

	)

30848 
	#QuadSPI1_BUF1IND
 
	`QuadSPI_BUF1IND_REG
(
QuadSPI1_BASE_PTR
)

	)

30849 
	#QuadSPI1_BUF2IND
 
	`QuadSPI_BUF2IND_REG
(
QuadSPI1_BASE_PTR
)

	)

30850 
	#QuadSPI1_SFAR
 
	`QuadSPI_SFAR_REG
(
QuadSPI1_BASE_PTR
)

	)

30851 
	#QuadSPI1_SMPR
 
	`QuadSPI_SMPR_REG
(
QuadSPI1_BASE_PTR
)

	)

30852 
	#QuadSPI1_RBSR
 
	`QuadSPI_RBSR_REG
(
QuadSPI1_BASE_PTR
)

	)

30853 
	#QuadSPI1_RBCT
 
	`QuadSPI_RBCT_REG
(
QuadSPI1_BASE_PTR
)

	)

30854 
	#QuadSPI1_TBSR
 
	`QuadSPI_TBSR_REG
(
QuadSPI1_BASE_PTR
)

	)

30855 
	#QuadSPI1_TBDR
 
	`QuadSPI_TBDR_REG
(
QuadSPI1_BASE_PTR
)

	)

30856 
	#QuadSPI1_SR
 
	`QuadSPI_SR_REG
(
QuadSPI1_BASE_PTR
)

	)

30857 
	#QuadSPI1_FR
 
	`QuadSPI_FR_REG
(
QuadSPI1_BASE_PTR
)

	)

30858 
	#QuadSPI1_RSER
 
	`QuadSPI_RSER_REG
(
QuadSPI1_BASE_PTR
)

	)

30859 
	#QuadSPI1_SPNDST
 
	`QuadSPI_SPNDST_REG
(
QuadSPI1_BASE_PTR
)

	)

30860 
	#QuadSPI1_SPTRCLR
 
	`QuadSPI_SPTRCLR_REG
(
QuadSPI1_BASE_PTR
)

	)

30861 
	#QuadSPI1_SFA1AD
 
	`QuadSPI_SFA1AD_REG
(
QuadSPI1_BASE_PTR
)

	)

30862 
	#QuadSPI1_SFA2AD
 
	`QuadSPI_SFA2AD_REG
(
QuadSPI1_BASE_PTR
)

	)

30863 
	#QuadSPI1_SFB1AD
 
	`QuadSPI_SFB1AD_REG
(
QuadSPI1_BASE_PTR
)

	)

30864 
	#QuadSPI1_SFB2AD
 
	`QuadSPI_SFB2AD_REG
(
QuadSPI1_BASE_PTR
)

	)

30865 
	#QuadSPI1_RBDR0
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,0)

	)

30866 
	#QuadSPI1_RBDR1
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,1)

	)

30867 
	#QuadSPI1_RBDR2
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,2)

	)

30868 
	#QuadSPI1_RBDR3
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,3)

	)

30869 
	#QuadSPI1_RBDR4
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,4)

	)

30870 
	#QuadSPI1_RBDR5
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,5)

	)

30871 
	#QuadSPI1_RBDR6
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,6)

	)

30872 
	#QuadSPI1_RBDR7
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,7)

	)

30873 
	#QuadSPI1_RBDR8
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,8)

	)

30874 
	#QuadSPI1_RBDR9
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,9)

	)

30875 
	#QuadSPI1_RBDR10
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,10)

	)

30876 
	#QuadSPI1_RBDR11
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,11)

	)

30877 
	#QuadSPI1_RBDR12
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,12)

	)

30878 
	#QuadSPI1_RBDR13
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,13)

	)

30879 
	#QuadSPI1_RBDR14
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,14)

	)

30880 
	#QuadSPI1_RBDR15
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,15)

	)

30881 
	#QuadSPI1_RBDR16
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,16)

	)

30882 
	#QuadSPI1_RBDR17
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,17)

	)

30883 
	#QuadSPI1_RBDR18
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,18)

	)

30884 
	#QuadSPI1_RBDR19
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,19)

	)

30885 
	#QuadSPI1_RBDR20
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,20)

	)

30886 
	#QuadSPI1_RBDR21
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,21)

	)

30887 
	#QuadSPI1_RBDR22
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,22)

	)

30888 
	#QuadSPI1_RBDR23
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,23)

	)

30889 
	#QuadSPI1_RBDR24
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,24)

	)

30890 
	#QuadSPI1_RBDR25
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,25)

	)

30891 
	#QuadSPI1_RBDR26
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,26)

	)

30892 
	#QuadSPI1_RBDR27
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,27)

	)

30893 
	#QuadSPI1_RBDR28
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,28)

	)

30894 
	#QuadSPI1_RBDR29
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,29)

	)

30895 
	#QuadSPI1_RBDR30
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,30)

	)

30896 
	#QuadSPI1_RBDR31
 
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,31)

	)

30897 
	#QuadSPI1_LUTKEY
 
	`QuadSPI_LUTKEY_REG
(
QuadSPI1_BASE_PTR
)

	)

30898 
	#QuadSPI1_LCKCR
 
	`QuadSPI_LCKCR_REG
(
QuadSPI1_BASE_PTR
)

	)

30899 
	#QuadSPI1_LUT0
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,0)

	)

30900 
	#QuadSPI1_LUT1
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,1)

	)

30901 
	#QuadSPI1_LUT2
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,2)

	)

30902 
	#QuadSPI1_LUT3
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,3)

	)

30903 
	#QuadSPI1_LUT4
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,4)

	)

30904 
	#QuadSPI1_LUT5
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,5)

	)

30905 
	#QuadSPI1_LUT6
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,6)

	)

30906 
	#QuadSPI1_LUT7
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,7)

	)

30907 
	#QuadSPI1_LUT8
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,8)

	)

30908 
	#QuadSPI1_LUT9
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,9)

	)

30909 
	#QuadSPI1_LUT10
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,10)

	)

30910 
	#QuadSPI1_LUT11
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,11)

	)

30911 
	#QuadSPI1_LUT12
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,12)

	)

30912 
	#QuadSPI1_LUT13
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,13)

	)

30913 
	#QuadSPI1_LUT14
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,14)

	)

30914 
	#QuadSPI1_LUT15
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,15)

	)

30915 
	#QuadSPI1_LUT16
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,16)

	)

30916 
	#QuadSPI1_LUT17
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,17)

	)

30917 
	#QuadSPI1_LUT18
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,18)

	)

30918 
	#QuadSPI1_LUT19
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,19)

	)

30919 
	#QuadSPI1_LUT20
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,20)

	)

30920 
	#QuadSPI1_LUT21
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,21)

	)

30921 
	#QuadSPI1_LUT22
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,22)

	)

30922 
	#QuadSPI1_LUT23
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,23)

	)

30923 
	#QuadSPI1_LUT24
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,24)

	)

30924 
	#QuadSPI1_LUT25
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,25)

	)

30925 
	#QuadSPI1_LUT26
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,26)

	)

30926 
	#QuadSPI1_LUT27
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,27)

	)

30927 
	#QuadSPI1_LUT28
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,28)

	)

30928 
	#QuadSPI1_LUT29
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,29)

	)

30929 
	#QuadSPI1_LUT30
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,30)

	)

30930 
	#QuadSPI1_LUT31
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,31)

	)

30931 
	#QuadSPI1_LUT32
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,32)

	)

30932 
	#QuadSPI1_LUT33
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,33)

	)

30933 
	#QuadSPI1_LUT34
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,34)

	)

30934 
	#QuadSPI1_LUT35
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,35)

	)

30935 
	#QuadSPI1_LUT36
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,36)

	)

30936 
	#QuadSPI1_LUT37
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,37)

	)

30937 
	#QuadSPI1_LUT38
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,38)

	)

30938 
	#QuadSPI1_LUT39
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,39)

	)

30939 
	#QuadSPI1_LUT40
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,40)

	)

30940 
	#QuadSPI1_LUT41
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,41)

	)

30941 
	#QuadSPI1_LUT42
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,42)

	)

30942 
	#QuadSPI1_LUT43
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,43)

	)

30943 
	#QuadSPI1_LUT44
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,44)

	)

30944 
	#QuadSPI1_LUT45
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,45)

	)

30945 
	#QuadSPI1_LUT46
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,46)

	)

30946 
	#QuadSPI1_LUT47
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,47)

	)

30947 
	#QuadSPI1_LUT48
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,48)

	)

30948 
	#QuadSPI1_LUT49
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,49)

	)

30949 
	#QuadSPI1_LUT50
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,50)

	)

30950 
	#QuadSPI1_LUT51
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,51)

	)

30951 
	#QuadSPI1_LUT52
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,52)

	)

30952 
	#QuadSPI1_LUT53
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,53)

	)

30953 
	#QuadSPI1_LUT54
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,54)

	)

30954 
	#QuadSPI1_LUT55
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,55)

	)

30955 
	#QuadSPI1_LUT56
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,56)

	)

30956 
	#QuadSPI1_LUT57
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,57)

	)

30957 
	#QuadSPI1_LUT58
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,58)

	)

30958 
	#QuadSPI1_LUT59
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,59)

	)

30959 
	#QuadSPI1_LUT60
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,60)

	)

30960 
	#QuadSPI1_LUT61
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,61)

	)

30961 
	#QuadSPI1_LUT62
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,62)

	)

30962 
	#QuadSPI1_LUT63
 
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,63)

	)

30964 
	#QuadSPI2_MCR
 
	`QuadSPI_MCR_REG
(
QuadSPI2_BASE_PTR
)

	)

30965 
	#QuadSPI2_IPCR
 
	`QuadSPI_IPCR_REG
(
QuadSPI2_BASE_PTR
)

	)

30966 
	#QuadSPI2_FLSHCR
 
	`QuadSPI_FLSHCR_REG
(
QuadSPI2_BASE_PTR
)

	)

30967 
	#QuadSPI2_BUF0CR
 
	`QuadSPI_BUF0CR_REG
(
QuadSPI2_BASE_PTR
)

	)

30968 
	#QuadSPI2_BUF1CR
 
	`QuadSPI_BUF1CR_REG
(
QuadSPI2_BASE_PTR
)

	)

30969 
	#QuadSPI2_BUF2CR
 
	`QuadSPI_BUF2CR_REG
(
QuadSPI2_BASE_PTR
)

	)

30970 
	#QuadSPI2_BUF3CR
 
	`QuadSPI_BUF3CR_REG
(
QuadSPI2_BASE_PTR
)

	)

30971 
	#QuadSPI2_BFGENCR
 
	`QuadSPI_BFGENCR_REG
(
QuadSPI2_BASE_PTR
)

	)

30972 
	#QuadSPI2_BUF0IND
 
	`QuadSPI_BUF0IND_REG
(
QuadSPI2_BASE_PTR
)

	)

30973 
	#QuadSPI2_BUF1IND
 
	`QuadSPI_BUF1IND_REG
(
QuadSPI2_BASE_PTR
)

	)

30974 
	#QuadSPI2_BUF2IND
 
	`QuadSPI_BUF2IND_REG
(
QuadSPI2_BASE_PTR
)

	)

30975 
	#QuadSPI2_SFAR
 
	`QuadSPI_SFAR_REG
(
QuadSPI2_BASE_PTR
)

	)

30976 
	#QuadSPI2_SMPR
 
	`QuadSPI_SMPR_REG
(
QuadSPI2_BASE_PTR
)

	)

30977 
	#QuadSPI2_RBSR
 
	`QuadSPI_RBSR_REG
(
QuadSPI2_BASE_PTR
)

	)

30978 
	#QuadSPI2_RBCT
 
	`QuadSPI_RBCT_REG
(
QuadSPI2_BASE_PTR
)

	)

30979 
	#QuadSPI2_TBSR
 
	`QuadSPI_TBSR_REG
(
QuadSPI2_BASE_PTR
)

	)

30980 
	#QuadSPI2_TBDR
 
	`QuadSPI_TBDR_REG
(
QuadSPI2_BASE_PTR
)

	)

30981 
	#QuadSPI2_SR
 
	`QuadSPI_SR_REG
(
QuadSPI2_BASE_PTR
)

	)

30982 
	#QuadSPI2_FR
 
	`QuadSPI_FR_REG
(
QuadSPI2_BASE_PTR
)

	)

30983 
	#QuadSPI2_RSER
 
	`QuadSPI_RSER_REG
(
QuadSPI2_BASE_PTR
)

	)

30984 
	#QuadSPI2_SPNDST
 
	`QuadSPI_SPNDST_REG
(
QuadSPI2_BASE_PTR
)

	)

30985 
	#QuadSPI2_SPTRCLR
 
	`QuadSPI_SPTRCLR_REG
(
QuadSPI2_BASE_PTR
)

	)

30986 
	#QuadSPI2_SFA1AD
 
	`QuadSPI_SFA1AD_REG
(
QuadSPI2_BASE_PTR
)

	)

30987 
	#QuadSPI2_SFA2AD
 
	`QuadSPI_SFA2AD_REG
(
QuadSPI2_BASE_PTR
)

	)

30988 
	#QuadSPI2_SFB1AD
 
	`QuadSPI_SFB1AD_REG
(
QuadSPI2_BASE_PTR
)

	)

30989 
	#QuadSPI2_SFB2AD
 
	`QuadSPI_SFB2AD_REG
(
QuadSPI2_BASE_PTR
)

	)

30990 
	#QuadSPI2_RBDR0
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,0)

	)

30991 
	#QuadSPI2_RBDR1
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,1)

	)

30992 
	#QuadSPI2_RBDR2
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,2)

	)

30993 
	#QuadSPI2_RBDR3
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,3)

	)

30994 
	#QuadSPI2_RBDR4
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,4)

	)

30995 
	#QuadSPI2_RBDR5
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,5)

	)

30996 
	#QuadSPI2_RBDR6
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,6)

	)

30997 
	#QuadSPI2_RBDR7
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,7)

	)

30998 
	#QuadSPI2_RBDR8
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,8)

	)

30999 
	#QuadSPI2_RBDR9
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,9)

	)

31000 
	#QuadSPI2_RBDR10
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,10)

	)

31001 
	#QuadSPI2_RBDR11
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,11)

	)

31002 
	#QuadSPI2_RBDR12
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,12)

	)

31003 
	#QuadSPI2_RBDR13
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,13)

	)

31004 
	#QuadSPI2_RBDR14
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,14)

	)

31005 
	#QuadSPI2_RBDR15
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,15)

	)

31006 
	#QuadSPI2_RBDR16
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,16)

	)

31007 
	#QuadSPI2_RBDR17
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,17)

	)

31008 
	#QuadSPI2_RBDR18
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,18)

	)

31009 
	#QuadSPI2_RBDR19
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,19)

	)

31010 
	#QuadSPI2_RBDR20
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,20)

	)

31011 
	#QuadSPI2_RBDR21
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,21)

	)

31012 
	#QuadSPI2_RBDR22
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,22)

	)

31013 
	#QuadSPI2_RBDR23
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,23)

	)

31014 
	#QuadSPI2_RBDR24
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,24)

	)

31015 
	#QuadSPI2_RBDR25
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,25)

	)

31016 
	#QuadSPI2_RBDR26
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,26)

	)

31017 
	#QuadSPI2_RBDR27
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,27)

	)

31018 
	#QuadSPI2_RBDR28
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,28)

	)

31019 
	#QuadSPI2_RBDR29
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,29)

	)

31020 
	#QuadSPI2_RBDR30
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,30)

	)

31021 
	#QuadSPI2_RBDR31
 
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,31)

	)

31022 
	#QuadSPI2_LUTKEY
 
	`QuadSPI_LUTKEY_REG
(
QuadSPI2_BASE_PTR
)

	)

31023 
	#QuadSPI2_LCKCR
 
	`QuadSPI_LCKCR_REG
(
QuadSPI2_BASE_PTR
)

	)

31024 
	#QuadSPI2_LUT0
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,0)

	)

31025 
	#QuadSPI2_LUT1
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,1)

	)

31026 
	#QuadSPI2_LUT2
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,2)

	)

31027 
	#QuadSPI2_LUT3
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,3)

	)

31028 
	#QuadSPI2_LUT4
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,4)

	)

31029 
	#QuadSPI2_LUT5
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,5)

	)

31030 
	#QuadSPI2_LUT6
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,6)

	)

31031 
	#QuadSPI2_LUT7
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,7)

	)

31032 
	#QuadSPI2_LUT8
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,8)

	)

31033 
	#QuadSPI2_LUT9
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,9)

	)

31034 
	#QuadSPI2_LUT10
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,10)

	)

31035 
	#QuadSPI2_LUT11
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,11)

	)

31036 
	#QuadSPI2_LUT12
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,12)

	)

31037 
	#QuadSPI2_LUT13
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,13)

	)

31038 
	#QuadSPI2_LUT14
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,14)

	)

31039 
	#QuadSPI2_LUT15
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,15)

	)

31040 
	#QuadSPI2_LUT16
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,16)

	)

31041 
	#QuadSPI2_LUT17
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,17)

	)

31042 
	#QuadSPI2_LUT18
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,18)

	)

31043 
	#QuadSPI2_LUT19
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,19)

	)

31044 
	#QuadSPI2_LUT20
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,20)

	)

31045 
	#QuadSPI2_LUT21
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,21)

	)

31046 
	#QuadSPI2_LUT22
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,22)

	)

31047 
	#QuadSPI2_LUT23
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,23)

	)

31048 
	#QuadSPI2_LUT24
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,24)

	)

31049 
	#QuadSPI2_LUT25
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,25)

	)

31050 
	#QuadSPI2_LUT26
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,26)

	)

31051 
	#QuadSPI2_LUT27
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,27)

	)

31052 
	#QuadSPI2_LUT28
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,28)

	)

31053 
	#QuadSPI2_LUT29
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,29)

	)

31054 
	#QuadSPI2_LUT30
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,30)

	)

31055 
	#QuadSPI2_LUT31
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,31)

	)

31056 
	#QuadSPI2_LUT32
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,32)

	)

31057 
	#QuadSPI2_LUT33
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,33)

	)

31058 
	#QuadSPI2_LUT34
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,34)

	)

31059 
	#QuadSPI2_LUT35
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,35)

	)

31060 
	#QuadSPI2_LUT36
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,36)

	)

31061 
	#QuadSPI2_LUT37
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,37)

	)

31062 
	#QuadSPI2_LUT38
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,38)

	)

31063 
	#QuadSPI2_LUT39
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,39)

	)

31064 
	#QuadSPI2_LUT40
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,40)

	)

31065 
	#QuadSPI2_LUT41
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,41)

	)

31066 
	#QuadSPI2_LUT42
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,42)

	)

31067 
	#QuadSPI2_LUT43
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,43)

	)

31068 
	#QuadSPI2_LUT44
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,44)

	)

31069 
	#QuadSPI2_LUT45
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,45)

	)

31070 
	#QuadSPI2_LUT46
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,46)

	)

31071 
	#QuadSPI2_LUT47
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,47)

	)

31072 
	#QuadSPI2_LUT48
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,48)

	)

31073 
	#QuadSPI2_LUT49
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,49)

	)

31074 
	#QuadSPI2_LUT50
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,50)

	)

31075 
	#QuadSPI2_LUT51
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,51)

	)

31076 
	#QuadSPI2_LUT52
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,52)

	)

31077 
	#QuadSPI2_LUT53
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,53)

	)

31078 
	#QuadSPI2_LUT54
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,54)

	)

31079 
	#QuadSPI2_LUT55
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,55)

	)

31080 
	#QuadSPI2_LUT56
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,56)

	)

31081 
	#QuadSPI2_LUT57
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,57)

	)

31082 
	#QuadSPI2_LUT58
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,58)

	)

31083 
	#QuadSPI2_LUT59
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,59)

	)

31084 
	#QuadSPI2_LUT60
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,60)

	)

31085 
	#QuadSPI2_LUT61
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,61)

	)

31086 
	#QuadSPI2_LUT62
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,62)

	)

31087 
	#QuadSPI2_LUT63
 
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,63)

	)

31089 
	#QuadSPI1_RBDR
(
ödex
Ë
	`QuadSPI_RBDR_REG
(
QuadSPI1_BASE_PTR
,ödex)

	)

31090 
	#QuadSPI2_RBDR
(
ödex
Ë
	`QuadSPI_RBDR_REG
(
QuadSPI2_BASE_PTR
,ödex)

	)

31091 
	#QuadSPI1_LUT
(
ödex
Ë
	`QuadSPI_LUT_REG
(
QuadSPI1_BASE_PTR
,ödex)

	)

31092 
	#QuadSPI2_LUT
(
ödex
Ë
	`QuadSPI_LUT_REG
(
QuadSPI2_BASE_PTR
,ödex)

	)

31113 
__I
 
uöt32_t
 
	mVIR
;

31114 
uöt8_t
 
	mRESERVED_0
[32];

31115 
__IO
 
uöt32_t
 
	mSTAT
;

31116 
__IO
 
uöt32_t
 
	mINTCTRL
;

31117 
__IO
 
uöt32_t
 
	mINTSTAT
;

31118 
uöt8_t
 
	mRESERVED_1
[464];

31119 
__IO
 
uöt32_t
 
	mMDA
[32];

31120 
uöt8_t
 
	mRESERVED_2
[384];

31121 
__IO
 
uöt32_t
 
	mPDAP
[110];

31122 
uöt8_t
 
	mRESERVED_3
[584];

31124 
__IO
 
uöt32_t
 
	mMRSA
;

31125 
__IO
 
uöt32_t
 
	mMREA
;

31126 
__IO
 
uöt32_t
 
	mMRC
;

31127 
__IO
 
uöt32_t
 
	mMRVS
;

31128 } 
	mMR
[55];

31129 } 
	tRDC_Ty≥
, *
	tRDC_MemM≠På
;

31141 
	#RDC_VIR_REG
(
ba£
Ë((ba£)->
VIR
)

	)

31142 
	#RDC_STAT_REG
(
ba£
Ë((ba£)->
STAT
)

	)

31143 
	#RDC_INTCTRL_REG
(
ba£
Ë((ba£)->
INTCTRL
)

	)

31144 
	#RDC_INTSTAT_REG
(
ba£
Ë((ba£)->
INTSTAT
)

	)

31145 
	#RDC_MDA_REG
(
ba£
,
ödex
Ë((ba£)->
MDA
[ödex])

	)

31146 
	#RDC_PDAP_REG
(
ba£
,
ödex
Ë((ba£)->
PDAP
[ödex])

	)

31147 
	#RDC_MRSA_REG
(
ba£
,
ödex
Ë((ba£)->
MR
[ödex].
MRSA
)

	)

31148 
	#RDC_MREA_REG
(
ba£
,
ödex
Ë((ba£)->
MR
[ödex].
MREA
)

	)

31149 
	#RDC_MRC_REG
(
ba£
,
ödex
Ë((ba£)->
MR
[ödex].
MRC
)

	)

31150 
	#RDC_MRVS_REG
(
ba£
,
ödex
Ë((ba£)->
MR
[ödex].
MRVS
)

	)

31165 
	#RDC_VIR_NDID_MASK
 0xFu

	)

31166 
	#RDC_VIR_NDID_SHIFT
 0

	)

31167 
	#RDC_VIR_NDID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
RDC_VIR_NDID_SHIFT
))&
RDC_VIR_NDID_MASK
)

	)

31168 
	#RDC_VIR_NMSTR_MASK
 0xFF0u

	)

31169 
	#RDC_VIR_NMSTR_SHIFT
 4

	)

31170 
	#RDC_VIR_NMSTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
RDC_VIR_NMSTR_SHIFT
))&
RDC_VIR_NMSTR_MASK
)

	)

31171 
	#RDC_VIR_NPER_MASK
 0xFF000u

	)

31172 
	#RDC_VIR_NPER_SHIFT
 12

	)

31173 
	#RDC_VIR_NPER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
RDC_VIR_NPER_SHIFT
))&
RDC_VIR_NPER_MASK
)

	)

31174 
	#RDC_VIR_NRGN_MASK
 0xFF00000u

	)

31175 
	#RDC_VIR_NRGN_SHIFT
 20

	)

31176 
	#RDC_VIR_NRGN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
RDC_VIR_NRGN_SHIFT
))&
RDC_VIR_NRGN_MASK
)

	)

31178 
	#RDC_STAT_DID_MASK
 0xFu

	)

31179 
	#RDC_STAT_DID_SHIFT
 0

	)

31180 
	#RDC_STAT_DID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
RDC_STAT_DID_SHIFT
))&
RDC_STAT_DID_MASK
)

	)

31181 
	#RDC_STAT_PDS_MASK
 0x100u

	)

31182 
	#RDC_STAT_PDS_SHIFT
 8

	)

31184 
	#RDC_INTCTRL_RCI_EN_MASK
 0x1u

	)

31185 
	#RDC_INTCTRL_RCI_EN_SHIFT
 0

	)

31187 
	#RDC_INTSTAT_INT_MASK
 0x1u

	)

31188 
	#RDC_INTSTAT_INT_SHIFT
 0

	)

31190 
	#RDC_MDA_DID_MASK
 0x3u

	)

31191 
	#RDC_MDA_DID_SHIFT
 0

	)

31192 
	#RDC_MDA_DID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
RDC_MDA_DID_SHIFT
))&
RDC_MDA_DID_MASK
)

	)

31193 
	#RDC_MDA_LCK_MASK
 0x80000000u

	)

31194 
	#RDC_MDA_LCK_SHIFT
 31

	)

31196 
	#RDC_PDAP_D0W_MASK
 0x1u

	)

31197 
	#RDC_PDAP_D0W_SHIFT
 0

	)

31198 
	#RDC_PDAP_D0R_MASK
 0x2u

	)

31199 
	#RDC_PDAP_D0R_SHIFT
 1

	)

31200 
	#RDC_PDAP_D1W_MASK
 0x4u

	)

31201 
	#RDC_PDAP_D1W_SHIFT
 2

	)

31202 
	#RDC_PDAP_D1R_MASK
 0x8u

	)

31203 
	#RDC_PDAP_D1R_SHIFT
 3

	)

31204 
	#RDC_PDAP_D2W_MASK
 0x10u

	)

31205 
	#RDC_PDAP_D2W_SHIFT
 4

	)

31206 
	#RDC_PDAP_D2R_MASK
 0x20u

	)

31207 
	#RDC_PDAP_D2R_SHIFT
 5

	)

31208 
	#RDC_PDAP_D3W_MASK
 0x40u

	)

31209 
	#RDC_PDAP_D3W_SHIFT
 6

	)

31210 
	#RDC_PDAP_D3R_MASK
 0x80u

	)

31211 
	#RDC_PDAP_D3R_SHIFT
 7

	)

31212 
	#RDC_PDAP_SREQ_MASK
 0x40000000u

	)

31213 
	#RDC_PDAP_SREQ_SHIFT
 30

	)

31214 
	#RDC_PDAP_LCK_MASK
 0x80000000u

	)

31215 
	#RDC_PDAP_LCK_SHIFT
 31

	)

31217 
	#RDC_MRSA_SADR_MASK
 0xFFFFFF80u

	)

31218 
	#RDC_MRSA_SADR_SHIFT
 7

	)

31219 
	#RDC_MRSA_SADR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
RDC_MRSA_SADR_SHIFT
))&
RDC_MRSA_SADR_MASK
)

	)

31221 
	#RDC_MREA_EADR_MASK
 0xFFFFFF80u

	)

31222 
	#RDC_MREA_EADR_SHIFT
 7

	)

31223 
	#RDC_MREA_EADR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
RDC_MREA_EADR_SHIFT
))&
RDC_MREA_EADR_MASK
)

	)

31225 
	#RDC_MRC_D0W_MASK
 0x1u

	)

31226 
	#RDC_MRC_D0W_SHIFT
 0

	)

31227 
	#RDC_MRC_D0R_MASK
 0x2u

	)

31228 
	#RDC_MRC_D0R_SHIFT
 1

	)

31229 
	#RDC_MRC_D1W_MASK
 0x4u

	)

31230 
	#RDC_MRC_D1W_SHIFT
 2

	)

31231 
	#RDC_MRC_D1R_MASK
 0x8u

	)

31232 
	#RDC_MRC_D1R_SHIFT
 3

	)

31233 
	#RDC_MRC_D2W_MASK
 0x10u

	)

31234 
	#RDC_MRC_D2W_SHIFT
 4

	)

31235 
	#RDC_MRC_D2R_MASK
 0x20u

	)

31236 
	#RDC_MRC_D2R_SHIFT
 5

	)

31237 
	#RDC_MRC_D3W_MASK
 0x40u

	)

31238 
	#RDC_MRC_D3W_SHIFT
 6

	)

31239 
	#RDC_MRC_D3R_MASK
 0x80u

	)

31240 
	#RDC_MRC_D3R_SHIFT
 7

	)

31241 
	#RDC_MRC_ENA_MASK
 0x40000000u

	)

31242 
	#RDC_MRC_ENA_SHIFT
 30

	)

31243 
	#RDC_MRC_LCK_MASK
 0x80000000u

	)

31244 
	#RDC_MRC_LCK_SHIFT
 31

	)

31246 
	#RDC_MRVS_VDID_MASK
 0x3u

	)

31247 
	#RDC_MRVS_VDID_SHIFT
 0

	)

31248 
	#RDC_MRVS_VDID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
RDC_MRVS_VDID_SHIFT
))&
RDC_MRVS_VDID_MASK
)

	)

31249 
	#RDC_MRVS_AD_MASK
 0x10u

	)

31250 
	#RDC_MRVS_AD_SHIFT
 4

	)

31251 
	#RDC_MRVS_VADR_MASK
 0xFFFFFFE0u

	)

31252 
	#RDC_MRVS_VADR_SHIFT
 5

	)

31253 
	#RDC_MRVS_VADR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
RDC_MRVS_VADR_SHIFT
))&
RDC_MRVS_VADR_MASK
)

	)

31261 
	#RDC_BASE
 (0x420FC000u)

	)

31263 
	#RDC
 ((
RDC_Ty≥
 *)
RDC_BASE
)

	)

31264 
	#RDC_BASE_PTR
 (
RDC
)

	)

31266 
	#RDC_BASE_ADDRS
 { 
RDC_BASE
 }

	)

31268 
	#RDC_BASE_PTRS
 { 
RDC
 }

	)

31270 
	#RDC_IRQS
 { 
RDC_IRQn
 }

	)

31283 
	#RDC_VIR
 
	`RDC_VIR_REG
(
RDC_BASE_PTR
)

	)

31284 
	#RDC_STAT
 
	`RDC_STAT_REG
(
RDC_BASE_PTR
)

	)

31285 
	#RDC_INTCTRL
 
	`RDC_INTCTRL_REG
(
RDC_BASE_PTR
)

	)

31286 
	#RDC_INTSTAT
 
	`RDC_INTSTAT_REG
(
RDC_BASE_PTR
)

	)

31287 
	#RDC_MDA0
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,0)

	)

31288 
	#RDC_MDA1
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,1)

	)

31289 
	#RDC_MDA2
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,2)

	)

31290 
	#RDC_MDA3
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,3)

	)

31291 
	#RDC_MDA4
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,4)

	)

31292 
	#RDC_MDA5
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,5)

	)

31293 
	#RDC_MDA6
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,6)

	)

31294 
	#RDC_MDA7
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,7)

	)

31295 
	#RDC_MDA8
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,8)

	)

31296 
	#RDC_MDA9
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,9)

	)

31297 
	#RDC_MDA10
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,10)

	)

31298 
	#RDC_MDA11
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,11)

	)

31299 
	#RDC_MDA12
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,12)

	)

31300 
	#RDC_MDA13
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,13)

	)

31301 
	#RDC_MDA14
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,14)

	)

31302 
	#RDC_MDA15
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,15)

	)

31303 
	#RDC_MDA16
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,16)

	)

31304 
	#RDC_MDA17
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,17)

	)

31305 
	#RDC_MDA18
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,18)

	)

31306 
	#RDC_MDA19
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,19)

	)

31307 
	#RDC_MDA20
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,20)

	)

31308 
	#RDC_MDA21
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,21)

	)

31309 
	#RDC_MDA22
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,22)

	)

31310 
	#RDC_MDA23
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,23)

	)

31311 
	#RDC_MDA24
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,24)

	)

31312 
	#RDC_MDA25
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,25)

	)

31313 
	#RDC_MDA26
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,26)

	)

31314 
	#RDC_MDA27
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,27)

	)

31315 
	#RDC_MDA28
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,28)

	)

31316 
	#RDC_MDA29
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,29)

	)

31317 
	#RDC_MDA30
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,30)

	)

31318 
	#RDC_MDA31
 
	`RDC_MDA_REG
(
RDC_BASE_PTR
,31)

	)

31319 
	#RDC_PDAP0
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,0)

	)

31320 
	#RDC_PDAP1
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,1)

	)

31321 
	#RDC_PDAP2
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,2)

	)

31322 
	#RDC_PDAP3
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,3)

	)

31323 
	#RDC_PDAP4
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,4)

	)

31324 
	#RDC_PDAP5
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,5)

	)

31325 
	#RDC_PDAP6
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,6)

	)

31326 
	#RDC_PDAP7
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,7)

	)

31327 
	#RDC_PDAP8
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,8)

	)

31328 
	#RDC_PDAP9
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,9)

	)

31329 
	#RDC_PDAP10
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,10)

	)

31330 
	#RDC_PDAP11
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,11)

	)

31331 
	#RDC_PDAP12
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,12)

	)

31332 
	#RDC_PDAP13
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,13)

	)

31333 
	#RDC_PDAP14
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,14)

	)

31334 
	#RDC_PDAP15
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,15)

	)

31335 
	#RDC_PDAP16
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,16)

	)

31336 
	#RDC_PDAP17
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,17)

	)

31337 
	#RDC_PDAP18
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,18)

	)

31338 
	#RDC_PDAP19
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,19)

	)

31339 
	#RDC_PDAP20
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,20)

	)

31340 
	#RDC_PDAP21
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,21)

	)

31341 
	#RDC_PDAP22
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,22)

	)

31342 
	#RDC_PDAP23
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,23)

	)

31343 
	#RDC_PDAP24
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,24)

	)

31344 
	#RDC_PDAP25
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,25)

	)

31345 
	#RDC_PDAP26
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,26)

	)

31346 
	#RDC_PDAP27
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,27)

	)

31347 
	#RDC_PDAP28
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,28)

	)

31348 
	#RDC_PDAP29
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,29)

	)

31349 
	#RDC_PDAP30
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,30)

	)

31350 
	#RDC_PDAP31
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,31)

	)

31351 
	#RDC_PDAP32
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,32)

	)

31352 
	#RDC_PDAP33
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,33)

	)

31353 
	#RDC_PDAP34
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,34)

	)

31354 
	#RDC_PDAP35
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,35)

	)

31355 
	#RDC_PDAP36
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,36)

	)

31356 
	#RDC_PDAP37
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,37)

	)

31357 
	#RDC_PDAP38
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,38)

	)

31358 
	#RDC_PDAP39
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,39)

	)

31359 
	#RDC_PDAP40
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,40)

	)

31360 
	#RDC_PDAP41
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,41)

	)

31361 
	#RDC_PDAP42
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,42)

	)

31362 
	#RDC_PDAP43
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,43)

	)

31363 
	#RDC_PDAP44
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,44)

	)

31364 
	#RDC_PDAP45
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,45)

	)

31365 
	#RDC_PDAP46
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,46)

	)

31366 
	#RDC_PDAP47
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,47)

	)

31367 
	#RDC_PDAP48
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,48)

	)

31368 
	#RDC_PDAP49
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,49)

	)

31369 
	#RDC_PDAP50
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,50)

	)

31370 
	#RDC_PDAP51
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,51)

	)

31371 
	#RDC_PDAP52
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,52)

	)

31372 
	#RDC_PDAP53
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,53)

	)

31373 
	#RDC_PDAP54
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,54)

	)

31374 
	#RDC_PDAP55
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,55)

	)

31375 
	#RDC_PDAP56
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,56)

	)

31376 
	#RDC_PDAP57
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,57)

	)

31377 
	#RDC_PDAP58
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,58)

	)

31378 
	#RDC_PDAP59
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,59)

	)

31379 
	#RDC_PDAP60
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,60)

	)

31380 
	#RDC_PDAP61
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,61)

	)

31381 
	#RDC_PDAP62
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,62)

	)

31382 
	#RDC_PDAP63
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,63)

	)

31383 
	#RDC_PDAP64
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,64)

	)

31384 
	#RDC_PDAP65
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,65)

	)

31385 
	#RDC_PDAP66
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,66)

	)

31386 
	#RDC_PDAP67
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,67)

	)

31387 
	#RDC_PDAP68
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,68)

	)

31388 
	#RDC_PDAP69
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,69)

	)

31389 
	#RDC_PDAP70
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,70)

	)

31390 
	#RDC_PDAP71
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,71)

	)

31391 
	#RDC_PDAP72
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,72)

	)

31392 
	#RDC_PDAP73
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,73)

	)

31393 
	#RDC_PDAP74
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,74)

	)

31394 
	#RDC_PDAP75
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,75)

	)

31395 
	#RDC_PDAP76
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,76)

	)

31396 
	#RDC_PDAP77
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,77)

	)

31397 
	#RDC_PDAP78
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,78)

	)

31398 
	#RDC_PDAP79
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,79)

	)

31399 
	#RDC_PDAP80
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,80)

	)

31400 
	#RDC_PDAP81
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,81)

	)

31401 
	#RDC_PDAP82
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,82)

	)

31402 
	#RDC_PDAP83
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,83)

	)

31403 
	#RDC_PDAP84
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,84)

	)

31404 
	#RDC_PDAP85
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,85)

	)

31405 
	#RDC_PDAP86
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,86)

	)

31406 
	#RDC_PDAP87
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,87)

	)

31407 
	#RDC_PDAP88
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,88)

	)

31408 
	#RDC_PDAP89
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,89)

	)

31409 
	#RDC_PDAP90
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,90)

	)

31410 
	#RDC_PDAP91
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,91)

	)

31411 
	#RDC_PDAP92
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,92)

	)

31412 
	#RDC_PDAP93
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,93)

	)

31413 
	#RDC_PDAP94
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,94)

	)

31414 
	#RDC_PDAP95
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,95)

	)

31415 
	#RDC_PDAP96
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,96)

	)

31416 
	#RDC_PDAP97
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,97)

	)

31417 
	#RDC_PDAP98
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,98)

	)

31418 
	#RDC_PDAP99
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,99)

	)

31419 
	#RDC_PDAP100
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,100)

	)

31420 
	#RDC_PDAP101
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,101)

	)

31421 
	#RDC_PDAP102
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,102)

	)

31422 
	#RDC_PDAP103
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,103)

	)

31423 
	#RDC_PDAP104
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,104)

	)

31424 
	#RDC_PDAP105
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,105)

	)

31425 
	#RDC_PDAP106
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,106)

	)

31426 
	#RDC_PDAP107
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,107)

	)

31427 
	#RDC_PDAP108
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,108)

	)

31428 
	#RDC_PDAP109
 
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,109)

	)

31429 
	#RDC_MRSA0
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,0)

	)

31430 
	#RDC_MREA0
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,0)

	)

31431 
	#RDC_MRC0
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,0)

	)

31432 
	#RDC_MRVS0
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,0)

	)

31433 
	#RDC_MRSA1
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,1)

	)

31434 
	#RDC_MREA1
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,1)

	)

31435 
	#RDC_MRC1
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,1)

	)

31436 
	#RDC_MRVS1
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,1)

	)

31437 
	#RDC_MRSA2
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,2)

	)

31438 
	#RDC_MREA2
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,2)

	)

31439 
	#RDC_MRC2
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,2)

	)

31440 
	#RDC_MRVS2
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,2)

	)

31441 
	#RDC_MRSA3
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,3)

	)

31442 
	#RDC_MREA3
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,3)

	)

31443 
	#RDC_MRC3
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,3)

	)

31444 
	#RDC_MRVS3
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,3)

	)

31445 
	#RDC_MRSA4
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,4)

	)

31446 
	#RDC_MREA4
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,4)

	)

31447 
	#RDC_MRC4
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,4)

	)

31448 
	#RDC_MRVS4
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,4)

	)

31449 
	#RDC_MRSA5
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,5)

	)

31450 
	#RDC_MREA5
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,5)

	)

31451 
	#RDC_MRC5
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,5)

	)

31452 
	#RDC_MRVS5
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,5)

	)

31453 
	#RDC_MRSA6
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,6)

	)

31454 
	#RDC_MREA6
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,6)

	)

31455 
	#RDC_MRC6
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,6)

	)

31456 
	#RDC_MRVS6
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,6)

	)

31457 
	#RDC_MRSA7
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,7)

	)

31458 
	#RDC_MREA7
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,7)

	)

31459 
	#RDC_MRC7
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,7)

	)

31460 
	#RDC_MRVS7
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,7)

	)

31461 
	#RDC_MRSA8
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,8)

	)

31462 
	#RDC_MREA8
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,8)

	)

31463 
	#RDC_MRC8
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,8)

	)

31464 
	#RDC_MRVS8
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,8)

	)

31465 
	#RDC_MRSA9
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,9)

	)

31466 
	#RDC_MREA9
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,9)

	)

31467 
	#RDC_MRC9
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,9)

	)

31468 
	#RDC_MRVS9
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,9)

	)

31469 
	#RDC_MRSA10
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,10)

	)

31470 
	#RDC_MREA10
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,10)

	)

31471 
	#RDC_MRC10
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,10)

	)

31472 
	#RDC_MRVS10
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,10)

	)

31473 
	#RDC_MRSA11
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,11)

	)

31474 
	#RDC_MREA11
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,11)

	)

31475 
	#RDC_MRC11
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,11)

	)

31476 
	#RDC_MRVS11
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,11)

	)

31477 
	#RDC_MRSA12
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,12)

	)

31478 
	#RDC_MREA12
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,12)

	)

31479 
	#RDC_MRC12
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,12)

	)

31480 
	#RDC_MRVS12
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,12)

	)

31481 
	#RDC_MRSA13
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,13)

	)

31482 
	#RDC_MREA13
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,13)

	)

31483 
	#RDC_MRC13
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,13)

	)

31484 
	#RDC_MRVS13
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,13)

	)

31485 
	#RDC_MRSA14
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,14)

	)

31486 
	#RDC_MREA14
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,14)

	)

31487 
	#RDC_MRC14
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,14)

	)

31488 
	#RDC_MRVS14
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,14)

	)

31489 
	#RDC_MRSA15
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,15)

	)

31490 
	#RDC_MREA15
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,15)

	)

31491 
	#RDC_MRC15
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,15)

	)

31492 
	#RDC_MRVS15
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,15)

	)

31493 
	#RDC_MRSA16
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,16)

	)

31494 
	#RDC_MREA16
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,16)

	)

31495 
	#RDC_MRC16
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,16)

	)

31496 
	#RDC_MRVS16
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,16)

	)

31497 
	#RDC_MRSA17
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,17)

	)

31498 
	#RDC_MREA17
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,17)

	)

31499 
	#RDC_MRC17
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,17)

	)

31500 
	#RDC_MRVS17
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,17)

	)

31501 
	#RDC_MRSA18
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,18)

	)

31502 
	#RDC_MREA18
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,18)

	)

31503 
	#RDC_MRC18
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,18)

	)

31504 
	#RDC_MRVS18
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,18)

	)

31505 
	#RDC_MRSA19
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,19)

	)

31506 
	#RDC_MREA19
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,19)

	)

31507 
	#RDC_MRC19
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,19)

	)

31508 
	#RDC_MRVS19
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,19)

	)

31509 
	#RDC_MRSA20
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,20)

	)

31510 
	#RDC_MREA20
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,20)

	)

31511 
	#RDC_MRC20
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,20)

	)

31512 
	#RDC_MRVS20
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,20)

	)

31513 
	#RDC_MRSA21
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,21)

	)

31514 
	#RDC_MREA21
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,21)

	)

31515 
	#RDC_MRC21
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,21)

	)

31516 
	#RDC_MRVS21
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,21)

	)

31517 
	#RDC_MRSA22
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,22)

	)

31518 
	#RDC_MREA22
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,22)

	)

31519 
	#RDC_MRC22
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,22)

	)

31520 
	#RDC_MRVS22
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,22)

	)

31521 
	#RDC_MRSA23
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,23)

	)

31522 
	#RDC_MREA23
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,23)

	)

31523 
	#RDC_MRC23
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,23)

	)

31524 
	#RDC_MRVS23
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,23)

	)

31525 
	#RDC_MRSA24
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,24)

	)

31526 
	#RDC_MREA24
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,24)

	)

31527 
	#RDC_MRC24
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,24)

	)

31528 
	#RDC_MRVS24
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,24)

	)

31529 
	#RDC_MRSA25
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,25)

	)

31530 
	#RDC_MREA25
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,25)

	)

31531 
	#RDC_MRC25
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,25)

	)

31532 
	#RDC_MRVS25
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,25)

	)

31533 
	#RDC_MRSA26
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,26)

	)

31534 
	#RDC_MREA26
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,26)

	)

31535 
	#RDC_MRC26
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,26)

	)

31536 
	#RDC_MRVS26
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,26)

	)

31537 
	#RDC_MRSA27
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,27)

	)

31538 
	#RDC_MREA27
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,27)

	)

31539 
	#RDC_MRC27
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,27)

	)

31540 
	#RDC_MRVS27
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,27)

	)

31541 
	#RDC_MRSA28
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,28)

	)

31542 
	#RDC_MREA28
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,28)

	)

31543 
	#RDC_MRC28
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,28)

	)

31544 
	#RDC_MRVS28
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,28)

	)

31545 
	#RDC_MRSA29
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,29)

	)

31546 
	#RDC_MREA29
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,29)

	)

31547 
	#RDC_MRC29
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,29)

	)

31548 
	#RDC_MRVS29
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,29)

	)

31549 
	#RDC_MRSA30
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,30)

	)

31550 
	#RDC_MREA30
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,30)

	)

31551 
	#RDC_MRC30
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,30)

	)

31552 
	#RDC_MRVS30
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,30)

	)

31553 
	#RDC_MRSA31
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,31)

	)

31554 
	#RDC_MREA31
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,31)

	)

31555 
	#RDC_MRC31
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,31)

	)

31556 
	#RDC_MRVS31
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,31)

	)

31557 
	#RDC_MRSA32
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,32)

	)

31558 
	#RDC_MREA32
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,32)

	)

31559 
	#RDC_MRC32
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,32)

	)

31560 
	#RDC_MRVS32
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,32)

	)

31561 
	#RDC_MRSA33
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,33)

	)

31562 
	#RDC_MREA33
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,33)

	)

31563 
	#RDC_MRC33
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,33)

	)

31564 
	#RDC_MRVS33
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,33)

	)

31565 
	#RDC_MRSA34
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,34)

	)

31566 
	#RDC_MREA34
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,34)

	)

31567 
	#RDC_MRC34
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,34)

	)

31568 
	#RDC_MRVS34
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,34)

	)

31569 
	#RDC_MRSA35
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,35)

	)

31570 
	#RDC_MREA35
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,35)

	)

31571 
	#RDC_MRC35
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,35)

	)

31572 
	#RDC_MRVS35
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,35)

	)

31573 
	#RDC_MRSA36
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,36)

	)

31574 
	#RDC_MREA36
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,36)

	)

31575 
	#RDC_MRC36
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,36)

	)

31576 
	#RDC_MRVS36
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,36)

	)

31577 
	#RDC_MRSA37
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,37)

	)

31578 
	#RDC_MREA37
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,37)

	)

31579 
	#RDC_MRC37
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,37)

	)

31580 
	#RDC_MRVS37
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,37)

	)

31581 
	#RDC_MRSA38
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,38)

	)

31582 
	#RDC_MREA38
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,38)

	)

31583 
	#RDC_MRC38
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,38)

	)

31584 
	#RDC_MRVS38
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,38)

	)

31585 
	#RDC_MRSA39
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,39)

	)

31586 
	#RDC_MREA39
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,39)

	)

31587 
	#RDC_MRC39
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,39)

	)

31588 
	#RDC_MRVS39
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,39)

	)

31589 
	#RDC_MRSA40
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,40)

	)

31590 
	#RDC_MREA40
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,40)

	)

31591 
	#RDC_MRC40
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,40)

	)

31592 
	#RDC_MRVS40
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,40)

	)

31593 
	#RDC_MRSA41
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,41)

	)

31594 
	#RDC_MREA41
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,41)

	)

31595 
	#RDC_MRC41
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,41)

	)

31596 
	#RDC_MRVS41
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,41)

	)

31597 
	#RDC_MRSA42
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,42)

	)

31598 
	#RDC_MREA42
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,42)

	)

31599 
	#RDC_MRC42
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,42)

	)

31600 
	#RDC_MRVS42
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,42)

	)

31601 
	#RDC_MRSA43
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,43)

	)

31602 
	#RDC_MREA43
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,43)

	)

31603 
	#RDC_MRC43
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,43)

	)

31604 
	#RDC_MRVS43
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,43)

	)

31605 
	#RDC_MRSA44
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,44)

	)

31606 
	#RDC_MREA44
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,44)

	)

31607 
	#RDC_MRC44
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,44)

	)

31608 
	#RDC_MRVS44
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,44)

	)

31609 
	#RDC_MRSA45
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,45)

	)

31610 
	#RDC_MREA45
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,45)

	)

31611 
	#RDC_MRC45
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,45)

	)

31612 
	#RDC_MRVS45
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,45)

	)

31613 
	#RDC_MRSA46
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,46)

	)

31614 
	#RDC_MREA46
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,46)

	)

31615 
	#RDC_MRC46
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,46)

	)

31616 
	#RDC_MRVS46
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,46)

	)

31617 
	#RDC_MRSA47
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,47)

	)

31618 
	#RDC_MREA47
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,47)

	)

31619 
	#RDC_MRC47
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,47)

	)

31620 
	#RDC_MRVS47
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,47)

	)

31621 
	#RDC_MRSA48
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,48)

	)

31622 
	#RDC_MREA48
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,48)

	)

31623 
	#RDC_MRC48
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,48)

	)

31624 
	#RDC_MRVS48
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,48)

	)

31625 
	#RDC_MRSA49
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,49)

	)

31626 
	#RDC_MREA49
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,49)

	)

31627 
	#RDC_MRC49
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,49)

	)

31628 
	#RDC_MRVS49
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,49)

	)

31629 
	#RDC_MRSA50
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,50)

	)

31630 
	#RDC_MREA50
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,50)

	)

31631 
	#RDC_MRC50
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,50)

	)

31632 
	#RDC_MRVS50
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,50)

	)

31633 
	#RDC_MRSA51
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,51)

	)

31634 
	#RDC_MREA51
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,51)

	)

31635 
	#RDC_MRC51
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,51)

	)

31636 
	#RDC_MRVS51
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,51)

	)

31637 
	#RDC_MRSA52
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,52)

	)

31638 
	#RDC_MREA52
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,52)

	)

31639 
	#RDC_MRC52
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,52)

	)

31640 
	#RDC_MRVS52
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,52)

	)

31641 
	#RDC_MRSA53
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,53)

	)

31642 
	#RDC_MREA53
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,53)

	)

31643 
	#RDC_MRC53
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,53)

	)

31644 
	#RDC_MRVS53
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,53)

	)

31645 
	#RDC_MRSA54
 
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,54)

	)

31646 
	#RDC_MREA54
 
	`RDC_MREA_REG
(
RDC_BASE_PTR
,54)

	)

31647 
	#RDC_MRC54
 
	`RDC_MRC_REG
(
RDC_BASE_PTR
,54)

	)

31648 
	#RDC_MRVS54
 
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,54)

	)

31650 
	#RDC_MDA
(
ödex
Ë
	`RDC_MDA_REG
(
RDC_BASE_PTR
,ödex)

	)

31651 
	#RDC_PDAP
(
ödex
Ë
	`RDC_PDAP_REG
(
RDC_BASE_PTR
,ödex)

	)

31652 
	#RDC_MRSA
(
ödex
Ë
	`RDC_MRSA_REG
(
RDC_BASE_PTR
,ödex)

	)

31653 
	#RDC_MREA
(
ödex
Ë
	`RDC_MREA_REG
(
RDC_BASE_PTR
,ödex)

	)

31654 
	#RDC_MRC
(
ödex
Ë
	`RDC_MRC_REG
(
RDC_BASE_PTR
,ödex)

	)

31655 
	#RDC_MRVS
(
ödex
Ë
	`RDC_MRVS_REG
(
RDC_BASE_PTR
,ödex)

	)

31676 
__IO
 
uöt8_t
 
	mGATE
[64];

31678 
__IO
 
uöt16_t
 
	mRSTGT_W
;

31679 
__IO
 
uöt16_t
 
	mRSTGT_R
;

31681 } 
	tRDC_SEMAPHORE_Ty≥
, *
	tRDC_SEMAPHORE_MemM≠På
;

31693 
	#RDC_SEMAPHORE_GATE_REG
(
ba£
,
ödex
Ë((ba£)->
GATE
[ödex])

	)

31694 
	#RDC_SEMAPHORE_RSTGT_W_REG
(
ba£
Ë((ba£)->
RSTGT_W
)

	)

31695 
	#RDC_SEMAPHORE_RSTGT_R_REG
(
ba£
Ë((ba£)->
RSTGT_R
)

	)

31711 
	#RDC_SEMAPHORE_GATE_GTFSM_MASK
 0xFu

	)

31712 
	#RDC_SEMAPHORE_GATE_GTFSM_SHIFT
 0

	)

31713 
	#RDC_SEMAPHORE_GATE_GTFSM
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
RDC_SEMAPHORE_GATE_GTFSM_SHIFT
))&
RDC_SEMAPHORE_GATE_GTFSM_MASK
)

	)

31714 
	#RDC_SEMAPHORE_GATE_LDOM_MASK
 0x60u

	)

31715 
	#RDC_SEMAPHORE_GATE_LDOM_SHIFT
 5

	)

31716 
	#RDC_SEMAPHORE_GATE_LDOM
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
RDC_SEMAPHORE_GATE_LDOM_SHIFT
))&
RDC_SEMAPHORE_GATE_LDOM_MASK
)

	)

31718 
	#RDC_SEMAPHORE_RSTGT_W_RSTGDP_MASK
 0xFFu

	)

31719 
	#RDC_SEMAPHORE_RSTGT_W_RSTGDP_SHIFT
 0

	)

31720 
	#RDC_SEMAPHORE_RSTGT_W_RSTGDP
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
RDC_SEMAPHORE_RSTGT_W_RSTGDP_SHIFT
))&
RDC_SEMAPHORE_RSTGT_W_RSTGDP_MASK
)

	)

31721 
	#RDC_SEMAPHORE_RSTGT_W_RSTGTN_MASK
 0xFF00u

	)

31722 
	#RDC_SEMAPHORE_RSTGT_W_RSTGTN_SHIFT
 8

	)

31723 
	#RDC_SEMAPHORE_RSTGT_W_RSTGTN
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
RDC_SEMAPHORE_RSTGT_W_RSTGTN_SHIFT
))&
RDC_SEMAPHORE_RSTGT_W_RSTGTN_MASK
)

	)

31725 
	#RDC_SEMAPHORE_RSTGT_R_RSTGMS_MASK
 0xFu

	)

31726 
	#RDC_SEMAPHORE_RSTGT_R_RSTGMS_SHIFT
 0

	)

31727 
	#RDC_SEMAPHORE_RSTGT_R_RSTGMS
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
RDC_SEMAPHORE_RSTGT_R_RSTGMS_SHIFT
))&
RDC_SEMAPHORE_RSTGT_R_RSTGMS_MASK
)

	)

31728 
	#RDC_SEMAPHORE_RSTGT_R_RSTGSM_MASK
 0x30u

	)

31729 
	#RDC_SEMAPHORE_RSTGT_R_RSTGSM_SHIFT
 4

	)

31730 
	#RDC_SEMAPHORE_RSTGT_R_RSTGSM
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
RDC_SEMAPHORE_RSTGT_R_RSTGSM_SHIFT
))&
RDC_SEMAPHORE_RSTGT_R_RSTGSM_MASK
)

	)

31731 
	#RDC_SEMAPHORE_RSTGT_R_RSTGTN_MASK
 0xFF00u

	)

31732 
	#RDC_SEMAPHORE_RSTGT_R_RSTGTN_SHIFT
 8

	)

31733 
	#RDC_SEMAPHORE_RSTGT_R_RSTGTN
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
RDC_SEMAPHORE_RSTGT_R_RSTGTN_SHIFT
))&
RDC_SEMAPHORE_RSTGT_R_RSTGTN_MASK
)

	)

31741 
	#RDC_SEMAPHORE1_BASE
 (0x420F4000u)

	)

31743 
	#RDC_SEMAPHORE1
 ((
RDC_SEMAPHORE_Ty≥
 *)
RDC_SEMAPHORE1_BASE
)

	)

31744 
	#RDC_SEMAPHORE1_BASE_PTR
 (
RDC_SEMAPHORE1
)

	)

31746 
	#RDC_SEMAPHORE2_BASE
 (0x420F8000u)

	)

31748 
	#RDC_SEMAPHORE2
 ((
RDC_SEMAPHORE_Ty≥
 *)
RDC_SEMAPHORE2_BASE
)

	)

31749 
	#RDC_SEMAPHORE2_BASE_PTR
 (
RDC_SEMAPHORE2
)

	)

31751 
	#RDC_SEMAPHORE_BASE_ADDRS
 { 
RDC_SEMAPHORE1_BASE
, 
RDC_SEMAPHORE2_BASE
 }

	)

31753 
	#RDC_SEMAPHORE_BASE_PTRS
 { 
RDC_SEMAPHORE1
, 
RDC_SEMAPHORE2
 }

	)

31766 
	#RDC_SEMAPHORE1_GATE0
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,0)

	)

31767 
	#RDC_SEMAPHORE1_GATE1
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,1)

	)

31768 
	#RDC_SEMAPHORE1_GATE2
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,2)

	)

31769 
	#RDC_SEMAPHORE1_GATE3
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,3)

	)

31770 
	#RDC_SEMAPHORE1_GATE4
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,4)

	)

31771 
	#RDC_SEMAPHORE1_GATE5
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,5)

	)

31772 
	#RDC_SEMAPHORE1_GATE6
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,6)

	)

31773 
	#RDC_SEMAPHORE1_GATE7
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,7)

	)

31774 
	#RDC_SEMAPHORE1_GATE8
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,8)

	)

31775 
	#RDC_SEMAPHORE1_GATE9
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,9)

	)

31776 
	#RDC_SEMAPHORE1_GATE10
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,10)

	)

31777 
	#RDC_SEMAPHORE1_GATE11
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,11)

	)

31778 
	#RDC_SEMAPHORE1_GATE12
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,12)

	)

31779 
	#RDC_SEMAPHORE1_GATE13
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,13)

	)

31780 
	#RDC_SEMAPHORE1_GATE14
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,14)

	)

31781 
	#RDC_SEMAPHORE1_GATE15
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,15)

	)

31782 
	#RDC_SEMAPHORE1_GATE16
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,16)

	)

31783 
	#RDC_SEMAPHORE1_GATE17
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,17)

	)

31784 
	#RDC_SEMAPHORE1_GATE18
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,18)

	)

31785 
	#RDC_SEMAPHORE1_GATE19
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,19)

	)

31786 
	#RDC_SEMAPHORE1_GATE20
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,20)

	)

31787 
	#RDC_SEMAPHORE1_GATE21
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,21)

	)

31788 
	#RDC_SEMAPHORE1_GATE22
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,22)

	)

31789 
	#RDC_SEMAPHORE1_GATE23
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,23)

	)

31790 
	#RDC_SEMAPHORE1_GATE24
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,24)

	)

31791 
	#RDC_SEMAPHORE1_GATE25
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,25)

	)

31792 
	#RDC_SEMAPHORE1_GATE26
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,26)

	)

31793 
	#RDC_SEMAPHORE1_GATE27
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,27)

	)

31794 
	#RDC_SEMAPHORE1_GATE28
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,28)

	)

31795 
	#RDC_SEMAPHORE1_GATE29
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,29)

	)

31796 
	#RDC_SEMAPHORE1_GATE30
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,30)

	)

31797 
	#RDC_SEMAPHORE1_GATE31
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,31)

	)

31798 
	#RDC_SEMAPHORE1_GATE32
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,32)

	)

31799 
	#RDC_SEMAPHORE1_GATE33
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,33)

	)

31800 
	#RDC_SEMAPHORE1_GATE34
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,34)

	)

31801 
	#RDC_SEMAPHORE1_GATE35
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,35)

	)

31802 
	#RDC_SEMAPHORE1_GATE36
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,36)

	)

31803 
	#RDC_SEMAPHORE1_GATE37
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,37)

	)

31804 
	#RDC_SEMAPHORE1_GATE38
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,38)

	)

31805 
	#RDC_SEMAPHORE1_GATE39
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,39)

	)

31806 
	#RDC_SEMAPHORE1_GATE40
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,40)

	)

31807 
	#RDC_SEMAPHORE1_GATE41
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,41)

	)

31808 
	#RDC_SEMAPHORE1_GATE42
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,42)

	)

31809 
	#RDC_SEMAPHORE1_GATE43
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,43)

	)

31810 
	#RDC_SEMAPHORE1_GATE44
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,44)

	)

31811 
	#RDC_SEMAPHORE1_GATE45
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,45)

	)

31812 
	#RDC_SEMAPHORE1_GATE46
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,46)

	)

31813 
	#RDC_SEMAPHORE1_GATE47
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,47)

	)

31814 
	#RDC_SEMAPHORE1_GATE48
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,48)

	)

31815 
	#RDC_SEMAPHORE1_GATE49
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,49)

	)

31816 
	#RDC_SEMAPHORE1_GATE50
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,50)

	)

31817 
	#RDC_SEMAPHORE1_GATE51
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,51)

	)

31818 
	#RDC_SEMAPHORE1_GATE52
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,52)

	)

31819 
	#RDC_SEMAPHORE1_GATE53
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,53)

	)

31820 
	#RDC_SEMAPHORE1_GATE54
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,54)

	)

31821 
	#RDC_SEMAPHORE1_GATE55
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,55)

	)

31822 
	#RDC_SEMAPHORE1_GATE56
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,56)

	)

31823 
	#RDC_SEMAPHORE1_GATE57
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,57)

	)

31824 
	#RDC_SEMAPHORE1_GATE58
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,58)

	)

31825 
	#RDC_SEMAPHORE1_GATE59
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,59)

	)

31826 
	#RDC_SEMAPHORE1_GATE60
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,60)

	)

31827 
	#RDC_SEMAPHORE1_GATE61
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,61)

	)

31828 
	#RDC_SEMAPHORE1_GATE62
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,62)

	)

31829 
	#RDC_SEMAPHORE1_GATE63
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,63)

	)

31830 
	#RDC_SEMAPHORE1_RSTGT_W
 
	`RDC_SEMAPHORE_RSTGT_W_REG
(
RDC_SEMAPHORE1_BASE_PTR
)

	)

31831 
	#RDC_SEMAPHORE1_RSTGT_R
 
	`RDC_SEMAPHORE_RSTGT_R_REG
(
RDC_SEMAPHORE1_BASE_PTR
)

	)

31833 
	#RDC_SEMAPHORE2_GATE0
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,0)

	)

31834 
	#RDC_SEMAPHORE2_GATE1
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,1)

	)

31835 
	#RDC_SEMAPHORE2_GATE2
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,2)

	)

31836 
	#RDC_SEMAPHORE2_GATE3
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,3)

	)

31837 
	#RDC_SEMAPHORE2_GATE4
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,4)

	)

31838 
	#RDC_SEMAPHORE2_GATE5
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,5)

	)

31839 
	#RDC_SEMAPHORE2_GATE6
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,6)

	)

31840 
	#RDC_SEMAPHORE2_GATE7
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,7)

	)

31841 
	#RDC_SEMAPHORE2_GATE8
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,8)

	)

31842 
	#RDC_SEMAPHORE2_GATE9
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,9)

	)

31843 
	#RDC_SEMAPHORE2_GATE10
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,10)

	)

31844 
	#RDC_SEMAPHORE2_GATE11
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,11)

	)

31845 
	#RDC_SEMAPHORE2_GATE12
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,12)

	)

31846 
	#RDC_SEMAPHORE2_GATE13
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,13)

	)

31847 
	#RDC_SEMAPHORE2_GATE14
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,14)

	)

31848 
	#RDC_SEMAPHORE2_GATE15
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,15)

	)

31849 
	#RDC_SEMAPHORE2_GATE16
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,16)

	)

31850 
	#RDC_SEMAPHORE2_GATE17
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,17)

	)

31851 
	#RDC_SEMAPHORE2_GATE18
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,18)

	)

31852 
	#RDC_SEMAPHORE2_GATE19
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,19)

	)

31853 
	#RDC_SEMAPHORE2_GATE20
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,20)

	)

31854 
	#RDC_SEMAPHORE2_GATE21
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,21)

	)

31855 
	#RDC_SEMAPHORE2_GATE22
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,22)

	)

31856 
	#RDC_SEMAPHORE2_GATE23
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,23)

	)

31857 
	#RDC_SEMAPHORE2_GATE24
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,24)

	)

31858 
	#RDC_SEMAPHORE2_GATE25
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,25)

	)

31859 
	#RDC_SEMAPHORE2_GATE26
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,26)

	)

31860 
	#RDC_SEMAPHORE2_GATE27
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,27)

	)

31861 
	#RDC_SEMAPHORE2_GATE28
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,28)

	)

31862 
	#RDC_SEMAPHORE2_GATE29
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,29)

	)

31863 
	#RDC_SEMAPHORE2_GATE30
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,30)

	)

31864 
	#RDC_SEMAPHORE2_GATE31
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,31)

	)

31865 
	#RDC_SEMAPHORE2_GATE32
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,32)

	)

31866 
	#RDC_SEMAPHORE2_GATE33
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,33)

	)

31867 
	#RDC_SEMAPHORE2_GATE34
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,34)

	)

31868 
	#RDC_SEMAPHORE2_GATE35
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,35)

	)

31869 
	#RDC_SEMAPHORE2_GATE36
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,36)

	)

31870 
	#RDC_SEMAPHORE2_GATE37
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,37)

	)

31871 
	#RDC_SEMAPHORE2_GATE38
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,38)

	)

31872 
	#RDC_SEMAPHORE2_GATE39
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,39)

	)

31873 
	#RDC_SEMAPHORE2_GATE40
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,40)

	)

31874 
	#RDC_SEMAPHORE2_GATE41
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,41)

	)

31875 
	#RDC_SEMAPHORE2_GATE42
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,42)

	)

31876 
	#RDC_SEMAPHORE2_GATE43
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,43)

	)

31877 
	#RDC_SEMAPHORE2_GATE44
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,44)

	)

31878 
	#RDC_SEMAPHORE2_GATE45
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,45)

	)

31879 
	#RDC_SEMAPHORE2_GATE46
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,46)

	)

31880 
	#RDC_SEMAPHORE2_GATE47
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,47)

	)

31881 
	#RDC_SEMAPHORE2_GATE48
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,48)

	)

31882 
	#RDC_SEMAPHORE2_GATE49
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,49)

	)

31883 
	#RDC_SEMAPHORE2_GATE50
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,50)

	)

31884 
	#RDC_SEMAPHORE2_GATE51
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,51)

	)

31885 
	#RDC_SEMAPHORE2_GATE52
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,52)

	)

31886 
	#RDC_SEMAPHORE2_GATE53
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,53)

	)

31887 
	#RDC_SEMAPHORE2_GATE54
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,54)

	)

31888 
	#RDC_SEMAPHORE2_GATE55
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,55)

	)

31889 
	#RDC_SEMAPHORE2_GATE56
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,56)

	)

31890 
	#RDC_SEMAPHORE2_GATE57
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,57)

	)

31891 
	#RDC_SEMAPHORE2_GATE58
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,58)

	)

31892 
	#RDC_SEMAPHORE2_GATE59
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,59)

	)

31893 
	#RDC_SEMAPHORE2_GATE60
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,60)

	)

31894 
	#RDC_SEMAPHORE2_GATE61
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,61)

	)

31895 
	#RDC_SEMAPHORE2_GATE62
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,62)

	)

31896 
	#RDC_SEMAPHORE2_GATE63
 
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,63)

	)

31897 
	#RDC_SEMAPHORE2_RSTGT_W
 
	`RDC_SEMAPHORE_RSTGT_W_REG
(
RDC_SEMAPHORE2_BASE_PTR
)

	)

31898 
	#RDC_SEMAPHORE2_RSTGT_R
 
	`RDC_SEMAPHORE_RSTGT_R_REG
(
RDC_SEMAPHORE2_BASE_PTR
)

	)

31900 
	#RDC_SEMAPHORE1_GATE
(
ödex
Ë
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE1_BASE_PTR
,ödex)

	)

31901 
	#RDC_SEMAPHORE2_GATE
(
ödex
Ë
	`RDC_SEMAPHORE_GATE_REG
(
RDC_SEMAPHORE2_BASE_PTR
,ödex)

	)

31922 
uöt8_t
 
	mRESERVED_0
[212];

31923 
__IO
 
uöt32_t
 
	mROMPATCHD
[8];

31924 
__IO
 
uöt32_t
 
	mROMPATCHCNTL
;

31925 
__I
 
uöt32_t
 
	mROMPATCHENH
;

31926 
__IO
 
uöt32_t
 
	mROMPATCHENL
;

31927 
__IO
 
uöt32_t
 
	mROMPATCHA
[16];

31928 
uöt8_t
 
	mRESERVED_1
[200];

31929 
__IO
 
uöt32_t
 
	mROMPATCHSR
;

31930 } 
	tROMC_Ty≥
, *
	tROMC_MemM≠På
;

31942 
	#ROMC_ROMPATCHD_REG
(
ba£
,
ödex
Ë((ba£)->
ROMPATCHD
[ödex])

	)

31943 
	#ROMC_ROMPATCHCNTL_REG
(
ba£
Ë((ba£)->
ROMPATCHCNTL
)

	)

31944 
	#ROMC_ROMPATCHENH_REG
(
ba£
Ë((ba£)->
ROMPATCHENH
)

	)

31945 
	#ROMC_ROMPATCHENL_REG
(
ba£
Ë((ba£)->
ROMPATCHENL
)

	)

31946 
	#ROMC_ROMPATCHA_REG
(
ba£
,
ödex
Ë((ba£)->
ROMPATCHA
[ödex])

	)

31947 
	#ROMC_ROMPATCHSR_REG
(
ba£
Ë((ba£)->
ROMPATCHSR
)

	)

31963 
	#ROMC_ROMPATCHD_DATAX_MASK
 0xFFFFFFFFu

	)

31964 
	#ROMC_ROMPATCHD_DATAX_SHIFT
 0

	)

31965 
	#ROMC_ROMPATCHD_DATAX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ROMC_ROMPATCHD_DATAX_SHIFT
))&
ROMC_ROMPATCHD_DATAX_MASK
)

	)

31967 
	#ROMC_ROMPATCHCNTL_DATAFIX_MASK
 0xFFu

	)

31968 
	#ROMC_ROMPATCHCNTL_DATAFIX_SHIFT
 0

	)

31969 
	#ROMC_ROMPATCHCNTL_DATAFIX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ROMC_ROMPATCHCNTL_DATAFIX_SHIFT
))&
ROMC_ROMPATCHCNTL_DATAFIX_MASK
)

	)

31970 
	#ROMC_ROMPATCHCNTL_DIS_MASK
 0x20000000u

	)

31971 
	#ROMC_ROMPATCHCNTL_DIS_SHIFT
 29

	)

31974 
	#ROMC_ROMPATCHENL_ENABLE_MASK
 0xFFFFu

	)

31975 
	#ROMC_ROMPATCHENL_ENABLE_SHIFT
 0

	)

31976 
	#ROMC_ROMPATCHENL_ENABLE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ROMC_ROMPATCHENL_ENABLE_SHIFT
))&
ROMC_ROMPATCHENL_ENABLE_MASK
)

	)

31978 
	#ROMC_ROMPATCHA_THUMBX_MASK
 0x1u

	)

31979 
	#ROMC_ROMPATCHA_THUMBX_SHIFT
 0

	)

31980 
	#ROMC_ROMPATCHA_ADDRX_MASK
 0x7FFFFEu

	)

31981 
	#ROMC_ROMPATCHA_ADDRX_SHIFT
 1

	)

31982 
	#ROMC_ROMPATCHA_ADDRX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ROMC_ROMPATCHA_ADDRX_SHIFT
))&
ROMC_ROMPATCHA_ADDRX_MASK
)

	)

31984 
	#ROMC_ROMPATCHSR_SOURCE_MASK
 0x3Fu

	)

31985 
	#ROMC_ROMPATCHSR_SOURCE_SHIFT
 0

	)

31986 
	#ROMC_ROMPATCHSR_SOURCE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
ROMC_ROMPATCHSR_SOURCE_SHIFT
))&
ROMC_ROMPATCHSR_SOURCE_MASK
)

	)

31987 
	#ROMC_ROMPATCHSR_SW_MASK
 0x20000u

	)

31988 
	#ROMC_ROMPATCHSR_SW_SHIFT
 17

	)

31996 
	#ROMC_BASE
 (0x421AC000u)

	)

31998 
	#ROMC
 ((
ROMC_Ty≥
 *)
ROMC_BASE
)

	)

31999 
	#ROMC_BASE_PTR
 (
ROMC
)

	)

32001 
	#ROMC_BASE_ADDRS
 { 
ROMC_BASE
 }

	)

32003 
	#ROMC_BASE_PTRS
 { 
ROMC
 }

	)

32016 
	#ROMC_ROMPATCH0D
 
	`ROMC_ROMPATCHD_REG
(
ROMC_BASE_PTR
,0)

	)

32017 
	#ROMC_ROMPATCH1D
 
	`ROMC_ROMPATCHD_REG
(
ROMC_BASE_PTR
,1)

	)

32018 
	#ROMC_ROMPATCH2D
 
	`ROMC_ROMPATCHD_REG
(
ROMC_BASE_PTR
,2)

	)

32019 
	#ROMC_ROMPATCH3D
 
	`ROMC_ROMPATCHD_REG
(
ROMC_BASE_PTR
,3)

	)

32020 
	#ROMC_ROMPATCH4D
 
	`ROMC_ROMPATCHD_REG
(
ROMC_BASE_PTR
,4)

	)

32021 
	#ROMC_ROMPATCH5D
 
	`ROMC_ROMPATCHD_REG
(
ROMC_BASE_PTR
,5)

	)

32022 
	#ROMC_ROMPATCH6D
 
	`ROMC_ROMPATCHD_REG
(
ROMC_BASE_PTR
,6)

	)

32023 
	#ROMC_ROMPATCH7D
 
	`ROMC_ROMPATCHD_REG
(
ROMC_BASE_PTR
,7)

	)

32024 
	#ROMC_ROMPATCHCNTL
 
	`ROMC_ROMPATCHCNTL_REG
(
ROMC_BASE_PTR
)

	)

32025 
	#ROMC_ROMPATCHENH
 
	`ROMC_ROMPATCHENH_REG
(
ROMC_BASE_PTR
)

	)

32026 
	#ROMC_ROMPATCHENL
 
	`ROMC_ROMPATCHENL_REG
(
ROMC_BASE_PTR
)

	)

32027 
	#ROMC_ROMPATCH0A
 
	`ROMC_ROMPATCHA_REG
(
ROMC_BASE_PTR
,0)

	)

32028 
	#ROMC_ROMPATCH1A
 
	`ROMC_ROMPATCHA_REG
(
ROMC_BASE_PTR
,1)

	)

32029 
	#ROMC_ROMPATCH2A
 
	`ROMC_ROMPATCHA_REG
(
ROMC_BASE_PTR
,2)

	)

32030 
	#ROMC_ROMPATCH3A
 
	`ROMC_ROMPATCHA_REG
(
ROMC_BASE_PTR
,3)

	)

32031 
	#ROMC_ROMPATCH4A
 
	`ROMC_ROMPATCHA_REG
(
ROMC_BASE_PTR
,4)

	)

32032 
	#ROMC_ROMPATCH5A
 
	`ROMC_ROMPATCHA_REG
(
ROMC_BASE_PTR
,5)

	)

32033 
	#ROMC_ROMPATCH6A
 
	`ROMC_ROMPATCHA_REG
(
ROMC_BASE_PTR
,6)

	)

32034 
	#ROMC_ROMPATCH7A
 
	`ROMC_ROMPATCHA_REG
(
ROMC_BASE_PTR
,7)

	)

32035 
	#ROMC_ROMPATCH8A
 
	`ROMC_ROMPATCHA_REG
(
ROMC_BASE_PTR
,8)

	)

32036 
	#ROMC_ROMPATCH9A
 
	`ROMC_ROMPATCHA_REG
(
ROMC_BASE_PTR
,9)

	)

32037 
	#ROMC_ROMPATCH10A
 
	`ROMC_ROMPATCHA_REG
(
ROMC_BASE_PTR
,10)

	)

32038 
	#ROMC_ROMPATCH11A
 
	`ROMC_ROMPATCHA_REG
(
ROMC_BASE_PTR
,11)

	)

32039 
	#ROMC_ROMPATCH12A
 
	`ROMC_ROMPATCHA_REG
(
ROMC_BASE_PTR
,12)

	)

32040 
	#ROMC_ROMPATCH13A
 
	`ROMC_ROMPATCHA_REG
(
ROMC_BASE_PTR
,13)

	)

32041 
	#ROMC_ROMPATCH14A
 
	`ROMC_ROMPATCHA_REG
(
ROMC_BASE_PTR
,14)

	)

32042 
	#ROMC_ROMPATCH15A
 
	`ROMC_ROMPATCHA_REG
(
ROMC_BASE_PTR
,15)

	)

32043 
	#ROMC_ROMPATCHSR
 
	`ROMC_ROMPATCHSR_REG
(
ROMC_BASE_PTR
)

	)

32045 
	#ROMC_ROMPATCHD
(
ödex
Ë
	`ROMC_ROMPATCHD_REG
(
ROMC_BASE_PTR
,ödex)

	)

32046 
	#ROMC_ROMPATCHA
(
ödex
Ë
	`ROMC_ROMPATCHA_REG
(
ROMC_BASE_PTR
,ödex)

	)

32067 
__IO
 
uöt32_t
 
	mMC0PTR
;

32068 
__IO
 
uöt32_t
 
	mINTR
;

32069 
__IO
 
uöt32_t
 
	mSTOP_STAT
;

32070 
__IO
 
uöt32_t
 
	mHSTART
;

32071 
__IO
 
uöt32_t
 
	mEVTOVR
;

32072 
__IO
 
uöt32_t
 
	mDSPOVR
;

32073 
__IO
 
uöt32_t
 
	mHOSTOVR
;

32074 
__IO
 
uöt32_t
 
	mEVTPEND
;

32075 
uöt8_t
 
	mRESERVED_0
[4];

32076 
__I
 
uöt32_t
 
	mRESET
;

32077 
__I
 
uöt32_t
 
	mEVTERR
;

32078 
__IO
 
uöt32_t
 
	mINTRMASK
;

32079 
__I
 
uöt32_t
 
	mPSW
;

32080 
__I
 
uöt32_t
 
	mEVTERRDBG
;

32081 
__IO
 
uöt32_t
 
	mCONFIG
;

32082 
__IO
 
uöt32_t
 
	mSDMA_LOCK
;

32083 
__IO
 
uöt32_t
 
	mONCE_ENB
;

32084 
__IO
 
uöt32_t
 
	mONCE_DATA
;

32085 
__IO
 
uöt32_t
 
	mONCE_INSTR
;

32086 
__I
 
uöt32_t
 
	mONCE_STAT
;

32087 
__IO
 
uöt32_t
 
	mONCE_CMD
;

32088 
uöt8_t
 
	mRESERVED_1
[4];

32089 
__IO
 
uöt32_t
 
	mILLINSTADDR
;

32090 
__IO
 
uöt32_t
 
	mCHN0ADDR
;

32091 
__I
 
uöt32_t
 
	mEVT_MIRROR
;

32092 
__I
 
uöt32_t
 
	mEVT_MIRROR2
;

32093 
uöt8_t
 
	mRESERVED_2
[8];

32094 
__IO
 
uöt32_t
 
	mXTRIG_CONF1
;

32095 
__IO
 
uöt32_t
 
	mXTRIG_CONF2
;

32096 
uöt8_t
 
	mRESERVED_3
[136];

32097 
__IO
 
uöt32_t
 
	mSDMA_CHNPRI
[32];

32098 
uöt8_t
 
	mRESERVED_4
[128];

32099 
__IO
 
uöt32_t
 
	mCHNENBL
[48];

32100 } 
	tSDMAARM_Ty≥
, *
	tSDMAARM_MemM≠På
;

32112 
	#SDMAARM_MC0PTR_REG
(
ba£
Ë((ba£)->
MC0PTR
)

	)

32113 
	#SDMAARM_INTR_REG
(
ba£
Ë((ba£)->
INTR
)

	)

32114 
	#SDMAARM_STOP_STAT_REG
(
ba£
Ë((ba£)->
STOP_STAT
)

	)

32115 
	#SDMAARM_HSTART_REG
(
ba£
Ë((ba£)->
HSTART
)

	)

32116 
	#SDMAARM_EVTOVR_REG
(
ba£
Ë((ba£)->
EVTOVR
)

	)

32117 
	#SDMAARM_DSPOVR_REG
(
ba£
Ë((ba£)->
DSPOVR
)

	)

32118 
	#SDMAARM_HOSTOVR_REG
(
ba£
Ë((ba£)->
HOSTOVR
)

	)

32119 
	#SDMAARM_EVTPEND_REG
(
ba£
Ë((ba£)->
EVTPEND
)

	)

32120 
	#SDMAARM_RESET_REG
(
ba£
Ë((ba£)->
RESET
)

	)

32121 
	#SDMAARM_EVTERR_REG
(
ba£
Ë((ba£)->
EVTERR
)

	)

32122 
	#SDMAARM_INTRMASK_REG
(
ba£
Ë((ba£)->
INTRMASK
)

	)

32123 
	#SDMAARM_PSW_REG
(
ba£
Ë((ba£)->
PSW
)

	)

32124 
	#SDMAARM_EVTERRDBG_REG
(
ba£
Ë((ba£)->
EVTERRDBG
)

	)

32125 
	#SDMAARM_CONFIG_REG
(
ba£
Ë((ba£)->
CONFIG
)

	)

32126 
	#SDMAARM_SDMA_LOCK_REG
(
ba£
Ë((ba£)->
SDMA_LOCK
)

	)

32127 
	#SDMAARM_ONCE_ENB_REG
(
ba£
Ë((ba£)->
ONCE_ENB
)

	)

32128 
	#SDMAARM_ONCE_DATA_REG
(
ba£
Ë((ba£)->
ONCE_DATA
)

	)

32129 
	#SDMAARM_ONCE_INSTR_REG
(
ba£
Ë((ba£)->
ONCE_INSTR
)

	)

32130 
	#SDMAARM_ONCE_STAT_REG
(
ba£
Ë((ba£)->
ONCE_STAT
)

	)

32131 
	#SDMAARM_ONCE_CMD_REG
(
ba£
Ë((ba£)->
ONCE_CMD
)

	)

32132 
	#SDMAARM_ILLINSTADDR_REG
(
ba£
Ë((ba£)->
ILLINSTADDR
)

	)

32133 
	#SDMAARM_CHN0ADDR_REG
(
ba£
Ë((ba£)->
CHN0ADDR
)

	)

32134 
	#SDMAARM_EVT_MIRROR_REG
(
ba£
Ë((ba£)->
EVT_MIRROR
)

	)

32135 
	#SDMAARM_EVT_MIRROR2_REG
(
ba£
Ë((ba£)->
EVT_MIRROR2
)

	)

32136 
	#SDMAARM_XTRIG_CONF1_REG
(
ba£
Ë((ba£)->
XTRIG_CONF1
)

	)

32137 
	#SDMAARM_XTRIG_CONF2_REG
(
ba£
Ë((ba£)->
XTRIG_CONF2
)

	)

32138 
	#SDMAARM_SDMA_CHNPRI_REG
(
ba£
,
ödex
Ë((ba£)->
SDMA_CHNPRI
[ödex])

	)

32139 
	#SDMAARM_CHNENBL_REG
(
ba£
,
ödex
Ë((ba£)->
CHNENBL
[ödex])

	)

32155 
	#SDMAARM_MC0PTR_MC0PTR_MASK
 0xFFFFFFFFu

	)

32156 
	#SDMAARM_MC0PTR_MC0PTR_SHIFT
 0

	)

32157 
	#SDMAARM_MC0PTR_MC0PTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_MC0PTR_MC0PTR_SHIFT
))&
SDMAARM_MC0PTR_MC0PTR_MASK
)

	)

32159 
	#SDMAARM_INTR_HI_MASK
 0xFFFFFFFFu

	)

32160 
	#SDMAARM_INTR_HI_SHIFT
 0

	)

32161 
	#SDMAARM_INTR_HI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_INTR_HI_SHIFT
))&
SDMAARM_INTR_HI_MASK
)

	)

32163 
	#SDMAARM_STOP_STAT_HE_MASK
 0xFFFFFFFFu

	)

32164 
	#SDMAARM_STOP_STAT_HE_SHIFT
 0

	)

32165 
	#SDMAARM_STOP_STAT_HE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_STOP_STAT_HE_SHIFT
))&
SDMAARM_STOP_STAT_HE_MASK
)

	)

32167 
	#SDMAARM_HSTART_HSTART_HE_MASK
 0xFFFFFFFFu

	)

32168 
	#SDMAARM_HSTART_HSTART_HE_SHIFT
 0

	)

32169 
	#SDMAARM_HSTART_HSTART_HE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_HSTART_HSTART_HE_SHIFT
))&
SDMAARM_HSTART_HSTART_HE_MASK
)

	)

32171 
	#SDMAARM_EVTOVR_EO_MASK
 0xFFFFFFFFu

	)

32172 
	#SDMAARM_EVTOVR_EO_SHIFT
 0

	)

32173 
	#SDMAARM_EVTOVR_EO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_EVTOVR_EO_SHIFT
))&
SDMAARM_EVTOVR_EO_MASK
)

	)

32175 
	#SDMAARM_DSPOVR_DO_MASK
 0xFFFFFFFFu

	)

32176 
	#SDMAARM_DSPOVR_DO_SHIFT
 0

	)

32177 
	#SDMAARM_DSPOVR_DO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_DSPOVR_DO_SHIFT
))&
SDMAARM_DSPOVR_DO_MASK
)

	)

32179 
	#SDMAARM_HOSTOVR_HO_MASK
 0xFFFFFFFFu

	)

32180 
	#SDMAARM_HOSTOVR_HO_SHIFT
 0

	)

32181 
	#SDMAARM_HOSTOVR_HO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_HOSTOVR_HO_SHIFT
))&
SDMAARM_HOSTOVR_HO_MASK
)

	)

32183 
	#SDMAARM_EVTPEND_EP_MASK
 0xFFFFFFFFu

	)

32184 
	#SDMAARM_EVTPEND_EP_SHIFT
 0

	)

32185 
	#SDMAARM_EVTPEND_EP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_EVTPEND_EP_SHIFT
))&
SDMAARM_EVTPEND_EP_MASK
)

	)

32187 
	#SDMAARM_RESET_RESET_MASK
 0x1u

	)

32188 
	#SDMAARM_RESET_RESET_SHIFT
 0

	)

32189 
	#SDMAARM_RESET_RESCHED_MASK
 0x2u

	)

32190 
	#SDMAARM_RESET_RESCHED_SHIFT
 1

	)

32192 
	#SDMAARM_EVTERR_CHNERR_MASK
 0xFFFFFFFFu

	)

32193 
	#SDMAARM_EVTERR_CHNERR_SHIFT
 0

	)

32194 
	#SDMAARM_EVTERR_CHNERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_EVTERR_CHNERR_SHIFT
))&
SDMAARM_EVTERR_CHNERR_MASK
)

	)

32196 
	#SDMAARM_INTRMASK_HIMASK_MASK
 0xFFFFFFFFu

	)

32197 
	#SDMAARM_INTRMASK_HIMASK_SHIFT
 0

	)

32198 
	#SDMAARM_INTRMASK_HIMASK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_INTRMASK_HIMASK_SHIFT
))&
SDMAARM_INTRMASK_HIMASK_MASK
)

	)

32200 
	#SDMAARM_PSW_CCR_MASK
 0xFu

	)

32201 
	#SDMAARM_PSW_CCR_SHIFT
 0

	)

32202 
	#SDMAARM_PSW_CCR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_PSW_CCR_SHIFT
))&
SDMAARM_PSW_CCR_MASK
)

	)

32203 
	#SDMAARM_PSW_CCP_MASK
 0xF0u

	)

32204 
	#SDMAARM_PSW_CCP_SHIFT
 4

	)

32205 
	#SDMAARM_PSW_CCP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_PSW_CCP_SHIFT
))&
SDMAARM_PSW_CCP_MASK
)

	)

32206 
	#SDMAARM_PSW_NCR_MASK
 0x1F00u

	)

32207 
	#SDMAARM_PSW_NCR_SHIFT
 8

	)

32208 
	#SDMAARM_PSW_NCR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_PSW_NCR_SHIFT
))&
SDMAARM_PSW_NCR_MASK
)

	)

32209 
	#SDMAARM_PSW_NCP_MASK
 0xE000u

	)

32210 
	#SDMAARM_PSW_NCP_SHIFT
 13

	)

32211 
	#SDMAARM_PSW_NCP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_PSW_NCP_SHIFT
))&
SDMAARM_PSW_NCP_MASK
)

	)

32213 
	#SDMAARM_EVTERRDBG_CHNERR_MASK
 0xFFFFFFFFu

	)

32214 
	#SDMAARM_EVTERRDBG_CHNERR_SHIFT
 0

	)

32215 
	#SDMAARM_EVTERRDBG_CHNERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_EVTERRDBG_CHNERR_SHIFT
))&
SDMAARM_EVTERRDBG_CHNERR_MASK
)

	)

32217 
	#SDMAARM_CONFIG_CSM_MASK
 0x3u

	)

32218 
	#SDMAARM_CONFIG_CSM_SHIFT
 0

	)

32219 
	#SDMAARM_CONFIG_CSM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_CONFIG_CSM_SHIFT
))&
SDMAARM_CONFIG_CSM_MASK
)

	)

32220 
	#SDMAARM_CONFIG_ACR_MASK
 0x10u

	)

32221 
	#SDMAARM_CONFIG_ACR_SHIFT
 4

	)

32222 
	#SDMAARM_CONFIG_RTDOBS_MASK
 0x800u

	)

32223 
	#SDMAARM_CONFIG_RTDOBS_SHIFT
 11

	)

32224 
	#SDMAARM_CONFIG_DSPDMA_MASK
 0x1000u

	)

32225 
	#SDMAARM_CONFIG_DSPDMA_SHIFT
 12

	)

32227 
	#SDMAARM_SDMA_LOCK_LOCK_MASK
 0x1u

	)

32228 
	#SDMAARM_SDMA_LOCK_LOCK_SHIFT
 0

	)

32229 
	#SDMAARM_SDMA_LOCK_SRESET_LOCK_CLR_MASK
 0x2u

	)

32230 
	#SDMAARM_SDMA_LOCK_SRESET_LOCK_CLR_SHIFT
 1

	)

32232 
	#SDMAARM_ONCE_ENB_ENB_MASK
 0x1u

	)

32233 
	#SDMAARM_ONCE_ENB_ENB_SHIFT
 0

	)

32235 
	#SDMAARM_ONCE_DATA_DATA_MASK
 0xFFFFFFFFu

	)

32236 
	#SDMAARM_ONCE_DATA_DATA_SHIFT
 0

	)

32237 
	#SDMAARM_ONCE_DATA_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_ONCE_DATA_DATA_SHIFT
))&
SDMAARM_ONCE_DATA_DATA_MASK
)

	)

32239 
	#SDMAARM_ONCE_INSTR_INSTR_MASK
 0xFFFFu

	)

32240 
	#SDMAARM_ONCE_INSTR_INSTR_SHIFT
 0

	)

32241 
	#SDMAARM_ONCE_INSTR_INSTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_ONCE_INSTR_INSTR_SHIFT
))&
SDMAARM_ONCE_INSTR_INSTR_MASK
)

	)

32243 
	#SDMAARM_ONCE_STAT_ECDR_MASK
 0x7u

	)

32244 
	#SDMAARM_ONCE_STAT_ECDR_SHIFT
 0

	)

32245 
	#SDMAARM_ONCE_STAT_ECDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_ONCE_STAT_ECDR_SHIFT
))&
SDMAARM_ONCE_STAT_ECDR_MASK
)

	)

32246 
	#SDMAARM_ONCE_STAT_MST_MASK
 0x80u

	)

32247 
	#SDMAARM_ONCE_STAT_MST_SHIFT
 7

	)

32248 
	#SDMAARM_ONCE_STAT_SWB_MASK
 0x100u

	)

32249 
	#SDMAARM_ONCE_STAT_SWB_SHIFT
 8

	)

32250 
	#SDMAARM_ONCE_STAT_ODR_MASK
 0x200u

	)

32251 
	#SDMAARM_ONCE_STAT_ODR_SHIFT
 9

	)

32252 
	#SDMAARM_ONCE_STAT_EDR_MASK
 0x400u

	)

32253 
	#SDMAARM_ONCE_STAT_EDR_SHIFT
 10

	)

32254 
	#SDMAARM_ONCE_STAT_RCV_MASK
 0x800u

	)

32255 
	#SDMAARM_ONCE_STAT_RCV_SHIFT
 11

	)

32256 
	#SDMAARM_ONCE_STAT_PST_MASK
 0xF000u

	)

32257 
	#SDMAARM_ONCE_STAT_PST_SHIFT
 12

	)

32258 
	#SDMAARM_ONCE_STAT_PST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_ONCE_STAT_PST_SHIFT
))&
SDMAARM_ONCE_STAT_PST_MASK
)

	)

32260 
	#SDMAARM_ONCE_CMD_CMD_MASK
 0xFu

	)

32261 
	#SDMAARM_ONCE_CMD_CMD_SHIFT
 0

	)

32262 
	#SDMAARM_ONCE_CMD_CMD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_ONCE_CMD_CMD_SHIFT
))&
SDMAARM_ONCE_CMD_CMD_MASK
)

	)

32264 
	#SDMAARM_ILLINSTADDR_ILLINSTADDR_MASK
 0x3FFFu

	)

32265 
	#SDMAARM_ILLINSTADDR_ILLINSTADDR_SHIFT
 0

	)

32266 
	#SDMAARM_ILLINSTADDR_ILLINSTADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_ILLINSTADDR_ILLINSTADDR_SHIFT
))&
SDMAARM_ILLINSTADDR_ILLINSTADDR_MASK
)

	)

32268 
	#SDMAARM_CHN0ADDR_CHN0ADDR_MASK
 0x3FFFu

	)

32269 
	#SDMAARM_CHN0ADDR_CHN0ADDR_SHIFT
 0

	)

32270 
	#SDMAARM_CHN0ADDR_CHN0ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_CHN0ADDR_CHN0ADDR_SHIFT
))&
SDMAARM_CHN0ADDR_CHN0ADDR_MASK
)

	)

32271 
	#SDMAARM_CHN0ADDR_SMSZ_MASK
 0x4000u

	)

32272 
	#SDMAARM_CHN0ADDR_SMSZ_SHIFT
 14

	)

32274 
	#SDMAARM_EVT_MIRROR_EVENTS_MASK
 0xFFFFFFFFu

	)

32275 
	#SDMAARM_EVT_MIRROR_EVENTS_SHIFT
 0

	)

32276 
	#SDMAARM_EVT_MIRROR_EVENTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_EVT_MIRROR_EVENTS_SHIFT
))&
SDMAARM_EVT_MIRROR_EVENTS_MASK
)

	)

32278 
	#SDMAARM_EVT_MIRROR2_EVENTS_MASK
 0xFFFFu

	)

32279 
	#SDMAARM_EVT_MIRROR2_EVENTS_SHIFT
 0

	)

32280 
	#SDMAARM_EVT_MIRROR2_EVENTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_EVT_MIRROR2_EVENTS_SHIFT
))&
SDMAARM_EVT_MIRROR2_EVENTS_MASK
)

	)

32282 
	#SDMAARM_XTRIG_CONF1_NUM0_MASK
 0x3Fu

	)

32283 
	#SDMAARM_XTRIG_CONF1_NUM0_SHIFT
 0

	)

32284 
	#SDMAARM_XTRIG_CONF1_NUM0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_XTRIG_CONF1_NUM0_SHIFT
))&
SDMAARM_XTRIG_CONF1_NUM0_MASK
)

	)

32285 
	#SDMAARM_XTRIG_CONF1_CNF0_MASK
 0x40u

	)

32286 
	#SDMAARM_XTRIG_CONF1_CNF0_SHIFT
 6

	)

32287 
	#SDMAARM_XTRIG_CONF1_NUM1_MASK
 0x3F00u

	)

32288 
	#SDMAARM_XTRIG_CONF1_NUM1_SHIFT
 8

	)

32289 
	#SDMAARM_XTRIG_CONF1_NUM1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_XTRIG_CONF1_NUM1_SHIFT
))&
SDMAARM_XTRIG_CONF1_NUM1_MASK
)

	)

32290 
	#SDMAARM_XTRIG_CONF1_CNF1_MASK
 0x4000u

	)

32291 
	#SDMAARM_XTRIG_CONF1_CNF1_SHIFT
 14

	)

32292 
	#SDMAARM_XTRIG_CONF1_NUM2_MASK
 0x3F0000u

	)

32293 
	#SDMAARM_XTRIG_CONF1_NUM2_SHIFT
 16

	)

32294 
	#SDMAARM_XTRIG_CONF1_NUM2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_XTRIG_CONF1_NUM2_SHIFT
))&
SDMAARM_XTRIG_CONF1_NUM2_MASK
)

	)

32295 
	#SDMAARM_XTRIG_CONF1_CNF2_MASK
 0x400000u

	)

32296 
	#SDMAARM_XTRIG_CONF1_CNF2_SHIFT
 22

	)

32297 
	#SDMAARM_XTRIG_CONF1_NUM3_MASK
 0x3F000000u

	)

32298 
	#SDMAARM_XTRIG_CONF1_NUM3_SHIFT
 24

	)

32299 
	#SDMAARM_XTRIG_CONF1_NUM3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_XTRIG_CONF1_NUM3_SHIFT
))&
SDMAARM_XTRIG_CONF1_NUM3_MASK
)

	)

32300 
	#SDMAARM_XTRIG_CONF1_CNF3_MASK
 0x40000000u

	)

32301 
	#SDMAARM_XTRIG_CONF1_CNF3_SHIFT
 30

	)

32303 
	#SDMAARM_XTRIG_CONF2_NUM4_MASK
 0x3Fu

	)

32304 
	#SDMAARM_XTRIG_CONF2_NUM4_SHIFT
 0

	)

32305 
	#SDMAARM_XTRIG_CONF2_NUM4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_XTRIG_CONF2_NUM4_SHIFT
))&
SDMAARM_XTRIG_CONF2_NUM4_MASK
)

	)

32306 
	#SDMAARM_XTRIG_CONF2_CNF4_MASK
 0x40u

	)

32307 
	#SDMAARM_XTRIG_CONF2_CNF4_SHIFT
 6

	)

32308 
	#SDMAARM_XTRIG_CONF2_NUM5_MASK
 0x3F00u

	)

32309 
	#SDMAARM_XTRIG_CONF2_NUM5_SHIFT
 8

	)

32310 
	#SDMAARM_XTRIG_CONF2_NUM5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_XTRIG_CONF2_NUM5_SHIFT
))&
SDMAARM_XTRIG_CONF2_NUM5_MASK
)

	)

32311 
	#SDMAARM_XTRIG_CONF2_CNF5_MASK
 0x4000u

	)

32312 
	#SDMAARM_XTRIG_CONF2_CNF5_SHIFT
 14

	)

32313 
	#SDMAARM_XTRIG_CONF2_NUM6_MASK
 0x3F0000u

	)

32314 
	#SDMAARM_XTRIG_CONF2_NUM6_SHIFT
 16

	)

32315 
	#SDMAARM_XTRIG_CONF2_NUM6
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_XTRIG_CONF2_NUM6_SHIFT
))&
SDMAARM_XTRIG_CONF2_NUM6_MASK
)

	)

32316 
	#SDMAARM_XTRIG_CONF2_CNF6_MASK
 0x400000u

	)

32317 
	#SDMAARM_XTRIG_CONF2_CNF6_SHIFT
 22

	)

32318 
	#SDMAARM_XTRIG_CONF2_NUM7_MASK
 0x3F000000u

	)

32319 
	#SDMAARM_XTRIG_CONF2_NUM7_SHIFT
 24

	)

32320 
	#SDMAARM_XTRIG_CONF2_NUM7
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_XTRIG_CONF2_NUM7_SHIFT
))&
SDMAARM_XTRIG_CONF2_NUM7_MASK
)

	)

32321 
	#SDMAARM_XTRIG_CONF2_CNF7_MASK
 0x40000000u

	)

32322 
	#SDMAARM_XTRIG_CONF2_CNF7_SHIFT
 30

	)

32324 
	#SDMAARM_SDMA_CHNPRI_CHNPRIn_MASK
 0x7u

	)

32325 
	#SDMAARM_SDMA_CHNPRI_CHNPRIn_SHIFT
 0

	)

32326 
	#SDMAARM_SDMA_CHNPRI_CHNPRIn
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_SDMA_CHNPRI_CHNPRIn_SHIFT
))&
SDMAARM_SDMA_CHNPRI_CHNPRIn_MASK
)

	)

32328 
	#SDMAARM_CHNENBL_ENBLn_MASK
 0xFFFFFFFFu

	)

32329 
	#SDMAARM_CHNENBL_ENBLn_SHIFT
 0

	)

32330 
	#SDMAARM_CHNENBL_ENBLn
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMAARM_CHNENBL_ENBLn_SHIFT
))&
SDMAARM_CHNENBL_ENBLn_MASK
)

	)

32338 
	#SDMAARM_BASE
 (0x420EC000u)

	)

32340 
	#SDMAARM
 ((
SDMAARM_Ty≥
 *)
SDMAARM_BASE
)

	)

32341 
	#SDMAARM_BASE_PTR
 (
SDMAARM
)

	)

32343 
	#SDMAARM_BASE_ADDRS
 { 
SDMAARM_BASE
 }

	)

32345 
	#SDMAARM_BASE_PTRS
 { 
SDMAARM
 }

	)

32347 
	#SDMAARM_IRQS
 { 
SDMA_IRQn
 }

	)

32360 
	#SDMAARM_MC0PTR
 
	`SDMAARM_MC0PTR_REG
(
SDMAARM_BASE_PTR
)

	)

32361 
	#SDMAARM_INTR
 
	`SDMAARM_INTR_REG
(
SDMAARM_BASE_PTR
)

	)

32362 
	#SDMAARM_STOP_STAT
 
	`SDMAARM_STOP_STAT_REG
(
SDMAARM_BASE_PTR
)

	)

32363 
	#SDMAARM_HSTART
 
	`SDMAARM_HSTART_REG
(
SDMAARM_BASE_PTR
)

	)

32364 
	#SDMAARM_EVTOVR
 
	`SDMAARM_EVTOVR_REG
(
SDMAARM_BASE_PTR
)

	)

32365 
	#SDMAARM_DSPOVR
 
	`SDMAARM_DSPOVR_REG
(
SDMAARM_BASE_PTR
)

	)

32366 
	#SDMAARM_HOSTOVR
 
	`SDMAARM_HOSTOVR_REG
(
SDMAARM_BASE_PTR
)

	)

32367 
	#SDMAARM_EVTPEND
 
	`SDMAARM_EVTPEND_REG
(
SDMAARM_BASE_PTR
)

	)

32368 
	#SDMAARM_RESET
 
	`SDMAARM_RESET_REG
(
SDMAARM_BASE_PTR
)

	)

32369 
	#SDMAARM_EVTERR
 
	`SDMAARM_EVTERR_REG
(
SDMAARM_BASE_PTR
)

	)

32370 
	#SDMAARM_INTRMASK
 
	`SDMAARM_INTRMASK_REG
(
SDMAARM_BASE_PTR
)

	)

32371 
	#SDMAARM_PSW
 
	`SDMAARM_PSW_REG
(
SDMAARM_BASE_PTR
)

	)

32372 
	#SDMAARM_EVTERRDBG
 
	`SDMAARM_EVTERRDBG_REG
(
SDMAARM_BASE_PTR
)

	)

32373 
	#SDMAARM_CONFIG
 
	`SDMAARM_CONFIG_REG
(
SDMAARM_BASE_PTR
)

	)

32374 
	#SDMAARM_SDMA_LOCK
 
	`SDMAARM_SDMA_LOCK_REG
(
SDMAARM_BASE_PTR
)

	)

32375 
	#SDMAARM_ONCE_ENB
 
	`SDMAARM_ONCE_ENB_REG
(
SDMAARM_BASE_PTR
)

	)

32376 
	#SDMAARM_ONCE_DATA
 
	`SDMAARM_ONCE_DATA_REG
(
SDMAARM_BASE_PTR
)

	)

32377 
	#SDMAARM_ONCE_INSTR
 
	`SDMAARM_ONCE_INSTR_REG
(
SDMAARM_BASE_PTR
)

	)

32378 
	#SDMAARM_ONCE_STAT
 
	`SDMAARM_ONCE_STAT_REG
(
SDMAARM_BASE_PTR
)

	)

32379 
	#SDMAARM_ONCE_CMD
 
	`SDMAARM_ONCE_CMD_REG
(
SDMAARM_BASE_PTR
)

	)

32380 
	#SDMAARM_ILLINSTADDR
 
	`SDMAARM_ILLINSTADDR_REG
(
SDMAARM_BASE_PTR
)

	)

32381 
	#SDMAARM_CHN0ADDR
 
	`SDMAARM_CHN0ADDR_REG
(
SDMAARM_BASE_PTR
)

	)

32382 
	#SDMAARM_EVT_MIRROR
 
	`SDMAARM_EVT_MIRROR_REG
(
SDMAARM_BASE_PTR
)

	)

32383 
	#SDMAARM_EVT_MIRROR2
 
	`SDMAARM_EVT_MIRROR2_REG
(
SDMAARM_BASE_PTR
)

	)

32384 
	#SDMAARM_XTRIG_CONF1
 
	`SDMAARM_XTRIG_CONF1_REG
(
SDMAARM_BASE_PTR
)

	)

32385 
	#SDMAARM_XTRIG_CONF2
 
	`SDMAARM_XTRIG_CONF2_REG
(
SDMAARM_BASE_PTR
)

	)

32386 
	#SDMAARM_SDMA_CHNPRI0
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,0)

	)

32387 
	#SDMAARM_SDMA_CHNPRI1
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,1)

	)

32388 
	#SDMAARM_SDMA_CHNPRI2
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,2)

	)

32389 
	#SDMAARM_SDMA_CHNPRI3
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,3)

	)

32390 
	#SDMAARM_SDMA_CHNPRI4
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,4)

	)

32391 
	#SDMAARM_SDMA_CHNPRI5
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,5)

	)

32392 
	#SDMAARM_SDMA_CHNPRI6
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,6)

	)

32393 
	#SDMAARM_SDMA_CHNPRI7
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,7)

	)

32394 
	#SDMAARM_SDMA_CHNPRI8
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,8)

	)

32395 
	#SDMAARM_SDMA_CHNPRI9
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,9)

	)

32396 
	#SDMAARM_SDMA_CHNPRI10
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,10)

	)

32397 
	#SDMAARM_SDMA_CHNPRI11
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,11)

	)

32398 
	#SDMAARM_SDMA_CHNPRI12
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,12)

	)

32399 
	#SDMAARM_SDMA_CHNPRI13
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,13)

	)

32400 
	#SDMAARM_SDMA_CHNPRI14
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,14)

	)

32401 
	#SDMAARM_SDMA_CHNPRI15
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,15)

	)

32402 
	#SDMAARM_SDMA_CHNPRI16
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,16)

	)

32403 
	#SDMAARM_SDMA_CHNPRI17
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,17)

	)

32404 
	#SDMAARM_SDMA_CHNPRI18
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,18)

	)

32405 
	#SDMAARM_SDMA_CHNPRI19
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,19)

	)

32406 
	#SDMAARM_SDMA_CHNPRI20
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,20)

	)

32407 
	#SDMAARM_SDMA_CHNPRI21
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,21)

	)

32408 
	#SDMAARM_SDMA_CHNPRI22
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,22)

	)

32409 
	#SDMAARM_SDMA_CHNPRI23
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,23)

	)

32410 
	#SDMAARM_SDMA_CHNPRI24
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,24)

	)

32411 
	#SDMAARM_SDMA_CHNPRI25
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,25)

	)

32412 
	#SDMAARM_SDMA_CHNPRI26
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,26)

	)

32413 
	#SDMAARM_SDMA_CHNPRI27
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,27)

	)

32414 
	#SDMAARM_SDMA_CHNPRI28
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,28)

	)

32415 
	#SDMAARM_SDMA_CHNPRI29
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,29)

	)

32416 
	#SDMAARM_SDMA_CHNPRI30
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,30)

	)

32417 
	#SDMAARM_SDMA_CHNPRI31
 
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,31)

	)

32418 
	#SDMAARM_CHNENBL0
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,0)

	)

32419 
	#SDMAARM_CHNENBL1
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,1)

	)

32420 
	#SDMAARM_CHNENBL2
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,2)

	)

32421 
	#SDMAARM_CHNENBL3
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,3)

	)

32422 
	#SDMAARM_CHNENBL4
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,4)

	)

32423 
	#SDMAARM_CHNENBL5
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,5)

	)

32424 
	#SDMAARM_CHNENBL6
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,6)

	)

32425 
	#SDMAARM_CHNENBL7
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,7)

	)

32426 
	#SDMAARM_CHNENBL8
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,8)

	)

32427 
	#SDMAARM_CHNENBL9
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,9)

	)

32428 
	#SDMAARM_CHNENBL10
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,10)

	)

32429 
	#SDMAARM_CHNENBL11
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,11)

	)

32430 
	#SDMAARM_CHNENBL12
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,12)

	)

32431 
	#SDMAARM_CHNENBL13
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,13)

	)

32432 
	#SDMAARM_CHNENBL14
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,14)

	)

32433 
	#SDMAARM_CHNENBL15
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,15)

	)

32434 
	#SDMAARM_CHNENBL16
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,16)

	)

32435 
	#SDMAARM_CHNENBL17
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,17)

	)

32436 
	#SDMAARM_CHNENBL18
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,18)

	)

32437 
	#SDMAARM_CHNENBL19
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,19)

	)

32438 
	#SDMAARM_CHNENBL20
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,20)

	)

32439 
	#SDMAARM_CHNENBL21
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,21)

	)

32440 
	#SDMAARM_CHNENBL22
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,22)

	)

32441 
	#SDMAARM_CHNENBL23
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,23)

	)

32442 
	#SDMAARM_CHNENBL24
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,24)

	)

32443 
	#SDMAARM_CHNENBL25
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,25)

	)

32444 
	#SDMAARM_CHNENBL26
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,26)

	)

32445 
	#SDMAARM_CHNENBL27
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,27)

	)

32446 
	#SDMAARM_CHNENBL28
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,28)

	)

32447 
	#SDMAARM_CHNENBL29
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,29)

	)

32448 
	#SDMAARM_CHNENBL30
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,30)

	)

32449 
	#SDMAARM_CHNENBL31
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,31)

	)

32450 
	#SDMAARM_CHNENBL32
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,32)

	)

32451 
	#SDMAARM_CHNENBL33
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,33)

	)

32452 
	#SDMAARM_CHNENBL34
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,34)

	)

32453 
	#SDMAARM_CHNENBL35
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,35)

	)

32454 
	#SDMAARM_CHNENBL36
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,36)

	)

32455 
	#SDMAARM_CHNENBL37
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,37)

	)

32456 
	#SDMAARM_CHNENBL38
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,38)

	)

32457 
	#SDMAARM_CHNENBL39
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,39)

	)

32458 
	#SDMAARM_CHNENBL40
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,40)

	)

32459 
	#SDMAARM_CHNENBL41
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,41)

	)

32460 
	#SDMAARM_CHNENBL42
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,42)

	)

32461 
	#SDMAARM_CHNENBL43
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,43)

	)

32462 
	#SDMAARM_CHNENBL44
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,44)

	)

32463 
	#SDMAARM_CHNENBL45
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,45)

	)

32464 
	#SDMAARM_CHNENBL46
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,46)

	)

32465 
	#SDMAARM_CHNENBL47
 
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,47)

	)

32467 
	#SDMAARM_SDMA_CHNPRI
(
ödex
Ë
	`SDMAARM_SDMA_CHNPRI_REG
(
SDMAARM_BASE_PTR
,ödex)

	)

32468 
	#SDMAARM_CHNENBL
(
ödex
Ë
	`SDMAARM_CHNENBL_REG
(
SDMAARM_BASE_PTR
,ödex)

	)

32489 
__IO
 
uöt32_t
 
	mDC0PTR
;

32490 
__IO
 
uöt32_t
 
	mINTR
;

32491 
__IO
 
uöt32_t
 
	mSTOP_STAT
;

32492 
__I
 
uöt32_t
 
	mDSTART
;

32493 
uöt8_t
 
	mRESERVED_0
[24];

32494 
__I
 
uöt32_t
 
	mEVTERR
;

32495 
__IO
 
uöt32_t
 
	mINTRMASK
;

32496 
uöt8_t
 
	mRESERVED_1
[4];

32497 
__I
 
uöt32_t
 
	mEVTERRDBG
;

32498 } 
	tSDMABP_Ty≥
, *
	tSDMABP_MemM≠På
;

32510 
	#SDMABP_DC0PTR_REG
(
ba£
Ë((ba£)->
DC0PTR
)

	)

32511 
	#SDMABP_INTR_REG
(
ba£
Ë((ba£)->
INTR
)

	)

32512 
	#SDMABP_STOP_STAT_REG
(
ba£
Ë((ba£)->
STOP_STAT
)

	)

32513 
	#SDMABP_DSTART_REG
(
ba£
Ë((ba£)->
DSTART
)

	)

32514 
	#SDMABP_EVTERR_REG
(
ba£
Ë((ba£)->
EVTERR
)

	)

32515 
	#SDMABP_INTRMASK_REG
(
ba£
Ë((ba£)->
INTRMASK
)

	)

32516 
	#SDMABP_EVTERRDBG_REG
(
ba£
Ë((ba£)->
EVTERRDBG
)

	)

32532 
	#SDMABP_DC0PTR_DC0PTR_MASK
 0xFFFFFFFFu

	)

32533 
	#SDMABP_DC0PTR_DC0PTR_SHIFT
 0

	)

32534 
	#SDMABP_DC0PTR_DC0PTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMABP_DC0PTR_DC0PTR_SHIFT
))&
SDMABP_DC0PTR_DC0PTR_MASK
)

	)

32536 
	#SDMABP_INTR_DI_MASK
 0xFFFFFFFFu

	)

32537 
	#SDMABP_INTR_DI_SHIFT
 0

	)

32538 
	#SDMABP_INTR_DI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMABP_INTR_DI_SHIFT
))&
SDMABP_INTR_DI_MASK
)

	)

32540 
	#SDMABP_STOP_STAT_DE_MASK
 0xFFFFFFFFu

	)

32541 
	#SDMABP_STOP_STAT_DE_SHIFT
 0

	)

32542 
	#SDMABP_STOP_STAT_DE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMABP_STOP_STAT_DE_SHIFT
))&
SDMABP_STOP_STAT_DE_MASK
)

	)

32544 
	#SDMABP_DSTART_DSTART_DE_MASK
 0xFFFFFFFFu

	)

32545 
	#SDMABP_DSTART_DSTART_DE_SHIFT
 0

	)

32546 
	#SDMABP_DSTART_DSTART_DE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMABP_DSTART_DSTART_DE_SHIFT
))&
SDMABP_DSTART_DSTART_DE_MASK
)

	)

32548 
	#SDMABP_EVTERR_CHNERR_MASK
 0xFFFFFFFFu

	)

32549 
	#SDMABP_EVTERR_CHNERR_SHIFT
 0

	)

32550 
	#SDMABP_EVTERR_CHNERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMABP_EVTERR_CHNERR_SHIFT
))&
SDMABP_EVTERR_CHNERR_MASK
)

	)

32552 
	#SDMABP_INTRMASK_DIMASK_MASK
 0xFFFFFFFFu

	)

32553 
	#SDMABP_INTRMASK_DIMASK_SHIFT
 0

	)

32554 
	#SDMABP_INTRMASK_DIMASK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMABP_INTRMASK_DIMASK_SHIFT
))&
SDMABP_INTRMASK_DIMASK_MASK
)

	)

32556 
	#SDMABP_EVTERRDBG_CHNERR_MASK
 0xFFFFFFFFu

	)

32557 
	#SDMABP_EVTERRDBG_CHNERR_SHIFT
 0

	)

32558 
	#SDMABP_EVTERRDBG_CHNERR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMABP_EVTERRDBG_CHNERR_SHIFT
))&
SDMABP_EVTERRDBG_CHNERR_MASK
)

	)

32566 
	#SDMABP_BASE
 (0x420EC000u)

	)

32568 
	#SDMABP
 ((
SDMABP_Ty≥
 *)
SDMABP_BASE
)

	)

32569 
	#SDMABP_BASE_PTR
 (
SDMABP
)

	)

32571 
	#SDMABP_BASE_ADDRS
 { 
SDMABP_BASE
 }

	)

32573 
	#SDMABP_BASE_PTRS
 { 
SDMABP
 }

	)

32586 
	#SDMABP_DC0PTR
 
	`SDMABP_DC0PTR_REG
(
SDMABP_BASE_PTR
)

	)

32587 
	#SDMABP_INTR
 
	`SDMABP_INTR_REG
(
SDMABP_BASE_PTR
)

	)

32588 
	#SDMABP_STOP_STAT
 
	`SDMABP_STOP_STAT_REG
(
SDMABP_BASE_PTR
)

	)

32589 
	#SDMABP_DSTART
 
	`SDMABP_DSTART_REG
(
SDMABP_BASE_PTR
)

	)

32590 
	#SDMABP_EVTERR
 
	`SDMABP_EVTERR_REG
(
SDMABP_BASE_PTR
)

	)

32591 
	#SDMABP_INTRMASK
 
	`SDMABP_INTRMASK_REG
(
SDMABP_BASE_PTR
)

	)

32592 
	#SDMABP_EVTERRDBG
 
	`SDMABP_EVTERRDBG_REG
(
SDMABP_BASE_PTR
)

	)

32614 
__I
 
uöt32_t
 
	mMC0PTR
;

32616 
uöt8_t
 
	mRESERVED_0
[2];

32617 
__I
 
uöt32_t
 
	mCCPTR
;

32618 } 
	mCCPTR
;

32620 
uöt8_t
 
	mRESERVED_0
[3];

32621 
__I
 
uöt32_t
 
	mCCR
;

32622 } 
	mCCR
;

32624 
uöt8_t
 
	mRESERVED_0
[4];

32625 
__I
 
uöt32_t
 
	mNCR
;

32626 } 
	mNCR
;

32628 
uöt8_t
 
	mRESERVED_0
[5];

32629 
__I
 
uöt32_t
 
	mEVENTS
;

32630 } 
	mEVENTS
;

32632 
uöt8_t
 
	mRESERVED_0
[6];

32633 
__I
 
uöt32_t
 
	mCCPRI
;

32634 } 
	mCCPRI
;

32636 
uöt8_t
 
	mRESERVED_0
[7];

32637 
__I
 
uöt32_t
 
	mNCPRI
;

32638 } 
	mNCPRI
;

32640 
uöt8_t
 
	mRESERVED_0
[9];

32641 
__IO
 
uöt32_t
 
	mECOUNT
;

32642 } 
	mECOUNT
;

32644 
uöt8_t
 
	mRESERVED_0
[10];

32645 
__IO
 
uöt32_t
 
	mECTL
;

32646 } 
	mECTL
;

32648 
uöt8_t
 
	mRESERVED_0
[11];

32649 
__IO
 
uöt32_t
 
	mEAA
;

32650 } 
	mEAA
;

32652 
uöt8_t
 
	mRESERVED_0
[12];

32653 
__IO
 
uöt32_t
 
	mEAB
;

32654 } 
	mEAB
;

32656 
uöt8_t
 
	mRESERVED_0
[13];

32657 
__IO
 
uöt32_t
 
	mEAM
;

32658 } 
	mEAM
;

32660 
uöt8_t
 
	mRESERVED_0
[14];

32661 
__IO
 
uöt32_t
 
	mED
;

32662 } 
	mED
;

32664 
uöt8_t
 
	mRESERVED_0
[15];

32665 
__IO
 
uöt32_t
 
	mEDM
;

32666 } 
	mEDM
;

32668 
uöt8_t
 
	mRESERVED_0
[5];

32670 
__IO
 
uöt32_t
 
	mRTB
;

32672 
uöt8_t
 
	mRESERVED_0
[1];

32673 
__I
 
uöt32_t
 
	mTB
;

32674 } 
	mTB
;

32676 
uöt8_t
 
	mRESERVED_0
[2];

32677 
__I
 
uöt32_t
 
	mOSTAT
;

32678 } 
	mOSTAT
;

32680 
uöt8_t
 
	mRESERVED_0
[4];

32681 
__I
 
uöt32_t
 
	mMCHN0ADDR
;

32682 } 
	mMCHN0ADDR
;

32684 
uöt8_t
 
	mRESERVED_0
[5];

32685 
__I
 
uöt32_t
 
	mENDIANNESS
;

32686 } 
	mENDIANNESS
;

32688 
uöt8_t
 
	mRESERVED_0
[6];

32689 
__I
 
uöt32_t
 
	mSDMA_LOCK
;

32690 } 
	mSDMA_LOCK
;

32692 
uöt8_t
 
	mRESERVED_0
[7];

32693 
__I
 
uöt32_t
 
	mEVENTS2
;

32694 } 
	mEVENTS2
;

32696 } 
	tSDMACORE_Ty≥
, *
	tSDMACORE_MemM≠På
;

32708 
	#SDMACORE_MC0PTR_REG
(
ba£
Ë((ba£)->
MC0PTR
)

	)

32709 
	#SDMACORE_CCPTR_REG
(
ba£
Ë((ba£)->
CCPTR
.CCPTR)

	)

32710 
	#SDMACORE_CCR_REG
(
ba£
Ë((ba£)->
CCR
.CCR)

	)

32711 
	#SDMACORE_NCR_REG
(
ba£
Ë((ba£)->
NCR
.NCR)

	)

32712 
	#SDMACORE_EVENTS_REG
(
ba£
Ë((ba£)->
EVENTS
.EVENTS)

	)

32713 
	#SDMACORE_CCPRI_REG
(
ba£
Ë((ba£)->
CCPRI
.CCPRI)

	)

32714 
	#SDMACORE_NCPRI_REG
(
ba£
Ë((ba£)->
NCPRI
.NCPRI)

	)

32715 
	#SDMACORE_ECOUNT_REG
(
ba£
Ë((ba£)->
ECOUNT
.ECOUNT)

	)

32716 
	#SDMACORE_ECTL_REG
(
ba£
Ë((ba£)->
ECTL
.ECTL)

	)

32717 
	#SDMACORE_EAA_REG
(
ba£
Ë((ba£)->
EAA
.EAA)

	)

32718 
	#SDMACORE_EAB_REG
(
ba£
Ë((ba£)->
EAB
.EAB)

	)

32719 
	#SDMACORE_EAM_REG
(
ba£
Ë((ba£)->
EAM
.EAM)

	)

32720 
	#SDMACORE_ED_REG
(
ba£
Ë((ba£)->
ED
.ED)

	)

32721 
	#SDMACORE_EDM_REG
(
ba£
Ë((ba£)->
EDM
.EDM)

	)

32722 
	#SDMACORE_RTB_REG
(
ba£
Ë((ba£)->
RTB
)

	)

32723 
	#SDMACORE_TB_REG
(
ba£
Ë((ba£)->
TB
.TB)

	)

32724 
	#SDMACORE_OSTAT_REG
(
ba£
Ë((ba£)->
OSTAT
.OSTAT)

	)

32725 
	#SDMACORE_MCHN0ADDR_REG
(
ba£
Ë((ba£)->
MCHN0ADDR
.MCHN0ADDR)

	)

32726 
	#SDMACORE_ENDIANNESS_REG
(
ba£
Ë((ba£)->
ENDIANNESS
.ENDIANNESS)

	)

32727 
	#SDMACORE_SDMA_LOCK_REG
(
ba£
Ë((ba£)->
SDMA_LOCK
.SDMA_LOCK)

	)

32728 
	#SDMACORE_EVENTS2_REG
(
ba£
Ë((ba£)->
EVENTS2
.EVENTS2)

	)

32744 
	#SDMACORE_MC0PTR_MC0PTR_MASK
 0xFFFFFFFFu

	)

32745 
	#SDMACORE_MC0PTR_MC0PTR_SHIFT
 0

	)

32746 
	#SDMACORE_MC0PTR_MC0PTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_MC0PTR_MC0PTR_SHIFT
))&
SDMACORE_MC0PTR_MC0PTR_MASK
)

	)

32748 
	#SDMACORE_CCPTR_CCPTR_MASK
 0xFFFFu

	)

32749 
	#SDMACORE_CCPTR_CCPTR_SHIFT
 0

	)

32750 
	#SDMACORE_CCPTR_CCPTR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_CCPTR_CCPTR_SHIFT
))&
SDMACORE_CCPTR_CCPTR_MASK
)

	)

32752 
	#SDMACORE_CCR_CCR_MASK
 0x1Fu

	)

32753 
	#SDMACORE_CCR_CCR_SHIFT
 0

	)

32754 
	#SDMACORE_CCR_CCR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_CCR_CCR_SHIFT
))&
SDMACORE_CCR_CCR_MASK
)

	)

32756 
	#SDMACORE_NCR_NCR_MASK
 0x1Fu

	)

32757 
	#SDMACORE_NCR_NCR_SHIFT
 0

	)

32758 
	#SDMACORE_NCR_NCR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_NCR_NCR_SHIFT
))&
SDMACORE_NCR_NCR_MASK
)

	)

32760 
	#SDMACORE_EVENTS_EVENTS_MASK
 0xFFFFFFFFu

	)

32761 
	#SDMACORE_EVENTS_EVENTS_SHIFT
 0

	)

32762 
	#SDMACORE_EVENTS_EVENTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_EVENTS_EVENTS_SHIFT
))&
SDMACORE_EVENTS_EVENTS_MASK
)

	)

32764 
	#SDMACORE_CCPRI_CCPRI_MASK
 0x7u

	)

32765 
	#SDMACORE_CCPRI_CCPRI_SHIFT
 0

	)

32766 
	#SDMACORE_CCPRI_CCPRI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_CCPRI_CCPRI_SHIFT
))&
SDMACORE_CCPRI_CCPRI_MASK
)

	)

32768 
	#SDMACORE_NCPRI_NCPRI_MASK
 0x7u

	)

32769 
	#SDMACORE_NCPRI_NCPRI_SHIFT
 0

	)

32770 
	#SDMACORE_NCPRI_NCPRI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_NCPRI_NCPRI_SHIFT
))&
SDMACORE_NCPRI_NCPRI_MASK
)

	)

32772 
	#SDMACORE_ECOUNT_ECOUNT_MASK
 0xFFFFu

	)

32773 
	#SDMACORE_ECOUNT_ECOUNT_SHIFT
 0

	)

32774 
	#SDMACORE_ECOUNT_ECOUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_ECOUNT_ECOUNT_SHIFT
))&
SDMACORE_ECOUNT_ECOUNT_MASK
)

	)

32776 
	#SDMACORE_ECTL_ATS_MASK
 0x3u

	)

32777 
	#SDMACORE_ECTL_ATS_SHIFT
 0

	)

32778 
	#SDMACORE_ECTL_ATS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_ECTL_ATS_SHIFT
))&
SDMACORE_ECTL_ATS_MASK
)

	)

32779 
	#SDMACORE_ECTL_AATC_MASK
 0xCu

	)

32780 
	#SDMACORE_ECTL_AATC_SHIFT
 2

	)

32781 
	#SDMACORE_ECTL_AATC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_ECTL_AATC_SHIFT
))&
SDMACORE_ECTL_AATC_MASK
)

	)

32782 
	#SDMACORE_ECTL_ABTC_MASK
 0x30u

	)

32783 
	#SDMACORE_ECTL_ABTC_SHIFT
 4

	)

32784 
	#SDMACORE_ECTL_ABTC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_ECTL_ABTC_SHIFT
))&
SDMACORE_ECTL_ABTC_MASK
)

	)

32785 
	#SDMACORE_ECTL_ATC_MASK
 0xC0u

	)

32786 
	#SDMACORE_ECTL_ATC_SHIFT
 6

	)

32787 
	#SDMACORE_ECTL_ATC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_ECTL_ATC_SHIFT
))&
SDMACORE_ECTL_ATC_MASK
)

	)

32788 
	#SDMACORE_ECTL_DTC_MASK
 0x300u

	)

32789 
	#SDMACORE_ECTL_DTC_SHIFT
 8

	)

32790 
	#SDMACORE_ECTL_DTC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_ECTL_DTC_SHIFT
))&
SDMACORE_ECTL_DTC_MASK
)

	)

32791 
	#SDMACORE_ECTL_ECTC_MASK
 0xC00u

	)

32792 
	#SDMACORE_ECTL_ECTC_SHIFT
 10

	)

32793 
	#SDMACORE_ECTL_ECTC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_ECTL_ECTC_SHIFT
))&
SDMACORE_ECTL_ECTC_MASK
)

	)

32794 
	#SDMACORE_ECTL_CNT_MASK
 0x1000u

	)

32795 
	#SDMACORE_ECTL_CNT_SHIFT
 12

	)

32796 
	#SDMACORE_ECTL_EN_MASK
 0x2000u

	)

32797 
	#SDMACORE_ECTL_EN_SHIFT
 13

	)

32799 
	#SDMACORE_EAA_EAA_MASK
 0xFFFFu

	)

32800 
	#SDMACORE_EAA_EAA_SHIFT
 0

	)

32801 
	#SDMACORE_EAA_EAA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_EAA_EAA_SHIFT
))&
SDMACORE_EAA_EAA_MASK
)

	)

32803 
	#SDMACORE_EAB_EAB_MASK
 0xFFFFu

	)

32804 
	#SDMACORE_EAB_EAB_SHIFT
 0

	)

32805 
	#SDMACORE_EAB_EAB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_EAB_EAB_SHIFT
))&
SDMACORE_EAB_EAB_MASK
)

	)

32807 
	#SDMACORE_EAM_EAM_MASK
 0xFFFFu

	)

32808 
	#SDMACORE_EAM_EAM_SHIFT
 0

	)

32809 
	#SDMACORE_EAM_EAM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_EAM_EAM_SHIFT
))&
SDMACORE_EAM_EAM_MASK
)

	)

32811 
	#SDMACORE_ED_ED_MASK
 0xFFFFFFFFu

	)

32812 
	#SDMACORE_ED_ED_SHIFT
 0

	)

32813 
	#SDMACORE_ED_ED
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_ED_ED_SHIFT
))&
SDMACORE_ED_ED_MASK
)

	)

32815 
	#SDMACORE_EDM_EDM_MASK
 0xFFFFFFFFu

	)

32816 
	#SDMACORE_EDM_EDM_SHIFT
 0

	)

32817 
	#SDMACORE_EDM_EDM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_EDM_EDM_SHIFT
))&
SDMACORE_EDM_EDM_MASK
)

	)

32819 
	#SDMACORE_RTB_RTB_MASK
 0xFFFFFFFFu

	)

32820 
	#SDMACORE_RTB_RTB_SHIFT
 0

	)

32821 
	#SDMACORE_RTB_RTB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_RTB_RTB_SHIFT
))&
SDMACORE_RTB_RTB_MASK
)

	)

32823 
	#SDMACORE_TB_CHFADDR_MASK
 0x3FFFu

	)

32824 
	#SDMACORE_TB_CHFADDR_SHIFT
 0

	)

32825 
	#SDMACORE_TB_CHFADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_TB_CHFADDR_SHIFT
))&
SDMACORE_TB_CHFADDR_MASK
)

	)

32826 
	#SDMACORE_TB_TADDR_MASK
 0xFFFC000u

	)

32827 
	#SDMACORE_TB_TADDR_SHIFT
 14

	)

32828 
	#SDMACORE_TB_TADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_TB_TADDR_SHIFT
))&
SDMACORE_TB_TADDR_MASK
)

	)

32829 
	#SDMACORE_TB_TBF_MASK
 0x10000000u

	)

32830 
	#SDMACORE_TB_TBF_SHIFT
 28

	)

32832 
	#SDMACORE_OSTAT_ECDR_MASK
 0x7u

	)

32833 
	#SDMACORE_OSTAT_ECDR_SHIFT
 0

	)

32834 
	#SDMACORE_OSTAT_ECDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_OSTAT_ECDR_SHIFT
))&
SDMACORE_OSTAT_ECDR_MASK
)

	)

32835 
	#SDMACORE_OSTAT_MST_MASK
 0x80u

	)

32836 
	#SDMACORE_OSTAT_MST_SHIFT
 7

	)

32837 
	#SDMACORE_OSTAT_SWB_MASK
 0x100u

	)

32838 
	#SDMACORE_OSTAT_SWB_SHIFT
 8

	)

32839 
	#SDMACORE_OSTAT_ODR_MASK
 0x200u

	)

32840 
	#SDMACORE_OSTAT_ODR_SHIFT
 9

	)

32841 
	#SDMACORE_OSTAT_EDR_MASK
 0x400u

	)

32842 
	#SDMACORE_OSTAT_EDR_SHIFT
 10

	)

32843 
	#SDMACORE_OSTAT_RCV_MASK
 0x800u

	)

32844 
	#SDMACORE_OSTAT_RCV_SHIFT
 11

	)

32845 
	#SDMACORE_OSTAT_PST_MASK
 0xF000u

	)

32846 
	#SDMACORE_OSTAT_PST_SHIFT
 12

	)

32847 
	#SDMACORE_OSTAT_PST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_OSTAT_PST_SHIFT
))&
SDMACORE_OSTAT_PST_MASK
)

	)

32849 
	#SDMACORE_MCHN0ADDR_CHN0ADDR_MASK
 0x3FFFu

	)

32850 
	#SDMACORE_MCHN0ADDR_CHN0ADDR_SHIFT
 0

	)

32851 
	#SDMACORE_MCHN0ADDR_CHN0ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_MCHN0ADDR_CHN0ADDR_SHIFT
))&
SDMACORE_MCHN0ADDR_CHN0ADDR_MASK
)

	)

32852 
	#SDMACORE_MCHN0ADDR_SMSZ_MASK
 0x4000u

	)

32853 
	#SDMACORE_MCHN0ADDR_SMSZ_SHIFT
 14

	)

32855 
	#SDMACORE_ENDIANNESS_APEND_MASK
 0x1u

	)

32856 
	#SDMACORE_ENDIANNESS_APEND_SHIFT
 0

	)

32858 
	#SDMACORE_SDMA_LOCK_LOCK_MASK
 0x1u

	)

32859 
	#SDMACORE_SDMA_LOCK_LOCK_SHIFT
 0

	)

32861 
	#SDMACORE_EVENTS2_EVENTS_MASK
 0xFFFFu

	)

32862 
	#SDMACORE_EVENTS2_EVENTS_SHIFT
 0

	)

32863 
	#SDMACORE_EVENTS2_EVENTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SDMACORE_EVENTS2_EVENTS_SHIFT
))&
SDMACORE_EVENTS2_EVENTS_MASK
)

	)

32871 
	#SDMACORE_BASE
 (0x420EC000u)

	)

32873 
	#SDMACORE
 ((
SDMACORE_Ty≥
 *)
SDMACORE_BASE
)

	)

32874 
	#SDMACORE_BASE_PTR
 (
SDMACORE
)

	)

32876 
	#SDMACORE_BASE_ADDRS
 { 
SDMACORE_BASE
 }

	)

32878 
	#SDMACORE_BASE_PTRS
 { 
SDMACORE
 }

	)

32891 
	#SDMACORE_MC0PTR
 
	`SDMACORE_MC0PTR_REG
(
SDMACORE_BASE_PTR
)

	)

32892 
	#SDMACORE_CCPTR
 
	`SDMACORE_CCPTR_REG
(
SDMACORE_BASE_PTR
)

	)

32893 
	#SDMACORE_CCR
 
	`SDMACORE_CCR_REG
(
SDMACORE_BASE_PTR
)

	)

32894 
	#SDMACORE_NCR
 
	`SDMACORE_NCR_REG
(
SDMACORE_BASE_PTR
)

	)

32895 
	#SDMACORE_EVENTS
 
	`SDMACORE_EVENTS_REG
(
SDMACORE_BASE_PTR
)

	)

32896 
	#SDMACORE_CCPRI
 
	`SDMACORE_CCPRI_REG
(
SDMACORE_BASE_PTR
)

	)

32897 
	#SDMACORE_NCPRI
 
	`SDMACORE_NCPRI_REG
(
SDMACORE_BASE_PTR
)

	)

32898 
	#SDMACORE_ECOUNT
 
	`SDMACORE_ECOUNT_REG
(
SDMACORE_BASE_PTR
)

	)

32899 
	#SDMACORE_ECTL
 
	`SDMACORE_ECTL_REG
(
SDMACORE_BASE_PTR
)

	)

32900 
	#SDMACORE_EAA
 
	`SDMACORE_EAA_REG
(
SDMACORE_BASE_PTR
)

	)

32901 
	#SDMACORE_EAB
 
	`SDMACORE_EAB_REG
(
SDMACORE_BASE_PTR
)

	)

32902 
	#SDMACORE_EAM
 
	`SDMACORE_EAM_REG
(
SDMACORE_BASE_PTR
)

	)

32903 
	#SDMACORE_ED
 
	`SDMACORE_ED_REG
(
SDMACORE_BASE_PTR
)

	)

32904 
	#SDMACORE_EDM
 
	`SDMACORE_EDM_REG
(
SDMACORE_BASE_PTR
)

	)

32905 
	#SDMACORE_RTB
 
	`SDMACORE_RTB_REG
(
SDMACORE_BASE_PTR
)

	)

32906 
	#SDMACORE_TB
 
	`SDMACORE_TB_REG
(
SDMACORE_BASE_PTR
)

	)

32907 
	#SDMACORE_OSTAT
 
	`SDMACORE_OSTAT_REG
(
SDMACORE_BASE_PTR
)

	)

32908 
	#SDMACORE_MCHN0ADDR
 
	`SDMACORE_MCHN0ADDR_REG
(
SDMACORE_BASE_PTR
)

	)

32909 
	#SDMACORE_ENDIANNESS
 
	`SDMACORE_ENDIANNESS_REG
(
SDMACORE_BASE_PTR
)

	)

32910 
	#SDMACORE_SDMA_LOCK
 
	`SDMACORE_SDMA_LOCK_REG
(
SDMACORE_BASE_PTR
)

	)

32911 
	#SDMACORE_EVENTS2
 
	`SDMACORE_EVENTS2_REG
(
SDMACORE_BASE_PTR
)

	)

32932 
__IO
 
uöt8_t
 
	mGATE00
;

32933 
__IO
 
uöt8_t
 
	mGATE01
;

32934 
__IO
 
uöt8_t
 
	mGATE02
;

32935 
__IO
 
uöt8_t
 
	mGATE03
;

32936 
__IO
 
uöt8_t
 
	mGATE04
;

32937 
__IO
 
uöt8_t
 
	mGATE05
;

32938 
__IO
 
uöt8_t
 
	mGATE06
;

32939 
__IO
 
uöt8_t
 
	mGATE07
;

32940 
__IO
 
uöt8_t
 
	mGATE08
;

32941 
__IO
 
uöt8_t
 
	mGATE09
;

32942 
__IO
 
uöt8_t
 
	mGATE10
;

32943 
__IO
 
uöt8_t
 
	mGATE11
;

32944 
__IO
 
uöt8_t
 
	mGATE12
;

32945 
__IO
 
uöt8_t
 
	mGATE13
;

32946 
__IO
 
uöt8_t
 
	mGATE14
;

32947 
__IO
 
uöt8_t
 
	mGATE15
;

32948 
uöt8_t
 
	mRESERVED_0
[48];

32950 
__IO
 
uöt16_t
 
	mINE
;

32951 
uöt8_t
 
	mRESERVED_0
[6];

32952 } 
	mCPnINE
[2];

32953 
uöt8_t
 
	mRESERVED_1
[48];

32955 
__I
 
uöt16_t
 
	mNTF
;

32956 
uöt8_t
 
	mRESERVED_0
[6];

32957 } 
	mCPnNTF
[2];

32958 
uöt8_t
 
	mRESERVED_2
[112];

32959 
__IO
 
uöt16_t
 
	mRSTGT
;

32960 
uöt8_t
 
	mRESERVED_3
[2];

32961 
__IO
 
uöt16_t
 
	mRSTNTF
;

32962 } 
	tSEMA4_Ty≥
, *
	tSEMA4_MemM≠På
;

32974 
	#SEMA4_GATE00_REG
(
ba£
Ë((ba£)->
GATE00
)

	)

32975 
	#SEMA4_GATE01_REG
(
ba£
Ë((ba£)->
GATE01
)

	)

32976 
	#SEMA4_GATE02_REG
(
ba£
Ë((ba£)->
GATE02
)

	)

32977 
	#SEMA4_GATE03_REG
(
ba£
Ë((ba£)->
GATE03
)

	)

32978 
	#SEMA4_GATE04_REG
(
ba£
Ë((ba£)->
GATE04
)

	)

32979 
	#SEMA4_GATE05_REG
(
ba£
Ë((ba£)->
GATE05
)

	)

32980 
	#SEMA4_GATE06_REG
(
ba£
Ë((ba£)->
GATE06
)

	)

32981 
	#SEMA4_GATE07_REG
(
ba£
Ë((ba£)->
GATE07
)

	)

32982 
	#SEMA4_GATE08_REG
(
ba£
Ë((ba£)->
GATE08
)

	)

32983 
	#SEMA4_GATE09_REG
(
ba£
Ë((ba£)->
GATE09
)

	)

32984 
	#SEMA4_GATE10_REG
(
ba£
Ë((ba£)->
GATE10
)

	)

32985 
	#SEMA4_GATE11_REG
(
ba£
Ë((ba£)->
GATE11
)

	)

32986 
	#SEMA4_GATE12_REG
(
ba£
Ë((ba£)->
GATE12
)

	)

32987 
	#SEMA4_GATE13_REG
(
ba£
Ë((ba£)->
GATE13
)

	)

32988 
	#SEMA4_GATE14_REG
(
ba£
Ë((ba£)->
GATE14
)

	)

32989 
	#SEMA4_GATE15_REG
(
ba£
Ë((ba£)->
GATE15
)

	)

32990 
	#SEMA4_CPINE_REG
(
ba£
,
ödex
Ë((ba£)->
CPnINE
[ödex].
INE
)

	)

32991 
	#SEMA4_CPNTF_REG
(
ba£
,
ödex
Ë((ba£)->
CPnNTF
[ödex].
NTF
)

	)

32992 
	#SEMA4_RSTGT_REG
(
ba£
Ë((ba£)->
RSTGT
)

	)

32993 
	#SEMA4_RSTNTF_REG
(
ba£
Ë((ba£)->
RSTNTF
)

	)

33009 
	#SEMA4_GATE00_GTFSM_MASK
 0x3u

	)

33010 
	#SEMA4_GATE00_GTFSM_SHIFT
 0

	)

33011 
	#SEMA4_GATE00_GTFSM
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
SEMA4_GATE00_GTFSM_SHIFT
))&
SEMA4_GATE00_GTFSM_MASK
)

	)

33013 
	#SEMA4_GATE01_GTFSM_MASK
 0x3u

	)

33014 
	#SEMA4_GATE01_GTFSM_SHIFT
 0

	)

33015 
	#SEMA4_GATE01_GTFSM
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
SEMA4_GATE01_GTFSM_SHIFT
))&
SEMA4_GATE01_GTFSM_MASK
)

	)

33017 
	#SEMA4_GATE02_GTFSM_MASK
 0x3u

	)

33018 
	#SEMA4_GATE02_GTFSM_SHIFT
 0

	)

33019 
	#SEMA4_GATE02_GTFSM
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
SEMA4_GATE02_GTFSM_SHIFT
))&
SEMA4_GATE02_GTFSM_MASK
)

	)

33021 
	#SEMA4_GATE03_GTFSM_MASK
 0x3u

	)

33022 
	#SEMA4_GATE03_GTFSM_SHIFT
 0

	)

33023 
	#SEMA4_GATE03_GTFSM
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
SEMA4_GATE03_GTFSM_SHIFT
))&
SEMA4_GATE03_GTFSM_MASK
)

	)

33025 
	#SEMA4_GATE04_GTFSM_MASK
 0x3u

	)

33026 
	#SEMA4_GATE04_GTFSM_SHIFT
 0

	)

33027 
	#SEMA4_GATE04_GTFSM
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
SEMA4_GATE04_GTFSM_SHIFT
))&
SEMA4_GATE04_GTFSM_MASK
)

	)

33029 
	#SEMA4_GATE05_GTFSM_MASK
 0x3u

	)

33030 
	#SEMA4_GATE05_GTFSM_SHIFT
 0

	)

33031 
	#SEMA4_GATE05_GTFSM
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
SEMA4_GATE05_GTFSM_SHIFT
))&
SEMA4_GATE05_GTFSM_MASK
)

	)

33033 
	#SEMA4_GATE06_GTFSM_MASK
 0x3u

	)

33034 
	#SEMA4_GATE06_GTFSM_SHIFT
 0

	)

33035 
	#SEMA4_GATE06_GTFSM
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
SEMA4_GATE06_GTFSM_SHIFT
))&
SEMA4_GATE06_GTFSM_MASK
)

	)

33037 
	#SEMA4_GATE07_GTFSM_MASK
 0x3u

	)

33038 
	#SEMA4_GATE07_GTFSM_SHIFT
 0

	)

33039 
	#SEMA4_GATE07_GTFSM
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
SEMA4_GATE07_GTFSM_SHIFT
))&
SEMA4_GATE07_GTFSM_MASK
)

	)

33041 
	#SEMA4_GATE08_GTFSM_MASK
 0x3u

	)

33042 
	#SEMA4_GATE08_GTFSM_SHIFT
 0

	)

33043 
	#SEMA4_GATE08_GTFSM
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
SEMA4_GATE08_GTFSM_SHIFT
))&
SEMA4_GATE08_GTFSM_MASK
)

	)

33045 
	#SEMA4_GATE09_GTFSM_MASK
 0x3u

	)

33046 
	#SEMA4_GATE09_GTFSM_SHIFT
 0

	)

33047 
	#SEMA4_GATE09_GTFSM
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
SEMA4_GATE09_GTFSM_SHIFT
))&
SEMA4_GATE09_GTFSM_MASK
)

	)

33049 
	#SEMA4_GATE10_GTFSM_MASK
 0x3u

	)

33050 
	#SEMA4_GATE10_GTFSM_SHIFT
 0

	)

33051 
	#SEMA4_GATE10_GTFSM
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
SEMA4_GATE10_GTFSM_SHIFT
))&
SEMA4_GATE10_GTFSM_MASK
)

	)

33053 
	#SEMA4_GATE11_GTFSM_MASK
 0x3u

	)

33054 
	#SEMA4_GATE11_GTFSM_SHIFT
 0

	)

33055 
	#SEMA4_GATE11_GTFSM
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
SEMA4_GATE11_GTFSM_SHIFT
))&
SEMA4_GATE11_GTFSM_MASK
)

	)

33057 
	#SEMA4_GATE12_GTFSM_MASK
 0x3u

	)

33058 
	#SEMA4_GATE12_GTFSM_SHIFT
 0

	)

33059 
	#SEMA4_GATE12_GTFSM
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
SEMA4_GATE12_GTFSM_SHIFT
))&
SEMA4_GATE12_GTFSM_MASK
)

	)

33061 
	#SEMA4_GATE13_GTFSM_MASK
 0x3u

	)

33062 
	#SEMA4_GATE13_GTFSM_SHIFT
 0

	)

33063 
	#SEMA4_GATE13_GTFSM
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
SEMA4_GATE13_GTFSM_SHIFT
))&
SEMA4_GATE13_GTFSM_MASK
)

	)

33065 
	#SEMA4_GATE14_GTFSM_MASK
 0x3u

	)

33066 
	#SEMA4_GATE14_GTFSM_SHIFT
 0

	)

33067 
	#SEMA4_GATE14_GTFSM
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
SEMA4_GATE14_GTFSM_SHIFT
))&
SEMA4_GATE14_GTFSM_MASK
)

	)

33069 
	#SEMA4_GATE15_GTFSM_MASK
 0x3u

	)

33070 
	#SEMA4_GATE15_GTFSM_SHIFT
 0

	)

33071 
	#SEMA4_GATE15_GTFSM
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
SEMA4_GATE15_GTFSM_SHIFT
))&
SEMA4_GATE15_GTFSM_MASK
)

	)

33073 
	#SEMA4_CPINE_INE7_MASK
 0x1u

	)

33074 
	#SEMA4_CPINE_INE7_SHIFT
 0

	)

33075 
	#SEMA4_CPINE_INE6_MASK
 0x2u

	)

33076 
	#SEMA4_CPINE_INE6_SHIFT
 1

	)

33077 
	#SEMA4_CPINE_INE5_MASK
 0x4u

	)

33078 
	#SEMA4_CPINE_INE5_SHIFT
 2

	)

33079 
	#SEMA4_CPINE_INE4_MASK
 0x8u

	)

33080 
	#SEMA4_CPINE_INE4_SHIFT
 3

	)

33081 
	#SEMA4_CPINE_INE3_MASK
 0x10u

	)

33082 
	#SEMA4_CPINE_INE3_SHIFT
 4

	)

33083 
	#SEMA4_CPINE_INE2_MASK
 0x20u

	)

33084 
	#SEMA4_CPINE_INE2_SHIFT
 5

	)

33085 
	#SEMA4_CPINE_INE1_MASK
 0x40u

	)

33086 
	#SEMA4_CPINE_INE1_SHIFT
 6

	)

33087 
	#SEMA4_CPINE_INE0_MASK
 0x80u

	)

33088 
	#SEMA4_CPINE_INE0_SHIFT
 7

	)

33089 
	#SEMA4_CPINE_INE15_MASK
 0x100u

	)

33090 
	#SEMA4_CPINE_INE15_SHIFT
 8

	)

33091 
	#SEMA4_CPINE_INE14_MASK
 0x200u

	)

33092 
	#SEMA4_CPINE_INE14_SHIFT
 9

	)

33093 
	#SEMA4_CPINE_INE13_MASK
 0x400u

	)

33094 
	#SEMA4_CPINE_INE13_SHIFT
 10

	)

33095 
	#SEMA4_CPINE_INE12_MASK
 0x800u

	)

33096 
	#SEMA4_CPINE_INE12_SHIFT
 11

	)

33097 
	#SEMA4_CPINE_INE11_MASK
 0x1000u

	)

33098 
	#SEMA4_CPINE_INE11_SHIFT
 12

	)

33099 
	#SEMA4_CPINE_INE10_MASK
 0x2000u

	)

33100 
	#SEMA4_CPINE_INE10_SHIFT
 13

	)

33101 
	#SEMA4_CPINE_INE9_MASK
 0x4000u

	)

33102 
	#SEMA4_CPINE_INE9_SHIFT
 14

	)

33103 
	#SEMA4_CPINE_INE8_MASK
 0x8000u

	)

33104 
	#SEMA4_CPINE_INE8_SHIFT
 15

	)

33106 
	#SEMA4_CPNTF_GN7_MASK
 0x1u

	)

33107 
	#SEMA4_CPNTF_GN7_SHIFT
 0

	)

33108 
	#SEMA4_CPNTF_GN6_MASK
 0x2u

	)

33109 
	#SEMA4_CPNTF_GN6_SHIFT
 1

	)

33110 
	#SEMA4_CPNTF_GN5_MASK
 0x4u

	)

33111 
	#SEMA4_CPNTF_GN5_SHIFT
 2

	)

33112 
	#SEMA4_CPNTF_GN4_MASK
 0x8u

	)

33113 
	#SEMA4_CPNTF_GN4_SHIFT
 3

	)

33114 
	#SEMA4_CPNTF_GN3_MASK
 0x10u

	)

33115 
	#SEMA4_CPNTF_GN3_SHIFT
 4

	)

33116 
	#SEMA4_CPNTF_GN2_MASK
 0x20u

	)

33117 
	#SEMA4_CPNTF_GN2_SHIFT
 5

	)

33118 
	#SEMA4_CPNTF_GN1_MASK
 0x40u

	)

33119 
	#SEMA4_CPNTF_GN1_SHIFT
 6

	)

33120 
	#SEMA4_CPNTF_GN0_MASK
 0x80u

	)

33121 
	#SEMA4_CPNTF_GN0_SHIFT
 7

	)

33122 
	#SEMA4_CPNTF_GN15_MASK
 0x100u

	)

33123 
	#SEMA4_CPNTF_GN15_SHIFT
 8

	)

33124 
	#SEMA4_CPNTF_GN14_MASK
 0x200u

	)

33125 
	#SEMA4_CPNTF_GN14_SHIFT
 9

	)

33126 
	#SEMA4_CPNTF_GN13_MASK
 0x400u

	)

33127 
	#SEMA4_CPNTF_GN13_SHIFT
 10

	)

33128 
	#SEMA4_CPNTF_GN12_MASK
 0x800u

	)

33129 
	#SEMA4_CPNTF_GN12_SHIFT
 11

	)

33130 
	#SEMA4_CPNTF_GN11_MASK
 0x1000u

	)

33131 
	#SEMA4_CPNTF_GN11_SHIFT
 12

	)

33132 
	#SEMA4_CPNTF_GN10_MASK
 0x2000u

	)

33133 
	#SEMA4_CPNTF_GN10_SHIFT
 13

	)

33134 
	#SEMA4_CPNTF_GN9_MASK
 0x4000u

	)

33135 
	#SEMA4_CPNTF_GN9_SHIFT
 14

	)

33136 
	#SEMA4_CPNTF_GN8_MASK
 0x8000u

	)

33137 
	#SEMA4_CPNTF_GN8_SHIFT
 15

	)

33139 
	#SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP_MASK
 0xFFu

	)

33140 
	#SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP_SHIFT
 0

	)

33141 
	#SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP_SHIFT
))&
SEMA4_RSTGT_RSTGSM_RSTGMS_RSTGDP_MASK
)

	)

33142 
	#SEMA4_RSTGT_RSTGTN_MASK
 0xFF00u

	)

33143 
	#SEMA4_RSTGT_RSTGTN_SHIFT
 8

	)

33144 
	#SEMA4_RSTGT_RSTGTN
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
SEMA4_RSTGT_RSTGTN_SHIFT
))&
SEMA4_RSTGT_RSTGTN_MASK
)

	)

33146 
	#SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP_MASK
 0xFFu

	)

33147 
	#SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP_SHIFT
 0

	)

33148 
	#SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP_SHIFT
))&
SEMA4_RSTNTF_RSTNSM_RSTNMS_RSTNDP_MASK
)

	)

33149 
	#SEMA4_RSTNTF_RSTNTN_MASK
 0xFF00u

	)

33150 
	#SEMA4_RSTNTF_RSTNTN_SHIFT
 8

	)

33151 
	#SEMA4_RSTNTF_RSTNTN
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
SEMA4_RSTNTF_RSTNTN_SHIFT
))&
SEMA4_RSTNTF_RSTNTN_MASK
)

	)

33159 
	#SEMA4_BASE
 (0x42290000u)

	)

33161 
	#SEMA4
 ((
SEMA4_Ty≥
 *)
SEMA4_BASE
)

	)

33162 
	#SEMA4_BASE_PTR
 (
SEMA4
)

	)

33164 
	#SEMA4_BASE_ADDRS
 { 
SEMA4_BASE
 }

	)

33166 
	#SEMA4_BASE_PTRS
 { 
SEMA4
 }

	)

33168 
	#SEMA4_IRQS
 { 
SEMA4_CP1_IRQn
 }

	)

33181 
	#SEMA4_GATE00
 
	`SEMA4_GATE00_REG
(
SEMA4_BASE_PTR
)

	)

33182 
	#SEMA4_GATE01
 
	`SEMA4_GATE01_REG
(
SEMA4_BASE_PTR
)

	)

33183 
	#SEMA4_GATE02
 
	`SEMA4_GATE02_REG
(
SEMA4_BASE_PTR
)

	)

33184 
	#SEMA4_GATE03
 
	`SEMA4_GATE03_REG
(
SEMA4_BASE_PTR
)

	)

33185 
	#SEMA4_GATE04
 
	`SEMA4_GATE04_REG
(
SEMA4_BASE_PTR
)

	)

33186 
	#SEMA4_GATE05
 
	`SEMA4_GATE05_REG
(
SEMA4_BASE_PTR
)

	)

33187 
	#SEMA4_GATE06
 
	`SEMA4_GATE06_REG
(
SEMA4_BASE_PTR
)

	)

33188 
	#SEMA4_GATE07
 
	`SEMA4_GATE07_REG
(
SEMA4_BASE_PTR
)

	)

33189 
	#SEMA4_GATE08
 
	`SEMA4_GATE08_REG
(
SEMA4_BASE_PTR
)

	)

33190 
	#SEMA4_GATE09
 
	`SEMA4_GATE09_REG
(
SEMA4_BASE_PTR
)

	)

33191 
	#SEMA4_GATE10
 
	`SEMA4_GATE10_REG
(
SEMA4_BASE_PTR
)

	)

33192 
	#SEMA4_GATE11
 
	`SEMA4_GATE11_REG
(
SEMA4_BASE_PTR
)

	)

33193 
	#SEMA4_GATE12
 
	`SEMA4_GATE12_REG
(
SEMA4_BASE_PTR
)

	)

33194 
	#SEMA4_GATE13
 
	`SEMA4_GATE13_REG
(
SEMA4_BASE_PTR
)

	)

33195 
	#SEMA4_GATE14
 
	`SEMA4_GATE14_REG
(
SEMA4_BASE_PTR
)

	)

33196 
	#SEMA4_GATE15
 
	`SEMA4_GATE15_REG
(
SEMA4_BASE_PTR
)

	)

33197 
	#SEMA4_CP0INE
 
	`SEMA4_CPINE_REG
(
SEMA4_BASE_PTR
,0)

	)

33198 
	#SEMA4_CP1INE
 
	`SEMA4_CPINE_REG
(
SEMA4_BASE_PTR
,1)

	)

33199 
	#SEMA4_CP0NTF
 
	`SEMA4_CPNTF_REG
(
SEMA4_BASE_PTR
,0)

	)

33200 
	#SEMA4_CP1NTF
 
	`SEMA4_CPNTF_REG
(
SEMA4_BASE_PTR
,1)

	)

33201 
	#SEMA4_RSTGT
 
	`SEMA4_RSTGT_REG
(
SEMA4_BASE_PTR
)

	)

33202 
	#SEMA4_RSTNTF
 
	`SEMA4_RSTNTF_REG
(
SEMA4_BASE_PTR
)

	)

33204 
	#SEMA4_CPINE
(
ödex
Ë
	`SEMA4_CPINE_REG
(
SEMA4_BASE_PTR
,ödex)

	)

33205 
	#SEMA4_CPNTF
(
ödex
Ë
	`SEMA4_CPNTF_REG
(
SEMA4_BASE_PTR
,ödex)

	)

33227 
__I
 
uöt32_t
 
	mGPUSR1
;

33229 
uöt8_t
 
	mRESERVED_0
[1];

33230 
__I
 
uöt32_t
 
	mGPUSR2
;

33231 } 
	mGPUSR2
;

33233 
uöt8_t
 
	mRESERVED_0
[2];

33234 
__I
 
uöt32_t
 
	mGPUSR3
;

33235 } 
	mGPUSR3
;

33237 
uöt8_t
 
	mRESERVED_0
[3];

33238 
__I
 
uöt32_t
 
	mGPSSR
;

33239 } 
	mGPSSR
;

33241 
uöt8_t
 
	mRESERVED_0
[4];

33242 
__IO
 
uöt32_t
 
	mDCR
;

33243 } 
	mDCR
;

33245 
uöt8_t
 
	mRESERVED_0
[5];

33246 
__I
 
uöt32_t
 
	mSSR
;

33247 } 
	mSSR
;

33249 
uöt8_t
 
	mRESERVED_0
[7];

33250 
__IO
 
uöt32_t
 
	mGPCCR
;

33251 } 
	mGPCCR
;

33253 } 
	tSJC_Ty≥
, *
	tSJC_MemM≠På
;

33265 
	#SJC_GPUSR1_REG
(
ba£
Ë((ba£)->
GPUSR1
)

	)

33266 
	#SJC_GPUSR2_REG
(
ba£
Ë((ba£)->
GPUSR2
.GPUSR2)

	)

33267 
	#SJC_GPUSR3_REG
(
ba£
Ë((ba£)->
GPUSR3
.GPUSR3)

	)

33268 
	#SJC_GPSSR_REG
(
ba£
Ë((ba£)->
GPSSR
.GPSSR)

	)

33269 
	#SJC_DCR_REG
(
ba£
Ë((ba£)->
DCR
.DCR)

	)

33270 
	#SJC_SSR_REG
(
ba£
Ë((ba£)->
SSR
.SSR)

	)

33271 
	#SJC_GPCCR_REG
(
ba£
Ë((ba£)->
GPCCR
.GPCCR)

	)

33287 
	#SJC_GPUSR1_A_DBG_MASK
 0x1u

	)

33288 
	#SJC_GPUSR1_A_DBG_SHIFT
 0

	)

33289 
	#SJC_GPUSR1_A_WFI_MASK
 0x2u

	)

33290 
	#SJC_GPUSR1_A_WFI_SHIFT
 1

	)

33291 
	#SJC_GPUSR1_S_STAT_MASK
 0x1Cu

	)

33292 
	#SJC_GPUSR1_S_STAT_SHIFT
 2

	)

33293 
	#SJC_GPUSR1_S_STAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SJC_GPUSR1_S_STAT_SHIFT
))&
SJC_GPUSR1_S_STAT_MASK
)

	)

33294 
	#SJC_GPUSR1_PLL_LOCK_MASK
 0x100u

	)

33295 
	#SJC_GPUSR1_PLL_LOCK_SHIFT
 8

	)

33297 
	#SJC_GPUSR2_STBYWFI_MASK
 0xFu

	)

33298 
	#SJC_GPUSR2_STBYWFI_SHIFT
 0

	)

33299 
	#SJC_GPUSR2_STBYWFI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SJC_GPUSR2_STBYWFI_SHIFT
))&
SJC_GPUSR2_STBYWFI_MASK
)

	)

33300 
	#SJC_GPUSR2_S_STAT_MASK
 0xF0u

	)

33301 
	#SJC_GPUSR2_S_STAT_SHIFT
 4

	)

33302 
	#SJC_GPUSR2_S_STAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SJC_GPUSR2_S_STAT_SHIFT
))&
SJC_GPUSR2_S_STAT_MASK
)

	)

33303 
	#SJC_GPUSR2_STBYWFE_MASK
 0xF00u

	)

33304 
	#SJC_GPUSR2_STBYWFE_SHIFT
 8

	)

33305 
	#SJC_GPUSR2_STBYWFE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SJC_GPUSR2_STBYWFE_SHIFT
))&
SJC_GPUSR2_STBYWFE_MASK
)

	)

33307 
	#SJC_GPUSR3_IPG_WAIT_MASK
 0x1u

	)

33308 
	#SJC_GPUSR3_IPG_WAIT_SHIFT
 0

	)

33309 
	#SJC_GPUSR3_IPG_STOP_MASK
 0x2u

	)

33310 
	#SJC_GPUSR3_IPG_STOP_SHIFT
 1

	)

33311 
	#SJC_GPUSR3_SYS_WAIT_MASK
 0x4u

	)

33312 
	#SJC_GPUSR3_SYS_WAIT_SHIFT
 2

	)

33314 
	#SJC_GPSSR_GPSSR_MASK
 0xFFFFFFFFu

	)

33315 
	#SJC_GPSSR_GPSSR_SHIFT
 0

	)

33316 
	#SJC_GPSSR_GPSSR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SJC_GPSSR_GPSSR_SHIFT
))&
SJC_GPSSR_GPSSR_MASK
)

	)

33318 
	#SJC_DCR_DE_TO_ARM_MASK
 0x1u

	)

33319 
	#SJC_DCR_DE_TO_ARM_SHIFT
 0

	)

33320 
	#SJC_DCR_DE_TO_SDMA_MASK
 0x2u

	)

33321 
	#SJC_DCR_DE_TO_SDMA_SHIFT
 1

	)

33322 
	#SJC_DCR_DEBUG_OBS_MASK
 0x8u

	)

33323 
	#SJC_DCR_DEBUG_OBS_SHIFT
 3

	)

33324 
	#SJC_DCR_DIRECT_SDMA_REQ_EN_MASK
 0x20u

	)

33325 
	#SJC_DCR_DIRECT_SDMA_REQ_EN_SHIFT
 5

	)

33326 
	#SJC_DCR_DIRECT_ARM_REQ_EN_MASK
 0x40u

	)

33327 
	#SJC_DCR_DIRECT_ARM_REQ_EN_SHIFT
 6

	)

33329 
	#SJC_SSR_KTF_MASK
 0x1u

	)

33330 
	#SJC_SSR_KTF_SHIFT
 0

	)

33331 
	#SJC_SSR_KTA_MASK
 0x2u

	)

33332 
	#SJC_SSR_KTA_SHIFT
 1

	)

33333 
	#SJC_SSR_SWF_MASK
 0x4u

	)

33334 
	#SJC_SSR_SWF_SHIFT
 2

	)

33335 
	#SJC_SSR_SWE_MASK
 0x8u

	)

33336 
	#SJC_SSR_SWE_SHIFT
 3

	)

33337 
	#SJC_SSR_EBF_MASK
 0x10u

	)

33338 
	#SJC_SSR_EBF_SHIFT
 4

	)

33339 
	#SJC_SSR_EBG_MASK
 0x20u

	)

33340 
	#SJC_SSR_EBG_SHIFT
 5

	)

33341 
	#SJC_SSR_FT_MASK
 0x100u

	)

33342 
	#SJC_SSR_FT_SHIFT
 8

	)

33343 
	#SJC_SSR_SJM_MASK
 0x600u

	)

33344 
	#SJC_SSR_SJM_SHIFT
 9

	)

33345 
	#SJC_SSR_SJM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SJC_SSR_SJM_SHIFT
))&
SJC_SSR_SJM_MASK
)

	)

33346 
	#SJC_SSR_RSSTAT_MASK
 0x1800u

	)

33347 
	#SJC_SSR_RSSTAT_SHIFT
 11

	)

33348 
	#SJC_SSR_RSSTAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SJC_SSR_RSSTAT_SHIFT
))&
SJC_SSR_RSSTAT_MASK
)

	)

33349 
	#SJC_SSR_BOOTIND_MASK
 0x4000u

	)

33350 
	#SJC_SSR_BOOTIND_SHIFT
 14

	)

33352 
	#SJC_GPCCR_SCLKR_MASK
 0x1u

	)

33353 
	#SJC_GPCCR_SCLKR_SHIFT
 0

	)

33354 
	#SJC_GPCCR_ACLKOFFDIS_MASK
 0x2u

	)

33355 
	#SJC_GPCCR_ACLKOFFDIS_SHIFT
 1

	)

33363 
	#SJC_BASE
 (0x40u)

	)

33365 
	#SJC
 ((
SJC_Ty≥
 *)
SJC_BASE
)

	)

33366 
	#SJC_BASE_PTR
 (
SJC
)

	)

33368 
	#SJC_BASE_ADDRS
 { 
SJC_BASE
 }

	)

33370 
	#SJC_BASE_PTRS
 { 
SJC
 }

	)

33372 
	#SJC_IRQS
 { 
SJC_IRQn
 }

	)

33385 
	#SJC_GPUSR1
 
	`SJC_GPUSR1_REG
(
SJC_BASE_PTR
)

	)

33386 
	#SJC_GPUSR2
 
	`SJC_GPUSR2_REG
(
SJC_BASE_PTR
)

	)

33387 
	#SJC_GPUSR3
 
	`SJC_GPUSR3_REG
(
SJC_BASE_PTR
)

	)

33388 
	#SJC_GPSSR
 
	`SJC_GPSSR_REG
(
SJC_BASE_PTR
)

	)

33389 
	#SJC_DCR
 
	`SJC_DCR_REG
(
SJC_BASE_PTR
)

	)

33390 
	#SJC_SSR
 
	`SJC_SSR_REG
(
SJC_BASE_PTR
)

	)

33391 
	#SJC_GPCCR
 
	`SJC_GPCCR_REG
(
SJC_BASE_PTR
)

	)

33412 
__IO
 
uöt32_t
 
	mHPLR
;

33413 
__IO
 
uöt32_t
 
	mHPCOMR
;

33414 
__IO
 
uöt32_t
 
	mHPCR
;

33415 
uöt8_t
 
	mRESERVED_0
[8];

33416 
__IO
 
uöt32_t
 
	mHPSR
;

33417 
uöt8_t
 
	mRESERVED_1
[12];

33418 
__IO
 
uöt32_t
 
	mHPRTCMR
;

33419 
__IO
 
uöt32_t
 
	mHPRTCLR
;

33420 
__IO
 
uöt32_t
 
	mHPTAMR
;

33421 
__IO
 
uöt32_t
 
	mHPTALR
;

33422 
__IO
 
uöt32_t
 
	mLPLR
;

33423 
__IO
 
uöt32_t
 
	mLPCR
;

33424 
uöt8_t
 
	mRESERVED_2
[16];

33425 
__IO
 
uöt32_t
 
	mLPSR
;

33426 
uöt8_t
 
	mRESERVED_3
[12];

33427 
__IO
 
uöt32_t
 
	mLPSMCMR
;

33428 
__IO
 
uöt32_t
 
	mLPSMCLR
;

33429 
uöt8_t
 
	mRESERVED_4
[4];

33430 
__IO
 
uöt32_t
 
	mLPGPR
;

33431 
uöt8_t
 
	mRESERVED_5
[2956];

33432 
__I
 
uöt32_t
 
	mHPVIDR1
;

33433 
__I
 
uöt32_t
 
	mHPVIDR2
;

33434 } 
	tSNVS_Ty≥
, *
	tSNVS_MemM≠På
;

33446 
	#SNVS_HPLR_REG
(
ba£
Ë((ba£)->
HPLR
)

	)

33447 
	#SNVS_HPCOMR_REG
(
ba£
Ë((ba£)->
HPCOMR
)

	)

33448 
	#SNVS_HPCR_REG
(
ba£
Ë((ba£)->
HPCR
)

	)

33449 
	#SNVS_HPSR_REG
(
ba£
Ë((ba£)->
HPSR
)

	)

33450 
	#SNVS_HPRTCMR_REG
(
ba£
Ë((ba£)->
HPRTCMR
)

	)

33451 
	#SNVS_HPRTCLR_REG
(
ba£
Ë((ba£)->
HPRTCLR
)

	)

33452 
	#SNVS_HPTAMR_REG
(
ba£
Ë((ba£)->
HPTAMR
)

	)

33453 
	#SNVS_HPTALR_REG
(
ba£
Ë((ba£)->
HPTALR
)

	)

33454 
	#SNVS_LPLR_REG
(
ba£
Ë((ba£)->
LPLR
)

	)

33455 
	#SNVS_LPCR_REG
(
ba£
Ë((ba£)->
LPCR
)

	)

33456 
	#SNVS_LPSR_REG
(
ba£
Ë((ba£)->
LPSR
)

	)

33457 
	#SNVS_LPSMCMR_REG
(
ba£
Ë((ba£)->
LPSMCMR
)

	)

33458 
	#SNVS_LPSMCLR_REG
(
ba£
Ë((ba£)->
LPSMCLR
)

	)

33459 
	#SNVS_LPGPR_REG
(
ba£
Ë((ba£)->
LPGPR
)

	)

33460 
	#SNVS_HPVIDR1_REG
(
ba£
Ë((ba£)->
HPVIDR1
)

	)

33461 
	#SNVS_HPVIDR2_REG
(
ba£
Ë((ba£)->
HPVIDR2
)

	)

33477 
	#SNVS_HPLR_MC_SL_MASK
 0x10u

	)

33478 
	#SNVS_HPLR_MC_SL_SHIFT
 4

	)

33479 
	#SNVS_HPLR_GPR_SL_MASK
 0x20u

	)

33480 
	#SNVS_HPLR_GPR_SL_SHIFT
 5

	)

33482 
	#SNVS_HPCOMR_LP_SWR_MASK
 0x10u

	)

33483 
	#SNVS_HPCOMR_LP_SWR_SHIFT
 4

	)

33484 
	#SNVS_HPCOMR_LP_SWR_DIS_MASK
 0x20u

	)

33485 
	#SNVS_HPCOMR_LP_SWR_DIS_SHIFT
 5

	)

33486 
	#SNVS_HPCOMR_NPSWA_EN_MASK
 0x80000000u

	)

33487 
	#SNVS_HPCOMR_NPSWA_EN_SHIFT
 31

	)

33489 
	#SNVS_HPCR_RTC_EN_MASK
 0x1u

	)

33490 
	#SNVS_HPCR_RTC_EN_SHIFT
 0

	)

33491 
	#SNVS_HPCR_HPTA_EN_MASK
 0x2u

	)

33492 
	#SNVS_HPCR_HPTA_EN_SHIFT
 1

	)

33493 
	#SNVS_HPCR_PI_EN_MASK
 0x8u

	)

33494 
	#SNVS_HPCR_PI_EN_SHIFT
 3

	)

33495 
	#SNVS_HPCR_PI_FREQ_MASK
 0xF0u

	)

33496 
	#SNVS_HPCR_PI_FREQ_SHIFT
 4

	)

33497 
	#SNVS_HPCR_PI_FREQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_HPCR_PI_FREQ_SHIFT
))&
SNVS_HPCR_PI_FREQ_MASK
)

	)

33498 
	#SNVS_HPCR_HPCALB_EN_MASK
 0x100u

	)

33499 
	#SNVS_HPCR_HPCALB_EN_SHIFT
 8

	)

33500 
	#SNVS_HPCR_HPCALB_VAL_MASK
 0x7C00u

	)

33501 
	#SNVS_HPCR_HPCALB_VAL_SHIFT
 10

	)

33502 
	#SNVS_HPCR_HPCALB_VAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_HPCR_HPCALB_VAL_SHIFT
))&
SNVS_HPCR_HPCALB_VAL_MASK
)

	)

33503 
	#SNVS_HPCR_BTN_CONFIG_MASK
 0x7000000u

	)

33504 
	#SNVS_HPCR_BTN_CONFIG_SHIFT
 24

	)

33505 
	#SNVS_HPCR_BTN_CONFIG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_HPCR_BTN_CONFIG_SHIFT
))&
SNVS_HPCR_BTN_CONFIG_MASK
)

	)

33506 
	#SNVS_HPCR_BTN_MASK_MASK
 0x8000000u

	)

33507 
	#SNVS_HPCR_BTN_MASK_SHIFT
 27

	)

33509 
	#SNVS_HPSR_BTN_MASK
 0x40u

	)

33510 
	#SNVS_HPSR_BTN_SHIFT
 6

	)

33511 
	#SNVS_HPSR_BI_MASK
 0x80u

	)

33512 
	#SNVS_HPSR_BI_SHIFT
 7

	)

33514 
	#SNVS_HPRTCMR_RTC_MASK
 0xFFFFFFFFu

	)

33515 
	#SNVS_HPRTCMR_RTC_SHIFT
 0

	)

33516 
	#SNVS_HPRTCMR_RTC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_HPRTCMR_RTC_SHIFT
))&
SNVS_HPRTCMR_RTC_MASK
)

	)

33518 
	#SNVS_HPRTCLR_RTC_MASK
 0xFFFFFFFFu

	)

33519 
	#SNVS_HPRTCLR_RTC_SHIFT
 0

	)

33520 
	#SNVS_HPRTCLR_RTC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_HPRTCLR_RTC_SHIFT
))&
SNVS_HPRTCLR_RTC_MASK
)

	)

33522 
	#SNVS_HPTAMR_HPTA_MASK
 0x7FFFu

	)

33523 
	#SNVS_HPTAMR_HPTA_SHIFT
 0

	)

33524 
	#SNVS_HPTAMR_HPTA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_HPTAMR_HPTA_SHIFT
))&
SNVS_HPTAMR_HPTA_MASK
)

	)

33526 
	#SNVS_HPTALR_HPTA_MASK
 0xFFFFFFFFu

	)

33527 
	#SNVS_HPTALR_HPTA_SHIFT
 0

	)

33528 
	#SNVS_HPTALR_HPTA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_HPTALR_HPTA_SHIFT
))&
SNVS_HPTALR_HPTA_MASK
)

	)

33530 
	#SNVS_LPLR_MC_HL_MASK
 0x10u

	)

33531 
	#SNVS_LPLR_MC_HL_SHIFT
 4

	)

33532 
	#SNVS_LPLR_GPR_HL_MASK
 0x20u

	)

33533 
	#SNVS_LPLR_GPR_HL_SHIFT
 5

	)

33535 
	#SNVS_LPCR_MC_ENV_MASK
 0x4u

	)

33536 
	#SNVS_LPCR_MC_ENV_SHIFT
 2

	)

33537 
	#SNVS_LPCR_DP_EN_MASK
 0x20u

	)

33538 
	#SNVS_LPCR_DP_EN_SHIFT
 5

	)

33539 
	#SNVS_LPCR_TOP_MASK
 0x40u

	)

33540 
	#SNVS_LPCR_TOP_SHIFT
 6

	)

33541 
	#SNVS_LPCR_PWR_GLITCH_EN_MASK
 0x80u

	)

33542 
	#SNVS_LPCR_PWR_GLITCH_EN_SHIFT
 7

	)

33543 
	#SNVS_LPCR_BTN_PRESS_TIME_MASK
 0x30000u

	)

33544 
	#SNVS_LPCR_BTN_PRESS_TIME_SHIFT
 16

	)

33545 
	#SNVS_LPCR_BTN_PRESS_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_LPCR_BTN_PRESS_TIME_SHIFT
))&
SNVS_LPCR_BTN_PRESS_TIME_MASK
)

	)

33546 
	#SNVS_LPCR_DEBOUNCE_MASK
 0xC0000u

	)

33547 
	#SNVS_LPCR_DEBOUNCE_SHIFT
 18

	)

33548 
	#SNVS_LPCR_DEBOUNCE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_LPCR_DEBOUNCE_SHIFT
))&
SNVS_LPCR_DEBOUNCE_MASK
)

	)

33549 
	#SNVS_LPCR_ON_TIME_MASK
 0x300000u

	)

33550 
	#SNVS_LPCR_ON_TIME_SHIFT
 20

	)

33551 
	#SNVS_LPCR_ON_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_LPCR_ON_TIME_SHIFT
))&
SNVS_LPCR_ON_TIME_MASK
)

	)

33552 
	#SNVS_LPCR_PK_EN_MASK
 0x400000u

	)

33553 
	#SNVS_LPCR_PK_EN_SHIFT
 22

	)

33554 
	#SNVS_LPCR_PK_OVERRIDE_MASK
 0x800000u

	)

33555 
	#SNVS_LPCR_PK_OVERRIDE_SHIFT
 23

	)

33557 
	#SNVS_LPSR_MCR_MASK
 0x4u

	)

33558 
	#SNVS_LPSR_MCR_SHIFT
 2

	)

33559 
	#SNVS_LPSR_EO_MASK
 0x20000u

	)

33560 
	#SNVS_LPSR_EO_SHIFT
 17

	)

33561 
	#SNVS_LPSR_SPO_MASK
 0x40000u

	)

33562 
	#SNVS_LPSR_SPO_SHIFT
 18

	)

33564 
	#SNVS_LPSMCMR_MON_COUNTER_MASK
 0xFFFFu

	)

33565 
	#SNVS_LPSMCMR_MON_COUNTER_SHIFT
 0

	)

33566 
	#SNVS_LPSMCMR_MON_COUNTER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_LPSMCMR_MON_COUNTER_SHIFT
))&
SNVS_LPSMCMR_MON_COUNTER_MASK
)

	)

33567 
	#SNVS_LPSMCMR_MC_ERA_BITS_MASK
 0xFFFF0000u

	)

33568 
	#SNVS_LPSMCMR_MC_ERA_BITS_SHIFT
 16

	)

33569 
	#SNVS_LPSMCMR_MC_ERA_BITS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_LPSMCMR_MC_ERA_BITS_SHIFT
))&
SNVS_LPSMCMR_MC_ERA_BITS_MASK
)

	)

33571 
	#SNVS_LPSMCLR_MON_COUNTER_MASK
 0xFFFFFFFFu

	)

33572 
	#SNVS_LPSMCLR_MON_COUNTER_SHIFT
 0

	)

33573 
	#SNVS_LPSMCLR_MON_COUNTER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_LPSMCLR_MON_COUNTER_SHIFT
))&
SNVS_LPSMCLR_MON_COUNTER_MASK
)

	)

33575 
	#SNVS_LPGPR_GPR_MASK
 0xFFFFFFFFu

	)

33576 
	#SNVS_LPGPR_GPR_SHIFT
 0

	)

33577 
	#SNVS_LPGPR_GPR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_LPGPR_GPR_SHIFT
))&
SNVS_LPGPR_GPR_MASK
)

	)

33579 
	#SNVS_HPVIDR1_MINOR_REV_MASK
 0xFFu

	)

33580 
	#SNVS_HPVIDR1_MINOR_REV_SHIFT
 0

	)

33581 
	#SNVS_HPVIDR1_MINOR_REV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_HPVIDR1_MINOR_REV_SHIFT
))&
SNVS_HPVIDR1_MINOR_REV_MASK
)

	)

33582 
	#SNVS_HPVIDR1_MAJOR_REV_MASK
 0xFF00u

	)

33583 
	#SNVS_HPVIDR1_MAJOR_REV_SHIFT
 8

	)

33584 
	#SNVS_HPVIDR1_MAJOR_REV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_HPVIDR1_MAJOR_REV_SHIFT
))&
SNVS_HPVIDR1_MAJOR_REV_MASK
)

	)

33585 
	#SNVS_HPVIDR1_IP_ID_MASK
 0xFFFF0000u

	)

33586 
	#SNVS_HPVIDR1_IP_ID_SHIFT
 16

	)

33587 
	#SNVS_HPVIDR1_IP_ID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_HPVIDR1_IP_ID_SHIFT
))&
SNVS_HPVIDR1_IP_ID_MASK
)

	)

33589 
	#SNVS_HPVIDR2_CONFIG_OPT_MASK
 0xFFu

	)

33590 
	#SNVS_HPVIDR2_CONFIG_OPT_SHIFT
 0

	)

33591 
	#SNVS_HPVIDR2_CONFIG_OPT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_HPVIDR2_CONFIG_OPT_SHIFT
))&
SNVS_HPVIDR2_CONFIG_OPT_MASK
)

	)

33592 
	#SNVS_HPVIDR2_ECO_REV_MASK
 0xFF00u

	)

33593 
	#SNVS_HPVIDR2_ECO_REV_SHIFT
 8

	)

33594 
	#SNVS_HPVIDR2_ECO_REV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_HPVIDR2_ECO_REV_SHIFT
))&
SNVS_HPVIDR2_ECO_REV_MASK
)

	)

33595 
	#SNVS_HPVIDR2_INTG_OPT_MASK
 0xFF0000u

	)

33596 
	#SNVS_HPVIDR2_INTG_OPT_SHIFT
 16

	)

33597 
	#SNVS_HPVIDR2_INTG_OPT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_HPVIDR2_INTG_OPT_SHIFT
))&
SNVS_HPVIDR2_INTG_OPT_MASK
)

	)

33598 
	#SNVS_HPVIDR2_IP_ERA_MASK
 0xFF000000u

	)

33599 
	#SNVS_HPVIDR2_IP_ERA_SHIFT
 24

	)

33600 
	#SNVS_HPVIDR2_IP_ERA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SNVS_HPVIDR2_IP_ERA_SHIFT
))&
SNVS_HPVIDR2_IP_ERA_MASK
)

	)

33608 
	#SNVS_BASE
 (0x420CC000u)

	)

33610 
	#SNVS
 ((
SNVS_Ty≥
 *)
SNVS_BASE
)

	)

33611 
	#SNVS_BASE_PTR
 (
SNVS
)

	)

33613 
	#SNVS_BASE_ADDRS
 { 
SNVS_BASE
 }

	)

33615 
	#SNVS_BASE_PTRS
 { 
SNVS
 }

	)

33617 
	#SNVS_IRQS
 { 
SNVS_IRQn
 }

	)

33630 
	#SNVS_HPLR
 
	`SNVS_HPLR_REG
(
SNVS_BASE_PTR
)

	)

33631 
	#SNVS_HPCOMR
 
	`SNVS_HPCOMR_REG
(
SNVS_BASE_PTR
)

	)

33632 
	#SNVS_HPCR
 
	`SNVS_HPCR_REG
(
SNVS_BASE_PTR
)

	)

33633 
	#SNVS_HPSR
 
	`SNVS_HPSR_REG
(
SNVS_BASE_PTR
)

	)

33634 
	#SNVS_HPRTCMR
 
	`SNVS_HPRTCMR_REG
(
SNVS_BASE_PTR
)

	)

33635 
	#SNVS_HPRTCLR
 
	`SNVS_HPRTCLR_REG
(
SNVS_BASE_PTR
)

	)

33636 
	#SNVS_HPTAMR
 
	`SNVS_HPTAMR_REG
(
SNVS_BASE_PTR
)

	)

33637 
	#SNVS_HPTALR
 
	`SNVS_HPTALR_REG
(
SNVS_BASE_PTR
)

	)

33638 
	#SNVS_LPLR
 
	`SNVS_LPLR_REG
(
SNVS_BASE_PTR
)

	)

33639 
	#SNVS_LPCR
 
	`SNVS_LPCR_REG
(
SNVS_BASE_PTR
)

	)

33640 
	#SNVS_LPSR
 
	`SNVS_LPSR_REG
(
SNVS_BASE_PTR
)

	)

33641 
	#SNVS_LPSMCMR
 
	`SNVS_LPSMCMR_REG
(
SNVS_BASE_PTR
)

	)

33642 
	#SNVS_LPSMCLR
 
	`SNVS_LPSMCLR_REG
(
SNVS_BASE_PTR
)

	)

33643 
	#SNVS_LPGPR
 
	`SNVS_LPGPR_REG
(
SNVS_BASE_PTR
)

	)

33644 
	#SNVS_HPVIDR1
 
	`SNVS_HPVIDR1_REG
(
SNVS_BASE_PTR
)

	)

33645 
	#SNVS_HPVIDR2
 
	`SNVS_HPVIDR2_REG
(
SNVS_BASE_PTR
)

	)

33666 
__IO
 
uöt32_t
 
	mPRR
[32];

33667 } 
	tSPBA_Ty≥
, *
	tSPBA_MemM≠På
;

33679 
	#SPBA_PRR_REG
(
ba£
,
ödex
Ë((ba£)->
PRR
[ödex])

	)

33695 
	#SPBA_PRR_RARA_MASK
 0x1u

	)

33696 
	#SPBA_PRR_RARA_SHIFT
 0

	)

33697 
	#SPBA_PRR_RARB_MASK
 0x2u

	)

33698 
	#SPBA_PRR_RARB_SHIFT
 1

	)

33699 
	#SPBA_PRR_RARC_MASK
 0x4u

	)

33700 
	#SPBA_PRR_RARC_SHIFT
 2

	)

33701 
	#SPBA_PRR_ROI_MASK
 0x30000u

	)

33702 
	#SPBA_PRR_ROI_SHIFT
 16

	)

33703 
	#SPBA_PRR_ROI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPBA_PRR_ROI_SHIFT
))&
SPBA_PRR_ROI_MASK
)

	)

33704 
	#SPBA_PRR_RMO_MASK
 0xC0000000u

	)

33705 
	#SPBA_PRR_RMO_SHIFT
 30

	)

33706 
	#SPBA_PRR_RMO
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPBA_PRR_RMO_SHIFT
))&
SPBA_PRR_RMO_MASK
)

	)

33714 
	#SPBA_BASE
 (0x40u)

	)

33716 
	#SPBA
 ((
SPBA_Ty≥
 *)
SPBA_BASE
)

	)

33717 
	#SPBA_BASE_PTR
 (
SPBA
)

	)

33719 
	#SPBA_BASE_ADDRS
 { 
SPBA_BASE
 }

	)

33721 
	#SPBA_BASE_PTRS
 { 
SPBA
 }

	)

33734 
	#SPBA_PRR0
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,0)

	)

33735 
	#SPBA_PRR1
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,1)

	)

33736 
	#SPBA_PRR2
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,2)

	)

33737 
	#SPBA_PRR3
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,3)

	)

33738 
	#SPBA_PRR4
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,4)

	)

33739 
	#SPBA_PRR5
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,5)

	)

33740 
	#SPBA_PRR6
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,6)

	)

33741 
	#SPBA_PRR7
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,7)

	)

33742 
	#SPBA_PRR8
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,8)

	)

33743 
	#SPBA_PRR9
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,9)

	)

33744 
	#SPBA_PRR10
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,10)

	)

33745 
	#SPBA_PRR11
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,11)

	)

33746 
	#SPBA_PRR12
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,12)

	)

33747 
	#SPBA_PRR13
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,13)

	)

33748 
	#SPBA_PRR14
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,14)

	)

33749 
	#SPBA_PRR15
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,15)

	)

33750 
	#SPBA_PRR16
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,16)

	)

33751 
	#SPBA_PRR17
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,17)

	)

33752 
	#SPBA_PRR18
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,18)

	)

33753 
	#SPBA_PRR19
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,19)

	)

33754 
	#SPBA_PRR20
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,20)

	)

33755 
	#SPBA_PRR21
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,21)

	)

33756 
	#SPBA_PRR22
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,22)

	)

33757 
	#SPBA_PRR23
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,23)

	)

33758 
	#SPBA_PRR24
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,24)

	)

33759 
	#SPBA_PRR25
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,25)

	)

33760 
	#SPBA_PRR26
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,26)

	)

33761 
	#SPBA_PRR27
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,27)

	)

33762 
	#SPBA_PRR28
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,28)

	)

33763 
	#SPBA_PRR29
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,29)

	)

33764 
	#SPBA_PRR30
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,30)

	)

33765 
	#SPBA_PRR31
 
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,31)

	)

33767 
	#SPBA_PRR
(
ödex
Ë
	`SPBA_PRR_REG
(
SPBA_BASE_PTR
,ödex)

	)

33788 
__IO
 
uöt32_t
 
	mSCR
;

33789 
__IO
 
uöt32_t
 
	mSRCD
;

33790 
__IO
 
uöt32_t
 
	mSRPC
;

33791 
__IO
 
uöt32_t
 
	mSIE
;

33793 
__I
 
uöt32_t
 
	mSIS
;

33794 
__O
 
uöt32_t
 
	mSIC
;

33796 
uöt8_t
 
	mRESERVED_0
[4];

33797 
__I
 
uöt32_t
 
	mSRL
;

33798 } 
	mSRL
;

33800 
uöt8_t
 
	mRESERVED_0
[8];

33801 
__I
 
uöt32_t
 
	mSRR
;

33802 } 
	mSRR
;

33804 
uöt8_t
 
	mRESERVED_0
[12];

33805 
__I
 
uöt32_t
 
	mSRCSH
;

33806 } 
	mSRCSH
;

33808 
uöt8_t
 
	mRESERVED_0
[16];

33809 
__I
 
uöt32_t
 
	mSRCSL
;

33810 } 
	mSRCSL
;

33812 
uöt8_t
 
	mRESERVED_0
[20];

33813 
__I
 
uöt32_t
 
	mSRU
;

33814 } 
	mSRU
;

33816 
uöt8_t
 
	mRESERVED_0
[24];

33817 
__I
 
uöt32_t
 
	mSRQ
;

33818 } 
	mSRQ
;

33820 
uöt8_t
 
	mRESERVED_0
[28];

33821 
__O
 
uöt32_t
 
	mSTL
;

33822 } 
	mSTL
;

33824 
uöt8_t
 
	mRESERVED_0
[32];

33825 
__O
 
uöt32_t
 
	mSTR
;

33826 } 
	mSTR
;

33828 
uöt8_t
 
	mRESERVED_0
[36];

33829 
__IO
 
uöt32_t
 
	mSTCSCH
;

33830 } 
	mSTCSCH
;

33832 
uöt8_t
 
	mRESERVED_0
[40];

33833 
__IO
 
uöt32_t
 
	mSTCSCL
;

33834 } 
	mSTCSCL
;

33836 
uöt8_t
 
	mRESERVED_0
[8];

33837 
__I
 
uöt32_t
 
	mSRFM
;

33838 
uöt8_t
 
	mRESERVED_1
[8];

33839 
__IO
 
uöt32_t
 
	mSTC
;

33840 } 
	tSPDIF_Ty≥
, *
	tSPDIF_MemM≠På
;

33852 
	#SPDIF_SCR_REG
(
ba£
Ë((ba£)->
SCR
)

	)

33853 
	#SPDIF_SRCD_REG
(
ba£
Ë((ba£)->
SRCD
)

	)

33854 
	#SPDIF_SRPC_REG
(
ba£
Ë((ba£)->
SRPC
)

	)

33855 
	#SPDIF_SIE_REG
(
ba£
Ë((ba£)->
SIE
)

	)

33856 
	#SPDIF_SIS_REG
(
ba£
Ë((ba£)->
SIS
)

	)

33857 
	#SPDIF_SIC_REG
(
ba£
Ë((ba£)->
SIC
)

	)

33858 
	#SPDIF_SRL_REG
(
ba£
Ë((ba£)->
SRL
.SRL)

	)

33859 
	#SPDIF_SRR_REG
(
ba£
Ë((ba£)->
SRR
.SRR)

	)

33860 
	#SPDIF_SRCSH_REG
(
ba£
Ë((ba£)->
SRCSH
.SRCSH)

	)

33861 
	#SPDIF_SRCSL_REG
(
ba£
Ë((ba£)->
SRCSL
.SRCSL)

	)

33862 
	#SPDIF_SRU_REG
(
ba£
Ë((ba£)->
SRU
.SRU)

	)

33863 
	#SPDIF_SRQ_REG
(
ba£
Ë((ba£)->
SRQ
.SRQ)

	)

33864 
	#SPDIF_STL_REG
(
ba£
Ë((ba£)->
STL
.STL)

	)

33865 
	#SPDIF_STR_REG
(
ba£
Ë((ba£)->
STR
.STR)

	)

33866 
	#SPDIF_STCSCH_REG
(
ba£
Ë((ba£)->
STCSCH
.STCSCH)

	)

33867 
	#SPDIF_STCSCL_REG
(
ba£
Ë((ba£)->
STCSCL
.STCSCL)

	)

33868 
	#SPDIF_SRFM_REG
(
ba£
Ë((ba£)->
SRFM
)

	)

33869 
	#SPDIF_STC_REG
(
ba£
Ë((ba£)->
STC
)

	)

33885 
	#SPDIF_SCR_USrc_Sñ_MASK
 0x3u

	)

33886 
	#SPDIF_SCR_USrc_Sñ_SHIFT
 0

	)

33887 
	#SPDIF_SCR_USrc_Sñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_SCR_USrc_Sñ_SHIFT
))&
SPDIF_SCR_USrc_Sñ_MASK
)

	)

33888 
	#SPDIF_SCR_TxSñ_MASK
 0x1Cu

	)

33889 
	#SPDIF_SCR_TxSñ_SHIFT
 2

	)

33890 
	#SPDIF_SCR_TxSñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_SCR_TxSñ_SHIFT
))&
SPDIF_SCR_TxSñ_MASK
)

	)

33891 
	#SPDIF_SCR_VÆCål_MASK
 0x20u

	)

33892 
	#SPDIF_SCR_VÆCål_SHIFT
 5

	)

33893 
	#SPDIF_SCR_DMA_TX_En_MASK
 0x100u

	)

33894 
	#SPDIF_SCR_DMA_TX_En_SHIFT
 8

	)

33895 
	#SPDIF_SCR_DMA_Rx_En_MASK
 0x200u

	)

33896 
	#SPDIF_SCR_DMA_Rx_En_SHIFT
 9

	)

33897 
	#SPDIF_SCR_TxFIFO_Cål_MASK
 0xC00u

	)

33898 
	#SPDIF_SCR_TxFIFO_Cål_SHIFT
 10

	)

33899 
	#SPDIF_SCR_TxFIFO_Cål
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_SCR_TxFIFO_Cål_SHIFT
))&
SPDIF_SCR_TxFIFO_Cål_MASK
)

	)

33900 
	#SPDIF_SCR_so·_ª£t_MASK
 0x1000u

	)

33901 
	#SPDIF_SCR_so·_ª£t_SHIFT
 12

	)

33902 
	#SPDIF_SCR_LOW_POWER_MASK
 0x2000u

	)

33903 
	#SPDIF_SCR_LOW_POWER_SHIFT
 13

	)

33904 
	#SPDIF_SCR_TxFIFOEm±y_Sñ_MASK
 0x18000u

	)

33905 
	#SPDIF_SCR_TxFIFOEm±y_Sñ_SHIFT
 15

	)

33906 
	#SPDIF_SCR_TxFIFOEm±y_Sñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_SCR_TxFIFOEm±y_Sñ_SHIFT
))&
SPDIF_SCR_TxFIFOEm±y_Sñ_MASK
)

	)

33907 
	#SPDIF_SCR_TxAutoSync_MASK
 0x20000u

	)

33908 
	#SPDIF_SCR_TxAutoSync_SHIFT
 17

	)

33909 
	#SPDIF_SCR_RxAutoSync_MASK
 0x40000u

	)

33910 
	#SPDIF_SCR_RxAutoSync_SHIFT
 18

	)

33911 
	#SPDIF_SCR_RxFIFOFuŒ_Sñ_MASK
 0x180000u

	)

33912 
	#SPDIF_SCR_RxFIFOFuŒ_Sñ_SHIFT
 19

	)

33913 
	#SPDIF_SCR_RxFIFOFuŒ_Sñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_SCR_RxFIFOFuŒ_Sñ_SHIFT
))&
SPDIF_SCR_RxFIFOFuŒ_Sñ_MASK
)

	)

33914 
	#SPDIF_SCR_RxFIFO_R°_MASK
 0x200000u

	)

33915 
	#SPDIF_SCR_RxFIFO_R°_SHIFT
 21

	)

33916 
	#SPDIF_SCR_RxFIFO_Off_On_MASK
 0x400000u

	)

33917 
	#SPDIF_SCR_RxFIFO_Off_On_SHIFT
 22

	)

33918 
	#SPDIF_SCR_RxFIFO_Cål_MASK
 0x800000u

	)

33919 
	#SPDIF_SCR_RxFIFO_Cål_SHIFT
 23

	)

33921 
	#SPDIF_SRCD_USyncMode_MASK
 0x2u

	)

33922 
	#SPDIF_SRCD_USyncMode_SHIFT
 1

	)

33924 
	#SPDIF_SRPC_GaöSñ_MASK
 0x38u

	)

33925 
	#SPDIF_SRPC_GaöSñ_SHIFT
 3

	)

33926 
	#SPDIF_SRPC_GaöSñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_SRPC_GaöSñ_SHIFT
))&
SPDIF_SRPC_GaöSñ_MASK
)

	)

33927 
	#SPDIF_SRPC_LOCK_MASK
 0x40u

	)

33928 
	#SPDIF_SRPC_LOCK_SHIFT
 6

	)

33929 
	#SPDIF_SRPC_ClkSrc_Sñ_MASK
 0x780u

	)

33930 
	#SPDIF_SRPC_ClkSrc_Sñ_SHIFT
 7

	)

33931 
	#SPDIF_SRPC_ClkSrc_Sñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_SRPC_ClkSrc_Sñ_SHIFT
))&
SPDIF_SRPC_ClkSrc_Sñ_MASK
)

	)

33933 
	#SPDIF_SIE_RxFIFOFul_MASK
 0x1u

	)

33934 
	#SPDIF_SIE_RxFIFOFul_SHIFT
 0

	)

33935 
	#SPDIF_SIE_TxEm_MASK
 0x2u

	)

33936 
	#SPDIF_SIE_TxEm_SHIFT
 1

	)

33937 
	#SPDIF_SIE_LockLoss_MASK
 0x4u

	)

33938 
	#SPDIF_SIE_LockLoss_SHIFT
 2

	)

33939 
	#SPDIF_SIE_RxFIFOResyn_MASK
 0x8u

	)

33940 
	#SPDIF_SIE_RxFIFOResyn_SHIFT
 3

	)

33941 
	#SPDIF_SIE_RxFIFOUnOv_MASK
 0x10u

	)

33942 
	#SPDIF_SIE_RxFIFOUnOv_SHIFT
 4

	)

33943 
	#SPDIF_SIE_UQEº_MASK
 0x20u

	)

33944 
	#SPDIF_SIE_UQEº_SHIFT
 5

	)

33945 
	#SPDIF_SIE_UQSync_MASK
 0x40u

	)

33946 
	#SPDIF_SIE_UQSync_SHIFT
 6

	)

33947 
	#SPDIF_SIE_QRxOv_MASK
 0x80u

	)

33948 
	#SPDIF_SIE_QRxOv_SHIFT
 7

	)

33949 
	#SPDIF_SIE_QRxFul_MASK
 0x100u

	)

33950 
	#SPDIF_SIE_QRxFul_SHIFT
 8

	)

33951 
	#SPDIF_SIE_URxOv_MASK
 0x200u

	)

33952 
	#SPDIF_SIE_URxOv_SHIFT
 9

	)

33953 
	#SPDIF_SIE_URxFul_MASK
 0x400u

	)

33954 
	#SPDIF_SIE_URxFul_SHIFT
 10

	)

33955 
	#SPDIF_SIE_BôEº_MASK
 0x4000u

	)

33956 
	#SPDIF_SIE_BôEº_SHIFT
 14

	)

33957 
	#SPDIF_SIE_SymEº_MASK
 0x8000u

	)

33958 
	#SPDIF_SIE_SymEº_SHIFT
 15

	)

33959 
	#SPDIF_SIE_VÆNoGood_MASK
 0x10000u

	)

33960 
	#SPDIF_SIE_VÆNoGood_SHIFT
 16

	)

33961 
	#SPDIF_SIE_CNew_MASK
 0x20000u

	)

33962 
	#SPDIF_SIE_CNew_SHIFT
 17

	)

33963 
	#SPDIF_SIE_TxResyn_MASK
 0x40000u

	)

33964 
	#SPDIF_SIE_TxResyn_SHIFT
 18

	)

33965 
	#SPDIF_SIE_TxUnOv_MASK
 0x80000u

	)

33966 
	#SPDIF_SIE_TxUnOv_SHIFT
 19

	)

33967 
	#SPDIF_SIE_Lock_MASK
 0x100000u

	)

33968 
	#SPDIF_SIE_Lock_SHIFT
 20

	)

33970 
	#SPDIF_SIS_RxFIFOFul_MASK
 0x1u

	)

33971 
	#SPDIF_SIS_RxFIFOFul_SHIFT
 0

	)

33972 
	#SPDIF_SIS_TxEm_MASK
 0x2u

	)

33973 
	#SPDIF_SIS_TxEm_SHIFT
 1

	)

33974 
	#SPDIF_SIS_LockLoss_MASK
 0x4u

	)

33975 
	#SPDIF_SIS_LockLoss_SHIFT
 2

	)

33976 
	#SPDIF_SIS_RxFIFOResyn_MASK
 0x8u

	)

33977 
	#SPDIF_SIS_RxFIFOResyn_SHIFT
 3

	)

33978 
	#SPDIF_SIS_RxFIFOUnOv_MASK
 0x10u

	)

33979 
	#SPDIF_SIS_RxFIFOUnOv_SHIFT
 4

	)

33980 
	#SPDIF_SIS_UQEº_MASK
 0x20u

	)

33981 
	#SPDIF_SIS_UQEº_SHIFT
 5

	)

33982 
	#SPDIF_SIS_UQSync_MASK
 0x40u

	)

33983 
	#SPDIF_SIS_UQSync_SHIFT
 6

	)

33984 
	#SPDIF_SIS_QRxOv_MASK
 0x80u

	)

33985 
	#SPDIF_SIS_QRxOv_SHIFT
 7

	)

33986 
	#SPDIF_SIS_QRxFul_MASK
 0x100u

	)

33987 
	#SPDIF_SIS_QRxFul_SHIFT
 8

	)

33988 
	#SPDIF_SIS_URxOv_MASK
 0x200u

	)

33989 
	#SPDIF_SIS_URxOv_SHIFT
 9

	)

33990 
	#SPDIF_SIS_URxFul_MASK
 0x400u

	)

33991 
	#SPDIF_SIS_URxFul_SHIFT
 10

	)

33992 
	#SPDIF_SIS_BôEº_MASK
 0x4000u

	)

33993 
	#SPDIF_SIS_BôEº_SHIFT
 14

	)

33994 
	#SPDIF_SIS_SymEº_MASK
 0x8000u

	)

33995 
	#SPDIF_SIS_SymEº_SHIFT
 15

	)

33996 
	#SPDIF_SIS_VÆNoGood_MASK
 0x10000u

	)

33997 
	#SPDIF_SIS_VÆNoGood_SHIFT
 16

	)

33998 
	#SPDIF_SIS_CNew_MASK
 0x20000u

	)

33999 
	#SPDIF_SIS_CNew_SHIFT
 17

	)

34000 
	#SPDIF_SIS_TxResyn_MASK
 0x40000u

	)

34001 
	#SPDIF_SIS_TxResyn_SHIFT
 18

	)

34002 
	#SPDIF_SIS_TxUnOv_MASK
 0x80000u

	)

34003 
	#SPDIF_SIS_TxUnOv_SHIFT
 19

	)

34004 
	#SPDIF_SIS_Lock_MASK
 0x100000u

	)

34005 
	#SPDIF_SIS_Lock_SHIFT
 20

	)

34007 
	#SPDIF_SIC_LockLoss_MASK
 0x4u

	)

34008 
	#SPDIF_SIC_LockLoss_SHIFT
 2

	)

34009 
	#SPDIF_SIC_RxFIFOResyn_MASK
 0x8u

	)

34010 
	#SPDIF_SIC_RxFIFOResyn_SHIFT
 3

	)

34011 
	#SPDIF_SIC_RxFIFOUnOv_MASK
 0x10u

	)

34012 
	#SPDIF_SIC_RxFIFOUnOv_SHIFT
 4

	)

34013 
	#SPDIF_SIC_UQEº_MASK
 0x20u

	)

34014 
	#SPDIF_SIC_UQEº_SHIFT
 5

	)

34015 
	#SPDIF_SIC_UQSync_MASK
 0x40u

	)

34016 
	#SPDIF_SIC_UQSync_SHIFT
 6

	)

34017 
	#SPDIF_SIC_QRxOv_MASK
 0x80u

	)

34018 
	#SPDIF_SIC_QRxOv_SHIFT
 7

	)

34019 
	#SPDIF_SIC_URxOv_MASK
 0x200u

	)

34020 
	#SPDIF_SIC_URxOv_SHIFT
 9

	)

34021 
	#SPDIF_SIC_BôEº_MASK
 0x4000u

	)

34022 
	#SPDIF_SIC_BôEº_SHIFT
 14

	)

34023 
	#SPDIF_SIC_SymEº_MASK
 0x8000u

	)

34024 
	#SPDIF_SIC_SymEº_SHIFT
 15

	)

34025 
	#SPDIF_SIC_VÆNoGood_MASK
 0x10000u

	)

34026 
	#SPDIF_SIC_VÆNoGood_SHIFT
 16

	)

34027 
	#SPDIF_SIC_CNew_MASK
 0x20000u

	)

34028 
	#SPDIF_SIC_CNew_SHIFT
 17

	)

34029 
	#SPDIF_SIC_TxResyn_MASK
 0x40000u

	)

34030 
	#SPDIF_SIC_TxResyn_SHIFT
 18

	)

34031 
	#SPDIF_SIC_TxUnOv_MASK
 0x80000u

	)

34032 
	#SPDIF_SIC_TxUnOv_SHIFT
 19

	)

34033 
	#SPDIF_SIC_Lock_MASK
 0x100000u

	)

34034 
	#SPDIF_SIC_Lock_SHIFT
 20

	)

34036 
	#SPDIF_SRL_RxD©aLe·_MASK
 0xFFFFFFu

	)

34037 
	#SPDIF_SRL_RxD©aLe·_SHIFT
 0

	)

34038 
	#SPDIF_SRL_RxD©aLe·
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_SRL_RxD©aLe·_SHIFT
))&
SPDIF_SRL_RxD©aLe·_MASK
)

	)

34040 
	#SPDIF_SRR_RxD©aRight_MASK
 0xFFFFFFu

	)

34041 
	#SPDIF_SRR_RxD©aRight_SHIFT
 0

	)

34042 
	#SPDIF_SRR_RxD©aRight
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_SRR_RxD©aRight_SHIFT
))&
SPDIF_SRR_RxD©aRight_MASK
)

	)

34044 
	#SPDIF_SRCSH_RxCCh™√l_h_MASK
 0xFFFFFFu

	)

34045 
	#SPDIF_SRCSH_RxCCh™√l_h_SHIFT
 0

	)

34046 
	#SPDIF_SRCSH_RxCCh™√l_h
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_SRCSH_RxCCh™√l_h_SHIFT
))&
SPDIF_SRCSH_RxCCh™√l_h_MASK
)

	)

34048 
	#SPDIF_SRCSL_RxCCh™√l_l_MASK
 0xFFFFFFu

	)

34049 
	#SPDIF_SRCSL_RxCCh™√l_l_SHIFT
 0

	)

34050 
	#SPDIF_SRCSL_RxCCh™√l_l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_SRCSL_RxCCh™√l_l_SHIFT
))&
SPDIF_SRCSL_RxCCh™√l_l_MASK
)

	)

34052 
	#SPDIF_SRU_RxUCh™√l_MASK
 0xFFFFFFu

	)

34053 
	#SPDIF_SRU_RxUCh™√l_SHIFT
 0

	)

34054 
	#SPDIF_SRU_RxUCh™√l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_SRU_RxUCh™√l_SHIFT
))&
SPDIF_SRU_RxUCh™√l_MASK
)

	)

34056 
	#SPDIF_SRQ_RxQCh™√l_MASK
 0xFFFFFFu

	)

34057 
	#SPDIF_SRQ_RxQCh™√l_SHIFT
 0

	)

34058 
	#SPDIF_SRQ_RxQCh™√l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_SRQ_RxQCh™√l_SHIFT
))&
SPDIF_SRQ_RxQCh™√l_MASK
)

	)

34060 
	#SPDIF_STL_TxD©aLe·_MASK
 0xFFFFFFu

	)

34061 
	#SPDIF_STL_TxD©aLe·_SHIFT
 0

	)

34062 
	#SPDIF_STL_TxD©aLe·
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_STL_TxD©aLe·_SHIFT
))&
SPDIF_STL_TxD©aLe·_MASK
)

	)

34064 
	#SPDIF_STR_TxD©aRight_MASK
 0xFFFFFFu

	)

34065 
	#SPDIF_STR_TxD©aRight_SHIFT
 0

	)

34066 
	#SPDIF_STR_TxD©aRight
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_STR_TxD©aRight_SHIFT
))&
SPDIF_STR_TxD©aRight_MASK
)

	)

34068 
	#SPDIF_STCSCH_TxCCh™√lC⁄s_h_MASK
 0xFFFFFFu

	)

34069 
	#SPDIF_STCSCH_TxCCh™√lC⁄s_h_SHIFT
 0

	)

34070 
	#SPDIF_STCSCH_TxCCh™√lC⁄s_h
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_STCSCH_TxCCh™√lC⁄s_h_SHIFT
))&
SPDIF_STCSCH_TxCCh™√lC⁄s_h_MASK
)

	)

34072 
	#SPDIF_STCSCL_TxCCh™√lC⁄s_l_MASK
 0xFFFFFFu

	)

34073 
	#SPDIF_STCSCL_TxCCh™√lC⁄s_l_SHIFT
 0

	)

34074 
	#SPDIF_STCSCL_TxCCh™√lC⁄s_l
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_STCSCL_TxCCh™√lC⁄s_l_SHIFT
))&
SPDIF_STCSCL_TxCCh™√lC⁄s_l_MASK
)

	)

34076 
	#SPDIF_SRFM_FªqMós_MASK
 0xFFFFFFu

	)

34077 
	#SPDIF_SRFM_FªqMós_SHIFT
 0

	)

34078 
	#SPDIF_SRFM_FªqMós
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_SRFM_FªqMós_SHIFT
))&
SPDIF_SRFM_FªqMós_MASK
)

	)

34080 
	#SPDIF_STC_TxClk_DF_MASK
 0x7Fu

	)

34081 
	#SPDIF_STC_TxClk_DF_SHIFT
 0

	)

34082 
	#SPDIF_STC_TxClk_DF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_STC_TxClk_DF_SHIFT
))&
SPDIF_STC_TxClk_DF_MASK
)

	)

34083 
	#SPDIF_STC_tx_Æl_˛k_í_MASK
 0x80u

	)

34084 
	#SPDIF_STC_tx_Æl_˛k_í_SHIFT
 7

	)

34085 
	#SPDIF_STC_TxClk_Sour˚_MASK
 0x700u

	)

34086 
	#SPDIF_STC_TxClk_Sour˚_SHIFT
 8

	)

34087 
	#SPDIF_STC_TxClk_Sour˚
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_STC_TxClk_Sour˚_SHIFT
))&
SPDIF_STC_TxClk_Sour˚_MASK
)

	)

34088 
	#SPDIF_STC_SYSCLK_DF_MASK
 0xFF800u

	)

34089 
	#SPDIF_STC_SYSCLK_DF_SHIFT
 11

	)

34090 
	#SPDIF_STC_SYSCLK_DF
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SPDIF_STC_SYSCLK_DF_SHIFT
))&
SPDIF_STC_SYSCLK_DF_MASK
)

	)

34098 
	#SPDIF_BASE
 (0x42004000u)

	)

34100 
	#SPDIF
 ((
SPDIF_Ty≥
 *)
SPDIF_BASE
)

	)

34101 
	#SPDIF_BASE_PTR
 (
SPDIF
)

	)

34103 
	#SPDIF_BASE_ADDRS
 { 
SPDIF_BASE
 }

	)

34105 
	#SPDIF_BASE_PTRS
 { 
SPDIF
 }

	)

34107 
	#SPDIF_IRQS
 { 
SPDIF_IRQn
 }

	)

34120 
	#SPDIF_SCR
 
	`SPDIF_SCR_REG
(
SPDIF_BASE_PTR
)

	)

34121 
	#SPDIF_SRCD
 
	`SPDIF_SRCD_REG
(
SPDIF_BASE_PTR
)

	)

34122 
	#SPDIF_SRPC
 
	`SPDIF_SRPC_REG
(
SPDIF_BASE_PTR
)

	)

34123 
	#SPDIF_SIE
 
	`SPDIF_SIE_REG
(
SPDIF_BASE_PTR
)

	)

34124 
	#SPDIF_SIS
 
	`SPDIF_SIS_REG
(
SPDIF_BASE_PTR
)

	)

34125 
	#SPDIF_SIC
 
	`SPDIF_SIC_REG
(
SPDIF_BASE_PTR
)

	)

34126 
	#SPDIF_SRL
 
	`SPDIF_SRL_REG
(
SPDIF_BASE_PTR
)

	)

34127 
	#SPDIF_SRR
 
	`SPDIF_SRR_REG
(
SPDIF_BASE_PTR
)

	)

34128 
	#SPDIF_SRCSH
 
	`SPDIF_SRCSH_REG
(
SPDIF_BASE_PTR
)

	)

34129 
	#SPDIF_SRCSL
 
	`SPDIF_SRCSL_REG
(
SPDIF_BASE_PTR
)

	)

34130 
	#SPDIF_SRU
 
	`SPDIF_SRU_REG
(
SPDIF_BASE_PTR
)

	)

34131 
	#SPDIF_SRQ
 
	`SPDIF_SRQ_REG
(
SPDIF_BASE_PTR
)

	)

34132 
	#SPDIF_STL
 
	`SPDIF_STL_REG
(
SPDIF_BASE_PTR
)

	)

34133 
	#SPDIF_STR
 
	`SPDIF_STR_REG
(
SPDIF_BASE_PTR
)

	)

34134 
	#SPDIF_STCSCH
 
	`SPDIF_STCSCH_REG
(
SPDIF_BASE_PTR
)

	)

34135 
	#SPDIF_STCSCL
 
	`SPDIF_STCSCL_REG
(
SPDIF_BASE_PTR
)

	)

34136 
	#SPDIF_SRFM
 
	`SPDIF_SRFM_REG
(
SPDIF_BASE_PTR
)

	)

34137 
	#SPDIF_STC
 
	`SPDIF_STC_REG
(
SPDIF_BASE_PTR
)

	)

34158 
__IO
 
uöt32_t
 
	mSCR
;

34159 
__I
 
uöt32_t
 
	mSBMR1
;

34160 
__IO
 
uöt32_t
 
	mSRSR
;

34161 
uöt8_t
 
	mRESERVED_0
[8];

34162 
__I
 
uöt32_t
 
	mSISR
;

34163 
__IO
 
uöt32_t
 
	mSIMR
;

34164 
__I
 
uöt32_t
 
	mSBMR2
;

34165 
__IO
 
uöt32_t
 
	mGPR1
;

34166 
__IO
 
uöt32_t
 
	mGPR2
;

34167 
__IO
 
uöt32_t
 
	mGPR3
;

34168 
__IO
 
uöt32_t
 
	mGPR4
;

34169 
__IO
 
uöt32_t
 
	mGPR5
;

34170 
__IO
 
uöt32_t
 
	mGPR6
;

34171 
__IO
 
uöt32_t
 
	mGPR7
;

34172 
__IO
 
uöt32_t
 
	mGPR8
;

34173 
__IO
 
uöt32_t
 
	mGPR9
;

34174 
__IO
 
uöt32_t
 
	mGPR10
;

34175 } 
	tSRC_Ty≥
, *
	tSRC_MemM≠På
;

34187 
	#SRC_SCR_REG
(
ba£
Ë((ba£)->
SCR
)

	)

34188 
	#SRC_SBMR1_REG
(
ba£
Ë((ba£)->
SBMR1
)

	)

34189 
	#SRC_SRSR_REG
(
ba£
Ë((ba£)->
SRSR
)

	)

34190 
	#SRC_SISR_REG
(
ba£
Ë((ba£)->
SISR
)

	)

34191 
	#SRC_SIMR_REG
(
ba£
Ë((ba£)->
SIMR
)

	)

34192 
	#SRC_SBMR2_REG
(
ba£
Ë((ba£)->
SBMR2
)

	)

34193 
	#SRC_GPR1_REG
(
ba£
Ë((ba£)->
GPR1
)

	)

34194 
	#SRC_GPR2_REG
(
ba£
Ë((ba£)->
GPR2
)

	)

34195 
	#SRC_GPR3_REG
(
ba£
Ë((ba£)->
GPR3
)

	)

34196 
	#SRC_GPR4_REG
(
ba£
Ë((ba£)->
GPR4
)

	)

34197 
	#SRC_GPR5_REG
(
ba£
Ë((ba£)->
GPR5
)

	)

34198 
	#SRC_GPR6_REG
(
ba£
Ë((ba£)->
GPR6
)

	)

34199 
	#SRC_GPR7_REG
(
ba£
Ë((ba£)->
GPR7
)

	)

34200 
	#SRC_GPR8_REG
(
ba£
Ë((ba£)->
GPR8
)

	)

34201 
	#SRC_GPR9_REG
(
ba£
Ë((ba£)->
GPR9
)

	)

34202 
	#SRC_GPR10_REG
(
ba£
Ë((ba£)->
GPR10
)

	)

34218 
	#SRC_SCR_w¨m_ª£t_íabÀ_MASK
 0x1u

	)

34219 
	#SRC_SCR_w¨m_ª£t_íabÀ_SHIFT
 0

	)

34220 
	#SRC_SCR_sw_gpu_r°_MASK
 0x2u

	)

34221 
	#SRC_SCR_sw_gpu_r°_SHIFT
 1

	)

34222 
	#SRC_SCR_m4c_r°_MASK
 0x8u

	)

34223 
	#SRC_SCR_m4c_r°_SHIFT
 3

	)

34224 
	#SRC_SCR_m4c_n⁄_s˛r_r°_MASK
 0x10u

	)

34225 
	#SRC_SCR_m4c_n⁄_s˛r_r°_SHIFT
 4

	)

34226 
	#SRC_SCR_w¨m_r°_by∑ss_cou¡_MASK
 0x60u

	)

34227 
	#SRC_SCR_w¨m_r°_by∑ss_cou¡_SHIFT
 5

	)

34228 
	#SRC_SCR_w¨m_r°_by∑ss_cou¡
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SRC_SCR_w¨m_r°_by∑ss_cou¡_SHIFT
))&
SRC_SCR_w¨m_r°_by∑ss_cou¡_MASK
)

	)

34229 
	#SRC_SCR_mask_wdog_r°_MASK
 0x780u

	)

34230 
	#SRC_SCR_mask_wdog_r°_SHIFT
 7

	)

34231 
	#SRC_SCR_mask_wdog_r°
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SRC_SCR_mask_wdog_r°_SHIFT
))&
SRC_SCR_mask_wdog_r°_MASK
)

	)

34232 
	#SRC_SCR_eim_r°_MASK
 0x800u

	)

34233 
	#SRC_SCR_eim_r°_SHIFT
 11

	)

34234 
	#SRC_SCR_m4p_r°_MASK
 0x1000u

	)

34235 
	#SRC_SCR_m4p_r°_SHIFT
 12

	)

34236 
	#SRC_SCR_c‹e0_r°_MASK
 0x2000u

	)

34237 
	#SRC_SCR_c‹e0_r°_SHIFT
 13

	)

34238 
	#SRC_SCR_c‹e0_dbg_r°_MASK
 0x20000u

	)

34239 
	#SRC_SCR_c‹e0_dbg_r°_SHIFT
 17

	)

34240 
	#SRC_SCR_mask_ãmp£n£_ª£t_MASK
 0x1C0000u

	)

34241 
	#SRC_SCR_mask_ãmp£n£_ª£t_SHIFT
 18

	)

34242 
	#SRC_SCR_mask_ãmp£n£_ª£t
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SRC_SCR_mask_ãmp£n£_ª£t_SHIFT
))&
SRC_SCR_mask_ãmp£n£_ª£t_MASK
)

	)

34243 
	#SRC_SCR_c‹es_dbg_r°_MASK
 0x200000u

	)

34244 
	#SRC_SCR_c‹es_dbg_r°_SHIFT
 21

	)

34245 
	#SRC_SCR_m4_íabÀ_MASK
 0x400000u

	)

34246 
	#SRC_SCR_m4_íabÀ_SHIFT
 22

	)

34247 
	#SRC_SCR_wdog3_r°_›ä_m4_MASK
 0x800000u

	)

34248 
	#SRC_SCR_wdog3_r°_›ä_m4_SHIFT
 23

	)

34249 
	#SRC_SCR_wdog3_r°_›ä_MASK
 0x1000000u

	)

34250 
	#SRC_SCR_wdog3_r°_›ä_SHIFT
 24

	)

34251 
	#SRC_SCR_dbg_r°_msk_pg_MASK
 0x2000000u

	)

34252 
	#SRC_SCR_dbg_r°_msk_pg_SHIFT
 25

	)

34253 
	#SRC_SCR_mix_r°_°rch_MASK
 0xC000000u

	)

34254 
	#SRC_SCR_mix_r°_°rch_SHIFT
 26

	)

34255 
	#SRC_SCR_mix_r°_°rch
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SRC_SCR_mix_r°_°rch_SHIFT
))&
SRC_SCR_mix_r°_°rch_MASK
)

	)

34256 
	#SRC_SCR_mask_wdog3_r°_MASK
 0xF0000000u

	)

34257 
	#SRC_SCR_mask_wdog3_r°_SHIFT
 28

	)

34258 
	#SRC_SCR_mask_wdog3_r°
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SRC_SCR_mask_wdog3_r°_SHIFT
))&
SRC_SCR_mask_wdog3_r°_MASK
)

	)

34260 
	#SRC_SBMR1_BOOT_CFG1_MASK
 0xFFu

	)

34261 
	#SRC_SBMR1_BOOT_CFG1_SHIFT
 0

	)

34262 
	#SRC_SBMR1_BOOT_CFG1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SRC_SBMR1_BOOT_CFG1_SHIFT
))&
SRC_SBMR1_BOOT_CFG1_MASK
)

	)

34263 
	#SRC_SBMR1_BOOT_CFG2_MASK
 0xFF00u

	)

34264 
	#SRC_SBMR1_BOOT_CFG2_SHIFT
 8

	)

34265 
	#SRC_SBMR1_BOOT_CFG2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SRC_SBMR1_BOOT_CFG2_SHIFT
))&
SRC_SBMR1_BOOT_CFG2_MASK
)

	)

34266 
	#SRC_SBMR1_BOOT_CFG3_MASK
 0xFF0000u

	)

34267 
	#SRC_SBMR1_BOOT_CFG3_SHIFT
 16

	)

34268 
	#SRC_SBMR1_BOOT_CFG3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SRC_SBMR1_BOOT_CFG3_SHIFT
))&
SRC_SBMR1_BOOT_CFG3_MASK
)

	)

34269 
	#SRC_SBMR1_BOOT_CFG4_MASK
 0xFF000000u

	)

34270 
	#SRC_SBMR1_BOOT_CFG4_SHIFT
 24

	)

34271 
	#SRC_SBMR1_BOOT_CFG4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SRC_SBMR1_BOOT_CFG4_SHIFT
))&
SRC_SBMR1_BOOT_CFG4_MASK
)

	)

34273 
	#SRC_SRSR_ùp_ª£t_b_MASK
 0x1u

	)

34274 
	#SRC_SRSR_ùp_ª£t_b_SHIFT
 0

	)

34275 
	#SRC_SRSR_csu_ª£t_b_MASK
 0x4u

	)

34276 
	#SRC_SRSR_csu_ª£t_b_SHIFT
 2

	)

34277 
	#SRC_SRSR_ùp_u£r_ª£t_b_MASK
 0x8u

	)

34278 
	#SRC_SRSR_ùp_u£r_ª£t_b_SHIFT
 3

	)

34279 
	#SRC_SRSR_wdog_r°_b_MASK
 0x10u

	)

34280 
	#SRC_SRSR_wdog_r°_b_SHIFT
 4

	)

34281 
	#SRC_SRSR_jèg_r°_b_MASK
 0x20u

	)

34282 
	#SRC_SRSR_jèg_r°_b_SHIFT
 5

	)

34283 
	#SRC_SRSR_jèg_sw_r°_MASK
 0x40u

	)

34284 
	#SRC_SRSR_jèg_sw_r°_SHIFT
 6

	)

34285 
	#SRC_SRSR_wdog3_r°_b_MASK
 0x80u

	)

34286 
	#SRC_SRSR_wdog3_r°_b_SHIFT
 7

	)

34287 
	#SRC_SRSR_ãmp£n£_r°_b_MASK
 0x100u

	)

34288 
	#SRC_SRSR_ãmp£n£_r°_b_SHIFT
 8

	)

34289 
	#SRC_SRSR_w¨m_boŸ_MASK
 0x10000u

	)

34290 
	#SRC_SRSR_w¨m_boŸ_SHIFT
 16

	)

34292 
	#SRC_SISR_gpu_∑s£d_ª£t_MASK
 0x1u

	)

34293 
	#SRC_SISR_gpu_∑s£d_ª£t_SHIFT
 0

	)

34294 
	#SRC_SISR_m4c_∑s£d_ª£t_MASK
 0x4u

	)

34295 
	#SRC_SISR_m4c_∑s£d_ª£t_SHIFT
 2

	)

34296 
	#SRC_SISR_›í_vg_∑s£d_ª£t_MASK
 0x8u

	)

34297 
	#SRC_SISR_›í_vg_∑s£d_ª£t_SHIFT
 3

	)

34298 
	#SRC_SISR_m4p_∑s£d_ª£t_MASK
 0x10u

	)

34299 
	#SRC_SISR_m4p_∑s£d_ª£t_SHIFT
 4

	)

34300 
	#SRC_SISR_c‹e0_wdog_r°_ªq_MASK
 0x20u

	)

34301 
	#SRC_SISR_c‹e0_wdog_r°_ªq_SHIFT
 5

	)

34303 
	#SRC_SIMR_mask_gpu_∑s£d_ª£t_MASK
 0x1u

	)

34304 
	#SRC_SIMR_mask_gpu_∑s£d_ª£t_SHIFT
 0

	)

34305 
	#SRC_SIMR_mask_›í_vg_∑s£d_ª£t_MASK
 0x8u

	)

34306 
	#SRC_SIMR_mask_›í_vg_∑s£d_ª£t_SHIFT
 3

	)

34308 
	#SRC_SBMR2_SEC_CONFIG_MASK
 0x3u

	)

34309 
	#SRC_SBMR2_SEC_CONFIG_SHIFT
 0

	)

34310 
	#SRC_SBMR2_SEC_CONFIG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SRC_SBMR2_SEC_CONFIG_SHIFT
))&
SRC_SBMR2_SEC_CONFIG_MASK
)

	)

34311 
	#SRC_SBMR2_DIR_BT_DIS_MASK
 0x8u

	)

34312 
	#SRC_SBMR2_DIR_BT_DIS_SHIFT
 3

	)

34313 
	#SRC_SBMR2_BT_FUSE_SEL_MASK
 0x10u

	)

34314 
	#SRC_SBMR2_BT_FUSE_SEL_SHIFT
 4

	)

34315 
	#SRC_SBMR2_BMOD_MASK
 0x3000000u

	)

34316 
	#SRC_SBMR2_BMOD_SHIFT
 24

	)

34317 
	#SRC_SBMR2_BMOD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SRC_SBMR2_BMOD_SHIFT
))&
SRC_SBMR2_BMOD_MASK
)

	)

34319 
	#SRC_GPR1_PERSISTENT_ENTRY0_MASK
 0xFFFFFFFFu

	)

34320 
	#SRC_GPR1_PERSISTENT_ENTRY0_SHIFT
 0

	)

34321 
	#SRC_GPR1_PERSISTENT_ENTRY0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SRC_GPR1_PERSISTENT_ENTRY0_SHIFT
))&
SRC_GPR1_PERSISTENT_ENTRY0_MASK
)

	)

34323 
	#SRC_GPR2_PERSISTENT_ARG0_MASK
 0xFFFFFFFFu

	)

34324 
	#SRC_GPR2_PERSISTENT_ARG0_SHIFT
 0

	)

34325 
	#SRC_GPR2_PERSISTENT_ARG0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SRC_GPR2_PERSISTENT_ARG0_SHIFT
))&
SRC_GPR2_PERSISTENT_ARG0_MASK
)

	)

34327 
	#SRC_GPR3_PERSISTENT_ENTRY1_MASK
 0xFFFFFFFFu

	)

34328 
	#SRC_GPR3_PERSISTENT_ENTRY1_SHIFT
 0

	)

34329 
	#SRC_GPR3_PERSISTENT_ENTRY1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SRC_GPR3_PERSISTENT_ENTRY1_SHIFT
))&
SRC_GPR3_PERSISTENT_ENTRY1_MASK
)

	)

34331 
	#SRC_GPR4_PERSISTENT_ARG1_MASK
 0xFFFFFFFFu

	)

34332 
	#SRC_GPR4_PERSISTENT_ARG1_SHIFT
 0

	)

34333 
	#SRC_GPR4_PERSISTENT_ARG1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SRC_GPR4_PERSISTENT_ARG1_SHIFT
))&
SRC_GPR4_PERSISTENT_ARG1_MASK
)

	)

34347 
	#SRC_BASE
 (0x420D8000u)

	)

34349 
	#SRC
 ((
SRC_Ty≥
 *)
SRC_BASE
)

	)

34350 
	#SRC_BASE_PTR
 (
SRC
)

	)

34352 
	#SRC_BASE_ADDRS
 { 
SRC_BASE
 }

	)

34354 
	#SRC_BASE_PTRS
 { 
SRC
 }

	)

34356 
	#SRC_IRQS
 { 
SRC_IRQn
 }

	)

34369 
	#SRC_SCR
 
	`SRC_SCR_REG
(
SRC_BASE_PTR
)

	)

34370 
	#SRC_SBMR1
 
	`SRC_SBMR1_REG
(
SRC_BASE_PTR
)

	)

34371 
	#SRC_SRSR
 
	`SRC_SRSR_REG
(
SRC_BASE_PTR
)

	)

34372 
	#SRC_SISR
 
	`SRC_SISR_REG
(
SRC_BASE_PTR
)

	)

34373 
	#SRC_SIMR
 
	`SRC_SIMR_REG
(
SRC_BASE_PTR
)

	)

34374 
	#SRC_SBMR2
 
	`SRC_SBMR2_REG
(
SRC_BASE_PTR
)

	)

34375 
	#SRC_GPR1
 
	`SRC_GPR1_REG
(
SRC_BASE_PTR
)

	)

34376 
	#SRC_GPR2
 
	`SRC_GPR2_REG
(
SRC_BASE_PTR
)

	)

34377 
	#SRC_GPR3
 
	`SRC_GPR3_REG
(
SRC_BASE_PTR
)

	)

34378 
	#SRC_GPR4
 
	`SRC_GPR4_REG
(
SRC_BASE_PTR
)

	)

34379 
	#SRC_GPR5
 
	`SRC_GPR5_REG
(
SRC_BASE_PTR
)

	)

34380 
	#SRC_GPR6
 
	`SRC_GPR6_REG
(
SRC_BASE_PTR
)

	)

34381 
	#SRC_GPR7
 
	`SRC_GPR7_REG
(
SRC_BASE_PTR
)

	)

34382 
	#SRC_GPR8
 
	`SRC_GPR8_REG
(
SRC_BASE_PTR
)

	)

34383 
	#SRC_GPR9
 
	`SRC_GPR9_REG
(
SRC_BASE_PTR
)

	)

34384 
	#SRC_GPR10
 
	`SRC_GPR10_REG
(
SRC_BASE_PTR
)

	)

34405 
__IO
 
uöt32_t
 
	mSTX
[2];

34406 
__I
 
uöt32_t
 
	mSRX
[2];

34407 
__IO
 
uöt32_t
 
	mSCR
;

34408 
__IO
 
uöt32_t
 
	mSISR
;

34409 
__IO
 
uöt32_t
 
	mSIER
;

34410 
__IO
 
uöt32_t
 
	mSTCR
;

34411 
__IO
 
uöt32_t
 
	mSRCR
;

34412 
__IO
 
uöt32_t
 
	mSTCCR
;

34413 
__IO
 
uöt32_t
 
	mSRCCR
;

34414 
__IO
 
uöt32_t
 
	mSFCSR
;

34415 
uöt8_t
 
	mRESERVED_0
[8];

34416 
__IO
 
uöt32_t
 
	mSACNT
;

34417 
__IO
 
uöt32_t
 
	mSACADD
;

34418 
__IO
 
uöt32_t
 
	mSACDAT
;

34419 
__IO
 
uöt32_t
 
	mSATAG
;

34420 
__IO
 
uöt32_t
 
	mSTMSK
;

34421 
__IO
 
uöt32_t
 
	mSRMSK
;

34422 
__I
 
uöt32_t
 
	mSACCST
;

34423 
__O
 
uöt32_t
 
	mSACCEN
;

34424 
__O
 
uöt32_t
 
	mSACCDIS
;

34425 } 
	tSSI_Ty≥
, *
	tSSI_MemM≠På
;

34437 
	#SSI_STX_REG
(
ba£
,
ödex
Ë((ba£)->
STX
[ödex])

	)

34438 
	#SSI_SRX_REG
(
ba£
,
ödex
Ë((ba£)->
SRX
[ödex])

	)

34439 
	#SSI_SCR_REG
(
ba£
Ë((ba£)->
SCR
)

	)

34440 
	#SSI_SISR_REG
(
ba£
Ë((ba£)->
SISR
)

	)

34441 
	#SSI_SIER_REG
(
ba£
Ë((ba£)->
SIER
)

	)

34442 
	#SSI_STCR_REG
(
ba£
Ë((ba£)->
STCR
)

	)

34443 
	#SSI_SRCR_REG
(
ba£
Ë((ba£)->
SRCR
)

	)

34444 
	#SSI_STCCR_REG
(
ba£
Ë((ba£)->
STCCR
)

	)

34445 
	#SSI_SRCCR_REG
(
ba£
Ë((ba£)->
SRCCR
)

	)

34446 
	#SSI_SFCSR_REG
(
ba£
Ë((ba£)->
SFCSR
)

	)

34447 
	#SSI_SACNT_REG
(
ba£
Ë((ba£)->
SACNT
)

	)

34448 
	#SSI_SACADD_REG
(
ba£
Ë((ba£)->
SACADD
)

	)

34449 
	#SSI_SACDAT_REG
(
ba£
Ë((ba£)->
SACDAT
)

	)

34450 
	#SSI_SATAG_REG
(
ba£
Ë((ba£)->
SATAG
)

	)

34451 
	#SSI_STMSK_REG
(
ba£
Ë((ba£)->
STMSK
)

	)

34452 
	#SSI_SRMSK_REG
(
ba£
Ë((ba£)->
SRMSK
)

	)

34453 
	#SSI_SACCST_REG
(
ba£
Ë((ba£)->
SACCST
)

	)

34454 
	#SSI_SACCEN_REG
(
ba£
Ë((ba£)->
SACCEN
)

	)

34455 
	#SSI_SACCDIS_REG
(
ba£
Ë((ba£)->
SACCDIS
)

	)

34471 
	#SSI_STX_STXn_MASK
 0xFFFFFFFFu

	)

34472 
	#SSI_STX_STXn_SHIFT
 0

	)

34473 
	#SSI_STX_STXn
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_STX_STXn_SHIFT
))&
SSI_STX_STXn_MASK
)

	)

34475 
	#SSI_SRX_SRXn_MASK
 0xFFFFFFFFu

	)

34476 
	#SSI_SRX_SRXn_SHIFT
 0

	)

34477 
	#SSI_SRX_SRXn
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SRX_SRXn_SHIFT
))&
SSI_SRX_SRXn_MASK
)

	)

34479 
	#SSI_SCR_SSIEN_MASK
 0x1u

	)

34480 
	#SSI_SCR_SSIEN_SHIFT
 0

	)

34481 
	#SSI_SCR_TE_MASK
 0x2u

	)

34482 
	#SSI_SCR_TE_SHIFT
 1

	)

34483 
	#SSI_SCR_RE_MASK
 0x4u

	)

34484 
	#SSI_SCR_RE_SHIFT
 2

	)

34485 
	#SSI_SCR_NET_MASK
 0x8u

	)

34486 
	#SSI_SCR_NET_SHIFT
 3

	)

34487 
	#SSI_SCR_SYN_MASK
 0x10u

	)

34488 
	#SSI_SCR_SYN_SHIFT
 4

	)

34489 
	#SSI_SCR_I2S_MODE_MASK
 0x60u

	)

34490 
	#SSI_SCR_I2S_MODE_SHIFT
 5

	)

34491 
	#SSI_SCR_I2S_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SCR_I2S_MODE_SHIFT
))&
SSI_SCR_I2S_MODE_MASK
)

	)

34492 
	#SSI_SCR_SYS_CLK_EN_MASK
 0x80u

	)

34493 
	#SSI_SCR_SYS_CLK_EN_SHIFT
 7

	)

34494 
	#SSI_SCR_TCH_EN_MASK
 0x100u

	)

34495 
	#SSI_SCR_TCH_EN_SHIFT
 8

	)

34496 
	#SSI_SCR_CLK_IST_MASK
 0x200u

	)

34497 
	#SSI_SCR_CLK_IST_SHIFT
 9

	)

34498 
	#SSI_SCR_TFR_CLK_DIS_MASK
 0x400u

	)

34499 
	#SSI_SCR_TFR_CLK_DIS_SHIFT
 10

	)

34500 
	#SSI_SCR_RFR_CLK_DIS_MASK
 0x800u

	)

34501 
	#SSI_SCR_RFR_CLK_DIS_SHIFT
 11

	)

34502 
	#SSI_SCR_SYNC_TX_FS_MASK
 0x1000u

	)

34503 
	#SSI_SCR_SYNC_TX_FS_SHIFT
 12

	)

34505 
	#SSI_SISR_TFE0_MASK
 0x1u

	)

34506 
	#SSI_SISR_TFE0_SHIFT
 0

	)

34507 
	#SSI_SISR_TFE1_MASK
 0x2u

	)

34508 
	#SSI_SISR_TFE1_SHIFT
 1

	)

34509 
	#SSI_SISR_RFF0_MASK
 0x4u

	)

34510 
	#SSI_SISR_RFF0_SHIFT
 2

	)

34511 
	#SSI_SISR_RFF1_MASK
 0x8u

	)

34512 
	#SSI_SISR_RFF1_SHIFT
 3

	)

34513 
	#SSI_SISR_RLS_MASK
 0x10u

	)

34514 
	#SSI_SISR_RLS_SHIFT
 4

	)

34515 
	#SSI_SISR_TLS_MASK
 0x20u

	)

34516 
	#SSI_SISR_TLS_SHIFT
 5

	)

34517 
	#SSI_SISR_RFS_MASK
 0x40u

	)

34518 
	#SSI_SISR_RFS_SHIFT
 6

	)

34519 
	#SSI_SISR_TFS_MASK
 0x80u

	)

34520 
	#SSI_SISR_TFS_SHIFT
 7

	)

34521 
	#SSI_SISR_TUE0_MASK
 0x100u

	)

34522 
	#SSI_SISR_TUE0_SHIFT
 8

	)

34523 
	#SSI_SISR_TUE1_MASK
 0x200u

	)

34524 
	#SSI_SISR_TUE1_SHIFT
 9

	)

34525 
	#SSI_SISR_ROE0_MASK
 0x400u

	)

34526 
	#SSI_SISR_ROE0_SHIFT
 10

	)

34527 
	#SSI_SISR_ROE1_MASK
 0x800u

	)

34528 
	#SSI_SISR_ROE1_SHIFT
 11

	)

34529 
	#SSI_SISR_TDE0_MASK
 0x1000u

	)

34530 
	#SSI_SISR_TDE0_SHIFT
 12

	)

34531 
	#SSI_SISR_TDE1_MASK
 0x2000u

	)

34532 
	#SSI_SISR_TDE1_SHIFT
 13

	)

34533 
	#SSI_SISR_RDR0_MASK
 0x4000u

	)

34534 
	#SSI_SISR_RDR0_SHIFT
 14

	)

34535 
	#SSI_SISR_RDR1_MASK
 0x8000u

	)

34536 
	#SSI_SISR_RDR1_SHIFT
 15

	)

34537 
	#SSI_SISR_RXT_MASK
 0x10000u

	)

34538 
	#SSI_SISR_RXT_SHIFT
 16

	)

34539 
	#SSI_SISR_CMDDU_MASK
 0x20000u

	)

34540 
	#SSI_SISR_CMDDU_SHIFT
 17

	)

34541 
	#SSI_SISR_CMDAU_MASK
 0x40000u

	)

34542 
	#SSI_SISR_CMDAU_SHIFT
 18

	)

34543 
	#SSI_SISR_TFRC_MASK
 0x800000u

	)

34544 
	#SSI_SISR_TFRC_SHIFT
 23

	)

34545 
	#SSI_SISR_RFRC_MASK
 0x1000000u

	)

34546 
	#SSI_SISR_RFRC_SHIFT
 24

	)

34548 
	#SSI_SIER_TFE0IE_MASK
 0x1u

	)

34549 
	#SSI_SIER_TFE0IE_SHIFT
 0

	)

34550 
	#SSI_SIER_TFE1IE_MASK
 0x2u

	)

34551 
	#SSI_SIER_TFE1IE_SHIFT
 1

	)

34552 
	#SSI_SIER_RFF0IE_MASK
 0x4u

	)

34553 
	#SSI_SIER_RFF0IE_SHIFT
 2

	)

34554 
	#SSI_SIER_RFF1IE_MASK
 0x8u

	)

34555 
	#SSI_SIER_RFF1IE_SHIFT
 3

	)

34556 
	#SSI_SIER_RLSIE_MASK
 0x10u

	)

34557 
	#SSI_SIER_RLSIE_SHIFT
 4

	)

34558 
	#SSI_SIER_TLSIE_MASK
 0x20u

	)

34559 
	#SSI_SIER_TLSIE_SHIFT
 5

	)

34560 
	#SSI_SIER_RFSIE_MASK
 0x40u

	)

34561 
	#SSI_SIER_RFSIE_SHIFT
 6

	)

34562 
	#SSI_SIER_TFSIE_MASK
 0x80u

	)

34563 
	#SSI_SIER_TFSIE_SHIFT
 7

	)

34564 
	#SSI_SIER_TUE0IE_MASK
 0x100u

	)

34565 
	#SSI_SIER_TUE0IE_SHIFT
 8

	)

34566 
	#SSI_SIER_TUE1IE_MASK
 0x200u

	)

34567 
	#SSI_SIER_TUE1IE_SHIFT
 9

	)

34568 
	#SSI_SIER_ROE0IE_MASK
 0x400u

	)

34569 
	#SSI_SIER_ROE0IE_SHIFT
 10

	)

34570 
	#SSI_SIER_ROE1IE_MASK
 0x800u

	)

34571 
	#SSI_SIER_ROE1IE_SHIFT
 11

	)

34572 
	#SSI_SIER_TDE0IE_MASK
 0x1000u

	)

34573 
	#SSI_SIER_TDE0IE_SHIFT
 12

	)

34574 
	#SSI_SIER_TDE1IE_MASK
 0x2000u

	)

34575 
	#SSI_SIER_TDE1IE_SHIFT
 13

	)

34576 
	#SSI_SIER_RDR0IE_MASK
 0x4000u

	)

34577 
	#SSI_SIER_RDR0IE_SHIFT
 14

	)

34578 
	#SSI_SIER_RDR1IE_MASK
 0x8000u

	)

34579 
	#SSI_SIER_RDR1IE_SHIFT
 15

	)

34580 
	#SSI_SIER_RXTIE_MASK
 0x10000u

	)

34581 
	#SSI_SIER_RXTIE_SHIFT
 16

	)

34582 
	#SSI_SIER_CMDDUIE_MASK
 0x20000u

	)

34583 
	#SSI_SIER_CMDDUIE_SHIFT
 17

	)

34584 
	#SSI_SIER_CMDAUIE_MASK
 0x40000u

	)

34585 
	#SSI_SIER_CMDAUIE_SHIFT
 18

	)

34586 
	#SSI_SIER_TIE_MASK
 0x80000u

	)

34587 
	#SSI_SIER_TIE_SHIFT
 19

	)

34588 
	#SSI_SIER_TDMAE_MASK
 0x100000u

	)

34589 
	#SSI_SIER_TDMAE_SHIFT
 20

	)

34590 
	#SSI_SIER_RIE_MASK
 0x200000u

	)

34591 
	#SSI_SIER_RIE_SHIFT
 21

	)

34592 
	#SSI_SIER_RDMAE_MASK
 0x400000u

	)

34593 
	#SSI_SIER_RDMAE_SHIFT
 22

	)

34594 
	#SSI_SIER_TFRCIE_MASK
 0x800000u

	)

34595 
	#SSI_SIER_TFRCIE_SHIFT
 23

	)

34596 
	#SSI_SIER_RFRCIE_MASK
 0x1000000u

	)

34597 
	#SSI_SIER_RFRCIE_SHIFT
 24

	)

34599 
	#SSI_STCR_TEFS_MASK
 0x1u

	)

34600 
	#SSI_STCR_TEFS_SHIFT
 0

	)

34601 
	#SSI_STCR_TFSL_MASK
 0x2u

	)

34602 
	#SSI_STCR_TFSL_SHIFT
 1

	)

34603 
	#SSI_STCR_TFSI_MASK
 0x4u

	)

34604 
	#SSI_STCR_TFSI_SHIFT
 2

	)

34605 
	#SSI_STCR_TSCKP_MASK
 0x8u

	)

34606 
	#SSI_STCR_TSCKP_SHIFT
 3

	)

34607 
	#SSI_STCR_TSHFD_MASK
 0x10u

	)

34608 
	#SSI_STCR_TSHFD_SHIFT
 4

	)

34609 
	#SSI_STCR_TXDIR_MASK
 0x20u

	)

34610 
	#SSI_STCR_TXDIR_SHIFT
 5

	)

34611 
	#SSI_STCR_TFDIR_MASK
 0x40u

	)

34612 
	#SSI_STCR_TFDIR_SHIFT
 6

	)

34613 
	#SSI_STCR_TFEN0_MASK
 0x80u

	)

34614 
	#SSI_STCR_TFEN0_SHIFT
 7

	)

34615 
	#SSI_STCR_TFEN1_MASK
 0x100u

	)

34616 
	#SSI_STCR_TFEN1_SHIFT
 8

	)

34617 
	#SSI_STCR_TXBIT0_MASK
 0x200u

	)

34618 
	#SSI_STCR_TXBIT0_SHIFT
 9

	)

34620 
	#SSI_SRCR_REFS_MASK
 0x1u

	)

34621 
	#SSI_SRCR_REFS_SHIFT
 0

	)

34622 
	#SSI_SRCR_RFSL_MASK
 0x2u

	)

34623 
	#SSI_SRCR_RFSL_SHIFT
 1

	)

34624 
	#SSI_SRCR_RFSI_MASK
 0x4u

	)

34625 
	#SSI_SRCR_RFSI_SHIFT
 2

	)

34626 
	#SSI_SRCR_RSCKP_MASK
 0x8u

	)

34627 
	#SSI_SRCR_RSCKP_SHIFT
 3

	)

34628 
	#SSI_SRCR_RSHFD_MASK
 0x10u

	)

34629 
	#SSI_SRCR_RSHFD_SHIFT
 4

	)

34630 
	#SSI_SRCR_RXDIR_MASK
 0x20u

	)

34631 
	#SSI_SRCR_RXDIR_SHIFT
 5

	)

34632 
	#SSI_SRCR_RFDIR_MASK
 0x40u

	)

34633 
	#SSI_SRCR_RFDIR_SHIFT
 6

	)

34634 
	#SSI_SRCR_RFEN0_MASK
 0x80u

	)

34635 
	#SSI_SRCR_RFEN0_SHIFT
 7

	)

34636 
	#SSI_SRCR_RFEN1_MASK
 0x100u

	)

34637 
	#SSI_SRCR_RFEN1_SHIFT
 8

	)

34638 
	#SSI_SRCR_RXBIT0_MASK
 0x200u

	)

34639 
	#SSI_SRCR_RXBIT0_SHIFT
 9

	)

34640 
	#SSI_SRCR_RXEXT_MASK
 0x400u

	)

34641 
	#SSI_SRCR_RXEXT_SHIFT
 10

	)

34643 
	#SSI_STCCR_PM7_PM0_MASK
 0xFFu

	)

34644 
	#SSI_STCCR_PM7_PM0_SHIFT
 0

	)

34645 
	#SSI_STCCR_PM7_PM0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_STCCR_PM7_PM0_SHIFT
))&
SSI_STCCR_PM7_PM0_MASK
)

	)

34646 
	#SSI_STCCR_DC4_DC0_MASK
 0x1F00u

	)

34647 
	#SSI_STCCR_DC4_DC0_SHIFT
 8

	)

34648 
	#SSI_STCCR_DC4_DC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_STCCR_DC4_DC0_SHIFT
))&
SSI_STCCR_DC4_DC0_MASK
)

	)

34649 
	#SSI_STCCR_WL3_WL0_MASK
 0x1E000u

	)

34650 
	#SSI_STCCR_WL3_WL0_SHIFT
 13

	)

34651 
	#SSI_STCCR_WL3_WL0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_STCCR_WL3_WL0_SHIFT
))&
SSI_STCCR_WL3_WL0_MASK
)

	)

34652 
	#SSI_STCCR_PSR_MASK
 0x20000u

	)

34653 
	#SSI_STCCR_PSR_SHIFT
 17

	)

34654 
	#SSI_STCCR_DIV2_MASK
 0x40000u

	)

34655 
	#SSI_STCCR_DIV2_SHIFT
 18

	)

34657 
	#SSI_SRCCR_PM7_PM0_MASK
 0xFFu

	)

34658 
	#SSI_SRCCR_PM7_PM0_SHIFT
 0

	)

34659 
	#SSI_SRCCR_PM7_PM0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SRCCR_PM7_PM0_SHIFT
))&
SSI_SRCCR_PM7_PM0_MASK
)

	)

34660 
	#SSI_SRCCR_DC4_DC0_MASK
 0x1F00u

	)

34661 
	#SSI_SRCCR_DC4_DC0_SHIFT
 8

	)

34662 
	#SSI_SRCCR_DC4_DC0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SRCCR_DC4_DC0_SHIFT
))&
SSI_SRCCR_DC4_DC0_MASK
)

	)

34663 
	#SSI_SRCCR_WL3_WL0_MASK
 0x1E000u

	)

34664 
	#SSI_SRCCR_WL3_WL0_SHIFT
 13

	)

34665 
	#SSI_SRCCR_WL3_WL0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SRCCR_WL3_WL0_SHIFT
))&
SSI_SRCCR_WL3_WL0_MASK
)

	)

34666 
	#SSI_SRCCR_PSR_MASK
 0x20000u

	)

34667 
	#SSI_SRCCR_PSR_SHIFT
 17

	)

34668 
	#SSI_SRCCR_DIV2_MASK
 0x40000u

	)

34669 
	#SSI_SRCCR_DIV2_SHIFT
 18

	)

34671 
	#SSI_SFCSR_TFWM0_MASK
 0xFu

	)

34672 
	#SSI_SFCSR_TFWM0_SHIFT
 0

	)

34673 
	#SSI_SFCSR_TFWM0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SFCSR_TFWM0_SHIFT
))&
SSI_SFCSR_TFWM0_MASK
)

	)

34674 
	#SSI_SFCSR_RFWM0_MASK
 0xF0u

	)

34675 
	#SSI_SFCSR_RFWM0_SHIFT
 4

	)

34676 
	#SSI_SFCSR_RFWM0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SFCSR_RFWM0_SHIFT
))&
SSI_SFCSR_RFWM0_MASK
)

	)

34677 
	#SSI_SFCSR_TFCNT0_MASK
 0xF00u

	)

34678 
	#SSI_SFCSR_TFCNT0_SHIFT
 8

	)

34679 
	#SSI_SFCSR_TFCNT0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SFCSR_TFCNT0_SHIFT
))&
SSI_SFCSR_TFCNT0_MASK
)

	)

34680 
	#SSI_SFCSR_RFCNT0_MASK
 0xF000u

	)

34681 
	#SSI_SFCSR_RFCNT0_SHIFT
 12

	)

34682 
	#SSI_SFCSR_RFCNT0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SFCSR_RFCNT0_SHIFT
))&
SSI_SFCSR_RFCNT0_MASK
)

	)

34683 
	#SSI_SFCSR_TFWM1_MASK
 0xF0000u

	)

34684 
	#SSI_SFCSR_TFWM1_SHIFT
 16

	)

34685 
	#SSI_SFCSR_TFWM1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SFCSR_TFWM1_SHIFT
))&
SSI_SFCSR_TFWM1_MASK
)

	)

34686 
	#SSI_SFCSR_RFWM1_MASK
 0xF00000u

	)

34687 
	#SSI_SFCSR_RFWM1_SHIFT
 20

	)

34688 
	#SSI_SFCSR_RFWM1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SFCSR_RFWM1_SHIFT
))&
SSI_SFCSR_RFWM1_MASK
)

	)

34689 
	#SSI_SFCSR_TFCNT1_MASK
 0xF000000u

	)

34690 
	#SSI_SFCSR_TFCNT1_SHIFT
 24

	)

34691 
	#SSI_SFCSR_TFCNT1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SFCSR_TFCNT1_SHIFT
))&
SSI_SFCSR_TFCNT1_MASK
)

	)

34692 
	#SSI_SFCSR_RFCNT1_MASK
 0xF0000000u

	)

34693 
	#SSI_SFCSR_RFCNT1_SHIFT
 28

	)

34694 
	#SSI_SFCSR_RFCNT1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SFCSR_RFCNT1_SHIFT
))&
SSI_SFCSR_RFCNT1_MASK
)

	)

34696 
	#SSI_SACNT_AC97EN_MASK
 0x1u

	)

34697 
	#SSI_SACNT_AC97EN_SHIFT
 0

	)

34698 
	#SSI_SACNT_FV_MASK
 0x2u

	)

34699 
	#SSI_SACNT_FV_SHIFT
 1

	)

34700 
	#SSI_SACNT_TIF_MASK
 0x4u

	)

34701 
	#SSI_SACNT_TIF_SHIFT
 2

	)

34702 
	#SSI_SACNT_RD_MASK
 0x8u

	)

34703 
	#SSI_SACNT_RD_SHIFT
 3

	)

34704 
	#SSI_SACNT_WR_MASK
 0x10u

	)

34705 
	#SSI_SACNT_WR_SHIFT
 4

	)

34706 
	#SSI_SACNT_FRDIV_MASK
 0x7E0u

	)

34707 
	#SSI_SACNT_FRDIV_SHIFT
 5

	)

34708 
	#SSI_SACNT_FRDIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SACNT_FRDIV_SHIFT
))&
SSI_SACNT_FRDIV_MASK
)

	)

34710 
	#SSI_SACADD_SACADD_MASK
 0x7FFFFu

	)

34711 
	#SSI_SACADD_SACADD_SHIFT
 0

	)

34712 
	#SSI_SACADD_SACADD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SACADD_SACADD_SHIFT
))&
SSI_SACADD_SACADD_MASK
)

	)

34714 
	#SSI_SACDAT_SACDAT_MASK
 0xFFFFFu

	)

34715 
	#SSI_SACDAT_SACDAT_SHIFT
 0

	)

34716 
	#SSI_SACDAT_SACDAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SACDAT_SACDAT_SHIFT
))&
SSI_SACDAT_SACDAT_MASK
)

	)

34718 
	#SSI_SATAG_SATAG_MASK
 0xFFFFu

	)

34719 
	#SSI_SATAG_SATAG_SHIFT
 0

	)

34720 
	#SSI_SATAG_SATAG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SATAG_SATAG_SHIFT
))&
SSI_SATAG_SATAG_MASK
)

	)

34722 
	#SSI_STMSK_STMSK_MASK
 0xFFFFFFFFu

	)

34723 
	#SSI_STMSK_STMSK_SHIFT
 0

	)

34724 
	#SSI_STMSK_STMSK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_STMSK_STMSK_SHIFT
))&
SSI_STMSK_STMSK_MASK
)

	)

34726 
	#SSI_SRMSK_SRMSK_MASK
 0xFFFFFFFFu

	)

34727 
	#SSI_SRMSK_SRMSK_SHIFT
 0

	)

34728 
	#SSI_SRMSK_SRMSK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SRMSK_SRMSK_SHIFT
))&
SSI_SRMSK_SRMSK_MASK
)

	)

34730 
	#SSI_SACCST_SACCST_MASK
 0x3FFu

	)

34731 
	#SSI_SACCST_SACCST_SHIFT
 0

	)

34732 
	#SSI_SACCST_SACCST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SACCST_SACCST_SHIFT
))&
SSI_SACCST_SACCST_MASK
)

	)

34734 
	#SSI_SACCEN_SACCEN_MASK
 0x3FFu

	)

34735 
	#SSI_SACCEN_SACCEN_SHIFT
 0

	)

34736 
	#SSI_SACCEN_SACCEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SACCEN_SACCEN_SHIFT
))&
SSI_SACCEN_SACCEN_MASK
)

	)

34738 
	#SSI_SACCDIS_SACCDIS_MASK
 0x3FFu

	)

34739 
	#SSI_SACCDIS_SACCDIS_SHIFT
 0

	)

34740 
	#SSI_SACCDIS_SACCDIS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
SSI_SACCDIS_SACCDIS_SHIFT
))&
SSI_SACCDIS_SACCDIS_MASK
)

	)

34748 
	#SSI1_BASE
 (0x42028000u)

	)

34750 
	#SSI1
 ((
SSI_Ty≥
 *)
SSI1_BASE
)

	)

34751 
	#SSI1_BASE_PTR
 (
SSI1
)

	)

34753 
	#SSI2_BASE
 (0x4202C000u)

	)

34755 
	#SSI2
 ((
SSI_Ty≥
 *)
SSI2_BASE
)

	)

34756 
	#SSI2_BASE_PTR
 (
SSI2
)

	)

34758 
	#SSI3_BASE
 (0x42030000u)

	)

34760 
	#SSI3
 ((
SSI_Ty≥
 *)
SSI3_BASE
)

	)

34761 
	#SSI3_BASE_PTR
 (
SSI3
)

	)

34763 
	#SSI_BASE_ADDRS
 { 
SSI1_BASE
, 
SSI2_BASE
, 
SSI3_BASE
 }

	)

34765 
	#SSI_BASE_PTRS
 { 
SSI1
, 
SSI2
, 
SSI3
 }

	)

34767 
	#SSI_IRQS
 { 
SSI1_IRQn
, 
SSI2_IRQn
, 
SSI3_IRQn
 }

	)

34780 
	#SSI1_STX0
 
	`SSI_STX_REG
(
SSI1_BASE_PTR
,0)

	)

34781 
	#SSI1_STX1
 
	`SSI_STX_REG
(
SSI1_BASE_PTR
,1)

	)

34782 
	#SSI1_SRX0
 
	`SSI_SRX_REG
(
SSI1_BASE_PTR
,0)

	)

34783 
	#SSI1_SRX1
 
	`SSI_SRX_REG
(
SSI1_BASE_PTR
,1)

	)

34784 
	#SSI1_SCR
 
	`SSI_SCR_REG
(
SSI1_BASE_PTR
)

	)

34785 
	#SSI1_SISR
 
	`SSI_SISR_REG
(
SSI1_BASE_PTR
)

	)

34786 
	#SSI1_SIER
 
	`SSI_SIER_REG
(
SSI1_BASE_PTR
)

	)

34787 
	#SSI1_STCR
 
	`SSI_STCR_REG
(
SSI1_BASE_PTR
)

	)

34788 
	#SSI1_SRCR
 
	`SSI_SRCR_REG
(
SSI1_BASE_PTR
)

	)

34789 
	#SSI1_STCCR
 
	`SSI_STCCR_REG
(
SSI1_BASE_PTR
)

	)

34790 
	#SSI1_SRCCR
 
	`SSI_SRCCR_REG
(
SSI1_BASE_PTR
)

	)

34791 
	#SSI1_SFCSR
 
	`SSI_SFCSR_REG
(
SSI1_BASE_PTR
)

	)

34792 
	#SSI1_SACNT
 
	`SSI_SACNT_REG
(
SSI1_BASE_PTR
)

	)

34793 
	#SSI1_SACADD
 
	`SSI_SACADD_REG
(
SSI1_BASE_PTR
)

	)

34794 
	#SSI1_SACDAT
 
	`SSI_SACDAT_REG
(
SSI1_BASE_PTR
)

	)

34795 
	#SSI1_SATAG
 
	`SSI_SATAG_REG
(
SSI1_BASE_PTR
)

	)

34796 
	#SSI1_STMSK
 
	`SSI_STMSK_REG
(
SSI1_BASE_PTR
)

	)

34797 
	#SSI1_SRMSK
 
	`SSI_SRMSK_REG
(
SSI1_BASE_PTR
)

	)

34798 
	#SSI1_SACCST
 
	`SSI_SACCST_REG
(
SSI1_BASE_PTR
)

	)

34799 
	#SSI1_SACCEN
 
	`SSI_SACCEN_REG
(
SSI1_BASE_PTR
)

	)

34800 
	#SSI1_SACCDIS
 
	`SSI_SACCDIS_REG
(
SSI1_BASE_PTR
)

	)

34802 
	#SSI2_STX0
 
	`SSI_STX_REG
(
SSI2_BASE_PTR
,0)

	)

34803 
	#SSI2_STX1
 
	`SSI_STX_REG
(
SSI2_BASE_PTR
,1)

	)

34804 
	#SSI2_SRX0
 
	`SSI_SRX_REG
(
SSI2_BASE_PTR
,0)

	)

34805 
	#SSI2_SRX1
 
	`SSI_SRX_REG
(
SSI2_BASE_PTR
,1)

	)

34806 
	#SSI2_SCR
 
	`SSI_SCR_REG
(
SSI2_BASE_PTR
)

	)

34807 
	#SSI2_SISR
 
	`SSI_SISR_REG
(
SSI2_BASE_PTR
)

	)

34808 
	#SSI2_SIER
 
	`SSI_SIER_REG
(
SSI2_BASE_PTR
)

	)

34809 
	#SSI2_STCR
 
	`SSI_STCR_REG
(
SSI2_BASE_PTR
)

	)

34810 
	#SSI2_SRCR
 
	`SSI_SRCR_REG
(
SSI2_BASE_PTR
)

	)

34811 
	#SSI2_STCCR
 
	`SSI_STCCR_REG
(
SSI2_BASE_PTR
)

	)

34812 
	#SSI2_SRCCR
 
	`SSI_SRCCR_REG
(
SSI2_BASE_PTR
)

	)

34813 
	#SSI2_SFCSR
 
	`SSI_SFCSR_REG
(
SSI2_BASE_PTR
)

	)

34814 
	#SSI2_SACNT
 
	`SSI_SACNT_REG
(
SSI2_BASE_PTR
)

	)

34815 
	#SSI2_SACADD
 
	`SSI_SACADD_REG
(
SSI2_BASE_PTR
)

	)

34816 
	#SSI2_SACDAT
 
	`SSI_SACDAT_REG
(
SSI2_BASE_PTR
)

	)

34817 
	#SSI2_SATAG
 
	`SSI_SATAG_REG
(
SSI2_BASE_PTR
)

	)

34818 
	#SSI2_STMSK
 
	`SSI_STMSK_REG
(
SSI2_BASE_PTR
)

	)

34819 
	#SSI2_SRMSK
 
	`SSI_SRMSK_REG
(
SSI2_BASE_PTR
)

	)

34820 
	#SSI2_SACCST
 
	`SSI_SACCST_REG
(
SSI2_BASE_PTR
)

	)

34821 
	#SSI2_SACCEN
 
	`SSI_SACCEN_REG
(
SSI2_BASE_PTR
)

	)

34822 
	#SSI2_SACCDIS
 
	`SSI_SACCDIS_REG
(
SSI2_BASE_PTR
)

	)

34824 
	#SSI3_STX0
 
	`SSI_STX_REG
(
SSI3_BASE_PTR
,0)

	)

34825 
	#SSI3_STX1
 
	`SSI_STX_REG
(
SSI3_BASE_PTR
,1)

	)

34826 
	#SSI3_SRX0
 
	`SSI_SRX_REG
(
SSI3_BASE_PTR
,0)

	)

34827 
	#SSI3_SRX1
 
	`SSI_SRX_REG
(
SSI3_BASE_PTR
,1)

	)

34828 
	#SSI3_SCR
 
	`SSI_SCR_REG
(
SSI3_BASE_PTR
)

	)

34829 
	#SSI3_SISR
 
	`SSI_SISR_REG
(
SSI3_BASE_PTR
)

	)

34830 
	#SSI3_SIER
 
	`SSI_SIER_REG
(
SSI3_BASE_PTR
)

	)

34831 
	#SSI3_STCR
 
	`SSI_STCR_REG
(
SSI3_BASE_PTR
)

	)

34832 
	#SSI3_SRCR
 
	`SSI_SRCR_REG
(
SSI3_BASE_PTR
)

	)

34833 
	#SSI3_STCCR
 
	`SSI_STCCR_REG
(
SSI3_BASE_PTR
)

	)

34834 
	#SSI3_SRCCR
 
	`SSI_SRCCR_REG
(
SSI3_BASE_PTR
)

	)

34835 
	#SSI3_SFCSR
 
	`SSI_SFCSR_REG
(
SSI3_BASE_PTR
)

	)

34836 
	#SSI3_SACNT
 
	`SSI_SACNT_REG
(
SSI3_BASE_PTR
)

	)

34837 
	#SSI3_SACADD
 
	`SSI_SACADD_REG
(
SSI3_BASE_PTR
)

	)

34838 
	#SSI3_SACDAT
 
	`SSI_SACDAT_REG
(
SSI3_BASE_PTR
)

	)

34839 
	#SSI3_SATAG
 
	`SSI_SATAG_REG
(
SSI3_BASE_PTR
)

	)

34840 
	#SSI3_STMSK
 
	`SSI_STMSK_REG
(
SSI3_BASE_PTR
)

	)

34841 
	#SSI3_SRMSK
 
	`SSI_SRMSK_REG
(
SSI3_BASE_PTR
)

	)

34842 
	#SSI3_SACCST
 
	`SSI_SACCST_REG
(
SSI3_BASE_PTR
)

	)

34843 
	#SSI3_SACCEN
 
	`SSI_SACCEN_REG
(
SSI3_BASE_PTR
)

	)

34844 
	#SSI3_SACCDIS
 
	`SSI_SACCDIS_REG
(
SSI3_BASE_PTR
)

	)

34846 
	#SSI1_STX
(
ödex
Ë
	`SSI_STX_REG
(
SSI1_BASE_PTR
,ödex)

	)

34847 
	#SSI2_STX
(
ödex
Ë
	`SSI_STX_REG
(
SSI2_BASE_PTR
,ödex)

	)

34848 
	#SSI3_STX
(
ödex
Ë
	`SSI_STX_REG
(
SSI3_BASE_PTR
,ödex)

	)

34849 
	#SSI1_SRX
(
ödex
Ë
	`SSI_SRX_REG
(
SSI1_BASE_PTR
,ödex)

	)

34850 
	#SSI2_SRX
(
ödex
Ë
	`SSI_SRX_REG
(
SSI2_BASE_PTR
,ödex)

	)

34851 
	#SSI3_SRX
(
ödex
Ë
	`SSI_SRX_REG
(
SSI3_BASE_PTR
,ödex)

	)

34872 
uöt8_t
 
	mRESERVED_0
[384];

34873 
__IO
 
uöt32_t
 
	mTEMPSENSE0
;

34874 
__IO
 
uöt32_t
 
	mTEMPSENSE0_SET
;

34875 
__IO
 
uöt32_t
 
	mTEMPSENSE0_CLR
;

34876 
__IO
 
uöt32_t
 
	mTEMPSENSE0_TOG
;

34877 
__IO
 
uöt32_t
 
	mTEMPSENSE1
;

34878 
__IO
 
uöt32_t
 
	mTEMPSENSE1_SET
;

34879 
__IO
 
uöt32_t
 
	mTEMPSENSE1_CLR
;

34880 
__IO
 
uöt32_t
 
	mTEMPSENSE1_TOG
;

34881 
uöt8_t
 
	mRESERVED_1
[240];

34882 
__IO
 
uöt32_t
 
	mTEMPSENSE2
;

34883 
__IO
 
uöt32_t
 
	mTEMPSENSE2_SET
;

34884 
__IO
 
uöt32_t
 
	mTEMPSENSE2_CLR
;

34885 
__IO
 
uöt32_t
 
	mTEMPSENSE2_TOG
;

34886 } 
	tTEMPMON_Ty≥
, *
	tTEMPMON_MemM≠På
;

34898 
	#TEMPMON_TEMPSENSE0_REG
(
ba£
Ë((ba£)->
TEMPSENSE0
)

	)

34899 
	#TEMPMON_TEMPSENSE0_SET_REG
(
ba£
Ë((ba£)->
TEMPSENSE0_SET
)

	)

34900 
	#TEMPMON_TEMPSENSE0_CLR_REG
(
ba£
Ë((ba£)->
TEMPSENSE0_CLR
)

	)

34901 
	#TEMPMON_TEMPSENSE0_TOG_REG
(
ba£
Ë((ba£)->
TEMPSENSE0_TOG
)

	)

34902 
	#TEMPMON_TEMPSENSE1_REG
(
ba£
Ë((ba£)->
TEMPSENSE1
)

	)

34903 
	#TEMPMON_TEMPSENSE1_SET_REG
(
ba£
Ë((ba£)->
TEMPSENSE1_SET
)

	)

34904 
	#TEMPMON_TEMPSENSE1_CLR_REG
(
ba£
Ë((ba£)->
TEMPSENSE1_CLR
)

	)

34905 
	#TEMPMON_TEMPSENSE1_TOG_REG
(
ba£
Ë((ba£)->
TEMPSENSE1_TOG
)

	)

34906 
	#TEMPMON_TEMPSENSE2_REG
(
ba£
Ë((ba£)->
TEMPSENSE2
)

	)

34907 
	#TEMPMON_TEMPSENSE2_SET_REG
(
ba£
Ë((ba£)->
TEMPSENSE2_SET
)

	)

34908 
	#TEMPMON_TEMPSENSE2_CLR_REG
(
ba£
Ë((ba£)->
TEMPSENSE2_CLR
)

	)

34909 
	#TEMPMON_TEMPSENSE2_TOG_REG
(
ba£
Ë((ba£)->
TEMPSENSE2_TOG
)

	)

34925 
	#TEMPMON_TEMPSENSE0_POWER_DOWN_MASK
 0x1u

	)

34926 
	#TEMPMON_TEMPSENSE0_POWER_DOWN_SHIFT
 0

	)

34927 
	#TEMPMON_TEMPSENSE0_MEASURE_TEMP_MASK
 0x2u

	)

34928 
	#TEMPMON_TEMPSENSE0_MEASURE_TEMP_SHIFT
 1

	)

34929 
	#TEMPMON_TEMPSENSE0_FINISHED_MASK
 0x4u

	)

34930 
	#TEMPMON_TEMPSENSE0_FINISHED_SHIFT
 2

	)

34931 
	#TEMPMON_TEMPSENSE0_TEMP_CNT_MASK
 0xFFF00u

	)

34932 
	#TEMPMON_TEMPSENSE0_TEMP_CNT_SHIFT
 8

	)

34933 
	#TEMPMON_TEMPSENSE0_TEMP_CNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE0_TEMP_CNT_SHIFT
))&
TEMPMON_TEMPSENSE0_TEMP_CNT_MASK
)

	)

34934 
	#TEMPMON_TEMPSENSE0_ALARM_VALUE_MASK
 0xFFF00000u

	)

34935 
	#TEMPMON_TEMPSENSE0_ALARM_VALUE_SHIFT
 20

	)

34936 
	#TEMPMON_TEMPSENSE0_ALARM_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE0_ALARM_VALUE_SHIFT
))&
TEMPMON_TEMPSENSE0_ALARM_VALUE_MASK
)

	)

34938 
	#TEMPMON_TEMPSENSE0_SET_POWER_DOWN_MASK
 0x1u

	)

34939 
	#TEMPMON_TEMPSENSE0_SET_POWER_DOWN_SHIFT
 0

	)

34940 
	#TEMPMON_TEMPSENSE0_SET_MEASURE_TEMP_MASK
 0x2u

	)

34941 
	#TEMPMON_TEMPSENSE0_SET_MEASURE_TEMP_SHIFT
 1

	)

34942 
	#TEMPMON_TEMPSENSE0_SET_FINISHED_MASK
 0x4u

	)

34943 
	#TEMPMON_TEMPSENSE0_SET_FINISHED_SHIFT
 2

	)

34944 
	#TEMPMON_TEMPSENSE0_SET_TEMP_CNT_MASK
 0xFFF00u

	)

34945 
	#TEMPMON_TEMPSENSE0_SET_TEMP_CNT_SHIFT
 8

	)

34946 
	#TEMPMON_TEMPSENSE0_SET_TEMP_CNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE0_SET_TEMP_CNT_SHIFT
))&
TEMPMON_TEMPSENSE0_SET_TEMP_CNT_MASK
)

	)

34947 
	#TEMPMON_TEMPSENSE0_SET_ALARM_VALUE_MASK
 0xFFF00000u

	)

34948 
	#TEMPMON_TEMPSENSE0_SET_ALARM_VALUE_SHIFT
 20

	)

34949 
	#TEMPMON_TEMPSENSE0_SET_ALARM_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE0_SET_ALARM_VALUE_SHIFT
))&
TEMPMON_TEMPSENSE0_SET_ALARM_VALUE_MASK
)

	)

34951 
	#TEMPMON_TEMPSENSE0_CLR_POWER_DOWN_MASK
 0x1u

	)

34952 
	#TEMPMON_TEMPSENSE0_CLR_POWER_DOWN_SHIFT
 0

	)

34953 
	#TEMPMON_TEMPSENSE0_CLR_MEASURE_TEMP_MASK
 0x2u

	)

34954 
	#TEMPMON_TEMPSENSE0_CLR_MEASURE_TEMP_SHIFT
 1

	)

34955 
	#TEMPMON_TEMPSENSE0_CLR_FINISHED_MASK
 0x4u

	)

34956 
	#TEMPMON_TEMPSENSE0_CLR_FINISHED_SHIFT
 2

	)

34957 
	#TEMPMON_TEMPSENSE0_CLR_TEMP_CNT_MASK
 0xFFF00u

	)

34958 
	#TEMPMON_TEMPSENSE0_CLR_TEMP_CNT_SHIFT
 8

	)

34959 
	#TEMPMON_TEMPSENSE0_CLR_TEMP_CNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE0_CLR_TEMP_CNT_SHIFT
))&
TEMPMON_TEMPSENSE0_CLR_TEMP_CNT_MASK
)

	)

34960 
	#TEMPMON_TEMPSENSE0_CLR_ALARM_VALUE_MASK
 0xFFF00000u

	)

34961 
	#TEMPMON_TEMPSENSE0_CLR_ALARM_VALUE_SHIFT
 20

	)

34962 
	#TEMPMON_TEMPSENSE0_CLR_ALARM_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE0_CLR_ALARM_VALUE_SHIFT
))&
TEMPMON_TEMPSENSE0_CLR_ALARM_VALUE_MASK
)

	)

34964 
	#TEMPMON_TEMPSENSE0_TOG_POWER_DOWN_MASK
 0x1u

	)

34965 
	#TEMPMON_TEMPSENSE0_TOG_POWER_DOWN_SHIFT
 0

	)

34966 
	#TEMPMON_TEMPSENSE0_TOG_MEASURE_TEMP_MASK
 0x2u

	)

34967 
	#TEMPMON_TEMPSENSE0_TOG_MEASURE_TEMP_SHIFT
 1

	)

34968 
	#TEMPMON_TEMPSENSE0_TOG_FINISHED_MASK
 0x4u

	)

34969 
	#TEMPMON_TEMPSENSE0_TOG_FINISHED_SHIFT
 2

	)

34970 
	#TEMPMON_TEMPSENSE0_TOG_TEMP_CNT_MASK
 0xFFF00u

	)

34971 
	#TEMPMON_TEMPSENSE0_TOG_TEMP_CNT_SHIFT
 8

	)

34972 
	#TEMPMON_TEMPSENSE0_TOG_TEMP_CNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE0_TOG_TEMP_CNT_SHIFT
))&
TEMPMON_TEMPSENSE0_TOG_TEMP_CNT_MASK
)

	)

34973 
	#TEMPMON_TEMPSENSE0_TOG_ALARM_VALUE_MASK
 0xFFF00000u

	)

34974 
	#TEMPMON_TEMPSENSE0_TOG_ALARM_VALUE_SHIFT
 20

	)

34975 
	#TEMPMON_TEMPSENSE0_TOG_ALARM_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE0_TOG_ALARM_VALUE_SHIFT
))&
TEMPMON_TEMPSENSE0_TOG_ALARM_VALUE_MASK
)

	)

34977 
	#TEMPMON_TEMPSENSE1_MEASURE_FREQ_MASK
 0xFFFFu

	)

34978 
	#TEMPMON_TEMPSENSE1_MEASURE_FREQ_SHIFT
 0

	)

34979 
	#TEMPMON_TEMPSENSE1_MEASURE_FREQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE1_MEASURE_FREQ_SHIFT
))&
TEMPMON_TEMPSENSE1_MEASURE_FREQ_MASK
)

	)

34981 
	#TEMPMON_TEMPSENSE1_SET_MEASURE_FREQ_MASK
 0xFFFFu

	)

34982 
	#TEMPMON_TEMPSENSE1_SET_MEASURE_FREQ_SHIFT
 0

	)

34983 
	#TEMPMON_TEMPSENSE1_SET_MEASURE_FREQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE1_SET_MEASURE_FREQ_SHIFT
))&
TEMPMON_TEMPSENSE1_SET_MEASURE_FREQ_MASK
)

	)

34985 
	#TEMPMON_TEMPSENSE1_CLR_MEASURE_FREQ_MASK
 0xFFFFu

	)

34986 
	#TEMPMON_TEMPSENSE1_CLR_MEASURE_FREQ_SHIFT
 0

	)

34987 
	#TEMPMON_TEMPSENSE1_CLR_MEASURE_FREQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE1_CLR_MEASURE_FREQ_SHIFT
))&
TEMPMON_TEMPSENSE1_CLR_MEASURE_FREQ_MASK
)

	)

34989 
	#TEMPMON_TEMPSENSE1_TOG_MEASURE_FREQ_MASK
 0xFFFFu

	)

34990 
	#TEMPMON_TEMPSENSE1_TOG_MEASURE_FREQ_SHIFT
 0

	)

34991 
	#TEMPMON_TEMPSENSE1_TOG_MEASURE_FREQ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE1_TOG_MEASURE_FREQ_SHIFT
))&
TEMPMON_TEMPSENSE1_TOG_MEASURE_FREQ_MASK
)

	)

34993 
	#TEMPMON_TEMPSENSE2_LOW_ALARM_VALUE_MASK
 0xFFFu

	)

34994 
	#TEMPMON_TEMPSENSE2_LOW_ALARM_VALUE_SHIFT
 0

	)

34995 
	#TEMPMON_TEMPSENSE2_LOW_ALARM_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE2_LOW_ALARM_VALUE_SHIFT
))&
TEMPMON_TEMPSENSE2_LOW_ALARM_VALUE_MASK
)

	)

34996 
	#TEMPMON_TEMPSENSE2_PANIC_ALARM_VALUE_MASK
 0xFFF0000u

	)

34997 
	#TEMPMON_TEMPSENSE2_PANIC_ALARM_VALUE_SHIFT
 16

	)

34998 
	#TEMPMON_TEMPSENSE2_PANIC_ALARM_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE2_PANIC_ALARM_VALUE_SHIFT
))&
TEMPMON_TEMPSENSE2_PANIC_ALARM_VALUE_MASK
)

	)

35000 
	#TEMPMON_TEMPSENSE2_SET_LOW_ALARM_VALUE_MASK
 0xFFFu

	)

35001 
	#TEMPMON_TEMPSENSE2_SET_LOW_ALARM_VALUE_SHIFT
 0

	)

35002 
	#TEMPMON_TEMPSENSE2_SET_LOW_ALARM_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE2_SET_LOW_ALARM_VALUE_SHIFT
))&
TEMPMON_TEMPSENSE2_SET_LOW_ALARM_VALUE_MASK
)

	)

35003 
	#TEMPMON_TEMPSENSE2_SET_PANIC_ALARM_VALUE_MASK
 0xFFF0000u

	)

35004 
	#TEMPMON_TEMPSENSE2_SET_PANIC_ALARM_VALUE_SHIFT
 16

	)

35005 
	#TEMPMON_TEMPSENSE2_SET_PANIC_ALARM_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE2_SET_PANIC_ALARM_VALUE_SHIFT
))&
TEMPMON_TEMPSENSE2_SET_PANIC_ALARM_VALUE_MASK
)

	)

35007 
	#TEMPMON_TEMPSENSE2_CLR_LOW_ALARM_VALUE_MASK
 0xFFFu

	)

35008 
	#TEMPMON_TEMPSENSE2_CLR_LOW_ALARM_VALUE_SHIFT
 0

	)

35009 
	#TEMPMON_TEMPSENSE2_CLR_LOW_ALARM_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE2_CLR_LOW_ALARM_VALUE_SHIFT
))&
TEMPMON_TEMPSENSE2_CLR_LOW_ALARM_VALUE_MASK
)

	)

35010 
	#TEMPMON_TEMPSENSE2_CLR_PANIC_ALARM_VALUE_MASK
 0xFFF0000u

	)

35011 
	#TEMPMON_TEMPSENSE2_CLR_PANIC_ALARM_VALUE_SHIFT
 16

	)

35012 
	#TEMPMON_TEMPSENSE2_CLR_PANIC_ALARM_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE2_CLR_PANIC_ALARM_VALUE_SHIFT
))&
TEMPMON_TEMPSENSE2_CLR_PANIC_ALARM_VALUE_MASK
)

	)

35014 
	#TEMPMON_TEMPSENSE2_TOG_LOW_ALARM_VALUE_MASK
 0xFFFu

	)

35015 
	#TEMPMON_TEMPSENSE2_TOG_LOW_ALARM_VALUE_SHIFT
 0

	)

35016 
	#TEMPMON_TEMPSENSE2_TOG_LOW_ALARM_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE2_TOG_LOW_ALARM_VALUE_SHIFT
))&
TEMPMON_TEMPSENSE2_TOG_LOW_ALARM_VALUE_MASK
)

	)

35017 
	#TEMPMON_TEMPSENSE2_TOG_PANIC_ALARM_VALUE_MASK
 0xFFF0000u

	)

35018 
	#TEMPMON_TEMPSENSE2_TOG_PANIC_ALARM_VALUE_SHIFT
 16

	)

35019 
	#TEMPMON_TEMPSENSE2_TOG_PANIC_ALARM_VALUE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
TEMPMON_TEMPSENSE2_TOG_PANIC_ALARM_VALUE_SHIFT
))&
TEMPMON_TEMPSENSE2_TOG_PANIC_ALARM_VALUE_MASK
)

	)

35027 
	#TEMPMON_BASE
 (0x420C8000u)

	)

35029 
	#TEMPMON
 ((
TEMPMON_Ty≥
 *)
TEMPMON_BASE
)

	)

35030 
	#TEMPMON_BASE_PTR
 (
TEMPMON
)

	)

35032 
	#TEMPMON_BASE_ADDRS
 { 
TEMPMON_BASE
 }

	)

35034 
	#TEMPMON_BASE_PTRS
 { 
TEMPMON
 }

	)

35047 
	#TEMPMON_TEMPSENSE0
 
	`TEMPMON_TEMPSENSE0_REG
(
TEMPMON_BASE_PTR
)

	)

35048 
	#TEMPMON_TEMPSENSE0_SET
 
	`TEMPMON_TEMPSENSE0_SET_REG
(
TEMPMON_BASE_PTR
)

	)

35049 
	#TEMPMON_TEMPSENSE0_CLR
 
	`TEMPMON_TEMPSENSE0_CLR_REG
(
TEMPMON_BASE_PTR
)

	)

35050 
	#TEMPMON_TEMPSENSE0_TOG
 
	`TEMPMON_TEMPSENSE0_TOG_REG
(
TEMPMON_BASE_PTR
)

	)

35051 
	#TEMPMON_TEMPSENSE1
 
	`TEMPMON_TEMPSENSE1_REG
(
TEMPMON_BASE_PTR
)

	)

35052 
	#TEMPMON_TEMPSENSE1_SET
 
	`TEMPMON_TEMPSENSE1_SET_REG
(
TEMPMON_BASE_PTR
)

	)

35053 
	#TEMPMON_TEMPSENSE1_CLR
 
	`TEMPMON_TEMPSENSE1_CLR_REG
(
TEMPMON_BASE_PTR
)

	)

35054 
	#TEMPMON_TEMPSENSE1_TOG
 
	`TEMPMON_TEMPSENSE1_TOG_REG
(
TEMPMON_BASE_PTR
)

	)

35055 
	#TEMPMON_TEMPSENSE2
 
	`TEMPMON_TEMPSENSE2_REG
(
TEMPMON_BASE_PTR
)

	)

35056 
	#TEMPMON_TEMPSENSE2_SET
 
	`TEMPMON_TEMPSENSE2_SET_REG
(
TEMPMON_BASE_PTR
)

	)

35057 
	#TEMPMON_TEMPSENSE2_CLR
 
	`TEMPMON_TEMPSENSE2_CLR_REG
(
TEMPMON_BASE_PTR
)

	)

35058 
	#TEMPMON_TEMPSENSE2_TOG
 
	`TEMPMON_TEMPSENSE2_TOG_REG
(
TEMPMON_BASE_PTR
)

	)

35079 
__I
 
uöt32_t
 
	mURXD
;

35080 
uöt8_t
 
	mRESERVED_0
[60];

35081 
__O
 
uöt32_t
 
	mUTXD
;

35082 
uöt8_t
 
	mRESERVED_1
[60];

35083 
__IO
 
uöt32_t
 
	mUCR1
;

35084 
__IO
 
uöt32_t
 
	mUCR2
;

35085 
__IO
 
uöt32_t
 
	mUCR3
;

35086 
__IO
 
uöt32_t
 
	mUCR4
;

35087 
__IO
 
uöt32_t
 
	mUFCR
;

35088 
__IO
 
uöt32_t
 
	mUSR1
;

35089 
__IO
 
uöt32_t
 
	mUSR2
;

35090 
__IO
 
uöt32_t
 
	mUESC
;

35091 
__IO
 
uöt32_t
 
	mUTIM
;

35092 
__IO
 
uöt32_t
 
	mUBIR
;

35093 
__IO
 
uöt32_t
 
	mUBMR
;

35094 
__I
 
uöt32_t
 
	mUBRC
;

35095 
__IO
 
uöt32_t
 
	mONEMS
;

35096 
__IO
 
uöt32_t
 
	mUTS
;

35097 
__IO
 
uöt32_t
 
	mUMCR
;

35098 } 
	tUART_Ty≥
, *
	tUART_MemM≠På
;

35110 
	#UART_URXD_REG
(
ba£
Ë((ba£)->
URXD
)

	)

35111 
	#UART_UTXD_REG
(
ba£
Ë((ba£)->
UTXD
)

	)

35112 
	#UART_UCR1_REG
(
ba£
Ë((ba£)->
UCR1
)

	)

35113 
	#UART_UCR2_REG
(
ba£
Ë((ba£)->
UCR2
)

	)

35114 
	#UART_UCR3_REG
(
ba£
Ë((ba£)->
UCR3
)

	)

35115 
	#UART_UCR4_REG
(
ba£
Ë((ba£)->
UCR4
)

	)

35116 
	#UART_UFCR_REG
(
ba£
Ë((ba£)->
UFCR
)

	)

35117 
	#UART_USR1_REG
(
ba£
Ë((ba£)->
USR1
)

	)

35118 
	#UART_USR2_REG
(
ba£
Ë((ba£)->
USR2
)

	)

35119 
	#UART_UESC_REG
(
ba£
Ë((ba£)->
UESC
)

	)

35120 
	#UART_UTIM_REG
(
ba£
Ë((ba£)->
UTIM
)

	)

35121 
	#UART_UBIR_REG
(
ba£
Ë((ba£)->
UBIR
)

	)

35122 
	#UART_UBMR_REG
(
ba£
Ë((ba£)->
UBMR
)

	)

35123 
	#UART_UBRC_REG
(
ba£
Ë((ba£)->
UBRC
)

	)

35124 
	#UART_ONEMS_REG
(
ba£
Ë((ba£)->
ONEMS
)

	)

35125 
	#UART_UTS_REG
(
ba£
Ë((ba£)->
UTS
)

	)

35126 
	#UART_UMCR_REG
(
ba£
Ë((ba£)->
UMCR
)

	)

35142 
	#UART_URXD_RX_DATA_MASK
 0xFFu

	)

35143 
	#UART_URXD_RX_DATA_SHIFT
 0

	)

35144 
	#UART_URXD_RX_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
UART_URXD_RX_DATA_SHIFT
))&
UART_URXD_RX_DATA_MASK
)

	)

35145 
	#UART_URXD_PRERR_MASK
 0x400u

	)

35146 
	#UART_URXD_PRERR_SHIFT
 10

	)

35147 
	#UART_URXD_BRK_MASK
 0x800u

	)

35148 
	#UART_URXD_BRK_SHIFT
 11

	)

35149 
	#UART_URXD_FRMERR_MASK
 0x1000u

	)

35150 
	#UART_URXD_FRMERR_SHIFT
 12

	)

35151 
	#UART_URXD_OVRRUN_MASK
 0x2000u

	)

35152 
	#UART_URXD_OVRRUN_SHIFT
 13

	)

35153 
	#UART_URXD_ERR_MASK
 0x4000u

	)

35154 
	#UART_URXD_ERR_SHIFT
 14

	)

35155 
	#UART_URXD_CHARRDY_MASK
 0x8000u

	)

35156 
	#UART_URXD_CHARRDY_SHIFT
 15

	)

35158 
	#UART_UTXD_TX_DATA_MASK
 0xFFu

	)

35159 
	#UART_UTXD_TX_DATA_SHIFT
 0

	)

35160 
	#UART_UTXD_TX_DATA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
UART_UTXD_TX_DATA_SHIFT
))&
UART_UTXD_TX_DATA_MASK
)

	)

35162 
	#UART_UCR1_UARTEN_MASK
 0x1u

	)

35163 
	#UART_UCR1_UARTEN_SHIFT
 0

	)

35164 
	#UART_UCR1_DOZE_MASK
 0x2u

	)

35165 
	#UART_UCR1_DOZE_SHIFT
 1

	)

35166 
	#UART_UCR1_ATDMAEN_MASK
 0x4u

	)

35167 
	#UART_UCR1_ATDMAEN_SHIFT
 2

	)

35168 
	#UART_UCR1_TXDMAEN_MASK
 0x8u

	)

35169 
	#UART_UCR1_TXDMAEN_SHIFT
 3

	)

35170 
	#UART_UCR1_SNDBRK_MASK
 0x10u

	)

35171 
	#UART_UCR1_SNDBRK_SHIFT
 4

	)

35172 
	#UART_UCR1_RTSDEN_MASK
 0x20u

	)

35173 
	#UART_UCR1_RTSDEN_SHIFT
 5

	)

35174 
	#UART_UCR1_TXMPTYEN_MASK
 0x40u

	)

35175 
	#UART_UCR1_TXMPTYEN_SHIFT
 6

	)

35176 
	#UART_UCR1_IREN_MASK
 0x80u

	)

35177 
	#UART_UCR1_IREN_SHIFT
 7

	)

35178 
	#UART_UCR1_RXDMAEN_MASK
 0x100u

	)

35179 
	#UART_UCR1_RXDMAEN_SHIFT
 8

	)

35180 
	#UART_UCR1_RRDYEN_MASK
 0x200u

	)

35181 
	#UART_UCR1_RRDYEN_SHIFT
 9

	)

35182 
	#UART_UCR1_ICD_MASK
 0xC00u

	)

35183 
	#UART_UCR1_ICD_SHIFT
 10

	)

35184 
	#UART_UCR1_ICD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
UART_UCR1_ICD_SHIFT
))&
UART_UCR1_ICD_MASK
)

	)

35185 
	#UART_UCR1_IDEN_MASK
 0x1000u

	)

35186 
	#UART_UCR1_IDEN_SHIFT
 12

	)

35187 
	#UART_UCR1_TRDYEN_MASK
 0x2000u

	)

35188 
	#UART_UCR1_TRDYEN_SHIFT
 13

	)

35189 
	#UART_UCR1_ADBR_MASK
 0x4000u

	)

35190 
	#UART_UCR1_ADBR_SHIFT
 14

	)

35191 
	#UART_UCR1_ADEN_MASK
 0x8000u

	)

35192 
	#UART_UCR1_ADEN_SHIFT
 15

	)

35194 
	#UART_UCR2_SRST_MASK
 0x1u

	)

35195 
	#UART_UCR2_SRST_SHIFT
 0

	)

35196 
	#UART_UCR2_RXEN_MASK
 0x2u

	)

35197 
	#UART_UCR2_RXEN_SHIFT
 1

	)

35198 
	#UART_UCR2_TXEN_MASK
 0x4u

	)

35199 
	#UART_UCR2_TXEN_SHIFT
 2

	)

35200 
	#UART_UCR2_ATEN_MASK
 0x8u

	)

35201 
	#UART_UCR2_ATEN_SHIFT
 3

	)

35202 
	#UART_UCR2_RTSEN_MASK
 0x10u

	)

35203 
	#UART_UCR2_RTSEN_SHIFT
 4

	)

35204 
	#UART_UCR2_WS_MASK
 0x20u

	)

35205 
	#UART_UCR2_WS_SHIFT
 5

	)

35206 
	#UART_UCR2_STPB_MASK
 0x40u

	)

35207 
	#UART_UCR2_STPB_SHIFT
 6

	)

35208 
	#UART_UCR2_PROE_MASK
 0x80u

	)

35209 
	#UART_UCR2_PROE_SHIFT
 7

	)

35210 
	#UART_UCR2_PREN_MASK
 0x100u

	)

35211 
	#UART_UCR2_PREN_SHIFT
 8

	)

35212 
	#UART_UCR2_RTEC_MASK
 0x600u

	)

35213 
	#UART_UCR2_RTEC_SHIFT
 9

	)

35214 
	#UART_UCR2_RTEC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
UART_UCR2_RTEC_SHIFT
))&
UART_UCR2_RTEC_MASK
)

	)

35215 
	#UART_UCR2_ESCEN_MASK
 0x800u

	)

35216 
	#UART_UCR2_ESCEN_SHIFT
 11

	)

35217 
	#UART_UCR2_CTS_MASK
 0x1000u

	)

35218 
	#UART_UCR2_CTS_SHIFT
 12

	)

35219 
	#UART_UCR2_CTSC_MASK
 0x2000u

	)

35220 
	#UART_UCR2_CTSC_SHIFT
 13

	)

35221 
	#UART_UCR2_IRTS_MASK
 0x4000u

	)

35222 
	#UART_UCR2_IRTS_SHIFT
 14

	)

35223 
	#UART_UCR2_ESCI_MASK
 0x8000u

	)

35224 
	#UART_UCR2_ESCI_SHIFT
 15

	)

35226 
	#UART_UCR3_ACIEN_MASK
 0x1u

	)

35227 
	#UART_UCR3_ACIEN_SHIFT
 0

	)

35228 
	#UART_UCR3_INVT_MASK
 0x2u

	)

35229 
	#UART_UCR3_INVT_SHIFT
 1

	)

35230 
	#UART_UCR3_RXDMUXSEL_MASK
 0x4u

	)

35231 
	#UART_UCR3_RXDMUXSEL_SHIFT
 2

	)

35232 
	#UART_UCR3_DTRDEN_MASK
 0x8u

	)

35233 
	#UART_UCR3_DTRDEN_SHIFT
 3

	)

35234 
	#UART_UCR3_AWAKEN_MASK
 0x10u

	)

35235 
	#UART_UCR3_AWAKEN_SHIFT
 4

	)

35236 
	#UART_UCR3_AIRINTEN_MASK
 0x20u

	)

35237 
	#UART_UCR3_AIRINTEN_SHIFT
 5

	)

35238 
	#UART_UCR3_RXDSEN_MASK
 0x40u

	)

35239 
	#UART_UCR3_RXDSEN_SHIFT
 6

	)

35240 
	#UART_UCR3_ADNIMP_MASK
 0x80u

	)

35241 
	#UART_UCR3_ADNIMP_SHIFT
 7

	)

35242 
	#UART_UCR3_RI_MASK
 0x100u

	)

35243 
	#UART_UCR3_RI_SHIFT
 8

	)

35244 
	#UART_UCR3_DCD_MASK
 0x200u

	)

35245 
	#UART_UCR3_DCD_SHIFT
 9

	)

35246 
	#UART_UCR3_DSR_MASK
 0x400u

	)

35247 
	#UART_UCR3_DSR_SHIFT
 10

	)

35248 
	#UART_UCR3_FRAERREN_MASK
 0x800u

	)

35249 
	#UART_UCR3_FRAERREN_SHIFT
 11

	)

35250 
	#UART_UCR3_PARERREN_MASK
 0x1000u

	)

35251 
	#UART_UCR3_PARERREN_SHIFT
 12

	)

35252 
	#UART_UCR3_DTREN_MASK
 0x2000u

	)

35253 
	#UART_UCR3_DTREN_SHIFT
 13

	)

35254 
	#UART_UCR3_DPEC_MASK
 0xC000u

	)

35255 
	#UART_UCR3_DPEC_SHIFT
 14

	)

35256 
	#UART_UCR3_DPEC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
UART_UCR3_DPEC_SHIFT
))&
UART_UCR3_DPEC_MASK
)

	)

35258 
	#UART_UCR4_DREN_MASK
 0x1u

	)

35259 
	#UART_UCR4_DREN_SHIFT
 0

	)

35260 
	#UART_UCR4_OREN_MASK
 0x2u

	)

35261 
	#UART_UCR4_OREN_SHIFT
 1

	)

35262 
	#UART_UCR4_BKEN_MASK
 0x4u

	)

35263 
	#UART_UCR4_BKEN_SHIFT
 2

	)

35264 
	#UART_UCR4_TCEN_MASK
 0x8u

	)

35265 
	#UART_UCR4_TCEN_SHIFT
 3

	)

35266 
	#UART_UCR4_LPBYP_MASK
 0x10u

	)

35267 
	#UART_UCR4_LPBYP_SHIFT
 4

	)

35268 
	#UART_UCR4_IRSC_MASK
 0x20u

	)

35269 
	#UART_UCR4_IRSC_SHIFT
 5

	)

35270 
	#UART_UCR4_IDDMAEN_MASK
 0x40u

	)

35271 
	#UART_UCR4_IDDMAEN_SHIFT
 6

	)

35272 
	#UART_UCR4_WKEN_MASK
 0x80u

	)

35273 
	#UART_UCR4_WKEN_SHIFT
 7

	)

35274 
	#UART_UCR4_ENIRI_MASK
 0x100u

	)

35275 
	#UART_UCR4_ENIRI_SHIFT
 8

	)

35276 
	#UART_UCR4_INVR_MASK
 0x200u

	)

35277 
	#UART_UCR4_INVR_SHIFT
 9

	)

35278 
	#UART_UCR4_CTSTL_MASK
 0xFC00u

	)

35279 
	#UART_UCR4_CTSTL_SHIFT
 10

	)

35280 
	#UART_UCR4_CTSTL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
UART_UCR4_CTSTL_SHIFT
))&
UART_UCR4_CTSTL_MASK
)

	)

35282 
	#UART_UFCR_RXTL_MASK
 0x3Fu

	)

35283 
	#UART_UFCR_RXTL_SHIFT
 0

	)

35284 
	#UART_UFCR_RXTL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
UART_UFCR_RXTL_SHIFT
))&
UART_UFCR_RXTL_MASK
)

	)

35285 
	#UART_UFCR_DCEDTE_MASK
 0x40u

	)

35286 
	#UART_UFCR_DCEDTE_SHIFT
 6

	)

35287 
	#UART_UFCR_RFDIV_MASK
 0x380u

	)

35288 
	#UART_UFCR_RFDIV_SHIFT
 7

	)

35289 
	#UART_UFCR_RFDIV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
UART_UFCR_RFDIV_SHIFT
))&
UART_UFCR_RFDIV_MASK
)

	)

35290 
	#UART_UFCR_TXTL_MASK
 0xFC00u

	)

35291 
	#UART_UFCR_TXTL_SHIFT
 10

	)

35292 
	#UART_UFCR_TXTL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
UART_UFCR_TXTL_SHIFT
))&
UART_UFCR_TXTL_MASK
)

	)

35294 
	#UART_USR1_SAD_MASK
 0x8u

	)

35295 
	#UART_USR1_SAD_SHIFT
 3

	)

35296 
	#UART_USR1_AWAKE_MASK
 0x10u

	)

35297 
	#UART_USR1_AWAKE_SHIFT
 4

	)

35298 
	#UART_USR1_AIRINT_MASK
 0x20u

	)

35299 
	#UART_USR1_AIRINT_SHIFT
 5

	)

35300 
	#UART_USR1_RXDS_MASK
 0x40u

	)

35301 
	#UART_USR1_RXDS_SHIFT
 6

	)

35302 
	#UART_USR1_DTRD_MASK
 0x80u

	)

35303 
	#UART_USR1_DTRD_SHIFT
 7

	)

35304 
	#UART_USR1_AGTIM_MASK
 0x100u

	)

35305 
	#UART_USR1_AGTIM_SHIFT
 8

	)

35306 
	#UART_USR1_RRDY_MASK
 0x200u

	)

35307 
	#UART_USR1_RRDY_SHIFT
 9

	)

35308 
	#UART_USR1_FRAMERR_MASK
 0x400u

	)

35309 
	#UART_USR1_FRAMERR_SHIFT
 10

	)

35310 
	#UART_USR1_ESCF_MASK
 0x800u

	)

35311 
	#UART_USR1_ESCF_SHIFT
 11

	)

35312 
	#UART_USR1_RTSD_MASK
 0x1000u

	)

35313 
	#UART_USR1_RTSD_SHIFT
 12

	)

35314 
	#UART_USR1_TRDY_MASK
 0x2000u

	)

35315 
	#UART_USR1_TRDY_SHIFT
 13

	)

35316 
	#UART_USR1_RTSS_MASK
 0x4000u

	)

35317 
	#UART_USR1_RTSS_SHIFT
 14

	)

35318 
	#UART_USR1_PARITYERR_MASK
 0x8000u

	)

35319 
	#UART_USR1_PARITYERR_SHIFT
 15

	)

35321 
	#UART_USR2_RDR_MASK
 0x1u

	)

35322 
	#UART_USR2_RDR_SHIFT
 0

	)

35323 
	#UART_USR2_ORE_MASK
 0x2u

	)

35324 
	#UART_USR2_ORE_SHIFT
 1

	)

35325 
	#UART_USR2_BRCD_MASK
 0x4u

	)

35326 
	#UART_USR2_BRCD_SHIFT
 2

	)

35327 
	#UART_USR2_TXDC_MASK
 0x8u

	)

35328 
	#UART_USR2_TXDC_SHIFT
 3

	)

35329 
	#UART_USR2_RTSF_MASK
 0x10u

	)

35330 
	#UART_USR2_RTSF_SHIFT
 4

	)

35331 
	#UART_USR2_DCDIN_MASK
 0x20u

	)

35332 
	#UART_USR2_DCDIN_SHIFT
 5

	)

35333 
	#UART_USR2_DCDDELT_MASK
 0x40u

	)

35334 
	#UART_USR2_DCDDELT_SHIFT
 6

	)

35335 
	#UART_USR2_WAKE_MASK
 0x80u

	)

35336 
	#UART_USR2_WAKE_SHIFT
 7

	)

35337 
	#UART_USR2_IRINT_MASK
 0x100u

	)

35338 
	#UART_USR2_IRINT_SHIFT
 8

	)

35339 
	#UART_USR2_RIIN_MASK
 0x200u

	)

35340 
	#UART_USR2_RIIN_SHIFT
 9

	)

35341 
	#UART_USR2_RIDELT_MASK
 0x400u

	)

35342 
	#UART_USR2_RIDELT_SHIFT
 10

	)

35343 
	#UART_USR2_ACST_MASK
 0x800u

	)

35344 
	#UART_USR2_ACST_SHIFT
 11

	)

35345 
	#UART_USR2_IDLE_MASK
 0x1000u

	)

35346 
	#UART_USR2_IDLE_SHIFT
 12

	)

35347 
	#UART_USR2_DTRF_MASK
 0x2000u

	)

35348 
	#UART_USR2_DTRF_SHIFT
 13

	)

35349 
	#UART_USR2_TXFE_MASK
 0x4000u

	)

35350 
	#UART_USR2_TXFE_SHIFT
 14

	)

35351 
	#UART_USR2_ADET_MASK
 0x8000u

	)

35352 
	#UART_USR2_ADET_SHIFT
 15

	)

35354 
	#UART_UESC_ESC_CHAR_MASK
 0xFFu

	)

35355 
	#UART_UESC_ESC_CHAR_SHIFT
 0

	)

35356 
	#UART_UESC_ESC_CHAR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
UART_UESC_ESC_CHAR_SHIFT
))&
UART_UESC_ESC_CHAR_MASK
)

	)

35358 
	#UART_UTIM_TIM_MASK
 0xFFFu

	)

35359 
	#UART_UTIM_TIM_SHIFT
 0

	)

35360 
	#UART_UTIM_TIM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
UART_UTIM_TIM_SHIFT
))&
UART_UTIM_TIM_MASK
)

	)

35362 
	#UART_UBIR_INC_MASK
 0xFFFFu

	)

35363 
	#UART_UBIR_INC_SHIFT
 0

	)

35364 
	#UART_UBIR_INC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
UART_UBIR_INC_SHIFT
))&
UART_UBIR_INC_MASK
)

	)

35366 
	#UART_UBMR_MOD_MASK
 0xFFFFu

	)

35367 
	#UART_UBMR_MOD_SHIFT
 0

	)

35368 
	#UART_UBMR_MOD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
UART_UBMR_MOD_SHIFT
))&
UART_UBMR_MOD_MASK
)

	)

35370 
	#UART_UBRC_BCNT_MASK
 0xFFFFu

	)

35371 
	#UART_UBRC_BCNT_SHIFT
 0

	)

35372 
	#UART_UBRC_BCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
UART_UBRC_BCNT_SHIFT
))&
UART_UBRC_BCNT_MASK
)

	)

35374 
	#UART_ONEMS_ONEMS_MASK
 0xFFFFFFu

	)

35375 
	#UART_ONEMS_ONEMS_SHIFT
 0

	)

35376 
	#UART_ONEMS_ONEMS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
UART_ONEMS_ONEMS_SHIFT
))&
UART_ONEMS_ONEMS_MASK
)

	)

35378 
	#UART_UTS_SOFTRST_MASK
 0x1u

	)

35379 
	#UART_UTS_SOFTRST_SHIFT
 0

	)

35380 
	#UART_UTS_RXFULL_MASK
 0x8u

	)

35381 
	#UART_UTS_RXFULL_SHIFT
 3

	)

35382 
	#UART_UTS_TXFULL_MASK
 0x10u

	)

35383 
	#UART_UTS_TXFULL_SHIFT
 4

	)

35384 
	#UART_UTS_RXEMPTY_MASK
 0x20u

	)

35385 
	#UART_UTS_RXEMPTY_SHIFT
 5

	)

35386 
	#UART_UTS_TXEMPTY_MASK
 0x40u

	)

35387 
	#UART_UTS_TXEMPTY_SHIFT
 6

	)

35388 
	#UART_UTS_RXDBG_MASK
 0x200u

	)

35389 
	#UART_UTS_RXDBG_SHIFT
 9

	)

35390 
	#UART_UTS_LOOPIR_MASK
 0x400u

	)

35391 
	#UART_UTS_LOOPIR_SHIFT
 10

	)

35392 
	#UART_UTS_DBGEN_MASK
 0x800u

	)

35393 
	#UART_UTS_DBGEN_SHIFT
 11

	)

35394 
	#UART_UTS_LOOP_MASK
 0x1000u

	)

35395 
	#UART_UTS_LOOP_SHIFT
 12

	)

35396 
	#UART_UTS_FRCPERR_MASK
 0x2000u

	)

35397 
	#UART_UTS_FRCPERR_SHIFT
 13

	)

35399 
	#UART_UMCR_MDEN_MASK
 0x1u

	)

35400 
	#UART_UMCR_MDEN_SHIFT
 0

	)

35401 
	#UART_UMCR_SLAM_MASK
 0x2u

	)

35402 
	#UART_UMCR_SLAM_SHIFT
 1

	)

35403 
	#UART_UMCR_TXB8_MASK
 0x4u

	)

35404 
	#UART_UMCR_TXB8_SHIFT
 2

	)

35405 
	#UART_UMCR_SADEN_MASK
 0x8u

	)

35406 
	#UART_UMCR_SADEN_SHIFT
 3

	)

35407 
	#UART_UMCR_SLADDR_MASK
 0xFF00u

	)

35408 
	#UART_UMCR_SLADDR_SHIFT
 8

	)

35409 
	#UART_UMCR_SLADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
UART_UMCR_SLADDR_SHIFT
))&
UART_UMCR_SLADDR_MASK
)

	)

35417 
	#UART1_BASE
 (0x42020000u)

	)

35419 
	#UART1
 ((
UART_Ty≥
 *)
UART1_BASE
)

	)

35420 
	#UART1_BASE_PTR
 (
UART1
)

	)

35422 
	#UART2_BASE
 (0x421E8000u)

	)

35424 
	#UART2
 ((
UART_Ty≥
 *)
UART2_BASE
)

	)

35425 
	#UART2_BASE_PTR
 (
UART2
)

	)

35427 
	#UART3_BASE
 (0x421EC000u)

	)

35429 
	#UART3
 ((
UART_Ty≥
 *)
UART3_BASE
)

	)

35430 
	#UART3_BASE_PTR
 (
UART3
)

	)

35432 
	#UART4_BASE
 (0x421F0000u)

	)

35434 
	#UART4
 ((
UART_Ty≥
 *)
UART4_BASE
)

	)

35435 
	#UART4_BASE_PTR
 (
UART4
)

	)

35437 
	#UART5_BASE
 (0x421F4000u)

	)

35439 
	#UART5
 ((
UART_Ty≥
 *)
UART5_BASE
)

	)

35440 
	#UART5_BASE_PTR
 (
UART5
)

	)

35442 
	#UART6_BASE
 (0x422A0000u)

	)

35444 
	#UART6
 ((
UART_Ty≥
 *)
UART6_BASE
)

	)

35445 
	#UART6_BASE_PTR
 (
UART6
)

	)

35447 
	#UART_BASE_ADDRS
 { 
UART1_BASE
, 
UART2_BASE
, 
UART3_BASE
, 
UART4_BASE
, 
UART5_BASE
, 
UART6_BASE
 }

	)

35449 
	#UART_BASE_PTRS
 { 
UART1
, 
UART2
, 
UART3
, 
UART4
, 
UART5
, 
UART6
 }

	)

35451 
	#UART_IRQS
 { 
UART1_IRQn
, 
UART2_IRQn
, 
UART3_IRQn
, 
UART4_IRQn
, 
UART5_IRQn
, 
UART6_IRQn
 }

	)

35464 
	#UART1_URXD
 
	`UART_URXD_REG
(
UART1_BASE_PTR
)

	)

35465 
	#UART1_UTXD
 
	`UART_UTXD_REG
(
UART1_BASE_PTR
)

	)

35466 
	#UART1_UCR1
 
	`UART_UCR1_REG
(
UART1_BASE_PTR
)

	)

35467 
	#UART1_UCR2
 
	`UART_UCR2_REG
(
UART1_BASE_PTR
)

	)

35468 
	#UART1_UCR3
 
	`UART_UCR3_REG
(
UART1_BASE_PTR
)

	)

35469 
	#UART1_UCR4
 
	`UART_UCR4_REG
(
UART1_BASE_PTR
)

	)

35470 
	#UART1_UFCR
 
	`UART_UFCR_REG
(
UART1_BASE_PTR
)

	)

35471 
	#UART1_USR1
 
	`UART_USR1_REG
(
UART1_BASE_PTR
)

	)

35472 
	#UART1_USR2
 
	`UART_USR2_REG
(
UART1_BASE_PTR
)

	)

35473 
	#UART1_UESC
 
	`UART_UESC_REG
(
UART1_BASE_PTR
)

	)

35474 
	#UART1_UTIM
 
	`UART_UTIM_REG
(
UART1_BASE_PTR
)

	)

35475 
	#UART1_UBIR
 
	`UART_UBIR_REG
(
UART1_BASE_PTR
)

	)

35476 
	#UART1_UBMR
 
	`UART_UBMR_REG
(
UART1_BASE_PTR
)

	)

35477 
	#UART1_UBRC
 
	`UART_UBRC_REG
(
UART1_BASE_PTR
)

	)

35478 
	#UART1_ONEMS
 
	`UART_ONEMS_REG
(
UART1_BASE_PTR
)

	)

35479 
	#UART1_UTS
 
	`UART_UTS_REG
(
UART1_BASE_PTR
)

	)

35480 
	#UART1_UMCR
 
	`UART_UMCR_REG
(
UART1_BASE_PTR
)

	)

35482 
	#UART2_URXD
 
	`UART_URXD_REG
(
UART2_BASE_PTR
)

	)

35483 
	#UART2_UTXD
 
	`UART_UTXD_REG
(
UART2_BASE_PTR
)

	)

35484 
	#UART2_UCR1
 
	`UART_UCR1_REG
(
UART2_BASE_PTR
)

	)

35485 
	#UART2_UCR2
 
	`UART_UCR2_REG
(
UART2_BASE_PTR
)

	)

35486 
	#UART2_UCR3
 
	`UART_UCR3_REG
(
UART2_BASE_PTR
)

	)

35487 
	#UART2_UCR4
 
	`UART_UCR4_REG
(
UART2_BASE_PTR
)

	)

35488 
	#UART2_UFCR
 
	`UART_UFCR_REG
(
UART2_BASE_PTR
)

	)

35489 
	#UART2_USR1
 
	`UART_USR1_REG
(
UART2_BASE_PTR
)

	)

35490 
	#UART2_USR2
 
	`UART_USR2_REG
(
UART2_BASE_PTR
)

	)

35491 
	#UART2_UESC
 
	`UART_UESC_REG
(
UART2_BASE_PTR
)

	)

35492 
	#UART2_UTIM
 
	`UART_UTIM_REG
(
UART2_BASE_PTR
)

	)

35493 
	#UART2_UBIR
 
	`UART_UBIR_REG
(
UART2_BASE_PTR
)

	)

35494 
	#UART2_UBMR
 
	`UART_UBMR_REG
(
UART2_BASE_PTR
)

	)

35495 
	#UART2_UBRC
 
	`UART_UBRC_REG
(
UART2_BASE_PTR
)

	)

35496 
	#UART2_ONEMS
 
	`UART_ONEMS_REG
(
UART2_BASE_PTR
)

	)

35497 
	#UART2_UTS
 
	`UART_UTS_REG
(
UART2_BASE_PTR
)

	)

35498 
	#UART2_UMCR
 
	`UART_UMCR_REG
(
UART2_BASE_PTR
)

	)

35500 
	#UART3_URXD
 
	`UART_URXD_REG
(
UART3_BASE_PTR
)

	)

35501 
	#UART3_UTXD
 
	`UART_UTXD_REG
(
UART3_BASE_PTR
)

	)

35502 
	#UART3_UCR1
 
	`UART_UCR1_REG
(
UART3_BASE_PTR
)

	)

35503 
	#UART3_UCR2
 
	`UART_UCR2_REG
(
UART3_BASE_PTR
)

	)

35504 
	#UART3_UCR3
 
	`UART_UCR3_REG
(
UART3_BASE_PTR
)

	)

35505 
	#UART3_UCR4
 
	`UART_UCR4_REG
(
UART3_BASE_PTR
)

	)

35506 
	#UART3_UFCR
 
	`UART_UFCR_REG
(
UART3_BASE_PTR
)

	)

35507 
	#UART3_USR1
 
	`UART_USR1_REG
(
UART3_BASE_PTR
)

	)

35508 
	#UART3_USR2
 
	`UART_USR2_REG
(
UART3_BASE_PTR
)

	)

35509 
	#UART3_UESC
 
	`UART_UESC_REG
(
UART3_BASE_PTR
)

	)

35510 
	#UART3_UTIM
 
	`UART_UTIM_REG
(
UART3_BASE_PTR
)

	)

35511 
	#UART3_UBIR
 
	`UART_UBIR_REG
(
UART3_BASE_PTR
)

	)

35512 
	#UART3_UBMR
 
	`UART_UBMR_REG
(
UART3_BASE_PTR
)

	)

35513 
	#UART3_UBRC
 
	`UART_UBRC_REG
(
UART3_BASE_PTR
)

	)

35514 
	#UART3_ONEMS
 
	`UART_ONEMS_REG
(
UART3_BASE_PTR
)

	)

35515 
	#UART3_UTS
 
	`UART_UTS_REG
(
UART3_BASE_PTR
)

	)

35516 
	#UART3_UMCR
 
	`UART_UMCR_REG
(
UART3_BASE_PTR
)

	)

35518 
	#UART4_URXD
 
	`UART_URXD_REG
(
UART4_BASE_PTR
)

	)

35519 
	#UART4_UTXD
 
	`UART_UTXD_REG
(
UART4_BASE_PTR
)

	)

35520 
	#UART4_UCR1
 
	`UART_UCR1_REG
(
UART4_BASE_PTR
)

	)

35521 
	#UART4_UCR2
 
	`UART_UCR2_REG
(
UART4_BASE_PTR
)

	)

35522 
	#UART4_UCR3
 
	`UART_UCR3_REG
(
UART4_BASE_PTR
)

	)

35523 
	#UART4_UCR4
 
	`UART_UCR4_REG
(
UART4_BASE_PTR
)

	)

35524 
	#UART4_UFCR
 
	`UART_UFCR_REG
(
UART4_BASE_PTR
)

	)

35525 
	#UART4_USR1
 
	`UART_USR1_REG
(
UART4_BASE_PTR
)

	)

35526 
	#UART4_USR2
 
	`UART_USR2_REG
(
UART4_BASE_PTR
)

	)

35527 
	#UART4_UESC
 
	`UART_UESC_REG
(
UART4_BASE_PTR
)

	)

35528 
	#UART4_UTIM
 
	`UART_UTIM_REG
(
UART4_BASE_PTR
)

	)

35529 
	#UART4_UBIR
 
	`UART_UBIR_REG
(
UART4_BASE_PTR
)

	)

35530 
	#UART4_UBMR
 
	`UART_UBMR_REG
(
UART4_BASE_PTR
)

	)

35531 
	#UART4_UBRC
 
	`UART_UBRC_REG
(
UART4_BASE_PTR
)

	)

35532 
	#UART4_ONEMS
 
	`UART_ONEMS_REG
(
UART4_BASE_PTR
)

	)

35533 
	#UART4_UTS
 
	`UART_UTS_REG
(
UART4_BASE_PTR
)

	)

35534 
	#UART4_UMCR
 
	`UART_UMCR_REG
(
UART4_BASE_PTR
)

	)

35536 
	#UART5_URXD
 
	`UART_URXD_REG
(
UART5_BASE_PTR
)

	)

35537 
	#UART5_UTXD
 
	`UART_UTXD_REG
(
UART5_BASE_PTR
)

	)

35538 
	#UART5_UCR1
 
	`UART_UCR1_REG
(
UART5_BASE_PTR
)

	)

35539 
	#UART5_UCR2
 
	`UART_UCR2_REG
(
UART5_BASE_PTR
)

	)

35540 
	#UART5_UCR3
 
	`UART_UCR3_REG
(
UART5_BASE_PTR
)

	)

35541 
	#UART5_UCR4
 
	`UART_UCR4_REG
(
UART5_BASE_PTR
)

	)

35542 
	#UART5_UFCR
 
	`UART_UFCR_REG
(
UART5_BASE_PTR
)

	)

35543 
	#UART5_USR1
 
	`UART_USR1_REG
(
UART5_BASE_PTR
)

	)

35544 
	#UART5_USR2
 
	`UART_USR2_REG
(
UART5_BASE_PTR
)

	)

35545 
	#UART5_UESC
 
	`UART_UESC_REG
(
UART5_BASE_PTR
)

	)

35546 
	#UART5_UTIM
 
	`UART_UTIM_REG
(
UART5_BASE_PTR
)

	)

35547 
	#UART5_UBIR
 
	`UART_UBIR_REG
(
UART5_BASE_PTR
)

	)

35548 
	#UART5_UBMR
 
	`UART_UBMR_REG
(
UART5_BASE_PTR
)

	)

35549 
	#UART5_UBRC
 
	`UART_UBRC_REG
(
UART5_BASE_PTR
)

	)

35550 
	#UART5_ONEMS
 
	`UART_ONEMS_REG
(
UART5_BASE_PTR
)

	)

35551 
	#UART5_UTS
 
	`UART_UTS_REG
(
UART5_BASE_PTR
)

	)

35552 
	#UART5_UMCR
 
	`UART_UMCR_REG
(
UART5_BASE_PTR
)

	)

35554 
	#UART6_URXD
 
	`UART_URXD_REG
(
UART6_BASE_PTR
)

	)

35555 
	#UART6_UTXD
 
	`UART_UTXD_REG
(
UART6_BASE_PTR
)

	)

35556 
	#UART6_UCR1
 
	`UART_UCR1_REG
(
UART6_BASE_PTR
)

	)

35557 
	#UART6_UCR2
 
	`UART_UCR2_REG
(
UART6_BASE_PTR
)

	)

35558 
	#UART6_UCR3
 
	`UART_UCR3_REG
(
UART6_BASE_PTR
)

	)

35559 
	#UART6_UCR4
 
	`UART_UCR4_REG
(
UART6_BASE_PTR
)

	)

35560 
	#UART6_UFCR
 
	`UART_UFCR_REG
(
UART6_BASE_PTR
)

	)

35561 
	#UART6_USR1
 
	`UART_USR1_REG
(
UART6_BASE_PTR
)

	)

35562 
	#UART6_USR2
 
	`UART_USR2_REG
(
UART6_BASE_PTR
)

	)

35563 
	#UART6_UESC
 
	`UART_UESC_REG
(
UART6_BASE_PTR
)

	)

35564 
	#UART6_UTIM
 
	`UART_UTIM_REG
(
UART6_BASE_PTR
)

	)

35565 
	#UART6_UBIR
 
	`UART_UBIR_REG
(
UART6_BASE_PTR
)

	)

35566 
	#UART6_UBMR
 
	`UART_UBMR_REG
(
UART6_BASE_PTR
)

	)

35567 
	#UART6_UBRC
 
	`UART_UBRC_REG
(
UART6_BASE_PTR
)

	)

35568 
	#UART6_ONEMS
 
	`UART_ONEMS_REG
(
UART6_BASE_PTR
)

	)

35569 
	#UART6_UTS
 
	`UART_UTS_REG
(
UART6_BASE_PTR
)

	)

35570 
	#UART6_UMCR
 
	`UART_UMCR_REG
(
UART6_BASE_PTR
)

	)

35591 
__I
 
uöt32_t
 
	mUOG1_ID
;

35592 
__I
 
uöt32_t
 
	mUOG1_HWGENERAL
;

35593 
__I
 
uöt32_t
 
	mUOG1_HWHOST
;

35594 
__I
 
uöt32_t
 
	mUOG1_HWDEVICE
;

35595 
__I
 
uöt32_t
 
	mUOG1_HWTXBUF
;

35596 
__I
 
uöt32_t
 
	mUOG1_HWRXBUF
;

35597 
uöt8_t
 
	mRESERVED_0
[104];

35598 
__IO
 
uöt32_t
 
	mUOG1_GPTIMER0LD
;

35599 
__IO
 
uöt32_t
 
	mUOG1_GPTIMER0CTRL
;

35600 
__IO
 
uöt32_t
 
	mUOG1_GPTIMER1LD
;

35601 
__IO
 
uöt32_t
 
	mUOG1_GPTIMER1CTRL
;

35602 
__IO
 
uöt32_t
 
	mUOG1_SBUSCFG
;

35603 
uöt8_t
 
	mRESERVED_1
[108];

35604 
__I
 
uöt8_t
 
	mUOG1_CAPLENGTH
;

35605 
uöt8_t
 
	mRESERVED_2
[1];

35606 
__I
 
uöt16_t
 
	mUOG1_HCIVERSION
;

35607 
__I
 
uöt32_t
 
	mUOG1_HCSPARAMS
;

35608 
__I
 
uöt32_t
 
	mUOG1_HCCPARAMS
;

35609 
uöt8_t
 
	mRESERVED_3
[20];

35610 
__I
 
uöt16_t
 
	mUOG1_DCIVERSION
;

35611 
uöt8_t
 
	mRESERVED_4
[2];

35612 
__I
 
uöt32_t
 
	mUOG1_DCCPARAMS
;

35613 
uöt8_t
 
	mRESERVED_5
[24];

35614 
__IO
 
uöt32_t
 
	mUOG1_USBCMD
;

35615 
__IO
 
uöt32_t
 
	mUOG1_USBSTS
;

35616 
__IO
 
uöt32_t
 
	mUOG1_USBINTR
;

35617 
__IO
 
uöt32_t
 
	mUOG1_FRINDEX
;

35618 
uöt8_t
 
	mRESERVED_6
[4];

35620 
__IO
 
uöt32_t
 
	mUOG1_PERIODICLISTBASE
;

35621 
__IO
 
uöt32_t
 
	mUOG1_DEVICEADDR
;

35623 
uöt8_t
 
	mRESERVED_0
[4];

35624 
__IO
 
uöt32_t
 
	mUOG1_ASYNCLISTADDR
;

35625 } 
	mUOG1_ASYNCLISTADDR
;

35627 
uöt8_t
 
	mRESERVED_0
[4];

35628 
__IO
 
uöt32_t
 
	mUOG1_ENDPTLISTADDR
;

35629 } 
	mUOG1_ENDPTLISTADDR
;

35631 
uöt8_t
 
	mRESERVED_7
[4];

35632 
__IO
 
uöt32_t
 
	mUOG1_BURSTSIZE
;

35633 
__IO
 
uöt32_t
 
	mUOG1_TXFILLTUNING
;

35634 
uöt8_t
 
	mRESERVED_8
[16];

35635 
__IO
 
uöt32_t
 
	mUOG1_ENDPTNAK
;

35636 
__IO
 
uöt32_t
 
	mUOG1_ENDPTNAKEN
;

35637 
__IO
 
uöt32_t
 
	mUOG1_CONFIGFLAG
;

35638 
__IO
 
uöt32_t
 
	mUOG1_PORTSC1
;

35639 
uöt8_t
 
	mRESERVED_9
[28];

35640 
__IO
 
uöt32_t
 
	mUOG1_OTGSC
;

35641 
__IO
 
uöt32_t
 
	mUOG1_USBMODE
;

35642 
__IO
 
uöt32_t
 
	mUOG1_ENDPTSETUPSTAT
;

35643 
__IO
 
uöt32_t
 
	mUOG1_ENDPTPRIME
;

35644 
__IO
 
uöt32_t
 
	mUOG1_ENDPTFLUSH
;

35645 
__I
 
uöt32_t
 
	mUOG1_ENDPTSTAT
;

35646 
__IO
 
uöt32_t
 
	mUOG1_ENDPTCOMPLETE
;

35647 
__IO
 
uöt32_t
 
	mUOG1_ENDPTCTRL0
;

35648 
__IO
 
uöt32_t
 
	mUOG1_ENDPTCTRL1
;

35649 
__IO
 
uöt32_t
 
	mUOG1_ENDPTCTRL2
;

35650 
__IO
 
uöt32_t
 
	mUOG1_ENDPTCTRL3
;

35651 
__IO
 
uöt32_t
 
	mUOG1_ENDPTCTRL4
;

35652 
__IO
 
uöt32_t
 
	mUOG1_ENDPTCTRL5
;

35653 
__IO
 
uöt32_t
 
	mUOG1_ENDPTCTRL6
;

35654 
__IO
 
uöt32_t
 
	mUOG1_ENDPTCTRL7
;

35655 
uöt8_t
 
	mRESERVED_10
[32];

35656 
__I
 
uöt32_t
 
	mUOG2_ID
;

35657 
__I
 
uöt32_t
 
	mUOG2_HWGENERAL
;

35658 
__I
 
uöt32_t
 
	mUOG2_HWHOST
;

35659 
__I
 
uöt32_t
 
	mUOG2_HWDEVICE
;

35660 
__I
 
uöt32_t
 
	mUOG2_HWTXBUF
;

35661 
__I
 
uöt32_t
 
	mUOG2_HWRXBUF
;

35662 
uöt8_t
 
	mRESERVED_11
[104];

35663 
__IO
 
uöt32_t
 
	mUOG2_GPTIMER0LD
;

35664 
__IO
 
uöt32_t
 
	mUOG2_GPTIMER0CTRL
;

35665 
__IO
 
uöt32_t
 
	mUOG2_GPTIMER1LD
;

35666 
__IO
 
uöt32_t
 
	mUOG2_GPTIMER1CTRL
;

35667 
__IO
 
uöt32_t
 
	mUOG2_SBUSCFG
;

35668 
uöt8_t
 
	mRESERVED_12
[108];

35669 
__I
 
uöt8_t
 
	mUOG2_CAPLENGTH
;

35670 
uöt8_t
 
	mRESERVED_13
[1];

35671 
__I
 
uöt16_t
 
	mUOG2_HCIVERSION
;

35672 
__I
 
uöt32_t
 
	mUOG2_HCSPARAMS
;

35673 
__I
 
uöt32_t
 
	mUOG2_HCCPARAMS
;

35674 
uöt8_t
 
	mRESERVED_14
[20];

35675 
__I
 
uöt16_t
 
	mUOG2_DCIVERSION
;

35676 
uöt8_t
 
	mRESERVED_15
[2];

35677 
__I
 
uöt32_t
 
	mUOG2_DCCPARAMS
;

35678 
uöt8_t
 
	mRESERVED_16
[24];

35679 
__IO
 
uöt32_t
 
	mUOG2_USBCMD
;

35680 
__IO
 
uöt32_t
 
	mUOG2_USBSTS
;

35681 
__IO
 
uöt32_t
 
	mUOG2_USBINTR
;

35682 
__IO
 
uöt32_t
 
	mUOG2_FRINDEX
;

35683 
uöt8_t
 
	mRESERVED_17
[4];

35685 
__IO
 
uöt32_t
 
	mUOG2_PERIODICLISTBASE
;

35686 
__IO
 
uöt32_t
 
	mUOG2_DEVICEADDR
;

35688 
uöt8_t
 
	mRESERVED_0
[4];

35689 
__IO
 
uöt32_t
 
	mUOG2_ASYNCLISTADDR
;

35690 } 
	mUOG2_ASYNCLISTADDR
;

35692 
uöt8_t
 
	mRESERVED_0
[4];

35693 
__IO
 
uöt32_t
 
	mUOG2_ENDPTLISTADDR
;

35694 } 
	mUOG2_ENDPTLISTADDR
;

35696 
uöt8_t
 
	mRESERVED_18
[4];

35697 
__IO
 
uöt32_t
 
	mUOG2_BURSTSIZE
;

35698 
__IO
 
uöt32_t
 
	mUOG2_TXFILLTUNING
;

35699 
uöt8_t
 
	mRESERVED_19
[16];

35700 
__IO
 
uöt32_t
 
	mUOG2_ENDPTNAK
;

35701 
__IO
 
uöt32_t
 
	mUOG2_ENDPTNAKEN
;

35702 
__IO
 
uöt32_t
 
	mUOG2_CONFIGFLAG
;

35703 
__IO
 
uöt32_t
 
	mUOG2_PORTSC1
;

35704 
uöt8_t
 
	mRESERVED_20
[28];

35705 
__IO
 
uöt32_t
 
	mUOG2_OTGSC
;

35706 
__IO
 
uöt32_t
 
	mUOG2_USBMODE
;

35707 
__IO
 
uöt32_t
 
	mUOG2_ENDPTSETUPSTAT
;

35708 
__IO
 
uöt32_t
 
	mUOG2_ENDPTPRIME
;

35709 
__IO
 
uöt32_t
 
	mUOG2_ENDPTFLUSH
;

35710 
__I
 
uöt32_t
 
	mUOG2_ENDPTSTAT
;

35711 
__IO
 
uöt32_t
 
	mUOG2_ENDPTCOMPLETE
;

35712 
__IO
 
uöt32_t
 
	mUOG2_ENDPTCTRL0
;

35713 
__IO
 
uöt32_t
 
	mUOG2_ENDPTCTRL1
;

35714 
__IO
 
uöt32_t
 
	mUOG2_ENDPTCTRL2
;

35715 
__IO
 
uöt32_t
 
	mUOG2_ENDPTCTRL3
;

35716 
__IO
 
uöt32_t
 
	mUOG2_ENDPTCTRL4
;

35717 
__IO
 
uöt32_t
 
	mUOG2_ENDPTCTRL5
;

35718 
__IO
 
uöt32_t
 
	mUOG2_ENDPTCTRL6
;

35719 
__IO
 
uöt32_t
 
	mUOG2_ENDPTCTRL7
;

35720 
uöt8_t
 
	mRESERVED_21
[32];

35721 
__I
 
uöt32_t
 
	mUH1_ID
;

35722 
__I
 
uöt32_t
 
	mUH1_HWGENERAL
;

35723 
__I
 
uöt32_t
 
	mUH1_HWHOST
;

35724 
uöt8_t
 
	mRESERVED_22
[4];

35725 
__I
 
uöt32_t
 
	mUH1_HWTXBUF
;

35726 
__I
 
uöt32_t
 
	mUH1_HWRXBUF
;

35727 
uöt8_t
 
	mRESERVED_23
[104];

35728 
__IO
 
uöt32_t
 
	mUH1_GPTIMER0LD
;

35729 
__IO
 
uöt32_t
 
	mUH1_GPTIMER0CTRL
;

35730 
__IO
 
uöt32_t
 
	mUH1_GPTIMER1LD
;

35731 
__IO
 
uöt32_t
 
	mUH1_GPTIMER1CTRL
;

35732 
__IO
 
uöt32_t
 
	mUH1_SBUSCFG
;

35733 
uöt8_t
 
	mRESERVED_24
[108];

35734 
__I
 
uöt8_t
 
	mUH1_CAPLENGTH
;

35735 
uöt8_t
 
	mRESERVED_25
[1];

35736 
__I
 
uöt16_t
 
	mUH1_HCIVERSION
;

35737 
__I
 
uöt32_t
 
	mUH1_HCSPARAMS
;

35738 
__I
 
uöt32_t
 
	mUH1_HCCPARAMS
;

35739 
uöt8_t
 
	mRESERVED_26
[52];

35740 
__IO
 
uöt32_t
 
	mUH1_USBCMD
;

35741 
__IO
 
uöt32_t
 
	mUH1_USBSTS
;

35742 
__IO
 
uöt32_t
 
	mUH1_USBINTR
;

35743 
__IO
 
uöt32_t
 
	mUH1_FRINDEX
;

35744 
uöt8_t
 
	mRESERVED_27
[4];

35745 
__IO
 
uöt32_t
 
	mUH1_PERIODICLISTBASE
;

35746 
__IO
 
uöt32_t
 
	mUH1_ASYNCLISTADDR
;

35747 
uöt8_t
 
	mRESERVED_28
[4];

35748 
__IO
 
uöt32_t
 
	mUH1_BURSTSIZE
;

35749 
__IO
 
uöt32_t
 
	mUH1_TXFILLTUNING
;

35750 
uöt8_t
 
	mRESERVED_29
[24];

35751 
__IO
 
uöt32_t
 
	mUH1_CONFIGFLAG
;

35752 
__IO
 
uöt32_t
 
	mUH1_PORTSC1
;

35753 
uöt8_t
 
	mRESERVED_30
[32];

35754 
__IO
 
uöt32_t
 
	mUH1_USBMODE
;

35755 } 
	tUSBC_Ty≥
, *
	tUSBC_MemM≠På
;

35767 
	#USBC_UOG1_ID_REG
(
ba£
Ë((ba£)->
UOG1_ID
)

	)

35768 
	#USBC_UOG1_HWGENERAL_REG
(
ba£
Ë((ba£)->
UOG1_HWGENERAL
)

	)

35769 
	#USBC_UOG1_HWHOST_REG
(
ba£
Ë((ba£)->
UOG1_HWHOST
)

	)

35770 
	#USBC_UOG1_HWDEVICE_REG
(
ba£
Ë((ba£)->
UOG1_HWDEVICE
)

	)

35771 
	#USBC_UOG1_HWTXBUF_REG
(
ba£
Ë((ba£)->
UOG1_HWTXBUF
)

	)

35772 
	#USBC_UOG1_HWRXBUF_REG
(
ba£
Ë((ba£)->
UOG1_HWRXBUF
)

	)

35773 
	#USBC_UOG1_GPTIMER0LD_REG
(
ba£
Ë((ba£)->
UOG1_GPTIMER0LD
)

	)

35774 
	#USBC_UOG1_GPTIMER0CTRL_REG
(
ba£
Ë((ba£)->
UOG1_GPTIMER0CTRL
)

	)

35775 
	#USBC_UOG1_GPTIMER1LD_REG
(
ba£
Ë((ba£)->
UOG1_GPTIMER1LD
)

	)

35776 
	#USBC_UOG1_GPTIMER1CTRL_REG
(
ba£
Ë((ba£)->
UOG1_GPTIMER1CTRL
)

	)

35777 
	#USBC_UOG1_SBUSCFG_REG
(
ba£
Ë((ba£)->
UOG1_SBUSCFG
)

	)

35778 
	#USBC_UOG1_CAPLENGTH_REG
(
ba£
Ë((ba£)->
UOG1_CAPLENGTH
)

	)

35779 
	#USBC_UOG1_HCIVERSION_REG
(
ba£
Ë((ba£)->
UOG1_HCIVERSION
)

	)

35780 
	#USBC_UOG1_HCSPARAMS_REG
(
ba£
Ë((ba£)->
UOG1_HCSPARAMS
)

	)

35781 
	#USBC_UOG1_HCCPARAMS_REG
(
ba£
Ë((ba£)->
UOG1_HCCPARAMS
)

	)

35782 
	#USBC_UOG1_DCIVERSION_REG
(
ba£
Ë((ba£)->
UOG1_DCIVERSION
)

	)

35783 
	#USBC_UOG1_DCCPARAMS_REG
(
ba£
Ë((ba£)->
UOG1_DCCPARAMS
)

	)

35784 
	#USBC_UOG1_USBCMD_REG
(
ba£
Ë((ba£)->
UOG1_USBCMD
)

	)

35785 
	#USBC_UOG1_USBSTS_REG
(
ba£
Ë((ba£)->
UOG1_USBSTS
)

	)

35786 
	#USBC_UOG1_USBINTR_REG
(
ba£
Ë((ba£)->
UOG1_USBINTR
)

	)

35787 
	#USBC_UOG1_FRINDEX_REG
(
ba£
Ë((ba£)->
UOG1_FRINDEX
)

	)

35788 
	#USBC_UOG1_PERIODICLISTBASE_REG
(
ba£
Ë((ba£)->
UOG1_PERIODICLISTBASE
)

	)

35789 
	#USBC_UOG1_DEVICEADDR_REG
(
ba£
Ë((ba£)->
UOG1_DEVICEADDR
)

	)

35790 
	#USBC_UOG1_ASYNCLISTADDR_REG
(
ba£
Ë((ba£)->
UOG1_ASYNCLISTADDR
.UOG1_ASYNCLISTADDR)

	)

35791 
	#USBC_UOG1_ENDPTLISTADDR_REG
(
ba£
Ë((ba£)->
UOG1_ENDPTLISTADDR
.UOG1_ENDPTLISTADDR)

	)

35792 
	#USBC_UOG1_BURSTSIZE_REG
(
ba£
Ë((ba£)->
UOG1_BURSTSIZE
)

	)

35793 
	#USBC_UOG1_TXFILLTUNING_REG
(
ba£
Ë((ba£)->
UOG1_TXFILLTUNING
)

	)

35794 
	#USBC_UOG1_ENDPTNAK_REG
(
ba£
Ë((ba£)->
UOG1_ENDPTNAK
)

	)

35795 
	#USBC_UOG1_ENDPTNAKEN_REG
(
ba£
Ë((ba£)->
UOG1_ENDPTNAKEN
)

	)

35796 
	#USBC_UOG1_CONFIGFLAG_REG
(
ba£
Ë((ba£)->
UOG1_CONFIGFLAG
)

	)

35797 
	#USBC_UOG1_PORTSC1_REG
(
ba£
Ë((ba£)->
UOG1_PORTSC1
)

	)

35798 
	#USBC_UOG1_OTGSC_REG
(
ba£
Ë((ba£)->
UOG1_OTGSC
)

	)

35799 
	#USBC_UOG1_USBMODE_REG
(
ba£
Ë((ba£)->
UOG1_USBMODE
)

	)

35800 
	#USBC_UOG1_ENDPTSETUPSTAT_REG
(
ba£
Ë((ba£)->
UOG1_ENDPTSETUPSTAT
)

	)

35801 
	#USBC_UOG1_ENDPTPRIME_REG
(
ba£
Ë((ba£)->
UOG1_ENDPTPRIME
)

	)

35802 
	#USBC_UOG1_ENDPTFLUSH_REG
(
ba£
Ë((ba£)->
UOG1_ENDPTFLUSH
)

	)

35803 
	#USBC_UOG1_ENDPTSTAT_REG
(
ba£
Ë((ba£)->
UOG1_ENDPTSTAT
)

	)

35804 
	#USBC_UOG1_ENDPTCOMPLETE_REG
(
ba£
Ë((ba£)->
UOG1_ENDPTCOMPLETE
)

	)

35805 
	#USBC_UOG1_ENDPTCTRL0_REG
(
ba£
Ë((ba£)->
UOG1_ENDPTCTRL0
)

	)

35806 
	#USBC_UOG1_ENDPTCTRL1_REG
(
ba£
Ë((ba£)->
UOG1_ENDPTCTRL1
)

	)

35807 
	#USBC_UOG1_ENDPTCTRL2_REG
(
ba£
Ë((ba£)->
UOG1_ENDPTCTRL2
)

	)

35808 
	#USBC_UOG1_ENDPTCTRL3_REG
(
ba£
Ë((ba£)->
UOG1_ENDPTCTRL3
)

	)

35809 
	#USBC_UOG1_ENDPTCTRL4_REG
(
ba£
Ë((ba£)->
UOG1_ENDPTCTRL4
)

	)

35810 
	#USBC_UOG1_ENDPTCTRL5_REG
(
ba£
Ë((ba£)->
UOG1_ENDPTCTRL5
)

	)

35811 
	#USBC_UOG1_ENDPTCTRL6_REG
(
ba£
Ë((ba£)->
UOG1_ENDPTCTRL6
)

	)

35812 
	#USBC_UOG1_ENDPTCTRL7_REG
(
ba£
Ë((ba£)->
UOG1_ENDPTCTRL7
)

	)

35813 
	#USBC_UOG2_ID_REG
(
ba£
Ë((ba£)->
UOG2_ID
)

	)

35814 
	#USBC_UOG2_HWGENERAL_REG
(
ba£
Ë((ba£)->
UOG2_HWGENERAL
)

	)

35815 
	#USBC_UOG2_HWHOST_REG
(
ba£
Ë((ba£)->
UOG2_HWHOST
)

	)

35816 
	#USBC_UOG2_HWDEVICE_REG
(
ba£
Ë((ba£)->
UOG2_HWDEVICE
)

	)

35817 
	#USBC_UOG2_HWTXBUF_REG
(
ba£
Ë((ba£)->
UOG2_HWTXBUF
)

	)

35818 
	#USBC_UOG2_HWRXBUF_REG
(
ba£
Ë((ba£)->
UOG2_HWRXBUF
)

	)

35819 
	#USBC_UOG2_GPTIMER0LD_REG
(
ba£
Ë((ba£)->
UOG2_GPTIMER0LD
)

	)

35820 
	#USBC_UOG2_GPTIMER0CTRL_REG
(
ba£
Ë((ba£)->
UOG2_GPTIMER0CTRL
)

	)

35821 
	#USBC_UOG2_GPTIMER1LD_REG
(
ba£
Ë((ba£)->
UOG2_GPTIMER1LD
)

	)

35822 
	#USBC_UOG2_GPTIMER1CTRL_REG
(
ba£
Ë((ba£)->
UOG2_GPTIMER1CTRL
)

	)

35823 
	#USBC_UOG2_SBUSCFG_REG
(
ba£
Ë((ba£)->
UOG2_SBUSCFG
)

	)

35824 
	#USBC_UOG2_CAPLENGTH_REG
(
ba£
Ë((ba£)->
UOG2_CAPLENGTH
)

	)

35825 
	#USBC_UOG2_HCIVERSION_REG
(
ba£
Ë((ba£)->
UOG2_HCIVERSION
)

	)

35826 
	#USBC_UOG2_HCSPARAMS_REG
(
ba£
Ë((ba£)->
UOG2_HCSPARAMS
)

	)

35827 
	#USBC_UOG2_HCCPARAMS_REG
(
ba£
Ë((ba£)->
UOG2_HCCPARAMS
)

	)

35828 
	#USBC_UOG2_DCIVERSION_REG
(
ba£
Ë((ba£)->
UOG2_DCIVERSION
)

	)

35829 
	#USBC_UOG2_DCCPARAMS_REG
(
ba£
Ë((ba£)->
UOG2_DCCPARAMS
)

	)

35830 
	#USBC_UOG2_USBCMD_REG
(
ba£
Ë((ba£)->
UOG2_USBCMD
)

	)

35831 
	#USBC_UOG2_USBSTS_REG
(
ba£
Ë((ba£)->
UOG2_USBSTS
)

	)

35832 
	#USBC_UOG2_USBINTR_REG
(
ba£
Ë((ba£)->
UOG2_USBINTR
)

	)

35833 
	#USBC_UOG2_FRINDEX_REG
(
ba£
Ë((ba£)->
UOG2_FRINDEX
)

	)

35834 
	#USBC_UOG2_PERIODICLISTBASE_REG
(
ba£
Ë((ba£)->
UOG2_PERIODICLISTBASE
)

	)

35835 
	#USBC_UOG2_DEVICEADDR_REG
(
ba£
Ë((ba£)->
UOG2_DEVICEADDR
)

	)

35836 
	#USBC_UOG2_ASYNCLISTADDR_REG
(
ba£
Ë((ba£)->
UOG2_ASYNCLISTADDR
.UOG2_ASYNCLISTADDR)

	)

35837 
	#USBC_UOG2_ENDPTLISTADDR_REG
(
ba£
Ë((ba£)->
UOG2_ENDPTLISTADDR
.UOG2_ENDPTLISTADDR)

	)

35838 
	#USBC_UOG2_BURSTSIZE_REG
(
ba£
Ë((ba£)->
UOG2_BURSTSIZE
)

	)

35839 
	#USBC_UOG2_TXFILLTUNING_REG
(
ba£
Ë((ba£)->
UOG2_TXFILLTUNING
)

	)

35840 
	#USBC_UOG2_ENDPTNAK_REG
(
ba£
Ë((ba£)->
UOG2_ENDPTNAK
)

	)

35841 
	#USBC_UOG2_ENDPTNAKEN_REG
(
ba£
Ë((ba£)->
UOG2_ENDPTNAKEN
)

	)

35842 
	#USBC_UOG2_CONFIGFLAG_REG
(
ba£
Ë((ba£)->
UOG2_CONFIGFLAG
)

	)

35843 
	#USBC_UOG2_PORTSC1_REG
(
ba£
Ë((ba£)->
UOG2_PORTSC1
)

	)

35844 
	#USBC_UOG2_OTGSC_REG
(
ba£
Ë((ba£)->
UOG2_OTGSC
)

	)

35845 
	#USBC_UOG2_USBMODE_REG
(
ba£
Ë((ba£)->
UOG2_USBMODE
)

	)

35846 
	#USBC_UOG2_ENDPTSETUPSTAT_REG
(
ba£
Ë((ba£)->
UOG2_ENDPTSETUPSTAT
)

	)

35847 
	#USBC_UOG2_ENDPTPRIME_REG
(
ba£
Ë((ba£)->
UOG2_ENDPTPRIME
)

	)

35848 
	#USBC_UOG2_ENDPTFLUSH_REG
(
ba£
Ë((ba£)->
UOG2_ENDPTFLUSH
)

	)

35849 
	#USBC_UOG2_ENDPTSTAT_REG
(
ba£
Ë((ba£)->
UOG2_ENDPTSTAT
)

	)

35850 
	#USBC_UOG2_ENDPTCOMPLETE_REG
(
ba£
Ë((ba£)->
UOG2_ENDPTCOMPLETE
)

	)

35851 
	#USBC_UOG2_ENDPTCTRL0_REG
(
ba£
Ë((ba£)->
UOG2_ENDPTCTRL0
)

	)

35852 
	#USBC_UOG2_ENDPTCTRL1_REG
(
ba£
Ë((ba£)->
UOG2_ENDPTCTRL1
)

	)

35853 
	#USBC_UOG2_ENDPTCTRL2_REG
(
ba£
Ë((ba£)->
UOG2_ENDPTCTRL2
)

	)

35854 
	#USBC_UOG2_ENDPTCTRL3_REG
(
ba£
Ë((ba£)->
UOG2_ENDPTCTRL3
)

	)

35855 
	#USBC_UOG2_ENDPTCTRL4_REG
(
ba£
Ë((ba£)->
UOG2_ENDPTCTRL4
)

	)

35856 
	#USBC_UOG2_ENDPTCTRL5_REG
(
ba£
Ë((ba£)->
UOG2_ENDPTCTRL5
)

	)

35857 
	#USBC_UOG2_ENDPTCTRL6_REG
(
ba£
Ë((ba£)->
UOG2_ENDPTCTRL6
)

	)

35858 
	#USBC_UOG2_ENDPTCTRL7_REG
(
ba£
Ë((ba£)->
UOG2_ENDPTCTRL7
)

	)

35859 
	#USBC_UH1_ID_REG
(
ba£
Ë((ba£)->
UH1_ID
)

	)

35860 
	#USBC_UH1_HWGENERAL_REG
(
ba£
Ë((ba£)->
UH1_HWGENERAL
)

	)

35861 
	#USBC_UH1_HWHOST_REG
(
ba£
Ë((ba£)->
UH1_HWHOST
)

	)

35862 
	#USBC_UH1_HWTXBUF_REG
(
ba£
Ë((ba£)->
UH1_HWTXBUF
)

	)

35863 
	#USBC_UH1_HWRXBUF_REG
(
ba£
Ë((ba£)->
UH1_HWRXBUF
)

	)

35864 
	#USBC_UH1_GPTIMER0LD_REG
(
ba£
Ë((ba£)->
UH1_GPTIMER0LD
)

	)

35865 
	#USBC_UH1_GPTIMER0CTRL_REG
(
ba£
Ë((ba£)->
UH1_GPTIMER0CTRL
)

	)

35866 
	#USBC_UH1_GPTIMER1LD_REG
(
ba£
Ë((ba£)->
UH1_GPTIMER1LD
)

	)

35867 
	#USBC_UH1_GPTIMER1CTRL_REG
(
ba£
Ë((ba£)->
UH1_GPTIMER1CTRL
)

	)

35868 
	#USBC_UH1_SBUSCFG_REG
(
ba£
Ë((ba£)->
UH1_SBUSCFG
)

	)

35869 
	#USBC_UH1_CAPLENGTH_REG
(
ba£
Ë((ba£)->
UH1_CAPLENGTH
)

	)

35870 
	#USBC_UH1_HCIVERSION_REG
(
ba£
Ë((ba£)->
UH1_HCIVERSION
)

	)

35871 
	#USBC_UH1_HCSPARAMS_REG
(
ba£
Ë((ba£)->
UH1_HCSPARAMS
)

	)

35872 
	#USBC_UH1_HCCPARAMS_REG
(
ba£
Ë((ba£)->
UH1_HCCPARAMS
)

	)

35873 
	#USBC_UH1_USBCMD_REG
(
ba£
Ë((ba£)->
UH1_USBCMD
)

	)

35874 
	#USBC_UH1_USBSTS_REG
(
ba£
Ë((ba£)->
UH1_USBSTS
)

	)

35875 
	#USBC_UH1_USBINTR_REG
(
ba£
Ë((ba£)->
UH1_USBINTR
)

	)

35876 
	#USBC_UH1_FRINDEX_REG
(
ba£
Ë((ba£)->
UH1_FRINDEX
)

	)

35877 
	#USBC_UH1_PERIODICLISTBASE_REG
(
ba£
Ë((ba£)->
UH1_PERIODICLISTBASE
)

	)

35878 
	#USBC_UH1_ASYNCLISTADDR_REG
(
ba£
Ë((ba£)->
UH1_ASYNCLISTADDR
)

	)

35879 
	#USBC_UH1_BURSTSIZE_REG
(
ba£
Ë((ba£)->
UH1_BURSTSIZE
)

	)

35880 
	#USBC_UH1_TXFILLTUNING_REG
(
ba£
Ë((ba£)->
UH1_TXFILLTUNING
)

	)

35881 
	#USBC_UH1_CONFIGFLAG_REG
(
ba£
Ë((ba£)->
UH1_CONFIGFLAG
)

	)

35882 
	#USBC_UH1_PORTSC1_REG
(
ba£
Ë((ba£)->
UH1_PORTSC1
)

	)

35883 
	#USBC_UH1_USBMODE_REG
(
ba£
Ë((ba£)->
UH1_USBMODE
)

	)

35899 
	#USBC_UOG1_ID_ID_MASK
 0x3Fu

	)

35900 
	#USBC_UOG1_ID_ID_SHIFT
 0

	)

35901 
	#USBC_UOG1_ID_ID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ID_ID_SHIFT
))&
USBC_UOG1_ID_ID_MASK
)

	)

35902 
	#USBC_UOG1_ID_NID_MASK
 0x3F00u

	)

35903 
	#USBC_UOG1_ID_NID_SHIFT
 8

	)

35904 
	#USBC_UOG1_ID_NID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ID_NID_SHIFT
))&
USBC_UOG1_ID_NID_MASK
)

	)

35905 
	#USBC_UOG1_ID_REVISION_MASK
 0xFF0000u

	)

35906 
	#USBC_UOG1_ID_REVISION_SHIFT
 16

	)

35907 
	#USBC_UOG1_ID_REVISION
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ID_REVISION_SHIFT
))&
USBC_UOG1_ID_REVISION_MASK
)

	)

35909 
	#USBC_UOG1_HWGENERAL_PHYW_MASK
 0x30u

	)

35910 
	#USBC_UOG1_HWGENERAL_PHYW_SHIFT
 4

	)

35911 
	#USBC_UOG1_HWGENERAL_PHYW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_HWGENERAL_PHYW_SHIFT
))&
USBC_UOG1_HWGENERAL_PHYW_MASK
)

	)

35912 
	#USBC_UOG1_HWGENERAL_PHYM_MASK
 0x1C0u

	)

35913 
	#USBC_UOG1_HWGENERAL_PHYM_SHIFT
 6

	)

35914 
	#USBC_UOG1_HWGENERAL_PHYM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_HWGENERAL_PHYM_SHIFT
))&
USBC_UOG1_HWGENERAL_PHYM_MASK
)

	)

35915 
	#USBC_UOG1_HWGENERAL_SM_MASK
 0x600u

	)

35916 
	#USBC_UOG1_HWGENERAL_SM_SHIFT
 9

	)

35917 
	#USBC_UOG1_HWGENERAL_SM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_HWGENERAL_SM_SHIFT
))&
USBC_UOG1_HWGENERAL_SM_MASK
)

	)

35919 
	#USBC_UOG1_HWHOST_HC_MASK
 0x1u

	)

35920 
	#USBC_UOG1_HWHOST_HC_SHIFT
 0

	)

35921 
	#USBC_UOG1_HWHOST_NPORT_MASK
 0xEu

	)

35922 
	#USBC_UOG1_HWHOST_NPORT_SHIFT
 1

	)

35923 
	#USBC_UOG1_HWHOST_NPORT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_HWHOST_NPORT_SHIFT
))&
USBC_UOG1_HWHOST_NPORT_MASK
)

	)

35925 
	#USBC_UOG1_HWDEVICE_DC_MASK
 0x1u

	)

35926 
	#USBC_UOG1_HWDEVICE_DC_SHIFT
 0

	)

35927 
	#USBC_UOG1_HWDEVICE_DEVEP_MASK
 0x3Eu

	)

35928 
	#USBC_UOG1_HWDEVICE_DEVEP_SHIFT
 1

	)

35929 
	#USBC_UOG1_HWDEVICE_DEVEP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_HWDEVICE_DEVEP_SHIFT
))&
USBC_UOG1_HWDEVICE_DEVEP_MASK
)

	)

35931 
	#USBC_UOG1_HWTXBUF_TXBURST_MASK
 0xFFu

	)

35932 
	#USBC_UOG1_HWTXBUF_TXBURST_SHIFT
 0

	)

35933 
	#USBC_UOG1_HWTXBUF_TXBURST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_HWTXBUF_TXBURST_SHIFT
))&
USBC_UOG1_HWTXBUF_TXBURST_MASK
)

	)

35934 
	#USBC_UOG1_HWTXBUF_TXCHANADD_MASK
 0xFF0000u

	)

35935 
	#USBC_UOG1_HWTXBUF_TXCHANADD_SHIFT
 16

	)

35936 
	#USBC_UOG1_HWTXBUF_TXCHANADD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_HWTXBUF_TXCHANADD_SHIFT
))&
USBC_UOG1_HWTXBUF_TXCHANADD_MASK
)

	)

35938 
	#USBC_UOG1_HWRXBUF_RXBURST_MASK
 0xFFu

	)

35939 
	#USBC_UOG1_HWRXBUF_RXBURST_SHIFT
 0

	)

35940 
	#USBC_UOG1_HWRXBUF_RXBURST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_HWRXBUF_RXBURST_SHIFT
))&
USBC_UOG1_HWRXBUF_RXBURST_MASK
)

	)

35941 
	#USBC_UOG1_HWRXBUF_RXADD_MASK
 0xFF00u

	)

35942 
	#USBC_UOG1_HWRXBUF_RXADD_SHIFT
 8

	)

35943 
	#USBC_UOG1_HWRXBUF_RXADD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_HWRXBUF_RXADD_SHIFT
))&
USBC_UOG1_HWRXBUF_RXADD_MASK
)

	)

35945 
	#USBC_UOG1_GPTIMER0LD_GPTLD_MASK
 0xFFFFFFu

	)

35946 
	#USBC_UOG1_GPTIMER0LD_GPTLD_SHIFT
 0

	)

35947 
	#USBC_UOG1_GPTIMER0LD_GPTLD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_GPTIMER0LD_GPTLD_SHIFT
))&
USBC_UOG1_GPTIMER0LD_GPTLD_MASK
)

	)

35949 
	#USBC_UOG1_GPTIMER0CTRL_GPTCNT_MASK
 0xFFFFFFu

	)

35950 
	#USBC_UOG1_GPTIMER0CTRL_GPTCNT_SHIFT
 0

	)

35951 
	#USBC_UOG1_GPTIMER0CTRL_GPTCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_GPTIMER0CTRL_GPTCNT_SHIFT
))&
USBC_UOG1_GPTIMER0CTRL_GPTCNT_MASK
)

	)

35952 
	#USBC_UOG1_GPTIMER0CTRL_GPTMODE_MASK
 0x1000000u

	)

35953 
	#USBC_UOG1_GPTIMER0CTRL_GPTMODE_SHIFT
 24

	)

35954 
	#USBC_UOG1_GPTIMER0CTRL_GPTRST_MASK
 0x40000000u

	)

35955 
	#USBC_UOG1_GPTIMER0CTRL_GPTRST_SHIFT
 30

	)

35956 
	#USBC_UOG1_GPTIMER0CTRL_GPTRUN_MASK
 0x80000000u

	)

35957 
	#USBC_UOG1_GPTIMER0CTRL_GPTRUN_SHIFT
 31

	)

35959 
	#USBC_UOG1_GPTIMER1LD_GPTLD_MASK
 0xFFFFFFu

	)

35960 
	#USBC_UOG1_GPTIMER1LD_GPTLD_SHIFT
 0

	)

35961 
	#USBC_UOG1_GPTIMER1LD_GPTLD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_GPTIMER1LD_GPTLD_SHIFT
))&
USBC_UOG1_GPTIMER1LD_GPTLD_MASK
)

	)

35963 
	#USBC_UOG1_GPTIMER1CTRL_GPTCNT_MASK
 0xFFFFFFu

	)

35964 
	#USBC_UOG1_GPTIMER1CTRL_GPTCNT_SHIFT
 0

	)

35965 
	#USBC_UOG1_GPTIMER1CTRL_GPTCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_GPTIMER1CTRL_GPTCNT_SHIFT
))&
USBC_UOG1_GPTIMER1CTRL_GPTCNT_MASK
)

	)

35966 
	#USBC_UOG1_GPTIMER1CTRL_GPTMODE_MASK
 0x1000000u

	)

35967 
	#USBC_UOG1_GPTIMER1CTRL_GPTMODE_SHIFT
 24

	)

35968 
	#USBC_UOG1_GPTIMER1CTRL_GPTRST_MASK
 0x40000000u

	)

35969 
	#USBC_UOG1_GPTIMER1CTRL_GPTRST_SHIFT
 30

	)

35970 
	#USBC_UOG1_GPTIMER1CTRL_GPTRUN_MASK
 0x80000000u

	)

35971 
	#USBC_UOG1_GPTIMER1CTRL_GPTRUN_SHIFT
 31

	)

35973 
	#USBC_UOG1_SBUSCFG_AHBBRST_MASK
 0x7u

	)

35974 
	#USBC_UOG1_SBUSCFG_AHBBRST_SHIFT
 0

	)

35975 
	#USBC_UOG1_SBUSCFG_AHBBRST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_SBUSCFG_AHBBRST_SHIFT
))&
USBC_UOG1_SBUSCFG_AHBBRST_MASK
)

	)

35977 
	#USBC_UOG1_CAPLENGTH_CAPLENGTH_MASK
 0xFFu

	)

35978 
	#USBC_UOG1_CAPLENGTH_CAPLENGTH_SHIFT
 0

	)

35979 
	#USBC_UOG1_CAPLENGTH_CAPLENGTH
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
USBC_UOG1_CAPLENGTH_CAPLENGTH_SHIFT
))&
USBC_UOG1_CAPLENGTH_CAPLENGTH_MASK
)

	)

35981 
	#USBC_UOG1_HCIVERSION_HCIVERSION_MASK
 0xFFFFu

	)

35982 
	#USBC_UOG1_HCIVERSION_HCIVERSION_SHIFT
 0

	)

35983 
	#USBC_UOG1_HCIVERSION_HCIVERSION
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
USBC_UOG1_HCIVERSION_HCIVERSION_SHIFT
))&
USBC_UOG1_HCIVERSION_HCIVERSION_MASK
)

	)

35985 
	#USBC_UOG1_HCSPARAMS_N_PORTS_MASK
 0xFu

	)

35986 
	#USBC_UOG1_HCSPARAMS_N_PORTS_SHIFT
 0

	)

35987 
	#USBC_UOG1_HCSPARAMS_N_PORTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_HCSPARAMS_N_PORTS_SHIFT
))&
USBC_UOG1_HCSPARAMS_N_PORTS_MASK
)

	)

35988 
	#USBC_UOG1_HCSPARAMS_PPC_MASK
 0x10u

	)

35989 
	#USBC_UOG1_HCSPARAMS_PPC_SHIFT
 4

	)

35990 
	#USBC_UOG1_HCSPARAMS_N_PCC_MASK
 0xF00u

	)

35991 
	#USBC_UOG1_HCSPARAMS_N_PCC_SHIFT
 8

	)

35992 
	#USBC_UOG1_HCSPARAMS_N_PCC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_HCSPARAMS_N_PCC_SHIFT
))&
USBC_UOG1_HCSPARAMS_N_PCC_MASK
)

	)

35993 
	#USBC_UOG1_HCSPARAMS_N_CC_MASK
 0xF000u

	)

35994 
	#USBC_UOG1_HCSPARAMS_N_CC_SHIFT
 12

	)

35995 
	#USBC_UOG1_HCSPARAMS_N_CC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_HCSPARAMS_N_CC_SHIFT
))&
USBC_UOG1_HCSPARAMS_N_CC_MASK
)

	)

35996 
	#USBC_UOG1_HCSPARAMS_PI_MASK
 0x10000u

	)

35997 
	#USBC_UOG1_HCSPARAMS_PI_SHIFT
 16

	)

35998 
	#USBC_UOG1_HCSPARAMS_N_PTT_MASK
 0xF00000u

	)

35999 
	#USBC_UOG1_HCSPARAMS_N_PTT_SHIFT
 20

	)

36000 
	#USBC_UOG1_HCSPARAMS_N_PTT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_HCSPARAMS_N_PTT_SHIFT
))&
USBC_UOG1_HCSPARAMS_N_PTT_MASK
)

	)

36001 
	#USBC_UOG1_HCSPARAMS_N_TT_MASK
 0xF000000u

	)

36002 
	#USBC_UOG1_HCSPARAMS_N_TT_SHIFT
 24

	)

36003 
	#USBC_UOG1_HCSPARAMS_N_TT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_HCSPARAMS_N_TT_SHIFT
))&
USBC_UOG1_HCSPARAMS_N_TT_MASK
)

	)

36005 
	#USBC_UOG1_HCCPARAMS_ADC_MASK
 0x1u

	)

36006 
	#USBC_UOG1_HCCPARAMS_ADC_SHIFT
 0

	)

36007 
	#USBC_UOG1_HCCPARAMS_PFL_MASK
 0x2u

	)

36008 
	#USBC_UOG1_HCCPARAMS_PFL_SHIFT
 1

	)

36009 
	#USBC_UOG1_HCCPARAMS_ASP_MASK
 0x4u

	)

36010 
	#USBC_UOG1_HCCPARAMS_ASP_SHIFT
 2

	)

36011 
	#USBC_UOG1_HCCPARAMS_IST_MASK
 0xF0u

	)

36012 
	#USBC_UOG1_HCCPARAMS_IST_SHIFT
 4

	)

36013 
	#USBC_UOG1_HCCPARAMS_IST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_HCCPARAMS_IST_SHIFT
))&
USBC_UOG1_HCCPARAMS_IST_MASK
)

	)

36014 
	#USBC_UOG1_HCCPARAMS_EECP_MASK
 0xFF00u

	)

36015 
	#USBC_UOG1_HCCPARAMS_EECP_SHIFT
 8

	)

36016 
	#USBC_UOG1_HCCPARAMS_EECP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_HCCPARAMS_EECP_SHIFT
))&
USBC_UOG1_HCCPARAMS_EECP_MASK
)

	)

36018 
	#USBC_UOG1_DCIVERSION_DCIVERSION_MASK
 0xFFFFu

	)

36019 
	#USBC_UOG1_DCIVERSION_DCIVERSION_SHIFT
 0

	)

36020 
	#USBC_UOG1_DCIVERSION_DCIVERSION
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
USBC_UOG1_DCIVERSION_DCIVERSION_SHIFT
))&
USBC_UOG1_DCIVERSION_DCIVERSION_MASK
)

	)

36022 
	#USBC_UOG1_DCCPARAMS_DEN_MASK
 0x1Fu

	)

36023 
	#USBC_UOG1_DCCPARAMS_DEN_SHIFT
 0

	)

36024 
	#USBC_UOG1_DCCPARAMS_DEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_DCCPARAMS_DEN_SHIFT
))&
USBC_UOG1_DCCPARAMS_DEN_MASK
)

	)

36025 
	#USBC_UOG1_DCCPARAMS_DC_MASK
 0x80u

	)

36026 
	#USBC_UOG1_DCCPARAMS_DC_SHIFT
 7

	)

36027 
	#USBC_UOG1_DCCPARAMS_HC_MASK
 0x100u

	)

36028 
	#USBC_UOG1_DCCPARAMS_HC_SHIFT
 8

	)

36030 
	#USBC_UOG1_USBCMD_RS_MASK
 0x1u

	)

36031 
	#USBC_UOG1_USBCMD_RS_SHIFT
 0

	)

36032 
	#USBC_UOG1_USBCMD_RST_MASK
 0x2u

	)

36033 
	#USBC_UOG1_USBCMD_RST_SHIFT
 1

	)

36034 
	#USBC_UOG1_USBCMD_FS_1_MASK
 0xCu

	)

36035 
	#USBC_UOG1_USBCMD_FS_1_SHIFT
 2

	)

36036 
	#USBC_UOG1_USBCMD_FS_1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_USBCMD_FS_1_SHIFT
))&
USBC_UOG1_USBCMD_FS_1_MASK
)

	)

36037 
	#USBC_UOG1_USBCMD_PSE_MASK
 0x10u

	)

36038 
	#USBC_UOG1_USBCMD_PSE_SHIFT
 4

	)

36039 
	#USBC_UOG1_USBCMD_ASE_MASK
 0x20u

	)

36040 
	#USBC_UOG1_USBCMD_ASE_SHIFT
 5

	)

36041 
	#USBC_UOG1_USBCMD_IAA_MASK
 0x40u

	)

36042 
	#USBC_UOG1_USBCMD_IAA_SHIFT
 6

	)

36043 
	#USBC_UOG1_USBCMD_ASP_MASK
 0x300u

	)

36044 
	#USBC_UOG1_USBCMD_ASP_SHIFT
 8

	)

36045 
	#USBC_UOG1_USBCMD_ASP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_USBCMD_ASP_SHIFT
))&
USBC_UOG1_USBCMD_ASP_MASK
)

	)

36046 
	#USBC_UOG1_USBCMD_ASPE_MASK
 0x800u

	)

36047 
	#USBC_UOG1_USBCMD_ASPE_SHIFT
 11

	)

36048 
	#USBC_UOG1_USBCMD_SUTW_MASK
 0x2000u

	)

36049 
	#USBC_UOG1_USBCMD_SUTW_SHIFT
 13

	)

36050 
	#USBC_UOG1_USBCMD_ATDTW_MASK
 0x4000u

	)

36051 
	#USBC_UOG1_USBCMD_ATDTW_SHIFT
 14

	)

36052 
	#USBC_UOG1_USBCMD_FS_2_MASK
 0x8000u

	)

36053 
	#USBC_UOG1_USBCMD_FS_2_SHIFT
 15

	)

36054 
	#USBC_UOG1_USBCMD_ITC_MASK
 0xFF0000u

	)

36055 
	#USBC_UOG1_USBCMD_ITC_SHIFT
 16

	)

36056 
	#USBC_UOG1_USBCMD_ITC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_USBCMD_ITC_SHIFT
))&
USBC_UOG1_USBCMD_ITC_MASK
)

	)

36058 
	#USBC_UOG1_USBSTS_UI_MASK
 0x1u

	)

36059 
	#USBC_UOG1_USBSTS_UI_SHIFT
 0

	)

36060 
	#USBC_UOG1_USBSTS_UEI_MASK
 0x2u

	)

36061 
	#USBC_UOG1_USBSTS_UEI_SHIFT
 1

	)

36062 
	#USBC_UOG1_USBSTS_PCI_MASK
 0x4u

	)

36063 
	#USBC_UOG1_USBSTS_PCI_SHIFT
 2

	)

36064 
	#USBC_UOG1_USBSTS_FRI_MASK
 0x8u

	)

36065 
	#USBC_UOG1_USBSTS_FRI_SHIFT
 3

	)

36066 
	#USBC_UOG1_USBSTS_SEI_MASK
 0x10u

	)

36067 
	#USBC_UOG1_USBSTS_SEI_SHIFT
 4

	)

36068 
	#USBC_UOG1_USBSTS_AAI_MASK
 0x20u

	)

36069 
	#USBC_UOG1_USBSTS_AAI_SHIFT
 5

	)

36070 
	#USBC_UOG1_USBSTS_URI_MASK
 0x40u

	)

36071 
	#USBC_UOG1_USBSTS_URI_SHIFT
 6

	)

36072 
	#USBC_UOG1_USBSTS_SRI_MASK
 0x80u

	)

36073 
	#USBC_UOG1_USBSTS_SRI_SHIFT
 7

	)

36074 
	#USBC_UOG1_USBSTS_SLI_MASK
 0x100u

	)

36075 
	#USBC_UOG1_USBSTS_SLI_SHIFT
 8

	)

36076 
	#USBC_UOG1_USBSTS_ULPII_MASK
 0x400u

	)

36077 
	#USBC_UOG1_USBSTS_ULPII_SHIFT
 10

	)

36078 
	#USBC_UOG1_USBSTS_HCH_MASK
 0x1000u

	)

36079 
	#USBC_UOG1_USBSTS_HCH_SHIFT
 12

	)

36080 
	#USBC_UOG1_USBSTS_RCL_MASK
 0x2000u

	)

36081 
	#USBC_UOG1_USBSTS_RCL_SHIFT
 13

	)

36082 
	#USBC_UOG1_USBSTS_PS_MASK
 0x4000u

	)

36083 
	#USBC_UOG1_USBSTS_PS_SHIFT
 14

	)

36084 
	#USBC_UOG1_USBSTS_AS_MASK
 0x8000u

	)

36085 
	#USBC_UOG1_USBSTS_AS_SHIFT
 15

	)

36086 
	#USBC_UOG1_USBSTS_NAKI_MASK
 0x10000u

	)

36087 
	#USBC_UOG1_USBSTS_NAKI_SHIFT
 16

	)

36088 
	#USBC_UOG1_USBSTS_TI0_MASK
 0x1000000u

	)

36089 
	#USBC_UOG1_USBSTS_TI0_SHIFT
 24

	)

36090 
	#USBC_UOG1_USBSTS_TI1_MASK
 0x2000000u

	)

36091 
	#USBC_UOG1_USBSTS_TI1_SHIFT
 25

	)

36093 
	#USBC_UOG1_USBINTR_UE_MASK
 0x1u

	)

36094 
	#USBC_UOG1_USBINTR_UE_SHIFT
 0

	)

36095 
	#USBC_UOG1_USBINTR_UEE_MASK
 0x2u

	)

36096 
	#USBC_UOG1_USBINTR_UEE_SHIFT
 1

	)

36097 
	#USBC_UOG1_USBINTR_PCE_MASK
 0x4u

	)

36098 
	#USBC_UOG1_USBINTR_PCE_SHIFT
 2

	)

36099 
	#USBC_UOG1_USBINTR_FRE_MASK
 0x8u

	)

36100 
	#USBC_UOG1_USBINTR_FRE_SHIFT
 3

	)

36101 
	#USBC_UOG1_USBINTR_SEE_MASK
 0x10u

	)

36102 
	#USBC_UOG1_USBINTR_SEE_SHIFT
 4

	)

36103 
	#USBC_UOG1_USBINTR_AAE_MASK
 0x20u

	)

36104 
	#USBC_UOG1_USBINTR_AAE_SHIFT
 5

	)

36105 
	#USBC_UOG1_USBINTR_URE_MASK
 0x40u

	)

36106 
	#USBC_UOG1_USBINTR_URE_SHIFT
 6

	)

36107 
	#USBC_UOG1_USBINTR_SRE_MASK
 0x80u

	)

36108 
	#USBC_UOG1_USBINTR_SRE_SHIFT
 7

	)

36109 
	#USBC_UOG1_USBINTR_SLE_MASK
 0x100u

	)

36110 
	#USBC_UOG1_USBINTR_SLE_SHIFT
 8

	)

36111 
	#USBC_UOG1_USBINTR_ULPIE_MASK
 0x400u

	)

36112 
	#USBC_UOG1_USBINTR_ULPIE_SHIFT
 10

	)

36113 
	#USBC_UOG1_USBINTR_NAKE_MASK
 0x10000u

	)

36114 
	#USBC_UOG1_USBINTR_NAKE_SHIFT
 16

	)

36115 
	#USBC_UOG1_USBINTR_UAIE_MASK
 0x40000u

	)

36116 
	#USBC_UOG1_USBINTR_UAIE_SHIFT
 18

	)

36117 
	#USBC_UOG1_USBINTR_UPIE_MASK
 0x80000u

	)

36118 
	#USBC_UOG1_USBINTR_UPIE_SHIFT
 19

	)

36119 
	#USBC_UOG1_USBINTR_TIE0_MASK
 0x1000000u

	)

36120 
	#USBC_UOG1_USBINTR_TIE0_SHIFT
 24

	)

36121 
	#USBC_UOG1_USBINTR_TIE1_MASK
 0x2000000u

	)

36122 
	#USBC_UOG1_USBINTR_TIE1_SHIFT
 25

	)

36124 
	#USBC_UOG1_FRINDEX_FRINDEX_MASK
 0x3FFFu

	)

36125 
	#USBC_UOG1_FRINDEX_FRINDEX_SHIFT
 0

	)

36126 
	#USBC_UOG1_FRINDEX_FRINDEX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_FRINDEX_FRINDEX_SHIFT
))&
USBC_UOG1_FRINDEX_FRINDEX_MASK
)

	)

36128 
	#USBC_UOG1_PERIODICLISTBASE_BASEADR_MASK
 0xFFFFF000u

	)

36129 
	#USBC_UOG1_PERIODICLISTBASE_BASEADR_SHIFT
 12

	)

36130 
	#USBC_UOG1_PERIODICLISTBASE_BASEADR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_PERIODICLISTBASE_BASEADR_SHIFT
))&
USBC_UOG1_PERIODICLISTBASE_BASEADR_MASK
)

	)

36132 
	#USBC_UOG1_DEVICEADDR_USBADRA_MASK
 0x1000000u

	)

36133 
	#USBC_UOG1_DEVICEADDR_USBADRA_SHIFT
 24

	)

36134 
	#USBC_UOG1_DEVICEADDR_USBADR_MASK
 0xFE000000u

	)

36135 
	#USBC_UOG1_DEVICEADDR_USBADR_SHIFT
 25

	)

36136 
	#USBC_UOG1_DEVICEADDR_USBADR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_DEVICEADDR_USBADR_SHIFT
))&
USBC_UOG1_DEVICEADDR_USBADR_MASK
)

	)

36138 
	#USBC_UOG1_ASYNCLISTADDR_ASYBASE_MASK
 0xFFFFFFE0u

	)

36139 
	#USBC_UOG1_ASYNCLISTADDR_ASYBASE_SHIFT
 5

	)

36140 
	#USBC_UOG1_ASYNCLISTADDR_ASYBASE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ASYNCLISTADDR_ASYBASE_SHIFT
))&
USBC_UOG1_ASYNCLISTADDR_ASYBASE_MASK
)

	)

36142 
	#USBC_UOG1_ENDPTLISTADDR_EPBASE_MASK
 0xFFFFF800u

	)

36143 
	#USBC_UOG1_ENDPTLISTADDR_EPBASE_SHIFT
 11

	)

36144 
	#USBC_UOG1_ENDPTLISTADDR_EPBASE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTLISTADDR_EPBASE_SHIFT
))&
USBC_UOG1_ENDPTLISTADDR_EPBASE_MASK
)

	)

36146 
	#USBC_UOG1_BURSTSIZE_RXPBURST_MASK
 0xFFu

	)

36147 
	#USBC_UOG1_BURSTSIZE_RXPBURST_SHIFT
 0

	)

36148 
	#USBC_UOG1_BURSTSIZE_RXPBURST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_BURSTSIZE_RXPBURST_SHIFT
))&
USBC_UOG1_BURSTSIZE_RXPBURST_MASK
)

	)

36149 
	#USBC_UOG1_BURSTSIZE_TXPBURST_MASK
 0x1FF00u

	)

36150 
	#USBC_UOG1_BURSTSIZE_TXPBURST_SHIFT
 8

	)

36151 
	#USBC_UOG1_BURSTSIZE_TXPBURST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_BURSTSIZE_TXPBURST_SHIFT
))&
USBC_UOG1_BURSTSIZE_TXPBURST_MASK
)

	)

36153 
	#USBC_UOG1_TXFILLTUNING_TXSCHOH_MASK
 0xFFu

	)

36154 
	#USBC_UOG1_TXFILLTUNING_TXSCHOH_SHIFT
 0

	)

36155 
	#USBC_UOG1_TXFILLTUNING_TXSCHOH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_TXFILLTUNING_TXSCHOH_SHIFT
))&
USBC_UOG1_TXFILLTUNING_TXSCHOH_MASK
)

	)

36156 
	#USBC_UOG1_TXFILLTUNING_TXSCHHEALTH_MASK
 0x1F00u

	)

36157 
	#USBC_UOG1_TXFILLTUNING_TXSCHHEALTH_SHIFT
 8

	)

36158 
	#USBC_UOG1_TXFILLTUNING_TXSCHHEALTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_TXFILLTUNING_TXSCHHEALTH_SHIFT
))&
USBC_UOG1_TXFILLTUNING_TXSCHHEALTH_MASK
)

	)

36159 
	#USBC_UOG1_TXFILLTUNING_TXFIFOTHRES_MASK
 0x3F0000u

	)

36160 
	#USBC_UOG1_TXFILLTUNING_TXFIFOTHRES_SHIFT
 16

	)

36161 
	#USBC_UOG1_TXFILLTUNING_TXFIFOTHRES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_TXFILLTUNING_TXFIFOTHRES_SHIFT
))&
USBC_UOG1_TXFILLTUNING_TXFIFOTHRES_MASK
)

	)

36163 
	#USBC_UOG1_ENDPTNAK_EPRN_MASK
 0xFFu

	)

36164 
	#USBC_UOG1_ENDPTNAK_EPRN_SHIFT
 0

	)

36165 
	#USBC_UOG1_ENDPTNAK_EPRN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTNAK_EPRN_SHIFT
))&
USBC_UOG1_ENDPTNAK_EPRN_MASK
)

	)

36166 
	#USBC_UOG1_ENDPTNAK_EPTN_MASK
 0xFF0000u

	)

36167 
	#USBC_UOG1_ENDPTNAK_EPTN_SHIFT
 16

	)

36168 
	#USBC_UOG1_ENDPTNAK_EPTN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTNAK_EPTN_SHIFT
))&
USBC_UOG1_ENDPTNAK_EPTN_MASK
)

	)

36170 
	#USBC_UOG1_ENDPTNAKEN_EPRNE_MASK
 0xFFu

	)

36171 
	#USBC_UOG1_ENDPTNAKEN_EPRNE_SHIFT
 0

	)

36172 
	#USBC_UOG1_ENDPTNAKEN_EPRNE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTNAKEN_EPRNE_SHIFT
))&
USBC_UOG1_ENDPTNAKEN_EPRNE_MASK
)

	)

36173 
	#USBC_UOG1_ENDPTNAKEN_EPTNE_MASK
 0xFF0000u

	)

36174 
	#USBC_UOG1_ENDPTNAKEN_EPTNE_SHIFT
 16

	)

36175 
	#USBC_UOG1_ENDPTNAKEN_EPTNE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTNAKEN_EPTNE_SHIFT
))&
USBC_UOG1_ENDPTNAKEN_EPTNE_MASK
)

	)

36177 
	#USBC_UOG1_CONFIGFLAG_CF_MASK
 0x1u

	)

36178 
	#USBC_UOG1_CONFIGFLAG_CF_SHIFT
 0

	)

36180 
	#USBC_UOG1_PORTSC1_CCS_MASK
 0x1u

	)

36181 
	#USBC_UOG1_PORTSC1_CCS_SHIFT
 0

	)

36182 
	#USBC_UOG1_PORTSC1_CSC_MASK
 0x2u

	)

36183 
	#USBC_UOG1_PORTSC1_CSC_SHIFT
 1

	)

36184 
	#USBC_UOG1_PORTSC1_PE_MASK
 0x4u

	)

36185 
	#USBC_UOG1_PORTSC1_PE_SHIFT
 2

	)

36186 
	#USBC_UOG1_PORTSC1_PEC_MASK
 0x8u

	)

36187 
	#USBC_UOG1_PORTSC1_PEC_SHIFT
 3

	)

36188 
	#USBC_UOG1_PORTSC1_OCA_MASK
 0x10u

	)

36189 
	#USBC_UOG1_PORTSC1_OCA_SHIFT
 4

	)

36190 
	#USBC_UOG1_PORTSC1_OCC_MASK
 0x20u

	)

36191 
	#USBC_UOG1_PORTSC1_OCC_SHIFT
 5

	)

36192 
	#USBC_UOG1_PORTSC1_FPR_MASK
 0x40u

	)

36193 
	#USBC_UOG1_PORTSC1_FPR_SHIFT
 6

	)

36194 
	#USBC_UOG1_PORTSC1_SUSP_MASK
 0x80u

	)

36195 
	#USBC_UOG1_PORTSC1_SUSP_SHIFT
 7

	)

36196 
	#USBC_UOG1_PORTSC1_PR_MASK
 0x100u

	)

36197 
	#USBC_UOG1_PORTSC1_PR_SHIFT
 8

	)

36198 
	#USBC_UOG1_PORTSC1_HSP_MASK
 0x200u

	)

36199 
	#USBC_UOG1_PORTSC1_HSP_SHIFT
 9

	)

36200 
	#USBC_UOG1_PORTSC1_LS_MASK
 0xC00u

	)

36201 
	#USBC_UOG1_PORTSC1_LS_SHIFT
 10

	)

36202 
	#USBC_UOG1_PORTSC1_LS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_PORTSC1_LS_SHIFT
))&
USBC_UOG1_PORTSC1_LS_MASK
)

	)

36203 
	#USBC_UOG1_PORTSC1_PP_MASK
 0x1000u

	)

36204 
	#USBC_UOG1_PORTSC1_PP_SHIFT
 12

	)

36205 
	#USBC_UOG1_PORTSC1_PO_MASK
 0x2000u

	)

36206 
	#USBC_UOG1_PORTSC1_PO_SHIFT
 13

	)

36207 
	#USBC_UOG1_PORTSC1_PIC_MASK
 0xC000u

	)

36208 
	#USBC_UOG1_PORTSC1_PIC_SHIFT
 14

	)

36209 
	#USBC_UOG1_PORTSC1_PIC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_PORTSC1_PIC_SHIFT
))&
USBC_UOG1_PORTSC1_PIC_MASK
)

	)

36210 
	#USBC_UOG1_PORTSC1_PTC_MASK
 0xF0000u

	)

36211 
	#USBC_UOG1_PORTSC1_PTC_SHIFT
 16

	)

36212 
	#USBC_UOG1_PORTSC1_PTC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_PORTSC1_PTC_SHIFT
))&
USBC_UOG1_PORTSC1_PTC_MASK
)

	)

36213 
	#USBC_UOG1_PORTSC1_WKCN_MASK
 0x100000u

	)

36214 
	#USBC_UOG1_PORTSC1_WKCN_SHIFT
 20

	)

36215 
	#USBC_UOG1_PORTSC1_WKDC_MASK
 0x200000u

	)

36216 
	#USBC_UOG1_PORTSC1_WKDC_SHIFT
 21

	)

36217 
	#USBC_UOG1_PORTSC1_WKOC_MASK
 0x400000u

	)

36218 
	#USBC_UOG1_PORTSC1_WKOC_SHIFT
 22

	)

36219 
	#USBC_UOG1_PORTSC1_PHCD_MASK
 0x800000u

	)

36220 
	#USBC_UOG1_PORTSC1_PHCD_SHIFT
 23

	)

36221 
	#USBC_UOG1_PORTSC1_PFSC_MASK
 0x1000000u

	)

36222 
	#USBC_UOG1_PORTSC1_PFSC_SHIFT
 24

	)

36223 
	#USBC_UOG1_PORTSC1_PTS_2_MASK
 0x2000000u

	)

36224 
	#USBC_UOG1_PORTSC1_PTS_2_SHIFT
 25

	)

36225 
	#USBC_UOG1_PORTSC1_PSPD_MASK
 0xC000000u

	)

36226 
	#USBC_UOG1_PORTSC1_PSPD_SHIFT
 26

	)

36227 
	#USBC_UOG1_PORTSC1_PSPD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_PORTSC1_PSPD_SHIFT
))&
USBC_UOG1_PORTSC1_PSPD_MASK
)

	)

36228 
	#USBC_UOG1_PORTSC1_PTW_MASK
 0x10000000u

	)

36229 
	#USBC_UOG1_PORTSC1_PTW_SHIFT
 28

	)

36230 
	#USBC_UOG1_PORTSC1_STS_MASK
 0x20000000u

	)

36231 
	#USBC_UOG1_PORTSC1_STS_SHIFT
 29

	)

36232 
	#USBC_UOG1_PORTSC1_PTS_1_MASK
 0xC0000000u

	)

36233 
	#USBC_UOG1_PORTSC1_PTS_1_SHIFT
 30

	)

36234 
	#USBC_UOG1_PORTSC1_PTS_1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_PORTSC1_PTS_1_SHIFT
))&
USBC_UOG1_PORTSC1_PTS_1_MASK
)

	)

36236 
	#USBC_UOG1_OTGSC_VD_MASK
 0x1u

	)

36237 
	#USBC_UOG1_OTGSC_VD_SHIFT
 0

	)

36238 
	#USBC_UOG1_OTGSC_VC_MASK
 0x2u

	)

36239 
	#USBC_UOG1_OTGSC_VC_SHIFT
 1

	)

36240 
	#USBC_UOG1_OTGSC_OT_MASK
 0x8u

	)

36241 
	#USBC_UOG1_OTGSC_OT_SHIFT
 3

	)

36242 
	#USBC_UOG1_OTGSC_DP_MASK
 0x10u

	)

36243 
	#USBC_UOG1_OTGSC_DP_SHIFT
 4

	)

36244 
	#USBC_UOG1_OTGSC_IDPU_MASK
 0x20u

	)

36245 
	#USBC_UOG1_OTGSC_IDPU_SHIFT
 5

	)

36246 
	#USBC_UOG1_OTGSC_ID_MASK
 0x100u

	)

36247 
	#USBC_UOG1_OTGSC_ID_SHIFT
 8

	)

36248 
	#USBC_UOG1_OTGSC_AVV_MASK
 0x200u

	)

36249 
	#USBC_UOG1_OTGSC_AVV_SHIFT
 9

	)

36250 
	#USBC_UOG1_OTGSC_ASV_MASK
 0x400u

	)

36251 
	#USBC_UOG1_OTGSC_ASV_SHIFT
 10

	)

36252 
	#USBC_UOG1_OTGSC_BSV_MASK
 0x800u

	)

36253 
	#USBC_UOG1_OTGSC_BSV_SHIFT
 11

	)

36254 
	#USBC_UOG1_OTGSC_BSE_MASK
 0x1000u

	)

36255 
	#USBC_UOG1_OTGSC_BSE_SHIFT
 12

	)

36256 
	#USBC_UOG1_OTGSC_TOG_1MS_MASK
 0x2000u

	)

36257 
	#USBC_UOG1_OTGSC_TOG_1MS_SHIFT
 13

	)

36258 
	#USBC_UOG1_OTGSC_DPS_MASK
 0x4000u

	)

36259 
	#USBC_UOG1_OTGSC_DPS_SHIFT
 14

	)

36260 
	#USBC_UOG1_OTGSC_IDIS_MASK
 0x10000u

	)

36261 
	#USBC_UOG1_OTGSC_IDIS_SHIFT
 16

	)

36262 
	#USBC_UOG1_OTGSC_AVVIS_MASK
 0x20000u

	)

36263 
	#USBC_UOG1_OTGSC_AVVIS_SHIFT
 17

	)

36264 
	#USBC_UOG1_OTGSC_ASVIS_MASK
 0x40000u

	)

36265 
	#USBC_UOG1_OTGSC_ASVIS_SHIFT
 18

	)

36266 
	#USBC_UOG1_OTGSC_BSVIS_MASK
 0x80000u

	)

36267 
	#USBC_UOG1_OTGSC_BSVIS_SHIFT
 19

	)

36268 
	#USBC_UOG1_OTGSC_BSEIS_MASK
 0x100000u

	)

36269 
	#USBC_UOG1_OTGSC_BSEIS_SHIFT
 20

	)

36270 
	#USBC_UOG1_OTGSC_STATUS_1MS_MASK
 0x200000u

	)

36271 
	#USBC_UOG1_OTGSC_STATUS_1MS_SHIFT
 21

	)

36272 
	#USBC_UOG1_OTGSC_DPIS_MASK
 0x400000u

	)

36273 
	#USBC_UOG1_OTGSC_DPIS_SHIFT
 22

	)

36274 
	#USBC_UOG1_OTGSC_IDIE_MASK
 0x1000000u

	)

36275 
	#USBC_UOG1_OTGSC_IDIE_SHIFT
 24

	)

36276 
	#USBC_UOG1_OTGSC_AVVIE_MASK
 0x2000000u

	)

36277 
	#USBC_UOG1_OTGSC_AVVIE_SHIFT
 25

	)

36278 
	#USBC_UOG1_OTGSC_ASVIE_MASK
 0x4000000u

	)

36279 
	#USBC_UOG1_OTGSC_ASVIE_SHIFT
 26

	)

36280 
	#USBC_UOG1_OTGSC_BSVIE_MASK
 0x8000000u

	)

36281 
	#USBC_UOG1_OTGSC_BSVIE_SHIFT
 27

	)

36282 
	#USBC_UOG1_OTGSC_BSEIE_MASK
 0x10000000u

	)

36283 
	#USBC_UOG1_OTGSC_BSEIE_SHIFT
 28

	)

36284 
	#USBC_UOG1_OTGSC_EN_1MS_MASK
 0x20000000u

	)

36285 
	#USBC_UOG1_OTGSC_EN_1MS_SHIFT
 29

	)

36286 
	#USBC_UOG1_OTGSC_DPIE_MASK
 0x40000000u

	)

36287 
	#USBC_UOG1_OTGSC_DPIE_SHIFT
 30

	)

36289 
	#USBC_UOG1_USBMODE_CM_MASK
 0x3u

	)

36290 
	#USBC_UOG1_USBMODE_CM_SHIFT
 0

	)

36291 
	#USBC_UOG1_USBMODE_CM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_USBMODE_CM_SHIFT
))&
USBC_UOG1_USBMODE_CM_MASK
)

	)

36292 
	#USBC_UOG1_USBMODE_ES_MASK
 0x4u

	)

36293 
	#USBC_UOG1_USBMODE_ES_SHIFT
 2

	)

36294 
	#USBC_UOG1_USBMODE_SLOM_MASK
 0x8u

	)

36295 
	#USBC_UOG1_USBMODE_SLOM_SHIFT
 3

	)

36296 
	#USBC_UOG1_USBMODE_SDIS_MASK
 0x10u

	)

36297 
	#USBC_UOG1_USBMODE_SDIS_SHIFT
 4

	)

36299 
	#USBC_UOG1_ENDPTSETUPSTAT_ENDPTSETUPSTAT_MASK
 0xFFFFu

	)

36300 
	#USBC_UOG1_ENDPTSETUPSTAT_ENDPTSETUPSTAT_SHIFT
 0

	)

36301 
	#USBC_UOG1_ENDPTSETUPSTAT_ENDPTSETUPSTAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTSETUPSTAT_ENDPTSETUPSTAT_SHIFT
))&
USBC_UOG1_ENDPTSETUPSTAT_ENDPTSETUPSTAT_MASK
)

	)

36303 
	#USBC_UOG1_ENDPTPRIME_PERB_MASK
 0xFFu

	)

36304 
	#USBC_UOG1_ENDPTPRIME_PERB_SHIFT
 0

	)

36305 
	#USBC_UOG1_ENDPTPRIME_PERB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTPRIME_PERB_SHIFT
))&
USBC_UOG1_ENDPTPRIME_PERB_MASK
)

	)

36306 
	#USBC_UOG1_ENDPTPRIME_PETB_MASK
 0xFF0000u

	)

36307 
	#USBC_UOG1_ENDPTPRIME_PETB_SHIFT
 16

	)

36308 
	#USBC_UOG1_ENDPTPRIME_PETB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTPRIME_PETB_SHIFT
))&
USBC_UOG1_ENDPTPRIME_PETB_MASK
)

	)

36310 
	#USBC_UOG1_ENDPTFLUSH_FERB_MASK
 0xFFu

	)

36311 
	#USBC_UOG1_ENDPTFLUSH_FERB_SHIFT
 0

	)

36312 
	#USBC_UOG1_ENDPTFLUSH_FERB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTFLUSH_FERB_SHIFT
))&
USBC_UOG1_ENDPTFLUSH_FERB_MASK
)

	)

36313 
	#USBC_UOG1_ENDPTFLUSH_FETB_MASK
 0xFF0000u

	)

36314 
	#USBC_UOG1_ENDPTFLUSH_FETB_SHIFT
 16

	)

36315 
	#USBC_UOG1_ENDPTFLUSH_FETB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTFLUSH_FETB_SHIFT
))&
USBC_UOG1_ENDPTFLUSH_FETB_MASK
)

	)

36317 
	#USBC_UOG1_ENDPTSTAT_ERBR_MASK
 0xFFu

	)

36318 
	#USBC_UOG1_ENDPTSTAT_ERBR_SHIFT
 0

	)

36319 
	#USBC_UOG1_ENDPTSTAT_ERBR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTSTAT_ERBR_SHIFT
))&
USBC_UOG1_ENDPTSTAT_ERBR_MASK
)

	)

36320 
	#USBC_UOG1_ENDPTSTAT_ETBR_MASK
 0xFF0000u

	)

36321 
	#USBC_UOG1_ENDPTSTAT_ETBR_SHIFT
 16

	)

36322 
	#USBC_UOG1_ENDPTSTAT_ETBR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTSTAT_ETBR_SHIFT
))&
USBC_UOG1_ENDPTSTAT_ETBR_MASK
)

	)

36324 
	#USBC_UOG1_ENDPTCOMPLETE_ERCE_MASK
 0xFFu

	)

36325 
	#USBC_UOG1_ENDPTCOMPLETE_ERCE_SHIFT
 0

	)

36326 
	#USBC_UOG1_ENDPTCOMPLETE_ERCE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTCOMPLETE_ERCE_SHIFT
))&
USBC_UOG1_ENDPTCOMPLETE_ERCE_MASK
)

	)

36327 
	#USBC_UOG1_ENDPTCOMPLETE_ETCE_MASK
 0xFF0000u

	)

36328 
	#USBC_UOG1_ENDPTCOMPLETE_ETCE_SHIFT
 16

	)

36329 
	#USBC_UOG1_ENDPTCOMPLETE_ETCE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTCOMPLETE_ETCE_SHIFT
))&
USBC_UOG1_ENDPTCOMPLETE_ETCE_MASK
)

	)

36331 
	#USBC_UOG1_ENDPTCTRL0_RXS_MASK
 0x1u

	)

36332 
	#USBC_UOG1_ENDPTCTRL0_RXS_SHIFT
 0

	)

36333 
	#USBC_UOG1_ENDPTCTRL0_RXT_MASK
 0xCu

	)

36334 
	#USBC_UOG1_ENDPTCTRL0_RXT_SHIFT
 2

	)

36335 
	#USBC_UOG1_ENDPTCTRL0_RXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTCTRL0_RXT_SHIFT
))&
USBC_UOG1_ENDPTCTRL0_RXT_MASK
)

	)

36336 
	#USBC_UOG1_ENDPTCTRL0_RXE_MASK
 0x80u

	)

36337 
	#USBC_UOG1_ENDPTCTRL0_RXE_SHIFT
 7

	)

36338 
	#USBC_UOG1_ENDPTCTRL0_TXS_MASK
 0x10000u

	)

36339 
	#USBC_UOG1_ENDPTCTRL0_TXS_SHIFT
 16

	)

36340 
	#USBC_UOG1_ENDPTCTRL0_TXT_MASK
 0xC0000u

	)

36341 
	#USBC_UOG1_ENDPTCTRL0_TXT_SHIFT
 18

	)

36342 
	#USBC_UOG1_ENDPTCTRL0_TXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTCTRL0_TXT_SHIFT
))&
USBC_UOG1_ENDPTCTRL0_TXT_MASK
)

	)

36343 
	#USBC_UOG1_ENDPTCTRL0_TXE_MASK
 0x800000u

	)

36344 
	#USBC_UOG1_ENDPTCTRL0_TXE_SHIFT
 23

	)

36346 
	#USBC_UOG1_ENDPTCTRL1_RXS_MASK
 0x1u

	)

36347 
	#USBC_UOG1_ENDPTCTRL1_RXS_SHIFT
 0

	)

36348 
	#USBC_UOG1_ENDPTCTRL1_RXD_MASK
 0x2u

	)

36349 
	#USBC_UOG1_ENDPTCTRL1_RXD_SHIFT
 1

	)

36350 
	#USBC_UOG1_ENDPTCTRL1_RXT_MASK
 0xCu

	)

36351 
	#USBC_UOG1_ENDPTCTRL1_RXT_SHIFT
 2

	)

36352 
	#USBC_UOG1_ENDPTCTRL1_RXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTCTRL1_RXT_SHIFT
))&
USBC_UOG1_ENDPTCTRL1_RXT_MASK
)

	)

36353 
	#USBC_UOG1_ENDPTCTRL1_RXI_MASK
 0x20u

	)

36354 
	#USBC_UOG1_ENDPTCTRL1_RXI_SHIFT
 5

	)

36355 
	#USBC_UOG1_ENDPTCTRL1_RXR_MASK
 0x40u

	)

36356 
	#USBC_UOG1_ENDPTCTRL1_RXR_SHIFT
 6

	)

36357 
	#USBC_UOG1_ENDPTCTRL1_RXE_MASK
 0x80u

	)

36358 
	#USBC_UOG1_ENDPTCTRL1_RXE_SHIFT
 7

	)

36359 
	#USBC_UOG1_ENDPTCTRL1_TXS_MASK
 0x10000u

	)

36360 
	#USBC_UOG1_ENDPTCTRL1_TXS_SHIFT
 16

	)

36361 
	#USBC_UOG1_ENDPTCTRL1_TXD_MASK
 0x20000u

	)

36362 
	#USBC_UOG1_ENDPTCTRL1_TXD_SHIFT
 17

	)

36363 
	#USBC_UOG1_ENDPTCTRL1_TXT_MASK
 0xC0000u

	)

36364 
	#USBC_UOG1_ENDPTCTRL1_TXT_SHIFT
 18

	)

36365 
	#USBC_UOG1_ENDPTCTRL1_TXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTCTRL1_TXT_SHIFT
))&
USBC_UOG1_ENDPTCTRL1_TXT_MASK
)

	)

36366 
	#USBC_UOG1_ENDPTCTRL1_TXI_MASK
 0x200000u

	)

36367 
	#USBC_UOG1_ENDPTCTRL1_TXI_SHIFT
 21

	)

36368 
	#USBC_UOG1_ENDPTCTRL1_TXR_MASK
 0x400000u

	)

36369 
	#USBC_UOG1_ENDPTCTRL1_TXR_SHIFT
 22

	)

36370 
	#USBC_UOG1_ENDPTCTRL1_TXE_MASK
 0x800000u

	)

36371 
	#USBC_UOG1_ENDPTCTRL1_TXE_SHIFT
 23

	)

36373 
	#USBC_UOG1_ENDPTCTRL2_RXS_MASK
 0x1u

	)

36374 
	#USBC_UOG1_ENDPTCTRL2_RXS_SHIFT
 0

	)

36375 
	#USBC_UOG1_ENDPTCTRL2_RXD_MASK
 0x2u

	)

36376 
	#USBC_UOG1_ENDPTCTRL2_RXD_SHIFT
 1

	)

36377 
	#USBC_UOG1_ENDPTCTRL2_RXT_MASK
 0xCu

	)

36378 
	#USBC_UOG1_ENDPTCTRL2_RXT_SHIFT
 2

	)

36379 
	#USBC_UOG1_ENDPTCTRL2_RXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTCTRL2_RXT_SHIFT
))&
USBC_UOG1_ENDPTCTRL2_RXT_MASK
)

	)

36380 
	#USBC_UOG1_ENDPTCTRL2_RXI_MASK
 0x20u

	)

36381 
	#USBC_UOG1_ENDPTCTRL2_RXI_SHIFT
 5

	)

36382 
	#USBC_UOG1_ENDPTCTRL2_RXR_MASK
 0x40u

	)

36383 
	#USBC_UOG1_ENDPTCTRL2_RXR_SHIFT
 6

	)

36384 
	#USBC_UOG1_ENDPTCTRL2_RXE_MASK
 0x80u

	)

36385 
	#USBC_UOG1_ENDPTCTRL2_RXE_SHIFT
 7

	)

36386 
	#USBC_UOG1_ENDPTCTRL2_TXS_MASK
 0x10000u

	)

36387 
	#USBC_UOG1_ENDPTCTRL2_TXS_SHIFT
 16

	)

36388 
	#USBC_UOG1_ENDPTCTRL2_TXD_MASK
 0x20000u

	)

36389 
	#USBC_UOG1_ENDPTCTRL2_TXD_SHIFT
 17

	)

36390 
	#USBC_UOG1_ENDPTCTRL2_TXT_MASK
 0xC0000u

	)

36391 
	#USBC_UOG1_ENDPTCTRL2_TXT_SHIFT
 18

	)

36392 
	#USBC_UOG1_ENDPTCTRL2_TXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTCTRL2_TXT_SHIFT
))&
USBC_UOG1_ENDPTCTRL2_TXT_MASK
)

	)

36393 
	#USBC_UOG1_ENDPTCTRL2_TXI_MASK
 0x200000u

	)

36394 
	#USBC_UOG1_ENDPTCTRL2_TXI_SHIFT
 21

	)

36395 
	#USBC_UOG1_ENDPTCTRL2_TXR_MASK
 0x400000u

	)

36396 
	#USBC_UOG1_ENDPTCTRL2_TXR_SHIFT
 22

	)

36397 
	#USBC_UOG1_ENDPTCTRL2_TXE_MASK
 0x800000u

	)

36398 
	#USBC_UOG1_ENDPTCTRL2_TXE_SHIFT
 23

	)

36400 
	#USBC_UOG1_ENDPTCTRL3_RXS_MASK
 0x1u

	)

36401 
	#USBC_UOG1_ENDPTCTRL3_RXS_SHIFT
 0

	)

36402 
	#USBC_UOG1_ENDPTCTRL3_RXD_MASK
 0x2u

	)

36403 
	#USBC_UOG1_ENDPTCTRL3_RXD_SHIFT
 1

	)

36404 
	#USBC_UOG1_ENDPTCTRL3_RXT_MASK
 0xCu

	)

36405 
	#USBC_UOG1_ENDPTCTRL3_RXT_SHIFT
 2

	)

36406 
	#USBC_UOG1_ENDPTCTRL3_RXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTCTRL3_RXT_SHIFT
))&
USBC_UOG1_ENDPTCTRL3_RXT_MASK
)

	)

36407 
	#USBC_UOG1_ENDPTCTRL3_RXI_MASK
 0x20u

	)

36408 
	#USBC_UOG1_ENDPTCTRL3_RXI_SHIFT
 5

	)

36409 
	#USBC_UOG1_ENDPTCTRL3_RXR_MASK
 0x40u

	)

36410 
	#USBC_UOG1_ENDPTCTRL3_RXR_SHIFT
 6

	)

36411 
	#USBC_UOG1_ENDPTCTRL3_RXE_MASK
 0x80u

	)

36412 
	#USBC_UOG1_ENDPTCTRL3_RXE_SHIFT
 7

	)

36413 
	#USBC_UOG1_ENDPTCTRL3_TXS_MASK
 0x10000u

	)

36414 
	#USBC_UOG1_ENDPTCTRL3_TXS_SHIFT
 16

	)

36415 
	#USBC_UOG1_ENDPTCTRL3_TXD_MASK
 0x20000u

	)

36416 
	#USBC_UOG1_ENDPTCTRL3_TXD_SHIFT
 17

	)

36417 
	#USBC_UOG1_ENDPTCTRL3_TXT_MASK
 0xC0000u

	)

36418 
	#USBC_UOG1_ENDPTCTRL3_TXT_SHIFT
 18

	)

36419 
	#USBC_UOG1_ENDPTCTRL3_TXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTCTRL3_TXT_SHIFT
))&
USBC_UOG1_ENDPTCTRL3_TXT_MASK
)

	)

36420 
	#USBC_UOG1_ENDPTCTRL3_TXI_MASK
 0x200000u

	)

36421 
	#USBC_UOG1_ENDPTCTRL3_TXI_SHIFT
 21

	)

36422 
	#USBC_UOG1_ENDPTCTRL3_TXR_MASK
 0x400000u

	)

36423 
	#USBC_UOG1_ENDPTCTRL3_TXR_SHIFT
 22

	)

36424 
	#USBC_UOG1_ENDPTCTRL3_TXE_MASK
 0x800000u

	)

36425 
	#USBC_UOG1_ENDPTCTRL3_TXE_SHIFT
 23

	)

36427 
	#USBC_UOG1_ENDPTCTRL4_RXS_MASK
 0x1u

	)

36428 
	#USBC_UOG1_ENDPTCTRL4_RXS_SHIFT
 0

	)

36429 
	#USBC_UOG1_ENDPTCTRL4_RXD_MASK
 0x2u

	)

36430 
	#USBC_UOG1_ENDPTCTRL4_RXD_SHIFT
 1

	)

36431 
	#USBC_UOG1_ENDPTCTRL4_RXT_MASK
 0xCu

	)

36432 
	#USBC_UOG1_ENDPTCTRL4_RXT_SHIFT
 2

	)

36433 
	#USBC_UOG1_ENDPTCTRL4_RXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTCTRL4_RXT_SHIFT
))&
USBC_UOG1_ENDPTCTRL4_RXT_MASK
)

	)

36434 
	#USBC_UOG1_ENDPTCTRL4_RXI_MASK
 0x20u

	)

36435 
	#USBC_UOG1_ENDPTCTRL4_RXI_SHIFT
 5

	)

36436 
	#USBC_UOG1_ENDPTCTRL4_RXR_MASK
 0x40u

	)

36437 
	#USBC_UOG1_ENDPTCTRL4_RXR_SHIFT
 6

	)

36438 
	#USBC_UOG1_ENDPTCTRL4_RXE_MASK
 0x80u

	)

36439 
	#USBC_UOG1_ENDPTCTRL4_RXE_SHIFT
 7

	)

36440 
	#USBC_UOG1_ENDPTCTRL4_TXS_MASK
 0x10000u

	)

36441 
	#USBC_UOG1_ENDPTCTRL4_TXS_SHIFT
 16

	)

36442 
	#USBC_UOG1_ENDPTCTRL4_TXD_MASK
 0x20000u

	)

36443 
	#USBC_UOG1_ENDPTCTRL4_TXD_SHIFT
 17

	)

36444 
	#USBC_UOG1_ENDPTCTRL4_TXT_MASK
 0xC0000u

	)

36445 
	#USBC_UOG1_ENDPTCTRL4_TXT_SHIFT
 18

	)

36446 
	#USBC_UOG1_ENDPTCTRL4_TXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTCTRL4_TXT_SHIFT
))&
USBC_UOG1_ENDPTCTRL4_TXT_MASK
)

	)

36447 
	#USBC_UOG1_ENDPTCTRL4_TXI_MASK
 0x200000u

	)

36448 
	#USBC_UOG1_ENDPTCTRL4_TXI_SHIFT
 21

	)

36449 
	#USBC_UOG1_ENDPTCTRL4_TXR_MASK
 0x400000u

	)

36450 
	#USBC_UOG1_ENDPTCTRL4_TXR_SHIFT
 22

	)

36451 
	#USBC_UOG1_ENDPTCTRL4_TXE_MASK
 0x800000u

	)

36452 
	#USBC_UOG1_ENDPTCTRL4_TXE_SHIFT
 23

	)

36454 
	#USBC_UOG1_ENDPTCTRL5_RXS_MASK
 0x1u

	)

36455 
	#USBC_UOG1_ENDPTCTRL5_RXS_SHIFT
 0

	)

36456 
	#USBC_UOG1_ENDPTCTRL5_RXD_MASK
 0x2u

	)

36457 
	#USBC_UOG1_ENDPTCTRL5_RXD_SHIFT
 1

	)

36458 
	#USBC_UOG1_ENDPTCTRL5_RXT_MASK
 0xCu

	)

36459 
	#USBC_UOG1_ENDPTCTRL5_RXT_SHIFT
 2

	)

36460 
	#USBC_UOG1_ENDPTCTRL5_RXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTCTRL5_RXT_SHIFT
))&
USBC_UOG1_ENDPTCTRL5_RXT_MASK
)

	)

36461 
	#USBC_UOG1_ENDPTCTRL5_RXI_MASK
 0x20u

	)

36462 
	#USBC_UOG1_ENDPTCTRL5_RXI_SHIFT
 5

	)

36463 
	#USBC_UOG1_ENDPTCTRL5_RXR_MASK
 0x40u

	)

36464 
	#USBC_UOG1_ENDPTCTRL5_RXR_SHIFT
 6

	)

36465 
	#USBC_UOG1_ENDPTCTRL5_RXE_MASK
 0x80u

	)

36466 
	#USBC_UOG1_ENDPTCTRL5_RXE_SHIFT
 7

	)

36467 
	#USBC_UOG1_ENDPTCTRL5_TXS_MASK
 0x10000u

	)

36468 
	#USBC_UOG1_ENDPTCTRL5_TXS_SHIFT
 16

	)

36469 
	#USBC_UOG1_ENDPTCTRL5_TXD_MASK
 0x20000u

	)

36470 
	#USBC_UOG1_ENDPTCTRL5_TXD_SHIFT
 17

	)

36471 
	#USBC_UOG1_ENDPTCTRL5_TXT_MASK
 0xC0000u

	)

36472 
	#USBC_UOG1_ENDPTCTRL5_TXT_SHIFT
 18

	)

36473 
	#USBC_UOG1_ENDPTCTRL5_TXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTCTRL5_TXT_SHIFT
))&
USBC_UOG1_ENDPTCTRL5_TXT_MASK
)

	)

36474 
	#USBC_UOG1_ENDPTCTRL5_TXI_MASK
 0x200000u

	)

36475 
	#USBC_UOG1_ENDPTCTRL5_TXI_SHIFT
 21

	)

36476 
	#USBC_UOG1_ENDPTCTRL5_TXR_MASK
 0x400000u

	)

36477 
	#USBC_UOG1_ENDPTCTRL5_TXR_SHIFT
 22

	)

36478 
	#USBC_UOG1_ENDPTCTRL5_TXE_MASK
 0x800000u

	)

36479 
	#USBC_UOG1_ENDPTCTRL5_TXE_SHIFT
 23

	)

36481 
	#USBC_UOG1_ENDPTCTRL6_RXS_MASK
 0x1u

	)

36482 
	#USBC_UOG1_ENDPTCTRL6_RXS_SHIFT
 0

	)

36483 
	#USBC_UOG1_ENDPTCTRL6_RXD_MASK
 0x2u

	)

36484 
	#USBC_UOG1_ENDPTCTRL6_RXD_SHIFT
 1

	)

36485 
	#USBC_UOG1_ENDPTCTRL6_RXT_MASK
 0xCu

	)

36486 
	#USBC_UOG1_ENDPTCTRL6_RXT_SHIFT
 2

	)

36487 
	#USBC_UOG1_ENDPTCTRL6_RXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTCTRL6_RXT_SHIFT
))&
USBC_UOG1_ENDPTCTRL6_RXT_MASK
)

	)

36488 
	#USBC_UOG1_ENDPTCTRL6_RXI_MASK
 0x20u

	)

36489 
	#USBC_UOG1_ENDPTCTRL6_RXI_SHIFT
 5

	)

36490 
	#USBC_UOG1_ENDPTCTRL6_RXR_MASK
 0x40u

	)

36491 
	#USBC_UOG1_ENDPTCTRL6_RXR_SHIFT
 6

	)

36492 
	#USBC_UOG1_ENDPTCTRL6_RXE_MASK
 0x80u

	)

36493 
	#USBC_UOG1_ENDPTCTRL6_RXE_SHIFT
 7

	)

36494 
	#USBC_UOG1_ENDPTCTRL6_TXS_MASK
 0x10000u

	)

36495 
	#USBC_UOG1_ENDPTCTRL6_TXS_SHIFT
 16

	)

36496 
	#USBC_UOG1_ENDPTCTRL6_TXD_MASK
 0x20000u

	)

36497 
	#USBC_UOG1_ENDPTCTRL6_TXD_SHIFT
 17

	)

36498 
	#USBC_UOG1_ENDPTCTRL6_TXT_MASK
 0xC0000u

	)

36499 
	#USBC_UOG1_ENDPTCTRL6_TXT_SHIFT
 18

	)

36500 
	#USBC_UOG1_ENDPTCTRL6_TXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTCTRL6_TXT_SHIFT
))&
USBC_UOG1_ENDPTCTRL6_TXT_MASK
)

	)

36501 
	#USBC_UOG1_ENDPTCTRL6_TXI_MASK
 0x200000u

	)

36502 
	#USBC_UOG1_ENDPTCTRL6_TXI_SHIFT
 21

	)

36503 
	#USBC_UOG1_ENDPTCTRL6_TXR_MASK
 0x400000u

	)

36504 
	#USBC_UOG1_ENDPTCTRL6_TXR_SHIFT
 22

	)

36505 
	#USBC_UOG1_ENDPTCTRL6_TXE_MASK
 0x800000u

	)

36506 
	#USBC_UOG1_ENDPTCTRL6_TXE_SHIFT
 23

	)

36508 
	#USBC_UOG1_ENDPTCTRL7_RXS_MASK
 0x1u

	)

36509 
	#USBC_UOG1_ENDPTCTRL7_RXS_SHIFT
 0

	)

36510 
	#USBC_UOG1_ENDPTCTRL7_RXD_MASK
 0x2u

	)

36511 
	#USBC_UOG1_ENDPTCTRL7_RXD_SHIFT
 1

	)

36512 
	#USBC_UOG1_ENDPTCTRL7_RXT_MASK
 0xCu

	)

36513 
	#USBC_UOG1_ENDPTCTRL7_RXT_SHIFT
 2

	)

36514 
	#USBC_UOG1_ENDPTCTRL7_RXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTCTRL7_RXT_SHIFT
))&
USBC_UOG1_ENDPTCTRL7_RXT_MASK
)

	)

36515 
	#USBC_UOG1_ENDPTCTRL7_RXI_MASK
 0x20u

	)

36516 
	#USBC_UOG1_ENDPTCTRL7_RXI_SHIFT
 5

	)

36517 
	#USBC_UOG1_ENDPTCTRL7_RXR_MASK
 0x40u

	)

36518 
	#USBC_UOG1_ENDPTCTRL7_RXR_SHIFT
 6

	)

36519 
	#USBC_UOG1_ENDPTCTRL7_RXE_MASK
 0x80u

	)

36520 
	#USBC_UOG1_ENDPTCTRL7_RXE_SHIFT
 7

	)

36521 
	#USBC_UOG1_ENDPTCTRL7_TXS_MASK
 0x10000u

	)

36522 
	#USBC_UOG1_ENDPTCTRL7_TXS_SHIFT
 16

	)

36523 
	#USBC_UOG1_ENDPTCTRL7_TXD_MASK
 0x20000u

	)

36524 
	#USBC_UOG1_ENDPTCTRL7_TXD_SHIFT
 17

	)

36525 
	#USBC_UOG1_ENDPTCTRL7_TXT_MASK
 0xC0000u

	)

36526 
	#USBC_UOG1_ENDPTCTRL7_TXT_SHIFT
 18

	)

36527 
	#USBC_UOG1_ENDPTCTRL7_TXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG1_ENDPTCTRL7_TXT_SHIFT
))&
USBC_UOG1_ENDPTCTRL7_TXT_MASK
)

	)

36528 
	#USBC_UOG1_ENDPTCTRL7_TXI_MASK
 0x200000u

	)

36529 
	#USBC_UOG1_ENDPTCTRL7_TXI_SHIFT
 21

	)

36530 
	#USBC_UOG1_ENDPTCTRL7_TXR_MASK
 0x400000u

	)

36531 
	#USBC_UOG1_ENDPTCTRL7_TXR_SHIFT
 22

	)

36532 
	#USBC_UOG1_ENDPTCTRL7_TXE_MASK
 0x800000u

	)

36533 
	#USBC_UOG1_ENDPTCTRL7_TXE_SHIFT
 23

	)

36535 
	#USBC_UOG2_ID_ID_MASK
 0x3Fu

	)

36536 
	#USBC_UOG2_ID_ID_SHIFT
 0

	)

36537 
	#USBC_UOG2_ID_ID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ID_ID_SHIFT
))&
USBC_UOG2_ID_ID_MASK
)

	)

36538 
	#USBC_UOG2_ID_NID_MASK
 0x3F00u

	)

36539 
	#USBC_UOG2_ID_NID_SHIFT
 8

	)

36540 
	#USBC_UOG2_ID_NID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ID_NID_SHIFT
))&
USBC_UOG2_ID_NID_MASK
)

	)

36541 
	#USBC_UOG2_ID_REVISION_MASK
 0xFF0000u

	)

36542 
	#USBC_UOG2_ID_REVISION_SHIFT
 16

	)

36543 
	#USBC_UOG2_ID_REVISION
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ID_REVISION_SHIFT
))&
USBC_UOG2_ID_REVISION_MASK
)

	)

36545 
	#USBC_UOG2_HWGENERAL_PHYW_MASK
 0x30u

	)

36546 
	#USBC_UOG2_HWGENERAL_PHYW_SHIFT
 4

	)

36547 
	#USBC_UOG2_HWGENERAL_PHYW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_HWGENERAL_PHYW_SHIFT
))&
USBC_UOG2_HWGENERAL_PHYW_MASK
)

	)

36548 
	#USBC_UOG2_HWGENERAL_PHYM_MASK
 0x1C0u

	)

36549 
	#USBC_UOG2_HWGENERAL_PHYM_SHIFT
 6

	)

36550 
	#USBC_UOG2_HWGENERAL_PHYM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_HWGENERAL_PHYM_SHIFT
))&
USBC_UOG2_HWGENERAL_PHYM_MASK
)

	)

36551 
	#USBC_UOG2_HWGENERAL_SM_MASK
 0x600u

	)

36552 
	#USBC_UOG2_HWGENERAL_SM_SHIFT
 9

	)

36553 
	#USBC_UOG2_HWGENERAL_SM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_HWGENERAL_SM_SHIFT
))&
USBC_UOG2_HWGENERAL_SM_MASK
)

	)

36555 
	#USBC_UOG2_HWHOST_HC_MASK
 0x1u

	)

36556 
	#USBC_UOG2_HWHOST_HC_SHIFT
 0

	)

36557 
	#USBC_UOG2_HWHOST_NPORT_MASK
 0xEu

	)

36558 
	#USBC_UOG2_HWHOST_NPORT_SHIFT
 1

	)

36559 
	#USBC_UOG2_HWHOST_NPORT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_HWHOST_NPORT_SHIFT
))&
USBC_UOG2_HWHOST_NPORT_MASK
)

	)

36561 
	#USBC_UOG2_HWDEVICE_DC_MASK
 0x1u

	)

36562 
	#USBC_UOG2_HWDEVICE_DC_SHIFT
 0

	)

36563 
	#USBC_UOG2_HWDEVICE_DEVEP_MASK
 0x3Eu

	)

36564 
	#USBC_UOG2_HWDEVICE_DEVEP_SHIFT
 1

	)

36565 
	#USBC_UOG2_HWDEVICE_DEVEP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_HWDEVICE_DEVEP_SHIFT
))&
USBC_UOG2_HWDEVICE_DEVEP_MASK
)

	)

36567 
	#USBC_UOG2_HWTXBUF_TXBURST_MASK
 0xFFu

	)

36568 
	#USBC_UOG2_HWTXBUF_TXBURST_SHIFT
 0

	)

36569 
	#USBC_UOG2_HWTXBUF_TXBURST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_HWTXBUF_TXBURST_SHIFT
))&
USBC_UOG2_HWTXBUF_TXBURST_MASK
)

	)

36570 
	#USBC_UOG2_HWTXBUF_TXCHANADD_MASK
 0xFF0000u

	)

36571 
	#USBC_UOG2_HWTXBUF_TXCHANADD_SHIFT
 16

	)

36572 
	#USBC_UOG2_HWTXBUF_TXCHANADD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_HWTXBUF_TXCHANADD_SHIFT
))&
USBC_UOG2_HWTXBUF_TXCHANADD_MASK
)

	)

36574 
	#USBC_UOG2_HWRXBUF_RXBURST_MASK
 0xFFu

	)

36575 
	#USBC_UOG2_HWRXBUF_RXBURST_SHIFT
 0

	)

36576 
	#USBC_UOG2_HWRXBUF_RXBURST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_HWRXBUF_RXBURST_SHIFT
))&
USBC_UOG2_HWRXBUF_RXBURST_MASK
)

	)

36577 
	#USBC_UOG2_HWRXBUF_RXADD_MASK
 0xFF00u

	)

36578 
	#USBC_UOG2_HWRXBUF_RXADD_SHIFT
 8

	)

36579 
	#USBC_UOG2_HWRXBUF_RXADD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_HWRXBUF_RXADD_SHIFT
))&
USBC_UOG2_HWRXBUF_RXADD_MASK
)

	)

36581 
	#USBC_UOG2_GPTIMER0LD_GPTLD_MASK
 0xFFFFFFu

	)

36582 
	#USBC_UOG2_GPTIMER0LD_GPTLD_SHIFT
 0

	)

36583 
	#USBC_UOG2_GPTIMER0LD_GPTLD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_GPTIMER0LD_GPTLD_SHIFT
))&
USBC_UOG2_GPTIMER0LD_GPTLD_MASK
)

	)

36585 
	#USBC_UOG2_GPTIMER0CTRL_GPTCNT_MASK
 0xFFFFFFu

	)

36586 
	#USBC_UOG2_GPTIMER0CTRL_GPTCNT_SHIFT
 0

	)

36587 
	#USBC_UOG2_GPTIMER0CTRL_GPTCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_GPTIMER0CTRL_GPTCNT_SHIFT
))&
USBC_UOG2_GPTIMER0CTRL_GPTCNT_MASK
)

	)

36588 
	#USBC_UOG2_GPTIMER0CTRL_GPTMODE_MASK
 0x1000000u

	)

36589 
	#USBC_UOG2_GPTIMER0CTRL_GPTMODE_SHIFT
 24

	)

36590 
	#USBC_UOG2_GPTIMER0CTRL_GPTRST_MASK
 0x40000000u

	)

36591 
	#USBC_UOG2_GPTIMER0CTRL_GPTRST_SHIFT
 30

	)

36592 
	#USBC_UOG2_GPTIMER0CTRL_GPTRUN_MASK
 0x80000000u

	)

36593 
	#USBC_UOG2_GPTIMER0CTRL_GPTRUN_SHIFT
 31

	)

36595 
	#USBC_UOG2_GPTIMER1LD_GPTLD_MASK
 0xFFFFFFu

	)

36596 
	#USBC_UOG2_GPTIMER1LD_GPTLD_SHIFT
 0

	)

36597 
	#USBC_UOG2_GPTIMER1LD_GPTLD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_GPTIMER1LD_GPTLD_SHIFT
))&
USBC_UOG2_GPTIMER1LD_GPTLD_MASK
)

	)

36599 
	#USBC_UOG2_GPTIMER1CTRL_GPTCNT_MASK
 0xFFFFFFu

	)

36600 
	#USBC_UOG2_GPTIMER1CTRL_GPTCNT_SHIFT
 0

	)

36601 
	#USBC_UOG2_GPTIMER1CTRL_GPTCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_GPTIMER1CTRL_GPTCNT_SHIFT
))&
USBC_UOG2_GPTIMER1CTRL_GPTCNT_MASK
)

	)

36602 
	#USBC_UOG2_GPTIMER1CTRL_GPTMODE_MASK
 0x1000000u

	)

36603 
	#USBC_UOG2_GPTIMER1CTRL_GPTMODE_SHIFT
 24

	)

36604 
	#USBC_UOG2_GPTIMER1CTRL_GPTRST_MASK
 0x40000000u

	)

36605 
	#USBC_UOG2_GPTIMER1CTRL_GPTRST_SHIFT
 30

	)

36606 
	#USBC_UOG2_GPTIMER1CTRL_GPTRUN_MASK
 0x80000000u

	)

36607 
	#USBC_UOG2_GPTIMER1CTRL_GPTRUN_SHIFT
 31

	)

36609 
	#USBC_UOG2_SBUSCFG_AHBBRST_MASK
 0x7u

	)

36610 
	#USBC_UOG2_SBUSCFG_AHBBRST_SHIFT
 0

	)

36611 
	#USBC_UOG2_SBUSCFG_AHBBRST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_SBUSCFG_AHBBRST_SHIFT
))&
USBC_UOG2_SBUSCFG_AHBBRST_MASK
)

	)

36613 
	#USBC_UOG2_CAPLENGTH_CAPLENGTH_MASK
 0xFFu

	)

36614 
	#USBC_UOG2_CAPLENGTH_CAPLENGTH_SHIFT
 0

	)

36615 
	#USBC_UOG2_CAPLENGTH_CAPLENGTH
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
USBC_UOG2_CAPLENGTH_CAPLENGTH_SHIFT
))&
USBC_UOG2_CAPLENGTH_CAPLENGTH_MASK
)

	)

36617 
	#USBC_UOG2_HCIVERSION_HCIVERSION_MASK
 0xFFFFu

	)

36618 
	#USBC_UOG2_HCIVERSION_HCIVERSION_SHIFT
 0

	)

36619 
	#USBC_UOG2_HCIVERSION_HCIVERSION
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
USBC_UOG2_HCIVERSION_HCIVERSION_SHIFT
))&
USBC_UOG2_HCIVERSION_HCIVERSION_MASK
)

	)

36621 
	#USBC_UOG2_HCSPARAMS_N_PORTS_MASK
 0xFu

	)

36622 
	#USBC_UOG2_HCSPARAMS_N_PORTS_SHIFT
 0

	)

36623 
	#USBC_UOG2_HCSPARAMS_N_PORTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_HCSPARAMS_N_PORTS_SHIFT
))&
USBC_UOG2_HCSPARAMS_N_PORTS_MASK
)

	)

36624 
	#USBC_UOG2_HCSPARAMS_PPC_MASK
 0x10u

	)

36625 
	#USBC_UOG2_HCSPARAMS_PPC_SHIFT
 4

	)

36626 
	#USBC_UOG2_HCSPARAMS_N_PCC_MASK
 0xF00u

	)

36627 
	#USBC_UOG2_HCSPARAMS_N_PCC_SHIFT
 8

	)

36628 
	#USBC_UOG2_HCSPARAMS_N_PCC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_HCSPARAMS_N_PCC_SHIFT
))&
USBC_UOG2_HCSPARAMS_N_PCC_MASK
)

	)

36629 
	#USBC_UOG2_HCSPARAMS_N_CC_MASK
 0xF000u

	)

36630 
	#USBC_UOG2_HCSPARAMS_N_CC_SHIFT
 12

	)

36631 
	#USBC_UOG2_HCSPARAMS_N_CC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_HCSPARAMS_N_CC_SHIFT
))&
USBC_UOG2_HCSPARAMS_N_CC_MASK
)

	)

36632 
	#USBC_UOG2_HCSPARAMS_PI_MASK
 0x10000u

	)

36633 
	#USBC_UOG2_HCSPARAMS_PI_SHIFT
 16

	)

36634 
	#USBC_UOG2_HCSPARAMS_N_PTT_MASK
 0xF00000u

	)

36635 
	#USBC_UOG2_HCSPARAMS_N_PTT_SHIFT
 20

	)

36636 
	#USBC_UOG2_HCSPARAMS_N_PTT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_HCSPARAMS_N_PTT_SHIFT
))&
USBC_UOG2_HCSPARAMS_N_PTT_MASK
)

	)

36637 
	#USBC_UOG2_HCSPARAMS_N_TT_MASK
 0xF000000u

	)

36638 
	#USBC_UOG2_HCSPARAMS_N_TT_SHIFT
 24

	)

36639 
	#USBC_UOG2_HCSPARAMS_N_TT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_HCSPARAMS_N_TT_SHIFT
))&
USBC_UOG2_HCSPARAMS_N_TT_MASK
)

	)

36641 
	#USBC_UOG2_HCCPARAMS_ADC_MASK
 0x1u

	)

36642 
	#USBC_UOG2_HCCPARAMS_ADC_SHIFT
 0

	)

36643 
	#USBC_UOG2_HCCPARAMS_PFL_MASK
 0x2u

	)

36644 
	#USBC_UOG2_HCCPARAMS_PFL_SHIFT
 1

	)

36645 
	#USBC_UOG2_HCCPARAMS_ASP_MASK
 0x4u

	)

36646 
	#USBC_UOG2_HCCPARAMS_ASP_SHIFT
 2

	)

36647 
	#USBC_UOG2_HCCPARAMS_IST_MASK
 0xF0u

	)

36648 
	#USBC_UOG2_HCCPARAMS_IST_SHIFT
 4

	)

36649 
	#USBC_UOG2_HCCPARAMS_IST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_HCCPARAMS_IST_SHIFT
))&
USBC_UOG2_HCCPARAMS_IST_MASK
)

	)

36650 
	#USBC_UOG2_HCCPARAMS_EECP_MASK
 0xFF00u

	)

36651 
	#USBC_UOG2_HCCPARAMS_EECP_SHIFT
 8

	)

36652 
	#USBC_UOG2_HCCPARAMS_EECP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_HCCPARAMS_EECP_SHIFT
))&
USBC_UOG2_HCCPARAMS_EECP_MASK
)

	)

36654 
	#USBC_UOG2_DCIVERSION_DCIVERSION_MASK
 0xFFFFu

	)

36655 
	#USBC_UOG2_DCIVERSION_DCIVERSION_SHIFT
 0

	)

36656 
	#USBC_UOG2_DCIVERSION_DCIVERSION
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
USBC_UOG2_DCIVERSION_DCIVERSION_SHIFT
))&
USBC_UOG2_DCIVERSION_DCIVERSION_MASK
)

	)

36658 
	#USBC_UOG2_DCCPARAMS_DEN_MASK
 0x1Fu

	)

36659 
	#USBC_UOG2_DCCPARAMS_DEN_SHIFT
 0

	)

36660 
	#USBC_UOG2_DCCPARAMS_DEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_DCCPARAMS_DEN_SHIFT
))&
USBC_UOG2_DCCPARAMS_DEN_MASK
)

	)

36661 
	#USBC_UOG2_DCCPARAMS_DC_MASK
 0x80u

	)

36662 
	#USBC_UOG2_DCCPARAMS_DC_SHIFT
 7

	)

36663 
	#USBC_UOG2_DCCPARAMS_HC_MASK
 0x100u

	)

36664 
	#USBC_UOG2_DCCPARAMS_HC_SHIFT
 8

	)

36666 
	#USBC_UOG2_USBCMD_RS_MASK
 0x1u

	)

36667 
	#USBC_UOG2_USBCMD_RS_SHIFT
 0

	)

36668 
	#USBC_UOG2_USBCMD_RST_MASK
 0x2u

	)

36669 
	#USBC_UOG2_USBCMD_RST_SHIFT
 1

	)

36670 
	#USBC_UOG2_USBCMD_FS_1_MASK
 0xCu

	)

36671 
	#USBC_UOG2_USBCMD_FS_1_SHIFT
 2

	)

36672 
	#USBC_UOG2_USBCMD_FS_1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_USBCMD_FS_1_SHIFT
))&
USBC_UOG2_USBCMD_FS_1_MASK
)

	)

36673 
	#USBC_UOG2_USBCMD_PSE_MASK
 0x10u

	)

36674 
	#USBC_UOG2_USBCMD_PSE_SHIFT
 4

	)

36675 
	#USBC_UOG2_USBCMD_ASE_MASK
 0x20u

	)

36676 
	#USBC_UOG2_USBCMD_ASE_SHIFT
 5

	)

36677 
	#USBC_UOG2_USBCMD_IAA_MASK
 0x40u

	)

36678 
	#USBC_UOG2_USBCMD_IAA_SHIFT
 6

	)

36679 
	#USBC_UOG2_USBCMD_ASP_MASK
 0x300u

	)

36680 
	#USBC_UOG2_USBCMD_ASP_SHIFT
 8

	)

36681 
	#USBC_UOG2_USBCMD_ASP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_USBCMD_ASP_SHIFT
))&
USBC_UOG2_USBCMD_ASP_MASK
)

	)

36682 
	#USBC_UOG2_USBCMD_ASPE_MASK
 0x800u

	)

36683 
	#USBC_UOG2_USBCMD_ASPE_SHIFT
 11

	)

36684 
	#USBC_UOG2_USBCMD_SUTW_MASK
 0x2000u

	)

36685 
	#USBC_UOG2_USBCMD_SUTW_SHIFT
 13

	)

36686 
	#USBC_UOG2_USBCMD_ATDTW_MASK
 0x4000u

	)

36687 
	#USBC_UOG2_USBCMD_ATDTW_SHIFT
 14

	)

36688 
	#USBC_UOG2_USBCMD_FS_2_MASK
 0x8000u

	)

36689 
	#USBC_UOG2_USBCMD_FS_2_SHIFT
 15

	)

36690 
	#USBC_UOG2_USBCMD_ITC_MASK
 0xFF0000u

	)

36691 
	#USBC_UOG2_USBCMD_ITC_SHIFT
 16

	)

36692 
	#USBC_UOG2_USBCMD_ITC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_USBCMD_ITC_SHIFT
))&
USBC_UOG2_USBCMD_ITC_MASK
)

	)

36694 
	#USBC_UOG2_USBSTS_UI_MASK
 0x1u

	)

36695 
	#USBC_UOG2_USBSTS_UI_SHIFT
 0

	)

36696 
	#USBC_UOG2_USBSTS_UEI_MASK
 0x2u

	)

36697 
	#USBC_UOG2_USBSTS_UEI_SHIFT
 1

	)

36698 
	#USBC_UOG2_USBSTS_PCI_MASK
 0x4u

	)

36699 
	#USBC_UOG2_USBSTS_PCI_SHIFT
 2

	)

36700 
	#USBC_UOG2_USBSTS_FRI_MASK
 0x8u

	)

36701 
	#USBC_UOG2_USBSTS_FRI_SHIFT
 3

	)

36702 
	#USBC_UOG2_USBSTS_SEI_MASK
 0x10u

	)

36703 
	#USBC_UOG2_USBSTS_SEI_SHIFT
 4

	)

36704 
	#USBC_UOG2_USBSTS_AAI_MASK
 0x20u

	)

36705 
	#USBC_UOG2_USBSTS_AAI_SHIFT
 5

	)

36706 
	#USBC_UOG2_USBSTS_URI_MASK
 0x40u

	)

36707 
	#USBC_UOG2_USBSTS_URI_SHIFT
 6

	)

36708 
	#USBC_UOG2_USBSTS_SRI_MASK
 0x80u

	)

36709 
	#USBC_UOG2_USBSTS_SRI_SHIFT
 7

	)

36710 
	#USBC_UOG2_USBSTS_SLI_MASK
 0x100u

	)

36711 
	#USBC_UOG2_USBSTS_SLI_SHIFT
 8

	)

36712 
	#USBC_UOG2_USBSTS_ULPII_MASK
 0x400u

	)

36713 
	#USBC_UOG2_USBSTS_ULPII_SHIFT
 10

	)

36714 
	#USBC_UOG2_USBSTS_HCH_MASK
 0x1000u

	)

36715 
	#USBC_UOG2_USBSTS_HCH_SHIFT
 12

	)

36716 
	#USBC_UOG2_USBSTS_RCL_MASK
 0x2000u

	)

36717 
	#USBC_UOG2_USBSTS_RCL_SHIFT
 13

	)

36718 
	#USBC_UOG2_USBSTS_PS_MASK
 0x4000u

	)

36719 
	#USBC_UOG2_USBSTS_PS_SHIFT
 14

	)

36720 
	#USBC_UOG2_USBSTS_AS_MASK
 0x8000u

	)

36721 
	#USBC_UOG2_USBSTS_AS_SHIFT
 15

	)

36722 
	#USBC_UOG2_USBSTS_NAKI_MASK
 0x10000u

	)

36723 
	#USBC_UOG2_USBSTS_NAKI_SHIFT
 16

	)

36724 
	#USBC_UOG2_USBSTS_TI0_MASK
 0x1000000u

	)

36725 
	#USBC_UOG2_USBSTS_TI0_SHIFT
 24

	)

36726 
	#USBC_UOG2_USBSTS_TI1_MASK
 0x2000000u

	)

36727 
	#USBC_UOG2_USBSTS_TI1_SHIFT
 25

	)

36729 
	#USBC_UOG2_USBINTR_UE_MASK
 0x1u

	)

36730 
	#USBC_UOG2_USBINTR_UE_SHIFT
 0

	)

36731 
	#USBC_UOG2_USBINTR_UEE_MASK
 0x2u

	)

36732 
	#USBC_UOG2_USBINTR_UEE_SHIFT
 1

	)

36733 
	#USBC_UOG2_USBINTR_PCE_MASK
 0x4u

	)

36734 
	#USBC_UOG2_USBINTR_PCE_SHIFT
 2

	)

36735 
	#USBC_UOG2_USBINTR_FRE_MASK
 0x8u

	)

36736 
	#USBC_UOG2_USBINTR_FRE_SHIFT
 3

	)

36737 
	#USBC_UOG2_USBINTR_SEE_MASK
 0x10u

	)

36738 
	#USBC_UOG2_USBINTR_SEE_SHIFT
 4

	)

36739 
	#USBC_UOG2_USBINTR_AAE_MASK
 0x20u

	)

36740 
	#USBC_UOG2_USBINTR_AAE_SHIFT
 5

	)

36741 
	#USBC_UOG2_USBINTR_URE_MASK
 0x40u

	)

36742 
	#USBC_UOG2_USBINTR_URE_SHIFT
 6

	)

36743 
	#USBC_UOG2_USBINTR_SRE_MASK
 0x80u

	)

36744 
	#USBC_UOG2_USBINTR_SRE_SHIFT
 7

	)

36745 
	#USBC_UOG2_USBINTR_SLE_MASK
 0x100u

	)

36746 
	#USBC_UOG2_USBINTR_SLE_SHIFT
 8

	)

36747 
	#USBC_UOG2_USBINTR_ULPIE_MASK
 0x400u

	)

36748 
	#USBC_UOG2_USBINTR_ULPIE_SHIFT
 10

	)

36749 
	#USBC_UOG2_USBINTR_NAKE_MASK
 0x10000u

	)

36750 
	#USBC_UOG2_USBINTR_NAKE_SHIFT
 16

	)

36751 
	#USBC_UOG2_USBINTR_UAIE_MASK
 0x40000u

	)

36752 
	#USBC_UOG2_USBINTR_UAIE_SHIFT
 18

	)

36753 
	#USBC_UOG2_USBINTR_UPIE_MASK
 0x80000u

	)

36754 
	#USBC_UOG2_USBINTR_UPIE_SHIFT
 19

	)

36755 
	#USBC_UOG2_USBINTR_TIE0_MASK
 0x1000000u

	)

36756 
	#USBC_UOG2_USBINTR_TIE0_SHIFT
 24

	)

36757 
	#USBC_UOG2_USBINTR_TIE1_MASK
 0x2000000u

	)

36758 
	#USBC_UOG2_USBINTR_TIE1_SHIFT
 25

	)

36760 
	#USBC_UOG2_FRINDEX_FRINDEX_MASK
 0x3FFFu

	)

36761 
	#USBC_UOG2_FRINDEX_FRINDEX_SHIFT
 0

	)

36762 
	#USBC_UOG2_FRINDEX_FRINDEX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_FRINDEX_FRINDEX_SHIFT
))&
USBC_UOG2_FRINDEX_FRINDEX_MASK
)

	)

36764 
	#USBC_UOG2_PERIODICLISTBASE_BASEADR_MASK
 0xFFFFF000u

	)

36765 
	#USBC_UOG2_PERIODICLISTBASE_BASEADR_SHIFT
 12

	)

36766 
	#USBC_UOG2_PERIODICLISTBASE_BASEADR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_PERIODICLISTBASE_BASEADR_SHIFT
))&
USBC_UOG2_PERIODICLISTBASE_BASEADR_MASK
)

	)

36768 
	#USBC_UOG2_DEVICEADDR_USBADRA_MASK
 0x1000000u

	)

36769 
	#USBC_UOG2_DEVICEADDR_USBADRA_SHIFT
 24

	)

36770 
	#USBC_UOG2_DEVICEADDR_USBADR_MASK
 0xFE000000u

	)

36771 
	#USBC_UOG2_DEVICEADDR_USBADR_SHIFT
 25

	)

36772 
	#USBC_UOG2_DEVICEADDR_USBADR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_DEVICEADDR_USBADR_SHIFT
))&
USBC_UOG2_DEVICEADDR_USBADR_MASK
)

	)

36774 
	#USBC_UOG2_ASYNCLISTADDR_ASYBASE_MASK
 0xFFFFFFE0u

	)

36775 
	#USBC_UOG2_ASYNCLISTADDR_ASYBASE_SHIFT
 5

	)

36776 
	#USBC_UOG2_ASYNCLISTADDR_ASYBASE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ASYNCLISTADDR_ASYBASE_SHIFT
))&
USBC_UOG2_ASYNCLISTADDR_ASYBASE_MASK
)

	)

36778 
	#USBC_UOG2_ENDPTLISTADDR_EPBASE_MASK
 0xFFFFF800u

	)

36779 
	#USBC_UOG2_ENDPTLISTADDR_EPBASE_SHIFT
 11

	)

36780 
	#USBC_UOG2_ENDPTLISTADDR_EPBASE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTLISTADDR_EPBASE_SHIFT
))&
USBC_UOG2_ENDPTLISTADDR_EPBASE_MASK
)

	)

36782 
	#USBC_UOG2_BURSTSIZE_RXPBURST_MASK
 0xFFu

	)

36783 
	#USBC_UOG2_BURSTSIZE_RXPBURST_SHIFT
 0

	)

36784 
	#USBC_UOG2_BURSTSIZE_RXPBURST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_BURSTSIZE_RXPBURST_SHIFT
))&
USBC_UOG2_BURSTSIZE_RXPBURST_MASK
)

	)

36785 
	#USBC_UOG2_BURSTSIZE_TXPBURST_MASK
 0x1FF00u

	)

36786 
	#USBC_UOG2_BURSTSIZE_TXPBURST_SHIFT
 8

	)

36787 
	#USBC_UOG2_BURSTSIZE_TXPBURST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_BURSTSIZE_TXPBURST_SHIFT
))&
USBC_UOG2_BURSTSIZE_TXPBURST_MASK
)

	)

36789 
	#USBC_UOG2_TXFILLTUNING_TXSCHOH_MASK
 0xFFu

	)

36790 
	#USBC_UOG2_TXFILLTUNING_TXSCHOH_SHIFT
 0

	)

36791 
	#USBC_UOG2_TXFILLTUNING_TXSCHOH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_TXFILLTUNING_TXSCHOH_SHIFT
))&
USBC_UOG2_TXFILLTUNING_TXSCHOH_MASK
)

	)

36792 
	#USBC_UOG2_TXFILLTUNING_TXSCHHEALTH_MASK
 0x1F00u

	)

36793 
	#USBC_UOG2_TXFILLTUNING_TXSCHHEALTH_SHIFT
 8

	)

36794 
	#USBC_UOG2_TXFILLTUNING_TXSCHHEALTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_TXFILLTUNING_TXSCHHEALTH_SHIFT
))&
USBC_UOG2_TXFILLTUNING_TXSCHHEALTH_MASK
)

	)

36795 
	#USBC_UOG2_TXFILLTUNING_TXFIFOTHRES_MASK
 0x3F0000u

	)

36796 
	#USBC_UOG2_TXFILLTUNING_TXFIFOTHRES_SHIFT
 16

	)

36797 
	#USBC_UOG2_TXFILLTUNING_TXFIFOTHRES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_TXFILLTUNING_TXFIFOTHRES_SHIFT
))&
USBC_UOG2_TXFILLTUNING_TXFIFOTHRES_MASK
)

	)

36799 
	#USBC_UOG2_ENDPTNAK_EPRN_MASK
 0xFFu

	)

36800 
	#USBC_UOG2_ENDPTNAK_EPRN_SHIFT
 0

	)

36801 
	#USBC_UOG2_ENDPTNAK_EPRN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTNAK_EPRN_SHIFT
))&
USBC_UOG2_ENDPTNAK_EPRN_MASK
)

	)

36802 
	#USBC_UOG2_ENDPTNAK_EPTN_MASK
 0xFF0000u

	)

36803 
	#USBC_UOG2_ENDPTNAK_EPTN_SHIFT
 16

	)

36804 
	#USBC_UOG2_ENDPTNAK_EPTN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTNAK_EPTN_SHIFT
))&
USBC_UOG2_ENDPTNAK_EPTN_MASK
)

	)

36806 
	#USBC_UOG2_ENDPTNAKEN_EPRNE_MASK
 0xFFu

	)

36807 
	#USBC_UOG2_ENDPTNAKEN_EPRNE_SHIFT
 0

	)

36808 
	#USBC_UOG2_ENDPTNAKEN_EPRNE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTNAKEN_EPRNE_SHIFT
))&
USBC_UOG2_ENDPTNAKEN_EPRNE_MASK
)

	)

36809 
	#USBC_UOG2_ENDPTNAKEN_EPTNE_MASK
 0xFF0000u

	)

36810 
	#USBC_UOG2_ENDPTNAKEN_EPTNE_SHIFT
 16

	)

36811 
	#USBC_UOG2_ENDPTNAKEN_EPTNE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTNAKEN_EPTNE_SHIFT
))&
USBC_UOG2_ENDPTNAKEN_EPTNE_MASK
)

	)

36813 
	#USBC_UOG2_CONFIGFLAG_CF_MASK
 0x1u

	)

36814 
	#USBC_UOG2_CONFIGFLAG_CF_SHIFT
 0

	)

36816 
	#USBC_UOG2_PORTSC1_CCS_MASK
 0x1u

	)

36817 
	#USBC_UOG2_PORTSC1_CCS_SHIFT
 0

	)

36818 
	#USBC_UOG2_PORTSC1_CSC_MASK
 0x2u

	)

36819 
	#USBC_UOG2_PORTSC1_CSC_SHIFT
 1

	)

36820 
	#USBC_UOG2_PORTSC1_PE_MASK
 0x4u

	)

36821 
	#USBC_UOG2_PORTSC1_PE_SHIFT
 2

	)

36822 
	#USBC_UOG2_PORTSC1_PEC_MASK
 0x8u

	)

36823 
	#USBC_UOG2_PORTSC1_PEC_SHIFT
 3

	)

36824 
	#USBC_UOG2_PORTSC1_OCA_MASK
 0x10u

	)

36825 
	#USBC_UOG2_PORTSC1_OCA_SHIFT
 4

	)

36826 
	#USBC_UOG2_PORTSC1_OCC_MASK
 0x20u

	)

36827 
	#USBC_UOG2_PORTSC1_OCC_SHIFT
 5

	)

36828 
	#USBC_UOG2_PORTSC1_FPR_MASK
 0x40u

	)

36829 
	#USBC_UOG2_PORTSC1_FPR_SHIFT
 6

	)

36830 
	#USBC_UOG2_PORTSC1_SUSP_MASK
 0x80u

	)

36831 
	#USBC_UOG2_PORTSC1_SUSP_SHIFT
 7

	)

36832 
	#USBC_UOG2_PORTSC1_PR_MASK
 0x100u

	)

36833 
	#USBC_UOG2_PORTSC1_PR_SHIFT
 8

	)

36834 
	#USBC_UOG2_PORTSC1_HSP_MASK
 0x200u

	)

36835 
	#USBC_UOG2_PORTSC1_HSP_SHIFT
 9

	)

36836 
	#USBC_UOG2_PORTSC1_LS_MASK
 0xC00u

	)

36837 
	#USBC_UOG2_PORTSC1_LS_SHIFT
 10

	)

36838 
	#USBC_UOG2_PORTSC1_LS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_PORTSC1_LS_SHIFT
))&
USBC_UOG2_PORTSC1_LS_MASK
)

	)

36839 
	#USBC_UOG2_PORTSC1_PP_MASK
 0x1000u

	)

36840 
	#USBC_UOG2_PORTSC1_PP_SHIFT
 12

	)

36841 
	#USBC_UOG2_PORTSC1_PO_MASK
 0x2000u

	)

36842 
	#USBC_UOG2_PORTSC1_PO_SHIFT
 13

	)

36843 
	#USBC_UOG2_PORTSC1_PIC_MASK
 0xC000u

	)

36844 
	#USBC_UOG2_PORTSC1_PIC_SHIFT
 14

	)

36845 
	#USBC_UOG2_PORTSC1_PIC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_PORTSC1_PIC_SHIFT
))&
USBC_UOG2_PORTSC1_PIC_MASK
)

	)

36846 
	#USBC_UOG2_PORTSC1_PTC_MASK
 0xF0000u

	)

36847 
	#USBC_UOG2_PORTSC1_PTC_SHIFT
 16

	)

36848 
	#USBC_UOG2_PORTSC1_PTC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_PORTSC1_PTC_SHIFT
))&
USBC_UOG2_PORTSC1_PTC_MASK
)

	)

36849 
	#USBC_UOG2_PORTSC1_WKCN_MASK
 0x100000u

	)

36850 
	#USBC_UOG2_PORTSC1_WKCN_SHIFT
 20

	)

36851 
	#USBC_UOG2_PORTSC1_WKDC_MASK
 0x200000u

	)

36852 
	#USBC_UOG2_PORTSC1_WKDC_SHIFT
 21

	)

36853 
	#USBC_UOG2_PORTSC1_WKOC_MASK
 0x400000u

	)

36854 
	#USBC_UOG2_PORTSC1_WKOC_SHIFT
 22

	)

36855 
	#USBC_UOG2_PORTSC1_PHCD_MASK
 0x800000u

	)

36856 
	#USBC_UOG2_PORTSC1_PHCD_SHIFT
 23

	)

36857 
	#USBC_UOG2_PORTSC1_PFSC_MASK
 0x1000000u

	)

36858 
	#USBC_UOG2_PORTSC1_PFSC_SHIFT
 24

	)

36859 
	#USBC_UOG2_PORTSC1_PTS_2_MASK
 0x2000000u

	)

36860 
	#USBC_UOG2_PORTSC1_PTS_2_SHIFT
 25

	)

36861 
	#USBC_UOG2_PORTSC1_PSPD_MASK
 0xC000000u

	)

36862 
	#USBC_UOG2_PORTSC1_PSPD_SHIFT
 26

	)

36863 
	#USBC_UOG2_PORTSC1_PSPD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_PORTSC1_PSPD_SHIFT
))&
USBC_UOG2_PORTSC1_PSPD_MASK
)

	)

36864 
	#USBC_UOG2_PORTSC1_PTW_MASK
 0x10000000u

	)

36865 
	#USBC_UOG2_PORTSC1_PTW_SHIFT
 28

	)

36866 
	#USBC_UOG2_PORTSC1_STS_MASK
 0x20000000u

	)

36867 
	#USBC_UOG2_PORTSC1_STS_SHIFT
 29

	)

36868 
	#USBC_UOG2_PORTSC1_PTS_1_MASK
 0xC0000000u

	)

36869 
	#USBC_UOG2_PORTSC1_PTS_1_SHIFT
 30

	)

36870 
	#USBC_UOG2_PORTSC1_PTS_1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_PORTSC1_PTS_1_SHIFT
))&
USBC_UOG2_PORTSC1_PTS_1_MASK
)

	)

36872 
	#USBC_UOG2_OTGSC_VD_MASK
 0x1u

	)

36873 
	#USBC_UOG2_OTGSC_VD_SHIFT
 0

	)

36874 
	#USBC_UOG2_OTGSC_VC_MASK
 0x2u

	)

36875 
	#USBC_UOG2_OTGSC_VC_SHIFT
 1

	)

36876 
	#USBC_UOG2_OTGSC_OT_MASK
 0x8u

	)

36877 
	#USBC_UOG2_OTGSC_OT_SHIFT
 3

	)

36878 
	#USBC_UOG2_OTGSC_DP_MASK
 0x10u

	)

36879 
	#USBC_UOG2_OTGSC_DP_SHIFT
 4

	)

36880 
	#USBC_UOG2_OTGSC_IDPU_MASK
 0x20u

	)

36881 
	#USBC_UOG2_OTGSC_IDPU_SHIFT
 5

	)

36882 
	#USBC_UOG2_OTGSC_ID_MASK
 0x100u

	)

36883 
	#USBC_UOG2_OTGSC_ID_SHIFT
 8

	)

36884 
	#USBC_UOG2_OTGSC_AVV_MASK
 0x200u

	)

36885 
	#USBC_UOG2_OTGSC_AVV_SHIFT
 9

	)

36886 
	#USBC_UOG2_OTGSC_ASV_MASK
 0x400u

	)

36887 
	#USBC_UOG2_OTGSC_ASV_SHIFT
 10

	)

36888 
	#USBC_UOG2_OTGSC_BSV_MASK
 0x800u

	)

36889 
	#USBC_UOG2_OTGSC_BSV_SHIFT
 11

	)

36890 
	#USBC_UOG2_OTGSC_BSE_MASK
 0x1000u

	)

36891 
	#USBC_UOG2_OTGSC_BSE_SHIFT
 12

	)

36892 
	#USBC_UOG2_OTGSC_TOG_1MS_MASK
 0x2000u

	)

36893 
	#USBC_UOG2_OTGSC_TOG_1MS_SHIFT
 13

	)

36894 
	#USBC_UOG2_OTGSC_DPS_MASK
 0x4000u

	)

36895 
	#USBC_UOG2_OTGSC_DPS_SHIFT
 14

	)

36896 
	#USBC_UOG2_OTGSC_IDIS_MASK
 0x10000u

	)

36897 
	#USBC_UOG2_OTGSC_IDIS_SHIFT
 16

	)

36898 
	#USBC_UOG2_OTGSC_AVVIS_MASK
 0x20000u

	)

36899 
	#USBC_UOG2_OTGSC_AVVIS_SHIFT
 17

	)

36900 
	#USBC_UOG2_OTGSC_ASVIS_MASK
 0x40000u

	)

36901 
	#USBC_UOG2_OTGSC_ASVIS_SHIFT
 18

	)

36902 
	#USBC_UOG2_OTGSC_BSVIS_MASK
 0x80000u

	)

36903 
	#USBC_UOG2_OTGSC_BSVIS_SHIFT
 19

	)

36904 
	#USBC_UOG2_OTGSC_BSEIS_MASK
 0x100000u

	)

36905 
	#USBC_UOG2_OTGSC_BSEIS_SHIFT
 20

	)

36906 
	#USBC_UOG2_OTGSC_STATUS_1MS_MASK
 0x200000u

	)

36907 
	#USBC_UOG2_OTGSC_STATUS_1MS_SHIFT
 21

	)

36908 
	#USBC_UOG2_OTGSC_DPIS_MASK
 0x400000u

	)

36909 
	#USBC_UOG2_OTGSC_DPIS_SHIFT
 22

	)

36910 
	#USBC_UOG2_OTGSC_IDIE_MASK
 0x1000000u

	)

36911 
	#USBC_UOG2_OTGSC_IDIE_SHIFT
 24

	)

36912 
	#USBC_UOG2_OTGSC_AVVIE_MASK
 0x2000000u

	)

36913 
	#USBC_UOG2_OTGSC_AVVIE_SHIFT
 25

	)

36914 
	#USBC_UOG2_OTGSC_ASVIE_MASK
 0x4000000u

	)

36915 
	#USBC_UOG2_OTGSC_ASVIE_SHIFT
 26

	)

36916 
	#USBC_UOG2_OTGSC_BSVIE_MASK
 0x8000000u

	)

36917 
	#USBC_UOG2_OTGSC_BSVIE_SHIFT
 27

	)

36918 
	#USBC_UOG2_OTGSC_BSEIE_MASK
 0x10000000u

	)

36919 
	#USBC_UOG2_OTGSC_BSEIE_SHIFT
 28

	)

36920 
	#USBC_UOG2_OTGSC_EN_1MS_MASK
 0x20000000u

	)

36921 
	#USBC_UOG2_OTGSC_EN_1MS_SHIFT
 29

	)

36922 
	#USBC_UOG2_OTGSC_DPIE_MASK
 0x40000000u

	)

36923 
	#USBC_UOG2_OTGSC_DPIE_SHIFT
 30

	)

36925 
	#USBC_UOG2_USBMODE_CM_MASK
 0x3u

	)

36926 
	#USBC_UOG2_USBMODE_CM_SHIFT
 0

	)

36927 
	#USBC_UOG2_USBMODE_CM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_USBMODE_CM_SHIFT
))&
USBC_UOG2_USBMODE_CM_MASK
)

	)

36928 
	#USBC_UOG2_USBMODE_ES_MASK
 0x4u

	)

36929 
	#USBC_UOG2_USBMODE_ES_SHIFT
 2

	)

36930 
	#USBC_UOG2_USBMODE_SLOM_MASK
 0x8u

	)

36931 
	#USBC_UOG2_USBMODE_SLOM_SHIFT
 3

	)

36932 
	#USBC_UOG2_USBMODE_SDIS_MASK
 0x10u

	)

36933 
	#USBC_UOG2_USBMODE_SDIS_SHIFT
 4

	)

36935 
	#USBC_UOG2_ENDPTSETUPSTAT_ENDPTSETUPSTAT_MASK
 0xFFFFu

	)

36936 
	#USBC_UOG2_ENDPTSETUPSTAT_ENDPTSETUPSTAT_SHIFT
 0

	)

36937 
	#USBC_UOG2_ENDPTSETUPSTAT_ENDPTSETUPSTAT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTSETUPSTAT_ENDPTSETUPSTAT_SHIFT
))&
USBC_UOG2_ENDPTSETUPSTAT_ENDPTSETUPSTAT_MASK
)

	)

36939 
	#USBC_UOG2_ENDPTPRIME_PERB_MASK
 0xFFu

	)

36940 
	#USBC_UOG2_ENDPTPRIME_PERB_SHIFT
 0

	)

36941 
	#USBC_UOG2_ENDPTPRIME_PERB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTPRIME_PERB_SHIFT
))&
USBC_UOG2_ENDPTPRIME_PERB_MASK
)

	)

36942 
	#USBC_UOG2_ENDPTPRIME_PETB_MASK
 0xFF0000u

	)

36943 
	#USBC_UOG2_ENDPTPRIME_PETB_SHIFT
 16

	)

36944 
	#USBC_UOG2_ENDPTPRIME_PETB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTPRIME_PETB_SHIFT
))&
USBC_UOG2_ENDPTPRIME_PETB_MASK
)

	)

36946 
	#USBC_UOG2_ENDPTFLUSH_FERB_MASK
 0xFFu

	)

36947 
	#USBC_UOG2_ENDPTFLUSH_FERB_SHIFT
 0

	)

36948 
	#USBC_UOG2_ENDPTFLUSH_FERB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTFLUSH_FERB_SHIFT
))&
USBC_UOG2_ENDPTFLUSH_FERB_MASK
)

	)

36949 
	#USBC_UOG2_ENDPTFLUSH_FETB_MASK
 0xFF0000u

	)

36950 
	#USBC_UOG2_ENDPTFLUSH_FETB_SHIFT
 16

	)

36951 
	#USBC_UOG2_ENDPTFLUSH_FETB
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTFLUSH_FETB_SHIFT
))&
USBC_UOG2_ENDPTFLUSH_FETB_MASK
)

	)

36953 
	#USBC_UOG2_ENDPTSTAT_ERBR_MASK
 0xFFu

	)

36954 
	#USBC_UOG2_ENDPTSTAT_ERBR_SHIFT
 0

	)

36955 
	#USBC_UOG2_ENDPTSTAT_ERBR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTSTAT_ERBR_SHIFT
))&
USBC_UOG2_ENDPTSTAT_ERBR_MASK
)

	)

36956 
	#USBC_UOG2_ENDPTSTAT_ETBR_MASK
 0xFF0000u

	)

36957 
	#USBC_UOG2_ENDPTSTAT_ETBR_SHIFT
 16

	)

36958 
	#USBC_UOG2_ENDPTSTAT_ETBR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTSTAT_ETBR_SHIFT
))&
USBC_UOG2_ENDPTSTAT_ETBR_MASK
)

	)

36960 
	#USBC_UOG2_ENDPTCOMPLETE_ERCE_MASK
 0xFFu

	)

36961 
	#USBC_UOG2_ENDPTCOMPLETE_ERCE_SHIFT
 0

	)

36962 
	#USBC_UOG2_ENDPTCOMPLETE_ERCE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTCOMPLETE_ERCE_SHIFT
))&
USBC_UOG2_ENDPTCOMPLETE_ERCE_MASK
)

	)

36963 
	#USBC_UOG2_ENDPTCOMPLETE_ETCE_MASK
 0xFF0000u

	)

36964 
	#USBC_UOG2_ENDPTCOMPLETE_ETCE_SHIFT
 16

	)

36965 
	#USBC_UOG2_ENDPTCOMPLETE_ETCE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTCOMPLETE_ETCE_SHIFT
))&
USBC_UOG2_ENDPTCOMPLETE_ETCE_MASK
)

	)

36967 
	#USBC_UOG2_ENDPTCTRL0_RXS_MASK
 0x1u

	)

36968 
	#USBC_UOG2_ENDPTCTRL0_RXS_SHIFT
 0

	)

36969 
	#USBC_UOG2_ENDPTCTRL0_RXT_MASK
 0xCu

	)

36970 
	#USBC_UOG2_ENDPTCTRL0_RXT_SHIFT
 2

	)

36971 
	#USBC_UOG2_ENDPTCTRL0_RXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTCTRL0_RXT_SHIFT
))&
USBC_UOG2_ENDPTCTRL0_RXT_MASK
)

	)

36972 
	#USBC_UOG2_ENDPTCTRL0_RXE_MASK
 0x80u

	)

36973 
	#USBC_UOG2_ENDPTCTRL0_RXE_SHIFT
 7

	)

36974 
	#USBC_UOG2_ENDPTCTRL0_TXS_MASK
 0x10000u

	)

36975 
	#USBC_UOG2_ENDPTCTRL0_TXS_SHIFT
 16

	)

36976 
	#USBC_UOG2_ENDPTCTRL0_TXT_MASK
 0xC0000u

	)

36977 
	#USBC_UOG2_ENDPTCTRL0_TXT_SHIFT
 18

	)

36978 
	#USBC_UOG2_ENDPTCTRL0_TXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTCTRL0_TXT_SHIFT
))&
USBC_UOG2_ENDPTCTRL0_TXT_MASK
)

	)

36979 
	#USBC_UOG2_ENDPTCTRL0_TXE_MASK
 0x800000u

	)

36980 
	#USBC_UOG2_ENDPTCTRL0_TXE_SHIFT
 23

	)

36982 
	#USBC_UOG2_ENDPTCTRL1_RXS_MASK
 0x1u

	)

36983 
	#USBC_UOG2_ENDPTCTRL1_RXS_SHIFT
 0

	)

36984 
	#USBC_UOG2_ENDPTCTRL1_RXD_MASK
 0x2u

	)

36985 
	#USBC_UOG2_ENDPTCTRL1_RXD_SHIFT
 1

	)

36986 
	#USBC_UOG2_ENDPTCTRL1_RXT_MASK
 0xCu

	)

36987 
	#USBC_UOG2_ENDPTCTRL1_RXT_SHIFT
 2

	)

36988 
	#USBC_UOG2_ENDPTCTRL1_RXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTCTRL1_RXT_SHIFT
))&
USBC_UOG2_ENDPTCTRL1_RXT_MASK
)

	)

36989 
	#USBC_UOG2_ENDPTCTRL1_RXI_MASK
 0x20u

	)

36990 
	#USBC_UOG2_ENDPTCTRL1_RXI_SHIFT
 5

	)

36991 
	#USBC_UOG2_ENDPTCTRL1_RXR_MASK
 0x40u

	)

36992 
	#USBC_UOG2_ENDPTCTRL1_RXR_SHIFT
 6

	)

36993 
	#USBC_UOG2_ENDPTCTRL1_RXE_MASK
 0x80u

	)

36994 
	#USBC_UOG2_ENDPTCTRL1_RXE_SHIFT
 7

	)

36995 
	#USBC_UOG2_ENDPTCTRL1_TXS_MASK
 0x10000u

	)

36996 
	#USBC_UOG2_ENDPTCTRL1_TXS_SHIFT
 16

	)

36997 
	#USBC_UOG2_ENDPTCTRL1_TXD_MASK
 0x20000u

	)

36998 
	#USBC_UOG2_ENDPTCTRL1_TXD_SHIFT
 17

	)

36999 
	#USBC_UOG2_ENDPTCTRL1_TXT_MASK
 0xC0000u

	)

37000 
	#USBC_UOG2_ENDPTCTRL1_TXT_SHIFT
 18

	)

37001 
	#USBC_UOG2_ENDPTCTRL1_TXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTCTRL1_TXT_SHIFT
))&
USBC_UOG2_ENDPTCTRL1_TXT_MASK
)

	)

37002 
	#USBC_UOG2_ENDPTCTRL1_TXI_MASK
 0x200000u

	)

37003 
	#USBC_UOG2_ENDPTCTRL1_TXI_SHIFT
 21

	)

37004 
	#USBC_UOG2_ENDPTCTRL1_TXR_MASK
 0x400000u

	)

37005 
	#USBC_UOG2_ENDPTCTRL1_TXR_SHIFT
 22

	)

37006 
	#USBC_UOG2_ENDPTCTRL1_TXE_MASK
 0x800000u

	)

37007 
	#USBC_UOG2_ENDPTCTRL1_TXE_SHIFT
 23

	)

37009 
	#USBC_UOG2_ENDPTCTRL2_RXS_MASK
 0x1u

	)

37010 
	#USBC_UOG2_ENDPTCTRL2_RXS_SHIFT
 0

	)

37011 
	#USBC_UOG2_ENDPTCTRL2_RXD_MASK
 0x2u

	)

37012 
	#USBC_UOG2_ENDPTCTRL2_RXD_SHIFT
 1

	)

37013 
	#USBC_UOG2_ENDPTCTRL2_RXT_MASK
 0xCu

	)

37014 
	#USBC_UOG2_ENDPTCTRL2_RXT_SHIFT
 2

	)

37015 
	#USBC_UOG2_ENDPTCTRL2_RXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTCTRL2_RXT_SHIFT
))&
USBC_UOG2_ENDPTCTRL2_RXT_MASK
)

	)

37016 
	#USBC_UOG2_ENDPTCTRL2_RXI_MASK
 0x20u

	)

37017 
	#USBC_UOG2_ENDPTCTRL2_RXI_SHIFT
 5

	)

37018 
	#USBC_UOG2_ENDPTCTRL2_RXR_MASK
 0x40u

	)

37019 
	#USBC_UOG2_ENDPTCTRL2_RXR_SHIFT
 6

	)

37020 
	#USBC_UOG2_ENDPTCTRL2_RXE_MASK
 0x80u

	)

37021 
	#USBC_UOG2_ENDPTCTRL2_RXE_SHIFT
 7

	)

37022 
	#USBC_UOG2_ENDPTCTRL2_TXS_MASK
 0x10000u

	)

37023 
	#USBC_UOG2_ENDPTCTRL2_TXS_SHIFT
 16

	)

37024 
	#USBC_UOG2_ENDPTCTRL2_TXD_MASK
 0x20000u

	)

37025 
	#USBC_UOG2_ENDPTCTRL2_TXD_SHIFT
 17

	)

37026 
	#USBC_UOG2_ENDPTCTRL2_TXT_MASK
 0xC0000u

	)

37027 
	#USBC_UOG2_ENDPTCTRL2_TXT_SHIFT
 18

	)

37028 
	#USBC_UOG2_ENDPTCTRL2_TXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTCTRL2_TXT_SHIFT
))&
USBC_UOG2_ENDPTCTRL2_TXT_MASK
)

	)

37029 
	#USBC_UOG2_ENDPTCTRL2_TXI_MASK
 0x200000u

	)

37030 
	#USBC_UOG2_ENDPTCTRL2_TXI_SHIFT
 21

	)

37031 
	#USBC_UOG2_ENDPTCTRL2_TXR_MASK
 0x400000u

	)

37032 
	#USBC_UOG2_ENDPTCTRL2_TXR_SHIFT
 22

	)

37033 
	#USBC_UOG2_ENDPTCTRL2_TXE_MASK
 0x800000u

	)

37034 
	#USBC_UOG2_ENDPTCTRL2_TXE_SHIFT
 23

	)

37036 
	#USBC_UOG2_ENDPTCTRL3_RXS_MASK
 0x1u

	)

37037 
	#USBC_UOG2_ENDPTCTRL3_RXS_SHIFT
 0

	)

37038 
	#USBC_UOG2_ENDPTCTRL3_RXD_MASK
 0x2u

	)

37039 
	#USBC_UOG2_ENDPTCTRL3_RXD_SHIFT
 1

	)

37040 
	#USBC_UOG2_ENDPTCTRL3_RXT_MASK
 0xCu

	)

37041 
	#USBC_UOG2_ENDPTCTRL3_RXT_SHIFT
 2

	)

37042 
	#USBC_UOG2_ENDPTCTRL3_RXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTCTRL3_RXT_SHIFT
))&
USBC_UOG2_ENDPTCTRL3_RXT_MASK
)

	)

37043 
	#USBC_UOG2_ENDPTCTRL3_RXI_MASK
 0x20u

	)

37044 
	#USBC_UOG2_ENDPTCTRL3_RXI_SHIFT
 5

	)

37045 
	#USBC_UOG2_ENDPTCTRL3_RXR_MASK
 0x40u

	)

37046 
	#USBC_UOG2_ENDPTCTRL3_RXR_SHIFT
 6

	)

37047 
	#USBC_UOG2_ENDPTCTRL3_RXE_MASK
 0x80u

	)

37048 
	#USBC_UOG2_ENDPTCTRL3_RXE_SHIFT
 7

	)

37049 
	#USBC_UOG2_ENDPTCTRL3_TXS_MASK
 0x10000u

	)

37050 
	#USBC_UOG2_ENDPTCTRL3_TXS_SHIFT
 16

	)

37051 
	#USBC_UOG2_ENDPTCTRL3_TXD_MASK
 0x20000u

	)

37052 
	#USBC_UOG2_ENDPTCTRL3_TXD_SHIFT
 17

	)

37053 
	#USBC_UOG2_ENDPTCTRL3_TXT_MASK
 0xC0000u

	)

37054 
	#USBC_UOG2_ENDPTCTRL3_TXT_SHIFT
 18

	)

37055 
	#USBC_UOG2_ENDPTCTRL3_TXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTCTRL3_TXT_SHIFT
))&
USBC_UOG2_ENDPTCTRL3_TXT_MASK
)

	)

37056 
	#USBC_UOG2_ENDPTCTRL3_TXI_MASK
 0x200000u

	)

37057 
	#USBC_UOG2_ENDPTCTRL3_TXI_SHIFT
 21

	)

37058 
	#USBC_UOG2_ENDPTCTRL3_TXR_MASK
 0x400000u

	)

37059 
	#USBC_UOG2_ENDPTCTRL3_TXR_SHIFT
 22

	)

37060 
	#USBC_UOG2_ENDPTCTRL3_TXE_MASK
 0x800000u

	)

37061 
	#USBC_UOG2_ENDPTCTRL3_TXE_SHIFT
 23

	)

37063 
	#USBC_UOG2_ENDPTCTRL4_RXS_MASK
 0x1u

	)

37064 
	#USBC_UOG2_ENDPTCTRL4_RXS_SHIFT
 0

	)

37065 
	#USBC_UOG2_ENDPTCTRL4_RXD_MASK
 0x2u

	)

37066 
	#USBC_UOG2_ENDPTCTRL4_RXD_SHIFT
 1

	)

37067 
	#USBC_UOG2_ENDPTCTRL4_RXT_MASK
 0xCu

	)

37068 
	#USBC_UOG2_ENDPTCTRL4_RXT_SHIFT
 2

	)

37069 
	#USBC_UOG2_ENDPTCTRL4_RXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTCTRL4_RXT_SHIFT
))&
USBC_UOG2_ENDPTCTRL4_RXT_MASK
)

	)

37070 
	#USBC_UOG2_ENDPTCTRL4_RXI_MASK
 0x20u

	)

37071 
	#USBC_UOG2_ENDPTCTRL4_RXI_SHIFT
 5

	)

37072 
	#USBC_UOG2_ENDPTCTRL4_RXR_MASK
 0x40u

	)

37073 
	#USBC_UOG2_ENDPTCTRL4_RXR_SHIFT
 6

	)

37074 
	#USBC_UOG2_ENDPTCTRL4_RXE_MASK
 0x80u

	)

37075 
	#USBC_UOG2_ENDPTCTRL4_RXE_SHIFT
 7

	)

37076 
	#USBC_UOG2_ENDPTCTRL4_TXS_MASK
 0x10000u

	)

37077 
	#USBC_UOG2_ENDPTCTRL4_TXS_SHIFT
 16

	)

37078 
	#USBC_UOG2_ENDPTCTRL4_TXD_MASK
 0x20000u

	)

37079 
	#USBC_UOG2_ENDPTCTRL4_TXD_SHIFT
 17

	)

37080 
	#USBC_UOG2_ENDPTCTRL4_TXT_MASK
 0xC0000u

	)

37081 
	#USBC_UOG2_ENDPTCTRL4_TXT_SHIFT
 18

	)

37082 
	#USBC_UOG2_ENDPTCTRL4_TXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTCTRL4_TXT_SHIFT
))&
USBC_UOG2_ENDPTCTRL4_TXT_MASK
)

	)

37083 
	#USBC_UOG2_ENDPTCTRL4_TXI_MASK
 0x200000u

	)

37084 
	#USBC_UOG2_ENDPTCTRL4_TXI_SHIFT
 21

	)

37085 
	#USBC_UOG2_ENDPTCTRL4_TXR_MASK
 0x400000u

	)

37086 
	#USBC_UOG2_ENDPTCTRL4_TXR_SHIFT
 22

	)

37087 
	#USBC_UOG2_ENDPTCTRL4_TXE_MASK
 0x800000u

	)

37088 
	#USBC_UOG2_ENDPTCTRL4_TXE_SHIFT
 23

	)

37090 
	#USBC_UOG2_ENDPTCTRL5_RXS_MASK
 0x1u

	)

37091 
	#USBC_UOG2_ENDPTCTRL5_RXS_SHIFT
 0

	)

37092 
	#USBC_UOG2_ENDPTCTRL5_RXD_MASK
 0x2u

	)

37093 
	#USBC_UOG2_ENDPTCTRL5_RXD_SHIFT
 1

	)

37094 
	#USBC_UOG2_ENDPTCTRL5_RXT_MASK
 0xCu

	)

37095 
	#USBC_UOG2_ENDPTCTRL5_RXT_SHIFT
 2

	)

37096 
	#USBC_UOG2_ENDPTCTRL5_RXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTCTRL5_RXT_SHIFT
))&
USBC_UOG2_ENDPTCTRL5_RXT_MASK
)

	)

37097 
	#USBC_UOG2_ENDPTCTRL5_RXI_MASK
 0x20u

	)

37098 
	#USBC_UOG2_ENDPTCTRL5_RXI_SHIFT
 5

	)

37099 
	#USBC_UOG2_ENDPTCTRL5_RXR_MASK
 0x40u

	)

37100 
	#USBC_UOG2_ENDPTCTRL5_RXR_SHIFT
 6

	)

37101 
	#USBC_UOG2_ENDPTCTRL5_RXE_MASK
 0x80u

	)

37102 
	#USBC_UOG2_ENDPTCTRL5_RXE_SHIFT
 7

	)

37103 
	#USBC_UOG2_ENDPTCTRL5_TXS_MASK
 0x10000u

	)

37104 
	#USBC_UOG2_ENDPTCTRL5_TXS_SHIFT
 16

	)

37105 
	#USBC_UOG2_ENDPTCTRL5_TXD_MASK
 0x20000u

	)

37106 
	#USBC_UOG2_ENDPTCTRL5_TXD_SHIFT
 17

	)

37107 
	#USBC_UOG2_ENDPTCTRL5_TXT_MASK
 0xC0000u

	)

37108 
	#USBC_UOG2_ENDPTCTRL5_TXT_SHIFT
 18

	)

37109 
	#USBC_UOG2_ENDPTCTRL5_TXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTCTRL5_TXT_SHIFT
))&
USBC_UOG2_ENDPTCTRL5_TXT_MASK
)

	)

37110 
	#USBC_UOG2_ENDPTCTRL5_TXI_MASK
 0x200000u

	)

37111 
	#USBC_UOG2_ENDPTCTRL5_TXI_SHIFT
 21

	)

37112 
	#USBC_UOG2_ENDPTCTRL5_TXR_MASK
 0x400000u

	)

37113 
	#USBC_UOG2_ENDPTCTRL5_TXR_SHIFT
 22

	)

37114 
	#USBC_UOG2_ENDPTCTRL5_TXE_MASK
 0x800000u

	)

37115 
	#USBC_UOG2_ENDPTCTRL5_TXE_SHIFT
 23

	)

37117 
	#USBC_UOG2_ENDPTCTRL6_RXS_MASK
 0x1u

	)

37118 
	#USBC_UOG2_ENDPTCTRL6_RXS_SHIFT
 0

	)

37119 
	#USBC_UOG2_ENDPTCTRL6_RXD_MASK
 0x2u

	)

37120 
	#USBC_UOG2_ENDPTCTRL6_RXD_SHIFT
 1

	)

37121 
	#USBC_UOG2_ENDPTCTRL6_RXT_MASK
 0xCu

	)

37122 
	#USBC_UOG2_ENDPTCTRL6_RXT_SHIFT
 2

	)

37123 
	#USBC_UOG2_ENDPTCTRL6_RXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTCTRL6_RXT_SHIFT
))&
USBC_UOG2_ENDPTCTRL6_RXT_MASK
)

	)

37124 
	#USBC_UOG2_ENDPTCTRL6_RXI_MASK
 0x20u

	)

37125 
	#USBC_UOG2_ENDPTCTRL6_RXI_SHIFT
 5

	)

37126 
	#USBC_UOG2_ENDPTCTRL6_RXR_MASK
 0x40u

	)

37127 
	#USBC_UOG2_ENDPTCTRL6_RXR_SHIFT
 6

	)

37128 
	#USBC_UOG2_ENDPTCTRL6_RXE_MASK
 0x80u

	)

37129 
	#USBC_UOG2_ENDPTCTRL6_RXE_SHIFT
 7

	)

37130 
	#USBC_UOG2_ENDPTCTRL6_TXS_MASK
 0x10000u

	)

37131 
	#USBC_UOG2_ENDPTCTRL6_TXS_SHIFT
 16

	)

37132 
	#USBC_UOG2_ENDPTCTRL6_TXD_MASK
 0x20000u

	)

37133 
	#USBC_UOG2_ENDPTCTRL6_TXD_SHIFT
 17

	)

37134 
	#USBC_UOG2_ENDPTCTRL6_TXT_MASK
 0xC0000u

	)

37135 
	#USBC_UOG2_ENDPTCTRL6_TXT_SHIFT
 18

	)

37136 
	#USBC_UOG2_ENDPTCTRL6_TXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTCTRL6_TXT_SHIFT
))&
USBC_UOG2_ENDPTCTRL6_TXT_MASK
)

	)

37137 
	#USBC_UOG2_ENDPTCTRL6_TXI_MASK
 0x200000u

	)

37138 
	#USBC_UOG2_ENDPTCTRL6_TXI_SHIFT
 21

	)

37139 
	#USBC_UOG2_ENDPTCTRL6_TXR_MASK
 0x400000u

	)

37140 
	#USBC_UOG2_ENDPTCTRL6_TXR_SHIFT
 22

	)

37141 
	#USBC_UOG2_ENDPTCTRL6_TXE_MASK
 0x800000u

	)

37142 
	#USBC_UOG2_ENDPTCTRL6_TXE_SHIFT
 23

	)

37144 
	#USBC_UOG2_ENDPTCTRL7_RXS_MASK
 0x1u

	)

37145 
	#USBC_UOG2_ENDPTCTRL7_RXS_SHIFT
 0

	)

37146 
	#USBC_UOG2_ENDPTCTRL7_RXD_MASK
 0x2u

	)

37147 
	#USBC_UOG2_ENDPTCTRL7_RXD_SHIFT
 1

	)

37148 
	#USBC_UOG2_ENDPTCTRL7_RXT_MASK
 0xCu

	)

37149 
	#USBC_UOG2_ENDPTCTRL7_RXT_SHIFT
 2

	)

37150 
	#USBC_UOG2_ENDPTCTRL7_RXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTCTRL7_RXT_SHIFT
))&
USBC_UOG2_ENDPTCTRL7_RXT_MASK
)

	)

37151 
	#USBC_UOG2_ENDPTCTRL7_RXI_MASK
 0x20u

	)

37152 
	#USBC_UOG2_ENDPTCTRL7_RXI_SHIFT
 5

	)

37153 
	#USBC_UOG2_ENDPTCTRL7_RXR_MASK
 0x40u

	)

37154 
	#USBC_UOG2_ENDPTCTRL7_RXR_SHIFT
 6

	)

37155 
	#USBC_UOG2_ENDPTCTRL7_RXE_MASK
 0x80u

	)

37156 
	#USBC_UOG2_ENDPTCTRL7_RXE_SHIFT
 7

	)

37157 
	#USBC_UOG2_ENDPTCTRL7_TXS_MASK
 0x10000u

	)

37158 
	#USBC_UOG2_ENDPTCTRL7_TXS_SHIFT
 16

	)

37159 
	#USBC_UOG2_ENDPTCTRL7_TXD_MASK
 0x20000u

	)

37160 
	#USBC_UOG2_ENDPTCTRL7_TXD_SHIFT
 17

	)

37161 
	#USBC_UOG2_ENDPTCTRL7_TXT_MASK
 0xC0000u

	)

37162 
	#USBC_UOG2_ENDPTCTRL7_TXT_SHIFT
 18

	)

37163 
	#USBC_UOG2_ENDPTCTRL7_TXT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UOG2_ENDPTCTRL7_TXT_SHIFT
))&
USBC_UOG2_ENDPTCTRL7_TXT_MASK
)

	)

37164 
	#USBC_UOG2_ENDPTCTRL7_TXI_MASK
 0x200000u

	)

37165 
	#USBC_UOG2_ENDPTCTRL7_TXI_SHIFT
 21

	)

37166 
	#USBC_UOG2_ENDPTCTRL7_TXR_MASK
 0x400000u

	)

37167 
	#USBC_UOG2_ENDPTCTRL7_TXR_SHIFT
 22

	)

37168 
	#USBC_UOG2_ENDPTCTRL7_TXE_MASK
 0x800000u

	)

37169 
	#USBC_UOG2_ENDPTCTRL7_TXE_SHIFT
 23

	)

37171 
	#USBC_UH1_ID_ID_MASK
 0x3Fu

	)

37172 
	#USBC_UH1_ID_ID_SHIFT
 0

	)

37173 
	#USBC_UH1_ID_ID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_ID_ID_SHIFT
))&
USBC_UH1_ID_ID_MASK
)

	)

37174 
	#USBC_UH1_ID_NID_MASK
 0x3F00u

	)

37175 
	#USBC_UH1_ID_NID_SHIFT
 8

	)

37176 
	#USBC_UH1_ID_NID
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_ID_NID_SHIFT
))&
USBC_UH1_ID_NID_MASK
)

	)

37177 
	#USBC_UH1_ID_REVISION_MASK
 0xFF0000u

	)

37178 
	#USBC_UH1_ID_REVISION_SHIFT
 16

	)

37179 
	#USBC_UH1_ID_REVISION
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_ID_REVISION_SHIFT
))&
USBC_UH1_ID_REVISION_MASK
)

	)

37181 
	#USBC_UH1_HWGENERAL_PHYW_MASK
 0x30u

	)

37182 
	#USBC_UH1_HWGENERAL_PHYW_SHIFT
 4

	)

37183 
	#USBC_UH1_HWGENERAL_PHYW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_HWGENERAL_PHYW_SHIFT
))&
USBC_UH1_HWGENERAL_PHYW_MASK
)

	)

37184 
	#USBC_UH1_HWGENERAL_PHYM_MASK
 0x1C0u

	)

37185 
	#USBC_UH1_HWGENERAL_PHYM_SHIFT
 6

	)

37186 
	#USBC_UH1_HWGENERAL_PHYM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_HWGENERAL_PHYM_SHIFT
))&
USBC_UH1_HWGENERAL_PHYM_MASK
)

	)

37187 
	#USBC_UH1_HWGENERAL_SM_MASK
 0x600u

	)

37188 
	#USBC_UH1_HWGENERAL_SM_SHIFT
 9

	)

37189 
	#USBC_UH1_HWGENERAL_SM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_HWGENERAL_SM_SHIFT
))&
USBC_UH1_HWGENERAL_SM_MASK
)

	)

37191 
	#USBC_UH1_HWHOST_HC_MASK
 0x1u

	)

37192 
	#USBC_UH1_HWHOST_HC_SHIFT
 0

	)

37193 
	#USBC_UH1_HWHOST_NPORT_MASK
 0xEu

	)

37194 
	#USBC_UH1_HWHOST_NPORT_SHIFT
 1

	)

37195 
	#USBC_UH1_HWHOST_NPORT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_HWHOST_NPORT_SHIFT
))&
USBC_UH1_HWHOST_NPORT_MASK
)

	)

37197 
	#USBC_UH1_HWTXBUF_TXBURST_MASK
 0xFFu

	)

37198 
	#USBC_UH1_HWTXBUF_TXBURST_SHIFT
 0

	)

37199 
	#USBC_UH1_HWTXBUF_TXBURST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_HWTXBUF_TXBURST_SHIFT
))&
USBC_UH1_HWTXBUF_TXBURST_MASK
)

	)

37200 
	#USBC_UH1_HWTXBUF_TXCHANADD_MASK
 0xFF0000u

	)

37201 
	#USBC_UH1_HWTXBUF_TXCHANADD_SHIFT
 16

	)

37202 
	#USBC_UH1_HWTXBUF_TXCHANADD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_HWTXBUF_TXCHANADD_SHIFT
))&
USBC_UH1_HWTXBUF_TXCHANADD_MASK
)

	)

37204 
	#USBC_UH1_HWRXBUF_RXBURST_MASK
 0xFFu

	)

37205 
	#USBC_UH1_HWRXBUF_RXBURST_SHIFT
 0

	)

37206 
	#USBC_UH1_HWRXBUF_RXBURST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_HWRXBUF_RXBURST_SHIFT
))&
USBC_UH1_HWRXBUF_RXBURST_MASK
)

	)

37207 
	#USBC_UH1_HWRXBUF_RXADD_MASK
 0xFF00u

	)

37208 
	#USBC_UH1_HWRXBUF_RXADD_SHIFT
 8

	)

37209 
	#USBC_UH1_HWRXBUF_RXADD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_HWRXBUF_RXADD_SHIFT
))&
USBC_UH1_HWRXBUF_RXADD_MASK
)

	)

37211 
	#USBC_UH1_GPTIMER0LD_GPTLD_MASK
 0xFFFFFFu

	)

37212 
	#USBC_UH1_GPTIMER0LD_GPTLD_SHIFT
 0

	)

37213 
	#USBC_UH1_GPTIMER0LD_GPTLD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_GPTIMER0LD_GPTLD_SHIFT
))&
USBC_UH1_GPTIMER0LD_GPTLD_MASK
)

	)

37215 
	#USBC_UH1_GPTIMER0CTRL_GPTCNT_MASK
 0xFFFFFFu

	)

37216 
	#USBC_UH1_GPTIMER0CTRL_GPTCNT_SHIFT
 0

	)

37217 
	#USBC_UH1_GPTIMER0CTRL_GPTCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_GPTIMER0CTRL_GPTCNT_SHIFT
))&
USBC_UH1_GPTIMER0CTRL_GPTCNT_MASK
)

	)

37218 
	#USBC_UH1_GPTIMER0CTRL_GPTMODE_MASK
 0x1000000u

	)

37219 
	#USBC_UH1_GPTIMER0CTRL_GPTMODE_SHIFT
 24

	)

37220 
	#USBC_UH1_GPTIMER0CTRL_GPTRST_MASK
 0x40000000u

	)

37221 
	#USBC_UH1_GPTIMER0CTRL_GPTRST_SHIFT
 30

	)

37222 
	#USBC_UH1_GPTIMER0CTRL_GPTRUN_MASK
 0x80000000u

	)

37223 
	#USBC_UH1_GPTIMER0CTRL_GPTRUN_SHIFT
 31

	)

37225 
	#USBC_UH1_GPTIMER1LD_GPTLD_MASK
 0xFFFFFFu

	)

37226 
	#USBC_UH1_GPTIMER1LD_GPTLD_SHIFT
 0

	)

37227 
	#USBC_UH1_GPTIMER1LD_GPTLD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_GPTIMER1LD_GPTLD_SHIFT
))&
USBC_UH1_GPTIMER1LD_GPTLD_MASK
)

	)

37229 
	#USBC_UH1_GPTIMER1CTRL_GPTCNT_MASK
 0xFFFFFFu

	)

37230 
	#USBC_UH1_GPTIMER1CTRL_GPTCNT_SHIFT
 0

	)

37231 
	#USBC_UH1_GPTIMER1CTRL_GPTCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_GPTIMER1CTRL_GPTCNT_SHIFT
))&
USBC_UH1_GPTIMER1CTRL_GPTCNT_MASK
)

	)

37232 
	#USBC_UH1_GPTIMER1CTRL_GPTMODE_MASK
 0x1000000u

	)

37233 
	#USBC_UH1_GPTIMER1CTRL_GPTMODE_SHIFT
 24

	)

37234 
	#USBC_UH1_GPTIMER1CTRL_GPTRST_MASK
 0x40000000u

	)

37235 
	#USBC_UH1_GPTIMER1CTRL_GPTRST_SHIFT
 30

	)

37236 
	#USBC_UH1_GPTIMER1CTRL_GPTRUN_MASK
 0x80000000u

	)

37237 
	#USBC_UH1_GPTIMER1CTRL_GPTRUN_SHIFT
 31

	)

37239 
	#USBC_UH1_SBUSCFG_AHBBRST_MASK
 0x7u

	)

37240 
	#USBC_UH1_SBUSCFG_AHBBRST_SHIFT
 0

	)

37241 
	#USBC_UH1_SBUSCFG_AHBBRST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_SBUSCFG_AHBBRST_SHIFT
))&
USBC_UH1_SBUSCFG_AHBBRST_MASK
)

	)

37243 
	#USBC_UH1_CAPLENGTH_CAPLENGTH_MASK
 0xFFu

	)

37244 
	#USBC_UH1_CAPLENGTH_CAPLENGTH_SHIFT
 0

	)

37245 
	#USBC_UH1_CAPLENGTH_CAPLENGTH
(
x
Ë(((
uöt8_t
)(((uöt8_t)(x))<<
USBC_UH1_CAPLENGTH_CAPLENGTH_SHIFT
))&
USBC_UH1_CAPLENGTH_CAPLENGTH_MASK
)

	)

37247 
	#USBC_UH1_HCIVERSION_HCIVERSION_MASK
 0xFFFFu

	)

37248 
	#USBC_UH1_HCIVERSION_HCIVERSION_SHIFT
 0

	)

37249 
	#USBC_UH1_HCIVERSION_HCIVERSION
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
USBC_UH1_HCIVERSION_HCIVERSION_SHIFT
))&
USBC_UH1_HCIVERSION_HCIVERSION_MASK
)

	)

37251 
	#USBC_UH1_HCSPARAMS_N_PORTS_MASK
 0xFu

	)

37252 
	#USBC_UH1_HCSPARAMS_N_PORTS_SHIFT
 0

	)

37253 
	#USBC_UH1_HCSPARAMS_N_PORTS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_HCSPARAMS_N_PORTS_SHIFT
))&
USBC_UH1_HCSPARAMS_N_PORTS_MASK
)

	)

37254 
	#USBC_UH1_HCSPARAMS_PPC_MASK
 0x10u

	)

37255 
	#USBC_UH1_HCSPARAMS_PPC_SHIFT
 4

	)

37256 
	#USBC_UH1_HCSPARAMS_N_PCC_MASK
 0xF00u

	)

37257 
	#USBC_UH1_HCSPARAMS_N_PCC_SHIFT
 8

	)

37258 
	#USBC_UH1_HCSPARAMS_N_PCC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_HCSPARAMS_N_PCC_SHIFT
))&
USBC_UH1_HCSPARAMS_N_PCC_MASK
)

	)

37259 
	#USBC_UH1_HCSPARAMS_N_CC_MASK
 0xF000u

	)

37260 
	#USBC_UH1_HCSPARAMS_N_CC_SHIFT
 12

	)

37261 
	#USBC_UH1_HCSPARAMS_N_CC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_HCSPARAMS_N_CC_SHIFT
))&
USBC_UH1_HCSPARAMS_N_CC_MASK
)

	)

37262 
	#USBC_UH1_HCSPARAMS_PI_MASK
 0x10000u

	)

37263 
	#USBC_UH1_HCSPARAMS_PI_SHIFT
 16

	)

37264 
	#USBC_UH1_HCSPARAMS_N_PTT_MASK
 0xF00000u

	)

37265 
	#USBC_UH1_HCSPARAMS_N_PTT_SHIFT
 20

	)

37266 
	#USBC_UH1_HCSPARAMS_N_PTT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_HCSPARAMS_N_PTT_SHIFT
))&
USBC_UH1_HCSPARAMS_N_PTT_MASK
)

	)

37267 
	#USBC_UH1_HCSPARAMS_N_TT_MASK
 0xF000000u

	)

37268 
	#USBC_UH1_HCSPARAMS_N_TT_SHIFT
 24

	)

37269 
	#USBC_UH1_HCSPARAMS_N_TT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_HCSPARAMS_N_TT_SHIFT
))&
USBC_UH1_HCSPARAMS_N_TT_MASK
)

	)

37271 
	#USBC_UH1_HCCPARAMS_ADC_MASK
 0x1u

	)

37272 
	#USBC_UH1_HCCPARAMS_ADC_SHIFT
 0

	)

37273 
	#USBC_UH1_HCCPARAMS_PFL_MASK
 0x2u

	)

37274 
	#USBC_UH1_HCCPARAMS_PFL_SHIFT
 1

	)

37275 
	#USBC_UH1_HCCPARAMS_ASP_MASK
 0x4u

	)

37276 
	#USBC_UH1_HCCPARAMS_ASP_SHIFT
 2

	)

37277 
	#USBC_UH1_HCCPARAMS_IST_MASK
 0xF0u

	)

37278 
	#USBC_UH1_HCCPARAMS_IST_SHIFT
 4

	)

37279 
	#USBC_UH1_HCCPARAMS_IST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_HCCPARAMS_IST_SHIFT
))&
USBC_UH1_HCCPARAMS_IST_MASK
)

	)

37280 
	#USBC_UH1_HCCPARAMS_EECP_MASK
 0xFF00u

	)

37281 
	#USBC_UH1_HCCPARAMS_EECP_SHIFT
 8

	)

37282 
	#USBC_UH1_HCCPARAMS_EECP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_HCCPARAMS_EECP_SHIFT
))&
USBC_UH1_HCCPARAMS_EECP_MASK
)

	)

37284 
	#USBC_UH1_USBCMD_RS_MASK
 0x1u

	)

37285 
	#USBC_UH1_USBCMD_RS_SHIFT
 0

	)

37286 
	#USBC_UH1_USBCMD_RST_MASK
 0x2u

	)

37287 
	#USBC_UH1_USBCMD_RST_SHIFT
 1

	)

37288 
	#USBC_UH1_USBCMD_FS_1_MASK
 0xCu

	)

37289 
	#USBC_UH1_USBCMD_FS_1_SHIFT
 2

	)

37290 
	#USBC_UH1_USBCMD_FS_1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_USBCMD_FS_1_SHIFT
))&
USBC_UH1_USBCMD_FS_1_MASK
)

	)

37291 
	#USBC_UH1_USBCMD_PSE_MASK
 0x10u

	)

37292 
	#USBC_UH1_USBCMD_PSE_SHIFT
 4

	)

37293 
	#USBC_UH1_USBCMD_ASE_MASK
 0x20u

	)

37294 
	#USBC_UH1_USBCMD_ASE_SHIFT
 5

	)

37295 
	#USBC_UH1_USBCMD_IAA_MASK
 0x40u

	)

37296 
	#USBC_UH1_USBCMD_IAA_SHIFT
 6

	)

37297 
	#USBC_UH1_USBCMD_ASP_MASK
 0x300u

	)

37298 
	#USBC_UH1_USBCMD_ASP_SHIFT
 8

	)

37299 
	#USBC_UH1_USBCMD_ASP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_USBCMD_ASP_SHIFT
))&
USBC_UH1_USBCMD_ASP_MASK
)

	)

37300 
	#USBC_UH1_USBCMD_ASPE_MASK
 0x800u

	)

37301 
	#USBC_UH1_USBCMD_ASPE_SHIFT
 11

	)

37302 
	#USBC_UH1_USBCMD_SUTW_MASK
 0x2000u

	)

37303 
	#USBC_UH1_USBCMD_SUTW_SHIFT
 13

	)

37304 
	#USBC_UH1_USBCMD_ATDTW_MASK
 0x4000u

	)

37305 
	#USBC_UH1_USBCMD_ATDTW_SHIFT
 14

	)

37306 
	#USBC_UH1_USBCMD_FS_2_MASK
 0x8000u

	)

37307 
	#USBC_UH1_USBCMD_FS_2_SHIFT
 15

	)

37308 
	#USBC_UH1_USBCMD_ITC_MASK
 0xFF0000u

	)

37309 
	#USBC_UH1_USBCMD_ITC_SHIFT
 16

	)

37310 
	#USBC_UH1_USBCMD_ITC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_USBCMD_ITC_SHIFT
))&
USBC_UH1_USBCMD_ITC_MASK
)

	)

37312 
	#USBC_UH1_USBSTS_UI_MASK
 0x1u

	)

37313 
	#USBC_UH1_USBSTS_UI_SHIFT
 0

	)

37314 
	#USBC_UH1_USBSTS_UEI_MASK
 0x2u

	)

37315 
	#USBC_UH1_USBSTS_UEI_SHIFT
 1

	)

37316 
	#USBC_UH1_USBSTS_PCI_MASK
 0x4u

	)

37317 
	#USBC_UH1_USBSTS_PCI_SHIFT
 2

	)

37318 
	#USBC_UH1_USBSTS_FRI_MASK
 0x8u

	)

37319 
	#USBC_UH1_USBSTS_FRI_SHIFT
 3

	)

37320 
	#USBC_UH1_USBSTS_SEI_MASK
 0x10u

	)

37321 
	#USBC_UH1_USBSTS_SEI_SHIFT
 4

	)

37322 
	#USBC_UH1_USBSTS_AAI_MASK
 0x20u

	)

37323 
	#USBC_UH1_USBSTS_AAI_SHIFT
 5

	)

37324 
	#USBC_UH1_USBSTS_URI_MASK
 0x40u

	)

37325 
	#USBC_UH1_USBSTS_URI_SHIFT
 6

	)

37326 
	#USBC_UH1_USBSTS_SRI_MASK
 0x80u

	)

37327 
	#USBC_UH1_USBSTS_SRI_SHIFT
 7

	)

37328 
	#USBC_UH1_USBSTS_SLI_MASK
 0x100u

	)

37329 
	#USBC_UH1_USBSTS_SLI_SHIFT
 8

	)

37330 
	#USBC_UH1_USBSTS_ULPII_MASK
 0x400u

	)

37331 
	#USBC_UH1_USBSTS_ULPII_SHIFT
 10

	)

37332 
	#USBC_UH1_USBSTS_HCH_MASK
 0x1000u

	)

37333 
	#USBC_UH1_USBSTS_HCH_SHIFT
 12

	)

37334 
	#USBC_UH1_USBSTS_RCL_MASK
 0x2000u

	)

37335 
	#USBC_UH1_USBSTS_RCL_SHIFT
 13

	)

37336 
	#USBC_UH1_USBSTS_PS_MASK
 0x4000u

	)

37337 
	#USBC_UH1_USBSTS_PS_SHIFT
 14

	)

37338 
	#USBC_UH1_USBSTS_AS_MASK
 0x8000u

	)

37339 
	#USBC_UH1_USBSTS_AS_SHIFT
 15

	)

37340 
	#USBC_UH1_USBSTS_NAKI_MASK
 0x10000u

	)

37341 
	#USBC_UH1_USBSTS_NAKI_SHIFT
 16

	)

37342 
	#USBC_UH1_USBSTS_TI0_MASK
 0x1000000u

	)

37343 
	#USBC_UH1_USBSTS_TI0_SHIFT
 24

	)

37344 
	#USBC_UH1_USBSTS_TI1_MASK
 0x2000000u

	)

37345 
	#USBC_UH1_USBSTS_TI1_SHIFT
 25

	)

37347 
	#USBC_UH1_USBINTR_UE_MASK
 0x1u

	)

37348 
	#USBC_UH1_USBINTR_UE_SHIFT
 0

	)

37349 
	#USBC_UH1_USBINTR_UEE_MASK
 0x2u

	)

37350 
	#USBC_UH1_USBINTR_UEE_SHIFT
 1

	)

37351 
	#USBC_UH1_USBINTR_PCE_MASK
 0x4u

	)

37352 
	#USBC_UH1_USBINTR_PCE_SHIFT
 2

	)

37353 
	#USBC_UH1_USBINTR_FRE_MASK
 0x8u

	)

37354 
	#USBC_UH1_USBINTR_FRE_SHIFT
 3

	)

37355 
	#USBC_UH1_USBINTR_SEE_MASK
 0x10u

	)

37356 
	#USBC_UH1_USBINTR_SEE_SHIFT
 4

	)

37357 
	#USBC_UH1_USBINTR_AAE_MASK
 0x20u

	)

37358 
	#USBC_UH1_USBINTR_AAE_SHIFT
 5

	)

37359 
	#USBC_UH1_USBINTR_URE_MASK
 0x40u

	)

37360 
	#USBC_UH1_USBINTR_URE_SHIFT
 6

	)

37361 
	#USBC_UH1_USBINTR_SRE_MASK
 0x80u

	)

37362 
	#USBC_UH1_USBINTR_SRE_SHIFT
 7

	)

37363 
	#USBC_UH1_USBINTR_SLE_MASK
 0x100u

	)

37364 
	#USBC_UH1_USBINTR_SLE_SHIFT
 8

	)

37365 
	#USBC_UH1_USBINTR_ULPIE_MASK
 0x400u

	)

37366 
	#USBC_UH1_USBINTR_ULPIE_SHIFT
 10

	)

37367 
	#USBC_UH1_USBINTR_NAKE_MASK
 0x10000u

	)

37368 
	#USBC_UH1_USBINTR_NAKE_SHIFT
 16

	)

37369 
	#USBC_UH1_USBINTR_UAIE_MASK
 0x40000u

	)

37370 
	#USBC_UH1_USBINTR_UAIE_SHIFT
 18

	)

37371 
	#USBC_UH1_USBINTR_UPIE_MASK
 0x80000u

	)

37372 
	#USBC_UH1_USBINTR_UPIE_SHIFT
 19

	)

37373 
	#USBC_UH1_USBINTR_TIE0_MASK
 0x1000000u

	)

37374 
	#USBC_UH1_USBINTR_TIE0_SHIFT
 24

	)

37375 
	#USBC_UH1_USBINTR_TIE1_MASK
 0x2000000u

	)

37376 
	#USBC_UH1_USBINTR_TIE1_SHIFT
 25

	)

37378 
	#USBC_UH1_FRINDEX_FRINDEX_MASK
 0x3FFFu

	)

37379 
	#USBC_UH1_FRINDEX_FRINDEX_SHIFT
 0

	)

37380 
	#USBC_UH1_FRINDEX_FRINDEX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_FRINDEX_FRINDEX_SHIFT
))&
USBC_UH1_FRINDEX_FRINDEX_MASK
)

	)

37382 
	#USBC_UH1_PERIODICLISTBASE_BASEADR_MASK
 0xFFFFF000u

	)

37383 
	#USBC_UH1_PERIODICLISTBASE_BASEADR_SHIFT
 12

	)

37384 
	#USBC_UH1_PERIODICLISTBASE_BASEADR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_PERIODICLISTBASE_BASEADR_SHIFT
))&
USBC_UH1_PERIODICLISTBASE_BASEADR_MASK
)

	)

37386 
	#USBC_UH1_ASYNCLISTADDR_ASYBASE_MASK
 0xFFFFFFE0u

	)

37387 
	#USBC_UH1_ASYNCLISTADDR_ASYBASE_SHIFT
 5

	)

37388 
	#USBC_UH1_ASYNCLISTADDR_ASYBASE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_ASYNCLISTADDR_ASYBASE_SHIFT
))&
USBC_UH1_ASYNCLISTADDR_ASYBASE_MASK
)

	)

37390 
	#USBC_UH1_BURSTSIZE_RXPBURST_MASK
 0xFFu

	)

37391 
	#USBC_UH1_BURSTSIZE_RXPBURST_SHIFT
 0

	)

37392 
	#USBC_UH1_BURSTSIZE_RXPBURST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_BURSTSIZE_RXPBURST_SHIFT
))&
USBC_UH1_BURSTSIZE_RXPBURST_MASK
)

	)

37393 
	#USBC_UH1_BURSTSIZE_TXPBURST_MASK
 0x1FF00u

	)

37394 
	#USBC_UH1_BURSTSIZE_TXPBURST_SHIFT
 8

	)

37395 
	#USBC_UH1_BURSTSIZE_TXPBURST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_BURSTSIZE_TXPBURST_SHIFT
))&
USBC_UH1_BURSTSIZE_TXPBURST_MASK
)

	)

37397 
	#USBC_UH1_TXFILLTUNING_TXSCHOH_MASK
 0xFFu

	)

37398 
	#USBC_UH1_TXFILLTUNING_TXSCHOH_SHIFT
 0

	)

37399 
	#USBC_UH1_TXFILLTUNING_TXSCHOH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_TXFILLTUNING_TXSCHOH_SHIFT
))&
USBC_UH1_TXFILLTUNING_TXSCHOH_MASK
)

	)

37400 
	#USBC_UH1_TXFILLTUNING_TXSCHHEALTH_MASK
 0x1F00u

	)

37401 
	#USBC_UH1_TXFILLTUNING_TXSCHHEALTH_SHIFT
 8

	)

37402 
	#USBC_UH1_TXFILLTUNING_TXSCHHEALTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_TXFILLTUNING_TXSCHHEALTH_SHIFT
))&
USBC_UH1_TXFILLTUNING_TXSCHHEALTH_MASK
)

	)

37403 
	#USBC_UH1_TXFILLTUNING_TXFIFOTHRES_MASK
 0x3F0000u

	)

37404 
	#USBC_UH1_TXFILLTUNING_TXFIFOTHRES_SHIFT
 16

	)

37405 
	#USBC_UH1_TXFILLTUNING_TXFIFOTHRES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_TXFILLTUNING_TXFIFOTHRES_SHIFT
))&
USBC_UH1_TXFILLTUNING_TXFIFOTHRES_MASK
)

	)

37407 
	#USBC_UH1_CONFIGFLAG_CF_MASK
 0x1u

	)

37408 
	#USBC_UH1_CONFIGFLAG_CF_SHIFT
 0

	)

37410 
	#USBC_UH1_PORTSC1_CCS_MASK
 0x1u

	)

37411 
	#USBC_UH1_PORTSC1_CCS_SHIFT
 0

	)

37412 
	#USBC_UH1_PORTSC1_CSC_MASK
 0x2u

	)

37413 
	#USBC_UH1_PORTSC1_CSC_SHIFT
 1

	)

37414 
	#USBC_UH1_PORTSC1_PE_MASK
 0x4u

	)

37415 
	#USBC_UH1_PORTSC1_PE_SHIFT
 2

	)

37416 
	#USBC_UH1_PORTSC1_PEC_MASK
 0x8u

	)

37417 
	#USBC_UH1_PORTSC1_PEC_SHIFT
 3

	)

37418 
	#USBC_UH1_PORTSC1_OCA_MASK
 0x10u

	)

37419 
	#USBC_UH1_PORTSC1_OCA_SHIFT
 4

	)

37420 
	#USBC_UH1_PORTSC1_OCC_MASK
 0x20u

	)

37421 
	#USBC_UH1_PORTSC1_OCC_SHIFT
 5

	)

37422 
	#USBC_UH1_PORTSC1_FPR_MASK
 0x40u

	)

37423 
	#USBC_UH1_PORTSC1_FPR_SHIFT
 6

	)

37424 
	#USBC_UH1_PORTSC1_SUSP_MASK
 0x80u

	)

37425 
	#USBC_UH1_PORTSC1_SUSP_SHIFT
 7

	)

37426 
	#USBC_UH1_PORTSC1_PR_MASK
 0x100u

	)

37427 
	#USBC_UH1_PORTSC1_PR_SHIFT
 8

	)

37428 
	#USBC_UH1_PORTSC1_HSP_MASK
 0x200u

	)

37429 
	#USBC_UH1_PORTSC1_HSP_SHIFT
 9

	)

37430 
	#USBC_UH1_PORTSC1_LS_MASK
 0xC00u

	)

37431 
	#USBC_UH1_PORTSC1_LS_SHIFT
 10

	)

37432 
	#USBC_UH1_PORTSC1_LS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_PORTSC1_LS_SHIFT
))&
USBC_UH1_PORTSC1_LS_MASK
)

	)

37433 
	#USBC_UH1_PORTSC1_PP_MASK
 0x1000u

	)

37434 
	#USBC_UH1_PORTSC1_PP_SHIFT
 12

	)

37435 
	#USBC_UH1_PORTSC1_PO_MASK
 0x2000u

	)

37436 
	#USBC_UH1_PORTSC1_PO_SHIFT
 13

	)

37437 
	#USBC_UH1_PORTSC1_PIC_MASK
 0xC000u

	)

37438 
	#USBC_UH1_PORTSC1_PIC_SHIFT
 14

	)

37439 
	#USBC_UH1_PORTSC1_PIC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_PORTSC1_PIC_SHIFT
))&
USBC_UH1_PORTSC1_PIC_MASK
)

	)

37440 
	#USBC_UH1_PORTSC1_PTC_MASK
 0xF0000u

	)

37441 
	#USBC_UH1_PORTSC1_PTC_SHIFT
 16

	)

37442 
	#USBC_UH1_PORTSC1_PTC
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_PORTSC1_PTC_SHIFT
))&
USBC_UH1_PORTSC1_PTC_MASK
)

	)

37443 
	#USBC_UH1_PORTSC1_WKCN_MASK
 0x100000u

	)

37444 
	#USBC_UH1_PORTSC1_WKCN_SHIFT
 20

	)

37445 
	#USBC_UH1_PORTSC1_WKDC_MASK
 0x200000u

	)

37446 
	#USBC_UH1_PORTSC1_WKDC_SHIFT
 21

	)

37447 
	#USBC_UH1_PORTSC1_WKOC_MASK
 0x400000u

	)

37448 
	#USBC_UH1_PORTSC1_WKOC_SHIFT
 22

	)

37449 
	#USBC_UH1_PORTSC1_PHCD_MASK
 0x800000u

	)

37450 
	#USBC_UH1_PORTSC1_PHCD_SHIFT
 23

	)

37451 
	#USBC_UH1_PORTSC1_PFSC_MASK
 0x1000000u

	)

37452 
	#USBC_UH1_PORTSC1_PFSC_SHIFT
 24

	)

37453 
	#USBC_UH1_PORTSC1_PTS_2_MASK
 0x2000000u

	)

37454 
	#USBC_UH1_PORTSC1_PTS_2_SHIFT
 25

	)

37455 
	#USBC_UH1_PORTSC1_PSPD_MASK
 0xC000000u

	)

37456 
	#USBC_UH1_PORTSC1_PSPD_SHIFT
 26

	)

37457 
	#USBC_UH1_PORTSC1_PSPD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_PORTSC1_PSPD_SHIFT
))&
USBC_UH1_PORTSC1_PSPD_MASK
)

	)

37458 
	#USBC_UH1_PORTSC1_PTW_MASK
 0x10000000u

	)

37459 
	#USBC_UH1_PORTSC1_PTW_SHIFT
 28

	)

37460 
	#USBC_UH1_PORTSC1_STS_MASK
 0x20000000u

	)

37461 
	#USBC_UH1_PORTSC1_STS_SHIFT
 29

	)

37462 
	#USBC_UH1_PORTSC1_PTS_1_MASK
 0xC0000000u

	)

37463 
	#USBC_UH1_PORTSC1_PTS_1_SHIFT
 30

	)

37464 
	#USBC_UH1_PORTSC1_PTS_1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_PORTSC1_PTS_1_SHIFT
))&
USBC_UH1_PORTSC1_PTS_1_MASK
)

	)

37466 
	#USBC_UH1_USBMODE_CM_MASK
 0x3u

	)

37467 
	#USBC_UH1_USBMODE_CM_SHIFT
 0

	)

37468 
	#USBC_UH1_USBMODE_CM
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBC_UH1_USBMODE_CM_SHIFT
))&
USBC_UH1_USBMODE_CM_MASK
)

	)

37469 
	#USBC_UH1_USBMODE_ES_MASK
 0x4u

	)

37470 
	#USBC_UH1_USBMODE_ES_SHIFT
 2

	)

37471 
	#USBC_UH1_USBMODE_SLOM_MASK
 0x8u

	)

37472 
	#USBC_UH1_USBMODE_SLOM_SHIFT
 3

	)

37473 
	#USBC_UH1_USBMODE_SDIS_MASK
 0x10u

	)

37474 
	#USBC_UH1_USBMODE_SDIS_SHIFT
 4

	)

37482 
	#USBC_BASE
 (0x42184000u)

	)

37484 
	#USBC
 ((
USBC_Ty≥
 *)
USBC_BASE
)

	)

37485 
	#USBC_BASE_PTR
 (
USBC
)

	)

37487 
	#USBC_BASE_ADDRS
 { 
USBC_BASE
 }

	)

37489 
	#USBC_BASE_PTRS
 { 
USBC
 }

	)

37502 
	#USBC_UOG1_ID
 
	`USBC_UOG1_ID_REG
(
USBC_BASE_PTR
)

	)

37503 
	#USBC_UOG1_HWGENERAL
 
	`USBC_UOG1_HWGENERAL_REG
(
USBC_BASE_PTR
)

	)

37504 
	#USBC_UOG1_HWHOST
 
	`USBC_UOG1_HWHOST_REG
(
USBC_BASE_PTR
)

	)

37505 
	#USBC_UOG1_HWDEVICE
 
	`USBC_UOG1_HWDEVICE_REG
(
USBC_BASE_PTR
)

	)

37506 
	#USBC_UOG1_HWTXBUF
 
	`USBC_UOG1_HWTXBUF_REG
(
USBC_BASE_PTR
)

	)

37507 
	#USBC_UOG1_HWRXBUF
 
	`USBC_UOG1_HWRXBUF_REG
(
USBC_BASE_PTR
)

	)

37508 
	#USBC_UOG1_GPTIMER0LD
 
	`USBC_UOG1_GPTIMER0LD_REG
(
USBC_BASE_PTR
)

	)

37509 
	#USBC_UOG1_GPTIMER0CTRL
 
	`USBC_UOG1_GPTIMER0CTRL_REG
(
USBC_BASE_PTR
)

	)

37510 
	#USBC_UOG1_GPTIMER1LD
 
	`USBC_UOG1_GPTIMER1LD_REG
(
USBC_BASE_PTR
)

	)

37511 
	#USBC_UOG1_GPTIMER1CTRL
 
	`USBC_UOG1_GPTIMER1CTRL_REG
(
USBC_BASE_PTR
)

	)

37512 
	#USBC_UOG1_SBUSCFG
 
	`USBC_UOG1_SBUSCFG_REG
(
USBC_BASE_PTR
)

	)

37513 
	#USBC_UOG1_CAPLENGTH
 
	`USBC_UOG1_CAPLENGTH_REG
(
USBC_BASE_PTR
)

	)

37514 
	#USBC_UOG1_HCIVERSION
 
	`USBC_UOG1_HCIVERSION_REG
(
USBC_BASE_PTR
)

	)

37515 
	#USBC_UOG1_HCSPARAMS
 
	`USBC_UOG1_HCSPARAMS_REG
(
USBC_BASE_PTR
)

	)

37516 
	#USBC_UOG1_HCCPARAMS
 
	`USBC_UOG1_HCCPARAMS_REG
(
USBC_BASE_PTR
)

	)

37517 
	#USBC_UOG1_DCIVERSION
 
	`USBC_UOG1_DCIVERSION_REG
(
USBC_BASE_PTR
)

	)

37518 
	#USBC_UOG1_DCCPARAMS
 
	`USBC_UOG1_DCCPARAMS_REG
(
USBC_BASE_PTR
)

	)

37519 
	#USBC_UOG1_USBCMD
 
	`USBC_UOG1_USBCMD_REG
(
USBC_BASE_PTR
)

	)

37520 
	#USBC_UOG1_USBSTS
 
	`USBC_UOG1_USBSTS_REG
(
USBC_BASE_PTR
)

	)

37521 
	#USBC_UOG1_USBINTR
 
	`USBC_UOG1_USBINTR_REG
(
USBC_BASE_PTR
)

	)

37522 
	#USBC_UOG1_FRINDEX
 
	`USBC_UOG1_FRINDEX_REG
(
USBC_BASE_PTR
)

	)

37523 
	#USBC_UOG1_PERIODICLISTBASE
 
	`USBC_UOG1_PERIODICLISTBASE_REG
(
USBC_BASE_PTR
)

	)

37524 
	#USBC_UOG1_DEVICEADDR
 
	`USBC_UOG1_DEVICEADDR_REG
(
USBC_BASE_PTR
)

	)

37525 
	#USBC_UOG1_ASYNCLISTADDR
 
	`USBC_UOG1_ASYNCLISTADDR_REG
(
USBC_BASE_PTR
)

	)

37526 
	#USBC_UOG1_ENDPTLISTADDR
 
	`USBC_UOG1_ENDPTLISTADDR_REG
(
USBC_BASE_PTR
)

	)

37527 
	#USBC_UOG1_BURSTSIZE
 
	`USBC_UOG1_BURSTSIZE_REG
(
USBC_BASE_PTR
)

	)

37528 
	#USBC_UOG1_TXFILLTUNING
 
	`USBC_UOG1_TXFILLTUNING_REG
(
USBC_BASE_PTR
)

	)

37529 
	#USBC_UOG1_ENDPTNAK
 
	`USBC_UOG1_ENDPTNAK_REG
(
USBC_BASE_PTR
)

	)

37530 
	#USBC_UOG1_ENDPTNAKEN
 
	`USBC_UOG1_ENDPTNAKEN_REG
(
USBC_BASE_PTR
)

	)

37531 
	#USBC_UOG1_CONFIGFLAG
 
	`USBC_UOG1_CONFIGFLAG_REG
(
USBC_BASE_PTR
)

	)

37532 
	#USBC_UOG1_PORTSC1
 
	`USBC_UOG1_PORTSC1_REG
(
USBC_BASE_PTR
)

	)

37533 
	#USBC_UOG1_OTGSC
 
	`USBC_UOG1_OTGSC_REG
(
USBC_BASE_PTR
)

	)

37534 
	#USBC_UOG1_USBMODE
 
	`USBC_UOG1_USBMODE_REG
(
USBC_BASE_PTR
)

	)

37535 
	#USBC_UOG1_ENDPTSETUPSTAT
 
	`USBC_UOG1_ENDPTSETUPSTAT_REG
(
USBC_BASE_PTR
)

	)

37536 
	#USBC_UOG1_ENDPTPRIME
 
	`USBC_UOG1_ENDPTPRIME_REG
(
USBC_BASE_PTR
)

	)

37537 
	#USBC_UOG1_ENDPTFLUSH
 
	`USBC_UOG1_ENDPTFLUSH_REG
(
USBC_BASE_PTR
)

	)

37538 
	#USBC_UOG1_ENDPTSTAT
 
	`USBC_UOG1_ENDPTSTAT_REG
(
USBC_BASE_PTR
)

	)

37539 
	#USBC_UOG1_ENDPTCOMPLETE
 
	`USBC_UOG1_ENDPTCOMPLETE_REG
(
USBC_BASE_PTR
)

	)

37540 
	#USBC_UOG1_ENDPTCTRL0
 
	`USBC_UOG1_ENDPTCTRL0_REG
(
USBC_BASE_PTR
)

	)

37541 
	#USBC_UOG1_ENDPTCTRL1
 
	`USBC_UOG1_ENDPTCTRL1_REG
(
USBC_BASE_PTR
)

	)

37542 
	#USBC_UOG1_ENDPTCTRL2
 
	`USBC_UOG1_ENDPTCTRL2_REG
(
USBC_BASE_PTR
)

	)

37543 
	#USBC_UOG1_ENDPTCTRL3
 
	`USBC_UOG1_ENDPTCTRL3_REG
(
USBC_BASE_PTR
)

	)

37544 
	#USBC_UOG1_ENDPTCTRL4
 
	`USBC_UOG1_ENDPTCTRL4_REG
(
USBC_BASE_PTR
)

	)

37545 
	#USBC_UOG1_ENDPTCTRL5
 
	`USBC_UOG1_ENDPTCTRL5_REG
(
USBC_BASE_PTR
)

	)

37546 
	#USBC_UOG1_ENDPTCTRL6
 
	`USBC_UOG1_ENDPTCTRL6_REG
(
USBC_BASE_PTR
)

	)

37547 
	#USBC_UOG1_ENDPTCTRL7
 
	`USBC_UOG1_ENDPTCTRL7_REG
(
USBC_BASE_PTR
)

	)

37548 
	#USBC_UOG2_ID
 
	`USBC_UOG2_ID_REG
(
USBC_BASE_PTR
)

	)

37549 
	#USBC_UOG2_HWGENERAL
 
	`USBC_UOG2_HWGENERAL_REG
(
USBC_BASE_PTR
)

	)

37550 
	#USBC_UOG2_HWHOST
 
	`USBC_UOG2_HWHOST_REG
(
USBC_BASE_PTR
)

	)

37551 
	#USBC_UOG2_HWDEVICE
 
	`USBC_UOG2_HWDEVICE_REG
(
USBC_BASE_PTR
)

	)

37552 
	#USBC_UOG2_HWTXBUF
 
	`USBC_UOG2_HWTXBUF_REG
(
USBC_BASE_PTR
)

	)

37553 
	#USBC_UOG2_HWRXBUF
 
	`USBC_UOG2_HWRXBUF_REG
(
USBC_BASE_PTR
)

	)

37554 
	#USBC_UOG2_GPTIMER0LD
 
	`USBC_UOG2_GPTIMER0LD_REG
(
USBC_BASE_PTR
)

	)

37555 
	#USBC_UOG2_GPTIMER0CTRL
 
	`USBC_UOG2_GPTIMER0CTRL_REG
(
USBC_BASE_PTR
)

	)

37556 
	#USBC_UOG2_GPTIMER1LD
 
	`USBC_UOG2_GPTIMER1LD_REG
(
USBC_BASE_PTR
)

	)

37557 
	#USBC_UOG2_GPTIMER1CTRL
 
	`USBC_UOG2_GPTIMER1CTRL_REG
(
USBC_BASE_PTR
)

	)

37558 
	#USBC_UOG2_SBUSCFG
 
	`USBC_UOG2_SBUSCFG_REG
(
USBC_BASE_PTR
)

	)

37559 
	#USBC_UOG2_CAPLENGTH
 
	`USBC_UOG2_CAPLENGTH_REG
(
USBC_BASE_PTR
)

	)

37560 
	#USBC_UOG2_HCIVERSION
 
	`USBC_UOG2_HCIVERSION_REG
(
USBC_BASE_PTR
)

	)

37561 
	#USBC_UOG2_HCSPARAMS
 
	`USBC_UOG2_HCSPARAMS_REG
(
USBC_BASE_PTR
)

	)

37562 
	#USBC_UOG2_HCCPARAMS
 
	`USBC_UOG2_HCCPARAMS_REG
(
USBC_BASE_PTR
)

	)

37563 
	#USBC_UOG2_DCIVERSION
 
	`USBC_UOG2_DCIVERSION_REG
(
USBC_BASE_PTR
)

	)

37564 
	#USBC_UOG2_DCCPARAMS
 
	`USBC_UOG2_DCCPARAMS_REG
(
USBC_BASE_PTR
)

	)

37565 
	#USBC_UOG2_USBCMD
 
	`USBC_UOG2_USBCMD_REG
(
USBC_BASE_PTR
)

	)

37566 
	#USBC_UOG2_USBSTS
 
	`USBC_UOG2_USBSTS_REG
(
USBC_BASE_PTR
)

	)

37567 
	#USBC_UOG2_USBINTR
 
	`USBC_UOG2_USBINTR_REG
(
USBC_BASE_PTR
)

	)

37568 
	#USBC_UOG2_FRINDEX
 
	`USBC_UOG2_FRINDEX_REG
(
USBC_BASE_PTR
)

	)

37569 
	#USBC_UOG2_PERIODICLISTBASE
 
	`USBC_UOG2_PERIODICLISTBASE_REG
(
USBC_BASE_PTR
)

	)

37570 
	#USBC_UOG2_DEVICEADDR
 
	`USBC_UOG2_DEVICEADDR_REG
(
USBC_BASE_PTR
)

	)

37571 
	#USBC_UOG2_ASYNCLISTADDR
 
	`USBC_UOG2_ASYNCLISTADDR_REG
(
USBC_BASE_PTR
)

	)

37572 
	#USBC_UOG2_ENDPTLISTADDR
 
	`USBC_UOG2_ENDPTLISTADDR_REG
(
USBC_BASE_PTR
)

	)

37573 
	#USBC_UOG2_BURSTSIZE
 
	`USBC_UOG2_BURSTSIZE_REG
(
USBC_BASE_PTR
)

	)

37574 
	#USBC_UOG2_TXFILLTUNING
 
	`USBC_UOG2_TXFILLTUNING_REG
(
USBC_BASE_PTR
)

	)

37575 
	#USBC_UOG2_ENDPTNAK
 
	`USBC_UOG2_ENDPTNAK_REG
(
USBC_BASE_PTR
)

	)

37576 
	#USBC_UOG2_ENDPTNAKEN
 
	`USBC_UOG2_ENDPTNAKEN_REG
(
USBC_BASE_PTR
)

	)

37577 
	#USBC_UOG2_CONFIGFLAG
 
	`USBC_UOG2_CONFIGFLAG_REG
(
USBC_BASE_PTR
)

	)

37578 
	#USBC_UOG2_PORTSC1
 
	`USBC_UOG2_PORTSC1_REG
(
USBC_BASE_PTR
)

	)

37579 
	#USBC_UOG2_OTGSC
 
	`USBC_UOG2_OTGSC_REG
(
USBC_BASE_PTR
)

	)

37580 
	#USBC_UOG2_USBMODE
 
	`USBC_UOG2_USBMODE_REG
(
USBC_BASE_PTR
)

	)

37581 
	#USBC_UOG2_ENDPTSETUPSTAT
 
	`USBC_UOG2_ENDPTSETUPSTAT_REG
(
USBC_BASE_PTR
)

	)

37582 
	#USBC_UOG2_ENDPTPRIME
 
	`USBC_UOG2_ENDPTPRIME_REG
(
USBC_BASE_PTR
)

	)

37583 
	#USBC_UOG2_ENDPTFLUSH
 
	`USBC_UOG2_ENDPTFLUSH_REG
(
USBC_BASE_PTR
)

	)

37584 
	#USBC_UOG2_ENDPTSTAT
 
	`USBC_UOG2_ENDPTSTAT_REG
(
USBC_BASE_PTR
)

	)

37585 
	#USBC_UOG2_ENDPTCOMPLETE
 
	`USBC_UOG2_ENDPTCOMPLETE_REG
(
USBC_BASE_PTR
)

	)

37586 
	#USBC_UOG2_ENDPTCTRL0
 
	`USBC_UOG2_ENDPTCTRL0_REG
(
USBC_BASE_PTR
)

	)

37587 
	#USBC_UOG2_ENDPTCTRL1
 
	`USBC_UOG2_ENDPTCTRL1_REG
(
USBC_BASE_PTR
)

	)

37588 
	#USBC_UOG2_ENDPTCTRL2
 
	`USBC_UOG2_ENDPTCTRL2_REG
(
USBC_BASE_PTR
)

	)

37589 
	#USBC_UOG2_ENDPTCTRL3
 
	`USBC_UOG2_ENDPTCTRL3_REG
(
USBC_BASE_PTR
)

	)

37590 
	#USBC_UOG2_ENDPTCTRL4
 
	`USBC_UOG2_ENDPTCTRL4_REG
(
USBC_BASE_PTR
)

	)

37591 
	#USBC_UOG2_ENDPTCTRL5
 
	`USBC_UOG2_ENDPTCTRL5_REG
(
USBC_BASE_PTR
)

	)

37592 
	#USBC_UOG2_ENDPTCTRL6
 
	`USBC_UOG2_ENDPTCTRL6_REG
(
USBC_BASE_PTR
)

	)

37593 
	#USBC_UOG2_ENDPTCTRL7
 
	`USBC_UOG2_ENDPTCTRL7_REG
(
USBC_BASE_PTR
)

	)

37594 
	#USBC_UH1_ID
 
	`USBC_UH1_ID_REG
(
USBC_BASE_PTR
)

	)

37595 
	#USBC_UH1_HWGENERAL
 
	`USBC_UH1_HWGENERAL_REG
(
USBC_BASE_PTR
)

	)

37596 
	#USBC_UH1_HWHOST
 
	`USBC_UH1_HWHOST_REG
(
USBC_BASE_PTR
)

	)

37597 
	#USBC_UH1_HWTXBUF
 
	`USBC_UH1_HWTXBUF_REG
(
USBC_BASE_PTR
)

	)

37598 
	#USBC_UH1_HWRXBUF
 
	`USBC_UH1_HWRXBUF_REG
(
USBC_BASE_PTR
)

	)

37599 
	#USBC_UH1_GPTIMER0LD
 
	`USBC_UH1_GPTIMER0LD_REG
(
USBC_BASE_PTR
)

	)

37600 
	#USBC_UH1_GPTIMER0CTRL
 
	`USBC_UH1_GPTIMER0CTRL_REG
(
USBC_BASE_PTR
)

	)

37601 
	#USBC_UH1_GPTIMER1LD
 
	`USBC_UH1_GPTIMER1LD_REG
(
USBC_BASE_PTR
)

	)

37602 
	#USBC_UH1_GPTIMER1CTRL
 
	`USBC_UH1_GPTIMER1CTRL_REG
(
USBC_BASE_PTR
)

	)

37603 
	#USBC_UH1_SBUSCFG
 
	`USBC_UH1_SBUSCFG_REG
(
USBC_BASE_PTR
)

	)

37604 
	#USBC_UH1_CAPLENGTH
 
	`USBC_UH1_CAPLENGTH_REG
(
USBC_BASE_PTR
)

	)

37605 
	#USBC_UH1_HCIVERSION
 
	`USBC_UH1_HCIVERSION_REG
(
USBC_BASE_PTR
)

	)

37606 
	#USBC_UH1_HCSPARAMS
 
	`USBC_UH1_HCSPARAMS_REG
(
USBC_BASE_PTR
)

	)

37607 
	#USBC_UH1_HCCPARAMS
 
	`USBC_UH1_HCCPARAMS_REG
(
USBC_BASE_PTR
)

	)

37608 
	#USBC_UH1_USBCMD
 
	`USBC_UH1_USBCMD_REG
(
USBC_BASE_PTR
)

	)

37609 
	#USBC_UH1_USBSTS
 
	`USBC_UH1_USBSTS_REG
(
USBC_BASE_PTR
)

	)

37610 
	#USBC_UH1_USBINTR
 
	`USBC_UH1_USBINTR_REG
(
USBC_BASE_PTR
)

	)

37611 
	#USBC_UH1_FRINDEX
 
	`USBC_UH1_FRINDEX_REG
(
USBC_BASE_PTR
)

	)

37612 
	#USBC_UH1_PERIODICLISTBASE
 
	`USBC_UH1_PERIODICLISTBASE_REG
(
USBC_BASE_PTR
)

	)

37613 
	#USBC_UH1_ASYNCLISTADDR
 
	`USBC_UH1_ASYNCLISTADDR_REG
(
USBC_BASE_PTR
)

	)

37614 
	#USBC_UH1_BURSTSIZE
 
	`USBC_UH1_BURSTSIZE_REG
(
USBC_BASE_PTR
)

	)

37615 
	#USBC_UH1_TXFILLTUNING
 
	`USBC_UH1_TXFILLTUNING_REG
(
USBC_BASE_PTR
)

	)

37616 
	#USBC_UH1_CONFIGFLAG
 
	`USBC_UH1_CONFIGFLAG_REG
(
USBC_BASE_PTR
)

	)

37617 
	#USBC_UH1_PORTSC1
 
	`USBC_UH1_PORTSC1_REG
(
USBC_BASE_PTR
)

	)

37618 
	#USBC_UH1_USBMODE
 
	`USBC_UH1_USBMODE_REG
(
USBC_BASE_PTR
)

	)

37639 
uöt8_t
 
	mRESERVED_0
[572];

37640 
__I
 
uöt32_t
 
	mUSB_x_PHY_STS
;

37641 
uöt8_t
 
	mRESERVED_1
[20];

37642 
__IO
 
uöt32_t
 
	mADP_CFG2
;

37643 
uöt8_t
 
	mRESERVED_2
[1448];

37644 
__IO
 
uöt32_t
 
	mUSB_OTG1_CTRL
;

37645 
__IO
 
uöt32_t
 
	mUSB_OTG2_CTRL
;

37646 
__IO
 
uöt32_t
 
	mUSB_UH_CTRL
;

37647 
uöt8_t
 
	mRESERVED_3
[4];

37648 
__IO
 
uöt32_t
 
	mUSB_UH_HSIC_CTRL
;

37649 
uöt8_t
 
	mRESERVED_4
[4];

37650 
__IO
 
uöt32_t
 
	mUSB_OTG1_PHY_CTRL_0
;

37651 
__IO
 
uöt32_t
 
	mUSB_OTG2_PHY_CTRL_0
;

37652 } 
	tUSBNC_Ty≥
, *
	tUSBNC_MemM≠På
;

37664 
	#USBNC_USB_x_PHY_STS_REG
(
ba£
Ë((ba£)->
USB_x_PHY_STS
)

	)

37665 
	#USBNC_ADP_CFG2_REG
(
ba£
Ë((ba£)->
ADP_CFG2
)

	)

37666 
	#USBNC_USB_OTG1_CTRL_REG
(
ba£
Ë((ba£)->
USB_OTG1_CTRL
)

	)

37667 
	#USBNC_USB_OTG2_CTRL_REG
(
ba£
Ë((ba£)->
USB_OTG2_CTRL
)

	)

37668 
	#USBNC_USB_UH_CTRL_REG
(
ba£
Ë((ba£)->
USB_UH_CTRL
)

	)

37669 
	#USBNC_USB_UH_HSIC_CTRL_REG
(
ba£
Ë((ba£)->
USB_UH_HSIC_CTRL
)

	)

37670 
	#USBNC_USB_OTG1_PHY_CTRL_0_REG
(
ba£
Ë((ba£)->
USB_OTG1_PHY_CTRL_0
)

	)

37671 
	#USBNC_USB_OTG2_PHY_CTRL_0_REG
(
ba£
Ë((ba£)->
USB_OTG2_PHY_CTRL_0
)

	)

37687 
	#USBNC_USB_x_PHY_STS_LINE_STATE_MASK
 0x3u

	)

37688 
	#USBNC_USB_x_PHY_STS_LINE_STATE_SHIFT
 0

	)

37689 
	#USBNC_USB_x_PHY_STS_LINE_STATE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBNC_USB_x_PHY_STS_LINE_STATE_SHIFT
))&
USBNC_USB_x_PHY_STS_LINE_STATE_MASK
)

	)

37690 
	#USBNC_USB_x_PHY_STS_SESS_VLD_MASK
 0x4u

	)

37691 
	#USBNC_USB_x_PHY_STS_SESS_VLD_SHIFT
 2

	)

37692 
	#USBNC_USB_x_PHY_STS_VBUS_VLD_MASK
 0x8u

	)

37693 
	#USBNC_USB_x_PHY_STS_VBUS_VLD_SHIFT
 3

	)

37694 
	#USBNC_USB_x_PHY_STS_ID_DIG_MASK
 0x10u

	)

37695 
	#USBNC_USB_x_PHY_STS_ID_DIG_SHIFT
 4

	)

37696 
	#USBNC_USB_x_PHY_STS_USB_OTG1_CHD_B_MASK
 0x20000000u

	)

37697 
	#USBNC_USB_x_PHY_STS_USB_OTG1_CHD_B_SHIFT
 29

	)

37699 
	#USBNC_ADP_CFG2_ADP_CHRG_DELTA_MASK
 0x7Fu

	)

37700 
	#USBNC_ADP_CFG2_ADP_CHRG_DELTA_SHIFT
 0

	)

37701 
	#USBNC_ADP_CFG2_ADP_CHRG_DELTA
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBNC_ADP_CFG2_ADP_CHRG_DELTA_SHIFT
))&
USBNC_ADP_CFG2_ADP_CHRG_DELTA_MASK
)

	)

37702 
	#USBNC_ADP_CFG2_ADP_CHRG_SWCMP_MASK
 0x80u

	)

37703 
	#USBNC_ADP_CFG2_ADP_CHRG_SWCMP_SHIFT
 7

	)

37704 
	#USBNC_ADP_CFG2_ADP_CHRG_SWTIME_MASK
 0xFF00u

	)

37705 
	#USBNC_ADP_CFG2_ADP_CHRG_SWTIME_SHIFT
 8

	)

37706 
	#USBNC_ADP_CFG2_ADP_CHRG_SWTIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBNC_ADP_CFG2_ADP_CHRG_SWTIME_SHIFT
))&
USBNC_ADP_CFG2_ADP_CHRG_SWTIME_MASK
)

	)

37707 
	#USBNC_ADP_CFG2_ADP_DISCHG_TIME_MASK
 0xFF0000u

	)

37708 
	#USBNC_ADP_CFG2_ADP_DISCHG_TIME_SHIFT
 16

	)

37709 
	#USBNC_ADP_CFG2_ADP_DISCHG_TIME
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBNC_ADP_CFG2_ADP_DISCHG_TIME_SHIFT
))&
USBNC_ADP_CFG2_ADP_DISCHG_TIME_MASK
)

	)

37711 
	#USBNC_USB_OTG1_CTRL_OVER_CUR_DIS_MASK
 0x80u

	)

37712 
	#USBNC_USB_OTG1_CTRL_OVER_CUR_DIS_SHIFT
 7

	)

37713 
	#USBNC_USB_OTG1_CTRL_OVER_CUR_POL_MASK
 0x100u

	)

37714 
	#USBNC_USB_OTG1_CTRL_OVER_CUR_POL_SHIFT
 8

	)

37715 
	#USBNC_USB_OTG1_CTRL_PWR_POL_MASK
 0x200u

	)

37716 
	#USBNC_USB_OTG1_CTRL_PWR_POL_SHIFT
 9

	)

37717 
	#USBNC_USB_OTG1_CTRL_WIE_MASK
 0x400u

	)

37718 
	#USBNC_USB_OTG1_CTRL_WIE_SHIFT
 10

	)

37719 
	#USBNC_USB_OTG1_CTRL_WKUP_SW_EN_MASK
 0x4000u

	)

37720 
	#USBNC_USB_OTG1_CTRL_WKUP_SW_EN_SHIFT
 14

	)

37721 
	#USBNC_USB_OTG1_CTRL_WKUP_SW_MASK
 0x8000u

	)

37722 
	#USBNC_USB_OTG1_CTRL_WKUP_SW_SHIFT
 15

	)

37723 
	#USBNC_USB_OTG1_CTRL_WKUP_ID_EN_MASK
 0x10000u

	)

37724 
	#USBNC_USB_OTG1_CTRL_WKUP_ID_EN_SHIFT
 16

	)

37725 
	#USBNC_USB_OTG1_CTRL_WKUP_VBUS_EN_MASK
 0x20000u

	)

37726 
	#USBNC_USB_OTG1_CTRL_WKUP_VBUS_EN_SHIFT
 17

	)

37727 
	#USBNC_USB_OTG1_CTRL_WIR_MASK
 0x80000000u

	)

37728 
	#USBNC_USB_OTG1_CTRL_WIR_SHIFT
 31

	)

37730 
	#USBNC_USB_OTG2_CTRL_OVER_CUR_DIS_MASK
 0x80u

	)

37731 
	#USBNC_USB_OTG2_CTRL_OVER_CUR_DIS_SHIFT
 7

	)

37732 
	#USBNC_USB_OTG2_CTRL_OVER_CUR_POL_MASK
 0x100u

	)

37733 
	#USBNC_USB_OTG2_CTRL_OVER_CUR_POL_SHIFT
 8

	)

37734 
	#USBNC_USB_OTG2_CTRL_PWR_POL_MASK
 0x200u

	)

37735 
	#USBNC_USB_OTG2_CTRL_PWR_POL_SHIFT
 9

	)

37736 
	#USBNC_USB_OTG2_CTRL_WIE_MASK
 0x400u

	)

37737 
	#USBNC_USB_OTG2_CTRL_WIE_SHIFT
 10

	)

37738 
	#USBNC_USB_OTG2_CTRL_WKUP_SW_EN_MASK
 0x4000u

	)

37739 
	#USBNC_USB_OTG2_CTRL_WKUP_SW_EN_SHIFT
 14

	)

37740 
	#USBNC_USB_OTG2_CTRL_WKUP_SW_MASK
 0x8000u

	)

37741 
	#USBNC_USB_OTG2_CTRL_WKUP_SW_SHIFT
 15

	)

37742 
	#USBNC_USB_OTG2_CTRL_WKUP_ID_EN_MASK
 0x10000u

	)

37743 
	#USBNC_USB_OTG2_CTRL_WKUP_ID_EN_SHIFT
 16

	)

37744 
	#USBNC_USB_OTG2_CTRL_WKUP_VBUS_EN_MASK
 0x20000u

	)

37745 
	#USBNC_USB_OTG2_CTRL_WKUP_VBUS_EN_SHIFT
 17

	)

37746 
	#USBNC_USB_OTG2_CTRL_WIR_MASK
 0x80000000u

	)

37747 
	#USBNC_USB_OTG2_CTRL_WIR_SHIFT
 31

	)

37749 
	#USBNC_USB_UH_CTRL_WIE_MASK
 0x400u

	)

37750 
	#USBNC_USB_UH_CTRL_WIE_SHIFT
 10

	)

37751 
	#USBNC_USB_UH_CTRL_RESET_MASK
 0x800u

	)

37752 
	#USBNC_USB_UH_CTRL_RESET_SHIFT
 11

	)

37753 
	#USBNC_USB_UH_CTRL_SUSPENDM_MASK
 0x1000u

	)

37754 
	#USBNC_USB_UH_CTRL_SUSPENDM_SHIFT
 12

	)

37755 
	#USBNC_USB_UH_CTRL_480M_CLK_ON_MASK
 0x2000u

	)

37756 
	#USBNC_USB_UH_CTRL_480M_CLK_ON_SHIFT
 13

	)

37757 
	#USBNC_USB_UH_CTRL_WKUP_SW_EN_MASK
 0x4000u

	)

37758 
	#USBNC_USB_UH_CTRL_WKUP_SW_EN_SHIFT
 14

	)

37759 
	#USBNC_USB_UH_CTRL_WKUP_SW_MASK
 0x8000u

	)

37760 
	#USBNC_USB_UH_CTRL_WKUP_SW_SHIFT
 15

	)

37761 
	#USBNC_USB_UH_CTRL_WIR_MASK
 0x80000000u

	)

37762 
	#USBNC_USB_UH_CTRL_WIR_SHIFT
 31

	)

37764 
	#USBNC_USB_UH_HSIC_CTRL_HSIC_CLK_ON_MASK
 0x800u

	)

37765 
	#USBNC_USB_UH_HSIC_CTRL_HSIC_CLK_ON_SHIFT
 11

	)

37766 
	#USBNC_USB_UH_HSIC_CTRL_HSIC_EN_MASK
 0x1000u

	)

37767 
	#USBNC_USB_UH_HSIC_CTRL_HSIC_EN_SHIFT
 12

	)

37768 
	#USBNC_USB_UH_HSIC_CTRL_CLK_VLD_MASK
 0x80000000u

	)

37769 
	#USBNC_USB_UH_HSIC_CTRL_CLK_VLD_SHIFT
 31

	)

37771 
	#USBNC_USB_OTG1_PHY_CTRL_0_UTMI_CLK_VLD_MASK
 0x80000000u

	)

37772 
	#USBNC_USB_OTG1_PHY_CTRL_0_UTMI_CLK_VLD_SHIFT
 31

	)

37774 
	#USBNC_USB_OTG2_PHY_CTRL_0_UTMI_CLK_VLD_MASK
 0x80000000u

	)

37775 
	#USBNC_USB_OTG2_PHY_CTRL_0_UTMI_CLK_VLD_SHIFT
 31

	)

37783 
	#USBNC_BASE
 (0x42184000u)

	)

37785 
	#USBNC
 ((
USBNC_Ty≥
 *)
USBNC_BASE
)

	)

37786 
	#USBNC_BASE_PTR
 (
USBNC
)

	)

37788 
	#USBNC_BASE_ADDRS
 { 
USBNC_BASE
 }

	)

37790 
	#USBNC_BASE_PTRS
 { 
USBNC
 }

	)

37803 
	#USBNC_USB_x_PHY_STS
 
	`USBNC_USB_x_PHY_STS_REG
(
USBNC_BASE_PTR
)

	)

37804 
	#USBNC_ADP_CFG2
 
	`USBNC_ADP_CFG2_REG
(
USBNC_BASE_PTR
)

	)

37805 
	#USBNC_USB_OTG1_CTRL
 
	`USBNC_USB_OTG1_CTRL_REG
(
USBNC_BASE_PTR
)

	)

37806 
	#USBNC_USB_OTG2_CTRL
 
	`USBNC_USB_OTG2_CTRL_REG
(
USBNC_BASE_PTR
)

	)

37807 
	#USBNC_USB_UH_CTRL
 
	`USBNC_USB_UH_CTRL_REG
(
USBNC_BASE_PTR
)

	)

37808 
	#USBNC_USB_UH_HSIC_CTRL
 
	`USBNC_USB_UH_HSIC_CTRL_REG
(
USBNC_BASE_PTR
)

	)

37809 
	#USBNC_USB_OTG1_PHY_CTRL_0
 
	`USBNC_USB_OTG1_PHY_CTRL_0_REG
(
USBNC_BASE_PTR
)

	)

37810 
	#USBNC_USB_OTG2_PHY_CTRL_0
 
	`USBNC_USB_OTG2_PHY_CTRL_0_REG
(
USBNC_BASE_PTR
)

	)

37831 
__IO
 
uöt32_t
 
	mPWD
;

37832 
__IO
 
uöt32_t
 
	mPWD_SET
;

37833 
__IO
 
uöt32_t
 
	mPWD_CLR
;

37834 
__IO
 
uöt32_t
 
	mPWD_TOG
;

37835 
__IO
 
uöt32_t
 
	mTX
;

37836 
__IO
 
uöt32_t
 
	mTX_SET
;

37837 
__IO
 
uöt32_t
 
	mTX_CLR
;

37838 
__IO
 
uöt32_t
 
	mTX_TOG
;

37839 
__IO
 
uöt32_t
 
	mRX
;

37840 
__IO
 
uöt32_t
 
	mRX_SET
;

37841 
__IO
 
uöt32_t
 
	mRX_CLR
;

37842 
__IO
 
uöt32_t
 
	mRX_TOG
;

37843 
__IO
 
uöt32_t
 
	mCTRL
;

37844 
__IO
 
uöt32_t
 
	mCTRL_SET
;

37845 
__IO
 
uöt32_t
 
	mCTRL_CLR
;

37846 
__IO
 
uöt32_t
 
	mCTRL_TOG
;

37847 
__IO
 
uöt32_t
 
	mSTATUS
;

37848 
uöt8_t
 
	mRESERVED_0
[12];

37849 
__IO
 
uöt32_t
 
	mDEBUG
;

37850 
__IO
 
uöt32_t
 
	mDEBUG_SET
;

37851 
__IO
 
uöt32_t
 
	mDEBUG_CLR
;

37852 
__IO
 
uöt32_t
 
	mDEBUG_TOG
;

37853 
__I
 
uöt32_t
 
	mDEBUG0_STATUS
;

37854 
uöt8_t
 
	mRESERVED_1
[12];

37855 
__IO
 
uöt32_t
 
	mDEBUG1
;

37856 
__IO
 
uöt32_t
 
	mDEBUG1_SET
;

37857 
__IO
 
uöt32_t
 
	mDEBUG1_CLR
;

37858 
__IO
 
uöt32_t
 
	mDEBUG1_TOG
;

37859 
__I
 
uöt32_t
 
	mVERSION
;

37860 } 
	tUSBPHY_Ty≥
, *
	tUSBPHY_MemM≠På
;

37872 
	#USBPHY_PWD_REG
(
ba£
Ë((ba£)->
PWD
)

	)

37873 
	#USBPHY_PWD_SET_REG
(
ba£
Ë((ba£)->
PWD_SET
)

	)

37874 
	#USBPHY_PWD_CLR_REG
(
ba£
Ë((ba£)->
PWD_CLR
)

	)

37875 
	#USBPHY_PWD_TOG_REG
(
ba£
Ë((ba£)->
PWD_TOG
)

	)

37876 
	#USBPHY_TX_REG
(
ba£
Ë((ba£)->
TX
)

	)

37877 
	#USBPHY_TX_SET_REG
(
ba£
Ë((ba£)->
TX_SET
)

	)

37878 
	#USBPHY_TX_CLR_REG
(
ba£
Ë((ba£)->
TX_CLR
)

	)

37879 
	#USBPHY_TX_TOG_REG
(
ba£
Ë((ba£)->
TX_TOG
)

	)

37880 
	#USBPHY_RX_REG
(
ba£
Ë((ba£)->
RX
)

	)

37881 
	#USBPHY_RX_SET_REG
(
ba£
Ë((ba£)->
RX_SET
)

	)

37882 
	#USBPHY_RX_CLR_REG
(
ba£
Ë((ba£)->
RX_CLR
)

	)

37883 
	#USBPHY_RX_TOG_REG
(
ba£
Ë((ba£)->
RX_TOG
)

	)

37884 
	#USBPHY_CTRL_REG
(
ba£
Ë((ba£)->
CTRL
)

	)

37885 
	#USBPHY_CTRL_SET_REG
(
ba£
Ë((ba£)->
CTRL_SET
)

	)

37886 
	#USBPHY_CTRL_CLR_REG
(
ba£
Ë((ba£)->
CTRL_CLR
)

	)

37887 
	#USBPHY_CTRL_TOG_REG
(
ba£
Ë((ba£)->
CTRL_TOG
)

	)

37888 
	#USBPHY_STATUS_REG
(
ba£
Ë((ba£)->
STATUS
)

	)

37889 
	#USBPHY_DEBUG_REG
(
ba£
Ë((ba£)->
DEBUG
)

	)

37890 
	#USBPHY_DEBUG_SET_REG
(
ba£
Ë((ba£)->
DEBUG_SET
)

	)

37891 
	#USBPHY_DEBUG_CLR_REG
(
ba£
Ë((ba£)->
DEBUG_CLR
)

	)

37892 
	#USBPHY_DEBUG_TOG_REG
(
ba£
Ë((ba£)->
DEBUG_TOG
)

	)

37893 
	#USBPHY_DEBUG0_STATUS_REG
(
ba£
Ë((ba£)->
DEBUG0_STATUS
)

	)

37894 
	#USBPHY_DEBUG1_REG
(
ba£
Ë((ba£)->
DEBUG1
)

	)

37895 
	#USBPHY_DEBUG1_SET_REG
(
ba£
Ë((ba£)->
DEBUG1_SET
)

	)

37896 
	#USBPHY_DEBUG1_CLR_REG
(
ba£
Ë((ba£)->
DEBUG1_CLR
)

	)

37897 
	#USBPHY_DEBUG1_TOG_REG
(
ba£
Ë((ba£)->
DEBUG1_TOG
)

	)

37898 
	#USBPHY_VERSION_REG
(
ba£
Ë((ba£)->
VERSION
)

	)

37914 
	#USBPHY_PWD_RSVD0_MASK
 0x3FFu

	)

37915 
	#USBPHY_PWD_RSVD0_SHIFT
 0

	)

37916 
	#USBPHY_PWD_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_PWD_RSVD0_SHIFT
))&
USBPHY_PWD_RSVD0_MASK
)

	)

37917 
	#USBPHY_PWD_TXPWDFS_MASK
 0x400u

	)

37918 
	#USBPHY_PWD_TXPWDFS_SHIFT
 10

	)

37919 
	#USBPHY_PWD_TXPWDIBIAS_MASK
 0x800u

	)

37920 
	#USBPHY_PWD_TXPWDIBIAS_SHIFT
 11

	)

37921 
	#USBPHY_PWD_TXPWDV2I_MASK
 0x1000u

	)

37922 
	#USBPHY_PWD_TXPWDV2I_SHIFT
 12

	)

37923 
	#USBPHY_PWD_RSVD1_MASK
 0x1E000u

	)

37924 
	#USBPHY_PWD_RSVD1_SHIFT
 13

	)

37925 
	#USBPHY_PWD_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_PWD_RSVD1_SHIFT
))&
USBPHY_PWD_RSVD1_MASK
)

	)

37926 
	#USBPHY_PWD_RXPWDENV_MASK
 0x20000u

	)

37927 
	#USBPHY_PWD_RXPWDENV_SHIFT
 17

	)

37928 
	#USBPHY_PWD_RXPWD1PT1_MASK
 0x40000u

	)

37929 
	#USBPHY_PWD_RXPWD1PT1_SHIFT
 18

	)

37930 
	#USBPHY_PWD_RXPWDDIFF_MASK
 0x80000u

	)

37931 
	#USBPHY_PWD_RXPWDDIFF_SHIFT
 19

	)

37932 
	#USBPHY_PWD_RXPWDRX_MASK
 0x100000u

	)

37933 
	#USBPHY_PWD_RXPWDRX_SHIFT
 20

	)

37934 
	#USBPHY_PWD_RSVD2_MASK
 0xFFE00000u

	)

37935 
	#USBPHY_PWD_RSVD2_SHIFT
 21

	)

37936 
	#USBPHY_PWD_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_PWD_RSVD2_SHIFT
))&
USBPHY_PWD_RSVD2_MASK
)

	)

37938 
	#USBPHY_PWD_SET_RSVD0_MASK
 0x3FFu

	)

37939 
	#USBPHY_PWD_SET_RSVD0_SHIFT
 0

	)

37940 
	#USBPHY_PWD_SET_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_PWD_SET_RSVD0_SHIFT
))&
USBPHY_PWD_SET_RSVD0_MASK
)

	)

37941 
	#USBPHY_PWD_SET_TXPWDFS_MASK
 0x400u

	)

37942 
	#USBPHY_PWD_SET_TXPWDFS_SHIFT
 10

	)

37943 
	#USBPHY_PWD_SET_TXPWDIBIAS_MASK
 0x800u

	)

37944 
	#USBPHY_PWD_SET_TXPWDIBIAS_SHIFT
 11

	)

37945 
	#USBPHY_PWD_SET_TXPWDV2I_MASK
 0x1000u

	)

37946 
	#USBPHY_PWD_SET_TXPWDV2I_SHIFT
 12

	)

37947 
	#USBPHY_PWD_SET_RSVD1_MASK
 0x1E000u

	)

37948 
	#USBPHY_PWD_SET_RSVD1_SHIFT
 13

	)

37949 
	#USBPHY_PWD_SET_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_PWD_SET_RSVD1_SHIFT
))&
USBPHY_PWD_SET_RSVD1_MASK
)

	)

37950 
	#USBPHY_PWD_SET_RXPWDENV_MASK
 0x20000u

	)

37951 
	#USBPHY_PWD_SET_RXPWDENV_SHIFT
 17

	)

37952 
	#USBPHY_PWD_SET_RXPWD1PT1_MASK
 0x40000u

	)

37953 
	#USBPHY_PWD_SET_RXPWD1PT1_SHIFT
 18

	)

37954 
	#USBPHY_PWD_SET_RXPWDDIFF_MASK
 0x80000u

	)

37955 
	#USBPHY_PWD_SET_RXPWDDIFF_SHIFT
 19

	)

37956 
	#USBPHY_PWD_SET_RXPWDRX_MASK
 0x100000u

	)

37957 
	#USBPHY_PWD_SET_RXPWDRX_SHIFT
 20

	)

37958 
	#USBPHY_PWD_SET_RSVD2_MASK
 0xFFE00000u

	)

37959 
	#USBPHY_PWD_SET_RSVD2_SHIFT
 21

	)

37960 
	#USBPHY_PWD_SET_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_PWD_SET_RSVD2_SHIFT
))&
USBPHY_PWD_SET_RSVD2_MASK
)

	)

37962 
	#USBPHY_PWD_CLR_RSVD0_MASK
 0x3FFu

	)

37963 
	#USBPHY_PWD_CLR_RSVD0_SHIFT
 0

	)

37964 
	#USBPHY_PWD_CLR_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_PWD_CLR_RSVD0_SHIFT
))&
USBPHY_PWD_CLR_RSVD0_MASK
)

	)

37965 
	#USBPHY_PWD_CLR_TXPWDFS_MASK
 0x400u

	)

37966 
	#USBPHY_PWD_CLR_TXPWDFS_SHIFT
 10

	)

37967 
	#USBPHY_PWD_CLR_TXPWDIBIAS_MASK
 0x800u

	)

37968 
	#USBPHY_PWD_CLR_TXPWDIBIAS_SHIFT
 11

	)

37969 
	#USBPHY_PWD_CLR_TXPWDV2I_MASK
 0x1000u

	)

37970 
	#USBPHY_PWD_CLR_TXPWDV2I_SHIFT
 12

	)

37971 
	#USBPHY_PWD_CLR_RSVD1_MASK
 0x1E000u

	)

37972 
	#USBPHY_PWD_CLR_RSVD1_SHIFT
 13

	)

37973 
	#USBPHY_PWD_CLR_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_PWD_CLR_RSVD1_SHIFT
))&
USBPHY_PWD_CLR_RSVD1_MASK
)

	)

37974 
	#USBPHY_PWD_CLR_RXPWDENV_MASK
 0x20000u

	)

37975 
	#USBPHY_PWD_CLR_RXPWDENV_SHIFT
 17

	)

37976 
	#USBPHY_PWD_CLR_RXPWD1PT1_MASK
 0x40000u

	)

37977 
	#USBPHY_PWD_CLR_RXPWD1PT1_SHIFT
 18

	)

37978 
	#USBPHY_PWD_CLR_RXPWDDIFF_MASK
 0x80000u

	)

37979 
	#USBPHY_PWD_CLR_RXPWDDIFF_SHIFT
 19

	)

37980 
	#USBPHY_PWD_CLR_RXPWDRX_MASK
 0x100000u

	)

37981 
	#USBPHY_PWD_CLR_RXPWDRX_SHIFT
 20

	)

37982 
	#USBPHY_PWD_CLR_RSVD2_MASK
 0xFFE00000u

	)

37983 
	#USBPHY_PWD_CLR_RSVD2_SHIFT
 21

	)

37984 
	#USBPHY_PWD_CLR_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_PWD_CLR_RSVD2_SHIFT
))&
USBPHY_PWD_CLR_RSVD2_MASK
)

	)

37986 
	#USBPHY_PWD_TOG_RSVD0_MASK
 0x3FFu

	)

37987 
	#USBPHY_PWD_TOG_RSVD0_SHIFT
 0

	)

37988 
	#USBPHY_PWD_TOG_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_PWD_TOG_RSVD0_SHIFT
))&
USBPHY_PWD_TOG_RSVD0_MASK
)

	)

37989 
	#USBPHY_PWD_TOG_TXPWDFS_MASK
 0x400u

	)

37990 
	#USBPHY_PWD_TOG_TXPWDFS_SHIFT
 10

	)

37991 
	#USBPHY_PWD_TOG_TXPWDIBIAS_MASK
 0x800u

	)

37992 
	#USBPHY_PWD_TOG_TXPWDIBIAS_SHIFT
 11

	)

37993 
	#USBPHY_PWD_TOG_TXPWDV2I_MASK
 0x1000u

	)

37994 
	#USBPHY_PWD_TOG_TXPWDV2I_SHIFT
 12

	)

37995 
	#USBPHY_PWD_TOG_RSVD1_MASK
 0x1E000u

	)

37996 
	#USBPHY_PWD_TOG_RSVD1_SHIFT
 13

	)

37997 
	#USBPHY_PWD_TOG_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_PWD_TOG_RSVD1_SHIFT
))&
USBPHY_PWD_TOG_RSVD1_MASK
)

	)

37998 
	#USBPHY_PWD_TOG_RXPWDENV_MASK
 0x20000u

	)

37999 
	#USBPHY_PWD_TOG_RXPWDENV_SHIFT
 17

	)

38000 
	#USBPHY_PWD_TOG_RXPWD1PT1_MASK
 0x40000u

	)

38001 
	#USBPHY_PWD_TOG_RXPWD1PT1_SHIFT
 18

	)

38002 
	#USBPHY_PWD_TOG_RXPWDDIFF_MASK
 0x80000u

	)

38003 
	#USBPHY_PWD_TOG_RXPWDDIFF_SHIFT
 19

	)

38004 
	#USBPHY_PWD_TOG_RXPWDRX_MASK
 0x100000u

	)

38005 
	#USBPHY_PWD_TOG_RXPWDRX_SHIFT
 20

	)

38006 
	#USBPHY_PWD_TOG_RSVD2_MASK
 0xFFE00000u

	)

38007 
	#USBPHY_PWD_TOG_RSVD2_SHIFT
 21

	)

38008 
	#USBPHY_PWD_TOG_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_PWD_TOG_RSVD2_SHIFT
))&
USBPHY_PWD_TOG_RSVD2_MASK
)

	)

38010 
	#USBPHY_TX_D_CAL_MASK
 0xFu

	)

38011 
	#USBPHY_TX_D_CAL_SHIFT
 0

	)

38012 
	#USBPHY_TX_D_CAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_D_CAL_SHIFT
))&
USBPHY_TX_D_CAL_MASK
)

	)

38013 
	#USBPHY_TX_RSVD0_MASK
 0xF0u

	)

38014 
	#USBPHY_TX_RSVD0_SHIFT
 4

	)

38015 
	#USBPHY_TX_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_RSVD0_SHIFT
))&
USBPHY_TX_RSVD0_MASK
)

	)

38016 
	#USBPHY_TX_TXCAL45DN_MASK
 0xF00u

	)

38017 
	#USBPHY_TX_TXCAL45DN_SHIFT
 8

	)

38018 
	#USBPHY_TX_TXCAL45DN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_TXCAL45DN_SHIFT
))&
USBPHY_TX_TXCAL45DN_MASK
)

	)

38019 
	#USBPHY_TX_RSVD1_MASK
 0xF000u

	)

38020 
	#USBPHY_TX_RSVD1_SHIFT
 12

	)

38021 
	#USBPHY_TX_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_RSVD1_SHIFT
))&
USBPHY_TX_RSVD1_MASK
)

	)

38022 
	#USBPHY_TX_TXCAL45DP_MASK
 0xF0000u

	)

38023 
	#USBPHY_TX_TXCAL45DP_SHIFT
 16

	)

38024 
	#USBPHY_TX_TXCAL45DP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_TXCAL45DP_SHIFT
))&
USBPHY_TX_TXCAL45DP_MASK
)

	)

38025 
	#USBPHY_TX_RSVD2_MASK
 0x3F00000u

	)

38026 
	#USBPHY_TX_RSVD2_SHIFT
 20

	)

38027 
	#USBPHY_TX_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_RSVD2_SHIFT
))&
USBPHY_TX_RSVD2_MASK
)

	)

38028 
	#USBPHY_TX_USBPHY_TX_EDGECTRL_MASK
 0x1C000000u

	)

38029 
	#USBPHY_TX_USBPHY_TX_EDGECTRL_SHIFT
 26

	)

38030 
	#USBPHY_TX_USBPHY_TX_EDGECTRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_USBPHY_TX_EDGECTRL_SHIFT
))&
USBPHY_TX_USBPHY_TX_EDGECTRL_MASK
)

	)

38031 
	#USBPHY_TX_RSVD5_MASK
 0xE0000000u

	)

38032 
	#USBPHY_TX_RSVD5_SHIFT
 29

	)

38033 
	#USBPHY_TX_RSVD5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_RSVD5_SHIFT
))&
USBPHY_TX_RSVD5_MASK
)

	)

38035 
	#USBPHY_TX_SET_D_CAL_MASK
 0xFu

	)

38036 
	#USBPHY_TX_SET_D_CAL_SHIFT
 0

	)

38037 
	#USBPHY_TX_SET_D_CAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_SET_D_CAL_SHIFT
))&
USBPHY_TX_SET_D_CAL_MASK
)

	)

38038 
	#USBPHY_TX_SET_RSVD0_MASK
 0xF0u

	)

38039 
	#USBPHY_TX_SET_RSVD0_SHIFT
 4

	)

38040 
	#USBPHY_TX_SET_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_SET_RSVD0_SHIFT
))&
USBPHY_TX_SET_RSVD0_MASK
)

	)

38041 
	#USBPHY_TX_SET_TXCAL45DN_MASK
 0xF00u

	)

38042 
	#USBPHY_TX_SET_TXCAL45DN_SHIFT
 8

	)

38043 
	#USBPHY_TX_SET_TXCAL45DN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_SET_TXCAL45DN_SHIFT
))&
USBPHY_TX_SET_TXCAL45DN_MASK
)

	)

38044 
	#USBPHY_TX_SET_RSVD1_MASK
 0xF000u

	)

38045 
	#USBPHY_TX_SET_RSVD1_SHIFT
 12

	)

38046 
	#USBPHY_TX_SET_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_SET_RSVD1_SHIFT
))&
USBPHY_TX_SET_RSVD1_MASK
)

	)

38047 
	#USBPHY_TX_SET_TXCAL45DP_MASK
 0xF0000u

	)

38048 
	#USBPHY_TX_SET_TXCAL45DP_SHIFT
 16

	)

38049 
	#USBPHY_TX_SET_TXCAL45DP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_SET_TXCAL45DP_SHIFT
))&
USBPHY_TX_SET_TXCAL45DP_MASK
)

	)

38050 
	#USBPHY_TX_SET_RSVD2_MASK
 0x3F00000u

	)

38051 
	#USBPHY_TX_SET_RSVD2_SHIFT
 20

	)

38052 
	#USBPHY_TX_SET_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_SET_RSVD2_SHIFT
))&
USBPHY_TX_SET_RSVD2_MASK
)

	)

38053 
	#USBPHY_TX_SET_USBPHY_TX_EDGECTRL_MASK
 0x1C000000u

	)

38054 
	#USBPHY_TX_SET_USBPHY_TX_EDGECTRL_SHIFT
 26

	)

38055 
	#USBPHY_TX_SET_USBPHY_TX_EDGECTRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_SET_USBPHY_TX_EDGECTRL_SHIFT
))&
USBPHY_TX_SET_USBPHY_TX_EDGECTRL_MASK
)

	)

38056 
	#USBPHY_TX_SET_RSVD5_MASK
 0xE0000000u

	)

38057 
	#USBPHY_TX_SET_RSVD5_SHIFT
 29

	)

38058 
	#USBPHY_TX_SET_RSVD5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_SET_RSVD5_SHIFT
))&
USBPHY_TX_SET_RSVD5_MASK
)

	)

38060 
	#USBPHY_TX_CLR_D_CAL_MASK
 0xFu

	)

38061 
	#USBPHY_TX_CLR_D_CAL_SHIFT
 0

	)

38062 
	#USBPHY_TX_CLR_D_CAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_CLR_D_CAL_SHIFT
))&
USBPHY_TX_CLR_D_CAL_MASK
)

	)

38063 
	#USBPHY_TX_CLR_RSVD0_MASK
 0xF0u

	)

38064 
	#USBPHY_TX_CLR_RSVD0_SHIFT
 4

	)

38065 
	#USBPHY_TX_CLR_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_CLR_RSVD0_SHIFT
))&
USBPHY_TX_CLR_RSVD0_MASK
)

	)

38066 
	#USBPHY_TX_CLR_TXCAL45DN_MASK
 0xF00u

	)

38067 
	#USBPHY_TX_CLR_TXCAL45DN_SHIFT
 8

	)

38068 
	#USBPHY_TX_CLR_TXCAL45DN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_CLR_TXCAL45DN_SHIFT
))&
USBPHY_TX_CLR_TXCAL45DN_MASK
)

	)

38069 
	#USBPHY_TX_CLR_RSVD1_MASK
 0xF000u

	)

38070 
	#USBPHY_TX_CLR_RSVD1_SHIFT
 12

	)

38071 
	#USBPHY_TX_CLR_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_CLR_RSVD1_SHIFT
))&
USBPHY_TX_CLR_RSVD1_MASK
)

	)

38072 
	#USBPHY_TX_CLR_TXCAL45DP_MASK
 0xF0000u

	)

38073 
	#USBPHY_TX_CLR_TXCAL45DP_SHIFT
 16

	)

38074 
	#USBPHY_TX_CLR_TXCAL45DP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_CLR_TXCAL45DP_SHIFT
))&
USBPHY_TX_CLR_TXCAL45DP_MASK
)

	)

38075 
	#USBPHY_TX_CLR_RSVD2_MASK
 0x3F00000u

	)

38076 
	#USBPHY_TX_CLR_RSVD2_SHIFT
 20

	)

38077 
	#USBPHY_TX_CLR_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_CLR_RSVD2_SHIFT
))&
USBPHY_TX_CLR_RSVD2_MASK
)

	)

38078 
	#USBPHY_TX_CLR_USBPHY_TX_EDGECTRL_MASK
 0x1C000000u

	)

38079 
	#USBPHY_TX_CLR_USBPHY_TX_EDGECTRL_SHIFT
 26

	)

38080 
	#USBPHY_TX_CLR_USBPHY_TX_EDGECTRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_CLR_USBPHY_TX_EDGECTRL_SHIFT
))&
USBPHY_TX_CLR_USBPHY_TX_EDGECTRL_MASK
)

	)

38081 
	#USBPHY_TX_CLR_RSVD5_MASK
 0xE0000000u

	)

38082 
	#USBPHY_TX_CLR_RSVD5_SHIFT
 29

	)

38083 
	#USBPHY_TX_CLR_RSVD5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_CLR_RSVD5_SHIFT
))&
USBPHY_TX_CLR_RSVD5_MASK
)

	)

38085 
	#USBPHY_TX_TOG_D_CAL_MASK
 0xFu

	)

38086 
	#USBPHY_TX_TOG_D_CAL_SHIFT
 0

	)

38087 
	#USBPHY_TX_TOG_D_CAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_TOG_D_CAL_SHIFT
))&
USBPHY_TX_TOG_D_CAL_MASK
)

	)

38088 
	#USBPHY_TX_TOG_RSVD0_MASK
 0xF0u

	)

38089 
	#USBPHY_TX_TOG_RSVD0_SHIFT
 4

	)

38090 
	#USBPHY_TX_TOG_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_TOG_RSVD0_SHIFT
))&
USBPHY_TX_TOG_RSVD0_MASK
)

	)

38091 
	#USBPHY_TX_TOG_TXCAL45DN_MASK
 0xF00u

	)

38092 
	#USBPHY_TX_TOG_TXCAL45DN_SHIFT
 8

	)

38093 
	#USBPHY_TX_TOG_TXCAL45DN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_TOG_TXCAL45DN_SHIFT
))&
USBPHY_TX_TOG_TXCAL45DN_MASK
)

	)

38094 
	#USBPHY_TX_TOG_RSVD1_MASK
 0xF000u

	)

38095 
	#USBPHY_TX_TOG_RSVD1_SHIFT
 12

	)

38096 
	#USBPHY_TX_TOG_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_TOG_RSVD1_SHIFT
))&
USBPHY_TX_TOG_RSVD1_MASK
)

	)

38097 
	#USBPHY_TX_TOG_TXCAL45DP_MASK
 0xF0000u

	)

38098 
	#USBPHY_TX_TOG_TXCAL45DP_SHIFT
 16

	)

38099 
	#USBPHY_TX_TOG_TXCAL45DP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_TOG_TXCAL45DP_SHIFT
))&
USBPHY_TX_TOG_TXCAL45DP_MASK
)

	)

38100 
	#USBPHY_TX_TOG_RSVD2_MASK
 0x3F00000u

	)

38101 
	#USBPHY_TX_TOG_RSVD2_SHIFT
 20

	)

38102 
	#USBPHY_TX_TOG_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_TOG_RSVD2_SHIFT
))&
USBPHY_TX_TOG_RSVD2_MASK
)

	)

38103 
	#USBPHY_TX_TOG_USBPHY_TX_EDGECTRL_MASK
 0x1C000000u

	)

38104 
	#USBPHY_TX_TOG_USBPHY_TX_EDGECTRL_SHIFT
 26

	)

38105 
	#USBPHY_TX_TOG_USBPHY_TX_EDGECTRL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_TOG_USBPHY_TX_EDGECTRL_SHIFT
))&
USBPHY_TX_TOG_USBPHY_TX_EDGECTRL_MASK
)

	)

38106 
	#USBPHY_TX_TOG_RSVD5_MASK
 0xE0000000u

	)

38107 
	#USBPHY_TX_TOG_RSVD5_SHIFT
 29

	)

38108 
	#USBPHY_TX_TOG_RSVD5
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_TX_TOG_RSVD5_SHIFT
))&
USBPHY_TX_TOG_RSVD5_MASK
)

	)

38110 
	#USBPHY_RX_ENVADJ_MASK
 0x7u

	)

38111 
	#USBPHY_RX_ENVADJ_SHIFT
 0

	)

38112 
	#USBPHY_RX_ENVADJ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_RX_ENVADJ_SHIFT
))&
USBPHY_RX_ENVADJ_MASK
)

	)

38113 
	#USBPHY_RX_RSVD0_MASK
 0x8u

	)

38114 
	#USBPHY_RX_RSVD0_SHIFT
 3

	)

38115 
	#USBPHY_RX_DISCONADJ_MASK
 0x70u

	)

38116 
	#USBPHY_RX_DISCONADJ_SHIFT
 4

	)

38117 
	#USBPHY_RX_DISCONADJ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_RX_DISCONADJ_SHIFT
))&
USBPHY_RX_DISCONADJ_MASK
)

	)

38118 
	#USBPHY_RX_RSVD1_MASK
 0x3FFF80u

	)

38119 
	#USBPHY_RX_RSVD1_SHIFT
 7

	)

38120 
	#USBPHY_RX_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_RX_RSVD1_SHIFT
))&
USBPHY_RX_RSVD1_MASK
)

	)

38121 
	#USBPHY_RX_RXDBYPASS_MASK
 0x400000u

	)

38122 
	#USBPHY_RX_RXDBYPASS_SHIFT
 22

	)

38123 
	#USBPHY_RX_RSVD2_MASK
 0xFF800000u

	)

38124 
	#USBPHY_RX_RSVD2_SHIFT
 23

	)

38125 
	#USBPHY_RX_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_RX_RSVD2_SHIFT
))&
USBPHY_RX_RSVD2_MASK
)

	)

38127 
	#USBPHY_RX_SET_ENVADJ_MASK
 0x7u

	)

38128 
	#USBPHY_RX_SET_ENVADJ_SHIFT
 0

	)

38129 
	#USBPHY_RX_SET_ENVADJ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_RX_SET_ENVADJ_SHIFT
))&
USBPHY_RX_SET_ENVADJ_MASK
)

	)

38130 
	#USBPHY_RX_SET_RSVD0_MASK
 0x8u

	)

38131 
	#USBPHY_RX_SET_RSVD0_SHIFT
 3

	)

38132 
	#USBPHY_RX_SET_DISCONADJ_MASK
 0x70u

	)

38133 
	#USBPHY_RX_SET_DISCONADJ_SHIFT
 4

	)

38134 
	#USBPHY_RX_SET_DISCONADJ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_RX_SET_DISCONADJ_SHIFT
))&
USBPHY_RX_SET_DISCONADJ_MASK
)

	)

38135 
	#USBPHY_RX_SET_RSVD1_MASK
 0x3FFF80u

	)

38136 
	#USBPHY_RX_SET_RSVD1_SHIFT
 7

	)

38137 
	#USBPHY_RX_SET_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_RX_SET_RSVD1_SHIFT
))&
USBPHY_RX_SET_RSVD1_MASK
)

	)

38138 
	#USBPHY_RX_SET_RXDBYPASS_MASK
 0x400000u

	)

38139 
	#USBPHY_RX_SET_RXDBYPASS_SHIFT
 22

	)

38140 
	#USBPHY_RX_SET_RSVD2_MASK
 0xFF800000u

	)

38141 
	#USBPHY_RX_SET_RSVD2_SHIFT
 23

	)

38142 
	#USBPHY_RX_SET_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_RX_SET_RSVD2_SHIFT
))&
USBPHY_RX_SET_RSVD2_MASK
)

	)

38144 
	#USBPHY_RX_CLR_ENVADJ_MASK
 0x7u

	)

38145 
	#USBPHY_RX_CLR_ENVADJ_SHIFT
 0

	)

38146 
	#USBPHY_RX_CLR_ENVADJ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_RX_CLR_ENVADJ_SHIFT
))&
USBPHY_RX_CLR_ENVADJ_MASK
)

	)

38147 
	#USBPHY_RX_CLR_RSVD0_MASK
 0x8u

	)

38148 
	#USBPHY_RX_CLR_RSVD0_SHIFT
 3

	)

38149 
	#USBPHY_RX_CLR_DISCONADJ_MASK
 0x70u

	)

38150 
	#USBPHY_RX_CLR_DISCONADJ_SHIFT
 4

	)

38151 
	#USBPHY_RX_CLR_DISCONADJ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_RX_CLR_DISCONADJ_SHIFT
))&
USBPHY_RX_CLR_DISCONADJ_MASK
)

	)

38152 
	#USBPHY_RX_CLR_RSVD1_MASK
 0x3FFF80u

	)

38153 
	#USBPHY_RX_CLR_RSVD1_SHIFT
 7

	)

38154 
	#USBPHY_RX_CLR_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_RX_CLR_RSVD1_SHIFT
))&
USBPHY_RX_CLR_RSVD1_MASK
)

	)

38155 
	#USBPHY_RX_CLR_RXDBYPASS_MASK
 0x400000u

	)

38156 
	#USBPHY_RX_CLR_RXDBYPASS_SHIFT
 22

	)

38157 
	#USBPHY_RX_CLR_RSVD2_MASK
 0xFF800000u

	)

38158 
	#USBPHY_RX_CLR_RSVD2_SHIFT
 23

	)

38159 
	#USBPHY_RX_CLR_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_RX_CLR_RSVD2_SHIFT
))&
USBPHY_RX_CLR_RSVD2_MASK
)

	)

38161 
	#USBPHY_RX_TOG_ENVADJ_MASK
 0x7u

	)

38162 
	#USBPHY_RX_TOG_ENVADJ_SHIFT
 0

	)

38163 
	#USBPHY_RX_TOG_ENVADJ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_RX_TOG_ENVADJ_SHIFT
))&
USBPHY_RX_TOG_ENVADJ_MASK
)

	)

38164 
	#USBPHY_RX_TOG_RSVD0_MASK
 0x8u

	)

38165 
	#USBPHY_RX_TOG_RSVD0_SHIFT
 3

	)

38166 
	#USBPHY_RX_TOG_DISCONADJ_MASK
 0x70u

	)

38167 
	#USBPHY_RX_TOG_DISCONADJ_SHIFT
 4

	)

38168 
	#USBPHY_RX_TOG_DISCONADJ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_RX_TOG_DISCONADJ_SHIFT
))&
USBPHY_RX_TOG_DISCONADJ_MASK
)

	)

38169 
	#USBPHY_RX_TOG_RSVD1_MASK
 0x3FFF80u

	)

38170 
	#USBPHY_RX_TOG_RSVD1_SHIFT
 7

	)

38171 
	#USBPHY_RX_TOG_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_RX_TOG_RSVD1_SHIFT
))&
USBPHY_RX_TOG_RSVD1_MASK
)

	)

38172 
	#USBPHY_RX_TOG_RXDBYPASS_MASK
 0x400000u

	)

38173 
	#USBPHY_RX_TOG_RXDBYPASS_SHIFT
 22

	)

38174 
	#USBPHY_RX_TOG_RSVD2_MASK
 0xFF800000u

	)

38175 
	#USBPHY_RX_TOG_RSVD2_SHIFT
 23

	)

38176 
	#USBPHY_RX_TOG_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_RX_TOG_RSVD2_SHIFT
))&
USBPHY_RX_TOG_RSVD2_MASK
)

	)

38178 
	#USBPHY_CTRL_ENOTG_ID_CHG_IRQ_MASK
 0x1u

	)

38179 
	#USBPHY_CTRL_ENOTG_ID_CHG_IRQ_SHIFT
 0

	)

38180 
	#USBPHY_CTRL_ENHOSTDISCONDETECT_MASK
 0x2u

	)

38181 
	#USBPHY_CTRL_ENHOSTDISCONDETECT_SHIFT
 1

	)

38182 
	#USBPHY_CTRL_ENIRQHOSTDISCON_MASK
 0x4u

	)

38183 
	#USBPHY_CTRL_ENIRQHOSTDISCON_SHIFT
 2

	)

38184 
	#USBPHY_CTRL_HOSTDISCONDETECT_IRQ_MASK
 0x8u

	)

38185 
	#USBPHY_CTRL_HOSTDISCONDETECT_IRQ_SHIFT
 3

	)

38186 
	#USBPHY_CTRL_ENDEVPLUGINDETECT_MASK
 0x10u

	)

38187 
	#USBPHY_CTRL_ENDEVPLUGINDETECT_SHIFT
 4

	)

38188 
	#USBPHY_CTRL_DEVPLUGIN_POLARITY_MASK
 0x20u

	)

38189 
	#USBPHY_CTRL_DEVPLUGIN_POLARITY_SHIFT
 5

	)

38190 
	#USBPHY_CTRL_OTG_ID_CHG_IRQ_MASK
 0x40u

	)

38191 
	#USBPHY_CTRL_OTG_ID_CHG_IRQ_SHIFT
 6

	)

38192 
	#USBPHY_CTRL_ENOTGIDDETECT_MASK
 0x80u

	)

38193 
	#USBPHY_CTRL_ENOTGIDDETECT_SHIFT
 7

	)

38194 
	#USBPHY_CTRL_RESUMEIRQSTICKY_MASK
 0x100u

	)

38195 
	#USBPHY_CTRL_RESUMEIRQSTICKY_SHIFT
 8

	)

38196 
	#USBPHY_CTRL_ENIRQRESUMEDETECT_MASK
 0x200u

	)

38197 
	#USBPHY_CTRL_ENIRQRESUMEDETECT_SHIFT
 9

	)

38198 
	#USBPHY_CTRL_RESUME_IRQ_MASK
 0x400u

	)

38199 
	#USBPHY_CTRL_RESUME_IRQ_SHIFT
 10

	)

38200 
	#USBPHY_CTRL_ENIRQDEVPLUGIN_MASK
 0x800u

	)

38201 
	#USBPHY_CTRL_ENIRQDEVPLUGIN_SHIFT
 11

	)

38202 
	#USBPHY_CTRL_DEVPLUGIN_IRQ_MASK
 0x1000u

	)

38203 
	#USBPHY_CTRL_DEVPLUGIN_IRQ_SHIFT
 12

	)

38204 
	#USBPHY_CTRL_DATA_ON_LRADC_MASK
 0x2000u

	)

38205 
	#USBPHY_CTRL_DATA_ON_LRADC_SHIFT
 13

	)

38206 
	#USBPHY_CTRL_ENUTMILEVEL2_MASK
 0x4000u

	)

38207 
	#USBPHY_CTRL_ENUTMILEVEL2_SHIFT
 14

	)

38208 
	#USBPHY_CTRL_ENUTMILEVEL3_MASK
 0x8000u

	)

38209 
	#USBPHY_CTRL_ENUTMILEVEL3_SHIFT
 15

	)

38210 
	#USBPHY_CTRL_ENIRQWAKEUP_MASK
 0x10000u

	)

38211 
	#USBPHY_CTRL_ENIRQWAKEUP_SHIFT
 16

	)

38212 
	#USBPHY_CTRL_WAKEUP_IRQ_MASK
 0x20000u

	)

38213 
	#USBPHY_CTRL_WAKEUP_IRQ_SHIFT
 17

	)

38214 
	#USBPHY_CTRL_RSVD0_MASK
 0x40000u

	)

38215 
	#USBPHY_CTRL_RSVD0_SHIFT
 18

	)

38216 
	#USBPHY_CTRL_ENAUTOCLR_CLKGATE_MASK
 0x80000u

	)

38217 
	#USBPHY_CTRL_ENAUTOCLR_CLKGATE_SHIFT
 19

	)

38218 
	#USBPHY_CTRL_ENAUTOCLR_PHY_PWD_MASK
 0x100000u

	)

38219 
	#USBPHY_CTRL_ENAUTOCLR_PHY_PWD_SHIFT
 20

	)

38220 
	#USBPHY_CTRL_ENDPDMCHG_WKUP_MASK
 0x200000u

	)

38221 
	#USBPHY_CTRL_ENDPDMCHG_WKUP_SHIFT
 21

	)

38222 
	#USBPHY_CTRL_ENIDCHG_WKUP_MASK
 0x400000u

	)

38223 
	#USBPHY_CTRL_ENIDCHG_WKUP_SHIFT
 22

	)

38224 
	#USBPHY_CTRL_ENVBUSCHG_WKUP_MASK
 0x800000u

	)

38225 
	#USBPHY_CTRL_ENVBUSCHG_WKUP_SHIFT
 23

	)

38226 
	#USBPHY_CTRL_FSDLL_RST_EN_MASK
 0x1000000u

	)

38227 
	#USBPHY_CTRL_FSDLL_RST_EN_SHIFT
 24

	)

38228 
	#USBPHY_CTRL_RSVD1_MASK
 0x6000000u

	)

38229 
	#USBPHY_CTRL_RSVD1_SHIFT
 25

	)

38230 
	#USBPHY_CTRL_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_CTRL_RSVD1_SHIFT
))&
USBPHY_CTRL_RSVD1_MASK
)

	)

38231 
	#USBPHY_CTRL_OTG_ID_VALUE_MASK
 0x8000000u

	)

38232 
	#USBPHY_CTRL_OTG_ID_VALUE_SHIFT
 27

	)

38233 
	#USBPHY_CTRL_HOST_FORCE_LS_SE0_MASK
 0x10000000u

	)

38234 
	#USBPHY_CTRL_HOST_FORCE_LS_SE0_SHIFT
 28

	)

38235 
	#USBPHY_CTRL_UTMI_SUSPENDM_MASK
 0x20000000u

	)

38236 
	#USBPHY_CTRL_UTMI_SUSPENDM_SHIFT
 29

	)

38237 
	#USBPHY_CTRL_CLKGATE_MASK
 0x40000000u

	)

38238 
	#USBPHY_CTRL_CLKGATE_SHIFT
 30

	)

38239 
	#USBPHY_CTRL_SFTRST_MASK
 0x80000000u

	)

38240 
	#USBPHY_CTRL_SFTRST_SHIFT
 31

	)

38242 
	#USBPHY_CTRL_SET_ENOTG_ID_CHG_IRQ_MASK
 0x1u

	)

38243 
	#USBPHY_CTRL_SET_ENOTG_ID_CHG_IRQ_SHIFT
 0

	)

38244 
	#USBPHY_CTRL_SET_ENHOSTDISCONDETECT_MASK
 0x2u

	)

38245 
	#USBPHY_CTRL_SET_ENHOSTDISCONDETECT_SHIFT
 1

	)

38246 
	#USBPHY_CTRL_SET_ENIRQHOSTDISCON_MASK
 0x4u

	)

38247 
	#USBPHY_CTRL_SET_ENIRQHOSTDISCON_SHIFT
 2

	)

38248 
	#USBPHY_CTRL_SET_HOSTDISCONDETECT_IRQ_MASK
 0x8u

	)

38249 
	#USBPHY_CTRL_SET_HOSTDISCONDETECT_IRQ_SHIFT
 3

	)

38250 
	#USBPHY_CTRL_SET_ENDEVPLUGINDETECT_MASK
 0x10u

	)

38251 
	#USBPHY_CTRL_SET_ENDEVPLUGINDETECT_SHIFT
 4

	)

38252 
	#USBPHY_CTRL_SET_DEVPLUGIN_POLARITY_MASK
 0x20u

	)

38253 
	#USBPHY_CTRL_SET_DEVPLUGIN_POLARITY_SHIFT
 5

	)

38254 
	#USBPHY_CTRL_SET_OTG_ID_CHG_IRQ_MASK
 0x40u

	)

38255 
	#USBPHY_CTRL_SET_OTG_ID_CHG_IRQ_SHIFT
 6

	)

38256 
	#USBPHY_CTRL_SET_ENOTGIDDETECT_MASK
 0x80u

	)

38257 
	#USBPHY_CTRL_SET_ENOTGIDDETECT_SHIFT
 7

	)

38258 
	#USBPHY_CTRL_SET_RESUMEIRQSTICKY_MASK
 0x100u

	)

38259 
	#USBPHY_CTRL_SET_RESUMEIRQSTICKY_SHIFT
 8

	)

38260 
	#USBPHY_CTRL_SET_ENIRQRESUMEDETECT_MASK
 0x200u

	)

38261 
	#USBPHY_CTRL_SET_ENIRQRESUMEDETECT_SHIFT
 9

	)

38262 
	#USBPHY_CTRL_SET_RESUME_IRQ_MASK
 0x400u

	)

38263 
	#USBPHY_CTRL_SET_RESUME_IRQ_SHIFT
 10

	)

38264 
	#USBPHY_CTRL_SET_ENIRQDEVPLUGIN_MASK
 0x800u

	)

38265 
	#USBPHY_CTRL_SET_ENIRQDEVPLUGIN_SHIFT
 11

	)

38266 
	#USBPHY_CTRL_SET_DEVPLUGIN_IRQ_MASK
 0x1000u

	)

38267 
	#USBPHY_CTRL_SET_DEVPLUGIN_IRQ_SHIFT
 12

	)

38268 
	#USBPHY_CTRL_SET_DATA_ON_LRADC_MASK
 0x2000u

	)

38269 
	#USBPHY_CTRL_SET_DATA_ON_LRADC_SHIFT
 13

	)

38270 
	#USBPHY_CTRL_SET_ENUTMILEVEL2_MASK
 0x4000u

	)

38271 
	#USBPHY_CTRL_SET_ENUTMILEVEL2_SHIFT
 14

	)

38272 
	#USBPHY_CTRL_SET_ENUTMILEVEL3_MASK
 0x8000u

	)

38273 
	#USBPHY_CTRL_SET_ENUTMILEVEL3_SHIFT
 15

	)

38274 
	#USBPHY_CTRL_SET_ENIRQWAKEUP_MASK
 0x10000u

	)

38275 
	#USBPHY_CTRL_SET_ENIRQWAKEUP_SHIFT
 16

	)

38276 
	#USBPHY_CTRL_SET_WAKEUP_IRQ_MASK
 0x20000u

	)

38277 
	#USBPHY_CTRL_SET_WAKEUP_IRQ_SHIFT
 17

	)

38278 
	#USBPHY_CTRL_SET_RSVD0_MASK
 0x40000u

	)

38279 
	#USBPHY_CTRL_SET_RSVD0_SHIFT
 18

	)

38280 
	#USBPHY_CTRL_SET_ENAUTOCLR_CLKGATE_MASK
 0x80000u

	)

38281 
	#USBPHY_CTRL_SET_ENAUTOCLR_CLKGATE_SHIFT
 19

	)

38282 
	#USBPHY_CTRL_SET_ENAUTOCLR_PHY_PWD_MASK
 0x100000u

	)

38283 
	#USBPHY_CTRL_SET_ENAUTOCLR_PHY_PWD_SHIFT
 20

	)

38284 
	#USBPHY_CTRL_SET_ENDPDMCHG_WKUP_MASK
 0x200000u

	)

38285 
	#USBPHY_CTRL_SET_ENDPDMCHG_WKUP_SHIFT
 21

	)

38286 
	#USBPHY_CTRL_SET_ENIDCHG_WKUP_MASK
 0x400000u

	)

38287 
	#USBPHY_CTRL_SET_ENIDCHG_WKUP_SHIFT
 22

	)

38288 
	#USBPHY_CTRL_SET_ENVBUSCHG_WKUP_MASK
 0x800000u

	)

38289 
	#USBPHY_CTRL_SET_ENVBUSCHG_WKUP_SHIFT
 23

	)

38290 
	#USBPHY_CTRL_SET_FSDLL_RST_EN_MASK
 0x1000000u

	)

38291 
	#USBPHY_CTRL_SET_FSDLL_RST_EN_SHIFT
 24

	)

38292 
	#USBPHY_CTRL_SET_RSVD1_MASK
 0x6000000u

	)

38293 
	#USBPHY_CTRL_SET_RSVD1_SHIFT
 25

	)

38294 
	#USBPHY_CTRL_SET_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_CTRL_SET_RSVD1_SHIFT
))&
USBPHY_CTRL_SET_RSVD1_MASK
)

	)

38295 
	#USBPHY_CTRL_SET_OTG_ID_VALUE_MASK
 0x8000000u

	)

38296 
	#USBPHY_CTRL_SET_OTG_ID_VALUE_SHIFT
 27

	)

38297 
	#USBPHY_CTRL_SET_HOST_FORCE_LS_SE0_MASK
 0x10000000u

	)

38298 
	#USBPHY_CTRL_SET_HOST_FORCE_LS_SE0_SHIFT
 28

	)

38299 
	#USBPHY_CTRL_SET_UTMI_SUSPENDM_MASK
 0x20000000u

	)

38300 
	#USBPHY_CTRL_SET_UTMI_SUSPENDM_SHIFT
 29

	)

38301 
	#USBPHY_CTRL_SET_CLKGATE_MASK
 0x40000000u

	)

38302 
	#USBPHY_CTRL_SET_CLKGATE_SHIFT
 30

	)

38303 
	#USBPHY_CTRL_SET_SFTRST_MASK
 0x80000000u

	)

38304 
	#USBPHY_CTRL_SET_SFTRST_SHIFT
 31

	)

38306 
	#USBPHY_CTRL_CLR_ENOTG_ID_CHG_IRQ_MASK
 0x1u

	)

38307 
	#USBPHY_CTRL_CLR_ENOTG_ID_CHG_IRQ_SHIFT
 0

	)

38308 
	#USBPHY_CTRL_CLR_ENHOSTDISCONDETECT_MASK
 0x2u

	)

38309 
	#USBPHY_CTRL_CLR_ENHOSTDISCONDETECT_SHIFT
 1

	)

38310 
	#USBPHY_CTRL_CLR_ENIRQHOSTDISCON_MASK
 0x4u

	)

38311 
	#USBPHY_CTRL_CLR_ENIRQHOSTDISCON_SHIFT
 2

	)

38312 
	#USBPHY_CTRL_CLR_HOSTDISCONDETECT_IRQ_MASK
 0x8u

	)

38313 
	#USBPHY_CTRL_CLR_HOSTDISCONDETECT_IRQ_SHIFT
 3

	)

38314 
	#USBPHY_CTRL_CLR_ENDEVPLUGINDETECT_MASK
 0x10u

	)

38315 
	#USBPHY_CTRL_CLR_ENDEVPLUGINDETECT_SHIFT
 4

	)

38316 
	#USBPHY_CTRL_CLR_DEVPLUGIN_POLARITY_MASK
 0x20u

	)

38317 
	#USBPHY_CTRL_CLR_DEVPLUGIN_POLARITY_SHIFT
 5

	)

38318 
	#USBPHY_CTRL_CLR_OTG_ID_CHG_IRQ_MASK
 0x40u

	)

38319 
	#USBPHY_CTRL_CLR_OTG_ID_CHG_IRQ_SHIFT
 6

	)

38320 
	#USBPHY_CTRL_CLR_ENOTGIDDETECT_MASK
 0x80u

	)

38321 
	#USBPHY_CTRL_CLR_ENOTGIDDETECT_SHIFT
 7

	)

38322 
	#USBPHY_CTRL_CLR_RESUMEIRQSTICKY_MASK
 0x100u

	)

38323 
	#USBPHY_CTRL_CLR_RESUMEIRQSTICKY_SHIFT
 8

	)

38324 
	#USBPHY_CTRL_CLR_ENIRQRESUMEDETECT_MASK
 0x200u

	)

38325 
	#USBPHY_CTRL_CLR_ENIRQRESUMEDETECT_SHIFT
 9

	)

38326 
	#USBPHY_CTRL_CLR_RESUME_IRQ_MASK
 0x400u

	)

38327 
	#USBPHY_CTRL_CLR_RESUME_IRQ_SHIFT
 10

	)

38328 
	#USBPHY_CTRL_CLR_ENIRQDEVPLUGIN_MASK
 0x800u

	)

38329 
	#USBPHY_CTRL_CLR_ENIRQDEVPLUGIN_SHIFT
 11

	)

38330 
	#USBPHY_CTRL_CLR_DEVPLUGIN_IRQ_MASK
 0x1000u

	)

38331 
	#USBPHY_CTRL_CLR_DEVPLUGIN_IRQ_SHIFT
 12

	)

38332 
	#USBPHY_CTRL_CLR_DATA_ON_LRADC_MASK
 0x2000u

	)

38333 
	#USBPHY_CTRL_CLR_DATA_ON_LRADC_SHIFT
 13

	)

38334 
	#USBPHY_CTRL_CLR_ENUTMILEVEL2_MASK
 0x4000u

	)

38335 
	#USBPHY_CTRL_CLR_ENUTMILEVEL2_SHIFT
 14

	)

38336 
	#USBPHY_CTRL_CLR_ENUTMILEVEL3_MASK
 0x8000u

	)

38337 
	#USBPHY_CTRL_CLR_ENUTMILEVEL3_SHIFT
 15

	)

38338 
	#USBPHY_CTRL_CLR_ENIRQWAKEUP_MASK
 0x10000u

	)

38339 
	#USBPHY_CTRL_CLR_ENIRQWAKEUP_SHIFT
 16

	)

38340 
	#USBPHY_CTRL_CLR_WAKEUP_IRQ_MASK
 0x20000u

	)

38341 
	#USBPHY_CTRL_CLR_WAKEUP_IRQ_SHIFT
 17

	)

38342 
	#USBPHY_CTRL_CLR_RSVD0_MASK
 0x40000u

	)

38343 
	#USBPHY_CTRL_CLR_RSVD0_SHIFT
 18

	)

38344 
	#USBPHY_CTRL_CLR_ENAUTOCLR_CLKGATE_MASK
 0x80000u

	)

38345 
	#USBPHY_CTRL_CLR_ENAUTOCLR_CLKGATE_SHIFT
 19

	)

38346 
	#USBPHY_CTRL_CLR_ENAUTOCLR_PHY_PWD_MASK
 0x100000u

	)

38347 
	#USBPHY_CTRL_CLR_ENAUTOCLR_PHY_PWD_SHIFT
 20

	)

38348 
	#USBPHY_CTRL_CLR_ENDPDMCHG_WKUP_MASK
 0x200000u

	)

38349 
	#USBPHY_CTRL_CLR_ENDPDMCHG_WKUP_SHIFT
 21

	)

38350 
	#USBPHY_CTRL_CLR_ENIDCHG_WKUP_MASK
 0x400000u

	)

38351 
	#USBPHY_CTRL_CLR_ENIDCHG_WKUP_SHIFT
 22

	)

38352 
	#USBPHY_CTRL_CLR_ENVBUSCHG_WKUP_MASK
 0x800000u

	)

38353 
	#USBPHY_CTRL_CLR_ENVBUSCHG_WKUP_SHIFT
 23

	)

38354 
	#USBPHY_CTRL_CLR_FSDLL_RST_EN_MASK
 0x1000000u

	)

38355 
	#USBPHY_CTRL_CLR_FSDLL_RST_EN_SHIFT
 24

	)

38356 
	#USBPHY_CTRL_CLR_RSVD1_MASK
 0x6000000u

	)

38357 
	#USBPHY_CTRL_CLR_RSVD1_SHIFT
 25

	)

38358 
	#USBPHY_CTRL_CLR_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_CTRL_CLR_RSVD1_SHIFT
))&
USBPHY_CTRL_CLR_RSVD1_MASK
)

	)

38359 
	#USBPHY_CTRL_CLR_OTG_ID_VALUE_MASK
 0x8000000u

	)

38360 
	#USBPHY_CTRL_CLR_OTG_ID_VALUE_SHIFT
 27

	)

38361 
	#USBPHY_CTRL_CLR_HOST_FORCE_LS_SE0_MASK
 0x10000000u

	)

38362 
	#USBPHY_CTRL_CLR_HOST_FORCE_LS_SE0_SHIFT
 28

	)

38363 
	#USBPHY_CTRL_CLR_UTMI_SUSPENDM_MASK
 0x20000000u

	)

38364 
	#USBPHY_CTRL_CLR_UTMI_SUSPENDM_SHIFT
 29

	)

38365 
	#USBPHY_CTRL_CLR_CLKGATE_MASK
 0x40000000u

	)

38366 
	#USBPHY_CTRL_CLR_CLKGATE_SHIFT
 30

	)

38367 
	#USBPHY_CTRL_CLR_SFTRST_MASK
 0x80000000u

	)

38368 
	#USBPHY_CTRL_CLR_SFTRST_SHIFT
 31

	)

38370 
	#USBPHY_CTRL_TOG_ENOTG_ID_CHG_IRQ_MASK
 0x1u

	)

38371 
	#USBPHY_CTRL_TOG_ENOTG_ID_CHG_IRQ_SHIFT
 0

	)

38372 
	#USBPHY_CTRL_TOG_ENHOSTDISCONDETECT_MASK
 0x2u

	)

38373 
	#USBPHY_CTRL_TOG_ENHOSTDISCONDETECT_SHIFT
 1

	)

38374 
	#USBPHY_CTRL_TOG_ENIRQHOSTDISCON_MASK
 0x4u

	)

38375 
	#USBPHY_CTRL_TOG_ENIRQHOSTDISCON_SHIFT
 2

	)

38376 
	#USBPHY_CTRL_TOG_HOSTDISCONDETECT_IRQ_MASK
 0x8u

	)

38377 
	#USBPHY_CTRL_TOG_HOSTDISCONDETECT_IRQ_SHIFT
 3

	)

38378 
	#USBPHY_CTRL_TOG_ENDEVPLUGINDETECT_MASK
 0x10u

	)

38379 
	#USBPHY_CTRL_TOG_ENDEVPLUGINDETECT_SHIFT
 4

	)

38380 
	#USBPHY_CTRL_TOG_DEVPLUGIN_POLARITY_MASK
 0x20u

	)

38381 
	#USBPHY_CTRL_TOG_DEVPLUGIN_POLARITY_SHIFT
 5

	)

38382 
	#USBPHY_CTRL_TOG_OTG_ID_CHG_IRQ_MASK
 0x40u

	)

38383 
	#USBPHY_CTRL_TOG_OTG_ID_CHG_IRQ_SHIFT
 6

	)

38384 
	#USBPHY_CTRL_TOG_ENOTGIDDETECT_MASK
 0x80u

	)

38385 
	#USBPHY_CTRL_TOG_ENOTGIDDETECT_SHIFT
 7

	)

38386 
	#USBPHY_CTRL_TOG_RESUMEIRQSTICKY_MASK
 0x100u

	)

38387 
	#USBPHY_CTRL_TOG_RESUMEIRQSTICKY_SHIFT
 8

	)

38388 
	#USBPHY_CTRL_TOG_ENIRQRESUMEDETECT_MASK
 0x200u

	)

38389 
	#USBPHY_CTRL_TOG_ENIRQRESUMEDETECT_SHIFT
 9

	)

38390 
	#USBPHY_CTRL_TOG_RESUME_IRQ_MASK
 0x400u

	)

38391 
	#USBPHY_CTRL_TOG_RESUME_IRQ_SHIFT
 10

	)

38392 
	#USBPHY_CTRL_TOG_ENIRQDEVPLUGIN_MASK
 0x800u

	)

38393 
	#USBPHY_CTRL_TOG_ENIRQDEVPLUGIN_SHIFT
 11

	)

38394 
	#USBPHY_CTRL_TOG_DEVPLUGIN_IRQ_MASK
 0x1000u

	)

38395 
	#USBPHY_CTRL_TOG_DEVPLUGIN_IRQ_SHIFT
 12

	)

38396 
	#USBPHY_CTRL_TOG_DATA_ON_LRADC_MASK
 0x2000u

	)

38397 
	#USBPHY_CTRL_TOG_DATA_ON_LRADC_SHIFT
 13

	)

38398 
	#USBPHY_CTRL_TOG_ENUTMILEVEL2_MASK
 0x4000u

	)

38399 
	#USBPHY_CTRL_TOG_ENUTMILEVEL2_SHIFT
 14

	)

38400 
	#USBPHY_CTRL_TOG_ENUTMILEVEL3_MASK
 0x8000u

	)

38401 
	#USBPHY_CTRL_TOG_ENUTMILEVEL3_SHIFT
 15

	)

38402 
	#USBPHY_CTRL_TOG_ENIRQWAKEUP_MASK
 0x10000u

	)

38403 
	#USBPHY_CTRL_TOG_ENIRQWAKEUP_SHIFT
 16

	)

38404 
	#USBPHY_CTRL_TOG_WAKEUP_IRQ_MASK
 0x20000u

	)

38405 
	#USBPHY_CTRL_TOG_WAKEUP_IRQ_SHIFT
 17

	)

38406 
	#USBPHY_CTRL_TOG_RSVD0_MASK
 0x40000u

	)

38407 
	#USBPHY_CTRL_TOG_RSVD0_SHIFT
 18

	)

38408 
	#USBPHY_CTRL_TOG_ENAUTOCLR_CLKGATE_MASK
 0x80000u

	)

38409 
	#USBPHY_CTRL_TOG_ENAUTOCLR_CLKGATE_SHIFT
 19

	)

38410 
	#USBPHY_CTRL_TOG_ENAUTOCLR_PHY_PWD_MASK
 0x100000u

	)

38411 
	#USBPHY_CTRL_TOG_ENAUTOCLR_PHY_PWD_SHIFT
 20

	)

38412 
	#USBPHY_CTRL_TOG_ENDPDMCHG_WKUP_MASK
 0x200000u

	)

38413 
	#USBPHY_CTRL_TOG_ENDPDMCHG_WKUP_SHIFT
 21

	)

38414 
	#USBPHY_CTRL_TOG_ENIDCHG_WKUP_MASK
 0x400000u

	)

38415 
	#USBPHY_CTRL_TOG_ENIDCHG_WKUP_SHIFT
 22

	)

38416 
	#USBPHY_CTRL_TOG_ENVBUSCHG_WKUP_MASK
 0x800000u

	)

38417 
	#USBPHY_CTRL_TOG_ENVBUSCHG_WKUP_SHIFT
 23

	)

38418 
	#USBPHY_CTRL_TOG_FSDLL_RST_EN_MASK
 0x1000000u

	)

38419 
	#USBPHY_CTRL_TOG_FSDLL_RST_EN_SHIFT
 24

	)

38420 
	#USBPHY_CTRL_TOG_RSVD1_MASK
 0x6000000u

	)

38421 
	#USBPHY_CTRL_TOG_RSVD1_SHIFT
 25

	)

38422 
	#USBPHY_CTRL_TOG_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_CTRL_TOG_RSVD1_SHIFT
))&
USBPHY_CTRL_TOG_RSVD1_MASK
)

	)

38423 
	#USBPHY_CTRL_TOG_OTG_ID_VALUE_MASK
 0x8000000u

	)

38424 
	#USBPHY_CTRL_TOG_OTG_ID_VALUE_SHIFT
 27

	)

38425 
	#USBPHY_CTRL_TOG_HOST_FORCE_LS_SE0_MASK
 0x10000000u

	)

38426 
	#USBPHY_CTRL_TOG_HOST_FORCE_LS_SE0_SHIFT
 28

	)

38427 
	#USBPHY_CTRL_TOG_UTMI_SUSPENDM_MASK
 0x20000000u

	)

38428 
	#USBPHY_CTRL_TOG_UTMI_SUSPENDM_SHIFT
 29

	)

38429 
	#USBPHY_CTRL_TOG_CLKGATE_MASK
 0x40000000u

	)

38430 
	#USBPHY_CTRL_TOG_CLKGATE_SHIFT
 30

	)

38431 
	#USBPHY_CTRL_TOG_SFTRST_MASK
 0x80000000u

	)

38432 
	#USBPHY_CTRL_TOG_SFTRST_SHIFT
 31

	)

38434 
	#USBPHY_STATUS_RSVD0_MASK
 0x7u

	)

38435 
	#USBPHY_STATUS_RSVD0_SHIFT
 0

	)

38436 
	#USBPHY_STATUS_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_STATUS_RSVD0_SHIFT
))&
USBPHY_STATUS_RSVD0_MASK
)

	)

38437 
	#USBPHY_STATUS_HOSTDISCONDETECT_STATUS_MASK
 0x8u

	)

38438 
	#USBPHY_STATUS_HOSTDISCONDETECT_STATUS_SHIFT
 3

	)

38439 
	#USBPHY_STATUS_RSVD1_MASK
 0x30u

	)

38440 
	#USBPHY_STATUS_RSVD1_SHIFT
 4

	)

38441 
	#USBPHY_STATUS_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_STATUS_RSVD1_SHIFT
))&
USBPHY_STATUS_RSVD1_MASK
)

	)

38442 
	#USBPHY_STATUS_DEVPLUGIN_STATUS_MASK
 0x40u

	)

38443 
	#USBPHY_STATUS_DEVPLUGIN_STATUS_SHIFT
 6

	)

38444 
	#USBPHY_STATUS_RSVD2_MASK
 0x80u

	)

38445 
	#USBPHY_STATUS_RSVD2_SHIFT
 7

	)

38446 
	#USBPHY_STATUS_OTGID_STATUS_MASK
 0x100u

	)

38447 
	#USBPHY_STATUS_OTGID_STATUS_SHIFT
 8

	)

38448 
	#USBPHY_STATUS_RSVD3_MASK
 0x200u

	)

38449 
	#USBPHY_STATUS_RSVD3_SHIFT
 9

	)

38450 
	#USBPHY_STATUS_RESUME_STATUS_MASK
 0x400u

	)

38451 
	#USBPHY_STATUS_RESUME_STATUS_SHIFT
 10

	)

38452 
	#USBPHY_STATUS_RSVD4_MASK
 0xFFFFF800u

	)

38453 
	#USBPHY_STATUS_RSVD4_SHIFT
 11

	)

38454 
	#USBPHY_STATUS_RSVD4
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_STATUS_RSVD4_SHIFT
))&
USBPHY_STATUS_RSVD4_MASK
)

	)

38456 
	#USBPHY_DEBUG_OTGIDPIOLOCK_MASK
 0x1u

	)

38457 
	#USBPHY_DEBUG_OTGIDPIOLOCK_SHIFT
 0

	)

38458 
	#USBPHY_DEBUG_DEBUG_INTERFACE_HOLD_MASK
 0x2u

	)

38459 
	#USBPHY_DEBUG_DEBUG_INTERFACE_HOLD_SHIFT
 1

	)

38460 
	#USBPHY_DEBUG_HSTPULLDOWN_MASK
 0xCu

	)

38461 
	#USBPHY_DEBUG_HSTPULLDOWN_SHIFT
 2

	)

38462 
	#USBPHY_DEBUG_HSTPULLDOWN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_HSTPULLDOWN_SHIFT
))&
USBPHY_DEBUG_HSTPULLDOWN_MASK
)

	)

38463 
	#USBPHY_DEBUG_ENHSTPULLDOWN_MASK
 0x30u

	)

38464 
	#USBPHY_DEBUG_ENHSTPULLDOWN_SHIFT
 4

	)

38465 
	#USBPHY_DEBUG_ENHSTPULLDOWN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_ENHSTPULLDOWN_SHIFT
))&
USBPHY_DEBUG_ENHSTPULLDOWN_MASK
)

	)

38466 
	#USBPHY_DEBUG_RSVD0_MASK
 0xC0u

	)

38467 
	#USBPHY_DEBUG_RSVD0_SHIFT
 6

	)

38468 
	#USBPHY_DEBUG_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_RSVD0_SHIFT
))&
USBPHY_DEBUG_RSVD0_MASK
)

	)

38469 
	#USBPHY_DEBUG_TX2RXCOUNT_MASK
 0xF00u

	)

38470 
	#USBPHY_DEBUG_TX2RXCOUNT_SHIFT
 8

	)

38471 
	#USBPHY_DEBUG_TX2RXCOUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_TX2RXCOUNT_SHIFT
))&
USBPHY_DEBUG_TX2RXCOUNT_MASK
)

	)

38472 
	#USBPHY_DEBUG_ENTX2RXCOUNT_MASK
 0x1000u

	)

38473 
	#USBPHY_DEBUG_ENTX2RXCOUNT_SHIFT
 12

	)

38474 
	#USBPHY_DEBUG_RSVD1_MASK
 0xE000u

	)

38475 
	#USBPHY_DEBUG_RSVD1_SHIFT
 13

	)

38476 
	#USBPHY_DEBUG_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_RSVD1_SHIFT
))&
USBPHY_DEBUG_RSVD1_MASK
)

	)

38477 
	#USBPHY_DEBUG_SQUELCHRESETCOUNT_MASK
 0x1F0000u

	)

38478 
	#USBPHY_DEBUG_SQUELCHRESETCOUNT_SHIFT
 16

	)

38479 
	#USBPHY_DEBUG_SQUELCHRESETCOUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_SQUELCHRESETCOUNT_SHIFT
))&
USBPHY_DEBUG_SQUELCHRESETCOUNT_MASK
)

	)

38480 
	#USBPHY_DEBUG_RSVD2_MASK
 0xE00000u

	)

38481 
	#USBPHY_DEBUG_RSVD2_SHIFT
 21

	)

38482 
	#USBPHY_DEBUG_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_RSVD2_SHIFT
))&
USBPHY_DEBUG_RSVD2_MASK
)

	)

38483 
	#USBPHY_DEBUG_ENSQUELCHRESET_MASK
 0x1000000u

	)

38484 
	#USBPHY_DEBUG_ENSQUELCHRESET_SHIFT
 24

	)

38485 
	#USBPHY_DEBUG_SQUELCHRESETLENGTH_MASK
 0x1E000000u

	)

38486 
	#USBPHY_DEBUG_SQUELCHRESETLENGTH_SHIFT
 25

	)

38487 
	#USBPHY_DEBUG_SQUELCHRESETLENGTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_SQUELCHRESETLENGTH_SHIFT
))&
USBPHY_DEBUG_SQUELCHRESETLENGTH_MASK
)

	)

38488 
	#USBPHY_DEBUG_HOST_RESUME_DEBUG_MASK
 0x20000000u

	)

38489 
	#USBPHY_DEBUG_HOST_RESUME_DEBUG_SHIFT
 29

	)

38490 
	#USBPHY_DEBUG_CLKGATE_MASK
 0x40000000u

	)

38491 
	#USBPHY_DEBUG_CLKGATE_SHIFT
 30

	)

38492 
	#USBPHY_DEBUG_RSVD3_MASK
 0x80000000u

	)

38493 
	#USBPHY_DEBUG_RSVD3_SHIFT
 31

	)

38495 
	#USBPHY_DEBUG_SET_OTGIDPIOLOCK_MASK
 0x1u

	)

38496 
	#USBPHY_DEBUG_SET_OTGIDPIOLOCK_SHIFT
 0

	)

38497 
	#USBPHY_DEBUG_SET_DEBUG_INTERFACE_HOLD_MASK
 0x2u

	)

38498 
	#USBPHY_DEBUG_SET_DEBUG_INTERFACE_HOLD_SHIFT
 1

	)

38499 
	#USBPHY_DEBUG_SET_HSTPULLDOWN_MASK
 0xCu

	)

38500 
	#USBPHY_DEBUG_SET_HSTPULLDOWN_SHIFT
 2

	)

38501 
	#USBPHY_DEBUG_SET_HSTPULLDOWN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_SET_HSTPULLDOWN_SHIFT
))&
USBPHY_DEBUG_SET_HSTPULLDOWN_MASK
)

	)

38502 
	#USBPHY_DEBUG_SET_ENHSTPULLDOWN_MASK
 0x30u

	)

38503 
	#USBPHY_DEBUG_SET_ENHSTPULLDOWN_SHIFT
 4

	)

38504 
	#USBPHY_DEBUG_SET_ENHSTPULLDOWN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_SET_ENHSTPULLDOWN_SHIFT
))&
USBPHY_DEBUG_SET_ENHSTPULLDOWN_MASK
)

	)

38505 
	#USBPHY_DEBUG_SET_RSVD0_MASK
 0xC0u

	)

38506 
	#USBPHY_DEBUG_SET_RSVD0_SHIFT
 6

	)

38507 
	#USBPHY_DEBUG_SET_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_SET_RSVD0_SHIFT
))&
USBPHY_DEBUG_SET_RSVD0_MASK
)

	)

38508 
	#USBPHY_DEBUG_SET_TX2RXCOUNT_MASK
 0xF00u

	)

38509 
	#USBPHY_DEBUG_SET_TX2RXCOUNT_SHIFT
 8

	)

38510 
	#USBPHY_DEBUG_SET_TX2RXCOUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_SET_TX2RXCOUNT_SHIFT
))&
USBPHY_DEBUG_SET_TX2RXCOUNT_MASK
)

	)

38511 
	#USBPHY_DEBUG_SET_ENTX2RXCOUNT_MASK
 0x1000u

	)

38512 
	#USBPHY_DEBUG_SET_ENTX2RXCOUNT_SHIFT
 12

	)

38513 
	#USBPHY_DEBUG_SET_RSVD1_MASK
 0xE000u

	)

38514 
	#USBPHY_DEBUG_SET_RSVD1_SHIFT
 13

	)

38515 
	#USBPHY_DEBUG_SET_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_SET_RSVD1_SHIFT
))&
USBPHY_DEBUG_SET_RSVD1_MASK
)

	)

38516 
	#USBPHY_DEBUG_SET_SQUELCHRESETCOUNT_MASK
 0x1F0000u

	)

38517 
	#USBPHY_DEBUG_SET_SQUELCHRESETCOUNT_SHIFT
 16

	)

38518 
	#USBPHY_DEBUG_SET_SQUELCHRESETCOUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_SET_SQUELCHRESETCOUNT_SHIFT
))&
USBPHY_DEBUG_SET_SQUELCHRESETCOUNT_MASK
)

	)

38519 
	#USBPHY_DEBUG_SET_RSVD2_MASK
 0xE00000u

	)

38520 
	#USBPHY_DEBUG_SET_RSVD2_SHIFT
 21

	)

38521 
	#USBPHY_DEBUG_SET_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_SET_RSVD2_SHIFT
))&
USBPHY_DEBUG_SET_RSVD2_MASK
)

	)

38522 
	#USBPHY_DEBUG_SET_ENSQUELCHRESET_MASK
 0x1000000u

	)

38523 
	#USBPHY_DEBUG_SET_ENSQUELCHRESET_SHIFT
 24

	)

38524 
	#USBPHY_DEBUG_SET_SQUELCHRESETLENGTH_MASK
 0x1E000000u

	)

38525 
	#USBPHY_DEBUG_SET_SQUELCHRESETLENGTH_SHIFT
 25

	)

38526 
	#USBPHY_DEBUG_SET_SQUELCHRESETLENGTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_SET_SQUELCHRESETLENGTH_SHIFT
))&
USBPHY_DEBUG_SET_SQUELCHRESETLENGTH_MASK
)

	)

38527 
	#USBPHY_DEBUG_SET_HOST_RESUME_DEBUG_MASK
 0x20000000u

	)

38528 
	#USBPHY_DEBUG_SET_HOST_RESUME_DEBUG_SHIFT
 29

	)

38529 
	#USBPHY_DEBUG_SET_CLKGATE_MASK
 0x40000000u

	)

38530 
	#USBPHY_DEBUG_SET_CLKGATE_SHIFT
 30

	)

38531 
	#USBPHY_DEBUG_SET_RSVD3_MASK
 0x80000000u

	)

38532 
	#USBPHY_DEBUG_SET_RSVD3_SHIFT
 31

	)

38534 
	#USBPHY_DEBUG_CLR_OTGIDPIOLOCK_MASK
 0x1u

	)

38535 
	#USBPHY_DEBUG_CLR_OTGIDPIOLOCK_SHIFT
 0

	)

38536 
	#USBPHY_DEBUG_CLR_DEBUG_INTERFACE_HOLD_MASK
 0x2u

	)

38537 
	#USBPHY_DEBUG_CLR_DEBUG_INTERFACE_HOLD_SHIFT
 1

	)

38538 
	#USBPHY_DEBUG_CLR_HSTPULLDOWN_MASK
 0xCu

	)

38539 
	#USBPHY_DEBUG_CLR_HSTPULLDOWN_SHIFT
 2

	)

38540 
	#USBPHY_DEBUG_CLR_HSTPULLDOWN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_CLR_HSTPULLDOWN_SHIFT
))&
USBPHY_DEBUG_CLR_HSTPULLDOWN_MASK
)

	)

38541 
	#USBPHY_DEBUG_CLR_ENHSTPULLDOWN_MASK
 0x30u

	)

38542 
	#USBPHY_DEBUG_CLR_ENHSTPULLDOWN_SHIFT
 4

	)

38543 
	#USBPHY_DEBUG_CLR_ENHSTPULLDOWN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_CLR_ENHSTPULLDOWN_SHIFT
))&
USBPHY_DEBUG_CLR_ENHSTPULLDOWN_MASK
)

	)

38544 
	#USBPHY_DEBUG_CLR_RSVD0_MASK
 0xC0u

	)

38545 
	#USBPHY_DEBUG_CLR_RSVD0_SHIFT
 6

	)

38546 
	#USBPHY_DEBUG_CLR_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_CLR_RSVD0_SHIFT
))&
USBPHY_DEBUG_CLR_RSVD0_MASK
)

	)

38547 
	#USBPHY_DEBUG_CLR_TX2RXCOUNT_MASK
 0xF00u

	)

38548 
	#USBPHY_DEBUG_CLR_TX2RXCOUNT_SHIFT
 8

	)

38549 
	#USBPHY_DEBUG_CLR_TX2RXCOUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_CLR_TX2RXCOUNT_SHIFT
))&
USBPHY_DEBUG_CLR_TX2RXCOUNT_MASK
)

	)

38550 
	#USBPHY_DEBUG_CLR_ENTX2RXCOUNT_MASK
 0x1000u

	)

38551 
	#USBPHY_DEBUG_CLR_ENTX2RXCOUNT_SHIFT
 12

	)

38552 
	#USBPHY_DEBUG_CLR_RSVD1_MASK
 0xE000u

	)

38553 
	#USBPHY_DEBUG_CLR_RSVD1_SHIFT
 13

	)

38554 
	#USBPHY_DEBUG_CLR_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_CLR_RSVD1_SHIFT
))&
USBPHY_DEBUG_CLR_RSVD1_MASK
)

	)

38555 
	#USBPHY_DEBUG_CLR_SQUELCHRESETCOUNT_MASK
 0x1F0000u

	)

38556 
	#USBPHY_DEBUG_CLR_SQUELCHRESETCOUNT_SHIFT
 16

	)

38557 
	#USBPHY_DEBUG_CLR_SQUELCHRESETCOUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_CLR_SQUELCHRESETCOUNT_SHIFT
))&
USBPHY_DEBUG_CLR_SQUELCHRESETCOUNT_MASK
)

	)

38558 
	#USBPHY_DEBUG_CLR_RSVD2_MASK
 0xE00000u

	)

38559 
	#USBPHY_DEBUG_CLR_RSVD2_SHIFT
 21

	)

38560 
	#USBPHY_DEBUG_CLR_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_CLR_RSVD2_SHIFT
))&
USBPHY_DEBUG_CLR_RSVD2_MASK
)

	)

38561 
	#USBPHY_DEBUG_CLR_ENSQUELCHRESET_MASK
 0x1000000u

	)

38562 
	#USBPHY_DEBUG_CLR_ENSQUELCHRESET_SHIFT
 24

	)

38563 
	#USBPHY_DEBUG_CLR_SQUELCHRESETLENGTH_MASK
 0x1E000000u

	)

38564 
	#USBPHY_DEBUG_CLR_SQUELCHRESETLENGTH_SHIFT
 25

	)

38565 
	#USBPHY_DEBUG_CLR_SQUELCHRESETLENGTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_CLR_SQUELCHRESETLENGTH_SHIFT
))&
USBPHY_DEBUG_CLR_SQUELCHRESETLENGTH_MASK
)

	)

38566 
	#USBPHY_DEBUG_CLR_HOST_RESUME_DEBUG_MASK
 0x20000000u

	)

38567 
	#USBPHY_DEBUG_CLR_HOST_RESUME_DEBUG_SHIFT
 29

	)

38568 
	#USBPHY_DEBUG_CLR_CLKGATE_MASK
 0x40000000u

	)

38569 
	#USBPHY_DEBUG_CLR_CLKGATE_SHIFT
 30

	)

38570 
	#USBPHY_DEBUG_CLR_RSVD3_MASK
 0x80000000u

	)

38571 
	#USBPHY_DEBUG_CLR_RSVD3_SHIFT
 31

	)

38573 
	#USBPHY_DEBUG_TOG_OTGIDPIOLOCK_MASK
 0x1u

	)

38574 
	#USBPHY_DEBUG_TOG_OTGIDPIOLOCK_SHIFT
 0

	)

38575 
	#USBPHY_DEBUG_TOG_DEBUG_INTERFACE_HOLD_MASK
 0x2u

	)

38576 
	#USBPHY_DEBUG_TOG_DEBUG_INTERFACE_HOLD_SHIFT
 1

	)

38577 
	#USBPHY_DEBUG_TOG_HSTPULLDOWN_MASK
 0xCu

	)

38578 
	#USBPHY_DEBUG_TOG_HSTPULLDOWN_SHIFT
 2

	)

38579 
	#USBPHY_DEBUG_TOG_HSTPULLDOWN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_TOG_HSTPULLDOWN_SHIFT
))&
USBPHY_DEBUG_TOG_HSTPULLDOWN_MASK
)

	)

38580 
	#USBPHY_DEBUG_TOG_ENHSTPULLDOWN_MASK
 0x30u

	)

38581 
	#USBPHY_DEBUG_TOG_ENHSTPULLDOWN_SHIFT
 4

	)

38582 
	#USBPHY_DEBUG_TOG_ENHSTPULLDOWN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_TOG_ENHSTPULLDOWN_SHIFT
))&
USBPHY_DEBUG_TOG_ENHSTPULLDOWN_MASK
)

	)

38583 
	#USBPHY_DEBUG_TOG_RSVD0_MASK
 0xC0u

	)

38584 
	#USBPHY_DEBUG_TOG_RSVD0_SHIFT
 6

	)

38585 
	#USBPHY_DEBUG_TOG_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_TOG_RSVD0_SHIFT
))&
USBPHY_DEBUG_TOG_RSVD0_MASK
)

	)

38586 
	#USBPHY_DEBUG_TOG_TX2RXCOUNT_MASK
 0xF00u

	)

38587 
	#USBPHY_DEBUG_TOG_TX2RXCOUNT_SHIFT
 8

	)

38588 
	#USBPHY_DEBUG_TOG_TX2RXCOUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_TOG_TX2RXCOUNT_SHIFT
))&
USBPHY_DEBUG_TOG_TX2RXCOUNT_MASK
)

	)

38589 
	#USBPHY_DEBUG_TOG_ENTX2RXCOUNT_MASK
 0x1000u

	)

38590 
	#USBPHY_DEBUG_TOG_ENTX2RXCOUNT_SHIFT
 12

	)

38591 
	#USBPHY_DEBUG_TOG_RSVD1_MASK
 0xE000u

	)

38592 
	#USBPHY_DEBUG_TOG_RSVD1_SHIFT
 13

	)

38593 
	#USBPHY_DEBUG_TOG_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_TOG_RSVD1_SHIFT
))&
USBPHY_DEBUG_TOG_RSVD1_MASK
)

	)

38594 
	#USBPHY_DEBUG_TOG_SQUELCHRESETCOUNT_MASK
 0x1F0000u

	)

38595 
	#USBPHY_DEBUG_TOG_SQUELCHRESETCOUNT_SHIFT
 16

	)

38596 
	#USBPHY_DEBUG_TOG_SQUELCHRESETCOUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_TOG_SQUELCHRESETCOUNT_SHIFT
))&
USBPHY_DEBUG_TOG_SQUELCHRESETCOUNT_MASK
)

	)

38597 
	#USBPHY_DEBUG_TOG_RSVD2_MASK
 0xE00000u

	)

38598 
	#USBPHY_DEBUG_TOG_RSVD2_SHIFT
 21

	)

38599 
	#USBPHY_DEBUG_TOG_RSVD2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_TOG_RSVD2_SHIFT
))&
USBPHY_DEBUG_TOG_RSVD2_MASK
)

	)

38600 
	#USBPHY_DEBUG_TOG_ENSQUELCHRESET_MASK
 0x1000000u

	)

38601 
	#USBPHY_DEBUG_TOG_ENSQUELCHRESET_SHIFT
 24

	)

38602 
	#USBPHY_DEBUG_TOG_SQUELCHRESETLENGTH_MASK
 0x1E000000u

	)

38603 
	#USBPHY_DEBUG_TOG_SQUELCHRESETLENGTH_SHIFT
 25

	)

38604 
	#USBPHY_DEBUG_TOG_SQUELCHRESETLENGTH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG_TOG_SQUELCHRESETLENGTH_SHIFT
))&
USBPHY_DEBUG_TOG_SQUELCHRESETLENGTH_MASK
)

	)

38605 
	#USBPHY_DEBUG_TOG_HOST_RESUME_DEBUG_MASK
 0x20000000u

	)

38606 
	#USBPHY_DEBUG_TOG_HOST_RESUME_DEBUG_SHIFT
 29

	)

38607 
	#USBPHY_DEBUG_TOG_CLKGATE_MASK
 0x40000000u

	)

38608 
	#USBPHY_DEBUG_TOG_CLKGATE_SHIFT
 30

	)

38609 
	#USBPHY_DEBUG_TOG_RSVD3_MASK
 0x80000000u

	)

38610 
	#USBPHY_DEBUG_TOG_RSVD3_SHIFT
 31

	)

38612 
	#USBPHY_DEBUG0_STATUS_LOOP_BACK_FAIL_COUNT_MASK
 0xFFFFu

	)

38613 
	#USBPHY_DEBUG0_STATUS_LOOP_BACK_FAIL_COUNT_SHIFT
 0

	)

38614 
	#USBPHY_DEBUG0_STATUS_LOOP_BACK_FAIL_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG0_STATUS_LOOP_BACK_FAIL_COUNT_SHIFT
))&
USBPHY_DEBUG0_STATUS_LOOP_BACK_FAIL_COUNT_MASK
)

	)

38615 
	#USBPHY_DEBUG0_STATUS_UTMI_RXERROR_FAIL_COUNT_MASK
 0x3FF0000u

	)

38616 
	#USBPHY_DEBUG0_STATUS_UTMI_RXERROR_FAIL_COUNT_SHIFT
 16

	)

38617 
	#USBPHY_DEBUG0_STATUS_UTMI_RXERROR_FAIL_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG0_STATUS_UTMI_RXERROR_FAIL_COUNT_SHIFT
))&
USBPHY_DEBUG0_STATUS_UTMI_RXERROR_FAIL_COUNT_MASK
)

	)

38618 
	#USBPHY_DEBUG0_STATUS_SQUELCH_COUNT_MASK
 0xFC000000u

	)

38619 
	#USBPHY_DEBUG0_STATUS_SQUELCH_COUNT_SHIFT
 26

	)

38620 
	#USBPHY_DEBUG0_STATUS_SQUELCH_COUNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG0_STATUS_SQUELCH_COUNT_SHIFT
))&
USBPHY_DEBUG0_STATUS_SQUELCH_COUNT_MASK
)

	)

38622 
	#USBPHY_DEBUG1_RSVD0_MASK
 0x1FFFu

	)

38623 
	#USBPHY_DEBUG1_RSVD0_SHIFT
 0

	)

38624 
	#USBPHY_DEBUG1_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG1_RSVD0_SHIFT
))&
USBPHY_DEBUG1_RSVD0_MASK
)

	)

38625 
	#USBPHY_DEBUG1_ENTAILADJVD_MASK
 0x6000u

	)

38626 
	#USBPHY_DEBUG1_ENTAILADJVD_SHIFT
 13

	)

38627 
	#USBPHY_DEBUG1_ENTAILADJVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG1_ENTAILADJVD_SHIFT
))&
USBPHY_DEBUG1_ENTAILADJVD_MASK
)

	)

38628 
	#USBPHY_DEBUG1_RSVD1_MASK
 0xFFFF8000u

	)

38629 
	#USBPHY_DEBUG1_RSVD1_SHIFT
 15

	)

38630 
	#USBPHY_DEBUG1_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG1_RSVD1_SHIFT
))&
USBPHY_DEBUG1_RSVD1_MASK
)

	)

38632 
	#USBPHY_DEBUG1_SET_RSVD0_MASK
 0x1FFFu

	)

38633 
	#USBPHY_DEBUG1_SET_RSVD0_SHIFT
 0

	)

38634 
	#USBPHY_DEBUG1_SET_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG1_SET_RSVD0_SHIFT
))&
USBPHY_DEBUG1_SET_RSVD0_MASK
)

	)

38635 
	#USBPHY_DEBUG1_SET_ENTAILADJVD_MASK
 0x6000u

	)

38636 
	#USBPHY_DEBUG1_SET_ENTAILADJVD_SHIFT
 13

	)

38637 
	#USBPHY_DEBUG1_SET_ENTAILADJVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG1_SET_ENTAILADJVD_SHIFT
))&
USBPHY_DEBUG1_SET_ENTAILADJVD_MASK
)

	)

38638 
	#USBPHY_DEBUG1_SET_RSVD1_MASK
 0xFFFF8000u

	)

38639 
	#USBPHY_DEBUG1_SET_RSVD1_SHIFT
 15

	)

38640 
	#USBPHY_DEBUG1_SET_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG1_SET_RSVD1_SHIFT
))&
USBPHY_DEBUG1_SET_RSVD1_MASK
)

	)

38642 
	#USBPHY_DEBUG1_CLR_RSVD0_MASK
 0x1FFFu

	)

38643 
	#USBPHY_DEBUG1_CLR_RSVD0_SHIFT
 0

	)

38644 
	#USBPHY_DEBUG1_CLR_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG1_CLR_RSVD0_SHIFT
))&
USBPHY_DEBUG1_CLR_RSVD0_MASK
)

	)

38645 
	#USBPHY_DEBUG1_CLR_ENTAILADJVD_MASK
 0x6000u

	)

38646 
	#USBPHY_DEBUG1_CLR_ENTAILADJVD_SHIFT
 13

	)

38647 
	#USBPHY_DEBUG1_CLR_ENTAILADJVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG1_CLR_ENTAILADJVD_SHIFT
))&
USBPHY_DEBUG1_CLR_ENTAILADJVD_MASK
)

	)

38648 
	#USBPHY_DEBUG1_CLR_RSVD1_MASK
 0xFFFF8000u

	)

38649 
	#USBPHY_DEBUG1_CLR_RSVD1_SHIFT
 15

	)

38650 
	#USBPHY_DEBUG1_CLR_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG1_CLR_RSVD1_SHIFT
))&
USBPHY_DEBUG1_CLR_RSVD1_MASK
)

	)

38652 
	#USBPHY_DEBUG1_TOG_RSVD0_MASK
 0x1FFFu

	)

38653 
	#USBPHY_DEBUG1_TOG_RSVD0_SHIFT
 0

	)

38654 
	#USBPHY_DEBUG1_TOG_RSVD0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG1_TOG_RSVD0_SHIFT
))&
USBPHY_DEBUG1_TOG_RSVD0_MASK
)

	)

38655 
	#USBPHY_DEBUG1_TOG_ENTAILADJVD_MASK
 0x6000u

	)

38656 
	#USBPHY_DEBUG1_TOG_ENTAILADJVD_SHIFT
 13

	)

38657 
	#USBPHY_DEBUG1_TOG_ENTAILADJVD
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG1_TOG_ENTAILADJVD_SHIFT
))&
USBPHY_DEBUG1_TOG_ENTAILADJVD_MASK
)

	)

38658 
	#USBPHY_DEBUG1_TOG_RSVD1_MASK
 0xFFFF8000u

	)

38659 
	#USBPHY_DEBUG1_TOG_RSVD1_SHIFT
 15

	)

38660 
	#USBPHY_DEBUG1_TOG_RSVD1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_DEBUG1_TOG_RSVD1_SHIFT
))&
USBPHY_DEBUG1_TOG_RSVD1_MASK
)

	)

38662 
	#USBPHY_VERSION_STEP_MASK
 0xFFFFu

	)

38663 
	#USBPHY_VERSION_STEP_SHIFT
 0

	)

38664 
	#USBPHY_VERSION_STEP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_VERSION_STEP_SHIFT
))&
USBPHY_VERSION_STEP_MASK
)

	)

38665 
	#USBPHY_VERSION_MINOR_MASK
 0xFF0000u

	)

38666 
	#USBPHY_VERSION_MINOR_SHIFT
 16

	)

38667 
	#USBPHY_VERSION_MINOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_VERSION_MINOR_SHIFT
))&
USBPHY_VERSION_MINOR_MASK
)

	)

38668 
	#USBPHY_VERSION_MAJOR_MASK
 0xFF000000u

	)

38669 
	#USBPHY_VERSION_MAJOR_SHIFT
 24

	)

38670 
	#USBPHY_VERSION_MAJOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USBPHY_VERSION_MAJOR_SHIFT
))&
USBPHY_VERSION_MAJOR_MASK
)

	)

38678 
	#USBPHY1_BASE
 (0x420C9000u)

	)

38680 
	#USBPHY1
 ((
USBPHY_Ty≥
 *)
USBPHY1_BASE
)

	)

38681 
	#USBPHY1_BASE_PTR
 (
USBPHY1
)

	)

38683 
	#USBPHY2_BASE
 (0x420CA000u)

	)

38685 
	#USBPHY2
 ((
USBPHY_Ty≥
 *)
USBPHY2_BASE
)

	)

38686 
	#USBPHY2_BASE_PTR
 (
USBPHY2
)

	)

38688 
	#USBPHY_BASE_ADDRS
 { 
USBPHY1_BASE
, 
USBPHY2_BASE
 }

	)

38690 
	#USBPHY_BASE_PTRS
 { 
USBPHY1
, 
USBPHY2
 }

	)

38703 
	#USBPHY1_PWD
 
	`USBPHY_PWD_REG
(
USBPHY1_BASE_PTR
)

	)

38704 
	#USBPHY1_PWD_SET
 
	`USBPHY_PWD_SET_REG
(
USBPHY1_BASE_PTR
)

	)

38705 
	#USBPHY1_PWD_CLR
 
	`USBPHY_PWD_CLR_REG
(
USBPHY1_BASE_PTR
)

	)

38706 
	#USBPHY1_PWD_TOG
 
	`USBPHY_PWD_TOG_REG
(
USBPHY1_BASE_PTR
)

	)

38707 
	#USBPHY1_TX
 
	`USBPHY_TX_REG
(
USBPHY1_BASE_PTR
)

	)

38708 
	#USBPHY1_TX_SET
 
	`USBPHY_TX_SET_REG
(
USBPHY1_BASE_PTR
)

	)

38709 
	#USBPHY1_TX_CLR
 
	`USBPHY_TX_CLR_REG
(
USBPHY1_BASE_PTR
)

	)

38710 
	#USBPHY1_TX_TOG
 
	`USBPHY_TX_TOG_REG
(
USBPHY1_BASE_PTR
)

	)

38711 
	#USBPHY1_RX
 
	`USBPHY_RX_REG
(
USBPHY1_BASE_PTR
)

	)

38712 
	#USBPHY1_RX_SET
 
	`USBPHY_RX_SET_REG
(
USBPHY1_BASE_PTR
)

	)

38713 
	#USBPHY1_RX_CLR
 
	`USBPHY_RX_CLR_REG
(
USBPHY1_BASE_PTR
)

	)

38714 
	#USBPHY1_RX_TOG
 
	`USBPHY_RX_TOG_REG
(
USBPHY1_BASE_PTR
)

	)

38715 
	#USBPHY1_CTRL
 
	`USBPHY_CTRL_REG
(
USBPHY1_BASE_PTR
)

	)

38716 
	#USBPHY1_CTRL_SET
 
	`USBPHY_CTRL_SET_REG
(
USBPHY1_BASE_PTR
)

	)

38717 
	#USBPHY1_CTRL_CLR
 
	`USBPHY_CTRL_CLR_REG
(
USBPHY1_BASE_PTR
)

	)

38718 
	#USBPHY1_CTRL_TOG
 
	`USBPHY_CTRL_TOG_REG
(
USBPHY1_BASE_PTR
)

	)

38719 
	#USBPHY1_STATUS
 
	`USBPHY_STATUS_REG
(
USBPHY1_BASE_PTR
)

	)

38720 
	#USBPHY1_DEBUG
 
	`USBPHY_DEBUG_REG
(
USBPHY1_BASE_PTR
)

	)

38721 
	#USBPHY1_DEBUG_SET
 
	`USBPHY_DEBUG_SET_REG
(
USBPHY1_BASE_PTR
)

	)

38722 
	#USBPHY1_DEBUG_CLR
 
	`USBPHY_DEBUG_CLR_REG
(
USBPHY1_BASE_PTR
)

	)

38723 
	#USBPHY1_DEBUG_TOG
 
	`USBPHY_DEBUG_TOG_REG
(
USBPHY1_BASE_PTR
)

	)

38724 
	#USBPHY1_DEBUG0_STATUS
 
	`USBPHY_DEBUG0_STATUS_REG
(
USBPHY1_BASE_PTR
)

	)

38725 
	#USBPHY1_DEBUG1
 
	`USBPHY_DEBUG1_REG
(
USBPHY1_BASE_PTR
)

	)

38726 
	#USBPHY1_DEBUG1_SET
 
	`USBPHY_DEBUG1_SET_REG
(
USBPHY1_BASE_PTR
)

	)

38727 
	#USBPHY1_DEBUG1_CLR
 
	`USBPHY_DEBUG1_CLR_REG
(
USBPHY1_BASE_PTR
)

	)

38728 
	#USBPHY1_DEBUG1_TOG
 
	`USBPHY_DEBUG1_TOG_REG
(
USBPHY1_BASE_PTR
)

	)

38729 
	#USBPHY1_VERSION
 
	`USBPHY_VERSION_REG
(
USBPHY1_BASE_PTR
)

	)

38731 
	#USBPHY2_PWD
 
	`USBPHY_PWD_REG
(
USBPHY2_BASE_PTR
)

	)

38732 
	#USBPHY2_PWD_SET
 
	`USBPHY_PWD_SET_REG
(
USBPHY2_BASE_PTR
)

	)

38733 
	#USBPHY2_PWD_CLR
 
	`USBPHY_PWD_CLR_REG
(
USBPHY2_BASE_PTR
)

	)

38734 
	#USBPHY2_PWD_TOG
 
	`USBPHY_PWD_TOG_REG
(
USBPHY2_BASE_PTR
)

	)

38735 
	#USBPHY2_TX
 
	`USBPHY_TX_REG
(
USBPHY2_BASE_PTR
)

	)

38736 
	#USBPHY2_TX_SET
 
	`USBPHY_TX_SET_REG
(
USBPHY2_BASE_PTR
)

	)

38737 
	#USBPHY2_TX_CLR
 
	`USBPHY_TX_CLR_REG
(
USBPHY2_BASE_PTR
)

	)

38738 
	#USBPHY2_TX_TOG
 
	`USBPHY_TX_TOG_REG
(
USBPHY2_BASE_PTR
)

	)

38739 
	#USBPHY2_RX
 
	`USBPHY_RX_REG
(
USBPHY2_BASE_PTR
)

	)

38740 
	#USBPHY2_RX_SET
 
	`USBPHY_RX_SET_REG
(
USBPHY2_BASE_PTR
)

	)

38741 
	#USBPHY2_RX_CLR
 
	`USBPHY_RX_CLR_REG
(
USBPHY2_BASE_PTR
)

	)

38742 
	#USBPHY2_RX_TOG
 
	`USBPHY_RX_TOG_REG
(
USBPHY2_BASE_PTR
)

	)

38743 
	#USBPHY2_CTRL
 
	`USBPHY_CTRL_REG
(
USBPHY2_BASE_PTR
)

	)

38744 
	#USBPHY2_CTRL_SET
 
	`USBPHY_CTRL_SET_REG
(
USBPHY2_BASE_PTR
)

	)

38745 
	#USBPHY2_CTRL_CLR
 
	`USBPHY_CTRL_CLR_REG
(
USBPHY2_BASE_PTR
)

	)

38746 
	#USBPHY2_CTRL_TOG
 
	`USBPHY_CTRL_TOG_REG
(
USBPHY2_BASE_PTR
)

	)

38747 
	#USBPHY2_STATUS
 
	`USBPHY_STATUS_REG
(
USBPHY2_BASE_PTR
)

	)

38748 
	#USBPHY2_DEBUG
 
	`USBPHY_DEBUG_REG
(
USBPHY2_BASE_PTR
)

	)

38749 
	#USBPHY2_DEBUG_SET
 
	`USBPHY_DEBUG_SET_REG
(
USBPHY2_BASE_PTR
)

	)

38750 
	#USBPHY2_DEBUG_CLR
 
	`USBPHY_DEBUG_CLR_REG
(
USBPHY2_BASE_PTR
)

	)

38751 
	#USBPHY2_DEBUG_TOG
 
	`USBPHY_DEBUG_TOG_REG
(
USBPHY2_BASE_PTR
)

	)

38752 
	#USBPHY2_DEBUG0_STATUS
 
	`USBPHY_DEBUG0_STATUS_REG
(
USBPHY2_BASE_PTR
)

	)

38753 
	#USBPHY2_DEBUG1
 
	`USBPHY_DEBUG1_REG
(
USBPHY2_BASE_PTR
)

	)

38754 
	#USBPHY2_DEBUG1_SET
 
	`USBPHY_DEBUG1_SET_REG
(
USBPHY2_BASE_PTR
)

	)

38755 
	#USBPHY2_DEBUG1_CLR
 
	`USBPHY_DEBUG1_CLR_REG
(
USBPHY2_BASE_PTR
)

	)

38756 
	#USBPHY2_DEBUG1_TOG
 
	`USBPHY_DEBUG1_TOG_REG
(
USBPHY2_BASE_PTR
)

	)

38757 
	#USBPHY2_VERSION
 
	`USBPHY_VERSION_REG
(
USBPHY2_BASE_PTR
)

	)

38778 
uöt8_t
 
	mRESERVED_0
[416];

38779 
__IO
 
uöt32_t
 
	mUSB1_VBUS_DETECT
;

38780 
__IO
 
uöt32_t
 
	mUSB1_VBUS_DETECT_SET
;

38781 
__IO
 
uöt32_t
 
	mUSB1_VBUS_DETECT_CLR
;

38782 
__IO
 
uöt32_t
 
	mUSB1_VBUS_DETECT_TOG
;

38783 
__IO
 
uöt32_t
 
	mUSB1_CHRG_DETECT
;

38784 
__IO
 
uöt32_t
 
	mUSB1_CHRG_DETECT_SET
;

38785 
__IO
 
uöt32_t
 
	mUSB1_CHRG_DETECT_CLR
;

38786 
__IO
 
uöt32_t
 
	mUSB1_CHRG_DETECT_TOG
;

38787 
__I
 
uöt32_t
 
	mUSB1_VBUS_DETECT_STAT
;

38788 
uöt8_t
 
	mRESERVED_1
[12];

38789 
__I
 
uöt32_t
 
	mUSB1_CHRG_DETECT_STAT
;

38790 
uöt8_t
 
	mRESERVED_2
[28];

38791 
__IO
 
uöt32_t
 
	mUSB1_MISC
;

38792 
__IO
 
uöt32_t
 
	mUSB1_MISC_SET
;

38793 
__IO
 
uöt32_t
 
	mUSB1_MISC_CLR
;

38794 
__IO
 
uöt32_t
 
	mUSB1_MISC_TOG
;

38795 
__IO
 
uöt32_t
 
	mUSB2_VBUS_DETECT
;

38796 
__IO
 
uöt32_t
 
	mUSB2_VBUS_DETECT_SET
;

38797 
__IO
 
uöt32_t
 
	mUSB2_VBUS_DETECT_CLR
;

38798 
__IO
 
uöt32_t
 
	mUSB2_VBUS_DETECT_TOG
;

38799 
__IO
 
uöt32_t
 
	mUSB2_CHRG_DETECT
;

38800 
__IO
 
uöt32_t
 
	mUSB2_CHRG_DETECT_SET
;

38801 
__IO
 
uöt32_t
 
	mUSB2_CHRG_DETECT_CLR
;

38802 
__IO
 
uöt32_t
 
	mUSB2_CHRG_DETECT_TOG
;

38803 
__I
 
uöt32_t
 
	mUSB2_VBUS_DETECT_STAT
;

38804 
uöt8_t
 
	mRESERVED_3
[12];

38805 
__I
 
uöt32_t
 
	mUSB2_CHRG_DETECT_STAT
;

38806 
uöt8_t
 
	mRESERVED_4
[28];

38807 
__IO
 
uöt32_t
 
	mUSB2_MISC
;

38808 
__IO
 
uöt32_t
 
	mUSB2_MISC_SET
;

38809 
__IO
 
uöt32_t
 
	mUSB2_MISC_CLR
;

38810 
__IO
 
uöt32_t
 
	mUSB2_MISC_TOG
;

38811 
__I
 
uöt32_t
 
	mDIGPROG
;

38812 } 
	tUSB_ANALOG_Ty≥
, *
	tUSB_ANALOG_MemM≠På
;

38824 
	#USB_ANALOG_USB1_VBUS_DETECT_REG
(
ba£
Ë((ba£)->
USB1_VBUS_DETECT
)

	)

38825 
	#USB_ANALOG_USB1_VBUS_DETECT_SET_REG
(
ba£
Ë((ba£)->
USB1_VBUS_DETECT_SET
)

	)

38826 
	#USB_ANALOG_USB1_VBUS_DETECT_CLR_REG
(
ba£
Ë((ba£)->
USB1_VBUS_DETECT_CLR
)

	)

38827 
	#USB_ANALOG_USB1_VBUS_DETECT_TOG_REG
(
ba£
Ë((ba£)->
USB1_VBUS_DETECT_TOG
)

	)

38828 
	#USB_ANALOG_USB1_CHRG_DETECT_REG
(
ba£
Ë((ba£)->
USB1_CHRG_DETECT
)

	)

38829 
	#USB_ANALOG_USB1_CHRG_DETECT_SET_REG
(
ba£
Ë((ba£)->
USB1_CHRG_DETECT_SET
)

	)

38830 
	#USB_ANALOG_USB1_CHRG_DETECT_CLR_REG
(
ba£
Ë((ba£)->
USB1_CHRG_DETECT_CLR
)

	)

38831 
	#USB_ANALOG_USB1_CHRG_DETECT_TOG_REG
(
ba£
Ë((ba£)->
USB1_CHRG_DETECT_TOG
)

	)

38832 
	#USB_ANALOG_USB1_VBUS_DETECT_STAT_REG
(
ba£
Ë((ba£)->
USB1_VBUS_DETECT_STAT
)

	)

38833 
	#USB_ANALOG_USB1_CHRG_DETECT_STAT_REG
(
ba£
Ë((ba£)->
USB1_CHRG_DETECT_STAT
)

	)

38834 
	#USB_ANALOG_USB1_MISC_REG
(
ba£
Ë((ba£)->
USB1_MISC
)

	)

38835 
	#USB_ANALOG_USB1_MISC_SET_REG
(
ba£
Ë((ba£)->
USB1_MISC_SET
)

	)

38836 
	#USB_ANALOG_USB1_MISC_CLR_REG
(
ba£
Ë((ba£)->
USB1_MISC_CLR
)

	)

38837 
	#USB_ANALOG_USB1_MISC_TOG_REG
(
ba£
Ë((ba£)->
USB1_MISC_TOG
)

	)

38838 
	#USB_ANALOG_USB2_VBUS_DETECT_REG
(
ba£
Ë((ba£)->
USB2_VBUS_DETECT
)

	)

38839 
	#USB_ANALOG_USB2_VBUS_DETECT_SET_REG
(
ba£
Ë((ba£)->
USB2_VBUS_DETECT_SET
)

	)

38840 
	#USB_ANALOG_USB2_VBUS_DETECT_CLR_REG
(
ba£
Ë((ba£)->
USB2_VBUS_DETECT_CLR
)

	)

38841 
	#USB_ANALOG_USB2_VBUS_DETECT_TOG_REG
(
ba£
Ë((ba£)->
USB2_VBUS_DETECT_TOG
)

	)

38842 
	#USB_ANALOG_USB2_CHRG_DETECT_REG
(
ba£
Ë((ba£)->
USB2_CHRG_DETECT
)

	)

38843 
	#USB_ANALOG_USB2_CHRG_DETECT_SET_REG
(
ba£
Ë((ba£)->
USB2_CHRG_DETECT_SET
)

	)

38844 
	#USB_ANALOG_USB2_CHRG_DETECT_CLR_REG
(
ba£
Ë((ba£)->
USB2_CHRG_DETECT_CLR
)

	)

38845 
	#USB_ANALOG_USB2_CHRG_DETECT_TOG_REG
(
ba£
Ë((ba£)->
USB2_CHRG_DETECT_TOG
)

	)

38846 
	#USB_ANALOG_USB2_VBUS_DETECT_STAT_REG
(
ba£
Ë((ba£)->
USB2_VBUS_DETECT_STAT
)

	)

38847 
	#USB_ANALOG_USB2_CHRG_DETECT_STAT_REG
(
ba£
Ë((ba£)->
USB2_CHRG_DETECT_STAT
)

	)

38848 
	#USB_ANALOG_USB2_MISC_REG
(
ba£
Ë((ba£)->
USB2_MISC
)

	)

38849 
	#USB_ANALOG_USB2_MISC_SET_REG
(
ba£
Ë((ba£)->
USB2_MISC_SET
)

	)

38850 
	#USB_ANALOG_USB2_MISC_CLR_REG
(
ba£
Ë((ba£)->
USB2_MISC_CLR
)

	)

38851 
	#USB_ANALOG_USB2_MISC_TOG_REG
(
ba£
Ë((ba£)->
USB2_MISC_TOG
)

	)

38852 
	#USB_ANALOG_DIGPROG_REG
(
ba£
Ë((ba£)->
DIGPROG
)

	)

38868 
	#USB_ANALOG_USB1_VBUS_DETECT_VBUSVALID_THRESH_MASK
 0x7u

	)

38869 
	#USB_ANALOG_USB1_VBUS_DETECT_VBUSVALID_THRESH_SHIFT
 0

	)

38870 
	#USB_ANALOG_USB1_VBUS_DETECT_VBUSVALID_THRESH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USB_ANALOG_USB1_VBUS_DETECT_VBUSVALID_THRESH_SHIFT
))&
USB_ANALOG_USB1_VBUS_DETECT_VBUSVALID_THRESH_MASK
)

	)

38871 
	#USB_ANALOG_USB1_VBUS_DETECT_VBUSVALID_PWRUP_CMPS_MASK
 0x100000u

	)

38872 
	#USB_ANALOG_USB1_VBUS_DETECT_VBUSVALID_PWRUP_CMPS_SHIFT
 20

	)

38873 
	#USB_ANALOG_USB1_VBUS_DETECT_DISCHARGE_VBUS_MASK
 0x4000000u

	)

38874 
	#USB_ANALOG_USB1_VBUS_DETECT_DISCHARGE_VBUS_SHIFT
 26

	)

38875 
	#USB_ANALOG_USB1_VBUS_DETECT_CHARGE_VBUS_MASK
 0x8000000u

	)

38876 
	#USB_ANALOG_USB1_VBUS_DETECT_CHARGE_VBUS_SHIFT
 27

	)

38878 
	#USB_ANALOG_USB1_VBUS_DETECT_SET_VBUSVALID_THRESH_MASK
 0x7u

	)

38879 
	#USB_ANALOG_USB1_VBUS_DETECT_SET_VBUSVALID_THRESH_SHIFT
 0

	)

38880 
	#USB_ANALOG_USB1_VBUS_DETECT_SET_VBUSVALID_THRESH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USB_ANALOG_USB1_VBUS_DETECT_SET_VBUSVALID_THRESH_SHIFT
))&
USB_ANALOG_USB1_VBUS_DETECT_SET_VBUSVALID_THRESH_MASK
)

	)

38881 
	#USB_ANALOG_USB1_VBUS_DETECT_SET_VBUSVALID_PWRUP_CMPS_MASK
 0x100000u

	)

38882 
	#USB_ANALOG_USB1_VBUS_DETECT_SET_VBUSVALID_PWRUP_CMPS_SHIFT
 20

	)

38883 
	#USB_ANALOG_USB1_VBUS_DETECT_SET_DISCHARGE_VBUS_MASK
 0x4000000u

	)

38884 
	#USB_ANALOG_USB1_VBUS_DETECT_SET_DISCHARGE_VBUS_SHIFT
 26

	)

38885 
	#USB_ANALOG_USB1_VBUS_DETECT_SET_CHARGE_VBUS_MASK
 0x8000000u

	)

38886 
	#USB_ANALOG_USB1_VBUS_DETECT_SET_CHARGE_VBUS_SHIFT
 27

	)

38888 
	#USB_ANALOG_USB1_VBUS_DETECT_CLR_VBUSVALID_THRESH_MASK
 0x7u

	)

38889 
	#USB_ANALOG_USB1_VBUS_DETECT_CLR_VBUSVALID_THRESH_SHIFT
 0

	)

38890 
	#USB_ANALOG_USB1_VBUS_DETECT_CLR_VBUSVALID_THRESH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USB_ANALOG_USB1_VBUS_DETECT_CLR_VBUSVALID_THRESH_SHIFT
))&
USB_ANALOG_USB1_VBUS_DETECT_CLR_VBUSVALID_THRESH_MASK
)

	)

38891 
	#USB_ANALOG_USB1_VBUS_DETECT_CLR_VBUSVALID_PWRUP_CMPS_MASK
 0x100000u

	)

38892 
	#USB_ANALOG_USB1_VBUS_DETECT_CLR_VBUSVALID_PWRUP_CMPS_SHIFT
 20

	)

38893 
	#USB_ANALOG_USB1_VBUS_DETECT_CLR_DISCHARGE_VBUS_MASK
 0x4000000u

	)

38894 
	#USB_ANALOG_USB1_VBUS_DETECT_CLR_DISCHARGE_VBUS_SHIFT
 26

	)

38895 
	#USB_ANALOG_USB1_VBUS_DETECT_CLR_CHARGE_VBUS_MASK
 0x8000000u

	)

38896 
	#USB_ANALOG_USB1_VBUS_DETECT_CLR_CHARGE_VBUS_SHIFT
 27

	)

38898 
	#USB_ANALOG_USB1_VBUS_DETECT_TOG_VBUSVALID_THRESH_MASK
 0x7u

	)

38899 
	#USB_ANALOG_USB1_VBUS_DETECT_TOG_VBUSVALID_THRESH_SHIFT
 0

	)

38900 
	#USB_ANALOG_USB1_VBUS_DETECT_TOG_VBUSVALID_THRESH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USB_ANALOG_USB1_VBUS_DETECT_TOG_VBUSVALID_THRESH_SHIFT
))&
USB_ANALOG_USB1_VBUS_DETECT_TOG_VBUSVALID_THRESH_MASK
)

	)

38901 
	#USB_ANALOG_USB1_VBUS_DETECT_TOG_VBUSVALID_PWRUP_CMPS_MASK
 0x100000u

	)

38902 
	#USB_ANALOG_USB1_VBUS_DETECT_TOG_VBUSVALID_PWRUP_CMPS_SHIFT
 20

	)

38903 
	#USB_ANALOG_USB1_VBUS_DETECT_TOG_DISCHARGE_VBUS_MASK
 0x4000000u

	)

38904 
	#USB_ANALOG_USB1_VBUS_DETECT_TOG_DISCHARGE_VBUS_SHIFT
 26

	)

38905 
	#USB_ANALOG_USB1_VBUS_DETECT_TOG_CHARGE_VBUS_MASK
 0x8000000u

	)

38906 
	#USB_ANALOG_USB1_VBUS_DETECT_TOG_CHARGE_VBUS_SHIFT
 27

	)

38908 
	#USB_ANALOG_USB1_CHRG_DETECT_CHK_CONTACT_MASK
 0x40000u

	)

38909 
	#USB_ANALOG_USB1_CHRG_DETECT_CHK_CONTACT_SHIFT
 18

	)

38910 
	#USB_ANALOG_USB1_CHRG_DETECT_CHK_CHRG_B_MASK
 0x80000u

	)

38911 
	#USB_ANALOG_USB1_CHRG_DETECT_CHK_CHRG_B_SHIFT
 19

	)

38912 
	#USB_ANALOG_USB1_CHRG_DETECT_EN_B_MASK
 0x100000u

	)

38913 
	#USB_ANALOG_USB1_CHRG_DETECT_EN_B_SHIFT
 20

	)

38915 
	#USB_ANALOG_USB1_CHRG_DETECT_SET_CHK_CONTACT_MASK
 0x40000u

	)

38916 
	#USB_ANALOG_USB1_CHRG_DETECT_SET_CHK_CONTACT_SHIFT
 18

	)

38917 
	#USB_ANALOG_USB1_CHRG_DETECT_SET_CHK_CHRG_B_MASK
 0x80000u

	)

38918 
	#USB_ANALOG_USB1_CHRG_DETECT_SET_CHK_CHRG_B_SHIFT
 19

	)

38919 
	#USB_ANALOG_USB1_CHRG_DETECT_SET_EN_B_MASK
 0x100000u

	)

38920 
	#USB_ANALOG_USB1_CHRG_DETECT_SET_EN_B_SHIFT
 20

	)

38922 
	#USB_ANALOG_USB1_CHRG_DETECT_CLR_CHK_CONTACT_MASK
 0x40000u

	)

38923 
	#USB_ANALOG_USB1_CHRG_DETECT_CLR_CHK_CONTACT_SHIFT
 18

	)

38924 
	#USB_ANALOG_USB1_CHRG_DETECT_CLR_CHK_CHRG_B_MASK
 0x80000u

	)

38925 
	#USB_ANALOG_USB1_CHRG_DETECT_CLR_CHK_CHRG_B_SHIFT
 19

	)

38926 
	#USB_ANALOG_USB1_CHRG_DETECT_CLR_EN_B_MASK
 0x100000u

	)

38927 
	#USB_ANALOG_USB1_CHRG_DETECT_CLR_EN_B_SHIFT
 20

	)

38929 
	#USB_ANALOG_USB1_CHRG_DETECT_TOG_CHK_CONTACT_MASK
 0x40000u

	)

38930 
	#USB_ANALOG_USB1_CHRG_DETECT_TOG_CHK_CONTACT_SHIFT
 18

	)

38931 
	#USB_ANALOG_USB1_CHRG_DETECT_TOG_CHK_CHRG_B_MASK
 0x80000u

	)

38932 
	#USB_ANALOG_USB1_CHRG_DETECT_TOG_CHK_CHRG_B_SHIFT
 19

	)

38933 
	#USB_ANALOG_USB1_CHRG_DETECT_TOG_EN_B_MASK
 0x100000u

	)

38934 
	#USB_ANALOG_USB1_CHRG_DETECT_TOG_EN_B_SHIFT
 20

	)

38936 
	#USB_ANALOG_USB1_VBUS_DETECT_STAT_SESSEND_MASK
 0x1u

	)

38937 
	#USB_ANALOG_USB1_VBUS_DETECT_STAT_SESSEND_SHIFT
 0

	)

38938 
	#USB_ANALOG_USB1_VBUS_DETECT_STAT_BVALID_MASK
 0x2u

	)

38939 
	#USB_ANALOG_USB1_VBUS_DETECT_STAT_BVALID_SHIFT
 1

	)

38940 
	#USB_ANALOG_USB1_VBUS_DETECT_STAT_AVALID_MASK
 0x4u

	)

38941 
	#USB_ANALOG_USB1_VBUS_DETECT_STAT_AVALID_SHIFT
 2

	)

38942 
	#USB_ANALOG_USB1_VBUS_DETECT_STAT_VBUS_VALID_MASK
 0x8u

	)

38943 
	#USB_ANALOG_USB1_VBUS_DETECT_STAT_VBUS_VALID_SHIFT
 3

	)

38945 
	#USB_ANALOG_USB1_CHRG_DETECT_STAT_PLUG_CONTACT_MASK
 0x1u

	)

38946 
	#USB_ANALOG_USB1_CHRG_DETECT_STAT_PLUG_CONTACT_SHIFT
 0

	)

38947 
	#USB_ANALOG_USB1_CHRG_DETECT_STAT_CHRG_DETECTED_MASK
 0x2u

	)

38948 
	#USB_ANALOG_USB1_CHRG_DETECT_STAT_CHRG_DETECTED_SHIFT
 1

	)

38949 
	#USB_ANALOG_USB1_CHRG_DETECT_STAT_DM_STATE_MASK
 0x4u

	)

38950 
	#USB_ANALOG_USB1_CHRG_DETECT_STAT_DM_STATE_SHIFT
 2

	)

38951 
	#USB_ANALOG_USB1_CHRG_DETECT_STAT_DP_STATE_MASK
 0x8u

	)

38952 
	#USB_ANALOG_USB1_CHRG_DETECT_STAT_DP_STATE_SHIFT
 3

	)

38954 
	#USB_ANALOG_USB1_MISC_HS_USE_EXTERNAL_R_MASK
 0x1u

	)

38955 
	#USB_ANALOG_USB1_MISC_HS_USE_EXTERNAL_R_SHIFT
 0

	)

38956 
	#USB_ANALOG_USB1_MISC_EN_DEGLITCH_MASK
 0x2u

	)

38957 
	#USB_ANALOG_USB1_MISC_EN_DEGLITCH_SHIFT
 1

	)

38958 
	#USB_ANALOG_USB1_MISC_EN_CLK_UTMI_MASK
 0x40000000u

	)

38959 
	#USB_ANALOG_USB1_MISC_EN_CLK_UTMI_SHIFT
 30

	)

38961 
	#USB_ANALOG_USB1_MISC_SET_HS_USE_EXTERNAL_R_MASK
 0x1u

	)

38962 
	#USB_ANALOG_USB1_MISC_SET_HS_USE_EXTERNAL_R_SHIFT
 0

	)

38963 
	#USB_ANALOG_USB1_MISC_SET_EN_DEGLITCH_MASK
 0x2u

	)

38964 
	#USB_ANALOG_USB1_MISC_SET_EN_DEGLITCH_SHIFT
 1

	)

38965 
	#USB_ANALOG_USB1_MISC_SET_EN_CLK_UTMI_MASK
 0x40000000u

	)

38966 
	#USB_ANALOG_USB1_MISC_SET_EN_CLK_UTMI_SHIFT
 30

	)

38968 
	#USB_ANALOG_USB1_MISC_CLR_HS_USE_EXTERNAL_R_MASK
 0x1u

	)

38969 
	#USB_ANALOG_USB1_MISC_CLR_HS_USE_EXTERNAL_R_SHIFT
 0

	)

38970 
	#USB_ANALOG_USB1_MISC_CLR_EN_DEGLITCH_MASK
 0x2u

	)

38971 
	#USB_ANALOG_USB1_MISC_CLR_EN_DEGLITCH_SHIFT
 1

	)

38972 
	#USB_ANALOG_USB1_MISC_CLR_EN_CLK_UTMI_MASK
 0x40000000u

	)

38973 
	#USB_ANALOG_USB1_MISC_CLR_EN_CLK_UTMI_SHIFT
 30

	)

38975 
	#USB_ANALOG_USB1_MISC_TOG_HS_USE_EXTERNAL_R_MASK
 0x1u

	)

38976 
	#USB_ANALOG_USB1_MISC_TOG_HS_USE_EXTERNAL_R_SHIFT
 0

	)

38977 
	#USB_ANALOG_USB1_MISC_TOG_EN_DEGLITCH_MASK
 0x2u

	)

38978 
	#USB_ANALOG_USB1_MISC_TOG_EN_DEGLITCH_SHIFT
 1

	)

38979 
	#USB_ANALOG_USB1_MISC_TOG_EN_CLK_UTMI_MASK
 0x40000000u

	)

38980 
	#USB_ANALOG_USB1_MISC_TOG_EN_CLK_UTMI_SHIFT
 30

	)

38982 
	#USB_ANALOG_USB2_VBUS_DETECT_VBUSVALID_THRESH_MASK
 0x7u

	)

38983 
	#USB_ANALOG_USB2_VBUS_DETECT_VBUSVALID_THRESH_SHIFT
 0

	)

38984 
	#USB_ANALOG_USB2_VBUS_DETECT_VBUSVALID_THRESH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USB_ANALOG_USB2_VBUS_DETECT_VBUSVALID_THRESH_SHIFT
))&
USB_ANALOG_USB2_VBUS_DETECT_VBUSVALID_THRESH_MASK
)

	)

38985 
	#USB_ANALOG_USB2_VBUS_DETECT_VBUSVALID_PWRUP_CMPS_MASK
 0x100000u

	)

38986 
	#USB_ANALOG_USB2_VBUS_DETECT_VBUSVALID_PWRUP_CMPS_SHIFT
 20

	)

38987 
	#USB_ANALOG_USB2_VBUS_DETECT_DISCHARGE_VBUS_MASK
 0x4000000u

	)

38988 
	#USB_ANALOG_USB2_VBUS_DETECT_DISCHARGE_VBUS_SHIFT
 26

	)

38989 
	#USB_ANALOG_USB2_VBUS_DETECT_CHARGE_VBUS_MASK
 0x8000000u

	)

38990 
	#USB_ANALOG_USB2_VBUS_DETECT_CHARGE_VBUS_SHIFT
 27

	)

38992 
	#USB_ANALOG_USB2_VBUS_DETECT_SET_VBUSVALID_THRESH_MASK
 0x7u

	)

38993 
	#USB_ANALOG_USB2_VBUS_DETECT_SET_VBUSVALID_THRESH_SHIFT
 0

	)

38994 
	#USB_ANALOG_USB2_VBUS_DETECT_SET_VBUSVALID_THRESH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USB_ANALOG_USB2_VBUS_DETECT_SET_VBUSVALID_THRESH_SHIFT
))&
USB_ANALOG_USB2_VBUS_DETECT_SET_VBUSVALID_THRESH_MASK
)

	)

38995 
	#USB_ANALOG_USB2_VBUS_DETECT_SET_VBUSVALID_PWRUP_CMPS_MASK
 0x100000u

	)

38996 
	#USB_ANALOG_USB2_VBUS_DETECT_SET_VBUSVALID_PWRUP_CMPS_SHIFT
 20

	)

38997 
	#USB_ANALOG_USB2_VBUS_DETECT_SET_DISCHARGE_VBUS_MASK
 0x4000000u

	)

38998 
	#USB_ANALOG_USB2_VBUS_DETECT_SET_DISCHARGE_VBUS_SHIFT
 26

	)

38999 
	#USB_ANALOG_USB2_VBUS_DETECT_SET_CHARGE_VBUS_MASK
 0x8000000u

	)

39000 
	#USB_ANALOG_USB2_VBUS_DETECT_SET_CHARGE_VBUS_SHIFT
 27

	)

39002 
	#USB_ANALOG_USB2_VBUS_DETECT_CLR_VBUSVALID_THRESH_MASK
 0x7u

	)

39003 
	#USB_ANALOG_USB2_VBUS_DETECT_CLR_VBUSVALID_THRESH_SHIFT
 0

	)

39004 
	#USB_ANALOG_USB2_VBUS_DETECT_CLR_VBUSVALID_THRESH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USB_ANALOG_USB2_VBUS_DETECT_CLR_VBUSVALID_THRESH_SHIFT
))&
USB_ANALOG_USB2_VBUS_DETECT_CLR_VBUSVALID_THRESH_MASK
)

	)

39005 
	#USB_ANALOG_USB2_VBUS_DETECT_CLR_VBUSVALID_PWRUP_CMPS_MASK
 0x100000u

	)

39006 
	#USB_ANALOG_USB2_VBUS_DETECT_CLR_VBUSVALID_PWRUP_CMPS_SHIFT
 20

	)

39007 
	#USB_ANALOG_USB2_VBUS_DETECT_CLR_DISCHARGE_VBUS_MASK
 0x4000000u

	)

39008 
	#USB_ANALOG_USB2_VBUS_DETECT_CLR_DISCHARGE_VBUS_SHIFT
 26

	)

39009 
	#USB_ANALOG_USB2_VBUS_DETECT_CLR_CHARGE_VBUS_MASK
 0x8000000u

	)

39010 
	#USB_ANALOG_USB2_VBUS_DETECT_CLR_CHARGE_VBUS_SHIFT
 27

	)

39012 
	#USB_ANALOG_USB2_VBUS_DETECT_TOG_VBUSVALID_THRESH_MASK
 0x7u

	)

39013 
	#USB_ANALOG_USB2_VBUS_DETECT_TOG_VBUSVALID_THRESH_SHIFT
 0

	)

39014 
	#USB_ANALOG_USB2_VBUS_DETECT_TOG_VBUSVALID_THRESH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USB_ANALOG_USB2_VBUS_DETECT_TOG_VBUSVALID_THRESH_SHIFT
))&
USB_ANALOG_USB2_VBUS_DETECT_TOG_VBUSVALID_THRESH_MASK
)

	)

39015 
	#USB_ANALOG_USB2_VBUS_DETECT_TOG_VBUSVALID_PWRUP_CMPS_MASK
 0x100000u

	)

39016 
	#USB_ANALOG_USB2_VBUS_DETECT_TOG_VBUSVALID_PWRUP_CMPS_SHIFT
 20

	)

39017 
	#USB_ANALOG_USB2_VBUS_DETECT_TOG_DISCHARGE_VBUS_MASK
 0x4000000u

	)

39018 
	#USB_ANALOG_USB2_VBUS_DETECT_TOG_DISCHARGE_VBUS_SHIFT
 26

	)

39019 
	#USB_ANALOG_USB2_VBUS_DETECT_TOG_CHARGE_VBUS_MASK
 0x8000000u

	)

39020 
	#USB_ANALOG_USB2_VBUS_DETECT_TOG_CHARGE_VBUS_SHIFT
 27

	)

39022 
	#USB_ANALOG_USB2_CHRG_DETECT_CHK_CONTACT_MASK
 0x40000u

	)

39023 
	#USB_ANALOG_USB2_CHRG_DETECT_CHK_CONTACT_SHIFT
 18

	)

39024 
	#USB_ANALOG_USB2_CHRG_DETECT_CHK_CHRG_B_MASK
 0x80000u

	)

39025 
	#USB_ANALOG_USB2_CHRG_DETECT_CHK_CHRG_B_SHIFT
 19

	)

39026 
	#USB_ANALOG_USB2_CHRG_DETECT_EN_B_MASK
 0x100000u

	)

39027 
	#USB_ANALOG_USB2_CHRG_DETECT_EN_B_SHIFT
 20

	)

39029 
	#USB_ANALOG_USB2_CHRG_DETECT_SET_CHK_CONTACT_MASK
 0x40000u

	)

39030 
	#USB_ANALOG_USB2_CHRG_DETECT_SET_CHK_CONTACT_SHIFT
 18

	)

39031 
	#USB_ANALOG_USB2_CHRG_DETECT_SET_CHK_CHRG_B_MASK
 0x80000u

	)

39032 
	#USB_ANALOG_USB2_CHRG_DETECT_SET_CHK_CHRG_B_SHIFT
 19

	)

39033 
	#USB_ANALOG_USB2_CHRG_DETECT_SET_EN_B_MASK
 0x100000u

	)

39034 
	#USB_ANALOG_USB2_CHRG_DETECT_SET_EN_B_SHIFT
 20

	)

39036 
	#USB_ANALOG_USB2_CHRG_DETECT_CLR_CHK_CONTACT_MASK
 0x40000u

	)

39037 
	#USB_ANALOG_USB2_CHRG_DETECT_CLR_CHK_CONTACT_SHIFT
 18

	)

39038 
	#USB_ANALOG_USB2_CHRG_DETECT_CLR_CHK_CHRG_B_MASK
 0x80000u

	)

39039 
	#USB_ANALOG_USB2_CHRG_DETECT_CLR_CHK_CHRG_B_SHIFT
 19

	)

39040 
	#USB_ANALOG_USB2_CHRG_DETECT_CLR_EN_B_MASK
 0x100000u

	)

39041 
	#USB_ANALOG_USB2_CHRG_DETECT_CLR_EN_B_SHIFT
 20

	)

39043 
	#USB_ANALOG_USB2_CHRG_DETECT_TOG_CHK_CONTACT_MASK
 0x40000u

	)

39044 
	#USB_ANALOG_USB2_CHRG_DETECT_TOG_CHK_CONTACT_SHIFT
 18

	)

39045 
	#USB_ANALOG_USB2_CHRG_DETECT_TOG_CHK_CHRG_B_MASK
 0x80000u

	)

39046 
	#USB_ANALOG_USB2_CHRG_DETECT_TOG_CHK_CHRG_B_SHIFT
 19

	)

39047 
	#USB_ANALOG_USB2_CHRG_DETECT_TOG_EN_B_MASK
 0x100000u

	)

39048 
	#USB_ANALOG_USB2_CHRG_DETECT_TOG_EN_B_SHIFT
 20

	)

39050 
	#USB_ANALOG_USB2_VBUS_DETECT_STAT_SESSEND_MASK
 0x1u

	)

39051 
	#USB_ANALOG_USB2_VBUS_DETECT_STAT_SESSEND_SHIFT
 0

	)

39052 
	#USB_ANALOG_USB2_VBUS_DETECT_STAT_BVALID_MASK
 0x2u

	)

39053 
	#USB_ANALOG_USB2_VBUS_DETECT_STAT_BVALID_SHIFT
 1

	)

39054 
	#USB_ANALOG_USB2_VBUS_DETECT_STAT_AVALID_MASK
 0x4u

	)

39055 
	#USB_ANALOG_USB2_VBUS_DETECT_STAT_AVALID_SHIFT
 2

	)

39056 
	#USB_ANALOG_USB2_VBUS_DETECT_STAT_VBUS_VALID_MASK
 0x8u

	)

39057 
	#USB_ANALOG_USB2_VBUS_DETECT_STAT_VBUS_VALID_SHIFT
 3

	)

39059 
	#USB_ANALOG_USB2_CHRG_DETECT_STAT_PLUG_CONTACT_MASK
 0x1u

	)

39060 
	#USB_ANALOG_USB2_CHRG_DETECT_STAT_PLUG_CONTACT_SHIFT
 0

	)

39061 
	#USB_ANALOG_USB2_CHRG_DETECT_STAT_CHRG_DETECTED_MASK
 0x2u

	)

39062 
	#USB_ANALOG_USB2_CHRG_DETECT_STAT_CHRG_DETECTED_SHIFT
 1

	)

39063 
	#USB_ANALOG_USB2_CHRG_DETECT_STAT_DM_STATE_MASK
 0x4u

	)

39064 
	#USB_ANALOG_USB2_CHRG_DETECT_STAT_DM_STATE_SHIFT
 2

	)

39065 
	#USB_ANALOG_USB2_CHRG_DETECT_STAT_DP_STATE_MASK
 0x8u

	)

39066 
	#USB_ANALOG_USB2_CHRG_DETECT_STAT_DP_STATE_SHIFT
 3

	)

39068 
	#USB_ANALOG_USB2_MISC_HS_USE_EXTERNAL_R_MASK
 0x1u

	)

39069 
	#USB_ANALOG_USB2_MISC_HS_USE_EXTERNAL_R_SHIFT
 0

	)

39070 
	#USB_ANALOG_USB2_MISC_EN_DEGLITCH_MASK
 0x2u

	)

39071 
	#USB_ANALOG_USB2_MISC_EN_DEGLITCH_SHIFT
 1

	)

39072 
	#USB_ANALOG_USB2_MISC_EN_CLK_UTMI_MASK
 0x40000000u

	)

39073 
	#USB_ANALOG_USB2_MISC_EN_CLK_UTMI_SHIFT
 30

	)

39075 
	#USB_ANALOG_USB2_MISC_SET_HS_USE_EXTERNAL_R_MASK
 0x1u

	)

39076 
	#USB_ANALOG_USB2_MISC_SET_HS_USE_EXTERNAL_R_SHIFT
 0

	)

39077 
	#USB_ANALOG_USB2_MISC_SET_EN_DEGLITCH_MASK
 0x2u

	)

39078 
	#USB_ANALOG_USB2_MISC_SET_EN_DEGLITCH_SHIFT
 1

	)

39079 
	#USB_ANALOG_USB2_MISC_SET_EN_CLK_UTMI_MASK
 0x40000000u

	)

39080 
	#USB_ANALOG_USB2_MISC_SET_EN_CLK_UTMI_SHIFT
 30

	)

39082 
	#USB_ANALOG_USB2_MISC_CLR_HS_USE_EXTERNAL_R_MASK
 0x1u

	)

39083 
	#USB_ANALOG_USB2_MISC_CLR_HS_USE_EXTERNAL_R_SHIFT
 0

	)

39084 
	#USB_ANALOG_USB2_MISC_CLR_EN_DEGLITCH_MASK
 0x2u

	)

39085 
	#USB_ANALOG_USB2_MISC_CLR_EN_DEGLITCH_SHIFT
 1

	)

39086 
	#USB_ANALOG_USB2_MISC_CLR_EN_CLK_UTMI_MASK
 0x40000000u

	)

39087 
	#USB_ANALOG_USB2_MISC_CLR_EN_CLK_UTMI_SHIFT
 30

	)

39089 
	#USB_ANALOG_USB2_MISC_TOG_HS_USE_EXTERNAL_R_MASK
 0x1u

	)

39090 
	#USB_ANALOG_USB2_MISC_TOG_HS_USE_EXTERNAL_R_SHIFT
 0

	)

39091 
	#USB_ANALOG_USB2_MISC_TOG_EN_DEGLITCH_MASK
 0x2u

	)

39092 
	#USB_ANALOG_USB2_MISC_TOG_EN_DEGLITCH_SHIFT
 1

	)

39093 
	#USB_ANALOG_USB2_MISC_TOG_EN_CLK_UTMI_MASK
 0x40000000u

	)

39094 
	#USB_ANALOG_USB2_MISC_TOG_EN_CLK_UTMI_SHIFT
 30

	)

39096 
	#USB_ANALOG_DIGPROG_MINOR_MASK
 0xFFu

	)

39097 
	#USB_ANALOG_DIGPROG_MINOR_SHIFT
 0

	)

39098 
	#USB_ANALOG_DIGPROG_MINOR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USB_ANALOG_DIGPROG_MINOR_SHIFT
))&
USB_ANALOG_DIGPROG_MINOR_MASK
)

	)

39099 
	#USB_ANALOG_DIGPROG_MAJOR_LOWER_MASK
 0xFF00u

	)

39100 
	#USB_ANALOG_DIGPROG_MAJOR_LOWER_SHIFT
 8

	)

39101 
	#USB_ANALOG_DIGPROG_MAJOR_LOWER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USB_ANALOG_DIGPROG_MAJOR_LOWER_SHIFT
))&
USB_ANALOG_DIGPROG_MAJOR_LOWER_MASK
)

	)

39102 
	#USB_ANALOG_DIGPROG_MAJOR_UPPER_MASK
 0xFF0000u

	)

39103 
	#USB_ANALOG_DIGPROG_MAJOR_UPPER_SHIFT
 16

	)

39104 
	#USB_ANALOG_DIGPROG_MAJOR_UPPER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
USB_ANALOG_DIGPROG_MAJOR_UPPER_SHIFT
))&
USB_ANALOG_DIGPROG_MAJOR_UPPER_MASK
)

	)

39112 
	#USB_ANALOG_BASE
 (0x420C8000u)

	)

39114 
	#USB_ANALOG
 ((
USB_ANALOG_Ty≥
 *)
USB_ANALOG_BASE
)

	)

39115 
	#USB_ANALOG_BASE_PTR
 (
USB_ANALOG
)

	)

39117 
	#USB_ANALOG_BASE_ADDRS
 { 
USB_ANALOG_BASE
 }

	)

39119 
	#USB_ANALOG_BASE_PTRS
 { 
USB_ANALOG
 }

	)

39132 
	#USB_ANALOG_USB1_VBUS_DETECT
 
	`USB_ANALOG_USB1_VBUS_DETECT_REG
(
USB_ANALOG_BASE_PTR
)

	)

39133 
	#USB_ANALOG_USB1_VBUS_DETECT_SET
 
	`USB_ANALOG_USB1_VBUS_DETECT_SET_REG
(
USB_ANALOG_BASE_PTR
)

	)

39134 
	#USB_ANALOG_USB1_VBUS_DETECT_CLR
 
	`USB_ANALOG_USB1_VBUS_DETECT_CLR_REG
(
USB_ANALOG_BASE_PTR
)

	)

39135 
	#USB_ANALOG_USB1_VBUS_DETECT_TOG
 
	`USB_ANALOG_USB1_VBUS_DETECT_TOG_REG
(
USB_ANALOG_BASE_PTR
)

	)

39136 
	#USB_ANALOG_USB1_CHRG_DETECT
 
	`USB_ANALOG_USB1_CHRG_DETECT_REG
(
USB_ANALOG_BASE_PTR
)

	)

39137 
	#USB_ANALOG_USB1_CHRG_DETECT_SET
 
	`USB_ANALOG_USB1_CHRG_DETECT_SET_REG
(
USB_ANALOG_BASE_PTR
)

	)

39138 
	#USB_ANALOG_USB1_CHRG_DETECT_CLR
 
	`USB_ANALOG_USB1_CHRG_DETECT_CLR_REG
(
USB_ANALOG_BASE_PTR
)

	)

39139 
	#USB_ANALOG_USB1_CHRG_DETECT_TOG
 
	`USB_ANALOG_USB1_CHRG_DETECT_TOG_REG
(
USB_ANALOG_BASE_PTR
)

	)

39140 
	#USB_ANALOG_USB1_VBUS_DETECT_STAT
 
	`USB_ANALOG_USB1_VBUS_DETECT_STAT_REG
(
USB_ANALOG_BASE_PTR
)

	)

39141 
	#USB_ANALOG_USB1_CHRG_DETECT_STAT
 
	`USB_ANALOG_USB1_CHRG_DETECT_STAT_REG
(
USB_ANALOG_BASE_PTR
)

	)

39142 
	#USB_ANALOG_USB1_MISC
 
	`USB_ANALOG_USB1_MISC_REG
(
USB_ANALOG_BASE_PTR
)

	)

39143 
	#USB_ANALOG_USB1_MISC_SET
 
	`USB_ANALOG_USB1_MISC_SET_REG
(
USB_ANALOG_BASE_PTR
)

	)

39144 
	#USB_ANALOG_USB1_MISC_CLR
 
	`USB_ANALOG_USB1_MISC_CLR_REG
(
USB_ANALOG_BASE_PTR
)

	)

39145 
	#USB_ANALOG_USB1_MISC_TOG
 
	`USB_ANALOG_USB1_MISC_TOG_REG
(
USB_ANALOG_BASE_PTR
)

	)

39146 
	#USB_ANALOG_USB2_VBUS_DETECT
 
	`USB_ANALOG_USB2_VBUS_DETECT_REG
(
USB_ANALOG_BASE_PTR
)

	)

39147 
	#USB_ANALOG_USB2_VBUS_DETECT_SET
 
	`USB_ANALOG_USB2_VBUS_DETECT_SET_REG
(
USB_ANALOG_BASE_PTR
)

	)

39148 
	#USB_ANALOG_USB2_VBUS_DETECT_CLR
 
	`USB_ANALOG_USB2_VBUS_DETECT_CLR_REG
(
USB_ANALOG_BASE_PTR
)

	)

39149 
	#USB_ANALOG_USB2_VBUS_DETECT_TOG
 
	`USB_ANALOG_USB2_VBUS_DETECT_TOG_REG
(
USB_ANALOG_BASE_PTR
)

	)

39150 
	#USB_ANALOG_USB2_CHRG_DETECT
 
	`USB_ANALOG_USB2_CHRG_DETECT_REG
(
USB_ANALOG_BASE_PTR
)

	)

39151 
	#USB_ANALOG_USB2_CHRG_DETECT_SET
 
	`USB_ANALOG_USB2_CHRG_DETECT_SET_REG
(
USB_ANALOG_BASE_PTR
)

	)

39152 
	#USB_ANALOG_USB2_CHRG_DETECT_CLR
 
	`USB_ANALOG_USB2_CHRG_DETECT_CLR_REG
(
USB_ANALOG_BASE_PTR
)

	)

39153 
	#USB_ANALOG_USB2_CHRG_DETECT_TOG
 
	`USB_ANALOG_USB2_CHRG_DETECT_TOG_REG
(
USB_ANALOG_BASE_PTR
)

	)

39154 
	#USB_ANALOG_USB2_VBUS_DETECT_STAT
 
	`USB_ANALOG_USB2_VBUS_DETECT_STAT_REG
(
USB_ANALOG_BASE_PTR
)

	)

39155 
	#USB_ANALOG_USB2_CHRG_DETECT_STAT
 
	`USB_ANALOG_USB2_CHRG_DETECT_STAT_REG
(
USB_ANALOG_BASE_PTR
)

	)

39156 
	#USB_ANALOG_USB2_MISC
 
	`USB_ANALOG_USB2_MISC_REG
(
USB_ANALOG_BASE_PTR
)

	)

39157 
	#USB_ANALOG_USB2_MISC_SET
 
	`USB_ANALOG_USB2_MISC_SET_REG
(
USB_ANALOG_BASE_PTR
)

	)

39158 
	#USB_ANALOG_USB2_MISC_CLR
 
	`USB_ANALOG_USB2_MISC_CLR_REG
(
USB_ANALOG_BASE_PTR
)

	)

39159 
	#USB_ANALOG_USB2_MISC_TOG
 
	`USB_ANALOG_USB2_MISC_TOG_REG
(
USB_ANALOG_BASE_PTR
)

	)

39160 
	#USB_ANALOG_DIGPROG
 
	`USB_ANALOG_DIGPROG_REG
(
USB_ANALOG_BASE_PTR
)

	)

39181 
__IO
 
uöt32_t
 
	mCFC1
;

39182 
uöt8_t
 
	mRESERVED_0
[32];

39183 
__IO
 
uöt32_t
 
	mBRSTGT
;

39184 
uöt8_t
 
	mRESERVED_1
[24];

39185 
__IO
 
uöt32_t
 
	mHZPOS
;

39186 
__IO
 
uöt32_t
 
	mVRTPOS
;

39187 
uöt8_t
 
	mRESERVED_2
[12];

39188 
__IO
 
uöt32_t
 
	mHVSHFT
;

39189 
__IO
 
uöt32_t
 
	mHSIGS
;

39190 
__IO
 
uöt32_t
 
	mHSIGE
;

39191 
__IO
 
uöt32_t
 
	mVSCON1
;

39192 
__IO
 
uöt32_t
 
	mVSCON2
;

39193 
uöt8_t
 
	mRESERVED_3
[4];

39194 
__IO
 
uöt32_t
 
	mYCDEL
;

39195 
__IO
 
uöt32_t
 
	mAFTCLP
;

39196 
uöt8_t
 
	mRESERVED_4
[4];

39197 
__IO
 
uöt32_t
 
	mDCOFF
;

39198 
uöt8_t
 
	mRESERVED_5
[8];

39199 
__IO
 
uöt32_t
 
	mCSID
;

39200 
__IO
 
uöt32_t
 
	mCBGN
;

39201 
__IO
 
uöt32_t
 
	mCRGN
;

39202 
__IO
 
uöt32_t
 
	mCNTR
;

39203 
__IO
 
uöt32_t
 
	mBRT
;

39204 
__IO
 
uöt32_t
 
	mHUE
;

39205 
__IO
 
uöt32_t
 
	mCHBTH
;

39206 
uöt8_t
 
	mRESERVED_6
[4];

39207 
__IO
 
uöt32_t
 
	mSHPIMP
;

39208 
__IO
 
uöt32_t
 
	mCHPLLIM
;

39209 
__I
 
uöt32_t
 
	mVIDMOD
;

39210 
__I
 
uöt32_t
 
	mVIDSTS
;

39211 
__I
 
uöt32_t
 
	mNOISE
;

39212 
__IO
 
uöt32_t
 
	mSTDDBG
;

39213 
__IO
 
uöt32_t
 
	mMANOVR
;

39214 
uöt8_t
 
	mRESERVED_7
[8];

39215 
__IO
 
uöt32_t
 
	mVSSGTH
;

39216 
uöt8_t
 
	mRESERVED_8
[4];

39217 
__IO
 
uöt32_t
 
	mDBGFBH
;

39218 
__IO
 
uöt32_t
 
	mDBGFBL
;

39219 
__IO
 
uöt32_t
 
	mHACTS
;

39220 
__IO
 
uöt32_t
 
	mHACTE
;

39221 
__IO
 
uöt32_t
 
	mVACTS
;

39222 
__IO
 
uöt32_t
 
	mVACTE
;

39223 
uöt8_t
 
	mRESERVED_9
[4];

39224 
__IO
 
uöt32_t
 
	mHSTIP
;

39225 
uöt8_t
 
	mRESERVED_10
[8];

39226 
__IO
 
uöt32_t
 
	mBLSCRCR
;

39227 
__IO
 
uöt32_t
 
	mBLSCRCB
;

39228 
uöt8_t
 
	mRESERVED_11
[4];

39229 
__IO
 
uöt32_t
 
	mLMAGC2
;

39230 
uöt8_t
 
	mRESERVED_12
[4];

39231 
__IO
 
uöt32_t
 
	mCHAGC2
;

39232 
uöt8_t
 
	mRESERVED_13
[4];

39233 
__IO
 
uöt32_t
 
	mMINTH
;

39234 
uöt8_t
 
	mRESERVED_14
[4];

39235 
__I
 
uöt32_t
 
	mVFRQOH
;

39236 
__I
 
uöt32_t
 
	mVFRQOL
;

39237 
uöt8_t
 
	mRESERVED_15
[508];

39238 
__IO
 
uöt32_t
 
	mASYNCLKFREQ1
;

39239 
__IO
 
uöt32_t
 
	mASYNCLKFREQ2
;

39240 
__IO
 
uöt32_t
 
	mASYNCLKFREQ3
;

39241 
__IO
 
uöt32_t
 
	mASYNCLKFREQ4
;

39242 } 
	tVDEC_Ty≥
, *
	tVDEC_MemM≠På
;

39254 
	#VDEC_CFC1_REG
(
ba£
Ë((ba£)->
CFC1
)

	)

39255 
	#VDEC_BRSTGT_REG
(
ba£
Ë((ba£)->
BRSTGT
)

	)

39256 
	#VDEC_HZPOS_REG
(
ba£
Ë((ba£)->
HZPOS
)

	)

39257 
	#VDEC_VRTPOS_REG
(
ba£
Ë((ba£)->
VRTPOS
)

	)

39258 
	#VDEC_HVSHFT_REG
(
ba£
Ë((ba£)->
HVSHFT
)

	)

39259 
	#VDEC_HSIGS_REG
(
ba£
Ë((ba£)->
HSIGS
)

	)

39260 
	#VDEC_HSIGE_REG
(
ba£
Ë((ba£)->
HSIGE
)

	)

39261 
	#VDEC_VSCON1_REG
(
ba£
Ë((ba£)->
VSCON1
)

	)

39262 
	#VDEC_VSCON2_REG
(
ba£
Ë((ba£)->
VSCON2
)

	)

39263 
	#VDEC_YCDEL_REG
(
ba£
Ë((ba£)->
YCDEL
)

	)

39264 
	#VDEC_AFTCLP_REG
(
ba£
Ë((ba£)->
AFTCLP
)

	)

39265 
	#VDEC_DCOFF_REG
(
ba£
Ë((ba£)->
DCOFF
)

	)

39266 
	#VDEC_CSID_REG
(
ba£
Ë((ba£)->
CSID
)

	)

39267 
	#VDEC_CBGN_REG
(
ba£
Ë((ba£)->
CBGN
)

	)

39268 
	#VDEC_CRGN_REG
(
ba£
Ë((ba£)->
CRGN
)

	)

39269 
	#VDEC_CNTR_REG
(
ba£
Ë((ba£)->
CNTR
)

	)

39270 
	#VDEC_BRT_REG
(
ba£
Ë((ba£)->
BRT
)

	)

39271 
	#VDEC_HUE_REG
(
ba£
Ë((ba£)->
HUE
)

	)

39272 
	#VDEC_CHBTH_REG
(
ba£
Ë((ba£)->
CHBTH
)

	)

39273 
	#VDEC_SHPIMP_REG
(
ba£
Ë((ba£)->
SHPIMP
)

	)

39274 
	#VDEC_CHPLLIM_REG
(
ba£
Ë((ba£)->
CHPLLIM
)

	)

39275 
	#VDEC_VIDMOD_REG
(
ba£
Ë((ba£)->
VIDMOD
)

	)

39276 
	#VDEC_VIDSTS_REG
(
ba£
Ë((ba£)->
VIDSTS
)

	)

39277 
	#VDEC_NOISE_REG
(
ba£
Ë((ba£)->
NOISE
)

	)

39278 
	#VDEC_STDDBG_REG
(
ba£
Ë((ba£)->
STDDBG
)

	)

39279 
	#VDEC_MANOVR_REG
(
ba£
Ë((ba£)->
MANOVR
)

	)

39280 
	#VDEC_VSSGTH_REG
(
ba£
Ë((ba£)->
VSSGTH
)

	)

39281 
	#VDEC_DBGFBH_REG
(
ba£
Ë((ba£)->
DBGFBH
)

	)

39282 
	#VDEC_DBGFBL_REG
(
ba£
Ë((ba£)->
DBGFBL
)

	)

39283 
	#VDEC_HACTS_REG
(
ba£
Ë((ba£)->
HACTS
)

	)

39284 
	#VDEC_HACTE_REG
(
ba£
Ë((ba£)->
HACTE
)

	)

39285 
	#VDEC_VACTS_REG
(
ba£
Ë((ba£)->
VACTS
)

	)

39286 
	#VDEC_VACTE_REG
(
ba£
Ë((ba£)->
VACTE
)

	)

39287 
	#VDEC_HSTIP_REG
(
ba£
Ë((ba£)->
HSTIP
)

	)

39288 
	#VDEC_BLSCRCR_REG
(
ba£
Ë((ba£)->
BLSCRCR
)

	)

39289 
	#VDEC_BLSCRCB_REG
(
ba£
Ë((ba£)->
BLSCRCB
)

	)

39290 
	#VDEC_LMAGC2_REG
(
ba£
Ë((ba£)->
LMAGC2
)

	)

39291 
	#VDEC_CHAGC2_REG
(
ba£
Ë((ba£)->
CHAGC2
)

	)

39292 
	#VDEC_MINTH_REG
(
ba£
Ë((ba£)->
MINTH
)

	)

39293 
	#VDEC_VFRQOH_REG
(
ba£
Ë((ba£)->
VFRQOH
)

	)

39294 
	#VDEC_VFRQOL_REG
(
ba£
Ë((ba£)->
VFRQOL
)

	)

39295 
	#VDEC_ASYNCLKFREQ1_REG
(
ba£
Ë((ba£)->
ASYNCLKFREQ1
)

	)

39296 
	#VDEC_ASYNCLKFREQ2_REG
(
ba£
Ë((ba£)->
ASYNCLKFREQ2
)

	)

39297 
	#VDEC_ASYNCLKFREQ3_REG
(
ba£
Ë((ba£)->
ASYNCLKFREQ3
)

	)

39298 
	#VDEC_ASYNCLKFREQ4_REG
(
ba£
Ë((ba£)->
ASYNCLKFREQ4
)

	)

39314 
	#VDEC_CFC1_rc_combmode_ovîride_MASK
 0xFu

	)

39315 
	#VDEC_CFC1_rc_combmode_ovîride_SHIFT
 0

	)

39316 
	#VDEC_CFC1_rc_combmode_ovîride
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_CFC1_rc_combmode_ovîride_SHIFT
))&
VDEC_CFC1_rc_combmode_ovîride_MASK
)

	)

39317 
	#VDEC_CFC1_rc_debugout_MASK
 0xF0u

	)

39318 
	#VDEC_CFC1_rc_debugout_SHIFT
 4

	)

39319 
	#VDEC_CFC1_rc_debugout
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_CFC1_rc_debugout_SHIFT
))&
VDEC_CFC1_rc_debugout_MASK
)

	)

39321 
	#VDEC_BRSTGT_rc_cbur°°¨t_MASK
 0xFFu

	)

39322 
	#VDEC_BRSTGT_rc_cbur°°¨t_SHIFT
 0

	)

39323 
	#VDEC_BRSTGT_rc_cbur°°¨t
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_BRSTGT_rc_cbur°°¨t_SHIFT
))&
VDEC_BRSTGT_rc_cbur°°¨t_MASK
)

	)

39325 
	#VDEC_HZPOS_ro_h¥amp_cmp_MASK
 0xFFu

	)

39326 
	#VDEC_HZPOS_ro_h¥amp_cmp_SHIFT
 0

	)

39327 
	#VDEC_HZPOS_ro_h¥amp_cmp
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_HZPOS_ro_h¥amp_cmp_SHIFT
))&
VDEC_HZPOS_ro_h¥amp_cmp_MASK
)

	)

39329 
	#VDEC_VRTPOS_ro_vlöe_cmp_MASK
 0xFFu

	)

39330 
	#VDEC_VRTPOS_ro_vlöe_cmp_SHIFT
 0

	)

39331 
	#VDEC_VRTPOS_ro_vlöe_cmp
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_VRTPOS_ro_vlöe_cmp_SHIFT
))&
VDEC_VRTPOS_ro_vlöe_cmp_MASK
)

	)

39333 
	#VDEC_HVSHFT_ro_hzîo_£l_MASK
 0x1u

	)

39334 
	#VDEC_HVSHFT_ro_hzîo_£l_SHIFT
 0

	)

39335 
	#VDEC_HVSHFT_ro_övfõld_MASK
 0x2u

	)

39336 
	#VDEC_HVSHFT_ro_övfõld_SHIFT
 1

	)

39337 
	#VDEC_HVSHFT_ro_vzîo_£l_MASK
 0x10u

	)

39338 
	#VDEC_HVSHFT_ro_vzîo_£l_SHIFT
 4

	)

39339 
	#VDEC_HVSHFT_ro_u£a˘ive_MASK
 0x20u

	)

39340 
	#VDEC_HVSHFT_ro_u£a˘ive_SHIFT
 5

	)

39341 
	#VDEC_HVSHFT_™tülüs_dis_MASK
 0x40u

	)

39342 
	#VDEC_HVSHFT_™tülüs_dis_SHIFT
 6

	)

39344 
	#VDEC_HSIGS_rv_ign‹e°¨t_MASK
 0xFFu

	)

39345 
	#VDEC_HSIGS_rv_ign‹e°¨t_SHIFT
 0

	)

39346 
	#VDEC_HSIGS_rv_ign‹e°¨t
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_HSIGS_rv_ign‹e°¨t_SHIFT
))&
VDEC_HSIGS_rv_ign‹e°¨t_MASK
)

	)

39348 
	#VDEC_HSIGE_rv_ign‹ìnd_MASK
 0xFFu

	)

39349 
	#VDEC_HSIGE_rv_ign‹ìnd_SHIFT
 0

	)

39350 
	#VDEC_HSIGE_rv_ign‹ìnd
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_HSIGE_rv_ign‹ìnd_SHIFT
))&
VDEC_HSIGE_rv_ign‹ìnd_MASK
)

	)

39352 
	#VDEC_VSCON1_rh_vdë_dbg_MASK
 0x7u

	)

39353 
	#VDEC_VSCON1_rh_vdë_dbg_SHIFT
 0

	)

39354 
	#VDEC_VSCON1_rh_vdë_dbg
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_VSCON1_rh_vdë_dbg_SHIFT
))&
VDEC_VSCON1_rh_vdë_dbg_MASK
)

	)

39355 
	#VDEC_VSCON1_rh_robu°625dë_MASK
 0x8u

	)

39356 
	#VDEC_VSCON1_rh_robu°625dë_SHIFT
 3

	)

39357 
	#VDEC_VSCON1_rh_dis_vsyncdëe˘_MASK
 0x10u

	)

39358 
	#VDEC_VSCON1_rh_dis_vsyncdëe˘_SHIFT
 4

	)

39359 
	#VDEC_VSCON1_rh_vsynchÆfmode_MASK
 0x20u

	)

39360 
	#VDEC_VSCON1_rh_vsynchÆfmode_SHIFT
 5

	)

39361 
	#VDEC_VSCON1_rh_modadd_dis_MASK
 0x40u

	)

39362 
	#VDEC_VSCON1_rh_modadd_dis_SHIFT
 6

	)

39363 
	#VDEC_VSCON1_rh_8‹16_MASK
 0x80u

	)

39364 
	#VDEC_VSCON1_rh_8‹16_SHIFT
 7

	)

39366 
	#VDEC_VSCON2_rh_v¸_pha£thr_MASK
 0x3u

	)

39367 
	#VDEC_VSCON2_rh_v¸_pha£thr_SHIFT
 0

	)

39368 
	#VDEC_VSCON2_rh_v¸_pha£thr
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_VSCON2_rh_v¸_pha£thr_SHIFT
))&
VDEC_VSCON2_rh_v¸_pha£thr_MASK
)

	)

39369 
	#VDEC_VSCON2_rh_v¸_f‹˚_dis_MASK
 0xCu

	)

39370 
	#VDEC_VSCON2_rh_v¸_f‹˚_dis_SHIFT
 2

	)

39371 
	#VDEC_VSCON2_rh_v¸_f‹˚_dis
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_VSCON2_rh_v¸_f‹˚_dis_SHIFT
))&
VDEC_VSCON2_rh_v¸_f‹˚_dis_MASK
)

	)

39372 
	#VDEC_VSCON2_rh_hsw_c‹ög_MASK
 0x30u

	)

39373 
	#VDEC_VSCON2_rh_hsw_c‹ög_SHIFT
 4

	)

39374 
	#VDEC_VSCON2_rh_hsw_c‹ög
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_VSCON2_rh_hsw_c‹ög_SHIFT
))&
VDEC_VSCON2_rh_hsw_c‹ög_MASK
)

	)

39375 
	#VDEC_VSCON2_rh_smoŸh_hsw_MASK
 0x40u

	)

39376 
	#VDEC_VSCON2_rh_smoŸh_hsw_SHIFT
 6

	)

39377 
	#VDEC_VSCON2_rh_dißbÀ_hsw_MASK
 0x80u

	)

39378 
	#VDEC_VSCON2_rh_dißbÀ_hsw_SHIFT
 7

	)

39380 
	#VDEC_YCDEL_rd_n›Æave_MASK
 0x1u

	)

39381 
	#VDEC_YCDEL_rd_n›Æave_SHIFT
 0

	)

39382 
	#VDEC_YCDEL_rd_«ºow_MASK
 0x2u

	)

39383 
	#VDEC_YCDEL_rd_«ºow_SHIFT
 1

	)

39384 
	#VDEC_YCDEL_rd_wide_MASK
 0x4u

	)

39385 
	#VDEC_YCDEL_rd_wide_SHIFT
 2

	)

39386 
	#VDEC_YCDEL_rd_lumadñ_MASK
 0xF0u

	)

39387 
	#VDEC_YCDEL_rd_lumadñ_SHIFT
 4

	)

39388 
	#VDEC_YCDEL_rd_lumadñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_YCDEL_rd_lumadñ_SHIFT
))&
VDEC_YCDEL_rd_lumadñ_MASK
)

	)

39390 
	#VDEC_AFTCLP_rh_sh‹t‰ame_MASK
 0x1u

	)

39391 
	#VDEC_AFTCLP_rh_sh‹t‰ame_SHIFT
 0

	)

39392 
	#VDEC_AFTCLP_æ_disoff£t_MASK
 0x2u

	)

39393 
	#VDEC_AFTCLP_æ_disoff£t_SHIFT
 1

	)

39394 
	#VDEC_AFTCLP_æ_ª£toff£t_MASK
 0x4u

	)

39395 
	#VDEC_AFTCLP_æ_ª£toff£t_SHIFT
 2

	)

39396 
	#VDEC_AFTCLP_rc_a·î˛amp_upd©e_í_MASK
 0x10u

	)

39397 
	#VDEC_AFTCLP_rc_a·î˛amp_upd©e_í_SHIFT
 4

	)

39398 
	#VDEC_AFTCLP_rc_midfõld_dis_MASK
 0x20u

	)

39399 
	#VDEC_AFTCLP_rc_midfõld_dis_SHIFT
 5

	)

39400 
	#VDEC_AFTCLP_rc_aoutﬂ·î˛amp_dis_MASK
 0x40u

	)

39401 
	#VDEC_AFTCLP_rc_aoutﬂ·î˛amp_dis_SHIFT
 6

	)

39403 
	#VDEC_DCOFF_æ_dcoff£tI_MASK
 0x3u

	)

39404 
	#VDEC_DCOFF_æ_dcoff£tI_SHIFT
 0

	)

39405 
	#VDEC_DCOFF_æ_dcoff£tI
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_DCOFF_æ_dcoff£tI_SHIFT
))&
VDEC_DCOFF_æ_dcoff£tI_MASK
)

	)

39406 
	#VDEC_DCOFF_æ_löemósuª_dis_MASK
 0x8u

	)

39407 
	#VDEC_DCOFF_æ_löemósuª_dis_SHIFT
 3

	)

39408 
	#VDEC_DCOFF_æ_dcoff£tP_MASK
 0x70u

	)

39409 
	#VDEC_DCOFF_æ_dcoff£tP_SHIFT
 4

	)

39410 
	#VDEC_DCOFF_æ_dcoff£tP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_DCOFF_æ_dcoff£tP_SHIFT
))&
VDEC_DCOFF_æ_dcoff£tP_MASK
)

	)

39412 
	#VDEC_CSID_rd_sw≠¸cb_MASK
 0x1u

	)

39413 
	#VDEC_CSID_rd_sw≠¸cb_SHIFT
 0

	)

39414 
	#VDEC_CSID_rd_öv¸_MASK
 0x2u

	)

39415 
	#VDEC_CSID_rd_öv¸_SHIFT
 1

	)

39416 
	#VDEC_CSID_rd_övcb_MASK
 0x4u

	)

39417 
	#VDEC_CSID_rd_övcb_SHIFT
 2

	)

39418 
	#VDEC_CSID_rd_n›Æhue_MASK
 0x8u

	)

39419 
	#VDEC_CSID_rd_n›Æhue_SHIFT
 3

	)

39420 
	#VDEC_CSID_rd_by∑sshûbît_MASK
 0x80u

	)

39421 
	#VDEC_CSID_rd_by∑sshûbît_SHIFT
 7

	)

39423 
	#VDEC_CBGN_rd_cbgaö_MASK
 0xFFu

	)

39424 
	#VDEC_CBGN_rd_cbgaö_SHIFT
 0

	)

39425 
	#VDEC_CBGN_rd_cbgaö
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_CBGN_rd_cbgaö_SHIFT
))&
VDEC_CBGN_rd_cbgaö_MASK
)

	)

39427 
	#VDEC_CRGN_rd_¸gaö_MASK
 0xFFu

	)

39428 
	#VDEC_CRGN_rd_¸gaö_SHIFT
 0

	)

39429 
	#VDEC_CRGN_rd_¸gaö
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_CRGN_rd_¸gaö_SHIFT
))&
VDEC_CRGN_rd_¸gaö_MASK
)

	)

39431 
	#VDEC_CNTR_rd_lumagaö_MASK
 0xFFu

	)

39432 
	#VDEC_CNTR_rd_lumagaö_SHIFT
 0

	)

39433 
	#VDEC_CNTR_rd_lumagaö
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_CNTR_rd_lumagaö_SHIFT
))&
VDEC_CNTR_rd_lumagaö_MASK
)

	)

39435 
	#VDEC_BRT_rc_bœckÀvñ_MASK
 0xFFu

	)

39436 
	#VDEC_BRT_rc_bœckÀvñ_SHIFT
 0

	)

39437 
	#VDEC_BRT_rc_bœckÀvñ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_BRT_rc_bœckÀvñ_SHIFT
))&
VDEC_BRT_rc_bœckÀvñ_MASK
)

	)

39439 
	#VDEC_HUE_rd_ch_thªsh_MASK
 0xFFu

	)

39440 
	#VDEC_HUE_rd_ch_thªsh_SHIFT
 0

	)

39441 
	#VDEC_HUE_rd_ch_thªsh
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_HUE_rd_ch_thªsh_SHIFT
))&
VDEC_HUE_rd_ch_thªsh_MASK
)

	)

39443 
	#VDEC_CHBTH_rd_ch_thªsh_MASK
 0xFFu

	)

39444 
	#VDEC_CHBTH_rd_ch_thªsh_SHIFT
 0

	)

39445 
	#VDEC_CHBTH_rd_ch_thªsh
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_CHBTH_rd_ch_thªsh_SHIFT
))&
VDEC_CHBTH_rd_ch_thªsh_MASK
)

	)

39447 
	#VDEC_SHPIMP_rd_≥ak_MASK
 0xFu

	)

39448 
	#VDEC_SHPIMP_rd_≥ak_SHIFT
 0

	)

39449 
	#VDEC_SHPIMP_rd_≥ak
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_SHPIMP_rd_≥ak_SHIFT
))&
VDEC_SHPIMP_rd_≥ak_MASK
)

	)

39450 
	#VDEC_SHPIMP_rd_¶›e_MASK
 0xF0u

	)

39451 
	#VDEC_SHPIMP_rd_¶›e_SHIFT
 4

	)

39452 
	#VDEC_SHPIMP_rd_¶›e
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_SHPIMP_rd_¶›e_SHIFT
))&
VDEC_SHPIMP_rd_¶›e_MASK
)

	)

39454 
	#VDEC_CHPLLIM_rd_öputˇbÀs_MASK
 0x7u

	)

39455 
	#VDEC_CHPLLIM_rd_öputˇbÀs_SHIFT
 0

	)

39456 
	#VDEC_CHPLLIM_rd_öputˇbÀs
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_CHPLLIM_rd_öputˇbÀs_SHIFT
))&
VDEC_CHPLLIM_rd_öputˇbÀs_MASK
)

	)

39457 
	#VDEC_CHPLLIM_rd_locked_f‹˚_MASK
 0x8u

	)

39458 
	#VDEC_CHPLLIM_rd_locked_f‹˚_SHIFT
 3

	)

39459 
	#VDEC_CHPLLIM_rd_chlock_©ãn_MASK
 0x70u

	)

39460 
	#VDEC_CHPLLIM_rd_chlock_©ãn_SHIFT
 4

	)

39461 
	#VDEC_CHPLLIM_rd_chlock_©ãn
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_CHPLLIM_rd_chlock_©ãn_SHIFT
))&
VDEC_CHPLLIM_rd_chlock_©ãn_MASK
)

	)

39463 
	#VDEC_VIDMOD_havesig«l_MASK
 0x1u

	)

39464 
	#VDEC_VIDMOD_havesig«l_SHIFT
 0

	)

39465 
	#VDEC_VIDMOD_Hlocked_MASK
 0x2u

	)

39466 
	#VDEC_VIDMOD_Hlocked_SHIFT
 1

	)

39467 
	#VDEC_VIDMOD_chroma_MASK
 0x4u

	)

39468 
	#VDEC_VIDMOD_chroma_SHIFT
 2

	)

39469 
	#VDEC_VIDMOD_ch_locked_MASK
 0x8u

	)

39470 
	#VDEC_VIDMOD_ch_locked_SHIFT
 3

	)

39471 
	#VDEC_VIDMOD_m625_MASK
 0x10u

	)

39472 
	#VDEC_VIDMOD_m625_SHIFT
 4

	)

39473 
	#VDEC_VIDMOD_F443_MASK
 0x40u

	)

39474 
	#VDEC_VIDMOD_F443_SHIFT
 6

	)

39475 
	#VDEC_VIDMOD_PÆ_MASK
 0x80u

	)

39476 
	#VDEC_VIDMOD_PÆ_SHIFT
 7

	)

39478 
	#VDEC_VIDSTS_N⁄¨ôh_MASK
 0x1u

	)

39479 
	#VDEC_VIDSTS_N⁄¨ôh_SHIFT
 0

	)

39480 
	#VDEC_VIDSTS_N⁄¨ôh3D_MASK
 0x2u

	)

39481 
	#VDEC_VIDSTS_N⁄¨ôh3D_SHIFT
 1

	)

39482 
	#VDEC_VIDSTS_V¸dëe˘_MASK
 0x4u

	)

39483 
	#VDEC_VIDSTS_V¸dëe˘_SHIFT
 2

	)

39485 
	#VDEC_NOISE_Noi£_MASK
 0xFFu

	)

39486 
	#VDEC_NOISE_Noi£_SHIFT
 0

	)

39487 
	#VDEC_NOISE_Noi£
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_NOISE_Noi£_SHIFT
))&
VDEC_NOISE_Noi£_MASK
)

	)

39489 
	#VDEC_STDDBG_°™d¨d_fûãr_MASK
 0x3u

	)

39490 
	#VDEC_STDDBG_°™d¨d_fûãr_SHIFT
 0

	)

39491 
	#VDEC_STDDBG_°™d¨d_fûãr
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_STDDBG_°™d¨d_fûãr_SHIFT
))&
VDEC_STDDBG_°™d¨d_fûãr_MASK
)

	)

39492 
	#VDEC_STDDBG_f‹˚_havesig«l_MASK
 0x8u

	)

39493 
	#VDEC_STDDBG_f‹˚_havesig«l_SHIFT
 3

	)

39494 
	#VDEC_STDDBG_f‹˚_2d¡sc443_MASK
 0x20u

	)

39495 
	#VDEC_STDDBG_f‹˚_2d¡sc443_SHIFT
 5

	)

39496 
	#VDEC_STDDBG_¡scj_MASK
 0x40u

	)

39497 
	#VDEC_STDDBG_¡scj_SHIFT
 6

	)

39498 
	#VDEC_STDDBG_rd_fc_mauÆ_MASK
 0x80u

	)

39499 
	#VDEC_STDDBG_rd_fc_mauÆ_SHIFT
 7

	)

39501 
	#VDEC_MANOVR_m™uÆ_625_MASK
 0x1u

	)

39502 
	#VDEC_MANOVR_m™uÆ_625_SHIFT
 0

	)

39503 
	#VDEC_MANOVR_four43_m™uÆ_MASK
 0x4u

	)

39504 
	#VDEC_MANOVR_four43_m™uÆ_SHIFT
 2

	)

39505 
	#VDEC_MANOVR_∑l_m™uÆ_MASK
 0x8u

	)

39506 
	#VDEC_MANOVR_∑l_m™uÆ_SHIFT
 3

	)

39507 
	#VDEC_MANOVR_löe625_ovîride_MASK
 0x10u

	)

39508 
	#VDEC_MANOVR_löe625_ovîride_SHIFT
 4

	)

39509 
	#VDEC_MANOVR_f443_ovîride_MASK
 0x40u

	)

39510 
	#VDEC_MANOVR_f443_ovîride_SHIFT
 6

	)

39511 
	#VDEC_MANOVR_∑l_ovîride_MASK
 0x80u

	)

39512 
	#VDEC_MANOVR_∑l_ovîride_SHIFT
 7

	)

39514 
	#VDEC_VSSGTH_nosigthªsh_MASK
 0x7u

	)

39515 
	#VDEC_VSSGTH_nosigthªsh_SHIFT
 0

	)

39516 
	#VDEC_VSSGTH_nosigthªsh
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_VSSGTH_nosigthªsh_SHIFT
))&
VDEC_VSSGTH_nosigthªsh_MASK
)

	)

39517 
	#VDEC_VSSGTH_rh_vsyn˛ígth_MASK
 0xF0u

	)

39518 
	#VDEC_VSSGTH_rh_vsyn˛ígth_SHIFT
 4

	)

39519 
	#VDEC_VSSGTH_rh_vsyn˛ígth
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_VSSGTH_rh_vsyn˛ígth_SHIFT
))&
VDEC_VSSGTH_rh_vsyn˛ígth_MASK
)

	)

39521 
	#VDEC_DBGFBH_˛amp_dñayH_MASK
 0x3u

	)

39522 
	#VDEC_DBGFBH_˛amp_dñayH_SHIFT
 0

	)

39523 
	#VDEC_DBGFBH_˛amp_dñayH
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_DBGFBH_˛amp_dñayH_SHIFT
))&
VDEC_DBGFBH_˛amp_dñayH_MASK
)

	)

39525 
	#VDEC_DBGFBL_˛amp_dñayL_MASK
 0xFFu

	)

39526 
	#VDEC_DBGFBL_˛amp_dñayL_SHIFT
 0

	)

39527 
	#VDEC_DBGFBL_˛amp_dñayL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_DBGFBL_˛amp_dñayL_SHIFT
))&
VDEC_DBGFBL_˛amp_dñayL_MASK
)

	)

39529 
	#VDEC_HACTS_ro_ha˘ive°¨t_MASK
 0xFFu

	)

39530 
	#VDEC_HACTS_ro_ha˘ive°¨t_SHIFT
 0

	)

39531 
	#VDEC_HACTS_ro_ha˘ive°¨t
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_HACTS_ro_ha˘ive°¨t_SHIFT
))&
VDEC_HACTS_ro_ha˘ive°¨t_MASK
)

	)

39533 
	#VDEC_HACTE_ro_ha˘ivìnd_MASK
 0xFFu

	)

39534 
	#VDEC_HACTE_ro_ha˘ivìnd_SHIFT
 0

	)

39535 
	#VDEC_HACTE_ro_ha˘ivìnd
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_HACTE_ro_ha˘ivìnd_SHIFT
))&
VDEC_HACTE_ro_ha˘ivìnd_MASK
)

	)

39537 
	#VDEC_VACTS_ro_va˘ive°¨t_MASK
 0xFFu

	)

39538 
	#VDEC_VACTS_ro_va˘ive°¨t_SHIFT
 0

	)

39539 
	#VDEC_VACTS_ro_va˘ive°¨t
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_VACTS_ro_va˘ive°¨t_SHIFT
))&
VDEC_VACTS_ro_va˘ive°¨t_MASK
)

	)

39541 
	#VDEC_VACTE_ro_va˘ivìnd_MASK
 0xFFu

	)

39542 
	#VDEC_VACTE_ro_va˘ivìnd_SHIFT
 0

	)

39543 
	#VDEC_VACTE_ro_va˘ivìnd
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_VACTE_ro_va˘ivìnd_SHIFT
))&
VDEC_VACTE_ro_va˘ivìnd_MASK
)

	)

39545 
	#VDEC_HSTIP_rh_tùg©e_°¨t_MASK
 0xFFu

	)

39546 
	#VDEC_HSTIP_rh_tùg©e_°¨t_SHIFT
 0

	)

39547 
	#VDEC_HSTIP_rh_tùg©e_°¨t
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_HSTIP_rh_tùg©e_°¨t_SHIFT
))&
VDEC_HSTIP_rh_tùg©e_°¨t_MASK
)

	)

39549 
	#VDEC_BLSCRCR_blues¸ìn_y_MASK
 0xFFu

	)

39550 
	#VDEC_BLSCRCR_blues¸ìn_y_SHIFT
 0

	)

39551 
	#VDEC_BLSCRCR_blues¸ìn_y
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_BLSCRCR_blues¸ìn_y_SHIFT
))&
VDEC_BLSCRCR_blues¸ìn_y_MASK
)

	)

39553 
	#VDEC_BLSCRCB_blues¸ìn_cb_MASK
 0xFFu

	)

39554 
	#VDEC_BLSCRCB_blues¸ìn_cb_SHIFT
 0

	)

39555 
	#VDEC_BLSCRCB_blues¸ìn_cb
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_BLSCRCB_blues¸ìn_cb_SHIFT
))&
VDEC_BLSCRCB_blues¸ìn_cb_MASK
)

	)

39557 
	#VDEC_LMAGC2_øgc_èrgë_MASK
 0xFFu

	)

39558 
	#VDEC_LMAGC2_øgc_èrgë_SHIFT
 0

	)

39559 
	#VDEC_LMAGC2_øgc_èrgë
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_LMAGC2_øgc_èrgë_SHIFT
))&
VDEC_LMAGC2_øgc_èrgë_MASK
)

	)

39561 
	#VDEC_CHAGC2_rd_chagc_èrgë_MASK
 0xFFu

	)

39562 
	#VDEC_CHAGC2_rd_chagc_èrgë_SHIFT
 0

	)

39563 
	#VDEC_CHAGC2_rd_chagc_èrgë
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_CHAGC2_rd_chagc_èrgë_SHIFT
))&
VDEC_CHAGC2_rd_chagc_èrgë_MASK
)

	)

39565 
	#VDEC_MINTH_möthªsh_MASK
 0xFFu

	)

39566 
	#VDEC_MINTH_möthªsh_SHIFT
 0

	)

39567 
	#VDEC_MINTH_möthªsh
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_MINTH_möthªsh_SHIFT
))&
VDEC_MINTH_möthªsh_MASK
)

	)

39569 
	#VDEC_VFRQOH_v‰eqo_MASK
 0xFu

	)

39570 
	#VDEC_VFRQOH_v‰eqo_SHIFT
 0

	)

39571 
	#VDEC_VFRQOH_v‰eqo
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_VFRQOH_v‰eqo_SHIFT
))&
VDEC_VFRQOH_v‰eqo_MASK
)

	)

39573 
	#VDEC_VFRQOL_v‰eqo_MASK
 0xFFu

	)

39574 
	#VDEC_VFRQOL_v‰eqo_SHIFT
 0

	)

39575 
	#VDEC_VFRQOL_v‰eqo
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_VFRQOL_v‰eqo_SHIFT
))&
VDEC_VFRQOL_v‰eqo_MASK
)

	)

39577 
	#VDEC_ASYNCLKFREQ1_ASYNCHCLK_FREQUENCY_MASK
 0xFFu

	)

39578 
	#VDEC_ASYNCLKFREQ1_ASYNCHCLK_FREQUENCY_SHIFT
 0

	)

39579 
	#VDEC_ASYNCLKFREQ1_ASYNCHCLK_FREQUENCY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_ASYNCLKFREQ1_ASYNCHCLK_FREQUENCY_SHIFT
))&
VDEC_ASYNCLKFREQ1_ASYNCHCLK_FREQUENCY_MASK
)

	)

39581 
	#VDEC_ASYNCLKFREQ2_ASYNCHCLK_FREQUENCY_MASK
 0xFFu

	)

39582 
	#VDEC_ASYNCLKFREQ2_ASYNCHCLK_FREQUENCY_SHIFT
 0

	)

39583 
	#VDEC_ASYNCLKFREQ2_ASYNCHCLK_FREQUENCY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_ASYNCLKFREQ2_ASYNCHCLK_FREQUENCY_SHIFT
))&
VDEC_ASYNCLKFREQ2_ASYNCHCLK_FREQUENCY_MASK
)

	)

39585 
	#VDEC_ASYNCLKFREQ3_ASYNCHCLK_FREQUENCY_MASK
 0xFFu

	)

39586 
	#VDEC_ASYNCLKFREQ3_ASYNCHCLK_FREQUENCY_SHIFT
 0

	)

39587 
	#VDEC_ASYNCLKFREQ3_ASYNCHCLK_FREQUENCY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_ASYNCLKFREQ3_ASYNCHCLK_FREQUENCY_SHIFT
))&
VDEC_ASYNCLKFREQ3_ASYNCHCLK_FREQUENCY_MASK
)

	)

39589 
	#VDEC_ASYNCLKFREQ4_ASYNCHCLK_FREQUENCY_MASK
 0xFFu

	)

39590 
	#VDEC_ASYNCLKFREQ4_ASYNCHCLK_FREQUENCY_SHIFT
 0

	)

39591 
	#VDEC_ASYNCLKFREQ4_ASYNCHCLK_FREQUENCY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
VDEC_ASYNCLKFREQ4_ASYNCHCLK_FREQUENCY_SHIFT
))&
VDEC_ASYNCLKFREQ4_ASYNCHCLK_FREQUENCY_MASK
)

	)

39599 
	#VDEC_BASE
 (0x4222C000u)

	)

39601 
	#VDEC
 ((
VDEC_Ty≥
 *)
VDEC_BASE
)

	)

39602 
	#VDEC_BASE_PTR
 (
VDEC
)

	)

39604 
	#VDEC_BASE_ADDRS
 { 
VDEC_BASE
 }

	)

39606 
	#VDEC_BASE_PTRS
 { 
VDEC
 }

	)

39619 
	#VDEC_CFC1
 
	`VDEC_CFC1_REG
(
VDEC_BASE_PTR
)

	)

39620 
	#VDEC_BRSTGT
 
	`VDEC_BRSTGT_REG
(
VDEC_BASE_PTR
)

	)

39621 
	#VDEC_HZPOS
 
	`VDEC_HZPOS_REG
(
VDEC_BASE_PTR
)

	)

39622 
	#VDEC_VRTPOS
 
	`VDEC_VRTPOS_REG
(
VDEC_BASE_PTR
)

	)

39623 
	#VDEC_HVSHFT
 
	`VDEC_HVSHFT_REG
(
VDEC_BASE_PTR
)

	)

39624 
	#VDEC_HSIGS
 
	`VDEC_HSIGS_REG
(
VDEC_BASE_PTR
)

	)

39625 
	#VDEC_HSIGE
 
	`VDEC_HSIGE_REG
(
VDEC_BASE_PTR
)

	)

39626 
	#VDEC_VSCON1
 
	`VDEC_VSCON1_REG
(
VDEC_BASE_PTR
)

	)

39627 
	#VDEC_VSCON2
 
	`VDEC_VSCON2_REG
(
VDEC_BASE_PTR
)

	)

39628 
	#VDEC_YCDEL
 
	`VDEC_YCDEL_REG
(
VDEC_BASE_PTR
)

	)

39629 
	#VDEC_AFTCLP
 
	`VDEC_AFTCLP_REG
(
VDEC_BASE_PTR
)

	)

39630 
	#VDEC_DCOFF
 
	`VDEC_DCOFF_REG
(
VDEC_BASE_PTR
)

	)

39631 
	#VDEC_CSID
 
	`VDEC_CSID_REG
(
VDEC_BASE_PTR
)

	)

39632 
	#VDEC_CBGN
 
	`VDEC_CBGN_REG
(
VDEC_BASE_PTR
)

	)

39633 
	#VDEC_CRGN
 
	`VDEC_CRGN_REG
(
VDEC_BASE_PTR
)

	)

39634 
	#VDEC_CNTR
 
	`VDEC_CNTR_REG
(
VDEC_BASE_PTR
)

	)

39635 
	#VDEC_BRT
 
	`VDEC_BRT_REG
(
VDEC_BASE_PTR
)

	)

39636 
	#VDEC_HUE
 
	`VDEC_HUE_REG
(
VDEC_BASE_PTR
)

	)

39637 
	#VDEC_CHBTH
 
	`VDEC_CHBTH_REG
(
VDEC_BASE_PTR
)

	)

39638 
	#VDEC_SHPIMP
 
	`VDEC_SHPIMP_REG
(
VDEC_BASE_PTR
)

	)

39639 
	#VDEC_CHPLLIM
 
	`VDEC_CHPLLIM_REG
(
VDEC_BASE_PTR
)

	)

39640 
	#VDEC_VIDMOD
 
	`VDEC_VIDMOD_REG
(
VDEC_BASE_PTR
)

	)

39641 
	#VDEC_VIDSTS
 
	`VDEC_VIDSTS_REG
(
VDEC_BASE_PTR
)

	)

39642 
	#VDEC_NOISE
 
	`VDEC_NOISE_REG
(
VDEC_BASE_PTR
)

	)

39643 
	#VDEC_STDDBG
 
	`VDEC_STDDBG_REG
(
VDEC_BASE_PTR
)

	)

39644 
	#VDEC_MANOVR
 
	`VDEC_MANOVR_REG
(
VDEC_BASE_PTR
)

	)

39645 
	#VDEC_VSSGTH
 
	`VDEC_VSSGTH_REG
(
VDEC_BASE_PTR
)

	)

39646 
	#VDEC_DBGFBH
 
	`VDEC_DBGFBH_REG
(
VDEC_BASE_PTR
)

	)

39647 
	#VDEC_DBGFBL
 
	`VDEC_DBGFBL_REG
(
VDEC_BASE_PTR
)

	)

39648 
	#VDEC_HACTS
 
	`VDEC_HACTS_REG
(
VDEC_BASE_PTR
)

	)

39649 
	#VDEC_HACTE
 
	`VDEC_HACTE_REG
(
VDEC_BASE_PTR
)

	)

39650 
	#VDEC_VACTS
 
	`VDEC_VACTS_REG
(
VDEC_BASE_PTR
)

	)

39651 
	#VDEC_VACTE
 
	`VDEC_VACTE_REG
(
VDEC_BASE_PTR
)

	)

39652 
	#VDEC_HSTIP
 
	`VDEC_HSTIP_REG
(
VDEC_BASE_PTR
)

	)

39653 
	#VDEC_BLSCRCR
 
	`VDEC_BLSCRCR_REG
(
VDEC_BASE_PTR
)

	)

39654 
	#VDEC_BLSCRCB
 
	`VDEC_BLSCRCB_REG
(
VDEC_BASE_PTR
)

	)

39655 
	#VDEC_LMAGC2
 
	`VDEC_LMAGC2_REG
(
VDEC_BASE_PTR
)

	)

39656 
	#VDEC_CHAGC2
 
	`VDEC_CHAGC2_REG
(
VDEC_BASE_PTR
)

	)

39657 
	#VDEC_MINTH
 
	`VDEC_MINTH_REG
(
VDEC_BASE_PTR
)

	)

39658 
	#VDEC_VFRQOH
 
	`VDEC_VFRQOH_REG
(
VDEC_BASE_PTR
)

	)

39659 
	#VDEC_VFRQOL
 
	`VDEC_VFRQOL_REG
(
VDEC_BASE_PTR
)

	)

39660 
	#VDEC_ASYNCLKFREQ1
 
	`VDEC_ASYNCLKFREQ1_REG
(
VDEC_BASE_PTR
)

	)

39661 
	#VDEC_ASYNCLKFREQ2
 
	`VDEC_ASYNCLKFREQ2_REG
(
VDEC_BASE_PTR
)

	)

39662 
	#VDEC_ASYNCLKFREQ3
 
	`VDEC_ASYNCLKFREQ3_REG
(
VDEC_BASE_PTR
)

	)

39663 
	#VDEC_ASYNCLKFREQ4
 
	`VDEC_ASYNCLKFREQ4_REG
(
VDEC_BASE_PTR
)

	)

39684 
__IO
 
uöt16_t
 
	mWCR
;

39685 
__IO
 
uöt16_t
 
	mWSR
;

39686 
__I
 
uöt16_t
 
	mWRSR
;

39687 
__IO
 
uöt16_t
 
	mWICR
;

39688 
__IO
 
uöt16_t
 
	mWMCR
;

39689 } 
	tWDOG_Ty≥
, *
	tWDOG_MemM≠På
;

39701 
	#WDOG_WCR_REG
(
ba£
Ë((ba£)->
WCR
)

	)

39702 
	#WDOG_WSR_REG
(
ba£
Ë((ba£)->
WSR
)

	)

39703 
	#WDOG_WRSR_REG
(
ba£
Ë((ba£)->
WRSR
)

	)

39704 
	#WDOG_WICR_REG
(
ba£
Ë((ba£)->
WICR
)

	)

39705 
	#WDOG_WMCR_REG
(
ba£
Ë((ba£)->
WMCR
)

	)

39721 
	#WDOG_WCR_WDZST_MASK
 0x1u

	)

39722 
	#WDOG_WCR_WDZST_SHIFT
 0

	)

39723 
	#WDOG_WCR_WDBG_MASK
 0x2u

	)

39724 
	#WDOG_WCR_WDBG_SHIFT
 1

	)

39725 
	#WDOG_WCR_WDE_MASK
 0x4u

	)

39726 
	#WDOG_WCR_WDE_SHIFT
 2

	)

39727 
	#WDOG_WCR_WDT_MASK
 0x8u

	)

39728 
	#WDOG_WCR_WDT_SHIFT
 3

	)

39729 
	#WDOG_WCR_SRS_MASK
 0x10u

	)

39730 
	#WDOG_WCR_SRS_SHIFT
 4

	)

39731 
	#WDOG_WCR_WDA_MASK
 0x20u

	)

39732 
	#WDOG_WCR_WDA_SHIFT
 5

	)

39733 
	#WDOG_WCR_SRE_MASK
 0x40u

	)

39734 
	#WDOG_WCR_SRE_SHIFT
 6

	)

39735 
	#WDOG_WCR_WDW_MASK
 0x80u

	)

39736 
	#WDOG_WCR_WDW_SHIFT
 7

	)

39737 
	#WDOG_WCR_WT_MASK
 0xFF00u

	)

39738 
	#WDOG_WCR_WT_SHIFT
 8

	)

39739 
	#WDOG_WCR_WT
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
WDOG_WCR_WT_SHIFT
))&
WDOG_WCR_WT_MASK
)

	)

39741 
	#WDOG_WSR_WSR_MASK
 0xFFFFu

	)

39742 
	#WDOG_WSR_WSR_SHIFT
 0

	)

39743 
	#WDOG_WSR_WSR
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
WDOG_WSR_WSR_SHIFT
))&
WDOG_WSR_WSR_MASK
)

	)

39745 
	#WDOG_WRSR_SFTW_MASK
 0x1u

	)

39746 
	#WDOG_WRSR_SFTW_SHIFT
 0

	)

39747 
	#WDOG_WRSR_TOUT_MASK
 0x2u

	)

39748 
	#WDOG_WRSR_TOUT_SHIFT
 1

	)

39749 
	#WDOG_WRSR_POR_MASK
 0x10u

	)

39750 
	#WDOG_WRSR_POR_SHIFT
 4

	)

39752 
	#WDOG_WICR_WICT_MASK
 0xFFu

	)

39753 
	#WDOG_WICR_WICT_SHIFT
 0

	)

39754 
	#WDOG_WICR_WICT
(
x
Ë(((
uöt16_t
)(((uöt16_t)(x))<<
WDOG_WICR_WICT_SHIFT
))&
WDOG_WICR_WICT_MASK
)

	)

39755 
	#WDOG_WICR_WTIS_MASK
 0x4000u

	)

39756 
	#WDOG_WICR_WTIS_SHIFT
 14

	)

39757 
	#WDOG_WICR_WIE_MASK
 0x8000u

	)

39758 
	#WDOG_WICR_WIE_SHIFT
 15

	)

39760 
	#WDOG_WMCR_PDE_MASK
 0x1u

	)

39761 
	#WDOG_WMCR_PDE_SHIFT
 0

	)

39769 
	#WDOG1_BASE
 (0x420BC000u)

	)

39771 
	#WDOG1
 ((
WDOG_Ty≥
 *)
WDOG1_BASE
)

	)

39772 
	#WDOG1_BASE_PTR
 (
WDOG1
)

	)

39774 
	#WDOG2_BASE
 (0x420C0000u)

	)

39776 
	#WDOG2
 ((
WDOG_Ty≥
 *)
WDOG2_BASE
)

	)

39777 
	#WDOG2_BASE_PTR
 (
WDOG2
)

	)

39779 
	#WDOG3_BASE
 (0x42288000u)

	)

39781 
	#WDOG3
 ((
WDOG_Ty≥
 *)
WDOG3_BASE
)

	)

39782 
	#WDOG3_BASE_PTR
 (
WDOG3
)

	)

39784 
	#WDOG_BASE_ADDRS
 { 
WDOG1_BASE
, 
WDOG2_BASE
, 
WDOG3_BASE
 }

	)

39786 
	#WDOG_BASE_PTRS
 { 
WDOG1
, 
WDOG2
, 
WDOG3
 }

	)

39788 
	#WDOG_IRQS
 { 
WDOG1_IRQn
, 
WDOG2_IRQn
, 
WDOG3_IRQn
 }

	)

39801 
	#WDOG1_WCR
 
	`WDOG_WCR_REG
(
WDOG1_BASE_PTR
)

	)

39802 
	#WDOG1_WSR
 
	`WDOG_WSR_REG
(
WDOG1_BASE_PTR
)

	)

39803 
	#WDOG1_WRSR
 
	`WDOG_WRSR_REG
(
WDOG1_BASE_PTR
)

	)

39804 
	#WDOG1_WICR
 
	`WDOG_WICR_REG
(
WDOG1_BASE_PTR
)

	)

39805 
	#WDOG1_WMCR
 
	`WDOG_WMCR_REG
(
WDOG1_BASE_PTR
)

	)

39807 
	#WDOG2_WCR
 
	`WDOG_WCR_REG
(
WDOG2_BASE_PTR
)

	)

39808 
	#WDOG2_WSR
 
	`WDOG_WSR_REG
(
WDOG2_BASE_PTR
)

	)

39809 
	#WDOG2_WRSR
 
	`WDOG_WRSR_REG
(
WDOG2_BASE_PTR
)

	)

39810 
	#WDOG2_WICR
 
	`WDOG_WICR_REG
(
WDOG2_BASE_PTR
)

	)

39811 
	#WDOG2_WMCR
 
	`WDOG_WMCR_REG
(
WDOG2_BASE_PTR
)

	)

39813 
	#WDOG3_WCR
 
	`WDOG_WCR_REG
(
WDOG3_BASE_PTR
)

	)

39814 
	#WDOG3_WSR
 
	`WDOG_WSR_REG
(
WDOG3_BASE_PTR
)

	)

39815 
	#WDOG3_WRSR
 
	`WDOG_WRSR_REG
(
WDOG3_BASE_PTR
)

	)

39816 
	#WDOG3_WICR
 
	`WDOG_WICR_REG
(
WDOG3_BASE_PTR
)

	)

39817 
	#WDOG3_WMCR
 
	`WDOG_WMCR_REG
(
WDOG3_BASE_PTR
)

	)

39838 
uöt8_t
 
	mRESERVED_0
[336];

39839 
__IO
 
uöt32_t
 
	mMISC0
;

39840 
uöt8_t
 
	mRESERVED_1
[284];

39841 
__IO
 
uöt32_t
 
	mLOWPWR_CTRL
;

39842 
__IO
 
uöt32_t
 
	mLOWPWR_CTRL_SET
;

39843 
__IO
 
uöt32_t
 
	mLOWPWR_CTRL_CLR
;

39844 
__IO
 
uöt32_t
 
	mLOWPWR_CTRL_TOG
;

39845 
uöt8_t
 
	mRESERVED_2
[32];

39846 
__IO
 
uöt32_t
 
	mOSC_CONFIG0
;

39847 
__IO
 
uöt32_t
 
	mOSC_CONFIG0_SET
;

39848 
__IO
 
uöt32_t
 
	mOSC_CONFIG0_CLR
;

39849 
__IO
 
uöt32_t
 
	mOSC_CONFIG0_TOG
;

39850 
__IO
 
uöt32_t
 
	mOSC_CONFIG1
;

39851 
__IO
 
uöt32_t
 
	mOSC_CONFIG1_SET
;

39852 
__IO
 
uöt32_t
 
	mOSC_CONFIG1_CLR
;

39853 
__IO
 
uöt32_t
 
	mOSC_CONFIG1_TOG
;

39854 
__IO
 
uöt32_t
 
	mOSC_CONFIG2
;

39855 
__IO
 
uöt32_t
 
	mOSC_CONFIG2_SET
;

39856 
__IO
 
uöt32_t
 
	mOSC_CONFIG2_CLR
;

39857 
__IO
 
uöt32_t
 
	mOSC_CONFIG2_TOG
;

39858 } 
	tXTALOSC24M_Ty≥
, *
	tXTALOSC24M_MemM≠På
;

39870 
	#XTALOSC24M_MISC0_REG
(
ba£
Ë((ba£)->
MISC0
)

	)

39871 
	#XTALOSC24M_LOWPWR_CTRL_REG
(
ba£
Ë((ba£)->
LOWPWR_CTRL
)

	)

39872 
	#XTALOSC24M_LOWPWR_CTRL_SET_REG
(
ba£
Ë((ba£)->
LOWPWR_CTRL_SET
)

	)

39873 
	#XTALOSC24M_LOWPWR_CTRL_CLR_REG
(
ba£
Ë((ba£)->
LOWPWR_CTRL_CLR
)

	)

39874 
	#XTALOSC24M_LOWPWR_CTRL_TOG_REG
(
ba£
Ë((ba£)->
LOWPWR_CTRL_TOG
)

	)

39875 
	#XTALOSC24M_OSC_CONFIG0_REG
(
ba£
Ë((ba£)->
OSC_CONFIG0
)

	)

39876 
	#XTALOSC24M_OSC_CONFIG0_SET_REG
(
ba£
Ë((ba£)->
OSC_CONFIG0_SET
)

	)

39877 
	#XTALOSC24M_OSC_CONFIG0_CLR_REG
(
ba£
Ë((ba£)->
OSC_CONFIG0_CLR
)

	)

39878 
	#XTALOSC24M_OSC_CONFIG0_TOG_REG
(
ba£
Ë((ba£)->
OSC_CONFIG0_TOG
)

	)

39879 
	#XTALOSC24M_OSC_CONFIG1_REG
(
ba£
Ë((ba£)->
OSC_CONFIG1
)

	)

39880 
	#XTALOSC24M_OSC_CONFIG1_SET_REG
(
ba£
Ë((ba£)->
OSC_CONFIG1_SET
)

	)

39881 
	#XTALOSC24M_OSC_CONFIG1_CLR_REG
(
ba£
Ë((ba£)->
OSC_CONFIG1_CLR
)

	)

39882 
	#XTALOSC24M_OSC_CONFIG1_TOG_REG
(
ba£
Ë((ba£)->
OSC_CONFIG1_TOG
)

	)

39883 
	#XTALOSC24M_OSC_CONFIG2_REG
(
ba£
Ë((ba£)->
OSC_CONFIG2
)

	)

39884 
	#XTALOSC24M_OSC_CONFIG2_SET_REG
(
ba£
Ë((ba£)->
OSC_CONFIG2_SET
)

	)

39885 
	#XTALOSC24M_OSC_CONFIG2_CLR_REG
(
ba£
Ë((ba£)->
OSC_CONFIG2_CLR
)

	)

39886 
	#XTALOSC24M_OSC_CONFIG2_TOG_REG
(
ba£
Ë((ba£)->
OSC_CONFIG2_TOG
)

	)

39902 
	#XTALOSC24M_MISC0_REFTOP_PWD_MASK
 0x1u

	)

39903 
	#XTALOSC24M_MISC0_REFTOP_PWD_SHIFT
 0

	)

39904 
	#XTALOSC24M_MISC0_REFTOP_SELFBIASOFF_MASK
 0x8u

	)

39905 
	#XTALOSC24M_MISC0_REFTOP_SELFBIASOFF_SHIFT
 3

	)

39906 
	#XTALOSC24M_MISC0_REFTOP_VBGADJ_MASK
 0x70u

	)

39907 
	#XTALOSC24M_MISC0_REFTOP_VBGADJ_SHIFT
 4

	)

39908 
	#XTALOSC24M_MISC0_REFTOP_VBGADJ
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_MISC0_REFTOP_VBGADJ_SHIFT
))&
XTALOSC24M_MISC0_REFTOP_VBGADJ_MASK
)

	)

39909 
	#XTALOSC24M_MISC0_REFTOP_VBGUP_MASK
 0x80u

	)

39910 
	#XTALOSC24M_MISC0_REFTOP_VBGUP_SHIFT
 7

	)

39911 
	#XTALOSC24M_MISC0_STOP_MODE_CONFIG_MASK
 0xC00u

	)

39912 
	#XTALOSC24M_MISC0_STOP_MODE_CONFIG_SHIFT
 10

	)

39913 
	#XTALOSC24M_MISC0_STOP_MODE_CONFIG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_MISC0_STOP_MODE_CONFIG_SHIFT
))&
XTALOSC24M_MISC0_STOP_MODE_CONFIG_MASK
)

	)

39914 
	#XTALOSC24M_MISC0_RTC_RINGOSC_EN_MASK
 0x1000u

	)

39915 
	#XTALOSC24M_MISC0_RTC_RINGOSC_EN_SHIFT
 12

	)

39916 
	#XTALOSC24M_MISC0_OSC_I_MASK
 0x6000u

	)

39917 
	#XTALOSC24M_MISC0_OSC_I_SHIFT
 13

	)

39918 
	#XTALOSC24M_MISC0_OSC_I
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_MISC0_OSC_I_SHIFT
))&
XTALOSC24M_MISC0_OSC_I_MASK
)

	)

39919 
	#XTALOSC24M_MISC0_OSC_XTALOK_MASK
 0x8000u

	)

39920 
	#XTALOSC24M_MISC0_OSC_XTALOK_SHIFT
 15

	)

39921 
	#XTALOSC24M_MISC0_OSC_XTALOK_EN_MASK
 0x10000u

	)

39922 
	#XTALOSC24M_MISC0_OSC_XTALOK_EN_SHIFT
 16

	)

39923 
	#XTALOSC24M_MISC0_CLKGATE_CTRL_MASK
 0x2000000u

	)

39924 
	#XTALOSC24M_MISC0_CLKGATE_CTRL_SHIFT
 25

	)

39925 
	#XTALOSC24M_MISC0_CLKGATE_DELAY_MASK
 0x1C000000u

	)

39926 
	#XTALOSC24M_MISC0_CLKGATE_DELAY_SHIFT
 26

	)

39927 
	#XTALOSC24M_MISC0_CLKGATE_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_MISC0_CLKGATE_DELAY_SHIFT
))&
XTALOSC24M_MISC0_CLKGATE_DELAY_MASK
)

	)

39928 
	#XTALOSC24M_MISC0_RTC_XTAL_SOURCE_MASK
 0x20000000u

	)

39929 
	#XTALOSC24M_MISC0_RTC_XTAL_SOURCE_SHIFT
 29

	)

39930 
	#XTALOSC24M_MISC0_XTAL_24M_PWD_MASK
 0x40000000u

	)

39931 
	#XTALOSC24M_MISC0_XTAL_24M_PWD_SHIFT
 30

	)

39932 
	#XTALOSC24M_MISC0_VID_PLL_PREDIV_MASK
 0x80000000u

	)

39933 
	#XTALOSC24M_MISC0_VID_PLL_PREDIV_SHIFT
 31

	)

39935 
	#XTALOSC24M_LOWPWR_CTRL_RC_OSC_EN_MASK
 0x1u

	)

39936 
	#XTALOSC24M_LOWPWR_CTRL_RC_OSC_EN_SHIFT
 0

	)

39937 
	#XTALOSC24M_LOWPWR_CTRL_RC_OSC_PROG_MASK
 0xEu

	)

39938 
	#XTALOSC24M_LOWPWR_CTRL_RC_OSC_PROG_SHIFT
 1

	)

39939 
	#XTALOSC24M_LOWPWR_CTRL_RC_OSC_PROG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_LOWPWR_CTRL_RC_OSC_PROG_SHIFT
))&
XTALOSC24M_LOWPWR_CTRL_RC_OSC_PROG_MASK
)

	)

39940 
	#XTALOSC24M_LOWPWR_CTRL_OSC_SEL_MASK
 0x10u

	)

39941 
	#XTALOSC24M_LOWPWR_CTRL_OSC_SEL_SHIFT
 4

	)

39942 
	#XTALOSC24M_LOWPWR_CTRL_LPBG_SEL_MASK
 0x20u

	)

39943 
	#XTALOSC24M_LOWPWR_CTRL_LPBG_SEL_SHIFT
 5

	)

39944 
	#XTALOSC24M_LOWPWR_CTRL_LPBG_TEST_MASK
 0x40u

	)

39945 
	#XTALOSC24M_LOWPWR_CTRL_LPBG_TEST_SHIFT
 6

	)

39946 
	#XTALOSC24M_LOWPWR_CTRL_REFTOP_IBIAS_OFF_MASK
 0x80u

	)

39947 
	#XTALOSC24M_LOWPWR_CTRL_REFTOP_IBIAS_OFF_SHIFT
 7

	)

39948 
	#XTALOSC24M_LOWPWR_CTRL_L1_PWRGATE_MASK
 0x100u

	)

39949 
	#XTALOSC24M_LOWPWR_CTRL_L1_PWRGATE_SHIFT
 8

	)

39950 
	#XTALOSC24M_LOWPWR_CTRL_L2_PWRGATE_MASK
 0x200u

	)

39951 
	#XTALOSC24M_LOWPWR_CTRL_L2_PWRGATE_SHIFT
 9

	)

39952 
	#XTALOSC24M_LOWPWR_CTRL_CPU_PWRGATE_MASK
 0x400u

	)

39953 
	#XTALOSC24M_LOWPWR_CTRL_CPU_PWRGATE_SHIFT
 10

	)

39954 
	#XTALOSC24M_LOWPWR_CTRL_DISPLAY_PWRGATE_MASK
 0x800u

	)

39955 
	#XTALOSC24M_LOWPWR_CTRL_DISPLAY_PWRGATE_SHIFT
 11

	)

39956 
	#XTALOSC24M_LOWPWR_CTRL_RCOSC_CG_OVERRIDE_MASK
 0x2000u

	)

39957 
	#XTALOSC24M_LOWPWR_CTRL_RCOSC_CG_OVERRIDE_SHIFT
 13

	)

39958 
	#XTALOSC24M_LOWPWR_CTRL_XTALOSC_PWRUP_DELAY_MASK
 0xC000u

	)

39959 
	#XTALOSC24M_LOWPWR_CTRL_XTALOSC_PWRUP_DELAY_SHIFT
 14

	)

39960 
	#XTALOSC24M_LOWPWR_CTRL_XTALOSC_PWRUP_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_LOWPWR_CTRL_XTALOSC_PWRUP_DELAY_SHIFT
))&
XTALOSC24M_LOWPWR_CTRL_XTALOSC_PWRUP_DELAY_MASK
)

	)

39961 
	#XTALOSC24M_LOWPWR_CTRL_XTALOSC_PWRUP_STAT_MASK
 0x10000u

	)

39962 
	#XTALOSC24M_LOWPWR_CTRL_XTALOSC_PWRUP_STAT_SHIFT
 16

	)

39963 
	#XTALOSC24M_LOWPWR_CTRL_MIX_PWRGATE_MASK
 0x20000u

	)

39964 
	#XTALOSC24M_LOWPWR_CTRL_MIX_PWRGATE_SHIFT
 17

	)

39965 
	#XTALOSC24M_LOWPWR_CTRL_GPU_PWRGATE_MASK
 0x40000u

	)

39966 
	#XTALOSC24M_LOWPWR_CTRL_GPU_PWRGATE_SHIFT
 18

	)

39968 
	#XTALOSC24M_LOWPWR_CTRL_SET_RC_OSC_EN_MASK
 0x1u

	)

39969 
	#XTALOSC24M_LOWPWR_CTRL_SET_RC_OSC_EN_SHIFT
 0

	)

39970 
	#XTALOSC24M_LOWPWR_CTRL_SET_RC_OSC_PROG_MASK
 0xEu

	)

39971 
	#XTALOSC24M_LOWPWR_CTRL_SET_RC_OSC_PROG_SHIFT
 1

	)

39972 
	#XTALOSC24M_LOWPWR_CTRL_SET_RC_OSC_PROG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_LOWPWR_CTRL_SET_RC_OSC_PROG_SHIFT
))&
XTALOSC24M_LOWPWR_CTRL_SET_RC_OSC_PROG_MASK
)

	)

39973 
	#XTALOSC24M_LOWPWR_CTRL_SET_OSC_SEL_MASK
 0x10u

	)

39974 
	#XTALOSC24M_LOWPWR_CTRL_SET_OSC_SEL_SHIFT
 4

	)

39975 
	#XTALOSC24M_LOWPWR_CTRL_SET_LPBG_SEL_MASK
 0x20u

	)

39976 
	#XTALOSC24M_LOWPWR_CTRL_SET_LPBG_SEL_SHIFT
 5

	)

39977 
	#XTALOSC24M_LOWPWR_CTRL_SET_LPBG_TEST_MASK
 0x40u

	)

39978 
	#XTALOSC24M_LOWPWR_CTRL_SET_LPBG_TEST_SHIFT
 6

	)

39979 
	#XTALOSC24M_LOWPWR_CTRL_SET_REFTOP_IBIAS_OFF_MASK
 0x80u

	)

39980 
	#XTALOSC24M_LOWPWR_CTRL_SET_REFTOP_IBIAS_OFF_SHIFT
 7

	)

39981 
	#XTALOSC24M_LOWPWR_CTRL_SET_L1_PWRGATE_MASK
 0x100u

	)

39982 
	#XTALOSC24M_LOWPWR_CTRL_SET_L1_PWRGATE_SHIFT
 8

	)

39983 
	#XTALOSC24M_LOWPWR_CTRL_SET_L2_PWRGATE_MASK
 0x200u

	)

39984 
	#XTALOSC24M_LOWPWR_CTRL_SET_L2_PWRGATE_SHIFT
 9

	)

39985 
	#XTALOSC24M_LOWPWR_CTRL_SET_CPU_PWRGATE_MASK
 0x400u

	)

39986 
	#XTALOSC24M_LOWPWR_CTRL_SET_CPU_PWRGATE_SHIFT
 10

	)

39987 
	#XTALOSC24M_LOWPWR_CTRL_SET_DISPLAY_PWRGATE_MASK
 0x800u

	)

39988 
	#XTALOSC24M_LOWPWR_CTRL_SET_DISPLAY_PWRGATE_SHIFT
 11

	)

39989 
	#XTALOSC24M_LOWPWR_CTRL_SET_RCOSC_CG_OVERRIDE_MASK
 0x2000u

	)

39990 
	#XTALOSC24M_LOWPWR_CTRL_SET_RCOSC_CG_OVERRIDE_SHIFT
 13

	)

39991 
	#XTALOSC24M_LOWPWR_CTRL_SET_XTALOSC_PWRUP_DELAY_MASK
 0xC000u

	)

39992 
	#XTALOSC24M_LOWPWR_CTRL_SET_XTALOSC_PWRUP_DELAY_SHIFT
 14

	)

39993 
	#XTALOSC24M_LOWPWR_CTRL_SET_XTALOSC_PWRUP_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_LOWPWR_CTRL_SET_XTALOSC_PWRUP_DELAY_SHIFT
))&
XTALOSC24M_LOWPWR_CTRL_SET_XTALOSC_PWRUP_DELAY_MASK
)

	)

39994 
	#XTALOSC24M_LOWPWR_CTRL_SET_XTALOSC_PWRUP_STAT_MASK
 0x10000u

	)

39995 
	#XTALOSC24M_LOWPWR_CTRL_SET_XTALOSC_PWRUP_STAT_SHIFT
 16

	)

39996 
	#XTALOSC24M_LOWPWR_CTRL_SET_MIX_PWRGATE_MASK
 0x20000u

	)

39997 
	#XTALOSC24M_LOWPWR_CTRL_SET_MIX_PWRGATE_SHIFT
 17

	)

39998 
	#XTALOSC24M_LOWPWR_CTRL_SET_GPU_PWRGATE_MASK
 0x40000u

	)

39999 
	#XTALOSC24M_LOWPWR_CTRL_SET_GPU_PWRGATE_SHIFT
 18

	)

40001 
	#XTALOSC24M_LOWPWR_CTRL_CLR_RC_OSC_EN_MASK
 0x1u

	)

40002 
	#XTALOSC24M_LOWPWR_CTRL_CLR_RC_OSC_EN_SHIFT
 0

	)

40003 
	#XTALOSC24M_LOWPWR_CTRL_CLR_RC_OSC_PROG_MASK
 0xEu

	)

40004 
	#XTALOSC24M_LOWPWR_CTRL_CLR_RC_OSC_PROG_SHIFT
 1

	)

40005 
	#XTALOSC24M_LOWPWR_CTRL_CLR_RC_OSC_PROG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_LOWPWR_CTRL_CLR_RC_OSC_PROG_SHIFT
))&
XTALOSC24M_LOWPWR_CTRL_CLR_RC_OSC_PROG_MASK
)

	)

40006 
	#XTALOSC24M_LOWPWR_CTRL_CLR_OSC_SEL_MASK
 0x10u

	)

40007 
	#XTALOSC24M_LOWPWR_CTRL_CLR_OSC_SEL_SHIFT
 4

	)

40008 
	#XTALOSC24M_LOWPWR_CTRL_CLR_LPBG_SEL_MASK
 0x20u

	)

40009 
	#XTALOSC24M_LOWPWR_CTRL_CLR_LPBG_SEL_SHIFT
 5

	)

40010 
	#XTALOSC24M_LOWPWR_CTRL_CLR_LPBG_TEST_MASK
 0x40u

	)

40011 
	#XTALOSC24M_LOWPWR_CTRL_CLR_LPBG_TEST_SHIFT
 6

	)

40012 
	#XTALOSC24M_LOWPWR_CTRL_CLR_REFTOP_IBIAS_OFF_MASK
 0x80u

	)

40013 
	#XTALOSC24M_LOWPWR_CTRL_CLR_REFTOP_IBIAS_OFF_SHIFT
 7

	)

40014 
	#XTALOSC24M_LOWPWR_CTRL_CLR_L1_PWRGATE_MASK
 0x100u

	)

40015 
	#XTALOSC24M_LOWPWR_CTRL_CLR_L1_PWRGATE_SHIFT
 8

	)

40016 
	#XTALOSC24M_LOWPWR_CTRL_CLR_L2_PWRGATE_MASK
 0x200u

	)

40017 
	#XTALOSC24M_LOWPWR_CTRL_CLR_L2_PWRGATE_SHIFT
 9

	)

40018 
	#XTALOSC24M_LOWPWR_CTRL_CLR_CPU_PWRGATE_MASK
 0x400u

	)

40019 
	#XTALOSC24M_LOWPWR_CTRL_CLR_CPU_PWRGATE_SHIFT
 10

	)

40020 
	#XTALOSC24M_LOWPWR_CTRL_CLR_DISPLAY_PWRGATE_MASK
 0x800u

	)

40021 
	#XTALOSC24M_LOWPWR_CTRL_CLR_DISPLAY_PWRGATE_SHIFT
 11

	)

40022 
	#XTALOSC24M_LOWPWR_CTRL_CLR_RCOSC_CG_OVERRIDE_MASK
 0x2000u

	)

40023 
	#XTALOSC24M_LOWPWR_CTRL_CLR_RCOSC_CG_OVERRIDE_SHIFT
 13

	)

40024 
	#XTALOSC24M_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_DELAY_MASK
 0xC000u

	)

40025 
	#XTALOSC24M_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_DELAY_SHIFT
 14

	)

40026 
	#XTALOSC24M_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_DELAY_SHIFT
))&
XTALOSC24M_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_DELAY_MASK
)

	)

40027 
	#XTALOSC24M_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_STAT_MASK
 0x10000u

	)

40028 
	#XTALOSC24M_LOWPWR_CTRL_CLR_XTALOSC_PWRUP_STAT_SHIFT
 16

	)

40029 
	#XTALOSC24M_LOWPWR_CTRL_CLR_MIX_PWRGATE_MASK
 0x20000u

	)

40030 
	#XTALOSC24M_LOWPWR_CTRL_CLR_MIX_PWRGATE_SHIFT
 17

	)

40031 
	#XTALOSC24M_LOWPWR_CTRL_CLR_GPU_PWRGATE_MASK
 0x40000u

	)

40032 
	#XTALOSC24M_LOWPWR_CTRL_CLR_GPU_PWRGATE_SHIFT
 18

	)

40034 
	#XTALOSC24M_LOWPWR_CTRL_TOG_RC_OSC_EN_MASK
 0x1u

	)

40035 
	#XTALOSC24M_LOWPWR_CTRL_TOG_RC_OSC_EN_SHIFT
 0

	)

40036 
	#XTALOSC24M_LOWPWR_CTRL_TOG_RC_OSC_PROG_MASK
 0xEu

	)

40037 
	#XTALOSC24M_LOWPWR_CTRL_TOG_RC_OSC_PROG_SHIFT
 1

	)

40038 
	#XTALOSC24M_LOWPWR_CTRL_TOG_RC_OSC_PROG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_LOWPWR_CTRL_TOG_RC_OSC_PROG_SHIFT
))&
XTALOSC24M_LOWPWR_CTRL_TOG_RC_OSC_PROG_MASK
)

	)

40039 
	#XTALOSC24M_LOWPWR_CTRL_TOG_OSC_SEL_MASK
 0x10u

	)

40040 
	#XTALOSC24M_LOWPWR_CTRL_TOG_OSC_SEL_SHIFT
 4

	)

40041 
	#XTALOSC24M_LOWPWR_CTRL_TOG_LPBG_SEL_MASK
 0x20u

	)

40042 
	#XTALOSC24M_LOWPWR_CTRL_TOG_LPBG_SEL_SHIFT
 5

	)

40043 
	#XTALOSC24M_LOWPWR_CTRL_TOG_LPBG_TEST_MASK
 0x40u

	)

40044 
	#XTALOSC24M_LOWPWR_CTRL_TOG_LPBG_TEST_SHIFT
 6

	)

40045 
	#XTALOSC24M_LOWPWR_CTRL_TOG_REFTOP_IBIAS_OFF_MASK
 0x80u

	)

40046 
	#XTALOSC24M_LOWPWR_CTRL_TOG_REFTOP_IBIAS_OFF_SHIFT
 7

	)

40047 
	#XTALOSC24M_LOWPWR_CTRL_TOG_L1_PWRGATE_MASK
 0x100u

	)

40048 
	#XTALOSC24M_LOWPWR_CTRL_TOG_L1_PWRGATE_SHIFT
 8

	)

40049 
	#XTALOSC24M_LOWPWR_CTRL_TOG_L2_PWRGATE_MASK
 0x200u

	)

40050 
	#XTALOSC24M_LOWPWR_CTRL_TOG_L2_PWRGATE_SHIFT
 9

	)

40051 
	#XTALOSC24M_LOWPWR_CTRL_TOG_CPU_PWRGATE_MASK
 0x400u

	)

40052 
	#XTALOSC24M_LOWPWR_CTRL_TOG_CPU_PWRGATE_SHIFT
 10

	)

40053 
	#XTALOSC24M_LOWPWR_CTRL_TOG_DISPLAY_PWRGATE_MASK
 0x800u

	)

40054 
	#XTALOSC24M_LOWPWR_CTRL_TOG_DISPLAY_PWRGATE_SHIFT
 11

	)

40055 
	#XTALOSC24M_LOWPWR_CTRL_TOG_RCOSC_CG_OVERRIDE_MASK
 0x2000u

	)

40056 
	#XTALOSC24M_LOWPWR_CTRL_TOG_RCOSC_CG_OVERRIDE_SHIFT
 13

	)

40057 
	#XTALOSC24M_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_DELAY_MASK
 0xC000u

	)

40058 
	#XTALOSC24M_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_DELAY_SHIFT
 14

	)

40059 
	#XTALOSC24M_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_DELAY
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_DELAY_SHIFT
))&
XTALOSC24M_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_DELAY_MASK
)

	)

40060 
	#XTALOSC24M_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_STAT_MASK
 0x10000u

	)

40061 
	#XTALOSC24M_LOWPWR_CTRL_TOG_XTALOSC_PWRUP_STAT_SHIFT
 16

	)

40062 
	#XTALOSC24M_LOWPWR_CTRL_TOG_MIX_PWRGATE_MASK
 0x20000u

	)

40063 
	#XTALOSC24M_LOWPWR_CTRL_TOG_MIX_PWRGATE_SHIFT
 17

	)

40064 
	#XTALOSC24M_LOWPWR_CTRL_TOG_GPU_PWRGATE_MASK
 0x40000u

	)

40065 
	#XTALOSC24M_LOWPWR_CTRL_TOG_GPU_PWRGATE_SHIFT
 18

	)

40067 
	#XTALOSC24M_OSC_CONFIG0_START_MASK
 0x1u

	)

40068 
	#XTALOSC24M_OSC_CONFIG0_START_SHIFT
 0

	)

40069 
	#XTALOSC24M_OSC_CONFIG0_ENABLE_MASK
 0x2u

	)

40070 
	#XTALOSC24M_OSC_CONFIG0_ENABLE_SHIFT
 1

	)

40071 
	#XTALOSC24M_OSC_CONFIG0_BYPASS_MASK
 0x4u

	)

40072 
	#XTALOSC24M_OSC_CONFIG0_BYPASS_SHIFT
 2

	)

40073 
	#XTALOSC24M_OSC_CONFIG0_INVERT_MASK
 0x8u

	)

40074 
	#XTALOSC24M_OSC_CONFIG0_INVERT_SHIFT
 3

	)

40075 
	#XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG_MASK
 0xFF0u

	)

40076 
	#XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG_SHIFT
 4

	)

40077 
	#XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG_SHIFT
))&
XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG_MASK
)

	)

40078 
	#XTALOSC24M_OSC_CONFIG0_HYST_PLUS_MASK
 0xF000u

	)

40079 
	#XTALOSC24M_OSC_CONFIG0_HYST_PLUS_SHIFT
 12

	)

40080 
	#XTALOSC24M_OSC_CONFIG0_HYST_PLUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG0_HYST_PLUS_SHIFT
))&
XTALOSC24M_OSC_CONFIG0_HYST_PLUS_MASK
)

	)

40081 
	#XTALOSC24M_OSC_CONFIG0_HYST_MINUS_MASK
 0xF0000u

	)

40082 
	#XTALOSC24M_OSC_CONFIG0_HYST_MINUS_SHIFT
 16

	)

40083 
	#XTALOSC24M_OSC_CONFIG0_HYST_MINUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG0_HYST_MINUS_SHIFT
))&
XTALOSC24M_OSC_CONFIG0_HYST_MINUS_MASK
)

	)

40084 
	#XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG_CUR_MASK
 0xFF000000u

	)

40085 
	#XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG_CUR_SHIFT
 24

	)

40086 
	#XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG_CUR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG_CUR_SHIFT
))&
XTALOSC24M_OSC_CONFIG0_RC_OSC_PROG_CUR_MASK
)

	)

40088 
	#XTALOSC24M_OSC_CONFIG0_SET_START_MASK
 0x1u

	)

40089 
	#XTALOSC24M_OSC_CONFIG0_SET_START_SHIFT
 0

	)

40090 
	#XTALOSC24M_OSC_CONFIG0_SET_ENABLE_MASK
 0x2u

	)

40091 
	#XTALOSC24M_OSC_CONFIG0_SET_ENABLE_SHIFT
 1

	)

40092 
	#XTALOSC24M_OSC_CONFIG0_SET_BYPASS_MASK
 0x4u

	)

40093 
	#XTALOSC24M_OSC_CONFIG0_SET_BYPASS_SHIFT
 2

	)

40094 
	#XTALOSC24M_OSC_CONFIG0_SET_INVERT_MASK
 0x8u

	)

40095 
	#XTALOSC24M_OSC_CONFIG0_SET_INVERT_SHIFT
 3

	)

40096 
	#XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG_MASK
 0xFF0u

	)

40097 
	#XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG_SHIFT
 4

	)

40098 
	#XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG_SHIFT
))&
XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG_MASK
)

	)

40099 
	#XTALOSC24M_OSC_CONFIG0_SET_HYST_PLUS_MASK
 0xF000u

	)

40100 
	#XTALOSC24M_OSC_CONFIG0_SET_HYST_PLUS_SHIFT
 12

	)

40101 
	#XTALOSC24M_OSC_CONFIG0_SET_HYST_PLUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG0_SET_HYST_PLUS_SHIFT
))&
XTALOSC24M_OSC_CONFIG0_SET_HYST_PLUS_MASK
)

	)

40102 
	#XTALOSC24M_OSC_CONFIG0_SET_HYST_MINUS_MASK
 0xF0000u

	)

40103 
	#XTALOSC24M_OSC_CONFIG0_SET_HYST_MINUS_SHIFT
 16

	)

40104 
	#XTALOSC24M_OSC_CONFIG0_SET_HYST_MINUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG0_SET_HYST_MINUS_SHIFT
))&
XTALOSC24M_OSC_CONFIG0_SET_HYST_MINUS_MASK
)

	)

40105 
	#XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG_CUR_MASK
 0xFF000000u

	)

40106 
	#XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG_CUR_SHIFT
 24

	)

40107 
	#XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG_CUR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG_CUR_SHIFT
))&
XTALOSC24M_OSC_CONFIG0_SET_RC_OSC_PROG_CUR_MASK
)

	)

40109 
	#XTALOSC24M_OSC_CONFIG0_CLR_START_MASK
 0x1u

	)

40110 
	#XTALOSC24M_OSC_CONFIG0_CLR_START_SHIFT
 0

	)

40111 
	#XTALOSC24M_OSC_CONFIG0_CLR_ENABLE_MASK
 0x2u

	)

40112 
	#XTALOSC24M_OSC_CONFIG0_CLR_ENABLE_SHIFT
 1

	)

40113 
	#XTALOSC24M_OSC_CONFIG0_CLR_BYPASS_MASK
 0x4u

	)

40114 
	#XTALOSC24M_OSC_CONFIG0_CLR_BYPASS_SHIFT
 2

	)

40115 
	#XTALOSC24M_OSC_CONFIG0_CLR_INVERT_MASK
 0x8u

	)

40116 
	#XTALOSC24M_OSC_CONFIG0_CLR_INVERT_SHIFT
 3

	)

40117 
	#XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG_MASK
 0xFF0u

	)

40118 
	#XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG_SHIFT
 4

	)

40119 
	#XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG_SHIFT
))&
XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG_MASK
)

	)

40120 
	#XTALOSC24M_OSC_CONFIG0_CLR_HYST_PLUS_MASK
 0xF000u

	)

40121 
	#XTALOSC24M_OSC_CONFIG0_CLR_HYST_PLUS_SHIFT
 12

	)

40122 
	#XTALOSC24M_OSC_CONFIG0_CLR_HYST_PLUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG0_CLR_HYST_PLUS_SHIFT
))&
XTALOSC24M_OSC_CONFIG0_CLR_HYST_PLUS_MASK
)

	)

40123 
	#XTALOSC24M_OSC_CONFIG0_CLR_HYST_MINUS_MASK
 0xF0000u

	)

40124 
	#XTALOSC24M_OSC_CONFIG0_CLR_HYST_MINUS_SHIFT
 16

	)

40125 
	#XTALOSC24M_OSC_CONFIG0_CLR_HYST_MINUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG0_CLR_HYST_MINUS_SHIFT
))&
XTALOSC24M_OSC_CONFIG0_CLR_HYST_MINUS_MASK
)

	)

40126 
	#XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG_CUR_MASK
 0xFF000000u

	)

40127 
	#XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG_CUR_SHIFT
 24

	)

40128 
	#XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG_CUR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG_CUR_SHIFT
))&
XTALOSC24M_OSC_CONFIG0_CLR_RC_OSC_PROG_CUR_MASK
)

	)

40130 
	#XTALOSC24M_OSC_CONFIG0_TOG_START_MASK
 0x1u

	)

40131 
	#XTALOSC24M_OSC_CONFIG0_TOG_START_SHIFT
 0

	)

40132 
	#XTALOSC24M_OSC_CONFIG0_TOG_ENABLE_MASK
 0x2u

	)

40133 
	#XTALOSC24M_OSC_CONFIG0_TOG_ENABLE_SHIFT
 1

	)

40134 
	#XTALOSC24M_OSC_CONFIG0_TOG_BYPASS_MASK
 0x4u

	)

40135 
	#XTALOSC24M_OSC_CONFIG0_TOG_BYPASS_SHIFT
 2

	)

40136 
	#XTALOSC24M_OSC_CONFIG0_TOG_INVERT_MASK
 0x8u

	)

40137 
	#XTALOSC24M_OSC_CONFIG0_TOG_INVERT_SHIFT
 3

	)

40138 
	#XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG_MASK
 0xFF0u

	)

40139 
	#XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG_SHIFT
 4

	)

40140 
	#XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG_SHIFT
))&
XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG_MASK
)

	)

40141 
	#XTALOSC24M_OSC_CONFIG0_TOG_HYST_PLUS_MASK
 0xF000u

	)

40142 
	#XTALOSC24M_OSC_CONFIG0_TOG_HYST_PLUS_SHIFT
 12

	)

40143 
	#XTALOSC24M_OSC_CONFIG0_TOG_HYST_PLUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG0_TOG_HYST_PLUS_SHIFT
))&
XTALOSC24M_OSC_CONFIG0_TOG_HYST_PLUS_MASK
)

	)

40144 
	#XTALOSC24M_OSC_CONFIG0_TOG_HYST_MINUS_MASK
 0xF0000u

	)

40145 
	#XTALOSC24M_OSC_CONFIG0_TOG_HYST_MINUS_SHIFT
 16

	)

40146 
	#XTALOSC24M_OSC_CONFIG0_TOG_HYST_MINUS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG0_TOG_HYST_MINUS_SHIFT
))&
XTALOSC24M_OSC_CONFIG0_TOG_HYST_MINUS_MASK
)

	)

40147 
	#XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG_CUR_MASK
 0xFF000000u

	)

40148 
	#XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG_CUR_SHIFT
 24

	)

40149 
	#XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG_CUR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG_CUR_SHIFT
))&
XTALOSC24M_OSC_CONFIG0_TOG_RC_OSC_PROG_CUR_MASK
)

	)

40151 
	#XTALOSC24M_OSC_CONFIG1_COUNT_RC_TRG_MASK
 0xFFFu

	)

40152 
	#XTALOSC24M_OSC_CONFIG1_COUNT_RC_TRG_SHIFT
 0

	)

40153 
	#XTALOSC24M_OSC_CONFIG1_COUNT_RC_TRG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG1_COUNT_RC_TRG_SHIFT
))&
XTALOSC24M_OSC_CONFIG1_COUNT_RC_TRG_MASK
)

	)

40154 
	#XTALOSC24M_OSC_CONFIG1_COUNT_RC_CUR_MASK
 0xFFF00000u

	)

40155 
	#XTALOSC24M_OSC_CONFIG1_COUNT_RC_CUR_SHIFT
 20

	)

40156 
	#XTALOSC24M_OSC_CONFIG1_COUNT_RC_CUR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG1_COUNT_RC_CUR_SHIFT
))&
XTALOSC24M_OSC_CONFIG1_COUNT_RC_CUR_MASK
)

	)

40158 
	#XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_TRG_MASK
 0xFFFu

	)

40159 
	#XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_TRG_SHIFT
 0

	)

40160 
	#XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_TRG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_TRG_SHIFT
))&
XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_TRG_MASK
)

	)

40161 
	#XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_CUR_MASK
 0xFFF00000u

	)

40162 
	#XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_CUR_SHIFT
 20

	)

40163 
	#XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_CUR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_CUR_SHIFT
))&
XTALOSC24M_OSC_CONFIG1_SET_COUNT_RC_CUR_MASK
)

	)

40165 
	#XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_TRG_MASK
 0xFFFu

	)

40166 
	#XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_TRG_SHIFT
 0

	)

40167 
	#XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_TRG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_TRG_SHIFT
))&
XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_TRG_MASK
)

	)

40168 
	#XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_CUR_MASK
 0xFFF00000u

	)

40169 
	#XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_CUR_SHIFT
 20

	)

40170 
	#XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_CUR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_CUR_SHIFT
))&
XTALOSC24M_OSC_CONFIG1_CLR_COUNT_RC_CUR_MASK
)

	)

40172 
	#XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_TRG_MASK
 0xFFFu

	)

40173 
	#XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_TRG_SHIFT
 0

	)

40174 
	#XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_TRG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_TRG_SHIFT
))&
XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_TRG_MASK
)

	)

40175 
	#XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_CUR_MASK
 0xFFF00000u

	)

40176 
	#XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_CUR_SHIFT
 20

	)

40177 
	#XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_CUR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_CUR_SHIFT
))&
XTALOSC24M_OSC_CONFIG1_TOG_COUNT_RC_CUR_MASK
)

	)

40179 
	#XTALOSC24M_OSC_CONFIG2_COUNT_1M_TRG_MASK
 0xFFFu

	)

40180 
	#XTALOSC24M_OSC_CONFIG2_COUNT_1M_TRG_SHIFT
 0

	)

40181 
	#XTALOSC24M_OSC_CONFIG2_COUNT_1M_TRG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG2_COUNT_1M_TRG_SHIFT
))&
XTALOSC24M_OSC_CONFIG2_COUNT_1M_TRG_MASK
)

	)

40182 
	#XTALOSC24M_OSC_CONFIG2_ENABLE_1M_MASK
 0x10000u

	)

40183 
	#XTALOSC24M_OSC_CONFIG2_ENABLE_1M_SHIFT
 16

	)

40184 
	#XTALOSC24M_OSC_CONFIG2_MUX_1M_MASK
 0x20000u

	)

40185 
	#XTALOSC24M_OSC_CONFIG2_MUX_1M_SHIFT
 17

	)

40186 
	#XTALOSC24M_OSC_CONFIG2_CLK_1M_ERR_FL_MASK
 0x80000000u

	)

40187 
	#XTALOSC24M_OSC_CONFIG2_CLK_1M_ERR_FL_SHIFT
 31

	)

40189 
	#XTALOSC24M_OSC_CONFIG2_SET_COUNT_1M_TRG_MASK
 0xFFFu

	)

40190 
	#XTALOSC24M_OSC_CONFIG2_SET_COUNT_1M_TRG_SHIFT
 0

	)

40191 
	#XTALOSC24M_OSC_CONFIG2_SET_COUNT_1M_TRG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG2_SET_COUNT_1M_TRG_SHIFT
))&
XTALOSC24M_OSC_CONFIG2_SET_COUNT_1M_TRG_MASK
)

	)

40192 
	#XTALOSC24M_OSC_CONFIG2_SET_ENABLE_1M_MASK
 0x10000u

	)

40193 
	#XTALOSC24M_OSC_CONFIG2_SET_ENABLE_1M_SHIFT
 16

	)

40194 
	#XTALOSC24M_OSC_CONFIG2_SET_MUX_1M_MASK
 0x20000u

	)

40195 
	#XTALOSC24M_OSC_CONFIG2_SET_MUX_1M_SHIFT
 17

	)

40196 
	#XTALOSC24M_OSC_CONFIG2_SET_CLK_1M_ERR_FL_MASK
 0x80000000u

	)

40197 
	#XTALOSC24M_OSC_CONFIG2_SET_CLK_1M_ERR_FL_SHIFT
 31

	)

40199 
	#XTALOSC24M_OSC_CONFIG2_CLR_COUNT_1M_TRG_MASK
 0xFFFu

	)

40200 
	#XTALOSC24M_OSC_CONFIG2_CLR_COUNT_1M_TRG_SHIFT
 0

	)

40201 
	#XTALOSC24M_OSC_CONFIG2_CLR_COUNT_1M_TRG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG2_CLR_COUNT_1M_TRG_SHIFT
))&
XTALOSC24M_OSC_CONFIG2_CLR_COUNT_1M_TRG_MASK
)

	)

40202 
	#XTALOSC24M_OSC_CONFIG2_CLR_ENABLE_1M_MASK
 0x10000u

	)

40203 
	#XTALOSC24M_OSC_CONFIG2_CLR_ENABLE_1M_SHIFT
 16

	)

40204 
	#XTALOSC24M_OSC_CONFIG2_CLR_MUX_1M_MASK
 0x20000u

	)

40205 
	#XTALOSC24M_OSC_CONFIG2_CLR_MUX_1M_SHIFT
 17

	)

40206 
	#XTALOSC24M_OSC_CONFIG2_CLR_CLK_1M_ERR_FL_MASK
 0x80000000u

	)

40207 
	#XTALOSC24M_OSC_CONFIG2_CLR_CLK_1M_ERR_FL_SHIFT
 31

	)

40209 
	#XTALOSC24M_OSC_CONFIG2_TOG_COUNT_1M_TRG_MASK
 0xFFFu

	)

40210 
	#XTALOSC24M_OSC_CONFIG2_TOG_COUNT_1M_TRG_SHIFT
 0

	)

40211 
	#XTALOSC24M_OSC_CONFIG2_TOG_COUNT_1M_TRG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
XTALOSC24M_OSC_CONFIG2_TOG_COUNT_1M_TRG_SHIFT
))&
XTALOSC24M_OSC_CONFIG2_TOG_COUNT_1M_TRG_MASK
)

	)

40212 
	#XTALOSC24M_OSC_CONFIG2_TOG_ENABLE_1M_MASK
 0x10000u

	)

40213 
	#XTALOSC24M_OSC_CONFIG2_TOG_ENABLE_1M_SHIFT
 16

	)

40214 
	#XTALOSC24M_OSC_CONFIG2_TOG_MUX_1M_MASK
 0x20000u

	)

40215 
	#XTALOSC24M_OSC_CONFIG2_TOG_MUX_1M_SHIFT
 17

	)

40216 
	#XTALOSC24M_OSC_CONFIG2_TOG_CLK_1M_ERR_FL_MASK
 0x80000000u

	)

40217 
	#XTALOSC24M_OSC_CONFIG2_TOG_CLK_1M_ERR_FL_SHIFT
 31

	)

40225 
	#XTALOSC24M_BASE
 (0x420C8000u)

	)

40227 
	#XTALOSC24M
 ((
XTALOSC24M_Ty≥
 *)
XTALOSC24M_BASE
)

	)

40228 
	#XTALOSC24M_BASE_PTR
 (
XTALOSC24M
)

	)

40230 
	#XTALOSC24M_BASE_ADDRS
 { 
XTALOSC24M_BASE
 }

	)

40232 
	#XTALOSC24M_BASE_PTRS
 { 
XTALOSC24M
 }

	)

40245 
	#XTALOSC24M_MISC0
 
	`XTALOSC24M_MISC0_REG
(
XTALOSC24M_BASE_PTR
)

	)

40246 
	#XTALOSC24M_LOWPWR_CTRL
 
	`XTALOSC24M_LOWPWR_CTRL_REG
(
XTALOSC24M_BASE_PTR
)

	)

40247 
	#XTALOSC24M_LOWPWR_CTRL_SET
 
	`XTALOSC24M_LOWPWR_CTRL_SET_REG
(
XTALOSC24M_BASE_PTR
)

	)

40248 
	#XTALOSC24M_LOWPWR_CTRL_CLR
 
	`XTALOSC24M_LOWPWR_CTRL_CLR_REG
(
XTALOSC24M_BASE_PTR
)

	)

40249 
	#XTALOSC24M_LOWPWR_CTRL_TOG
 
	`XTALOSC24M_LOWPWR_CTRL_TOG_REG
(
XTALOSC24M_BASE_PTR
)

	)

40250 
	#XTALOSC24M_OSC_CONFIG0
 
	`XTALOSC24M_OSC_CONFIG0_REG
(
XTALOSC24M_BASE_PTR
)

	)

40251 
	#XTALOSC24M_OSC_CONFIG0_SET
 
	`XTALOSC24M_OSC_CONFIG0_SET_REG
(
XTALOSC24M_BASE_PTR
)

	)

40252 
	#XTALOSC24M_OSC_CONFIG0_CLR
 
	`XTALOSC24M_OSC_CONFIG0_CLR_REG
(
XTALOSC24M_BASE_PTR
)

	)

40253 
	#XTALOSC24M_OSC_CONFIG0_TOG
 
	`XTALOSC24M_OSC_CONFIG0_TOG_REG
(
XTALOSC24M_BASE_PTR
)

	)

40254 
	#XTALOSC24M_OSC_CONFIG1
 
	`XTALOSC24M_OSC_CONFIG1_REG
(
XTALOSC24M_BASE_PTR
)

	)

40255 
	#XTALOSC24M_OSC_CONFIG1_SET
 
	`XTALOSC24M_OSC_CONFIG1_SET_REG
(
XTALOSC24M_BASE_PTR
)

	)

40256 
	#XTALOSC24M_OSC_CONFIG1_CLR
 
	`XTALOSC24M_OSC_CONFIG1_CLR_REG
(
XTALOSC24M_BASE_PTR
)

	)

40257 
	#XTALOSC24M_OSC_CONFIG1_TOG
 
	`XTALOSC24M_OSC_CONFIG1_TOG_REG
(
XTALOSC24M_BASE_PTR
)

	)

40258 
	#XTALOSC24M_OSC_CONFIG2
 
	`XTALOSC24M_OSC_CONFIG2_REG
(
XTALOSC24M_BASE_PTR
)

	)

40259 
	#XTALOSC24M_OSC_CONFIG2_SET
 
	`XTALOSC24M_OSC_CONFIG2_SET_REG
(
XTALOSC24M_BASE_PTR
)

	)

40260 
	#XTALOSC24M_OSC_CONFIG2_CLR
 
	`XTALOSC24M_OSC_CONFIG2_CLR_REG
(
XTALOSC24M_BASE_PTR
)

	)

40261 
	#XTALOSC24M_OSC_CONFIG2_TOG
 
	`XTALOSC24M_OSC_CONFIG2_TOG_REG
(
XTALOSC24M_BASE_PTR
)

	)

40282 
__IO
 
uöt32_t
 
	mDS_ADDR
;

40283 
__IO
 
uöt32_t
 
	mBLK_ATT
;

40284 
__IO
 
uöt32_t
 
	mCMD_ARG
;

40285 
__IO
 
uöt32_t
 
	mCMD_XFR_TYP
;

40286 
__I
 
uöt32_t
 
	mCMD_RSP0
;

40287 
__I
 
uöt32_t
 
	mCMD_RSP1
;

40288 
__I
 
uöt32_t
 
	mCMD_RSP2
;

40289 
__I
 
uöt32_t
 
	mCMD_RSP3
;

40290 
__IO
 
uöt32_t
 
	mDATA_BUFF_ACC_PORT
;

40291 
__I
 
uöt32_t
 
	mPRES_STATE
;

40292 
__IO
 
uöt32_t
 
	mPROT_CTRL
;

40293 
__IO
 
uöt32_t
 
	mSYS_CTRL
;

40294 
__IO
 
uöt32_t
 
	mINT_STATUS
;

40295 
__IO
 
uöt32_t
 
	mINT_STATUS_EN
;

40296 
__IO
 
uöt32_t
 
	mINT_SIGNAL_EN
;

40297 
__I
 
uöt32_t
 
	mAUTOCMD12_ERR_STATUS
;

40298 
__I
 
uöt32_t
 
	mHOST_CTRL_CAP
;

40299 
__IO
 
uöt32_t
 
	mWTMK_LVL
;

40300 
__IO
 
uöt32_t
 
	mMIX_CTRL
;

40301 
uöt8_t
 
	mRESERVED_0
[4];

40302 
__O
 
uöt32_t
 
	mFORCE_EVENT
;

40303 
__I
 
uöt32_t
 
	mADMA_ERR_STATUS
;

40304 
__IO
 
uöt32_t
 
	mADMA_SYS_ADDR
;

40305 
uöt8_t
 
	mRESERVED_1
[4];

40306 
__IO
 
uöt32_t
 
	mDLL_CTRL
;

40307 
__I
 
uöt32_t
 
	mDLL_STATUS
;

40308 
__IO
 
uöt32_t
 
	mCLK_TUNE_CTRL_STATUS
;

40309 
uöt8_t
 
	mRESERVED_2
[84];

40310 
__IO
 
uöt32_t
 
	mVEND_SPEC
;

40311 
__IO
 
uöt32_t
 
	mMMC_BOOT
;

40312 
__IO
 
uöt32_t
 
	mVEND_SPEC2
;

40313 
__IO
 
uöt32_t
 
	mTUNING_CTRL
;

40314 } 
	tuSDHC_Ty≥
, *
	tuSDHC_MemM≠På
;

40326 
	#uSDHC_DS_ADDR_REG
(
ba£
Ë((ba£)->
DS_ADDR
)

	)

40327 
	#uSDHC_BLK_ATT_REG
(
ba£
Ë((ba£)->
BLK_ATT
)

	)

40328 
	#uSDHC_CMD_ARG_REG
(
ba£
Ë((ba£)->
CMD_ARG
)

	)

40329 
	#uSDHC_CMD_XFR_TYP_REG
(
ba£
Ë((ba£)->
CMD_XFR_TYP
)

	)

40330 
	#uSDHC_CMD_RSP0_REG
(
ba£
Ë((ba£)->
CMD_RSP0
)

	)

40331 
	#uSDHC_CMD_RSP1_REG
(
ba£
Ë((ba£)->
CMD_RSP1
)

	)

40332 
	#uSDHC_CMD_RSP2_REG
(
ba£
Ë((ba£)->
CMD_RSP2
)

	)

40333 
	#uSDHC_CMD_RSP3_REG
(
ba£
Ë((ba£)->
CMD_RSP3
)

	)

40334 
	#uSDHC_DATA_BUFF_ACC_PORT_REG
(
ba£
Ë((ba£)->
DATA_BUFF_ACC_PORT
)

	)

40335 
	#uSDHC_PRES_STATE_REG
(
ba£
Ë((ba£)->
PRES_STATE
)

	)

40336 
	#uSDHC_PROT_CTRL_REG
(
ba£
Ë((ba£)->
PROT_CTRL
)

	)

40337 
	#uSDHC_SYS_CTRL_REG
(
ba£
Ë((ba£)->
SYS_CTRL
)

	)

40338 
	#uSDHC_INT_STATUS_REG
(
ba£
Ë((ba£)->
INT_STATUS
)

	)

40339 
	#uSDHC_INT_STATUS_EN_REG
(
ba£
Ë((ba£)->
INT_STATUS_EN
)

	)

40340 
	#uSDHC_INT_SIGNAL_EN_REG
(
ba£
Ë((ba£)->
INT_SIGNAL_EN
)

	)

40341 
	#uSDHC_AUTOCMD12_ERR_STATUS_REG
(
ba£
Ë((ba£)->
AUTOCMD12_ERR_STATUS
)

	)

40342 
	#uSDHC_HOST_CTRL_CAP_REG
(
ba£
Ë((ba£)->
HOST_CTRL_CAP
)

	)

40343 
	#uSDHC_WTMK_LVL_REG
(
ba£
Ë((ba£)->
WTMK_LVL
)

	)

40344 
	#uSDHC_MIX_CTRL_REG
(
ba£
Ë((ba£)->
MIX_CTRL
)

	)

40345 
	#uSDHC_FORCE_EVENT_REG
(
ba£
Ë((ba£)->
FORCE_EVENT
)

	)

40346 
	#uSDHC_ADMA_ERR_STATUS_REG
(
ba£
Ë((ba£)->
ADMA_ERR_STATUS
)

	)

40347 
	#uSDHC_ADMA_SYS_ADDR_REG
(
ba£
Ë((ba£)->
ADMA_SYS_ADDR
)

	)

40348 
	#uSDHC_DLL_CTRL_REG
(
ba£
Ë((ba£)->
DLL_CTRL
)

	)

40349 
	#uSDHC_DLL_STATUS_REG
(
ba£
Ë((ba£)->
DLL_STATUS
)

	)

40350 
	#uSDHC_CLK_TUNE_CTRL_STATUS_REG
(
ba£
Ë((ba£)->
CLK_TUNE_CTRL_STATUS
)

	)

40351 
	#uSDHC_VEND_SPEC_REG
(
ba£
Ë((ba£)->
VEND_SPEC
)

	)

40352 
	#uSDHC_MMC_BOOT_REG
(
ba£
Ë((ba£)->
MMC_BOOT
)

	)

40353 
	#uSDHC_VEND_SPEC2_REG
(
ba£
Ë((ba£)->
VEND_SPEC2
)

	)

40354 
	#uSDHC_TUNING_CTRL_REG
(
ba£
Ë((ba£)->
TUNING_CTRL
)

	)

40370 
	#uSDHC_DS_ADDR_DS_ADDR_MASK
 0xFFFFFFFCu

	)

40371 
	#uSDHC_DS_ADDR_DS_ADDR_SHIFT
 2

	)

40372 
	#uSDHC_DS_ADDR_DS_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_DS_ADDR_DS_ADDR_SHIFT
))&
uSDHC_DS_ADDR_DS_ADDR_MASK
)

	)

40374 
	#uSDHC_BLK_ATT_BLKSIZE_MASK
 0x1FFFu

	)

40375 
	#uSDHC_BLK_ATT_BLKSIZE_SHIFT
 0

	)

40376 
	#uSDHC_BLK_ATT_BLKSIZE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_BLK_ATT_BLKSIZE_SHIFT
))&
uSDHC_BLK_ATT_BLKSIZE_MASK
)

	)

40377 
	#uSDHC_BLK_ATT_BLKCNT_MASK
 0xFFFF0000u

	)

40378 
	#uSDHC_BLK_ATT_BLKCNT_SHIFT
 16

	)

40379 
	#uSDHC_BLK_ATT_BLKCNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_BLK_ATT_BLKCNT_SHIFT
))&
uSDHC_BLK_ATT_BLKCNT_MASK
)

	)

40381 
	#uSDHC_CMD_ARG_CMDARG_MASK
 0xFFFFFFFFu

	)

40382 
	#uSDHC_CMD_ARG_CMDARG_SHIFT
 0

	)

40383 
	#uSDHC_CMD_ARG_CMDARG
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_CMD_ARG_CMDARG_SHIFT
))&
uSDHC_CMD_ARG_CMDARG_MASK
)

	)

40385 
	#uSDHC_CMD_XFR_TYP_RSPTYP_MASK
 0x30000u

	)

40386 
	#uSDHC_CMD_XFR_TYP_RSPTYP_SHIFT
 16

	)

40387 
	#uSDHC_CMD_XFR_TYP_RSPTYP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_CMD_XFR_TYP_RSPTYP_SHIFT
))&
uSDHC_CMD_XFR_TYP_RSPTYP_MASK
)

	)

40388 
	#uSDHC_CMD_XFR_TYP_CCCEN_MASK
 0x80000u

	)

40389 
	#uSDHC_CMD_XFR_TYP_CCCEN_SHIFT
 19

	)

40390 
	#uSDHC_CMD_XFR_TYP_CICEN_MASK
 0x100000u

	)

40391 
	#uSDHC_CMD_XFR_TYP_CICEN_SHIFT
 20

	)

40392 
	#uSDHC_CMD_XFR_TYP_DPSEL_MASK
 0x200000u

	)

40393 
	#uSDHC_CMD_XFR_TYP_DPSEL_SHIFT
 21

	)

40394 
	#uSDHC_CMD_XFR_TYP_CMDTYP_MASK
 0xC00000u

	)

40395 
	#uSDHC_CMD_XFR_TYP_CMDTYP_SHIFT
 22

	)

40396 
	#uSDHC_CMD_XFR_TYP_CMDTYP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_CMD_XFR_TYP_CMDTYP_SHIFT
))&
uSDHC_CMD_XFR_TYP_CMDTYP_MASK
)

	)

40397 
	#uSDHC_CMD_XFR_TYP_CMDINX_MASK
 0x3F000000u

	)

40398 
	#uSDHC_CMD_XFR_TYP_CMDINX_SHIFT
 24

	)

40399 
	#uSDHC_CMD_XFR_TYP_CMDINX
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_CMD_XFR_TYP_CMDINX_SHIFT
))&
uSDHC_CMD_XFR_TYP_CMDINX_MASK
)

	)

40401 
	#uSDHC_CMD_RSP0_CMDRSP0_MASK
 0xFFFFFFFFu

	)

40402 
	#uSDHC_CMD_RSP0_CMDRSP0_SHIFT
 0

	)

40403 
	#uSDHC_CMD_RSP0_CMDRSP0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_CMD_RSP0_CMDRSP0_SHIFT
))&
uSDHC_CMD_RSP0_CMDRSP0_MASK
)

	)

40405 
	#uSDHC_CMD_RSP1_CMDRSP1_MASK
 0xFFFFFFFFu

	)

40406 
	#uSDHC_CMD_RSP1_CMDRSP1_SHIFT
 0

	)

40407 
	#uSDHC_CMD_RSP1_CMDRSP1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_CMD_RSP1_CMDRSP1_SHIFT
))&
uSDHC_CMD_RSP1_CMDRSP1_MASK
)

	)

40409 
	#uSDHC_CMD_RSP2_CMDRSP2_MASK
 0xFFFFFFFFu

	)

40410 
	#uSDHC_CMD_RSP2_CMDRSP2_SHIFT
 0

	)

40411 
	#uSDHC_CMD_RSP2_CMDRSP2
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_CMD_RSP2_CMDRSP2_SHIFT
))&
uSDHC_CMD_RSP2_CMDRSP2_MASK
)

	)

40413 
	#uSDHC_CMD_RSP3_CMDRSP3_MASK
 0xFFFFFFFFu

	)

40414 
	#uSDHC_CMD_RSP3_CMDRSP3_SHIFT
 0

	)

40415 
	#uSDHC_CMD_RSP3_CMDRSP3
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_CMD_RSP3_CMDRSP3_SHIFT
))&
uSDHC_CMD_RSP3_CMDRSP3_MASK
)

	)

40417 
	#uSDHC_DATA_BUFF_ACC_PORT_DATCONT_MASK
 0xFFFFFFFFu

	)

40418 
	#uSDHC_DATA_BUFF_ACC_PORT_DATCONT_SHIFT
 0

	)

40419 
	#uSDHC_DATA_BUFF_ACC_PORT_DATCONT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_DATA_BUFF_ACC_PORT_DATCONT_SHIFT
))&
uSDHC_DATA_BUFF_ACC_PORT_DATCONT_MASK
)

	)

40421 
	#uSDHC_PRES_STATE_CIHB_MASK
 0x1u

	)

40422 
	#uSDHC_PRES_STATE_CIHB_SHIFT
 0

	)

40423 
	#uSDHC_PRES_STATE_CDIHB_MASK
 0x2u

	)

40424 
	#uSDHC_PRES_STATE_CDIHB_SHIFT
 1

	)

40425 
	#uSDHC_PRES_STATE_DLA_MASK
 0x4u

	)

40426 
	#uSDHC_PRES_STATE_DLA_SHIFT
 2

	)

40427 
	#uSDHC_PRES_STATE_SDSTB_MASK
 0x8u

	)

40428 
	#uSDHC_PRES_STATE_SDSTB_SHIFT
 3

	)

40429 
	#uSDHC_PRES_STATE_IPGOFF_MASK
 0x10u

	)

40430 
	#uSDHC_PRES_STATE_IPGOFF_SHIFT
 4

	)

40431 
	#uSDHC_PRES_STATE_HCKOFF_MASK
 0x20u

	)

40432 
	#uSDHC_PRES_STATE_HCKOFF_SHIFT
 5

	)

40433 
	#uSDHC_PRES_STATE_PEROFF_MASK
 0x40u

	)

40434 
	#uSDHC_PRES_STATE_PEROFF_SHIFT
 6

	)

40435 
	#uSDHC_PRES_STATE_SDOFF_MASK
 0x80u

	)

40436 
	#uSDHC_PRES_STATE_SDOFF_SHIFT
 7

	)

40437 
	#uSDHC_PRES_STATE_WTA_MASK
 0x100u

	)

40438 
	#uSDHC_PRES_STATE_WTA_SHIFT
 8

	)

40439 
	#uSDHC_PRES_STATE_RTA_MASK
 0x200u

	)

40440 
	#uSDHC_PRES_STATE_RTA_SHIFT
 9

	)

40441 
	#uSDHC_PRES_STATE_BWEN_MASK
 0x400u

	)

40442 
	#uSDHC_PRES_STATE_BWEN_SHIFT
 10

	)

40443 
	#uSDHC_PRES_STATE_BREN_MASK
 0x800u

	)

40444 
	#uSDHC_PRES_STATE_BREN_SHIFT
 11

	)

40445 
	#uSDHC_PRES_STATE_RTR_MASK
 0x1000u

	)

40446 
	#uSDHC_PRES_STATE_RTR_SHIFT
 12

	)

40447 
	#uSDHC_PRES_STATE_TSCD_MASK
 0x8000u

	)

40448 
	#uSDHC_PRES_STATE_TSCD_SHIFT
 15

	)

40449 
	#uSDHC_PRES_STATE_CINST_MASK
 0x10000u

	)

40450 
	#uSDHC_PRES_STATE_CINST_SHIFT
 16

	)

40451 
	#uSDHC_PRES_STATE_CDPL_MASK
 0x40000u

	)

40452 
	#uSDHC_PRES_STATE_CDPL_SHIFT
 18

	)

40453 
	#uSDHC_PRES_STATE_WPSPL_MASK
 0x80000u

	)

40454 
	#uSDHC_PRES_STATE_WPSPL_SHIFT
 19

	)

40455 
	#uSDHC_PRES_STATE_CLSL_MASK
 0x800000u

	)

40456 
	#uSDHC_PRES_STATE_CLSL_SHIFT
 23

	)

40457 
	#uSDHC_PRES_STATE_DLSL_MASK
 0xFF000000u

	)

40458 
	#uSDHC_PRES_STATE_DLSL_SHIFT
 24

	)

40459 
	#uSDHC_PRES_STATE_DLSL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_PRES_STATE_DLSL_SHIFT
))&
uSDHC_PRES_STATE_DLSL_MASK
)

	)

40461 
	#uSDHC_PROT_CTRL_LCTL_MASK
 0x1u

	)

40462 
	#uSDHC_PROT_CTRL_LCTL_SHIFT
 0

	)

40463 
	#uSDHC_PROT_CTRL_DTW_MASK
 0x6u

	)

40464 
	#uSDHC_PROT_CTRL_DTW_SHIFT
 1

	)

40465 
	#uSDHC_PROT_CTRL_DTW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_PROT_CTRL_DTW_SHIFT
))&
uSDHC_PROT_CTRL_DTW_MASK
)

	)

40466 
	#uSDHC_PROT_CTRL_D3CD_MASK
 0x8u

	)

40467 
	#uSDHC_PROT_CTRL_D3CD_SHIFT
 3

	)

40468 
	#uSDHC_PROT_CTRL_EMODE_MASK
 0x30u

	)

40469 
	#uSDHC_PROT_CTRL_EMODE_SHIFT
 4

	)

40470 
	#uSDHC_PROT_CTRL_EMODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_PROT_CTRL_EMODE_SHIFT
))&
uSDHC_PROT_CTRL_EMODE_MASK
)

	)

40471 
	#uSDHC_PROT_CTRL_CDTL_MASK
 0x40u

	)

40472 
	#uSDHC_PROT_CTRL_CDTL_SHIFT
 6

	)

40473 
	#uSDHC_PROT_CTRL_CDSS_MASK
 0x80u

	)

40474 
	#uSDHC_PROT_CTRL_CDSS_SHIFT
 7

	)

40475 
	#uSDHC_PROT_CTRL_DMASEL_MASK
 0x300u

	)

40476 
	#uSDHC_PROT_CTRL_DMASEL_SHIFT
 8

	)

40477 
	#uSDHC_PROT_CTRL_DMASEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_PROT_CTRL_DMASEL_SHIFT
))&
uSDHC_PROT_CTRL_DMASEL_MASK
)

	)

40478 
	#uSDHC_PROT_CTRL_SABGREQ_MASK
 0x10000u

	)

40479 
	#uSDHC_PROT_CTRL_SABGREQ_SHIFT
 16

	)

40480 
	#uSDHC_PROT_CTRL_CREQ_MASK
 0x20000u

	)

40481 
	#uSDHC_PROT_CTRL_CREQ_SHIFT
 17

	)

40482 
	#uSDHC_PROT_CTRL_RWCTL_MASK
 0x40000u

	)

40483 
	#uSDHC_PROT_CTRL_RWCTL_SHIFT
 18

	)

40484 
	#uSDHC_PROT_CTRL_IABG_MASK
 0x80000u

	)

40485 
	#uSDHC_PROT_CTRL_IABG_SHIFT
 19

	)

40486 
	#uSDHC_PROT_CTRL_RD_DONE_NO_8CLK_MASK
 0x100000u

	)

40487 
	#uSDHC_PROT_CTRL_RD_DONE_NO_8CLK_SHIFT
 20

	)

40488 
	#uSDHC_PROT_CTRL_WECINT_MASK
 0x1000000u

	)

40489 
	#uSDHC_PROT_CTRL_WECINT_SHIFT
 24

	)

40490 
	#uSDHC_PROT_CTRL_WECINS_MASK
 0x2000000u

	)

40491 
	#uSDHC_PROT_CTRL_WECINS_SHIFT
 25

	)

40492 
	#uSDHC_PROT_CTRL_WECRM_MASK
 0x4000000u

	)

40493 
	#uSDHC_PROT_CTRL_WECRM_SHIFT
 26

	)

40494 
	#uSDHC_PROT_CTRL_BURST_LEN_EN_MASK
 0x38000000u

	)

40495 
	#uSDHC_PROT_CTRL_BURST_LEN_EN_SHIFT
 27

	)

40496 
	#uSDHC_PROT_CTRL_BURST_LEN_EN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_PROT_CTRL_BURST_LEN_EN_SHIFT
))&
uSDHC_PROT_CTRL_BURST_LEN_EN_MASK
)

	)

40497 
	#uSDHC_PROT_CTRL_NON_EXACT_BLK_RD_MASK
 0x40000000u

	)

40498 
	#uSDHC_PROT_CTRL_NON_EXACT_BLK_RD_SHIFT
 30

	)

40500 
	#uSDHC_SYS_CTRL_DVS_MASK
 0xF0u

	)

40501 
	#uSDHC_SYS_CTRL_DVS_SHIFT
 4

	)

40502 
	#uSDHC_SYS_CTRL_DVS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_SYS_CTRL_DVS_SHIFT
))&
uSDHC_SYS_CTRL_DVS_MASK
)

	)

40503 
	#uSDHC_SYS_CTRL_SDCLKFS_MASK
 0xFF00u

	)

40504 
	#uSDHC_SYS_CTRL_SDCLKFS_SHIFT
 8

	)

40505 
	#uSDHC_SYS_CTRL_SDCLKFS
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_SYS_CTRL_SDCLKFS_SHIFT
))&
uSDHC_SYS_CTRL_SDCLKFS_MASK
)

	)

40506 
	#uSDHC_SYS_CTRL_DTOCV_MASK
 0xF0000u

	)

40507 
	#uSDHC_SYS_CTRL_DTOCV_SHIFT
 16

	)

40508 
	#uSDHC_SYS_CTRL_DTOCV
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_SYS_CTRL_DTOCV_SHIFT
))&
uSDHC_SYS_CTRL_DTOCV_MASK
)

	)

40509 
	#uSDHC_SYS_CTRL_IPP_RST_N_MASK
 0x800000u

	)

40510 
	#uSDHC_SYS_CTRL_IPP_RST_N_SHIFT
 23

	)

40511 
	#uSDHC_SYS_CTRL_RSTA_MASK
 0x1000000u

	)

40512 
	#uSDHC_SYS_CTRL_RSTA_SHIFT
 24

	)

40513 
	#uSDHC_SYS_CTRL_RSTC_MASK
 0x2000000u

	)

40514 
	#uSDHC_SYS_CTRL_RSTC_SHIFT
 25

	)

40515 
	#uSDHC_SYS_CTRL_RSTD_MASK
 0x4000000u

	)

40516 
	#uSDHC_SYS_CTRL_RSTD_SHIFT
 26

	)

40517 
	#uSDHC_SYS_CTRL_INITA_MASK
 0x8000000u

	)

40518 
	#uSDHC_SYS_CTRL_INITA_SHIFT
 27

	)

40519 
	#uSDHC_SYS_CTRL_RSTT_MASK
 0x10000000u

	)

40520 
	#uSDHC_SYS_CTRL_RSTT_SHIFT
 28

	)

40522 
	#uSDHC_INT_STATUS_CC_MASK
 0x1u

	)

40523 
	#uSDHC_INT_STATUS_CC_SHIFT
 0

	)

40524 
	#uSDHC_INT_STATUS_TC_MASK
 0x2u

	)

40525 
	#uSDHC_INT_STATUS_TC_SHIFT
 1

	)

40526 
	#uSDHC_INT_STATUS_BGE_MASK
 0x4u

	)

40527 
	#uSDHC_INT_STATUS_BGE_SHIFT
 2

	)

40528 
	#uSDHC_INT_STATUS_DINT_MASK
 0x8u

	)

40529 
	#uSDHC_INT_STATUS_DINT_SHIFT
 3

	)

40530 
	#uSDHC_INT_STATUS_BWR_MASK
 0x10u

	)

40531 
	#uSDHC_INT_STATUS_BWR_SHIFT
 4

	)

40532 
	#uSDHC_INT_STATUS_BRR_MASK
 0x20u

	)

40533 
	#uSDHC_INT_STATUS_BRR_SHIFT
 5

	)

40534 
	#uSDHC_INT_STATUS_CINS_MASK
 0x40u

	)

40535 
	#uSDHC_INT_STATUS_CINS_SHIFT
 6

	)

40536 
	#uSDHC_INT_STATUS_CRM_MASK
 0x80u

	)

40537 
	#uSDHC_INT_STATUS_CRM_SHIFT
 7

	)

40538 
	#uSDHC_INT_STATUS_CINT_MASK
 0x100u

	)

40539 
	#uSDHC_INT_STATUS_CINT_SHIFT
 8

	)

40540 
	#uSDHC_INT_STATUS_RTE_MASK
 0x1000u

	)

40541 
	#uSDHC_INT_STATUS_RTE_SHIFT
 12

	)

40542 
	#uSDHC_INT_STATUS_TP_MASK
 0x4000u

	)

40543 
	#uSDHC_INT_STATUS_TP_SHIFT
 14

	)

40544 
	#uSDHC_INT_STATUS_CTOE_MASK
 0x10000u

	)

40545 
	#uSDHC_INT_STATUS_CTOE_SHIFT
 16

	)

40546 
	#uSDHC_INT_STATUS_CCE_MASK
 0x20000u

	)

40547 
	#uSDHC_INT_STATUS_CCE_SHIFT
 17

	)

40548 
	#uSDHC_INT_STATUS_CEBE_MASK
 0x40000u

	)

40549 
	#uSDHC_INT_STATUS_CEBE_SHIFT
 18

	)

40550 
	#uSDHC_INT_STATUS_CIE_MASK
 0x80000u

	)

40551 
	#uSDHC_INT_STATUS_CIE_SHIFT
 19

	)

40552 
	#uSDHC_INT_STATUS_DTOE_MASK
 0x100000u

	)

40553 
	#uSDHC_INT_STATUS_DTOE_SHIFT
 20

	)

40554 
	#uSDHC_INT_STATUS_DCE_MASK
 0x200000u

	)

40555 
	#uSDHC_INT_STATUS_DCE_SHIFT
 21

	)

40556 
	#uSDHC_INT_STATUS_DEBE_MASK
 0x400000u

	)

40557 
	#uSDHC_INT_STATUS_DEBE_SHIFT
 22

	)

40558 
	#uSDHC_INT_STATUS_AC12E_MASK
 0x1000000u

	)

40559 
	#uSDHC_INT_STATUS_AC12E_SHIFT
 24

	)

40560 
	#uSDHC_INT_STATUS_TNE_MASK
 0x4000000u

	)

40561 
	#uSDHC_INT_STATUS_TNE_SHIFT
 26

	)

40562 
	#uSDHC_INT_STATUS_DMAE_MASK
 0x10000000u

	)

40563 
	#uSDHC_INT_STATUS_DMAE_SHIFT
 28

	)

40565 
	#uSDHC_INT_STATUS_EN_CCSEN_MASK
 0x1u

	)

40566 
	#uSDHC_INT_STATUS_EN_CCSEN_SHIFT
 0

	)

40567 
	#uSDHC_INT_STATUS_EN_TCSEN_MASK
 0x2u

	)

40568 
	#uSDHC_INT_STATUS_EN_TCSEN_SHIFT
 1

	)

40569 
	#uSDHC_INT_STATUS_EN_BGESEN_MASK
 0x4u

	)

40570 
	#uSDHC_INT_STATUS_EN_BGESEN_SHIFT
 2

	)

40571 
	#uSDHC_INT_STATUS_EN_DINTSEN_MASK
 0x8u

	)

40572 
	#uSDHC_INT_STATUS_EN_DINTSEN_SHIFT
 3

	)

40573 
	#uSDHC_INT_STATUS_EN_BWRSEN_MASK
 0x10u

	)

40574 
	#uSDHC_INT_STATUS_EN_BWRSEN_SHIFT
 4

	)

40575 
	#uSDHC_INT_STATUS_EN_BRRSEN_MASK
 0x20u

	)

40576 
	#uSDHC_INT_STATUS_EN_BRRSEN_SHIFT
 5

	)

40577 
	#uSDHC_INT_STATUS_EN_CINSSEN_MASK
 0x40u

	)

40578 
	#uSDHC_INT_STATUS_EN_CINSSEN_SHIFT
 6

	)

40579 
	#uSDHC_INT_STATUS_EN_CRMSEN_MASK
 0x80u

	)

40580 
	#uSDHC_INT_STATUS_EN_CRMSEN_SHIFT
 7

	)

40581 
	#uSDHC_INT_STATUS_EN_CINTSEN_MASK
 0x100u

	)

40582 
	#uSDHC_INT_STATUS_EN_CINTSEN_SHIFT
 8

	)

40583 
	#uSDHC_INT_STATUS_EN_RTESEN_MASK
 0x1000u

	)

40584 
	#uSDHC_INT_STATUS_EN_RTESEN_SHIFT
 12

	)

40585 
	#uSDHC_INT_STATUS_EN_TPSEN_MASK
 0x4000u

	)

40586 
	#uSDHC_INT_STATUS_EN_TPSEN_SHIFT
 14

	)

40587 
	#uSDHC_INT_STATUS_EN_CTOESEN_MASK
 0x10000u

	)

40588 
	#uSDHC_INT_STATUS_EN_CTOESEN_SHIFT
 16

	)

40589 
	#uSDHC_INT_STATUS_EN_CCESEN_MASK
 0x20000u

	)

40590 
	#uSDHC_INT_STATUS_EN_CCESEN_SHIFT
 17

	)

40591 
	#uSDHC_INT_STATUS_EN_CEBESEN_MASK
 0x40000u

	)

40592 
	#uSDHC_INT_STATUS_EN_CEBESEN_SHIFT
 18

	)

40593 
	#uSDHC_INT_STATUS_EN_CIESEN_MASK
 0x80000u

	)

40594 
	#uSDHC_INT_STATUS_EN_CIESEN_SHIFT
 19

	)

40595 
	#uSDHC_INT_STATUS_EN_DTOESEN_MASK
 0x100000u

	)

40596 
	#uSDHC_INT_STATUS_EN_DTOESEN_SHIFT
 20

	)

40597 
	#uSDHC_INT_STATUS_EN_DCESEN_MASK
 0x200000u

	)

40598 
	#uSDHC_INT_STATUS_EN_DCESEN_SHIFT
 21

	)

40599 
	#uSDHC_INT_STATUS_EN_DEBESEN_MASK
 0x400000u

	)

40600 
	#uSDHC_INT_STATUS_EN_DEBESEN_SHIFT
 22

	)

40601 
	#uSDHC_INT_STATUS_EN_AC12ESEN_MASK
 0x1000000u

	)

40602 
	#uSDHC_INT_STATUS_EN_AC12ESEN_SHIFT
 24

	)

40603 
	#uSDHC_INT_STATUS_EN_TNESEN_MASK
 0x4000000u

	)

40604 
	#uSDHC_INT_STATUS_EN_TNESEN_SHIFT
 26

	)

40605 
	#uSDHC_INT_STATUS_EN_DMAESEN_MASK
 0x10000000u

	)

40606 
	#uSDHC_INT_STATUS_EN_DMAESEN_SHIFT
 28

	)

40608 
	#uSDHC_INT_SIGNAL_EN_CCIEN_MASK
 0x1u

	)

40609 
	#uSDHC_INT_SIGNAL_EN_CCIEN_SHIFT
 0

	)

40610 
	#uSDHC_INT_SIGNAL_EN_TCIEN_MASK
 0x2u

	)

40611 
	#uSDHC_INT_SIGNAL_EN_TCIEN_SHIFT
 1

	)

40612 
	#uSDHC_INT_SIGNAL_EN_BGEIEN_MASK
 0x4u

	)

40613 
	#uSDHC_INT_SIGNAL_EN_BGEIEN_SHIFT
 2

	)

40614 
	#uSDHC_INT_SIGNAL_EN_DINTIEN_MASK
 0x8u

	)

40615 
	#uSDHC_INT_SIGNAL_EN_DINTIEN_SHIFT
 3

	)

40616 
	#uSDHC_INT_SIGNAL_EN_BWRIEN_MASK
 0x10u

	)

40617 
	#uSDHC_INT_SIGNAL_EN_BWRIEN_SHIFT
 4

	)

40618 
	#uSDHC_INT_SIGNAL_EN_BRRIEN_MASK
 0x20u

	)

40619 
	#uSDHC_INT_SIGNAL_EN_BRRIEN_SHIFT
 5

	)

40620 
	#uSDHC_INT_SIGNAL_EN_CINSIEN_MASK
 0x40u

	)

40621 
	#uSDHC_INT_SIGNAL_EN_CINSIEN_SHIFT
 6

	)

40622 
	#uSDHC_INT_SIGNAL_EN_CRMIEN_MASK
 0x80u

	)

40623 
	#uSDHC_INT_SIGNAL_EN_CRMIEN_SHIFT
 7

	)

40624 
	#uSDHC_INT_SIGNAL_EN_CINTIEN_MASK
 0x100u

	)

40625 
	#uSDHC_INT_SIGNAL_EN_CINTIEN_SHIFT
 8

	)

40626 
	#uSDHC_INT_SIGNAL_EN_RTEIEN_MASK
 0x1000u

	)

40627 
	#uSDHC_INT_SIGNAL_EN_RTEIEN_SHIFT
 12

	)

40628 
	#uSDHC_INT_SIGNAL_EN_TPIEN_MASK
 0x4000u

	)

40629 
	#uSDHC_INT_SIGNAL_EN_TPIEN_SHIFT
 14

	)

40630 
	#uSDHC_INT_SIGNAL_EN_CTOEIEN_MASK
 0x10000u

	)

40631 
	#uSDHC_INT_SIGNAL_EN_CTOEIEN_SHIFT
 16

	)

40632 
	#uSDHC_INT_SIGNAL_EN_CCEIEN_MASK
 0x20000u

	)

40633 
	#uSDHC_INT_SIGNAL_EN_CCEIEN_SHIFT
 17

	)

40634 
	#uSDHC_INT_SIGNAL_EN_CEBEIEN_MASK
 0x40000u

	)

40635 
	#uSDHC_INT_SIGNAL_EN_CEBEIEN_SHIFT
 18

	)

40636 
	#uSDHC_INT_SIGNAL_EN_CIEIEN_MASK
 0x80000u

	)

40637 
	#uSDHC_INT_SIGNAL_EN_CIEIEN_SHIFT
 19

	)

40638 
	#uSDHC_INT_SIGNAL_EN_DTOEIEN_MASK
 0x100000u

	)

40639 
	#uSDHC_INT_SIGNAL_EN_DTOEIEN_SHIFT
 20

	)

40640 
	#uSDHC_INT_SIGNAL_EN_DCEIEN_MASK
 0x200000u

	)

40641 
	#uSDHC_INT_SIGNAL_EN_DCEIEN_SHIFT
 21

	)

40642 
	#uSDHC_INT_SIGNAL_EN_DEBEIEN_MASK
 0x400000u

	)

40643 
	#uSDHC_INT_SIGNAL_EN_DEBEIEN_SHIFT
 22

	)

40644 
	#uSDHC_INT_SIGNAL_EN_AC12EIEN_MASK
 0x1000000u

	)

40645 
	#uSDHC_INT_SIGNAL_EN_AC12EIEN_SHIFT
 24

	)

40646 
	#uSDHC_INT_SIGNAL_EN_TNEIEN_MASK
 0x4000000u

	)

40647 
	#uSDHC_INT_SIGNAL_EN_TNEIEN_SHIFT
 26

	)

40648 
	#uSDHC_INT_SIGNAL_EN_DMAEIEN_MASK
 0x10000000u

	)

40649 
	#uSDHC_INT_SIGNAL_EN_DMAEIEN_SHIFT
 28

	)

40651 
	#uSDHC_AUTOCMD12_ERR_STATUS_AC12NE_MASK
 0x1u

	)

40652 
	#uSDHC_AUTOCMD12_ERR_STATUS_AC12NE_SHIFT
 0

	)

40653 
	#uSDHC_AUTOCMD12_ERR_STATUS_AC12TOE_MASK
 0x2u

	)

40654 
	#uSDHC_AUTOCMD12_ERR_STATUS_AC12TOE_SHIFT
 1

	)

40655 
	#uSDHC_AUTOCMD12_ERR_STATUS_AC12EBE_MASK
 0x4u

	)

40656 
	#uSDHC_AUTOCMD12_ERR_STATUS_AC12EBE_SHIFT
 2

	)

40657 
	#uSDHC_AUTOCMD12_ERR_STATUS_AC12CE_MASK
 0x8u

	)

40658 
	#uSDHC_AUTOCMD12_ERR_STATUS_AC12CE_SHIFT
 3

	)

40659 
	#uSDHC_AUTOCMD12_ERR_STATUS_AC12IE_MASK
 0x10u

	)

40660 
	#uSDHC_AUTOCMD12_ERR_STATUS_AC12IE_SHIFT
 4

	)

40661 
	#uSDHC_AUTOCMD12_ERR_STATUS_CNIBAC12E_MASK
 0x80u

	)

40662 
	#uSDHC_AUTOCMD12_ERR_STATUS_CNIBAC12E_SHIFT
 7

	)

40663 
	#uSDHC_AUTOCMD12_ERR_STATUS_EXECUTE_TUNING_MASK
 0x400000u

	)

40664 
	#uSDHC_AUTOCMD12_ERR_STATUS_EXECUTE_TUNING_SHIFT
 22

	)

40665 
	#uSDHC_AUTOCMD12_ERR_STATUS_SMP_CLK_SEL_MASK
 0x800000u

	)

40666 
	#uSDHC_AUTOCMD12_ERR_STATUS_SMP_CLK_SEL_SHIFT
 23

	)

40668 
	#uSDHC_HOST_CTRL_CAP_SDR50_SUPPORT_MASK
 0x1u

	)

40669 
	#uSDHC_HOST_CTRL_CAP_SDR50_SUPPORT_SHIFT
 0

	)

40670 
	#uSDHC_HOST_CTRL_CAP_SDR104_SUPPORT_MASK
 0x2u

	)

40671 
	#uSDHC_HOST_CTRL_CAP_SDR104_SUPPORT_SHIFT
 1

	)

40672 
	#uSDHC_HOST_CTRL_CAP_DDR50_SUPPORT_MASK
 0x4u

	)

40673 
	#uSDHC_HOST_CTRL_CAP_DDR50_SUPPORT_SHIFT
 2

	)

40674 
	#uSDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_MASK
 0xF00u

	)

40675 
	#uSDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_SHIFT
 8

	)

40676 
	#uSDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_SHIFT
))&
uSDHC_HOST_CTRL_CAP_TIME_COUNT_RETUNING_MASK
)

	)

40677 
	#uSDHC_HOST_CTRL_CAP_USE_TUNING_SDR50_MASK
 0x2000u

	)

40678 
	#uSDHC_HOST_CTRL_CAP_USE_TUNING_SDR50_SHIFT
 13

	)

40679 
	#uSDHC_HOST_CTRL_CAP_RETUNING_MODE_MASK
 0xC000u

	)

40680 
	#uSDHC_HOST_CTRL_CAP_RETUNING_MODE_SHIFT
 14

	)

40681 
	#uSDHC_HOST_CTRL_CAP_RETUNING_MODE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_HOST_CTRL_CAP_RETUNING_MODE_SHIFT
))&
uSDHC_HOST_CTRL_CAP_RETUNING_MODE_MASK
)

	)

40682 
	#uSDHC_HOST_CTRL_CAP_MBL_MASK
 0x70000u

	)

40683 
	#uSDHC_HOST_CTRL_CAP_MBL_SHIFT
 16

	)

40684 
	#uSDHC_HOST_CTRL_CAP_MBL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_HOST_CTRL_CAP_MBL_SHIFT
))&
uSDHC_HOST_CTRL_CAP_MBL_MASK
)

	)

40685 
	#uSDHC_HOST_CTRL_CAP_ADMAS_MASK
 0x100000u

	)

40686 
	#uSDHC_HOST_CTRL_CAP_ADMAS_SHIFT
 20

	)

40687 
	#uSDHC_HOST_CTRL_CAP_HSS_MASK
 0x200000u

	)

40688 
	#uSDHC_HOST_CTRL_CAP_HSS_SHIFT
 21

	)

40689 
	#uSDHC_HOST_CTRL_CAP_DMAS_MASK
 0x400000u

	)

40690 
	#uSDHC_HOST_CTRL_CAP_DMAS_SHIFT
 22

	)

40691 
	#uSDHC_HOST_CTRL_CAP_SRS_MASK
 0x800000u

	)

40692 
	#uSDHC_HOST_CTRL_CAP_SRS_SHIFT
 23

	)

40693 
	#uSDHC_HOST_CTRL_CAP_VS33_MASK
 0x1000000u

	)

40694 
	#uSDHC_HOST_CTRL_CAP_VS33_SHIFT
 24

	)

40695 
	#uSDHC_HOST_CTRL_CAP_VS30_MASK
 0x2000000u

	)

40696 
	#uSDHC_HOST_CTRL_CAP_VS30_SHIFT
 25

	)

40697 
	#uSDHC_HOST_CTRL_CAP_VS18_MASK
 0x4000000u

	)

40698 
	#uSDHC_HOST_CTRL_CAP_VS18_SHIFT
 26

	)

40700 
	#uSDHC_WTMK_LVL_RD_WML_MASK
 0xFFu

	)

40701 
	#uSDHC_WTMK_LVL_RD_WML_SHIFT
 0

	)

40702 
	#uSDHC_WTMK_LVL_RD_WML
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_WTMK_LVL_RD_WML_SHIFT
))&
uSDHC_WTMK_LVL_RD_WML_MASK
)

	)

40703 
	#uSDHC_WTMK_LVL_RD_BRST_LEN_MASK
 0x1F00u

	)

40704 
	#uSDHC_WTMK_LVL_RD_BRST_LEN_SHIFT
 8

	)

40705 
	#uSDHC_WTMK_LVL_RD_BRST_LEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_WTMK_LVL_RD_BRST_LEN_SHIFT
))&
uSDHC_WTMK_LVL_RD_BRST_LEN_MASK
)

	)

40706 
	#uSDHC_WTMK_LVL_WR_WML_MASK
 0xFF0000u

	)

40707 
	#uSDHC_WTMK_LVL_WR_WML_SHIFT
 16

	)

40708 
	#uSDHC_WTMK_LVL_WR_WML
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_WTMK_LVL_WR_WML_SHIFT
))&
uSDHC_WTMK_LVL_WR_WML_MASK
)

	)

40709 
	#uSDHC_WTMK_LVL_WR_BRST_LEN_MASK
 0x1F000000u

	)

40710 
	#uSDHC_WTMK_LVL_WR_BRST_LEN_SHIFT
 24

	)

40711 
	#uSDHC_WTMK_LVL_WR_BRST_LEN
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_WTMK_LVL_WR_BRST_LEN_SHIFT
))&
uSDHC_WTMK_LVL_WR_BRST_LEN_MASK
)

	)

40713 
	#uSDHC_MIX_CTRL_DMAEN_MASK
 0x1u

	)

40714 
	#uSDHC_MIX_CTRL_DMAEN_SHIFT
 0

	)

40715 
	#uSDHC_MIX_CTRL_BCEN_MASK
 0x2u

	)

40716 
	#uSDHC_MIX_CTRL_BCEN_SHIFT
 1

	)

40717 
	#uSDHC_MIX_CTRL_AC12EN_MASK
 0x4u

	)

40718 
	#uSDHC_MIX_CTRL_AC12EN_SHIFT
 2

	)

40719 
	#uSDHC_MIX_CTRL_DDR_EN_MASK
 0x8u

	)

40720 
	#uSDHC_MIX_CTRL_DDR_EN_SHIFT
 3

	)

40721 
	#uSDHC_MIX_CTRL_DTDSEL_MASK
 0x10u

	)

40722 
	#uSDHC_MIX_CTRL_DTDSEL_SHIFT
 4

	)

40723 
	#uSDHC_MIX_CTRL_MSBSEL_MASK
 0x20u

	)

40724 
	#uSDHC_MIX_CTRL_MSBSEL_SHIFT
 5

	)

40725 
	#uSDHC_MIX_CTRL_NIBBLE_POS_MASK
 0x40u

	)

40726 
	#uSDHC_MIX_CTRL_NIBBLE_POS_SHIFT
 6

	)

40727 
	#uSDHC_MIX_CTRL_AC23EN_MASK
 0x80u

	)

40728 
	#uSDHC_MIX_CTRL_AC23EN_SHIFT
 7

	)

40729 
	#uSDHC_MIX_CTRL_EXE_TUNE_MASK
 0x400000u

	)

40730 
	#uSDHC_MIX_CTRL_EXE_TUNE_SHIFT
 22

	)

40731 
	#uSDHC_MIX_CTRL_SMP_CLK_SEL_MASK
 0x800000u

	)

40732 
	#uSDHC_MIX_CTRL_SMP_CLK_SEL_SHIFT
 23

	)

40733 
	#uSDHC_MIX_CTRL_AUTO_TUNE_EN_MASK
 0x1000000u

	)

40734 
	#uSDHC_MIX_CTRL_AUTO_TUNE_EN_SHIFT
 24

	)

40735 
	#uSDHC_MIX_CTRL_FBCLK_SEL_MASK
 0x2000000u

	)

40736 
	#uSDHC_MIX_CTRL_FBCLK_SEL_SHIFT
 25

	)

40738 
	#uSDHC_FORCE_EVENT_FEVTAC12NE_MASK
 0x1u

	)

40739 
	#uSDHC_FORCE_EVENT_FEVTAC12NE_SHIFT
 0

	)

40740 
	#uSDHC_FORCE_EVENT_FEVTAC12TOE_MASK
 0x2u

	)

40741 
	#uSDHC_FORCE_EVENT_FEVTAC12TOE_SHIFT
 1

	)

40742 
	#uSDHC_FORCE_EVENT_FEVTAC12CE_MASK
 0x4u

	)

40743 
	#uSDHC_FORCE_EVENT_FEVTAC12CE_SHIFT
 2

	)

40744 
	#uSDHC_FORCE_EVENT_FEVTAC12EBE_MASK
 0x8u

	)

40745 
	#uSDHC_FORCE_EVENT_FEVTAC12EBE_SHIFT
 3

	)

40746 
	#uSDHC_FORCE_EVENT_FEVTAC12IE_MASK
 0x10u

	)

40747 
	#uSDHC_FORCE_EVENT_FEVTAC12IE_SHIFT
 4

	)

40748 
	#uSDHC_FORCE_EVENT_FEVTCNIBAC12E_MASK
 0x80u

	)

40749 
	#uSDHC_FORCE_EVENT_FEVTCNIBAC12E_SHIFT
 7

	)

40750 
	#uSDHC_FORCE_EVENT_FEVTCTOE_MASK
 0x10000u

	)

40751 
	#uSDHC_FORCE_EVENT_FEVTCTOE_SHIFT
 16

	)

40752 
	#uSDHC_FORCE_EVENT_FEVTCCE_MASK
 0x20000u

	)

40753 
	#uSDHC_FORCE_EVENT_FEVTCCE_SHIFT
 17

	)

40754 
	#uSDHC_FORCE_EVENT_FEVTCEBE_MASK
 0x40000u

	)

40755 
	#uSDHC_FORCE_EVENT_FEVTCEBE_SHIFT
 18

	)

40756 
	#uSDHC_FORCE_EVENT_FEVTCIE_MASK
 0x80000u

	)

40757 
	#uSDHC_FORCE_EVENT_FEVTCIE_SHIFT
 19

	)

40758 
	#uSDHC_FORCE_EVENT_FEVTDTOE_MASK
 0x100000u

	)

40759 
	#uSDHC_FORCE_EVENT_FEVTDTOE_SHIFT
 20

	)

40760 
	#uSDHC_FORCE_EVENT_FEVTDCE_MASK
 0x200000u

	)

40761 
	#uSDHC_FORCE_EVENT_FEVTDCE_SHIFT
 21

	)

40762 
	#uSDHC_FORCE_EVENT_FEVTDEBE_MASK
 0x400000u

	)

40763 
	#uSDHC_FORCE_EVENT_FEVTDEBE_SHIFT
 22

	)

40764 
	#uSDHC_FORCE_EVENT_FEVTAC12E_MASK
 0x1000000u

	)

40765 
	#uSDHC_FORCE_EVENT_FEVTAC12E_SHIFT
 24

	)

40766 
	#uSDHC_FORCE_EVENT_FEVTTNE_MASK
 0x4000000u

	)

40767 
	#uSDHC_FORCE_EVENT_FEVTTNE_SHIFT
 26

	)

40768 
	#uSDHC_FORCE_EVENT_FEVTDMAE_MASK
 0x10000000u

	)

40769 
	#uSDHC_FORCE_EVENT_FEVTDMAE_SHIFT
 28

	)

40770 
	#uSDHC_FORCE_EVENT_FEVTCINT_MASK
 0x80000000u

	)

40771 
	#uSDHC_FORCE_EVENT_FEVTCINT_SHIFT
 31

	)

40773 
	#uSDHC_ADMA_ERR_STATUS_ADMAES_MASK
 0x3u

	)

40774 
	#uSDHC_ADMA_ERR_STATUS_ADMAES_SHIFT
 0

	)

40775 
	#uSDHC_ADMA_ERR_STATUS_ADMAES
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_ADMA_ERR_STATUS_ADMAES_SHIFT
))&
uSDHC_ADMA_ERR_STATUS_ADMAES_MASK
)

	)

40776 
	#uSDHC_ADMA_ERR_STATUS_ADMALME_MASK
 0x4u

	)

40777 
	#uSDHC_ADMA_ERR_STATUS_ADMALME_SHIFT
 2

	)

40778 
	#uSDHC_ADMA_ERR_STATUS_ADMADCE_MASK
 0x8u

	)

40779 
	#uSDHC_ADMA_ERR_STATUS_ADMADCE_SHIFT
 3

	)

40781 
	#uSDHC_ADMA_SYS_ADDR_ADS_ADDR_MASK
 0xFFFFFFFCu

	)

40782 
	#uSDHC_ADMA_SYS_ADDR_ADS_ADDR_SHIFT
 2

	)

40783 
	#uSDHC_ADMA_SYS_ADDR_ADS_ADDR
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_ADMA_SYS_ADDR_ADS_ADDR_SHIFT
))&
uSDHC_ADMA_SYS_ADDR_ADS_ADDR_MASK
)

	)

40785 
	#uSDHC_DLL_CTRL_DLL_CTRL_ENABLE_MASK
 0x1u

	)

40786 
	#uSDHC_DLL_CTRL_DLL_CTRL_ENABLE_SHIFT
 0

	)

40787 
	#uSDHC_DLL_CTRL_DLL_CTRL_RESET_MASK
 0x2u

	)

40788 
	#uSDHC_DLL_CTRL_DLL_CTRL_RESET_SHIFT
 1

	)

40789 
	#uSDHC_DLL_CTRL_DLL_CTRL_SLV_FORCE_UPD_MASK
 0x4u

	)

40790 
	#uSDHC_DLL_CTRL_DLL_CTRL_SLV_FORCE_UPD_SHIFT
 2

	)

40791 
	#uSDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_MASK
 0x78u

	)

40792 
	#uSDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_SHIFT
 3

	)

40793 
	#uSDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_SHIFT
))&
uSDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET0_MASK
)

	)

40794 
	#uSDHC_DLL_CTRL_DLL_CTRL_GATE_UPDATE_MASK
 0x80u

	)

40795 
	#uSDHC_DLL_CTRL_DLL_CTRL_GATE_UPDATE_SHIFT
 7

	)

40796 
	#uSDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_MASK
 0x100u

	)

40797 
	#uSDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_SHIFT
 8

	)

40798 
	#uSDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_MASK
 0xFE00u

	)

40799 
	#uSDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT
 9

	)

40800 
	#uSDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_SHIFT
))&
uSDHC_DLL_CTRL_DLL_CTRL_SLV_OVERRIDE_VAL_MASK
)

	)

40801 
	#uSDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_MASK
 0x70000u

	)

40802 
	#uSDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_SHIFT
 16

	)

40803 
	#uSDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_SHIFT
))&
uSDHC_DLL_CTRL_DLL_CTRL_SLV_DLY_TARGET1_MASK
)

	)

40804 
	#uSDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_MASK
 0xFF00000u

	)

40805 
	#uSDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_SHIFT
 20

	)

40806 
	#uSDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_SHIFT
))&
uSDHC_DLL_CTRL_DLL_CTRL_SLV_UPDATE_INT_MASK
)

	)

40807 
	#uSDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_MASK
 0xF0000000u

	)

40808 
	#uSDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_SHIFT
 28

	)

40809 
	#uSDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_SHIFT
))&
uSDHC_DLL_CTRL_DLL_CTRL_REF_UPDATE_INT_MASK
)

	)

40811 
	#uSDHC_DLL_STATUS_DLL_STS_SLV_LOCK_MASK
 0x1u

	)

40812 
	#uSDHC_DLL_STATUS_DLL_STS_SLV_LOCK_SHIFT
 0

	)

40813 
	#uSDHC_DLL_STATUS_DLL_STS_REF_LOCK_MASK
 0x2u

	)

40814 
	#uSDHC_DLL_STATUS_DLL_STS_REF_LOCK_SHIFT
 1

	)

40815 
	#uSDHC_DLL_STATUS_DLL_STS_SLV_SEL_MASK
 0x1FCu

	)

40816 
	#uSDHC_DLL_STATUS_DLL_STS_SLV_SEL_SHIFT
 2

	)

40817 
	#uSDHC_DLL_STATUS_DLL_STS_SLV_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_DLL_STATUS_DLL_STS_SLV_SEL_SHIFT
))&
uSDHC_DLL_STATUS_DLL_STS_SLV_SEL_MASK
)

	)

40818 
	#uSDHC_DLL_STATUS_DLL_STS_REF_SEL_MASK
 0xFE00u

	)

40819 
	#uSDHC_DLL_STATUS_DLL_STS_REF_SEL_SHIFT
 9

	)

40820 
	#uSDHC_DLL_STATUS_DLL_STS_REF_SEL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_DLL_STATUS_DLL_STS_REF_SEL_SHIFT
))&
uSDHC_DLL_STATUS_DLL_STS_REF_SEL_MASK
)

	)

40822 
	#uSDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_MASK
 0xFu

	)

40823 
	#uSDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_SHIFT
 0

	)

40824 
	#uSDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_SHIFT
))&
uSDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_POST_MASK
)

	)

40825 
	#uSDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_MASK
 0xF0u

	)

40826 
	#uSDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_SHIFT
 4

	)

40827 
	#uSDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_SHIFT
))&
uSDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_OUT_MASK
)

	)

40828 
	#uSDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_MASK
 0x7F00u

	)

40829 
	#uSDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_SHIFT
 8

	)

40830 
	#uSDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_SHIFT
))&
uSDHC_CLK_TUNE_CTRL_STATUS_DLY_CELL_SET_PRE_MASK
)

	)

40831 
	#uSDHC_CLK_TUNE_CTRL_STATUS_NXT_ERR_MASK
 0x8000u

	)

40832 
	#uSDHC_CLK_TUNE_CTRL_STATUS_NXT_ERR_SHIFT
 15

	)

40833 
	#uSDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_MASK
 0xF0000u

	)

40834 
	#uSDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_SHIFT
 16

	)

40835 
	#uSDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_SHIFT
))&
uSDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_POST_MASK
)

	)

40836 
	#uSDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_MASK
 0xF00000u

	)

40837 
	#uSDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_SHIFT
 20

	)

40838 
	#uSDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_SHIFT
))&
uSDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_OUT_MASK
)

	)

40839 
	#uSDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_MASK
 0x7F000000u

	)

40840 
	#uSDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_SHIFT
 24

	)

40841 
	#uSDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_SHIFT
))&
uSDHC_CLK_TUNE_CTRL_STATUS_TAP_SEL_PRE_MASK
)

	)

40842 
	#uSDHC_CLK_TUNE_CTRL_STATUS_PRE_ERR_MASK
 0x80000000u

	)

40843 
	#uSDHC_CLK_TUNE_CTRL_STATUS_PRE_ERR_SHIFT
 31

	)

40845 
	#uSDHC_VEND_SPEC_EXT_DMA_EN_MASK
 0x1u

	)

40846 
	#uSDHC_VEND_SPEC_EXT_DMA_EN_SHIFT
 0

	)

40847 
	#uSDHC_VEND_SPEC_VSELECT_MASK
 0x2u

	)

40848 
	#uSDHC_VEND_SPEC_VSELECT_SHIFT
 1

	)

40849 
	#uSDHC_VEND_SPEC_CONFLICT_CHK_EN_MASK
 0x4u

	)

40850 
	#uSDHC_VEND_SPEC_CONFLICT_CHK_EN_SHIFT
 2

	)

40851 
	#uSDHC_VEND_SPEC_AC12_WR_CHKBUSY_EN_MASK
 0x8u

	)

40852 
	#uSDHC_VEND_SPEC_AC12_WR_CHKBUSY_EN_SHIFT
 3

	)

40853 
	#uSDHC_VEND_SPEC_DAT3_CD_POL_MASK
 0x10u

	)

40854 
	#uSDHC_VEND_SPEC_DAT3_CD_POL_SHIFT
 4

	)

40855 
	#uSDHC_VEND_SPEC_CD_POL_MASK
 0x20u

	)

40856 
	#uSDHC_VEND_SPEC_CD_POL_SHIFT
 5

	)

40857 
	#uSDHC_VEND_SPEC_WP_POL_MASK
 0x40u

	)

40858 
	#uSDHC_VEND_SPEC_WP_POL_SHIFT
 6

	)

40859 
	#uSDHC_VEND_SPEC_CLKONJ_IN_ABORT_MASK
 0x80u

	)

40860 
	#uSDHC_VEND_SPEC_CLKONJ_IN_ABORT_SHIFT
 7

	)

40861 
	#uSDHC_VEND_SPEC_FRC_SDCLK_ON_MASK
 0x100u

	)

40862 
	#uSDHC_VEND_SPEC_FRC_SDCLK_ON_SHIFT
 8

	)

40863 
	#uSDHC_VEND_SPEC_IPG_CLK_SOFT_EN_MASK
 0x800u

	)

40864 
	#uSDHC_VEND_SPEC_IPG_CLK_SOFT_EN_SHIFT
 11

	)

40865 
	#uSDHC_VEND_SPEC_HCLK_SOFT_EN_MASK
 0x1000u

	)

40866 
	#uSDHC_VEND_SPEC_HCLK_SOFT_EN_SHIFT
 12

	)

40867 
	#uSDHC_VEND_SPEC_IPG_PERCLK_SOFT_EN_MASK
 0x2000u

	)

40868 
	#uSDHC_VEND_SPEC_IPG_PERCLK_SOFT_EN_SHIFT
 13

	)

40869 
	#uSDHC_VEND_SPEC_CARD_CLK_SOFT_EN_MASK
 0x4000u

	)

40870 
	#uSDHC_VEND_SPEC_CARD_CLK_SOFT_EN_SHIFT
 14

	)

40871 
	#uSDHC_VEND_SPEC_CRC_CHK_DIS_MASK
 0x8000u

	)

40872 
	#uSDHC_VEND_SPEC_CRC_CHK_DIS_SHIFT
 15

	)

40873 
	#uSDHC_VEND_SPEC_INT_ST_VAL_MASK
 0xFF0000u

	)

40874 
	#uSDHC_VEND_SPEC_INT_ST_VAL_SHIFT
 16

	)

40875 
	#uSDHC_VEND_SPEC_INT_ST_VAL
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_VEND_SPEC_INT_ST_VAL_SHIFT
))&
uSDHC_VEND_SPEC_INT_ST_VAL_MASK
)

	)

40876 
	#uSDHC_VEND_SPEC_CMD_BYTE_EN_MASK
 0x80000000u

	)

40877 
	#uSDHC_VEND_SPEC_CMD_BYTE_EN_SHIFT
 31

	)

40879 
	#uSDHC_MMC_BOOT_DTOCV_ACK_MASK
 0xFu

	)

40880 
	#uSDHC_MMC_BOOT_DTOCV_ACK_SHIFT
 0

	)

40881 
	#uSDHC_MMC_BOOT_DTOCV_ACK
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_MMC_BOOT_DTOCV_ACK_SHIFT
))&
uSDHC_MMC_BOOT_DTOCV_ACK_MASK
)

	)

40882 
	#uSDHC_MMC_BOOT_BOOT_ACK_MASK
 0x10u

	)

40883 
	#uSDHC_MMC_BOOT_BOOT_ACK_SHIFT
 4

	)

40884 
	#uSDHC_MMC_BOOT_BOOT_MODE_MASK
 0x20u

	)

40885 
	#uSDHC_MMC_BOOT_BOOT_MODE_SHIFT
 5

	)

40886 
	#uSDHC_MMC_BOOT_BOOT_EN_MASK
 0x40u

	)

40887 
	#uSDHC_MMC_BOOT_BOOT_EN_SHIFT
 6

	)

40888 
	#uSDHC_MMC_BOOT_AUTO_SABG_EN_MASK
 0x80u

	)

40889 
	#uSDHC_MMC_BOOT_AUTO_SABG_EN_SHIFT
 7

	)

40890 
	#uSDHC_MMC_BOOT_DISABLE_TIME_OUT_MASK
 0x100u

	)

40891 
	#uSDHC_MMC_BOOT_DISABLE_TIME_OUT_SHIFT
 8

	)

40892 
	#uSDHC_MMC_BOOT_BOOT_BLK_CNT_MASK
 0xFFFF0000u

	)

40893 
	#uSDHC_MMC_BOOT_BOOT_BLK_CNT_SHIFT
 16

	)

40894 
	#uSDHC_MMC_BOOT_BOOT_BLK_CNT
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_MMC_BOOT_BOOT_BLK_CNT_SHIFT
))&
uSDHC_MMC_BOOT_BOOT_BLK_CNT_MASK
)

	)

40896 
	#uSDHC_VEND_SPEC2_SDR104_TIMING_DIS_MASK
 0x1u

	)

40897 
	#uSDHC_VEND_SPEC2_SDR104_TIMING_DIS_SHIFT
 0

	)

40898 
	#uSDHC_VEND_SPEC2_SDR104_OE_DIS_MASK
 0x2u

	)

40899 
	#uSDHC_VEND_SPEC2_SDR104_OE_DIS_SHIFT
 1

	)

40900 
	#uSDHC_VEND_SPEC2_SDR104_NSD_DIS_MASK
 0x4u

	)

40901 
	#uSDHC_VEND_SPEC2_SDR104_NSD_DIS_SHIFT
 2

	)

40902 
	#uSDHC_VEND_SPEC2_CARD_INT_D3_TEST_MASK
 0x8u

	)

40903 
	#uSDHC_VEND_SPEC2_CARD_INT_D3_TEST_SHIFT
 3

	)

40904 
	#uSDHC_VEND_SPEC2_TUNING_8bô_EN_MASK
 0x10u

	)

40905 
	#uSDHC_VEND_SPEC2_TUNING_8bô_EN_SHIFT
 4

	)

40906 
	#uSDHC_VEND_SPEC2_TUNING_1bô_EN_MASK
 0x20u

	)

40907 
	#uSDHC_VEND_SPEC2_TUNING_1bô_EN_SHIFT
 5

	)

40908 
	#uSDHC_VEND_SPEC2_TUNING_CMD_EN_MASK
 0x40u

	)

40909 
	#uSDHC_VEND_SPEC2_TUNING_CMD_EN_SHIFT
 6

	)

40910 
	#uSDHC_VEND_SPEC2_CARD_INT_AUTO_CLR_DIS_MASK
 0x80u

	)

40911 
	#uSDHC_VEND_SPEC2_CARD_INT_AUTO_CLR_DIS_SHIFT
 7

	)

40913 
	#uSDHC_TUNING_CTRL_TUNING_START_TAP_MASK
 0xFFu

	)

40914 
	#uSDHC_TUNING_CTRL_TUNING_START_TAP_SHIFT
 0

	)

40915 
	#uSDHC_TUNING_CTRL_TUNING_START_TAP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_TUNING_CTRL_TUNING_START_TAP_SHIFT
))&
uSDHC_TUNING_CTRL_TUNING_START_TAP_MASK
)

	)

40916 
	#uSDHC_TUNING_CTRL_TUNING_COUNTER_MASK
 0xFF00u

	)

40917 
	#uSDHC_TUNING_CTRL_TUNING_COUNTER_SHIFT
 8

	)

40918 
	#uSDHC_TUNING_CTRL_TUNING_COUNTER
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_TUNING_CTRL_TUNING_COUNTER_SHIFT
))&
uSDHC_TUNING_CTRL_TUNING_COUNTER_MASK
)

	)

40919 
	#uSDHC_TUNING_CTRL_TUNING_STEP_MASK
 0x70000u

	)

40920 
	#uSDHC_TUNING_CTRL_TUNING_STEP_SHIFT
 16

	)

40921 
	#uSDHC_TUNING_CTRL_TUNING_STEP
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_TUNING_CTRL_TUNING_STEP_SHIFT
))&
uSDHC_TUNING_CTRL_TUNING_STEP_MASK
)

	)

40922 
	#uSDHC_TUNING_CTRL_TUNING_WINDOW_MASK
 0x700000u

	)

40923 
	#uSDHC_TUNING_CTRL_TUNING_WINDOW_SHIFT
 20

	)

40924 
	#uSDHC_TUNING_CTRL_TUNING_WINDOW
(
x
Ë(((
uöt32_t
)(((uöt32_t)(x))<<
uSDHC_TUNING_CTRL_TUNING_WINDOW_SHIFT
))&
uSDHC_TUNING_CTRL_TUNING_WINDOW_MASK
)

	)

40925 
	#uSDHC_TUNING_CTRL_STD_TUNING_EN_MASK
 0x1000000u

	)

40926 
	#uSDHC_TUNING_CTRL_STD_TUNING_EN_SHIFT
 24

	)

40934 
	#uSDHC1_BASE
 (0x42190000u)

	)

40936 
	#uSDHC1
 ((
uSDHC_Ty≥
 *)
uSDHC1_BASE
)

	)

40937 
	#uSDHC1_BASE_PTR
 (
uSDHC1
)

	)

40939 
	#uSDHC2_BASE
 (0x42194000u)

	)

40941 
	#uSDHC2
 ((
uSDHC_Ty≥
 *)
uSDHC2_BASE
)

	)

40942 
	#uSDHC2_BASE_PTR
 (
uSDHC2
)

	)

40944 
	#uSDHC3_BASE
 (0x42198000u)

	)

40946 
	#uSDHC3
 ((
uSDHC_Ty≥
 *)
uSDHC3_BASE
)

	)

40947 
	#uSDHC3_BASE_PTR
 (
uSDHC3
)

	)

40949 
	#uSDHC4_BASE
 (0x4219C000u)

	)

40951 
	#uSDHC4
 ((
uSDHC_Ty≥
 *)
uSDHC4_BASE
)

	)

40952 
	#uSDHC4_BASE_PTR
 (
uSDHC4
)

	)

40954 
	#uSDHC_BASE_ADDRS
 { 
uSDHC1_BASE
, 
uSDHC2_BASE
, 
uSDHC3_BASE
, 
uSDHC4_BASE
 }

	)

40956 
	#uSDHC_BASE_PTRS
 { 
uSDHC1
, 
uSDHC2
, 
uSDHC3
, 
uSDHC4
 }

	)

40958 
	#uSDHC_IRQS
 { 
USDHC1_IRQn
, 
USDHC2_IRQn
, 
USDHC3_IRQn
, 
USDHC4_IRQn
 }

	)

40971 
	#uSDHC1_DS_ADDR
 
	`uSDHC_DS_ADDR_REG
(
uSDHC1_BASE_PTR
)

	)

40972 
	#uSDHC1_BLK_ATT
 
	`uSDHC_BLK_ATT_REG
(
uSDHC1_BASE_PTR
)

	)

40973 
	#uSDHC1_CMD_ARG
 
	`uSDHC_CMD_ARG_REG
(
uSDHC1_BASE_PTR
)

	)

40974 
	#uSDHC1_CMD_XFR_TYP
 
	`uSDHC_CMD_XFR_TYP_REG
(
uSDHC1_BASE_PTR
)

	)

40975 
	#uSDHC1_CMD_RSP0
 
	`uSDHC_CMD_RSP0_REG
(
uSDHC1_BASE_PTR
)

	)

40976 
	#uSDHC1_CMD_RSP1
 
	`uSDHC_CMD_RSP1_REG
(
uSDHC1_BASE_PTR
)

	)

40977 
	#uSDHC1_CMD_RSP2
 
	`uSDHC_CMD_RSP2_REG
(
uSDHC1_BASE_PTR
)

	)

40978 
	#uSDHC1_CMD_RSP3
 
	`uSDHC_CMD_RSP3_REG
(
uSDHC1_BASE_PTR
)

	)

40979 
	#uSDHC1_DATA_BUFF_ACC_PORT
 
	`uSDHC_DATA_BUFF_ACC_PORT_REG
(
uSDHC1_BASE_PTR
)

	)

40980 
	#uSDHC1_PRES_STATE
 
	`uSDHC_PRES_STATE_REG
(
uSDHC1_BASE_PTR
)

	)

40981 
	#uSDHC1_PROT_CTRL
 
	`uSDHC_PROT_CTRL_REG
(
uSDHC1_BASE_PTR
)

	)

40982 
	#uSDHC1_SYS_CTRL
 
	`uSDHC_SYS_CTRL_REG
(
uSDHC1_BASE_PTR
)

	)

40983 
	#uSDHC1_INT_STATUS
 
	`uSDHC_INT_STATUS_REG
(
uSDHC1_BASE_PTR
)

	)

40984 
	#uSDHC1_INT_STATUS_EN
 
	`uSDHC_INT_STATUS_EN_REG
(
uSDHC1_BASE_PTR
)

	)

40985 
	#uSDHC1_INT_SIGNAL_EN
 
	`uSDHC_INT_SIGNAL_EN_REG
(
uSDHC1_BASE_PTR
)

	)

40986 
	#uSDHC1_AUTOCMD12_ERR_STATUS
 
	`uSDHC_AUTOCMD12_ERR_STATUS_REG
(
uSDHC1_BASE_PTR
)

	)

40987 
	#uSDHC1_HOST_CTRL_CAP
 
	`uSDHC_HOST_CTRL_CAP_REG
(
uSDHC1_BASE_PTR
)

	)

40988 
	#uSDHC1_WTMK_LVL
 
	`uSDHC_WTMK_LVL_REG
(
uSDHC1_BASE_PTR
)

	)

40989 
	#uSDHC1_MIX_CTRL
 
	`uSDHC_MIX_CTRL_REG
(
uSDHC1_BASE_PTR
)

	)

40990 
	#uSDHC1_FORCE_EVENT
 
	`uSDHC_FORCE_EVENT_REG
(
uSDHC1_BASE_PTR
)

	)

40991 
	#uSDHC1_ADMA_ERR_STATUS
 
	`uSDHC_ADMA_ERR_STATUS_REG
(
uSDHC1_BASE_PTR
)

	)

40992 
	#uSDHC1_ADMA_SYS_ADDR
 
	`uSDHC_ADMA_SYS_ADDR_REG
(
uSDHC1_BASE_PTR
)

	)

40993 
	#uSDHC1_DLL_CTRL
 
	`uSDHC_DLL_CTRL_REG
(
uSDHC1_BASE_PTR
)

	)

40994 
	#uSDHC1_DLL_STATUS
 
	`uSDHC_DLL_STATUS_REG
(
uSDHC1_BASE_PTR
)

	)

40995 
	#uSDHC1_CLK_TUNE_CTRL_STATUS
 
	`uSDHC_CLK_TUNE_CTRL_STATUS_REG
(
uSDHC1_BASE_PTR
)

	)

40996 
	#uSDHC1_VEND_SPEC
 
	`uSDHC_VEND_SPEC_REG
(
uSDHC1_BASE_PTR
)

	)

40997 
	#uSDHC1_MMC_BOOT
 
	`uSDHC_MMC_BOOT_REG
(
uSDHC1_BASE_PTR
)

	)

40998 
	#uSDHC1_VEND_SPEC2
 
	`uSDHC_VEND_SPEC2_REG
(
uSDHC1_BASE_PTR
)

	)

40999 
	#uSDHC1_TUNING_CTRL
 
	`uSDHC_TUNING_CTRL_REG
(
uSDHC1_BASE_PTR
)

	)

41001 
	#uSDHC2_DS_ADDR
 
	`uSDHC_DS_ADDR_REG
(
uSDHC2_BASE_PTR
)

	)

41002 
	#uSDHC2_BLK_ATT
 
	`uSDHC_BLK_ATT_REG
(
uSDHC2_BASE_PTR
)

	)

41003 
	#uSDHC2_CMD_ARG
 
	`uSDHC_CMD_ARG_REG
(
uSDHC2_BASE_PTR
)

	)

41004 
	#uSDHC2_CMD_XFR_TYP
 
	`uSDHC_CMD_XFR_TYP_REG
(
uSDHC2_BASE_PTR
)

	)

41005 
	#uSDHC2_CMD_RSP0
 
	`uSDHC_CMD_RSP0_REG
(
uSDHC2_BASE_PTR
)

	)

41006 
	#uSDHC2_CMD_RSP1
 
	`uSDHC_CMD_RSP1_REG
(
uSDHC2_BASE_PTR
)

	)

41007 
	#uSDHC2_CMD_RSP2
 
	`uSDHC_CMD_RSP2_REG
(
uSDHC2_BASE_PTR
)

	)

41008 
	#uSDHC2_CMD_RSP3
 
	`uSDHC_CMD_RSP3_REG
(
uSDHC2_BASE_PTR
)

	)

41009 
	#uSDHC2_DATA_BUFF_ACC_PORT
 
	`uSDHC_DATA_BUFF_ACC_PORT_REG
(
uSDHC2_BASE_PTR
)

	)

41010 
	#uSDHC2_PRES_STATE
 
	`uSDHC_PRES_STATE_REG
(
uSDHC2_BASE_PTR
)

	)

41011 
	#uSDHC2_PROT_CTRL
 
	`uSDHC_PROT_CTRL_REG
(
uSDHC2_BASE_PTR
)

	)

41012 
	#uSDHC2_SYS_CTRL
 
	`uSDHC_SYS_CTRL_REG
(
uSDHC2_BASE_PTR
)

	)

41013 
	#uSDHC2_INT_STATUS
 
	`uSDHC_INT_STATUS_REG
(
uSDHC2_BASE_PTR
)

	)

41014 
	#uSDHC2_INT_STATUS_EN
 
	`uSDHC_INT_STATUS_EN_REG
(
uSDHC2_BASE_PTR
)

	)

41015 
	#uSDHC2_INT_SIGNAL_EN
 
	`uSDHC_INT_SIGNAL_EN_REG
(
uSDHC2_BASE_PTR
)

	)

41016 
	#uSDHC2_AUTOCMD12_ERR_STATUS
 
	`uSDHC_AUTOCMD12_ERR_STATUS_REG
(
uSDHC2_BASE_PTR
)

	)

41017 
	#uSDHC2_HOST_CTRL_CAP
 
	`uSDHC_HOST_CTRL_CAP_REG
(
uSDHC2_BASE_PTR
)

	)

41018 
	#uSDHC2_WTMK_LVL
 
	`uSDHC_WTMK_LVL_REG
(
uSDHC2_BASE_PTR
)

	)

41019 
	#uSDHC2_MIX_CTRL
 
	`uSDHC_MIX_CTRL_REG
(
uSDHC2_BASE_PTR
)

	)

41020 
	#uSDHC2_FORCE_EVENT
 
	`uSDHC_FORCE_EVENT_REG
(
uSDHC2_BASE_PTR
)

	)

41021 
	#uSDHC2_ADMA_ERR_STATUS
 
	`uSDHC_ADMA_ERR_STATUS_REG
(
uSDHC2_BASE_PTR
)

	)

41022 
	#uSDHC2_ADMA_SYS_ADDR
 
	`uSDHC_ADMA_SYS_ADDR_REG
(
uSDHC2_BASE_PTR
)

	)

41023 
	#uSDHC2_DLL_CTRL
 
	`uSDHC_DLL_CTRL_REG
(
uSDHC2_BASE_PTR
)

	)

41024 
	#uSDHC2_DLL_STATUS
 
	`uSDHC_DLL_STATUS_REG
(
uSDHC2_BASE_PTR
)

	)

41025 
	#uSDHC2_CLK_TUNE_CTRL_STATUS
 
	`uSDHC_CLK_TUNE_CTRL_STATUS_REG
(
uSDHC2_BASE_PTR
)

	)

41026 
	#uSDHC2_VEND_SPEC
 
	`uSDHC_VEND_SPEC_REG
(
uSDHC2_BASE_PTR
)

	)

41027 
	#uSDHC2_MMC_BOOT
 
	`uSDHC_MMC_BOOT_REG
(
uSDHC2_BASE_PTR
)

	)

41028 
	#uSDHC2_VEND_SPEC2
 
	`uSDHC_VEND_SPEC2_REG
(
uSDHC2_BASE_PTR
)

	)

41029 
	#uSDHC2_TUNING_CTRL
 
	`uSDHC_TUNING_CTRL_REG
(
uSDHC2_BASE_PTR
)

	)

41031 
	#uSDHC3_DS_ADDR
 
	`uSDHC_DS_ADDR_REG
(
uSDHC3_BASE_PTR
)

	)

41032 
	#uSDHC3_BLK_ATT
 
	`uSDHC_BLK_ATT_REG
(
uSDHC3_BASE_PTR
)

	)

41033 
	#uSDHC3_CMD_ARG
 
	`uSDHC_CMD_ARG_REG
(
uSDHC3_BASE_PTR
)

	)

41034 
	#uSDHC3_CMD_XFR_TYP
 
	`uSDHC_CMD_XFR_TYP_REG
(
uSDHC3_BASE_PTR
)

	)

41035 
	#uSDHC3_CMD_RSP0
 
	`uSDHC_CMD_RSP0_REG
(
uSDHC3_BASE_PTR
)

	)

41036 
	#uSDHC3_CMD_RSP1
 
	`uSDHC_CMD_RSP1_REG
(
uSDHC3_BASE_PTR
)

	)

41037 
	#uSDHC3_CMD_RSP2
 
	`uSDHC_CMD_RSP2_REG
(
uSDHC3_BASE_PTR
)

	)

41038 
	#uSDHC3_CMD_RSP3
 
	`uSDHC_CMD_RSP3_REG
(
uSDHC3_BASE_PTR
)

	)

41039 
	#uSDHC3_DATA_BUFF_ACC_PORT
 
	`uSDHC_DATA_BUFF_ACC_PORT_REG
(
uSDHC3_BASE_PTR
)

	)

41040 
	#uSDHC3_PRES_STATE
 
	`uSDHC_PRES_STATE_REG
(
uSDHC3_BASE_PTR
)

	)

41041 
	#uSDHC3_PROT_CTRL
 
	`uSDHC_PROT_CTRL_REG
(
uSDHC3_BASE_PTR
)

	)

41042 
	#uSDHC3_SYS_CTRL
 
	`uSDHC_SYS_CTRL_REG
(
uSDHC3_BASE_PTR
)

	)

41043 
	#uSDHC3_INT_STATUS
 
	`uSDHC_INT_STATUS_REG
(
uSDHC3_BASE_PTR
)

	)

41044 
	#uSDHC3_INT_STATUS_EN
 
	`uSDHC_INT_STATUS_EN_REG
(
uSDHC3_BASE_PTR
)

	)

41045 
	#uSDHC3_INT_SIGNAL_EN
 
	`uSDHC_INT_SIGNAL_EN_REG
(
uSDHC3_BASE_PTR
)

	)

41046 
	#uSDHC3_AUTOCMD12_ERR_STATUS
 
	`uSDHC_AUTOCMD12_ERR_STATUS_REG
(
uSDHC3_BASE_PTR
)

	)

41047 
	#uSDHC3_HOST_CTRL_CAP
 
	`uSDHC_HOST_CTRL_CAP_REG
(
uSDHC3_BASE_PTR
)

	)

41048 
	#uSDHC3_WTMK_LVL
 
	`uSDHC_WTMK_LVL_REG
(
uSDHC3_BASE_PTR
)

	)

41049 
	#uSDHC3_MIX_CTRL
 
	`uSDHC_MIX_CTRL_REG
(
uSDHC3_BASE_PTR
)

	)

41050 
	#uSDHC3_FORCE_EVENT
 
	`uSDHC_FORCE_EVENT_REG
(
uSDHC3_BASE_PTR
)

	)

41051 
	#uSDHC3_ADMA_ERR_STATUS
 
	`uSDHC_ADMA_ERR_STATUS_REG
(
uSDHC3_BASE_PTR
)

	)

41052 
	#uSDHC3_ADMA_SYS_ADDR
 
	`uSDHC_ADMA_SYS_ADDR_REG
(
uSDHC3_BASE_PTR
)

	)

41053 
	#uSDHC3_DLL_CTRL
 
	`uSDHC_DLL_CTRL_REG
(
uSDHC3_BASE_PTR
)

	)

41054 
	#uSDHC3_DLL_STATUS
 
	`uSDHC_DLL_STATUS_REG
(
uSDHC3_BASE_PTR
)

	)

41055 
	#uSDHC3_CLK_TUNE_CTRL_STATUS
 
	`uSDHC_CLK_TUNE_CTRL_STATUS_REG
(
uSDHC3_BASE_PTR
)

	)

41056 
	#uSDHC3_VEND_SPEC
 
	`uSDHC_VEND_SPEC_REG
(
uSDHC3_BASE_PTR
)

	)

41057 
	#uSDHC3_MMC_BOOT
 
	`uSDHC_MMC_BOOT_REG
(
uSDHC3_BASE_PTR
)

	)

41058 
	#uSDHC3_VEND_SPEC2
 
	`uSDHC_VEND_SPEC2_REG
(
uSDHC3_BASE_PTR
)

	)

41059 
	#uSDHC3_TUNING_CTRL
 
	`uSDHC_TUNING_CTRL_REG
(
uSDHC3_BASE_PTR
)

	)

41061 
	#uSDHC4_DS_ADDR
 
	`uSDHC_DS_ADDR_REG
(
uSDHC4_BASE_PTR
)

	)

41062 
	#uSDHC4_BLK_ATT
 
	`uSDHC_BLK_ATT_REG
(
uSDHC4_BASE_PTR
)

	)

41063 
	#uSDHC4_CMD_ARG
 
	`uSDHC_CMD_ARG_REG
(
uSDHC4_BASE_PTR
)

	)

41064 
	#uSDHC4_CMD_XFR_TYP
 
	`uSDHC_CMD_XFR_TYP_REG
(
uSDHC4_BASE_PTR
)

	)

41065 
	#uSDHC4_CMD_RSP0
 
	`uSDHC_CMD_RSP0_REG
(
uSDHC4_BASE_PTR
)

	)

41066 
	#uSDHC4_CMD_RSP1
 
	`uSDHC_CMD_RSP1_REG
(
uSDHC4_BASE_PTR
)

	)

41067 
	#uSDHC4_CMD_RSP2
 
	`uSDHC_CMD_RSP2_REG
(
uSDHC4_BASE_PTR
)

	)

41068 
	#uSDHC4_CMD_RSP3
 
	`uSDHC_CMD_RSP3_REG
(
uSDHC4_BASE_PTR
)

	)

41069 
	#uSDHC4_DATA_BUFF_ACC_PORT
 
	`uSDHC_DATA_BUFF_ACC_PORT_REG
(
uSDHC4_BASE_PTR
)

	)

41070 
	#uSDHC4_PRES_STATE
 
	`uSDHC_PRES_STATE_REG
(
uSDHC4_BASE_PTR
)

	)

41071 
	#uSDHC4_PROT_CTRL
 
	`uSDHC_PROT_CTRL_REG
(
uSDHC4_BASE_PTR
)

	)

41072 
	#uSDHC4_SYS_CTRL
 
	`uSDHC_SYS_CTRL_REG
(
uSDHC4_BASE_PTR
)

	)

41073 
	#uSDHC4_INT_STATUS
 
	`uSDHC_INT_STATUS_REG
(
uSDHC4_BASE_PTR
)

	)

41074 
	#uSDHC4_INT_STATUS_EN
 
	`uSDHC_INT_STATUS_EN_REG
(
uSDHC4_BASE_PTR
)

	)

41075 
	#uSDHC4_INT_SIGNAL_EN
 
	`uSDHC_INT_SIGNAL_EN_REG
(
uSDHC4_BASE_PTR
)

	)

41076 
	#uSDHC4_AUTOCMD12_ERR_STATUS
 
	`uSDHC_AUTOCMD12_ERR_STATUS_REG
(
uSDHC4_BASE_PTR
)

	)

41077 
	#uSDHC4_HOST_CTRL_CAP
 
	`uSDHC_HOST_CTRL_CAP_REG
(
uSDHC4_BASE_PTR
)

	)

41078 
	#uSDHC4_WTMK_LVL
 
	`uSDHC_WTMK_LVL_REG
(
uSDHC4_BASE_PTR
)

	)

41079 
	#uSDHC4_MIX_CTRL
 
	`uSDHC_MIX_CTRL_REG
(
uSDHC4_BASE_PTR
)

	)

41080 
	#uSDHC4_FORCE_EVENT
 
	`uSDHC_FORCE_EVENT_REG
(
uSDHC4_BASE_PTR
)

	)

41081 
	#uSDHC4_ADMA_ERR_STATUS
 
	`uSDHC_ADMA_ERR_STATUS_REG
(
uSDHC4_BASE_PTR
)

	)

41082 
	#uSDHC4_ADMA_SYS_ADDR
 
	`uSDHC_ADMA_SYS_ADDR_REG
(
uSDHC4_BASE_PTR
)

	)

41083 
	#uSDHC4_DLL_CTRL
 
	`uSDHC_DLL_CTRL_REG
(
uSDHC4_BASE_PTR
)

	)

41084 
	#uSDHC4_DLL_STATUS
 
	`uSDHC_DLL_STATUS_REG
(
uSDHC4_BASE_PTR
)

	)

41085 
	#uSDHC4_CLK_TUNE_CTRL_STATUS
 
	`uSDHC_CLK_TUNE_CTRL_STATUS_REG
(
uSDHC4_BASE_PTR
)

	)

41086 
	#uSDHC4_VEND_SPEC
 
	`uSDHC_VEND_SPEC_REG
(
uSDHC4_BASE_PTR
)

	)

41087 
	#uSDHC4_MMC_BOOT
 
	`uSDHC_MMC_BOOT_REG
(
uSDHC4_BASE_PTR
)

	)

41088 
	#uSDHC4_VEND_SPEC2
 
	`uSDHC_VEND_SPEC2_REG
(
uSDHC4_BASE_PTR
)

	)

41089 
	#uSDHC4_TUNING_CTRL
 
	`uSDHC_TUNING_CTRL_REG
(
uSDHC4_BASE_PTR
)

	)

41103 #i‡
deföed
(
__ARMCC_VERSION
)

41104 #¥agm®
p›


41105 #ñi‡
deföed
(
__GNUC__
)

41107 #ñi‡
deföed
(
__IAR_SYSTEMS_ICC__
)

41108 #¥agm®
œnguage
=

41110 #îr‹ 
NŸ
 
suµ‹ãd
 
compûî
 
ty≥


41136 #i‡(
MCU_MEM_MAP_VERSION
 != 0x0100u)

41137 #i‡(!
deföed
(
MCU_MEM_MAP_SUPPRESS_VERSION_WARNING
))

41138 #w¨nög 
Thîe
 
¨e
 
ö˛uded
 
two
 
nŸ
 
com∑tibÀ
 
vîsi⁄s
 
of
 
mem‹y
 
m≠s
. 
PÀa£
 
check
 
possibÀ
 
dif„ªn˚s
.

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\devices\MCIMX6X\startup\gcc\startup_MCIMX6X_M4.S

40 .
sy¡ax
 
	gunifõd


41 .
¨ch
 
	g¨mv7
-
	gm


43 .
	gãxt


44 .
	gthumb


48 .
	gthumb_func


49 .
	gÆign
 2

50 .
globl
 
	gRe£t_H™dÀr


51 .
wók
 
	gRe£t_H™dÀr


52 .
ty≥
 
	gRe£t_H™dÀr
, %
fun˘i⁄


53 
	gRe£t_H™dÀr
:

56 
˝sid
 
i


58 
n›


59 
ldr
 
r1
, =
__SèckT›


60 
mov
 
•
, 
	gr1


62 #i‚de‡
__NO_SYSTEM_INIT


63 
bl
 
	gSy°emInô


72 
ldr
 
	gr1
, =
__ëext


73 
ldr
 
r2
, =
__d©a_°¨t__


74 
ldr
 
r3
, =
__d©a_íd__


80 .
LC0
:

81 
cmp
 
r2
, 
r3


82 
ôâ
 
…


83 
ldæt
 
	gr0
, [
r1
], #4

84 
°æt
 
	gr0
, [
r2
], #4

85 
	gb…
 .
	gLC0


87 
subs
 
	gr3
, 
r2


88 
	gbÀ
 .
	gLC1


89 .
	gLC0
:

90 
subs
 
r3
, #4

91 
ldr
 
	gr0
, [
r1
, 
r3
]

92 
°r
 
	gr0
, [
r2
, 
r3
]

93 
	gbgt
 .
	gLC0


94 .
	gLC1
:

98 
˝sõ
 
i


99 
bl
 
_°¨t


100 .
poﬁ


101 .
size
 
Re£t_H™dÀr
, . - 
	gRe£t_H™dÀr


107 .
	gÆign
 1

108 .
	gthumb_func


109 .
wók
 
	g_°¨t


110 .
ty≥
 
	g_°¨t
, %
fun˘i⁄


111 
	g_°¨t
:

114 
ldr
 
r1
, = 
__bss_°¨t__


115 
ldr
 
r2
, = 
__bss_íd__


116 
movs
 
r3
, #0

117 
	gb
 .
	gfûl_zîo_bss


118 .
	glo›_zîo_bss
:

119 
°r
 
r3
, [
r1
]

120 
adds
 
	gr1
,#4

122 .
	gfûl_zîo_bss
:

123 
cmp
 
r1
, 
r2


124 
	gbcc
 .
lo›_zîo_bss


127 
bl
 
maö


128 
	gb
 .

129 .
size
 
	g_°¨t
, . - _start

131 .
	gíd


	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\devices\MCIMX6X\startup\system_MCIMX6X_M4.c

30 
	~<°dboﬁ.h
>

31 
	~"MCIMX6X_M4.h
"

36 
	#EXTRACT_BITFIELD
(
ªg
, 
shi·
, 
width
Ë((*‘egË& (((1 << (width)Ë- 1Ë<< (shi·))Ë>> (shi·))

	)

41 
	#VECT_TAB_OFFSET
 0x0

	)

46 
uöt32_t
 
	gSy°emC‹eClock
 = 227000000;

51 
	$Sy°emInô
()

54 #i‡
	`deföed
(
__CC_ARM
)

55 
uöt32_t
 
Image$$VECTOR_ROM$$Ba£
[];

57 
uöt32_t
 
__VECTOR_TABLE
[];

61 #i‡((1 =
__FPU_PRESENT
Ë&& (1 =
__FPU_USED
))

62 
SCB
->
CPACR
 |= ((3UL << 10*2)|(3UL << 11*2));

71 
LMEM_PSCCR
 = 
LMEM_PSCCR_INVW1_MASK
 | 
LMEM_PSCCR_INVW0_MASK
;

72 
LMEM_PSCCR
 |
LMEM_PSCCR_GO_MASK
;

74 
LMEM_PSCCR
 & 
LMEM_PSCCR_GO_MASK
);

76 
LMEM_PSCCR
 = (
LMEM_PSCCR_ENWRBUF_MASK
 | 
LMEM_PSCCR_ENCACHE_MASK
);

77 
	`__ISB
();

82 
LMEM_PCCCR
 = 
LMEM_PCCCR_INVW1_MASK
 | 
LMEM_PCCCR_INVW0_MASK
;

83 
LMEM_PCCCR
 |
LMEM_PCCCR_GO_MASK
;

85 
LMEM_PCCCR
 & 
LMEM_PCCCR_GO_MASK
);

87 
LMEM_PCCCR
 = (
LMEM_PCCCR_ENWRBUF_MASK
 | 
LMEM_PCCCR_ENCACHE_MASK
);

88 
	`__ISB
();

89 
	`__DSB
();

92 #i‡
	`deföed
(
__CC_ARM
)

93 
SCB
->
VTOR
 = (
uöt32_t
)
Image$$VECTOR_ROM$$Ba£
 + 
VECT_TAB_OFFSET
;

95 
SCB
->
VTOR
 = (
uöt32_t
)
__VECTOR_TABLE
 + 
VECT_TAB_OFFSET
;

97 
	}
}

103 
	$Sy°emC‹eClockUpd©e
()

105 
uöt8_t
 
c‹eClockRoŸ
 = 
	`EXTRACT_BITFIELD
(&
CCM_CHSCCDR
, 6, 3);

106 
uöt8_t
 
c‹eClockDiv
 = 
	`EXTRACT_BITFIELD
(&
CCM_CHSCCDR
, 3, 3) + 1;

107 
uöt64_t
 
ãmpClk
;

110 i‡(0 !
	`EXTRACT_BITFIELD
(&
CCM_CHSCCDR
, 0, 3))

120 
c‹eClockRoŸ
)

125 i‡(!
	`EXTRACT_BITFIELD
(&
CCM_ANALOG_PLL_SYS
, 16, 1))

127 
ãmpClk
 = (1 =
	`EXTRACT_BITFIELD
(&
CCM_ANALOG_PLL_SYS
, \

133 
ãmpClk
 = 24000000ul;

140 i‡(!
	`EXTRACT_BITFIELD
(&
CCM_CCSR
, 0, 1) &&

141 !
	`EXTRACT_BITFIELD
(&
CCM_ANALOG_PLL_USB1
, 16, 1))

143 
ãmpClk
 = (1 =
	`EXTRACT_BITFIELD
(&
CCM_ANALOG_PLL_USB1
, \

149 
ãmpClk
 = 24000000ul;

155 
ãmpClk
 = 24000000ul;

161 i‡(!
	`EXTRACT_BITFIELD
(&
CCM_ANALOG_PLL_SYS
, 16, 1))

164 
ãmpClk
 = (1 =
	`EXTRACT_BITFIELD
(&
CCM_ANALOG_PLL_SYS
, \

167 
ãmpClk
 *= 18;

168 
ãmpClk
 /
	`EXTRACT_BITFIELD
(&
CCM_ANALOG_PFD_528
, 0, 6);

173 
ãmpClk
 = 24000000ul;

180 i‡(!
	`EXTRACT_BITFIELD
(&
CCM_ANALOG_PLL_SYS
, 16, 1))

183 
ãmpClk
 = (1 =
	`EXTRACT_BITFIELD
(&
CCM_ANALOG_PLL_SYS
, \

186 
ãmpClk
 *= 18;

187 
ãmpClk
 /
	`EXTRACT_BITFIELD
(&
CCM_ANALOG_PFD_528
, 16, 6);

192 
ãmpClk
 = 24000000ul;

199 i‡(!
	`EXTRACT_BITFIELD
(&
CCM_ANALOG_PLL_USB1
, 16, 1))

202 
ãmpClk
 = (1 =
	`EXTRACT_BITFIELD
(&
CCM_ANALOG_PLL_USB1
, \

205 
ãmpClk
 *= 18;

206 
ãmpClk
 /
	`EXTRACT_BITFIELD
(&
CCM_ANALOG_PFD_480
, 24, 6);

211 
ãmpClk
 = 24000000ul;

217 
ãmpClk
 = 227000000ul;

218 
c‹eClockDiv
 = 1;

222 
Sy°emC‹eClock
 = (
uöt32_t
)(
ãmpClk
 / 
c‹eClockDiv
);

223 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\devices\MCIMX6X\startup\system_MCIMX6X_M4.h

31 #i‚de‡
__SYSTEM_MCIMX6X_M4_H


32 
	#__SYSTEM_MCIMX6X_M4_H


	)

34 #ifde‡
__˝lu•lus


38 #i‚de‡
DISABLE_WDOG


39 
	#DISABLE_WDOG
 1

	)

51 
uöt32_t
 
Sy°emC‹eClock
;

60 
Sy°emInô
();

69 
Sy°emC‹eClockUpd©e
();

71 #ifde‡
__˝lu•lus


	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\devices\device_imx.h

43 #i‚de‡
__DEVICE_IMX_H__


44 
	#__DEVICE_IMX_H__


	)

51 #i‡
deföed
(
CPU_MCIMX6X_M4
)

54 
	~"MCIMX6X/ö˛ude/MCIMX6X_M4.h
"

55 
	#RDC_SEMAPHORE_MASTER_SELF
 (5)

	)

56 
	#SEMA4_PROCESSOR_SELF
 (1)

	)

58 #ñi‡
deföed
(
CPU_MCIMX7D_M4
)

61 
	~"MCIMX7D/ö˛ude/MCIMX7D_M4.h
"

63 
	#RDC_SEMAPHORE_MASTER_SELF
 (6)

	)

64 
	#SEMA4_PROCESSOR_SELF
 (1)

	)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\adc_imx6sx.h

31 #i‚de‡
__ADC_IMX6SX_H__


32 
	#__ADC_IMX6SX_H__


	)

34 
	~<°döt.h
>

35 
	~<°dboﬁ.h
>

36 
	~<as£π.h
>

37 
	~"devi˚_imx.h
"

49 
	s_adc_öô_c⁄fig


51 
uöt8_t
 
	m˛ockSour˚
;

52 
uöt8_t
 
	mdivideR©io
;

53 
uöt8_t
 
	mavîageNumbî
;

54 
uöt8_t
 
	mªsﬁuti⁄Mode
;

55 } 
	tadc_öô_c⁄fig_t
;

58 
	e_adc_avîage_numbî


60 
	madcAvgNum4
 = 0U,

61 
	madcAvgNum8
 = 1U,

62 
	madcAvgNum16
 = 2U,

63 
	madcAvgNum32
 = 3U,

64 
	madcAvgNumN⁄e
 = 4U,

68 
	e_adc_c⁄vît_åiggî_mode


70 
	madcSo·w¨eTriggî
 = 0U,

71 
	madcH¨dw¨eTriggî
 = 1U,

75 
	e_adc_c⁄vît_•ìd_c⁄fig


77 
	madcN‹mÆS≥ed
 = 0U,

78 
	madcHighS≥ed
 = 1U,

82 
	e_adc_ßm∂e_time_duøti⁄


84 
	madcSam∂ePîiodClock2
,

85 
	madcSam∂ePîiodClock4
,

86 
	madcSam∂ePîiodClock6
,

87 
	madcSam∂ePîiodClock8
,

88 
	madcSam∂ePîiodClock12
,

89 
	madcSam∂ePîiodClock16
,

90 
	madcSam∂ePîiodClock20
,

91 
	madcSam∂ePîiodClock24
,

95 
	e_adc_powî_mode


97 
	madcN‹mÆPowîMode
 = 0U,

98 
	madcLowPowîMode
 = 1U,

102 
	e_adc_ªsﬁuti⁄_mode


104 
	madcResﬁuti⁄Bô8
 = 0U,

105 
	madcResﬁuti⁄Bô10
 = 1U,

106 
	madcResﬁuti⁄Bô12
 = 2U,

110 
	e_adc_˛ock_divide


112 
	madcI≈utClockDiv1
 = 0U,

113 
	madcI≈utClockDiv2
 = 1U,

114 
	madcI≈utClockDiv4
 = 2U,

115 
	madcI≈utClockDiv8
 = 3U,

119 
	e_adc_˛ock_sour˚


121 
	madcIpgClock
 = 0U,

122 
	madcIpgClockDivide2
 = 1U,

123 
	madcAsynClock
 = 3U,

127 
	e_adc_com∑ª_mode


129 
	madcCmpModeLessTh™CmpVÆ1
,

130 
	madcCmpModeGª©îTh™CmpVÆ1
,

131 
	madcCmpModeOutR™gNŸIn˛usive
,

132 
	madcCmpModeInR™gNŸIn˛usive
,

133 
	madcCmpModeInR™gIn˛usive
,

134 
	madcCmpModeOutR™gIn˛usive
,

135 
	madcCmpModeDißbÀ
,

139 
	e_adc_gíîÆ_°©us_Êag


141 
	madcFœgAsynWakeUpI¡
 = 1U << 0,

142 
	madcFœgCÆibøãFaûed
 = 1U << 1,

143 
	madcFœgC⁄vîtA˘ive
 = 1U << 2,

150 #i‡
deföed
(
__˝lu•lus
)

165 
ADC_Inô
(
ADC_Ty≥
* 
ba£
, c⁄° 
adc_öô_c⁄fig_t
* 
öôC⁄fig
);

172 
ADC_Deöô
(
ADC_Ty≥
* 
ba£
);

182 
ADC_SëC⁄vîtResu…Ovîwrôe
(
ADC_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

190 
ADC_SëC⁄vîtTrigMode
(
ADC_Ty≥
* 
ba£
, 
uöt8_t
 
mode
);

198 
ölöe
 
uöt8_t
 
ADC_GëC⁄vîtTrigMode
(
ADC_Ty≥
* 
ba£
)

200  (
uöt8_t
)((
ADC_CFG_REG
(
ba£
Ë& 
ADC_CFG_ADTRG_MASK
Ë>> 
ADC_CFG_ADTRG_SHIFT
);

209 
ADC_SëC⁄vîtS≥ed
(
ADC_Ty≥
* 
ba£
, 
uöt8_t
 
mode
);

217 
ölöe
 
uöt8_t
 
ADC_GëC⁄vîtS≥ed
(
ADC_Ty≥
* 
ba£
)

219  (
uöt8_t
)((
ADC_CFG_REG
(
ba£
Ë& 
ADC_CFG_ADHSC_MASK
Ë>> 
ADC_CFG_ADHSC_SHIFT
);

228 
ADC_SëSam∂eTimeDuøti⁄
(
ADC_Ty≥
* 
ba£
, 
uöt8_t
 
duøti⁄
);

236 
ADC_SëPowîMode
(
ADC_Ty≥
* 
ba£
, 
uöt8_t
 
powîMode
);

244 
ölöe
 
uöt8_t
 
ADC_GëPowîMode
(
ADC_Ty≥
* 
ba£
)

246  (
uöt8_t
)((
ADC_CFG_REG
(
ba£
Ë& 
ADC_CFG_ADLPC_MASK
Ë>> 
ADC_CFG_ADLPC_SHIFT
);

256 
ADC_SëClockSour˚
(
ADC_Ty≥
* 
ba£
, 
uöt8_t
 
sour˚
, uöt8_à
div
);

270 
ADC_SëAsynClockOuçut
(
ADC_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

287 
ADC_SëCÆibøti⁄
(
ADC_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

295 
ölöe
 
uöt8_t
 
ADC_GëCÆibøti⁄Resu…
(
ADC_Ty≥
* 
ba£
)

297  (
uöt8_t
)((
ADC_CAL_REG
(
ba£
Ë& 
ADC_CAL_CAL_CODE_MASK
Ë>> 
ADC_CAL_CAL_CODE_SHIFT
);

319 
ADC_SëC⁄vîtCmd
(
ADC_Ty≥
* 
ba£
, 
uöt8_t
 
ch™√l
, 
boﬁ
 
íabÀ
);

330 
ADC_TriggîSögÀC⁄vît
(
ADC_Ty≥
* 
ba£
, 
uöt8_t
 
ch™√l
);

340 
ADC_SëAvîageNum
(
ADC_Ty≥
* 
ba£
, 
uöt8_t
 
avgNum
);

348 
ölöe
 
ADC_SëResﬁuti⁄Mode
(
ADC_Ty≥
* 
ba£
, 
uöt8_t
 
mode
)

350 
as£π
(
mode
 <
adcResﬁuti⁄Bô12
);

352 
ADC_CFG_REG
(
ba£
Ë(ADC_CFG_REG(ba£Ë& (~
ADC_CFG_MODE_MASK
)) |

353 
ADC_CFG_MODE
(
mode
);

362 
ölöe
 
uöt8_t
 
ADC_GëResﬁuti⁄Mode
(
ADC_Ty≥
* 
ba£
)

364  (
uöt8_t
)((
ADC_CFG_REG
(
ba£
Ë& 
ADC_CFG_MODE_MASK
Ë>> 
ADC_CFG_MODE_SHIFT
);

372 
ADC_St›C⁄vît
(
ADC_Ty≥
* 
ba£
);

380 
uöt16_t
 
ADC_GëC⁄vîtResu…
(
ADC_Ty≥
* 
ba£
);

404 
ADC_SëCmpMode
(
ADC_Ty≥
* 
ba£
, 
uöt8_t
 
cmpMode
, 
uöt16_t
 
cmpVÆ1
, uöt16_à
cmpVÆ2
);

421 
ADC_SëC‹ª˘i⁄Mode
(
ADC_Ty≥
* 
ba£
, 
boﬁ
 
c‹ª˘Mode
);

429 
ölöe
 
ADC_SëOff£tVÆ
(
ADC_Ty≥
* 
ba£
, 
uöt16_t
 
vÆ
)

431 
ADC_OFS_REG
(
ba£
Ë(ADC_OFS_REG(ba£Ë& (~
ADC_OFS_OFS_MASK
)) |

432 
ADC_OFS_OFS
(
vÆ
);

450 
ADC_SëI¡Cmd
(
ADC_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

459 
boﬁ
 
ADC_IsC⁄vîtCom∂ëe
(
ADC_Ty≥
* 
ba£
);

468 
ölöe
 
uöt32_t
 
ADC_GëSètusFœg
(
ADC_Ty≥
* 
ba£
, uöt32_à
Êags
)

470  (
uöt32_t
)(
ADC_GS_REG
(
ba£
Ë& 
Êags
);

479 
ölöe
 
ADC_CÀ¨SètusFœg
(
ADC_Ty≥
* 
ba£
, 
uöt32_t
 
Êags
)

481 
as£π
(
Êags
 < 
adcFœgC⁄vîtA˘ive
);

482 
ADC_GS_REG
(
ba£
Ë|
Êags
;

500 
ADC_SëDmaCmd
(
ADC_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

504 #ifde‡
__˝lu•lus


	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\ccm_analog_imx6sx.h

31 #i‚de‡
__CCM_ANALOG_IMX6SX_H__


32 
	#__CCM_ANALOG_IMX6SX_H__


	)

34 
	~<°döt.h
>

35 
	~<°dboﬁ.h
>

36 
	~<°ddef.h
>

37 
	~<as£π.h
>

38 
	~"devi˚_imx.h
"

48 
	#CCM_ANALOG_TUPLE
(
ªg
, 
shi·
Ë((
	`off£tof
(
CCM_ANALOG_Ty≥
,ÑegË& 0xFFFFË| ((shi·Ë<< 16))

	)

49 
	#CCM_ANALOG_TUPLE_REG_OFF
(
ba£
, 
tu∂e
, 
off
Ë(*((vﬁ©ûê
uöt32_t
 *)((uöt32_t)ba£ + (—u∂eË& 0xFFFFË+ off)))

	)

50 
	#CCM_ANALOG_TUPLE_REG
(
ba£
, 
tu∂e
Ë
	`CCM_ANALOG_TUPLE_REG_OFF
(ba£,Åu∂e, 0)

	)

51 
	#CCM_ANALOG_TUPLE_REG_SET
(
ba£
, 
tu∂e
Ë
	`CCM_ANALOG_TUPLE_REG_OFF
(ba£,Åu∂e, 4)

	)

52 
	#CCM_ANALOG_TUPLE_REG_CLR
(
ba£
, 
tu∂e
Ë
	`CCM_ANALOG_TUPLE_REG_OFF
(ba£,Åu∂e, 8)

	)

53 
	#CCM_ANALOG_TUPLE_SHIFT
(
tu∂e
Ë((—u∂eË>> 16Ë& 0x1F)

	)

54 
	#CCM_ANALOG_TUPLE_OFFSET
(
tu∂e
Ë(—u∂eË& 0xFFFF)

	)

63 
	e_ccm_™Æog_∂l_c⁄åﬁ
 {

64 
	mccmA«logPŒArmC⁄åﬁ
 = 
CCM_ANALOG_TUPLE
(
PLL_ARM
, 
CCM_ANALOG_PLL_ARM_POWERDOWN_SHIFT
),

65 
	mccmA«logPŒUsb1C⁄åﬁ
 = 
CCM_ANALOG_TUPLE
(
PLL_USB1
, 
CCM_ANALOG_PLL_USB1_POWER_SHIFT
),

66 
	mccmA«logPŒUsb2C⁄åﬁ
 = 
CCM_ANALOG_TUPLE
(
PLL_USB2
, 
CCM_ANALOG_PLL_USB2_POWER_SHIFT
),

67 
	mccmA«logPŒSysC⁄åﬁ
 = 
CCM_ANALOG_TUPLE
(
PLL_SYS
, 
CCM_ANALOG_PLL_SYS_POWERDOWN_SHIFT
),

68 
	mccmA«logPŒAudioC⁄åﬁ
 = 
CCM_ANALOG_TUPLE
(
PLL_AUDIO
, 
CCM_ANALOG_PLL_AUDIO_POWERDOWN_SHIFT
),

69 
	mccmA«logPŒVideoC⁄åﬁ
 = 
CCM_ANALOG_TUPLE
(
PLL_VIDEO
, 
CCM_ANALOG_PLL_VIDEO_POWERDOWN_SHIFT
),

70 
	mccmA«logPŒE√tC⁄åﬁ
 = 
CCM_ANALOG_TUPLE
(
PLL_ENET
, 
CCM_ANALOG_PLL_ENET_POWERDOWN_SHIFT
)

80 
	e_ccm_™Æog_∂l_˛ock
 {

81 
	mccmA«logPŒArmClock
 = 
CCM_ANALOG_TUPLE
(
PLL_ARM
, 
CCM_ANALOG_PLL_ARM_ENABLE_SHIFT
),

82 
	mccmA«logPŒUsb1Clock
 = 
CCM_ANALOG_TUPLE
(
PLL_USB1
, 
CCM_ANALOG_PLL_USB1_ENABLE_SHIFT
),

83 
	mccmA«logPŒUsb2Clock
 = 
CCM_ANALOG_TUPLE
(
PLL_USB2
, 
CCM_ANALOG_PLL_USB2_ENABLE_SHIFT
),

84 
	mccmA«logPŒSysClock
 = 
CCM_ANALOG_TUPLE
(
PLL_SYS
, 
CCM_ANALOG_PLL_SYS_ENABLE_SHIFT
),

85 
	mccmA«logPŒAudioClock
 = 
CCM_ANALOG_TUPLE
(
PLL_AUDIO
, 
CCM_ANALOG_PLL_AUDIO_ENABLE_SHIFT
),

86 
	mccmA«logPŒVideoClock
 = 
CCM_ANALOG_TUPLE
(
PLL_VIDEO
, 
CCM_ANALOG_PLL_VIDEO_ENABLE_SHIFT
),

87 
	mccmA«logPŒE√tClock25Mhz
 = 
CCM_ANALOG_TUPLE
(
PLL_ENET
, 
CCM_ANALOG_PLL_ENET_ENET_25M_REF_EN_SHIFT
),

88 
	mccmA«logPŒE√t2Clock125Mhz
 = 
CCM_ANALOG_TUPLE
(
PLL_ENET
, 
CCM_ANALOG_PLL_ENET_ENET2_125M_EN_SHIFT
),

89 
	mccmA«logPŒE√t1Clock125Mhz
 = 
CCM_ANALOG_TUPLE
(
PLL_ENET
, 
CCM_ANALOG_PLL_ENET_ENET1_125M_EN_SHIFT
)

99 
	e_ccm_™Æog_pfd_˛kg©e
 {

100 
	mccmA«logPŒ2Pfd0ClkG©e
 = 
CCM_ANALOG_TUPLE
(
PFD_528
, 
CCM_ANALOG_PFD_528_PFD0_CLKGATE_SHIFT
),

101 
	mccmA«logPŒ2Pfd1ClkG©e
 = 
CCM_ANALOG_TUPLE
(
PFD_528
, 
CCM_ANALOG_PFD_528_PFD1_CLKGATE_SHIFT
),

102 
	mccmA«logPŒ2Pfd2ClkG©e
 = 
CCM_ANALOG_TUPLE
(
PFD_528
, 
CCM_ANALOG_PFD_528_PFD2_CLKGATE_SHIFT
),

103 
	mccmA«logPŒ2Pfd3ClkG©e
 = 
CCM_ANALOG_TUPLE
(
PFD_528
, 
CCM_ANALOG_PFD_528_PFD3_CLKGATE_SHIFT
),

104 
	mccmA«logPŒ3Pfd0ClkG©e
 = 
CCM_ANALOG_TUPLE
(
PFD_480
, 
CCM_ANALOG_PFD_480_PFD0_CLKGATE_SHIFT
),

105 
	mccmA«logPŒ3Pfd1ClkG©e
 = 
CCM_ANALOG_TUPLE
(
PFD_480
, 
CCM_ANALOG_PFD_480_PFD1_CLKGATE_SHIFT
),

106 
	mccmA«logPŒ3Pfd2ClkG©e
 = 
CCM_ANALOG_TUPLE
(
PFD_480
, 
CCM_ANALOG_PFD_480_PFD2_CLKGATE_SHIFT
),

107 
	mccmA«logPŒ3Pfd3ClkG©e
 = 
CCM_ANALOG_TUPLE
(
PFD_480
, 
CCM_ANALOG_PFD_480_PFD3_CLKGATE_SHIFT
)

117 
	e_ccm_™Æog_pfd_‰ac
 {

118 
	mccmA«logPŒ2Pfd0Føc
 = 
CCM_ANALOG_TUPLE
(
PFD_528
, 
CCM_ANALOG_PFD_528_PFD0_FRAC_SHIFT
),

119 
	mccmA«logPŒ2Pfd1Føc
 = 
CCM_ANALOG_TUPLE
(
PFD_528
, 
CCM_ANALOG_PFD_528_PFD1_FRAC_SHIFT
),

120 
	mccmA«logPŒ2Pfd2Føc
 = 
CCM_ANALOG_TUPLE
(
PFD_528
, 
CCM_ANALOG_PFD_528_PFD2_FRAC_SHIFT
),

121 
	mccmA«logPŒ2Pfd3Føc
 = 
CCM_ANALOG_TUPLE
(
PFD_528
, 
CCM_ANALOG_PFD_528_PFD3_FRAC_SHIFT
),

122 
	mccmA«logPŒ3Pfd0Føc
 = 
CCM_ANALOG_TUPLE
(
PFD_480
, 
CCM_ANALOG_PFD_480_PFD0_FRAC_SHIFT
),

123 
	mccmA«logPŒ3Pfd1Føc
 = 
CCM_ANALOG_TUPLE
(
PFD_480
, 
CCM_ANALOG_PFD_480_PFD1_FRAC_SHIFT
),

124 
	mccmA«logPŒ3Pfd2Føc
 = 
CCM_ANALOG_TUPLE
(
PFD_480
, 
CCM_ANALOG_PFD_480_PFD2_FRAC_SHIFT
),

125 
	mccmA«logPŒ3Pfd3Føc
 = 
CCM_ANALOG_TUPLE
(
PFD_480
, 
CCM_ANALOG_PFD_480_PFD3_FRAC_SHIFT
)

135 
	e_ccm_™Æog_pfd_°abÀ
 {

136 
	mccmA«logPŒ2Pfd0SèbÀ
 = 
CCM_ANALOG_TUPLE
(
PFD_528
, 
CCM_ANALOG_PFD_528_PFD0_STABLE_SHIFT
),

137 
	mccmA«logPŒ2Pfd1SèbÀ
 = 
CCM_ANALOG_TUPLE
(
PFD_528
, 
CCM_ANALOG_PFD_528_PFD1_STABLE_SHIFT
),

138 
	mccmA«logPŒ2Pfd2SèbÀ
 = 
CCM_ANALOG_TUPLE
(
PFD_528
, 
CCM_ANALOG_PFD_528_PFD2_STABLE_SHIFT
),

139 
	mccmA«logPŒ2Pfd3SèbÀ
 = 
CCM_ANALOG_TUPLE
(
PFD_528
, 
CCM_ANALOG_PFD_528_PFD3_STABLE_SHIFT
),

140 
	mccmA«logPŒ3Pfd0SèbÀ
 = 
CCM_ANALOG_TUPLE
(
PFD_480
, 
CCM_ANALOG_PFD_480_PFD0_STABLE_SHIFT
),

141 
	mccmA«logPŒ3Pfd1SèbÀ
 = 
CCM_ANALOG_TUPLE
(
PFD_480
, 
CCM_ANALOG_PFD_480_PFD1_STABLE_SHIFT
),

142 
	mccmA«logPŒ3Pfd2SèbÀ
 = 
CCM_ANALOG_TUPLE
(
PFD_480
, 
CCM_ANALOG_PFD_480_PFD2_STABLE_SHIFT
),

143 
	mccmA«logPŒ3Pfd3SèbÀ
 = 
CCM_ANALOG_TUPLE
(
PFD_480
, 
CCM_ANALOG_PFD_480_PFD3_STABLE_SHIFT
)

150 #i‡
deföed
(
__˝lu•lus
)

165 
CCM_ANALOG_PowîUpPŒ
(
CCM_ANALOG_Ty≥
 * 
ba£
, 
uöt32_t
 
∂lC⁄åﬁ
);

173 
CCM_ANALOG_PowîDownPŒ
(
CCM_ANALOG_Ty≥
 * 
ba£
, 
uöt32_t
 
∂lC⁄åﬁ
);

184 
CCM_ANALOG_SëPŒBy∑ss
(
CCM_ANALOG_Ty≥
 * 
ba£
, 
uöt32_t
 
∂lC⁄åﬁ
, 
boﬁ
 
by∑ss
);

195 
ölöe
 
boﬁ
 
CCM_ANALOG_IsPŒBy∑s£d
(
CCM_ANALOG_Ty≥
 * 
ba£
, 
uöt32_t
 
∂lC⁄åﬁ
)

197  (
boﬁ
)(
CCM_ANALOG_TUPLE_REG
(
ba£
, 
∂lC⁄åﬁ
Ë& 
CCM_ANALOG_PLL_ARM_BYPASS_MASK
);

209 
ölöe
 
boﬁ
 
CCM_ANALOG_IsPŒLocked
(
CCM_ANALOG_Ty≥
 * 
ba£
, 
uöt32_t
 
∂lC⁄åﬁ
)

211  (
boﬁ
)(
CCM_ANALOG_TUPLE_REG
(
ba£
, 
∂lC⁄åﬁ
Ë& 
CCM_ANALOG_PLL_ARM_LOCK_MASK
);

220 
ölöe
 
CCM_ANALOG_E«bÀPŒClock
(
CCM_ANALOG_Ty≥
 * 
ba£
, 
uöt32_t
 
∂lClock
)

222 
CCM_ANALOG_TUPLE_REG_SET
(
ba£
, 
∂lClock
Ë1 << 
CCM_ANALOG_TUPLE_SHIFT
(pllClock);

231 
ölöe
 
CCM_ANALOG_DißbÀPŒClock
(
CCM_ANALOG_Ty≥
 * 
ba£
, 
uöt32_t
 
∂lClock
)

233 
CCM_ANALOG_TUPLE_REG_CLR
(
ba£
, 
∂lClock
Ë1 << 
CCM_ANALOG_TUPLE_SHIFT
(pllClock);

243 
uöt32_t
 
CCM_ANALOG_GëPŒFªq
(
CCM_ANALOG_Ty≥
 * 
ba£
, uöt32_à
∂lC⁄åﬁ
);

258 
ölöe
 
CCM_ANALOG_E«bÀPfdClock
(
CCM_ANALOG_Ty≥
 * 
ba£
, 
uöt32_t
 
pfdClkG©e
)

260 
CCM_ANALOG_TUPLE_REG_CLR
(
ba£
, 
pfdClkG©e
Ë1 << 
CCM_ANALOG_TUPLE_SHIFT
(pfdClkGate);

269 
ölöe
 
CCM_ANALOG_DißbÀPfdClock
(
CCM_ANALOG_Ty≥
 * 
ba£
, 
uöt32_t
 
pfdClkG©e
)

271 
CCM_ANALOG_TUPLE_REG_SET
(
ba£
, 
pfdClkG©e
Ë1 << 
CCM_ANALOG_TUPLE_SHIFT
(pfdClkGate);

283 
ölöe
 
boﬁ
 
CCM_ANALOG_IsPfdSèbÀ
(
CCM_ANALOG_Ty≥
 * 
ba£
, 
uöt32_t
 
pfdSèbÀ
)

285  (
boﬁ
)(
CCM_ANALOG_TUPLE_REG
(
ba£
, 
pfdSèbÀ
Ë& (1 << 
CCM_ANALOG_TUPLE_SHIFT
(pfdStable)));

296 
ölöe
 
CCM_ANALOG_SëPfdFøc
(
CCM_ANALOG_Ty≥
 * 
ba£
, 
uöt32_t
 
pfdFøc
, uöt32_à
vÆue
)

298 
as£π
(
vÆue
 >= 12 && value <= 35);

299 
CCM_ANALOG_TUPLE_REG_CLR
(
ba£
, 
pfdFøc
Ë
CCM_ANALOG_PFD_480_CLR_PFD0_FRAC_MASK
 << 
CCM_ANALOG_TUPLE_SHIFT
(pfdFrac);

300 
CCM_ANALOG_TUPLE_REG_SET
(
ba£
, 
pfdFøc
Ë
vÆue
 << 
CCM_ANALOG_TUPLE_SHIFT
(pfdFrac);

310 
ölöe
 
uöt32_t
 
CCM_ANALOG_GëPfdFøc
(
CCM_ANALOG_Ty≥
 * 
ba£
, uöt32_à
pfdFøc
)

312  (
CCM_ANALOG_TUPLE_REG
(
ba£
, 
pfdFøc
Ë>> 
CCM_ANALOG_TUPLE_SHIFT
’fdFøc)Ë& 
CCM_ANALOG_PFD_480_CLR_PFD0_FRAC_MASK
;

322 
uöt32_t
 
CCM_ANALOG_GëPfdFªq
(
CCM_ANALOG_Ty≥
 * 
ba£
, uöt32_à
pfdFøc
);

326 #i‡
deföed
(
__˝lu•lus
)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\ccm_imx6sx.h

31 #i‚de‡
__CCM_IMX6SX_H__


32 
	#__CCM_IMX6SX_H__


	)

34 
	~<°döt.h
>

35 
	~<°dboﬁ.h
>

36 
	~<°ddef.h
>

37 
	~<as£π.h
>

38 
	~"devi˚_imx.h
"

48 
	#CCM_TUPLE
(
ªg
, 
shi·
, 
mask
Ë((
	`off£tof
(
CCM_Ty≥
,ÑegË& 0xFFË| ((shi·Ë<< 8Ë| (((mask >> shi·Ë& 0xFFFFË<< 16))

	)

49 
	#CCM_TUPLE_REG
(
ba£
, 
tu∂e
Ë(*((vﬁ©ûê
uöt32_t
 *)((uöt32_t)ba£ + (—u∂eË& 0xFF))))

	)

50 
	#CCM_TUPLE_SHIFT
(
tu∂e
Ë((—u∂eË>> 8Ë& 0x1F)

	)

51 
	#CCM_TUPLE_MASK
(
tu∂e
Ë((
uöt32_t
)(((—u∂eË>> 16Ë& 0xFFFFË<< (((—u∂eË>> 8Ë& 0x1F))))

	)

61 
	e_ccm_roŸ_˛ock_c⁄åﬁ
 {

62 
	mccmRoŸPŒ1SwClkSñ
 = 
CCM_TUPLE
(
CCSR
, 
CCM_CCSR_∂l1_sw_˛k_£l_SHIFT
, 
CCM_CCSR_∂l1_sw_˛k_£l_MASK
),

63 
	mccmRoŸSãpSñ
 = 
CCM_TUPLE
(
CCSR
, 
CCM_CCSR_°ï_£l_SHIFT
, 
CCM_CCSR_°ï_£l_MASK
),

64 
	mccmRoŸPîùh2ClkSñ
 = 
CCM_TUPLE
(
CBCDR
, 
CCM_CBCDR_≥rùh2_˛k_£l_SHIFT
, 
CCM_CBCDR_≥rùh2_˛k_£l_MASK
),

65 
	mccmRoŸPªPîùh2ClkSñ
 = 
CCM_TUPLE
(
CBCMR
, 
CCM_CBCMR_¥e_≥rùh2_˛k_£l_SHIFT
, 
CCM_CBCMR_¥e_≥rùh2_˛k_£l_MASK
),

66 
	mccmRoŸPîùh2Clk2Sñ
 = 
CCM_TUPLE
(
CBCMR
, 
CCM_CBCMR_≥rùh2_˛k2_£l_SHIFT
, 
CCM_CBCMR_≥rùh2_˛k2_£l_MASK
),

67 
	mccmRoŸPŒ3SwClkSñ
 = 
CCM_TUPLE
(
CCSR
, 
CCM_CCSR_∂l3_sw_˛k_£l_SHIFT
, 
CCM_CCSR_∂l3_sw_˛k_£l_MASK
),

68 
	mccmRoŸO¸amClkSñ
 = 
CCM_TUPLE
(
CBCDR
, 
CCM_CBCDR_o¸am_˛k_£l_SHIFT
, 
CCM_CBCDR_o¸am_˛k_£l_MASK
),

69 
	mccmRoŸO¸amA…ClkSñ
 = 
CCM_TUPLE
(
CBCDR
, 
CCM_CBCDR_o¸am_Æt_˛k_£l_SHIFT
, 
CCM_CBCDR_o¸am_Æt_˛k_£l_MASK
),

70 
	mccmRoŸPîùhClkSñ
 = 
CCM_TUPLE
(
CBCDR
, 
CCM_CBCDR_≥rùh_˛k_£l_SHIFT
, 
CCM_CBCDR_≥rùh_˛k_£l_MASK
),

71 
	mccmRoŸPîùhClk2Sñ
 = 
CCM_TUPLE
(
CBCMR
, 
CCM_CBCMR_≥rùh_˛k2_£l_SHIFT
, 
CCM_CBCMR_≥rùh_˛k2_£l_MASK
),

72 
	mccmRoŸPªPîùhClkSñ
 = 
CCM_TUPLE
(
CBCMR
, 
CCM_CBCMR_¥e_≥rùh_˛k_£l_SHIFT
, 
CCM_CBCMR_¥e_≥rùh_˛k_£l_MASK
),

73 
	mccmRoŸPcõAxiClkSñ
 = 
CCM_TUPLE
(
CBCMR
, 
CCM_CBCMR_pcõ_axi_˛k_£l_SHIFT
, 
CCM_CBCMR_pcõ_axi_˛k_£l_MASK
),

74 
	mccmRoŸPî˛kClkSñ
 = 
CCM_TUPLE
(
CSCMR1
, 
CCM_CSCMR1_≥r˛k_˛k_£l_SHIFT
, 
CCM_CSCMR1_≥r˛k_˛k_£l_MASK
),

75 
	mccmRoŸUsdhc1ClkSñ
 = 
CCM_TUPLE
(
CSCMR1
, 
CCM_CSCMR1_usdhc1_˛k_£l_SHIFT
, 
CCM_CSCMR1_usdhc1_˛k_£l_MASK
),

76 
	mccmRoŸUsdhc2ClkSñ
 = 
CCM_TUPLE
(
CSCMR1
, 
CCM_CSCMR1_usdhc2_˛k_£l_SHIFT
, 
CCM_CSCMR1_usdhc2_˛k_£l_MASK
),

77 
	mccmRoŸUsdhc3ClkSñ
 = 
CCM_TUPLE
(
CSCMR1
, 
CCM_CSCMR1_usdhc3_˛k_£l_SHIFT
, 
CCM_CSCMR1_usdhc3_˛k_£l_MASK
),

78 
	mccmRoŸUsdhc4ClkSñ
 = 
CCM_TUPLE
(
CSCMR1
, 
CCM_CSCMR1_usdhc4_˛k_£l_SHIFT
, 
CCM_CSCMR1_usdhc4_˛k_£l_MASK
),

79 
	mccmRoŸA˛kEimSlowSñ
 = 
CCM_TUPLE
(
CSCMR1
, 
CCM_CSCMR1_a˛k_eim_¶ow_£l_SHIFT
, 
CCM_CSCMR1_a˛k_eim_¶ow_£l_MASK
),

80 
	mccmRoŸGpuAxiSñ
 = 
CCM_TUPLE
(
CBCMR
, 
CCM_CBCMR_gpu_axi_£l_SHIFT
, 
CCM_CBCMR_gpu_axi_£l_MASK
),

81 
	mccmRoŸGpuC‹eSñ
 = 
CCM_TUPLE
(
CBCMR
, 
CCM_CBCMR_gpu_c‹e_£l_SHIFT
, 
CCM_CBCMR_gpu_c‹e_£l_MASK
),

82 
	mccmRoŸVidClkSñ
 = 
CCM_TUPLE
(
CSCMR2
, 
CCM_CSCMR2_vid_˛k_£l_SHIFT
, 
CCM_CSCMR2_vid_˛k_£l_MASK
),

83 
	mccmRoŸEßiClkSñ
 = 
CCM_TUPLE
(
CSCMR2
, 
CCM_CSCMR2_eßi_˛k_£l_SHIFT
, 
CCM_CSCMR2_eßi_˛k_£l_MASK
),

84 
	mccmRoŸAudioClkSñ
 = 
CCM_TUPLE
(
CDCDR
, 
CCM_CDCDR_audio_˛k_£l_SHIFT
, 
CCM_CDCDR_audio_˛k_£l_MASK
),

85 
	mccmRoŸSpdif0ClkSñ
 = 
CCM_TUPLE
(
CDCDR
, 
CCM_CDCDR_•dif0_˛k_£l_SHIFT
, 
CCM_CDCDR_•dif0_˛k_£l_MASK
),

86 
	mccmRoŸSsi1ClkSñ
 = 
CCM_TUPLE
(
CSCMR1
, 
CCM_CSCMR1_ssi1_˛k_£l_SHIFT
, 
CCM_CSCMR1_ssi1_˛k_£l_MASK
),

87 
	mccmRoŸSsi2ClkSñ
 = 
CCM_TUPLE
(
CSCMR1
, 
CCM_CSCMR1_ssi2_˛k_£l_SHIFT
, 
CCM_CSCMR1_ssi2_˛k_£l_MASK
),

88 
	mccmRoŸSsi3ClkSñ
 = 
CCM_TUPLE
(
CSCMR1
, 
CCM_CSCMR1_ssi3_˛k_£l_SHIFT
, 
CCM_CSCMR1_ssi3_˛k_£l_MASK
),

89 
	mccmRoŸLcdif2ClkSñ
 = 
CCM_TUPLE
(
CSCDR2
, 
CCM_CSCDR2_lcdif2_˛k_£l_SHIFT
, 
CCM_CSCDR2_lcdif2_˛k_£l_MASK
),

90 
	mccmRoŸLcdif2PªClkSñ
 = 
CCM_TUPLE
(
CSCDR2
, 
CCM_CSCDR2_lcdif2_¥e_˛k_£l_SHIFT
, 
CCM_CSCDR2_lcdif2_¥e_˛k_£l_MASK
),

91 
	mccmRoŸLdbDi1ClkSñ
 = 
CCM_TUPLE
(
CS2CDR
, 
CCM_CS2CDR_ldb_di1_˛k_£l_SHIFT
, 
CCM_CS2CDR_ldb_di1_˛k_£l_MASK
),

92 
	mccmRoŸLdbDi0ClkSñ
 = 
CCM_TUPLE
(
CS2CDR
, 
CCM_CS2CDR_ldb_di0_˛k_£l_SHIFT
, 
CCM_CS2CDR_ldb_di0_˛k_£l_MASK
),

93 
	mccmRoŸLcdif1ClkSñ
 = 
CCM_TUPLE
(
CSCDR2
, 
CCM_CSCDR2_lcdif1_˛k_£l_SHIFT
, 
CCM_CSCDR2_lcdif1_˛k_£l_MASK
),

94 
	mccmRoŸLcdif1PªClkSñ
 = 
CCM_TUPLE
(
CSCDR2
, 
CCM_CSCDR2_lcdif1_¥e_˛k_£l_SHIFT
, 
CCM_CSCDR2_lcdif1_¥e_˛k_£l_MASK
),

95 
	mccmRoŸM4ClkSñ
 = 
CCM_TUPLE
(
CHSCCDR
, 
CCM_CHSCCDR_m4_˛k_£l_SHIFT
, 
CCM_CHSCCDR_m4_˛k_£l_MASK
),

96 
	mccmRoŸM4PªClkSñ
 = 
CCM_TUPLE
(
CHSCCDR
, 
CCM_CHSCCDR_m4_¥e_˛k_£l_SHIFT
, 
CCM_CHSCCDR_m4_¥e_˛k_£l_MASK
),

97 
	mccmRoŸE√tClkSñ
 = 
CCM_TUPLE
(
CHSCCDR
, 
CCM_CHSCCDR_íë_˛k_£l_SHIFT
, 
CCM_CHSCCDR_íë_˛k_£l_MASK
),

98 
	mccmRoŸE√tPªClkSñ
 = 
CCM_TUPLE
(
CHSCCDR
, 
CCM_CHSCCDR_íë_¥e_˛k_£l_SHIFT
, 
CCM_CHSCCDR_íë_¥e_˛k_£l_MASK
),

99 
	mccmRoŸQ•i2ClkSñ
 = 
CCM_TUPLE
(
CS2CDR
, 
CCM_CS2CDR_q•i2_˛k_£l_SHIFT
, 
CCM_CS2CDR_q•i2_˛k_£l_MASK
),

100 
	mccmRoŸDi•œyClkSñ
 = 
CCM_TUPLE
(
CSCDR3
, 
CCM_CSCDR3_di•œy_˛k_£l_SHIFT
, 
CCM_CSCDR3_di•œy_˛k_£l_MASK
),

101 
	mccmRoŸCsiClkSñ
 = 
CCM_TUPLE
(
CSCDR3
, 
CCM_CSCDR3_csi_˛k_£l_SHIFT
, 
CCM_CSCDR3_csi_˛k_£l_MASK
),

102 
	mccmRoŸC™ClkSñ
 = 
CCM_TUPLE
(
CSCMR2
, 
CCM_CSCMR2_ˇn_˛k_£l_SHIFT
, 
CCM_CSCMR2_ˇn_˛k_£l_MASK
),

103 
	mccmRoŸEc•iClkSñ
 = 
CCM_TUPLE
(
CSCDR2
, 
CCM_CSCDR2_ec•i_˛k_£l_SHIFT
, 
CCM_CSCDR2_ec•i_˛k_£l_MASK
),

104 
	mccmRoŸU¨tClkSñ
 = 
CCM_TUPLE
(
CSCDR1
, 
CCM_CSCDR1_u¨t_˛k_£l_SHIFT
, 
CCM_CSCDR1_u¨t_˛k_£l_MASK
)

110 
	e_ccm_roŸmux_∂l1_sw_˛k_£l
 {

111 
	mccmRoŸmuxPŒ1SwClkPŒ1MaöClk
 = 0U,

112 
	mccmRoŸmuxPŒ1SwClkSãpClk
 = 1U

118 
	e_ccm_roŸmux_°ï_£l
 {

119 
	mccmRoŸmuxSãpOsc24m
 = 0U,

120 
	mccmRoŸmuxSãpPŒ2Pfd2
 = 1U

126 
	e_ccm_roŸmux_≥rùh2_˛k_£l
 {

127 
	mccmRoŸmuxPîùh2ClkPªPîùh2Clk
 = 0U,

128 
	mccmRoŸmuxPîùh2ClkPîùh2Clk2
 = 1U

134 
	e_ccm_roŸmux_¥e_≥rùh2_˛k_£l
 {

135 
	mccmRoŸmuxPªPîùh2ClkPŒ2
 = 0U,

136 
	mccmRoŸmuxPªPîùh2ClkPŒ2Pfd2
 = 1U,

137 
	mccmRoŸmuxPªPîùh2ClkPŒ2Pfd0
 = 2U,

138 
	mccmRoŸmuxPªPîùh2ClkPŒ4
 = 3U

144 
	e_ccm_roŸmux_≥rùh2_˛k2_£l
 {

145 
	mccmRoŸmuxPîùh2Clk2PŒ3SwClk
 = 0U,

146 
	mccmRoŸmuxPîùh2Clk2Osc24m
 = 1U

152 
	e_ccm_roŸmux_∂l3_sw_˛k_£l
 {

153 
	mccmRoŸmuxPŒ3SwClkPŒ3
 = 0U,

154 
	mccmRoŸmuxPŒ3SwClkPŒ3By∑ssClk
 = 1U

160 
	e_ccm_roŸmux_o¸am_˛k_£l
 {

161 
	mccmRoŸmuxO¸amClkPîùhClk
 = 0U,

162 
	mccmRoŸmuxO¸amClkO¸amA…Clk
 = 1U

168 
	e_ccm_roŸmux_o¸am_Æt_˛k_£l
 {

169 
	mccmRoŸmuxO¸amA…ClkPŒ2Pfd2
 = 0U,

170 
	mccmRoŸmuxO¸amA…ClkPŒ3Pfd1
 = 1U

176 
	e_ccm_roŸmux_≥rùh_˛k_£l
 {

177 
	mccmRoŸmuxPîùhClkPªPîùhClkSñ
 = 0U,

178 
	mccmRoŸmuxPîùhClkPîùhClk2Sñ
 = 1U

184 
	e_ccm_roŸmux_≥rùh_˛k2_£l
 {

185 
	mccmRoŸmuxPîùhClk2PŒ3SwClk
 = 0U,

186 
	mccmRoŸmuxPîùhClk2OSC24m
 = 1U,

187 
	mccmRoŸmuxPîùhClk2PŒ2
 = 2U

193 
	e_ccm_roŸmux_¥e_≥rùh_˛k_£l
 {

194 
	mccmRoŸmuxPªPîùhClkPŒ2
 = 0U,

195 
	mccmRoŸmuxPªPîùhClkPŒ2Pfd2
 = 1U,

196 
	mccmRoŸmuxPªPîùhClkPŒ2Pfd0
 = 2U,

197 
	mccmRoŸmuxPªPîùhClkPŒ2Pfd2div2
 = 3U

203 
	e_ccm_roŸmux_pcõ_axi_˛k_£l
 {

204 
	mccmRoŸmuxPcõAxiClkAxiClk
 = 0U,

205 
	mccmRoŸmuxPcõAxiClkAhbClk
 = 1U

211 
	e_ccm_roŸmux_≥r˛k_˛k_£l
 {

212 
	mccmRoŸmuxPî˛kClkIpgClkRoŸ
 = 0U,

213 
	mccmRoŸmuxPî˛kClkOsc24m
 = 1U

219 
	e_ccm_roŸmux_usdhc1_˛k_£l
 {

220 
	mccmRoŸmuxUsdhc1ClkPŒ2Pfd2
 = 0U,

221 
	mccmRoŸmuxUsdhc1ClkPŒ2Pfd0
 = 1U

227 
	e_ccm_roŸmux_usdhc2_˛k_£l
 {

228 
	mccmRoŸmuxUsdhc2ClkPŒ2Pfd2
 = 0U,

229 
	mccmRoŸmuxUsdhc2ClkPŒ2Pfd0
 = 1U

235 
	e_ccm_roŸmux_usdhc3_˛k_£l
 {

236 
	mccmRoŸmuxUsdhc3ClkPŒ2Pfd2
 = 0U,

237 
	mccmRoŸmuxUsdhc3ClkPŒ2Pfd0
 = 1U

243 
	e_ccm_roŸmux_usdhc4_˛k_£l
 {

244 
	mccmRoŸmuxUsdhc4ClkPŒ2Pfd2
 = 0U,

245 
	mccmRoŸmuxUsdhc4ClkPŒ2Pfd0
 = 1U

251 
	e_ccm_roŸmux_a˛k_eim_¶ow_£l
 {

252 
	mccmRoŸmuxA˛kEimSlowAxiClk
 = 0U,

253 
	mccmRoŸmuxA˛kEimSlowPŒ3SwClk
 = 1U,

254 
	mccmRoŸmuxA˛kEimSlowPŒ2Pfd2
 = 2U,

255 
	mccmRoŸmuxA˛kEimSlowPŒ3Pfd0
 = 3U

261 
	e_ccm_roŸmux_gpu_axi_£l
 {

262 
	mccmRoŸmuxGpuAxiPŒ2Pfd2
 = 0U,

263 
	mccmRoŸmuxGpuAxiPŒ3Pfd0
 = 1U,

264 
	mccmRoŸmuxGpuAxiPŒ2Pfd1
 = 2U,

265 
	mccmRoŸmuxGpuAxiPŒ2
 = 3U

271 
	e_ccm_roŸmux_gpu_c‹e_£l
 {

272 
	mccmRoŸmuxGpuC‹ePŒ3Pfd1
 = 0U,

273 
	mccmRoŸmuxGpuC‹ePŒ3Pfd0
 = 1U,

274 
	mccmRoŸmuxGpuC‹ePŒ2
 = 2U,

275 
	mccmRoŸmuxGpuC‹ePŒ2Pfd2
 = 3U

281 
	e_ccm_roŸmux_vid_˛k_£l
 {

282 
	mccmRoŸmuxVidClkPŒ3Pfd1
 = 0U,

283 
	mccmRoŸmuxVidClkPŒ3
 = 1U,

284 
	mccmRoŸmuxVidClkPŒ3Pfd3
 = 2U,

285 
	mccmRoŸmuxVidClkPŒ4
 = 3U,

286 
	mccmRoŸmuxVidClkPŒ5
 = 4U

292 
	e_ccm_roŸmux_eßi_˛k_£l
 {

293 
	mccmRoŸmuxEßiClkPŒ4
 = 0U,

294 
	mccmRoŸmuxEßiClkPŒ3Pfd2
 = 1U,

295 
	mccmRoŸmuxEßiClkPŒ5
 = 2U,

296 
	mccmRoŸmuxEßiClkPŒ3SwClk
 = 3U

302 
	e_ccm_roŸmux_audio_˛k_£l
 {

303 
	mccmRoŸmuxAudioClkPŒ4
 = 0U,

304 
	mccmRoŸmuxAudioClkPŒ3Pfd2
 = 1U,

305 
	mccmRoŸmuxAudioClkPŒ5
 = 2U,

306 
	mccmRoŸmuxAudioClkPŒ3SwClk
 = 3U

312 
	e_ccm_roŸmux_•dif0_˛k_£l
 {

313 
	mccmRoŸmuxSpdif0ClkPŒ4
 = 0U,

314 
	mccmRoŸmuxSpdif0ClkPŒ3Pfd2
 = 1U,

315 
	mccmRoŸmuxSpdif0ClkPŒ5
 = 2U,

316 
	mccmRoŸmuxSpdif0ClkPŒ3SwClk
 = 3U

322 
	e_ccm_roŸmux_ssi1_˛k_£l
 {

323 
	mccmRoŸmuxSsi1ClkPŒ3Pfd2
 = 0U,

324 
	mccmRoŸmuxSsi1ClkPŒ5
 = 1U,

325 
	mccmRoŸmuxSsi1ClkPŒ4
 = 2U

331 
	e_ccm_roŸmux_ssi2_˛k_£l
 {

332 
	mccmRoŸmuxSsi2ClkPŒ3Pfd2
 = 0U,

333 
	mccmRoŸmuxSsi2ClkPŒ5
 = 1U,

334 
	mccmRoŸmuxSsi2ClkPŒ4
 = 2U

340 
	e_ccm_roŸmux_ssi3_˛k_£l
 {

341 
	mccmRoŸmuxSsi3ClkPŒ3Pfd2
 = 0U,

342 
	mccmRoŸmuxSsi3ClkPŒ5
 = 1U,

343 
	mccmRoŸmuxSsi3ClkPŒ4
 = 2U

349 
	e_ccm_roŸmux_lcdif2_˛k_£l
 {

350 
	mccmRoŸmuxLcdif2ClkLcdif2PªClk
 = 0U,

351 
	mccmRoŸmuxLcdif2ClkIµDi0Clk
 = 1U,

352 
	mccmRoŸmuxLcdif2ClkIµDi1Clk
 = 2U,

353 
	mccmRoŸmuxLcdif2ClkLdbDi0Clk
 = 3U,

354 
	mccmRoŸmuxLcdif2ClkLdbDi1Clk
 = 4U

360 
	e_ccm_roŸmux_lcdif2_¥e_˛k_£l
 {

361 
	mccmRoŸmuxLcdif2ClkPªPŒ2
 = 0U,

362 
	mccmRoŸmuxLcdif2ClkPªPŒ3Pfd3
 = 1U,

363 
	mccmRoŸmuxLcdif2ClkPªPŒ5
 = 2U,

364 
	mccmRoŸmuxLcdif2ClkPªPŒ2Pfd0
 = 3U,

365 
	mccmRoŸmuxLcdif2ClkPªPŒ2Pfd3
 = 4U,

366 
	mccmRoŸmuxLcdif2ClkPªPŒ3Pfd1
 = 5U

372 
	e_ccm_roŸmux_ldb_di1_˛k_£l
 {

373 
	mccmRoŸmuxLdbDi1ClkPŒ3SwClk
 = 0U,

374 
	mccmRoŸmuxLdbDi1ClkPŒ2Pfd0
 = 1U,

375 
	mccmRoŸmuxLdbDi1ClkPŒ2Pfd2
 = 2U,

376 
	mccmRoŸmuxLdbDi1ClkPŒ2
 = 3U,

377 
	mccmRoŸmuxLdbDi1ClkPŒ3Pfd3
 = 4U,

378 
	mccmRoŸmuxLdbDi1ClkPŒ3Pfd2
 = 5U

384 
	e_ccm_roŸmux_ldb_di0_˛k_£l
 {

385 
	mccmRoŸmuxLdbDi0ClkPŒ5
 = 0U,

386 
	mccmRoŸmuxLdbDi0ClkPŒ2Pfd0
 = 1U,

387 
	mccmRoŸmuxLdbDi0ClkPŒ2Pfd2
 = 2U,

388 
	mccmRoŸmuxLdbDi0ClkPŒ2Pfd3
 = 3U,

389 
	mccmRoŸmuxLdbDi0ClkPŒ3Pfd1
 = 4U,

390 
	mccmRoŸmuxLdbDi0ClkPŒ3Pfd3
 = 5U

396 
	e_ccm_roŸmux_lcdif1_˛k_£l
 {

397 
	mccmRoŸmuxLcdif1ClkLcdif1PªClk
 = 0U,

398 
	mccmRoŸmuxLcdif1ClkIµDi0Clk
 = 1U,

399 
	mccmRoŸmuxLcdif1ClkIµDi1Clk
 = 2U,

400 
	mccmRoŸmuxLcdif1ClkLdbDi0Clk
 = 3U,

401 
	mccmRoŸmuxLcdif1ClkLdbDi1Clk
 = 4U

407 
	e_ccm_roŸmux_lcdif1_¥e_˛k_£l
 {

408 
	mccmRoŸmuxLcdif1PªClkPŒ2
 = 0U,

409 
	mccmRoŸmuxLcdif1PªClkPŒ3Pfd3
 = 1U,

410 
	mccmRoŸmuxLcdif1PªClkPŒ5
 = 2U,

411 
	mccmRoŸmuxLcdif1PªClkPŒ2Pfd0
 = 3U,

412 
	mccmRoŸmuxLcdif1PªClkPŒ2Pfd1
 = 4U,

413 
	mccmRoŸmuxLcdif1PªClkPŒ3Pfd1
 = 5U

419 
	e_ccm_roŸmux_m4_˛k_£l
 {

420 
	mccmRoŸmuxM4ClkM4PªClk
 = 0U,

421 
	mccmRoŸmuxM4ClkPŒ3Pfd3
 = 1U,

422 
	mccmRoŸmuxM4ClkIµDi0Clk
 = 2U,

423 
	mccmRoŸmuxM4ClkIµDi1Clk
 = 3U,

424 
	mccmRoŸmuxM4ClkLdbDi0Clk
 = 4U,

425 
	mccmRoŸmuxM4ClkLdbDi1Clk
 = 5U

431 
	e_ccm_roŸmux_m4_¥e_˛k_£l
 {

432 
	mccmRoŸmuxM4PªClkPŒ2
 = 0U,

433 
	mccmRoŸmuxM4PªClkPŒ3SwClk
 = 1U,

434 
	mccmRoŸmuxM4PªClkOsc24m
 = 2U,

435 
	mccmRoŸmuxM4PªClkPŒ2Pfd0
 = 3U,

436 
	mccmRoŸmuxM4PªClkPŒ2Pfd2
 = 4U,

437 
	mccmRoŸmuxM4PªClkPŒ3Pfd3
 = 5U

443 
	e_ccm_roŸmux_íë_˛k_£l
 {

444 
	mccmRoŸmuxE√tClkE√tPªClk
 = 0U,

445 
	mccmRoŸmuxE√tClkIµDi0Clk
 = 1U,

446 
	mccmRoŸmuxE√tClkIµDi1Clk
 = 2U,

447 
	mccmRoŸmuxE√tClkLdbDi0Clk
 = 3U,

448 
	mccmRoŸmuxE√tClkLdbDi1Clk
 = 4U

454 
	e_ccm_roŸmux_íë_¥e_˛k_£l
 {

455 
	mccmRoŸmuxE√tPªClkPŒ2
 = 0U,

456 
	mccmRoŸmuxE√tPªClkPŒ3SwClk
 = 1U,

457 
	mccmRoŸmuxE√tPªClkPŒ5
 = 2U,

458 
	mccmRoŸmuxE√tPªClkPŒ2Pfd0
 = 3U,

459 
	mccmRoŸmuxE√tPªClkPŒ2Pfd2
 = 4U,

460 
	mccmRoŸmuxE√tPªClkPŒ3Pfd2
 = 5U

466 
	e_ccm_roŸmux_q•i2_˛k_£l
 {

467 
	mccmRoŸmuxQ•i2ClkPŒ2Pfd0
 = 0U,

468 
	mccmRoŸmuxQ•i2ClkPŒ2
 = 1U,

469 
	mccmRoŸmuxQ•i2ClkPŒ3SwClk
 = 2U,

470 
	mccmRoŸmuxQ•i2ClkPŒ2Pfd2
 = 3U,

471 
	mccmRoŸmuxQ•i2ClkPŒ3Pfd3
 = 4U

477 
	e_ccm_roŸmux_di•œy_˛k_£l
 {

478 
	mccmRoŸmuxDi•œyClkPŒ2
 = 0U,

479 
	mccmRoŸmuxDi•œyClkPŒ2Pfd2
 = 1U,

480 
	mccmRoŸmuxDi•œyClkPŒ3SwClk
 = 2U,

481 
	mccmRoŸmuxDi•œyClkPŒ3Pfd1
 = 3U

487 
	e_ccm_roŸmux_csi_˛k_£l
 {

488 
	mccmRoŸmuxCsiClkOSC24m
 = 0U,

489 
	mccmRoŸmuxCsiClkPŒ2Pfd2
 = 1U,

490 
	mccmRoŸmuxCsiClkPŒ3SwClkDiv2
 = 2U,

491 
	mccmRoŸmuxCsiClkPŒ3Pfd1
 = 3U

497 
	e_ccm_roŸmux_ˇn_˛k_£l
 {

498 
	mccmRoŸmuxC™ClkPŒ3SwClkDiv8
 = 0U,

499 
	mccmRoŸmuxC™ClkOsc24m
 = 1U,

500 
	mccmRoŸmuxC™ClkPŒ3SwClkDiv6
 = 2U,

501 
	mccmRoŸmuxC™ClkDißbÀFÀxˇnClk
 = 3U

507 
	e_ccm_roŸmux_ec•i_˛k_£l
 {

508 
	mccmRoŸmuxEc•iClkPŒ3SwClkDiv8
 = 0U,

509 
	mccmRoŸmuxEc•iClkOsc24m
 = 1U

515 
	e_ccm_roŸmux_u¨t_˛k_£l
 {

516 
	mccmRoŸmuxU¨tClkPŒ3SwClkDiv6
 = 0U,

517 
	mccmRoŸmuxU¨tClkOsc24m
 = 1U

528 
	e_ccm_roŸ_div_c⁄åﬁ
 {

529 
	mccmRoŸArmPodf
 = 
CCM_TUPLE
(
CACRR
, 
CCM_CACRR_¨m_podf_SHIFT
, 
CCM_CACRR_¨m_podf_MASK
),

530 
	mccmRoŸFabricMmdcPodf
 = 
CCM_TUPLE
(
CBCDR
, 
CCM_CBCDR_Ábric_mmdc_podf_SHIFT
, 
CCM_CBCDR_Ábric_mmdc_podf_MASK
),

531 
	mccmRoŸPîùh2Clk2Podf
 = 
CCM_TUPLE
(
CBCDR
, 
CCM_CBCDR_≥rùh2_˛k2_podf_SHIFT
, 
CCM_CBCDR_≥rùh2_˛k2_podf_MASK
),

532 
	mccmRoŸO¸amPodf
 = 
CCM_TUPLE
(
CBCDR
, 
CCM_CBCDR_o¸am_podf_SHIFT
, 
CCM_CBCDR_o¸am_podf_MASK
),

533 
	mccmRoŸAhbPodf
 = 
CCM_TUPLE
(
CBCDR
, 
CCM_CBCDR_ahb_podf_SHIFT
, 
CCM_CBCDR_ahb_podf_MASK
),

534 
	mccmRoŸPîùhClk2Podf
 = 
CCM_TUPLE
(
CBCDR
, 
CCM_CBCDR_≥rùh_˛k2_podf_SHIFT
, 
CCM_CBCDR_≥rùh_˛k2_podf_MASK
),

535 
	mccmRoŸPî˛kPodf
 = 
CCM_TUPLE
(
CSCMR1
, 
CCM_CSCMR1_≥r˛k_podf_SHIFT
, 
CCM_CSCMR1_≥r˛k_podf_MASK
),

536 
	mccmRoŸIpgPodf
 = 
CCM_TUPLE
(
CBCDR
, 
CCM_CBCDR_ùg_podf_SHIFT
, 
CCM_CBCDR_ùg_podf_MASK
),

537 
	mccmRoŸUsdhc1Podf
 = 
CCM_TUPLE
(
CSCDR1
, 
CCM_CSCDR1_usdhc1_podf_SHIFT
, 
CCM_CSCDR1_usdhc1_podf_MASK
),

538 
	mccmRoŸUsdhc2Podf
 = 
CCM_TUPLE
(
CSCDR1
, 
CCM_CSCDR1_usdhc2_podf_SHIFT
, 
CCM_CSCDR1_usdhc2_podf_MASK
),

539 
	mccmRoŸUsdhc3Podf
 = 
CCM_TUPLE
(
CSCDR1
, 
CCM_CSCDR1_usdhc3_podf_SHIFT
, 
CCM_CSCDR1_usdhc3_podf_MASK
),

540 
	mccmRoŸUsdhc4Podf
 = 
CCM_TUPLE
(
CSCDR1
, 
CCM_CSCDR1_usdhc4_podf_SHIFT
, 
CCM_CSCDR1_usdhc4_podf_MASK
),

541 
	mccmRoŸA˛kEimSlowPodf
 = 
CCM_TUPLE
(
CSCMR1
, 
CCM_CSCMR1_a˛k_eim_¶ow_podf_SHIFT
, 
CCM_CSCMR1_a˛k_eim_¶ow_podf_MASK
),

542 
	mccmRoŸGpuAxiPodf
 = 
CCM_TUPLE
(
CBCMR
, 
CCM_CBCMR_gpu_axi_podf_SHIFT
, 
CCM_CBCMR_gpu_axi_podf_MASK
),

543 
	mccmRoŸGpuC‹ePodf
 = 
CCM_TUPLE
(
CBCMR
, 
CCM_CBCMR_gpu_c‹e_podf_SHIFT
, 
CCM_CBCMR_gpu_c‹e_podf_MASK
),

544 
	mccmRoŸVidClkPodf
 = 
CCM_TUPLE
(
CSCMR2
, 
CCM_CSCMR2_vid_˛k_podf_SHIFT
, 
CCM_CSCMR2_vid_˛k_podf_MASK
),

545 
	mccmRoŸEßiClkPodf
 = 
CCM_TUPLE
(
CS1CDR
, 
CCM_CS1CDR_eßi_˛k_podf_SHIFT
, 
CCM_CS1CDR_eßi_˛k_podf_MASK
),

546 
	mccmRoŸEßiClkPªd
 = 
CCM_TUPLE
(
CS1CDR
, 
CCM_CS1CDR_eßi_˛k_¥ed_SHIFT
, 
CCM_CS1CDR_eßi_˛k_¥ed_MASK
),

547 
	mccmRoŸAudioClkPodf
 = 
CCM_TUPLE
(
CDCDR
, 
CCM_CDCDR_audio_˛k_podf_SHIFT
, 
CCM_CDCDR_audio_˛k_podf_MASK
),

548 
	mccmRoŸAudioClkPªd
 = 
CCM_TUPLE
(
CDCDR
, 
CCM_CDCDR_audio_˛k_¥ed_SHIFT
, 
CCM_CDCDR_audio_˛k_¥ed_MASK
),

549 
	mccmRoŸSpdif0ClkPodf
 = 
CCM_TUPLE
(
CDCDR
, 
CCM_CDCDR_•dif0_˛k_podf_SHIFT
, 
CCM_CDCDR_•dif0_˛k_podf_MASK
),

550 
	mccmRoŸSpdif0ClkPªd
 = 
CCM_TUPLE
(
CDCDR
, 
CCM_CDCDR_•dif0_˛k_¥ed_SHIFT
, 
CCM_CDCDR_•dif0_˛k_¥ed_MASK
),

551 
	mccmRoŸSsi1ClkPodf
 = 
CCM_TUPLE
(
CS1CDR
, 
CCM_CS1CDR_ssi1_˛k_podf_SHIFT
, 
CCM_CS1CDR_ssi1_˛k_podf_MASK
),

552 
	mccmRoŸSsi1ClkPªd
 = 
CCM_TUPLE
(
CS1CDR
, 
CCM_CS1CDR_ssi1_˛k_¥ed_SHIFT
, 
CCM_CS1CDR_ssi1_˛k_¥ed_MASK
),

553 
	mccmRoŸSsi2ClkPodf
 = 
CCM_TUPLE
(
CS2CDR
, 
CCM_CS2CDR_ssi2_˛k_podf_SHIFT
, 
CCM_CS2CDR_ssi2_˛k_podf_MASK
),

554 
	mccmRoŸSsi2ClkPªd
 = 
CCM_TUPLE
(
CS2CDR
, 
CCM_CS2CDR_ssi2_˛k_¥ed_SHIFT
, 
CCM_CS2CDR_ssi2_˛k_¥ed_MASK
),

555 
	mccmRoŸSsi3ClkPodf
 = 
CCM_TUPLE
(
CS1CDR
, 
CCM_CS1CDR_ssi3_˛k_podf_SHIFT
, 
CCM_CS1CDR_ssi3_˛k_podf_MASK
),

556 
	mccmRoŸSsi3ClkPªd
 = 
CCM_TUPLE
(
CS1CDR
, 
CCM_CS1CDR_ssi3_˛k_¥ed_SHIFT
, 
CCM_CS1CDR_ssi3_˛k_¥ed_MASK
),

557 
	mccmRoŸLcdif2Podf
 = 
CCM_TUPLE
(
CSCMR1
, 
CCM_CSCMR1_lcdif2_podf_SHIFT
, 
CCM_CSCMR1_lcdif2_podf_MASK
),

558 
	mccmRoŸLcdif2Pªd
 = 
CCM_TUPLE
(
CSCDR2
, 
CCM_CSCDR2_lcdif2_¥ed_SHIFT
, 
CCM_CSCDR2_lcdif2_¥ed_MASK
),

559 
	mccmRoŸLdbDi1Div
 = 
CCM_TUPLE
(
CSCMR2
, 
CCM_CSCMR2_ldb_di1_div_SHIFT
, 
CCM_CSCMR2_ldb_di1_div_MASK
),

560 
	mccmRoŸLdbDi0Div
 = 
CCM_TUPLE
(
CSCMR2
, 
CCM_CSCMR2_ldb_di0_div_SHIFT
, 
CCM_CSCMR2_ldb_di0_div_MASK
),

561 
	mccmRoŸLcdif1Podf
 = 
CCM_TUPLE
(
CBCMR
, 
CCM_CBCMR_lcdif1_podf_SHIFT
, 
CCM_CBCMR_lcdif1_podf_MASK
),

562 
	mccmRoŸLcdif1Pªd
 = 
CCM_TUPLE
(
CSCDR2
, 
CCM_CSCDR2_lcdif1_¥ed_SHIFT
, 
CCM_CSCDR2_lcdif1_¥ed_MASK
),

563 
	mccmRoŸM4Podf
 = 
CCM_TUPLE
(
CHSCCDR
, 
CCM_CHSCCDR_m4_podf_SHIFT
, 
CCM_CHSCCDR_m4_podf_MASK
),

564 
	mccmRoŸE√tPodf
 = 
CCM_TUPLE
(
CHSCCDR
, 
CCM_CHSCCDR_íë_podf_SHIFT
, 
CCM_CHSCCDR_íë_podf_MASK
),

565 
	mccmRoŸQ•i1Podf
 = 
CCM_TUPLE
(
CSCMR1
, 
CCM_CSCMR1_q•i1_podf_SHIFT
, 
CCM_CSCMR1_q•i1_podf_MASK
),

566 
	mccmRoŸQ•i2ClkPodf
 = 
CCM_TUPLE
(
CS2CDR
, 
CCM_CS2CDR_q•i2_˛k_podf_SHIFT
, 
CCM_CS2CDR_q•i2_˛k_podf_MASK
),

567 
	mccmRoŸQ•i2ClkPªd
 = 
CCM_TUPLE
(
CS2CDR
, 
CCM_CS2CDR_q•i2_˛k_¥ed_SHIFT
, 
CCM_CS2CDR_q•i2_˛k_¥ed_MASK
),

568 
	mccmRoŸDi•œyPodf
 = 
CCM_TUPLE
(
CSCDR3
, 
CCM_CSCDR3_di•œy_podf_SHIFT
, 
CCM_CSCDR3_di•œy_podf_MASK
),

569 
	mccmRoŸCsiPodf
 = 
CCM_TUPLE
(
CSCDR3
, 
CCM_CSCDR3_csi_podf_SHIFT
, 
CCM_CSCDR3_csi_podf_MASK
),

570 
	mccmRoŸC™ClkPodf
 = 
CCM_TUPLE
(
CSCMR2
, 
CCM_CSCMR2_ˇn_˛k_podf_SHIFT
, 
CCM_CSCMR2_ˇn_˛k_podf_MASK
),

571 
	mccmRoŸEc•iClkPodf
 = 
CCM_TUPLE
(
CSCDR2
, 
CCM_CSCDR2_ec•i_˛k_podf_SHIFT
, 
CCM_CSCDR2_ec•i_˛k_podf_MASK
),

572 
	mccmRoŸU¨tClkPodf
 = 
CCM_TUPLE
(
CSCDR1
, 
CCM_CSCDR1_u¨t_˛k_podf_SHIFT
, 
CCM_CSCDR1_u¨t_˛k_podf_MASK
)

583 
	e_ccm_ccgr_g©e
 {

584 
	mccmCcgrG©eAùsTz1Clk
 = 
CCM_TUPLE
(
CCGR0
, 
CCM_CCGR0_CG0_SHIFT
, 
CCM_CCGR0_CG0_MASK
),

585 
	mccmCcgrG©eAùsTz2Clk
 = 
CCM_TUPLE
(
CCGR0
, 
CCM_CCGR0_CG1_SHIFT
, 
CCM_CCGR0_CG1_MASK
),

586 
	mccmCcgrG©eApbhdmaH˛k
 = 
CCM_TUPLE
(
CCGR0
, 
CCM_CCGR0_CG2_SHIFT
, 
CCM_CCGR0_CG2_MASK
),

587 
	mccmCcgrG©eA§cClk
 = 
CCM_TUPLE
(
CCGR0
, 
CCM_CCGR0_CG3_SHIFT
, 
CCM_CCGR0_CG3_MASK
),

588 
	mccmCcgrG©eCØmSecuªMemClk
 = 
CCM_TUPLE
(
CCGR0
, 
CCM_CCGR0_CG4_SHIFT
, 
CCM_CCGR0_CG4_MASK
),

589 
	mccmCcgrG©eCØmWøµîA˛k
 = 
CCM_TUPLE
(
CCGR0
, 
CCM_CCGR0_CG5_SHIFT
, 
CCM_CCGR0_CG5_MASK
),

590 
	mccmCcgrG©eCØmWøµîIpg
 = 
CCM_TUPLE
(
CCGR0
, 
CCM_CCGR0_CG6_SHIFT
, 
CCM_CCGR0_CG6_MASK
),

591 
	mccmCcgrG©eC™1Clk
 = 
CCM_TUPLE
(
CCGR0
, 
CCM_CCGR0_CG7_SHIFT
, 
CCM_CCGR0_CG7_MASK
),

592 
	mccmCcgrG©eC™1SîülClk
 = 
CCM_TUPLE
(
CCGR0
, 
CCM_CCGR0_CG8_SHIFT
, 
CCM_CCGR0_CG8_MASK
),

593 
	mccmCcgrG©eC™2Clk
 = 
CCM_TUPLE
(
CCGR0
, 
CCM_CCGR0_CG9_SHIFT
, 
CCM_CCGR0_CG9_MASK
),

594 
	mccmCcgrG©eC™2SîülClk
 = 
CCM_TUPLE
(
CCGR0
, 
CCM_CCGR0_CG10_SHIFT
, 
CCM_CCGR0_CG10_MASK
),

595 
	mccmCcgrG©eArmDbgClk
 = 
CCM_TUPLE
(
CCGR0
, 
CCM_CCGR0_CG11_SHIFT
, 
CCM_CCGR0_CG11_MASK
),

596 
	mccmCcgrG©eDcic1Clk
 = 
CCM_TUPLE
(
CCGR0
, 
CCM_CCGR0_CG12_SHIFT
, 
CCM_CCGR0_CG12_MASK
),

597 
	mccmCcgrG©eDcic2Clk
 = 
CCM_TUPLE
(
CCGR0
, 
CCM_CCGR0_CG13_SHIFT
, 
CCM_CCGR0_CG13_MASK
),

598 
	mccmCcgrG©eAùsTz3Clk
 = 
CCM_TUPLE
(
CCGR0
, 
CCM_CCGR0_CG15_SHIFT
, 
CCM_CCGR0_CG15_MASK
),

599 
	mccmCcgrG©eEc•i1Clk
 = 
CCM_TUPLE
(
CCGR1
, 
CCM_CCGR1_CG0_SHIFT
, 
CCM_CCGR1_CG0_MASK
),

600 
	mccmCcgrG©eEc•i2Clk
 = 
CCM_TUPLE
(
CCGR1
, 
CCM_CCGR1_CG1_SHIFT
, 
CCM_CCGR1_CG1_MASK
),

601 
	mccmCcgrG©eEc•i3Clk
 = 
CCM_TUPLE
(
CCGR1
, 
CCM_CCGR1_CG2_SHIFT
, 
CCM_CCGR1_CG2_MASK
),

602 
	mccmCcgrG©eEc•i4Clk
 = 
CCM_TUPLE
(
CCGR1
, 
CCM_CCGR1_CG3_SHIFT
, 
CCM_CCGR1_CG3_MASK
),

603 
	mccmCcgrG©eEc•i5Clk
 = 
CCM_TUPLE
(
CCGR1
, 
CCM_CCGR1_CG4_SHIFT
, 
CCM_CCGR1_CG4_MASK
),

604 
	mccmCcgrG©eEpô1Clk
 = 
CCM_TUPLE
(
CCGR1
, 
CCM_CCGR1_CG6_SHIFT
, 
CCM_CCGR1_CG6_MASK
),

605 
	mccmCcgrG©eEpô2Clk
 = 
CCM_TUPLE
(
CCGR1
, 
CCM_CCGR1_CG7_SHIFT
, 
CCM_CCGR1_CG7_MASK
),

606 
	mccmCcgrG©eEßiClk
 = 
CCM_TUPLE
(
CCGR1
, 
CCM_CCGR1_CG8_SHIFT
, 
CCM_CCGR1_CG8_MASK
),

607 
	mccmCcgrG©eWakeupClk
 = 
CCM_TUPLE
(
CCGR1
, 
CCM_CCGR1_CG9_SHIFT
, 
CCM_CCGR1_CG9_MASK
),

608 
	mccmCcgrG©eG±Clk
 = 
CCM_TUPLE
(
CCGR1
, 
CCM_CCGR1_CG10_SHIFT
, 
CCM_CCGR1_CG10_MASK
),

609 
	mccmCcgrG©eG±SîülClk
 = 
CCM_TUPLE
(
CCGR1
, 
CCM_CCGR1_CG11_SHIFT
, 
CCM_CCGR1_CG11_MASK
),

610 
	mccmCcgrG©eGpuClk
 = 
CCM_TUPLE
(
CCGR1
, 
CCM_CCGR1_CG13_SHIFT
, 
CCM_CCGR1_CG13_MASK
),

611 
	mccmCcgrG©eO¸amSClk
 = 
CCM_TUPLE
(
CCGR1
, 
CCM_CCGR1_CG14_SHIFT
, 
CCM_CCGR1_CG14_MASK
),

612 
	mccmCcgrG©eC™fdClk
 = 
CCM_TUPLE
(
CCGR1
, 
CCM_CCGR1_CG15_SHIFT
, 
CCM_CCGR1_CG15_MASK
),

613 
	mccmCcgrG©eCsiClk
 = 
CCM_TUPLE
(
CCGR2
, 
CCM_CCGR2_CG1_SHIFT
, 
CCM_CCGR2_CG1_MASK
),

614 
	mccmCcgrG©eI2c1Sîül˛k
 = 
CCM_TUPLE
(
CCGR2
, 
CCM_CCGR2_CG3_SHIFT
, 
CCM_CCGR2_CG3_MASK
),

615 
	mccmCcgrG©eI2c2Sîül˛k
 = 
CCM_TUPLE
(
CCGR2
, 
CCM_CCGR2_CG4_SHIFT
, 
CCM_CCGR2_CG4_MASK
),

616 
	mccmCcgrG©eI2c3Sîül˛k
 = 
CCM_TUPLE
(
CCGR2
, 
CCM_CCGR2_CG5_SHIFT
, 
CCM_CCGR2_CG5_MASK
),

617 
	mccmCcgrG©eIimClk
 = 
CCM_TUPLE
(
CCGR2
, 
CCM_CCGR2_CG6_SHIFT
, 
CCM_CCGR2_CG6_MASK
),

618 
	mccmCcgrG©eIomuxI±ClkIo
 = 
CCM_TUPLE
(
CCGR2
, 
CCM_CCGR2_CG7_SHIFT
, 
CCM_CCGR2_CG7_MASK
),

619 
	mccmCcgrG©eIpmux1Clk
 = 
CCM_TUPLE
(
CCGR2
, 
CCM_CCGR2_CG8_SHIFT
, 
CCM_CCGR2_CG8_MASK
),

620 
	mccmCcgrG©eIpmux2Clk
 = 
CCM_TUPLE
(
CCGR2
, 
CCM_CCGR2_CG9_SHIFT
, 
CCM_CCGR2_CG9_MASK
),

621 
	mccmCcgrG©eIpmux3Clk
 = 
CCM_TUPLE
(
CCGR2
, 
CCM_CCGR2_CG10_SHIFT
, 
CCM_CCGR2_CG10_MASK
),

622 
	mccmCcgrG©eIpsyncIp2≠btTasc1
 = 
CCM_TUPLE
(
CCGR2
, 
CCM_CCGR2_CG11_SHIFT
, 
CCM_CCGR2_CG11_MASK
),

623 
	mccmCcgrG©eLcdClk
 = 
CCM_TUPLE
(
CCGR2
, 
CCM_CCGR2_CG14_SHIFT
, 
CCM_CCGR2_CG14_MASK
),

624 
	mccmCcgrG©ePxpClk
 = 
CCM_TUPLE
(
CCGR2
, 
CCM_CCGR2_CG15_SHIFT
, 
CCM_CCGR2_CG15_MASK
),

625 
	mccmCcgrG©eM4Clk
 = 
CCM_TUPLE
(
CCGR3
, 
CCM_CCGR3_CG1_SHIFT
, 
CCM_CCGR3_CG1_MASK
),

626 
	mccmCcgrG©eE√tClk
 = 
CCM_TUPLE
(
CCGR3
, 
CCM_CCGR3_CG2_SHIFT
, 
CCM_CCGR3_CG2_MASK
),

627 
	mccmCcgrG©eDi•AxiClk
 = 
CCM_TUPLE
(
CCGR3
, 
CCM_CCGR3_CG3_SHIFT
, 
CCM_CCGR3_CG3_MASK
),

628 
	mccmCcgrG©eLcdif2PixClk
 = 
CCM_TUPLE
(
CCGR3
, 
CCM_CCGR3_CG4_SHIFT
, 
CCM_CCGR3_CG4_MASK
),

629 
	mccmCcgrG©eLcdif1PixClk
 = 
CCM_TUPLE
(
CCGR3
, 
CCM_CCGR3_CG5_SHIFT
, 
CCM_CCGR3_CG5_MASK
),

630 
	mccmCcgrG©eLdbDi0Clk
 = 
CCM_TUPLE
(
CCGR3
, 
CCM_CCGR3_CG6_SHIFT
, 
CCM_CCGR3_CG6_MASK
),

631 
	mccmCcgrG©eQ•i1Clk
 = 
CCM_TUPLE
(
CCGR3
, 
CCM_CCGR3_CG7_SHIFT
, 
CCM_CCGR3_CG7_MASK
),

632 
	mccmCcgrG©eMlbClk
 = 
CCM_TUPLE
(
CCGR3
, 
CCM_CCGR3_CG9_SHIFT
, 
CCM_CCGR3_CG9_MASK
),

633 
	mccmCcgrG©eMmdcC‹eA˛kFa°P0
 = 
CCM_TUPLE
(
CCGR3
, 
CCM_CCGR3_CG10_SHIFT
, 
CCM_CCGR3_CG10_MASK
),

634 
	mccmCcgrG©eMmdcC‹eIpgClkP0
 = 
CCM_TUPLE
(
CCGR3
, 
CCM_CCGR3_CG12_SHIFT
, 
CCM_CCGR3_CG12_MASK
),

635 
	mccmCcgrG©eMmdcC‹eIpgClkP1
 = 
CCM_TUPLE
(
CCGR3
, 
CCM_CCGR3_CG13_SHIFT
, 
CCM_CCGR3_CG13_MASK
),

636 
	mccmCcgrG©eO¸amClk
 = 
CCM_TUPLE
(
CCGR3
, 
CCM_CCGR3_CG14_SHIFT
, 
CCM_CCGR3_CG14_MASK
),

637 
	mccmCcgrG©ePcõRoŸ
 = 
CCM_TUPLE
(
CCGR4
, 
CCM_CCGR4_CG0_SHIFT
, 
CCM_CCGR4_CG0_MASK
),

638 
	mccmCcgrG©eQ•i2Clk
 = 
CCM_TUPLE
(
CCGR4
, 
CCM_CCGR4_CG5_SHIFT
, 
CCM_CCGR4_CG5_MASK
),

639 
	mccmCcgrG©ePl301Mx6q≥r1Bch
 = 
CCM_TUPLE
(
CCGR4
, 
CCM_CCGR4_CG6_SHIFT
, 
CCM_CCGR4_CG6_MASK
),

640 
	mccmCcgrG©ePl301Mx6q≥r2Maö
 = 
CCM_TUPLE
(
CCGR4
, 
CCM_CCGR4_CG7_SHIFT
, 
CCM_CCGR4_CG7_MASK
),

641 
	mccmCcgrG©ePwm1Clk
 = 
CCM_TUPLE
(
CCGR4
, 
CCM_CCGR4_CG8_SHIFT
, 
CCM_CCGR4_CG8_MASK
),

642 
	mccmCcgrG©ePwm2Clk
 = 
CCM_TUPLE
(
CCGR4
, 
CCM_CCGR4_CG9_SHIFT
, 
CCM_CCGR4_CG9_MASK
),

643 
	mccmCcgrG©ePwm3Clk
 = 
CCM_TUPLE
(
CCGR4
, 
CCM_CCGR4_CG10_SHIFT
, 
CCM_CCGR4_CG10_MASK
),

644 
	mccmCcgrG©ePwm4Clk
 = 
CCM_TUPLE
(
CCGR4
, 
CCM_CCGR4_CG11_SHIFT
, 
CCM_CCGR4_CG11_MASK
),

645 
	mccmCcgrG©eRaw«ndUBchI≈tApb
 = 
CCM_TUPLE
(
CCGR4
, 
CCM_CCGR4_CG12_SHIFT
, 
CCM_CCGR4_CG12_MASK
),

646 
	mccmCcgrG©eRaw«ndUGpmiBch
 = 
CCM_TUPLE
(
CCGR4
, 
CCM_CCGR4_CG13_SHIFT
, 
CCM_CCGR4_CG13_MASK
),

647 
	mccmCcgrG©eRaw«ndUGpmiGpmiIo
 = 
CCM_TUPLE
(
CCGR4
, 
CCM_CCGR4_CG14_SHIFT
, 
CCM_CCGR4_CG14_MASK
),

648 
	mccmCcgrG©eRaw«ndUGpmiI≈Apb
 = 
CCM_TUPLE
(
CCGR4
, 
CCM_CCGR4_CG15_SHIFT
, 
CCM_CCGR4_CG15_MASK
),

649 
	mccmCcgrG©eRomClk
 = 
CCM_TUPLE
(
CCGR5
, 
CCM_CCGR5_CG0_SHIFT
, 
CCM_CCGR5_CG0_MASK
),

650 
	mccmCcgrG©eSdmaClk
 = 
CCM_TUPLE
(
CCGR5
, 
CCM_CCGR5_CG3_SHIFT
, 
CCM_CCGR5_CG3_MASK
),

651 
	mccmCcgrG©eSpbaClk
 = 
CCM_TUPLE
(
CCGR5
, 
CCM_CCGR5_CG6_SHIFT
, 
CCM_CCGR5_CG6_MASK
),

652 
	mccmCcgrG©eSpdifAudioClk
 = 
CCM_TUPLE
(
CCGR5
, 
CCM_CCGR5_CG7_SHIFT
, 
CCM_CCGR5_CG7_MASK
),

653 
	mccmCcgrG©eSsi1Clk
 = 
CCM_TUPLE
(
CCGR5
, 
CCM_CCGR5_CG9_SHIFT
, 
CCM_CCGR5_CG9_MASK
),

654 
	mccmCcgrG©eSsi2Clk
 = 
CCM_TUPLE
(
CCGR5
, 
CCM_CCGR5_CG10_SHIFT
, 
CCM_CCGR5_CG10_MASK
),

655 
	mccmCcgrG©eSsi3Clk
 = 
CCM_TUPLE
(
CCGR5
, 
CCM_CCGR5_CG11_SHIFT
, 
CCM_CCGR5_CG11_MASK
),

656 
	mccmCcgrG©eU¨tClk
 = 
CCM_TUPLE
(
CCGR5
, 
CCM_CCGR5_CG12_SHIFT
, 
CCM_CCGR5_CG12_MASK
),

657 
	mccmCcgrG©eU¨tSîülClk
 = 
CCM_TUPLE
(
CCGR5
, 
CCM_CCGR5_CG13_SHIFT
, 
CCM_CCGR5_CG13_MASK
),

658 
	mccmCcgrG©eSai1Clk
 = 
CCM_TUPLE
(
CCGR5
, 
CCM_CCGR5_CG14_SHIFT
, 
CCM_CCGR5_CG14_MASK
),

659 
	mccmCcgrG©eSai2Clk
 = 
CCM_TUPLE
(
CCGR5
, 
CCM_CCGR5_CG15_SHIFT
, 
CCM_CCGR5_CG15_MASK
),

660 
	mccmCcgrG©eUsboh3Clk
 = 
CCM_TUPLE
(
CCGR6
, 
CCM_CCGR6_CG0_SHIFT
, 
CCM_CCGR6_CG0_MASK
),

661 
	mccmCcgrG©eUsdhc1Clk
 = 
CCM_TUPLE
(
CCGR6
, 
CCM_CCGR6_CG1_SHIFT
, 
CCM_CCGR6_CG1_MASK
),

662 
	mccmCcgrG©eUsdhc2Clk
 = 
CCM_TUPLE
(
CCGR6
, 
CCM_CCGR6_CG2_SHIFT
, 
CCM_CCGR6_CG2_MASK
),

663 
	mccmCcgrG©eUsdhc3Clk
 = 
CCM_TUPLE
(
CCGR6
, 
CCM_CCGR6_CG3_SHIFT
, 
CCM_CCGR6_CG3_MASK
),

664 
	mccmCcgrG©eUsdhc4Clk
 = 
CCM_TUPLE
(
CCGR6
, 
CCM_CCGR6_CG4_SHIFT
, 
CCM_CCGR6_CG4_MASK
),

665 
	mccmCcgrG©eEimSlowClk
 = 
CCM_TUPLE
(
CCGR6
, 
CCM_CCGR6_CG5_SHIFT
, 
CCM_CCGR6_CG5_MASK
),

666 
	mccmCcgrG©ePwm8Clk
 = 
CCM_TUPLE
(
CCGR6
, 
CCM_CCGR6_CG8_SHIFT
, 
CCM_CCGR6_CG8_MASK
),

667 
	mccmCcgrG©eVadcClk
 = 
CCM_TUPLE
(
CCGR6
, 
CCM_CCGR6_CG10_SHIFT
, 
CCM_CCGR6_CG10_MASK
),

668 
	mccmCcgrG©eGisClk
 = 
CCM_TUPLE
(
CCGR6
, 
CCM_CCGR6_CG11_SHIFT
, 
CCM_CCGR6_CG11_MASK
),

669 
	mccmCcgrG©eI2c4SîülClk
 = 
CCM_TUPLE
(
CCGR6
, 
CCM_CCGR6_CG12_SHIFT
, 
CCM_CCGR6_CG12_MASK
),

670 
	mccmCcgrG©ePwm5Clk
 = 
CCM_TUPLE
(
CCGR6
, 
CCM_CCGR6_CG13_SHIFT
, 
CCM_CCGR6_CG13_MASK
),

671 
	mccmCcgrG©ePwm6Clk
 = 
CCM_TUPLE
(
CCGR6
, 
CCM_CCGR6_CG14_SHIFT
, 
CCM_CCGR6_CG14_MASK
),

672 
	mccmCcgrG©ePwm7Clk
 = 
CCM_TUPLE
(
CCGR6
, 
CCM_CCGR6_CG15_SHIFT
, 
CCM_CCGR6_CG15_MASK
)

678 
	e_ccm_g©e_vÆue
 {

679 
	mccmClockNŸNìded
 = 0U,

680 
	mccmClockNìdedRun
 = 1U,

681 
	mccmClockNìdedAŒ
 = 3U

687 
	e_ccm_ovîrided_íabÀ_sig«l
 {

688 
	mccmOvîridedSig«lFromG±
 = 1U << 5,

689 
	mccmOvîridedSig«lFromEpô
 = 1U << 6,

690 
	mccmOvîridedSig«lFromUsdhc
 = 1U << 7,

691 
	mccmOvîridedSig«lFromGpu
 = 1U << 10,

692 
	mccmOvîridedSig«lFromC™2Cpi
 = 1U << 28,

693 
	mccmOvîridedSig«lFromC™1Cpi
 = 1U << 30

700 #i‡
deföed
(
__˝lu•lus
)

718 
ölöe
 
CCM_SëRoŸMux
(
CCM_Ty≥
 * 
ba£
, 
uöt32_t
 
ccmRoŸClk
, uöt32_à
mux
)

720 
CCM_TUPLE_REG
(
ba£
, 
ccmRoŸClk
Ë(CCM_TUPLE_REG(ba£, ccmRoŸClkË& (~
CCM_TUPLE_MASK
(ccmRootClk))) |

721 (((
uöt32_t
)((
mux
Ë<< 
CCM_TUPLE_SHIFT
(
ccmRoŸClk
))Ë& 
CCM_TUPLE_MASK
(ccmRootClk));

733 
ölöe
 
uöt32_t
 
CCM_GëRoŸMux
(
CCM_Ty≥
 * 
ba£
, uöt32_à
ccmRoŸClk
)

735  (
CCM_TUPLE_REG
(
ba£
, 
ccmRoŸClk
Ë& 
CCM_TUPLE_MASK
(ccmRoŸClk)Ë>> 
CCM_TUPLE_SHIFT
(ccmRootClk);

748 
ölöe
 
CCM_SëRoŸDividî
(
CCM_Ty≥
 * 
ba£
, 
uöt32_t
 
ccmRoŸDiv
, uöt32_à
div
)

750 
CCM_TUPLE_REG
(
ba£
, 
ccmRoŸDiv
Ë(CCM_TUPLE_REG(ba£, ccmRoŸDivË& (~
CCM_TUPLE_MASK
(ccmRootDiv))) |

751 (((
uöt32_t
)((
div
Ë<< 
CCM_TUPLE_SHIFT
(
ccmRoŸDiv
))Ë& 
CCM_TUPLE_MASK
(ccmRootDiv));

765 
ölöe
 
uöt32_t
 
CCM_GëRoŸDividî
(
CCM_Ty≥
 * 
ba£
, uöt32_à
ccmRoŸDiv
)

767  (
CCM_TUPLE_REG
(
ba£
, 
ccmRoŸDiv
Ë& 
CCM_TUPLE_MASK
(ccmRoŸDiv)Ë>> 
CCM_TUPLE_SHIFT
(ccmRootDiv);

778 
CCM_SëMmdcH™dshakeMask
(
CCM_Ty≥
 * 
ba£
, 
boﬁ
 
mask
);

798 
ölöe
 
CCM_C⁄åﬁG©e
(
CCM_Ty≥
 * 
ba£
, 
uöt32_t
 
ccmG©e
, uöt32_à
c⁄åﬁ
)

800 
CCM_TUPLE_REG
(
ba£
, 
ccmG©e
Ë(CCM_TUPLE_REG(ba£, ccmG©eË& (~
CCM_TUPLE_MASK
(ccmGate))) |

801 (((
uöt32_t
)((
c⁄åﬁ
Ë<< 
CCM_TUPLE_SHIFT
(
ccmG©e
))Ë& 
CCM_TUPLE_MASK
(ccmGate));

814 
CCM_SëClockE«bÀSig«lOvîrided
(
CCM_Ty≥
 * 
ba£
, 
uöt32_t
 
sig«l
, 
boﬁ
 
c⁄åﬁ
);

818 #i‡
deföed
(
__˝lu•lus
)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\ecspi.h

31 #i‚de‡
__ECSPI_H__


32 
	#__ECSPI_H__


	)

34 
	~<°döt.h
>

35 
	~<°dboﬁ.h
>

36 
	~<as£π.h
>

37 
	~"devi˚_imx.h
"

49 
	e_ec•i_ch™√l_£À˘


51 
	mec•iSñe˘Ch™√l0
 = 0U,

52 
	mec•iSñe˘Ch™√l1
 = 1U,

53 
	mec•iSñe˘Ch™√l2
 = 2U,

54 
	mec•iSñe˘Ch™√l3
 = 3U,

58 
	e_ec•i_ma°î_¶ave_mode


60 
	mec•iSœveMode
 = 0U,

61 
	mec•iMa°îMode
 = 1U,

65 
	e_ec•i_˛ock_pha£


67 
	mec•iClockPha£Fú°Edge
 = 0U,

69 
	mec•iClockPha£Sec⁄dEdge
 = 1U,

74 
	e_ec•i_˛ock_pﬁ¨ôy


76 
	mec•iClockPﬁ¨ôyA˘iveHigh
 = 0U,

77 
	mec•iClockPﬁ¨ôyA˘iveLow
 = 1U,

81 
	e_ec•i_ss_pﬁ¨ôy


83 
	mec•iSSPﬁ¨ôyA˘iveLow
 = 0U,

84 
	mec•iSSPﬁ¨ôyA˘iveHigh
 = 1U,

88 
	e_ec•i_d©Æöe_öa˘ive°©e


90 
	mec•iD©aLöeSèyHigh
 = 0U,

91 
	mec•iD©aLöeSèyLow
 = 1U,

95 
	e_ec•i_s˛k_öa˘ive°©e


97 
	mec•iS˛kSèyLow
 = 0U,

98 
	mec•iS˛kSèyHigh
 = 1U,

102 
	e_ec•i_ßm∂ïîiod_˛ocksour˚


104 
	mec•iS˛k
 = 0U,

105 
	mec•iLowFªq32K
 = 1U,

109 
	e_ec•i_dma_sour˚


111 
	mec•iDmaTxfifoEm±y
 = 7U,

112 
	mec•iDmaRxfifoReque°
 = 23U,

113 
	mec•iDmaRxfifoTaû
 = 31U,

117 
	e_ec•i_fifŸhªshﬁd


119 
	mec•iTxfifoThªshﬁd
 = 0U,

120 
	mec•iRxfifoThªshﬁd
 = 16U,

124 
	e_ec•i_°©us_Êag


126 
	mec•iFœgTxfifoEm±y
 = 1U << 0,

127 
	mec•iFœgTxfifoD©aReque°
 = 1U << 1,

128 
	mec•iFœgTxfifoFuŒ
 = 1U << 2,

129 
	mec•iFœgRxfifoRódy
 = 1U << 3,

130 
	mec•iFœgRxfifoD©aReque°
 = 1U << 4,

131 
	mec•iFœgRxfifoFuŒ
 = 1U << 5,

132 
	mec•iFœgRxfifoOvîÊow
 = 1U << 6,

133 
	mec•iFœgTxfifoTc
 = 1U << 7,

137 
	e_ec•i_d©a_ªady


139 
	mec•iRdyNoC¨e
 = 0U,

140 
	mec•iRdyFÆlEdgeTrig
 = 1U,

141 
	mec•iRdyLowLevñTrig
 = 2U,

142 
	mec•iRdyRe£rved
 = 3U,

146 
	s_ec•i_öô_c⁄fig


148 
uöt32_t
 
	m˛ockR©e
;

149 
uöt32_t
 
	mbaudR©e
;

150 
uöt32_t
 
	mch™√lSñe˘
;

151 
uöt32_t
 
	mmode
;

152 
uöt32_t
 
	mbur°Lígth
;

153 
uöt32_t
 
	m˛ockPha£
;

154 
uöt32_t
 
	m˛ockPﬁ¨ôy
;

155 
boﬁ
 
	mec•iAutoSèπ
;

156 } 
	tec•i_öô_c⁄fig_t
;

162 #i‡
deföed
(
__˝lu•lus
)

177 
ECSPI_Inô
(
ECSPI_Ty≥
* 
ba£
, c⁄° 
ec•i_öô_c⁄fig_t
* 
öôC⁄fig
);

184 
ölöe
 
ECSPI_E«bÀ
(
ECSPI_Ty≥
* 
ba£
)

187 
ECSPI_CONREG_REG
(
ba£
Ë|
ECSPI_CONREG_EN_MASK
;

195 
ölöe
 
ECSPI_DißbÀ
(
ECSPI_Ty≥
* 
ba£
)

198 
ECSPI_CONREG_REG
(
ba£
Ë&~
ECSPI_CONREG_EN_MASK
;

207 
ölöe
 
ECSPI_In£πWaôSèã
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
numbî
)

210 
ECSPI_PERIODREG_REG
(
ba£
Ë(ECSPI_PERIODREG_REG(ba£Ë& (~
ECSPI_PERIODREG_SAMPLE_PERIOD_MASK
)) |

211 
ECSPI_PERIODREG_SAMPLE_PERIOD
(
numbî
);

220 
ECSPI_SëSampClockSour˚
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
sour˚
);

229 
ölöe
 
ECSPI_SëDñay
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
dñay
)

232 
ECSPI_PERIODREG_REG
(
ba£
Ë(ECSPI_PERIODREG_REG(ba£Ë& (~
ECSPI_PERIODREG_CSD_CTL_MASK
)) |

233 
ECSPI_PERIODREG_CSD_CTL
(
dñay
);

243 
ölöe
 
ECSPI_SëSCLKI«˘iveSèã
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
ch™√l
, uöt32_à
°©e
)

246 
ECSPI_CONFIGREG_REG
(
ba£
Ë(ECSPI_CONFIGREG_REG(ba£Ë& (~
ECSPI_CONFIGREG_SCLK_CTL
(1 << 
ch™√l
))) |

247 
ECSPI_CONFIGREG_SCLK_CTL
((
°©e
 & 1Ë<< 
ch™√l
);

257 
ölöe
 
ECSPI_SëD©aI«˘iveSèã
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
ch™√l
, uöt32_à
°©e
)

260 
ECSPI_CONFIGREG_REG
(
ba£
Ë(ECSPI_CONFIGREG_REG(ba£Ë& (~
ECSPI_CONFIGREG_DATA_CTL
(1 << 
ch™√l
))) |

261 
ECSPI_CONFIGREG_DATA_CTL
((
°©e
 & 1Ë<< 
ch™√l
);

269 
ölöe
 
ECSPI_SèπBur°
(
ECSPI_Ty≥
* 
ba£
)

272 
ECSPI_CONREG_REG
(
ba£
Ë|
ECSPI_CONREG_XCH_MASK
;

281 
ölöe
 
ECSPI_SëBur°Lígth
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
Àngth
)

284 
ECSPI_CONREG_REG
(
ba£
Ë(ECSPI_CONREG_REG(ba£Ë& (~
ECSPI_CONREG_BURST_LENGTH_MASK
)) |

285 
ECSPI_CONREG_BURST_LENGTH
(
Àngth
);

297 
ölöe
 
ECSPI_SëSSMu…ùÀBur°
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
ch™√l
, 
boﬁ
 
ssMu…iBur°
)

300 
ECSPI_CONFIGREG_REG
(
ba£
Ë(ECSPI_CONFIGREG_REG(ba£Ë& (~
ECSPI_CONFIGREG_SS_CTL
(1 << 
ch™√l
))) |

301 
ECSPI_CONFIGREG_SS_CTL
(
ssMu…iBur°
 << 
ch™√l
);

311 
ölöe
 
ECSPI_SëSSPﬁ¨ôy
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
ch™√l
, uöt32_à
pﬁ¨ôy
)

314 
ECSPI_CONFIGREG_REG
(
ba£
Ë(ECSPI_CONFIGREG_REG(ba£Ë& (~
ECSPI_CONFIGREG_SS_POL
(1 << 
ch™√l
))) |

315 
ECSPI_CONFIGREG_SS_POL
(
pﬁ¨ôy
 << 
ch™√l
);

324 
ölöe
 
ECSPI_SëSPID©aRódy
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
•id©¨ódy
)

327 
ECSPI_CONREG_REG
(
ba£
Ë(ECSPI_CONREG_REG(ba£Ë& (~
ECSPI_CONREG_DRCTL_MASK
)) |

328 
ECSPI_CONREG_DRCTL
(
•id©¨ódy
);

341 
uöt32_t
 
ECSPI_SëBaudR©e
(
ECSPI_Ty≥
* 
ba£
, uöt32_à
sour˚ClockInHz
, uöt32_à
bôsPîSec
);

356 
ölöe
 
ECSPI_SídD©a
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
d©a
)

359 
ECSPI_TXDATA_REG
(
ba£
Ë
d©a
;

368 
ölöe
 
uöt32_t
 
ECSPI_Re˚iveD©a
(
ECSPI_Ty≥
* 
ba£
)

371  
ECSPI_RXDATA_REG
(
ba£
);

380 
ölöe
 
uöt32_t
 
ECSPI_GëRxfifoCou¡î
(
ECSPI_Ty≥
* 
ba£
)

383  ((
ECSPI_TESTREG_REG
(
ba£
Ë& 
ECSPI_TESTREG_RXCNT_MASK
Ë>> 
ECSPI_TESTREG_RXCNT_SHIFT
);

392 
ölöe
 
uöt32_t
 
ECSPI_GëTxfifoCou¡î
(
ECSPI_Ty≥
* 
ba£
)

395  ((
ECSPI_TESTREG_REG
(
ba£
Ë& 
ECSPI_TESTREG_TXCNT_MASK
Ë>> 
ECSPI_TESTREG_TXCNT_SHIFT
);

414 
ECSPPI_SëDMACmd
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
sour˚
, 
boﬁ
 
íabÀ
);

422 
ölöe
 
ECSPI_SëDMABur°Lígth
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
Àngth
)

425 
ECSPI_DMAREG_REG
(
ba£
Ë(ECSPI_DMAREG_REG(ba£Ë& (~
ECSPI_DMAREG_RX_DMA_LENGTH_MASK
)) |

426 
ECSPI_DMAREG_RX_DMA_LENGTH
(
Àngth
);

436 
ECSPI_SëFIFOThªshﬁd
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
fifo
, uöt32_à
thªshﬁd
);

454 
ECSPI_SëI¡Cmd
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
Êags
, 
boﬁ
 
íabÀ
);

463 
ölöe
 
uöt32_t
 
ECSPI_GëSètusFœg
(
ECSPI_Ty≥
* 
ba£
, uöt32_à
Êags
)

466  
ECSPI_STATREG_REG
(
ba£
Ë& 
Êags
;

475 
ölöe
 
ECSPI_CÀ¨SètusFœg
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
Êags
)

478 
ECSPI_STATREG_REG
(
ba£
Ë
Êags
;

483 #i‡
deföed
(
__˝lu•lus
)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\epit.h

31 #i‚de‡
__EPIT_H__


32 
	#__EPIT_H__


	)

34 
	~<°döt.h
>

35 
	~<°dboﬁ.h
>

36 
	~<as£π.h
>

37 
	~"devi˚_imx.h
"

51 
	e_ïô_˛ock_sour˚


53 
	mïôClockSour˚Off
 = 0U,

54 
	mïôClockSour˚Pîùh
 = 1U,

55 
	mïôClockSour˚HighFªq
 = 2U,

56 
	mïôClockSour˚LowFªq
 = 3U,

60 
	e_ïô_ouçut_›î©i⁄_mode


62 
	mïôOuçutO≥øti⁄Disc⁄√˘ed
 = 0U,

63 
	mïôOuçutO≥øti⁄ToggÀ
 = 1U,

64 
	mïôOuçutO≥øti⁄CÀ¨
 = 2U,

65 
	mïôOuçutO≥øti⁄Së
 = 3U,

69 
	s_ïô_öô_c⁄fig


71 
boﬁ
 
	m‰ìRun
;

72 
boﬁ
 
	mwaôE«bÀ
;

73 
boﬁ
 
	m°›E«bÀ
;

74 
boﬁ
 
	mdbgE«bÀ
;

75 
boﬁ
 
	míabÀMode
;

77 } 
	tïô_öô_c⁄fig_t
;

83 #i‡
deföed
(
__˝lu•lus
)

98 
EPIT_Inô
(
EPIT_Ty≥
* 
ba£
, c⁄° 
ïô_öô_c⁄fig_t
* 
öôC⁄fig
);

105 
ölöe
 
EPIT_So·Re£t
(
EPIT_Ty≥
* 
ba£
)

107 
EPIT_CR_REG
(
ba£
Ë|
EPIT_CR_SWR_MASK
;

109 
EPIT_CR_REG
(
ba£
Ë& 
EPIT_CR_SWR_MASK
) { }

118 
ölöe
 
EPIT_SëClockSour˚
(
EPIT_Ty≥
* 
ba£
, 
uöt32_t
 
sour˚
)

120 
EPIT_CR_REG
(
ba£
Ë(EPIT_CR_REG(ba£Ë& ~
EPIT_CR_CLKSRC_MASK
Ë| 
EPIT_CR_CLKSRC
(
sour˚
);

129 
ölöe
 
uöt32_t
 
EPIT_GëClockSour˚
(
EPIT_Ty≥
* 
ba£
)

131  (
EPIT_CR_REG
(
ba£
Ë& 
EPIT_CR_CLKSRC_MASK
Ë>> 
EPIT_CR_CLKSRC_SHIFT
;

140 
ölöe
 
EPIT_SëPªsˇÀr
(
EPIT_Ty≥
* 
ba£
, 
uöt32_t
 
¥esˇÀr
)

142 
as£π
(
¥esˇÀr
 <(
EPIT_CR_PRESCALAR_MASK
 >> 
EPIT_CR_PRESCALAR_SHIFT
));

143 
EPIT_CR_REG
(
ba£
Ë(EPIT_CR_REG(ba£Ë& ~
EPIT_CR_PRESCALAR_MASK
Ë| 
EPIT_CR_PRESCALAR
(
¥esˇÀr
);

152 
ölöe
 
uöt32_t
 
EPIT_GëPªsˇÀr
(
EPIT_Ty≥
* 
ba£
)

154  (
EPIT_CR_REG
(
ba£
Ë& 
EPIT_CR_PRESCALAR_MASK
Ë>> 
EPIT_CR_PRESCALAR_SHIFT
;

162 
ölöe
 
EPIT_E«bÀ
(
EPIT_Ty≥
* 
ba£
)

164 
EPIT_CR_REG
(
ba£
Ë|
EPIT_CR_EN_MASK
;

172 
ölöe
 
EPIT_DißbÀ
(
EPIT_Ty≥
* 
ba£
)

174 
EPIT_CR_REG
(
ba£
Ë&~
EPIT_CR_EN_MASK
;

183 
ölöe
 
uöt32_t
 
EPIT_RódCou¡î
(
EPIT_Ty≥
* 
ba£
)

185  
EPIT_CNR_REG
(
ba£
);

201 
ölöe
 
EPIT_SëOuçutO≥øti⁄Mode
(
EPIT_Ty≥
* 
ba£
, 
uöt32_t
 
mode
)

203 
EPIT_CR_REG
(
ba£
Ë(EPIT_CR_REG(ba£Ë& ~
EPIT_CR_OM_MASK
Ë| 
EPIT_CR_OM
(
mode
);

212 
ölöe
 
uöt32_t
 
EPIT_GëOuçutO≥øti⁄Mode
(
EPIT_Ty≥
* 
ba£
)

214  (
EPIT_CR_REG
(
ba£
Ë& 
EPIT_CR_OM_MASK
Ë>> 
EPIT_CR_OM_SHIFT
;

223 
ölöe
 
EPIT_SëOuçutCom∑ªVÆue
(
EPIT_Ty≥
* 
ba£
, 
uöt32_t
 
vÆue
)

225 
EPIT_CMPR_REG
(
ba£
Ë
vÆue
;

234 
ölöe
 
uöt32_t
 
EPIT_GëOuçutCom∑ªVÆue
(
EPIT_Ty≥
* 
ba£
)

236  
EPIT_CMPR_REG
(
ba£
);

252 
ölöe
 
EPIT_SëCou¡îLﬂdVÆue
(
EPIT_Ty≥
* 
ba£
, 
uöt32_t
 
vÆue
)

254 
EPIT_LR_REG
(
ba£
Ë
vÆue
;

263 
ölöe
 
uöt32_t
 
EPIT_GëCou¡îLﬂdVÆue
(
EPIT_Ty≥
* 
ba£
)

265  
EPIT_LR_REG
(
ba£
);

276 
EPIT_SëOvîwrôeCou¡î
(
EPIT_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

291 
ölöe
 
uöt32_t
 
EPIT_GëSètusFœg
(
EPIT_Ty≥
* 
ba£
)

293  
EPIT_SR_REG
(
ba£
Ë& 
EPIT_SR_OCIF_MASK
;

301 
ölöe
 
EPIT_CÀ¨SètusFœg
(
EPIT_Ty≥
* 
ba£
)

303 
EPIT_SR_REG
(
ba£
Ë|
EPIT_SR_OCIF_MASK
;

314 
EPIT_SëI¡Cmd
(
EPIT_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

318 #i‡
deföed
(
__˝lu•lus
)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\flexcan.h

31 #i‚de‡
__FLEXCAN_H__


32 
	#__FLEXCAN_H__


	)

34 
	~<°döt.h
>

35 
	~<°dboﬁ.h
>

36 
	~<as£π.h
>

37 
	~"devi˚_imx.h
"

49 
	e_Êexˇn_msgbuf_code_rx


51 
	mÊexˇnRxI«˘ive
 = 0x0,

52 
	mÊexˇnRxFuŒ
 = 0x2,

53 
	mÊexˇnRxEm±y
 = 0x4,

54 
	mÊexˇnRxOvîrun
 = 0x6,

55 
	mÊexˇnRxBusy
 = 0x8,

57 
	mÊexˇnRxR™swî
 = 0xA,

59 
	mÊexˇnRxNŸU£d
 = 0xF,

63 
	e_Êexˇn_msgbuf_code_tx


65 
	mÊexˇnTxI«˘ive
 = 0x8,

66 
	mÊexˇnTxAb‹t
 = 0x9,

67 
	mÊexˇnTxD©aOrRemã
 = 0xC,

69 
	mÊexˇnTxT™swî
 = 0xE,

71 
	mÊexˇnTxNŸU£d
 = 0xF,

75 
	e_Êexˇn_›î©öög_modes


77 
	mÊexC™N‹mÆMode
 = 0x1,

78 
	mÊexˇnLi°íO∆yMode
 = 0x2,

79 
	mÊexˇnLo›BackMode
 = 0x4,

83 
	e_Êexˇn_rx_mask_mode


85 
	mÊexˇnRxMaskGlobÆ
 = 0x0,

86 
	mÊexˇnRxMaskIndividuÆ
 = 0x1,

90 
	e_Êexˇn_rx_mask_id_ty≥


92 
	mÊexˇnRxMaskIdStd
 = 0x0,

93 
	mÊexˇnRxMaskIdExt
 = 0x1,

97 
	e_Êexˇn_öãºuçt


99 
	mÊexˇnI¡RxW¨nög
 = 0x01,

100 
	mÊexˇnI¡TxW¨nög
 = 0x02,

101 
	mÊexˇnI¡WakeUp
 = 0x04,

102 
	mÊexˇnI¡BusOff
 = 0x08,

103 
	mÊexˇnI¡Eº‹
 = 0x10,

107 
	e_Êexˇn_°©us_Êag


109 
	mÊexˇnSètusSynch
 = 
CAN_ESR1_SYNCH_MASK
,

110 
	mÊexˇnSètusTxW¨nögI¡
 = 
CAN_ESR1_TWRN_INT_MASK
,

111 
	mÊexˇnSètusRxW¨nögI¡
 = 
CAN_ESR1_RWRN_INT_MASK
,

112 
	mÊexˇnSètusBô1Eº
 = 
CAN_ESR1_BIT1_ERR_MASK
,

113 
	mÊexˇnSètusBô0Eº
 = 
CAN_ESR1_BIT0_ERR_MASK
,

114 
	mÊexˇnSètusAckEº
 = 
CAN_ESR1_ACK_ERR_MASK
,

115 
	mÊexˇnSètusCrcEº
 = 
CAN_ESR1_CRC_ERR_MASK
,

116 
	mÊexˇnSètusFømeEº
 = 
CAN_ESR1_FRM_ERR_MASK
,

117 
	mÊexˇnSètusStuffögEº
 = 
CAN_ESR1_STF_ERR_MASK
,

118 
	mÊexˇnSètusTxW¨nög
 = 
CAN_ESR1_TX_WRN_MASK
,

119 
	mÊexˇnSètusRxW¨nög
 = 
CAN_ESR1_RX_WRN_MASK
,

120 
	mÊexˇnSètusIdÀ
 = 
CAN_ESR1_IDLE_MASK
,

121 
	mÊexˇnSètusTønsmôtög
 = 
CAN_ESR1_TX_MASK
,

122 
	mÊexˇnSètusF…C⁄f
 = 
CAN_ESR1_FLT_CONF_MASK
,

123 
	mÊexˇnSètusRe˚ivög
 = 
CAN_ESR1_RX_MASK
,

124 
	mÊexˇnSètusBusOff
 = 
CAN_ESR1_BOFF_INT_MASK
,

125 
	mÊexˇnSètusEº‹
 = 
CAN_ESR1_ERR_INT_MASK
,

126 
	mÊexˇnSètusWake
 = 
CAN_ESR1_WAK_INT_MASK
,

130 
	e_Êexˇn_rx_fifo_id_ñemít_f‹m©


132 
	mÊexˇnRxFifoIdEÀmítF‹m©A
 = 0x0,

133 
	mÊexˇnRxFifoIdEÀmítF‹m©B
 = 0x1,

134 
	mÊexˇnRxFifoIdEÀmítF‹m©C
 = 0x2,

135 
	mÊexˇnRxFifoIdEÀmítF‹m©D
 = 0x3,

139 
	e_Êexˇn_rx_fifo_fûãr_id_numbî


141 
	mÊexˇnRxFifoIdFûãrNum8
 = 0x0,

142 
	mÊexˇnRxFifoIdFûãrNum16
 = 0x1,

143 
	mÊexˇnRxFifoIdFûãrNum24
 = 0x2,

144 
	mÊexˇnRxFifoIdFûãrNum32
 = 0x3,

145 
	mÊexˇnRxFifoIdFûãrNum40
 = 0x4,

146 
	mÊexˇnRxFifoIdFûãrNum48
 = 0x5,

147 
	mÊexˇnRxFifoIdFûãrNum56
 = 0x6,

148 
	mÊexˇnRxFifoIdFûãrNum64
 = 0x7,

149 
	mÊexˇnRxFifoIdFûãrNum72
 = 0x8,

150 
	mÊexˇnRxFifoIdFûãrNum80
 = 0x9,

151 
	mÊexˇnRxFifoIdFûãrNum88
 = 0xA,

152 
	mÊexˇnRxFifoIdFûãrNum96
 = 0xB,

153 
	mÊexˇnRxFifoIdFûãrNum104
 = 0xC,

154 
	mÊexˇnRxFifoIdFûãrNum112
 = 0xD,

155 
	mÊexˇnRxFifoIdFûãrNum120
 = 0xE,

156 
	mÊexˇnRxFifoIdFûãrNum128
 = 0xF,

160 
	sFLEXCANIdTabÀ


162 
uöt32_t
 *
	midFûãr
;

163 
boﬁ
 
	misRemŸeFøme
;

164 
boﬁ
 
	misExãndedFøme
;

165 } 
	tÊexˇn_id_èbÀ_t
;

168 
	s_Êexˇn_msgbuf


172 
uöt32_t
 
	mcs
;

175 
uöt32_t
 
	mtimeSèmp
 : 16;

176 
uöt32_t
 
	mdlc
 : 4;

177 
uöt32_t
 
	mπr
 : 1;

178 
uöt32_t
 
	mide
 : 1;

179 
uöt32_t
 
	m§r
 : 1;

180 
uöt32_t
 
	mªvî£1
 : 1;

181 
uöt32_t
 
	mcode
 : 4;

182 
uöt32_t
 
	mªvî£2
 : 4;

188 
uöt32_t
 
	mid
;

191 
uöt32_t
 
	midExt
 : 18;

192 
uöt32_t
 
	midStd
 : 11;

193 
uöt32_t
 
	m¥io
 : 3;

199 
uöt32_t
 
	mw‹d0
;

202 
uöt8_t
 
	md©a3
;

203 
uöt8_t
 
	md©a2
;

204 
uöt8_t
 
	md©a1
;

205 
uöt8_t
 
	md©a0
;

211 
uöt32_t
 
	mw‹d1
;

214 
uöt8_t
 
	md©a7
;

215 
uöt8_t
 
	md©a6
;

216 
uöt8_t
 
	md©a5
;

217 
uöt8_t
 
	md©a4
;

220 } 
	tÊexˇn_msgbuf_t
;

223 
	s_Êexˇn_timög


225 
uöt32_t
 
	m¥eDiv
;

226 
uöt32_t
 
	mrJumpwidth
;

227 
uöt32_t
 
	mpha£Seg1
;

228 
uöt32_t
 
	mpha£Seg2
;

229 
uöt32_t
 
	m¥›Seg
;

230 } 
	tÊexˇn_timög_t
;

233 
	s_Êexˇn_öô_c⁄fig


235 
Êexˇn_timög_t
 
	mtimög
;

236 
uöt32_t
 
	m›î©ögMode
;

237 
uöt8_t
 
	mmaxMsgBufNum
;

238 } 
	tÊexˇn_öô_c⁄fig_t
;

244 #i‡
deföed
(
__˝lu•lus
)

259 
FLEXCAN_Inô
(
CAN_Ty≥
* 
ba£
, c⁄° 
Êexˇn_öô_c⁄fig_t
* 
öôC⁄fig
);

266 
FLEXCAN_Deöô
(
CAN_Ty≥
* 
ba£
);

273 
FLEXCAN_E«bÀ
(
CAN_Ty≥
* 
ba£
);

280 
FLEXCAN_DißbÀ
(
CAN_Ty≥
* 
ba£
);

288 
FLEXCAN_SëTimög
(
CAN_Ty≥
* 
ba£
, c⁄° 
Êexˇn_timög_t
* 
timög
);

296 
FLEXCAN_SëO≥øtögMode
(
CAN_Ty≥
* 
ba£
, 
uöt8_t
 
mode
);

304 
FLEXCAN_SëMaxMsgBufNum
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
bufNum
);

313 
ölöe
 
boﬁ
 
FLEXCAN_IsModuÀRódy
(
CAN_Ty≥
* 
ba£
)

315  !((
CAN_MCR_REG
(
ba£
Ë>> 
CAN_MCR_NOT_RDY_SHIFT
) & 0x1);

326 
FLEXCAN_SëAb‹tCmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

336 
FLEXCAN_SëLoˇlPrioCmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

346 
FLEXCAN_SëM©chPrioCmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
¥i‹ôy
);

362 
Êexˇn_msgbuf_t
* 
FLEXCAN_GëMsgBufPå
(
CAN_Ty≥
* 
ba£
, 
uöt8_t
 
msgBufIdx
);

372 
boﬁ
 
FLEXCAN_LockRxMsgBuf
(
CAN_Ty≥
* 
ba£
, 
uöt8_t
 
msgBufIdx
);

380 
uöt16_t
 
FLEXCAN_U∆ockAŒRxMsgBuf
(
CAN_Ty≥
* 
ba£
);

398 
FLEXCAN_SëMsgBufI¡Cmd
(
CAN_Ty≥
* 
ba£
, 
uöt8_t
 
msgBufIdx
, 
boﬁ
 
íabÀ
);

408 
boﬁ
 
FLEXCAN_GëMsgBufSètusFœg
(
CAN_Ty≥
* 
ba£
, 
uöt8_t
 
msgBufIdx
);

416 
FLEXCAN_CÀ¨MsgBufSètusFœg
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
msgBufIdx
);

425 
FLEXCAN_SëEºI¡Cmd
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
îr‹Src
, 
boﬁ
 
íabÀ
);

434 
uöt32_t
 
FLEXCAN_GëEºSètusFœg
(
CAN_Ty≥
* 
ba£
, uöt32_à
îrFœgs
);

442 
FLEXCAN_CÀ¨EºSètusFœg
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
îrFœgs
);

451 
FLEXCAN_GëEºCou¡î
(
CAN_Ty≥
* 
ba£
, 
uöt8_t
* 
txEº‹
, uöt8_t* 
rxEº‹
);

466 
FLEXCAN_E«bÀRxFifo
(
CAN_Ty≥
* 
ba£
, 
uöt8_t
 
numOfFûãrs
);

473 
FLEXCAN_DißbÀRxFifo
(
CAN_Ty≥
* 
ba£
);

481 
FLEXCAN_SëRxFifoFûãrNum
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
numOfFûãrs
);

490 
FLEXCAN_SëRxFifoFûãr
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
idF‹m©
, 
Êexˇn_id_èbÀ_t
 *
idFûãrTabÀ
);

498 
Êexˇn_msgbuf_t
* 
FLEXCAN_GëRxFifoPå
(
CAN_Ty≥
* 
ba£
);

507 
uöt16_t
 
FLEXCAN_GëRxFifoInfo
(
CAN_Ty≥
* 
ba£
);

522 
FLEXCAN_SëRxMaskMode
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
mode
);

532 
FLEXCAN_SëRxMaskRåCmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

540 
FLEXCAN_SëRxGlobÆMask
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
mask
);

549 
FLEXCAN_SëRxIndividuÆMask
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
msgBufIdx
, uöt32_à
mask
);

557 
FLEXCAN_SëRxMsgBuff14Mask
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
mask
);

565 
FLEXCAN_SëRxMsgBuff15Mask
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
mask
);

573 
FLEXCAN_SëRxFifoGlobÆMask
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
mask
);

589 
FLEXCAN_SëSñfWakeUpCmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
ÕfE«bÀ
, boﬁ 
íabÀ
);

599 
FLEXCAN_SëSñfRe˚±i⁄Cmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

609 
FLEXCAN_SëRxVŸeCmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

619 
FLEXCAN_SëAutoBusOffRecovîCmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

629 
FLEXCAN_SëTimeSyncCmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

639 
FLEXCAN_SëAutoRemŸeRe•⁄£Cmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

647 
ölöe
 
FLEXCAN_SëGlôchFûãrWidth
(
CAN_Ty≥
* 
ba£
, 
uöt8_t
 
fûãrWidth
)

649 
CAN_GFWR_REG
(
ba£
Ë
fûãrWidth
;

660 
ölöe
 
uöt32_t
 
FLEXCAN_GëLowe°I«˘iveMsgBuf
(
CAN_Ty≥
* 
ba£
)

662  
CAN_ESR2_REG
(
ba£
);

673 
ölöe
 
FLEXCAN_SëTxArbôøti⁄SèπDñay
(
CAN_Ty≥
* 
ba£
, 
uöt8_t
 
èsd
)

675 
as£π
(
èsd
 < 32);

676 
CAN_CTRL2_REG
(
ba£
Ë(CAN_CTRL2_REG(ba£Ë& ~
CAN_CTRL2_TASD_MASK
Ë| 
CAN_CTRL2_TASD
(
èsd
);

681 #i‡
deföed
(
__˝lu•lus
)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\gpio_imx.h

31 #i‚de‡
__GPIO_IMX_H__


32 
	#__GPIO_IMX_H__


	)

34 
	~<°döt.h
>

35 
	~<°dboﬁ.h
>

36 
	~<as£π.h
>

37 
	~"devi˚_imx.h
"

49 
	e_gpio_pö_dúe˘i⁄


51 
	mgpioDigôÆI≈ut
 = 0U,

52 
	mgpioDigôÆOuçut
 = 1U,

53 } 
	tgpio_pö_dúe˘i⁄_t
;

56 
	e_gpio_öãºu±_mode


58 
	mgpioI¡LowLevñ
 = 0U,

59 
	mgpioI¡HighLevñ
 = 1U,

60 
	mgpioI¡RisögEdge
 = 2U,

61 
	mgpioI¡FÆlögEdge
 = 3U,

62 
	mgpioNoI¡mode
 = 4U,

63 } 
	tgpio_öãºu±_mode_t
;

66 
	e_gpio_pö_a˘i⁄


68 
	mgpioPöCÀ¨
 = 0U,

69 
	mgpioPöSë
 = 1U,

70 } 
	tgpio_pö_a˘i⁄_t
;

73 
	s_gpio_öô_c⁄fig


75 
uöt32_t
 
	mpö
;

76 
gpio_pö_dúe˘i⁄_t
 
	mdúe˘i⁄
;

77 
gpio_öãºu±_mode_t
 
	möãºu±Mode
;

78 } 
	tgpio_öô_c⁄fig_t
;

84 #i‡
deföed
(
__˝lu•lus
)

101 
GPIO_Inô
(
GPIO_Ty≥
* 
ba£
, c⁄° 
gpio_öô_c⁄fig_t
* 
öôC⁄fig
);

117 
ölöe
 
uöt8_t
 
GPIO_RódPöI≈ut
(
GPIO_Ty≥
* 
ba£
, 
uöt32_t
 
pö
)

119 
as£π
(
pö
 < 32);

121  (
uöt8_t
)((
GPIO_DR_REG
(
ba£
Ë>> 
pö
) & 1U);

131 
ölöe
 
uöt32_t
 
GPIO_RódP‹tI≈ut
(
GPIO_Ty≥
* 
ba£
)

133  
GPIO_DR_REG
(
ba£
);

143 
ölöe
 
uöt8_t
 
GPIO_RódPöOuçut
(
GPIO_Ty≥
* 
ba£
, 
uöt32_t
 
pö
)

145 
as£π
(
pö
 < 32);

147  (
uöt8_t
)((
GPIO_DR_REG
(
ba£
Ë>> 
pö
) & 0x1U);

157 
ölöe
 
uöt32_t
 
GPIO_RódP‹tOuçut
(
GPIO_Ty≥
* 
ba£
)

159  
GPIO_DR_REG
(
ba£
);

169 
GPIO_WrôePöOuçut
(
GPIO_Ty≥
* 
ba£
, 
uöt32_t
 
pö
, 
gpio_pö_a˘i⁄_t
 
pöVÆ
);

178 
ölöe
 
GPIO_WrôeP‹tOuçut
(
GPIO_Ty≥
* 
ba£
, 
uöt32_t
 
p‹tVÆ
)

180 
GPIO_DR_REG
(
ba£
Ë
p‹tVÆ
;

197 
ölöe
 
uöt8_t
 
GPIO_RódPadSètus
(
GPIO_Ty≥
* 
ba£
, 
uöt32_t
 
pö
)

199 
as£π
(
pö
 < 32);

201  (
uöt8_t
)((
GPIO_PSR_REG
(
ba£
Ë>> 
pö
) & 1U);

220 
GPIO_SëPöI¡Mode
(
GPIO_Ty≥
* 
ba£
, 
uöt32_t
 
pö
, 
boﬁ
 
íabÀ
);

229 
ölöe
 
boﬁ
 
GPIO_IsI¡Pídög
(
GPIO_Ty≥
* 
ba£
, 
uöt32_t
 
pö
)

231 
as£π
(
pö
 < 32);

233  (
boﬁ
)((
GPIO_ISR_REG
(
ba£
Ë>> 
pö
) & 1U);

243 
ölöe
 
GPIO_CÀ¨SètusFœg
(
GPIO_Ty≥
* 
ba£
, 
uöt32_t
 
pö
)

245 
as£π
(
pö
 < 32);

247 
GPIO_ISR_REG
(
ba£
Ë|(1U << 
pö
);

258 
GPIO_SëI¡EdgeSñe˘
(
GPIO_Ty≥
* 
ba£
, 
uöt32_t
 
pö
, 
boﬁ
 
íabÀ
);

262 #i‡
deföed
(
__˝lu•lus
)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\i2c_imx.h

31 #i‚de‡
__I2C_IMX_H__


32 
	#__I2C_IMX_H__


	)

34 
	~<°döt.h
>

35 
	~<°dboﬁ.h
>

36 
	~<as£π.h
>

37 
	~"devi˚_imx.h
"

49 
	s_i2c_öô_c⁄fig


51 
uöt32_t
 
	m˛ockR©e
;

52 
uöt32_t
 
	mbaudR©e
;

53 
uöt8_t
 
	m¶aveAddªss
;

54 } 
	ti2c_öô_c⁄fig_t
;

57 
	e_i2c_°©us_Êag


59 
	mi2cSètusTøns„rCom∂ëe
 = 
I2C_I2SR_ICF_MASK
,

60 
	mi2cSètusAddªs£dAsSœve
 = 
I2C_I2SR_IAAS_MASK
,

61 
	mi2cSètusBusBusy
 = 
I2C_I2SR_IBB_MASK
,

62 
	mi2cSètusArbôøti⁄Lo°
 = 
I2C_I2SR_IAL_MASK
,

63 
	mi2cSètusSœveRódWrôe
 = 
I2C_I2SR_SRW_MASK
,

64 
	mi2cSètusI¡îru±
 = 
I2C_I2SR_IIF_MASK
,

65 
	mi2cSètusRe˚ivedAck
 = 
I2C_I2SR_RXAK_MASK
,

69 
	e_i2c_w‹k_mode


71 
	mi2cModeSœve
 = 0x0,

72 
	mi2cModeMa°î
 = 
I2C_I2CR_MSTA_MASK
,

76 
	e_i2c_dúe˘i⁄_mode


78 
	mi2cDúe˘i⁄Re˚ive
 = 0x0,

79 
	mi2cDúe˘i⁄Tønsmô
 = 
I2C_I2CR_MTX_MASK
,

86 #i‡
deföed
(
__˝lu•lus
)

101 
I2C_Inô
(
I2C_Ty≥
* 
ba£
, c⁄° 
i2c_öô_c⁄fig_t
* 
öôC⁄fig
);

108 
I2C_Deöô
(
I2C_Ty≥
* 
ba£
);

115 
ölöe
 
I2C_E«bÀ
(
I2C_Ty≥
* 
ba£
)

117 
I2C_I2CR_REG
(
ba£
Ë|
I2C_I2CR_IEN_MASK
;

125 
ölöe
 
I2C_DißbÀ
(
I2C_Ty≥
* 
ba£
)

127 
I2C_I2CR_REG
(
ba£
Ë&~
I2C_I2CR_IEN_MASK
;

137 
I2C_SëBaudR©e
(
I2C_Ty≥
* 
ba£
, 
uöt32_t
 
˛ockR©e
, uöt32_à
baudR©e
);

145 
ölöe
 
I2C_SëSœveAddªss
(
I2C_Ty≥
* 
ba£
, 
uöt8_t
 
¶aveAddªss
)

147 
as£π
(
¶aveAddªss
 < 0x80);

149 
I2C_IADR_REG
(
ba£
Ë(I2C_IADR_REG(ba£Ë& ~
I2C_IADR_ADR_MASK
Ë| 
I2C_IADR_ADR
(
¶aveAddªss
);

162 
ölöe
 
I2C_SídRïótSèπ
(
I2C_Ty≥
* 
ba£
)

164 
I2C_I2CR_REG
(
ba£
Ë|
I2C_I2CR_RSTA_MASK
;

174 
ölöe
 
I2C_SëW‹kMode
(
I2C_Ty≥
* 
ba£
, 
uöt32_t
 
mode
)

176 
as£π
((
mode
 =
i2cModeMa°î
Ë|| (modê=
i2cModeSœve
));

178 
I2C_I2CR_REG
(
ba£
Ë(I2C_I2CR_REG(ba£Ë& ~
I2C_I2CR_MSTA_MASK
Ë| 
mode
;

188 
ölöe
 
I2C_SëDúMode
(
I2C_Ty≥
* 
ba£
, 
uöt32_t
 
dúe˘i⁄
)

190 
as£π
((
dúe˘i⁄
 =
i2cDúe˘i⁄Re˚ive
Ë|| (dúe˘i⁄ =
i2cDúe˘i⁄Tønsmô
));

192 
I2C_I2CR_REG
(
ba£
Ë(I2C_I2CR_REG(ba£Ë& ~
I2C_I2CR_MTX_MASK
Ë| 
dúe˘i⁄
;

204 
I2C_SëAckBô
(
I2C_Ty≥
* 
ba£
, 
boﬁ
 
ack
);

217 
ölöe
 
I2C_WrôeByã
(
I2C_Ty≥
* 
ba£
, 
uöt8_t
 
byã
)

219 
I2C_I2DR_REG
(
ba£
Ë
byã
;

231 
ölöe
 
uöt8_t
 
I2C_RódByã
(
I2C_Ty≥
* 
ba£
)

233  (
uöt8_t
)(
I2C_I2DR_REG
(
ba£
Ë& 
I2C_I2DR_DATA_MASK
);

249 
I2C_SëI¡Cmd
(
I2C_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

258 
ölöe
 
uöt32_t
 
I2C_GëSètusFœg
(
I2C_Ty≥
* 
ba£
, uöt32_à
Êags
)

260  (
I2C_I2SR_REG
(
ba£
Ë& 
Êags
);

269 
ölöe
 
I2C_CÀ¨SètusFœg
(
I2C_Ty≥
* 
ba£
, 
uöt32_t
 
Êags
)

272 
I2C_I2SR_REG
(
ba£
Ë&~
Êags
;

275 #ifde‡
__˝lu•lus


	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\lmem.h

31 #i‚de‡
__LMEM_H__


32 
	#__LMEM_H__


	)

34 
	~<°döt.h
>

35 
	~<as£π.h
>

36 
	~"devi˚_imx.h
"

47 #i‡
deföed
(
__˝lu•lus
)

61 
LMEM_E«bÀSy°emCache
(
LMEM_Ty≥
 *
ba£
);

68 
LMEM_DißbÀSy°emCache
(
LMEM_Ty≥
 *
ba£
);

75 
LMEM_FlushSy°emCache
(
LMEM_Ty≥
 *
ba£
);

86 
LMEM_FlushSy°emCacheLöes
(
LMEM_Ty≥
 *
ba£
, *
addªss
, 
uöt32_t
 
Àngth
);

93 
LMEM_InvÆid©eSy°emCache
(
LMEM_Ty≥
 *
ba£
);

104 
LMEM_InvÆid©eSy°emCacheLöes
(
LMEM_Ty≥
 *
ba£
, *
addªss
, 
uöt32_t
 
Àngth
);

118 
LMEM_E«bÀCodeCache
(
LMEM_Ty≥
 *
ba£
);

125 
LMEM_DißbÀCodeCache
(
LMEM_Ty≥
 *
ba£
);

132 
LMEM_FlushCodeCache
(
LMEM_Ty≥
 *
ba£
);

143 
LMEM_FlushCodeCacheLöes
(
LMEM_Ty≥
 *
ba£
, *
addªss
, 
uöt32_t
 
Àngth
);

150 
LMEM_InvÆid©eCodeCache
(
LMEM_Ty≥
 *
ba£
);

161 
LMEM_InvÆid©eCodeCacheLöes
(
LMEM_Ty≥
 *
ba£
, *
addªss
, 
uöt32_t
 
Àngth
);

165 #i‡
deföed
(
__˝lu•lus
)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\mu_imx.h

31 #i‚de‡
__MU_IMX_H__


32 
	#__MU_IMX_H__


	)

34 
	~<°döt.h
>

35 
	~<°dboﬁ.h
>

36 
	~<as£π.h
>

37 
	~"devi˚_imx.h
"

49 
	#MU_SR_GIP0_MASK
 (1U<<31U)

	)

51 
	#MU_SR_RF0_MASK
 (1U<<27U)

	)

53 
	#MU_SR_TE0_MASK
 (1U<<23U)

	)

55 
	#MU_CR_GIE0_MASK
 (1U<<31U)

	)

57 
	#MU_CR_RIE0_MASK
 (1U<<27U)

	)

59 
	#MU_CR_TIE0_MASK
 (1U<<23U)

	)

61 
	#MU_CR_GIR0_MASK
 (1U<<19U)

	)

64 
	#MU_GPn_COUNT
 (4U)

	)

70 
	e_mu_°©us


72 
	mkSètus_MU_Suc˚ss
 = 0U,

73 
	mkSètus_MU_TxNŸEm±y
 = 1U,

74 
	mkSètus_MU_RxNŸFuŒ
 = 2U,

75 
	mkSètus_MU_FœgPídög
 = 3U,

76 
	mkSètus_MU_EvítPídög
 = 4U,

77 
	mkSètus_MU_Inôülized
 = 5U,

78 
	mkSètus_MU_I¡Pídög
 = 6U,

79 
	mkSètus_MU_Faûed
 = 7U

80 } 
	tmu_°©us_t
;

83 
	e_mu_msg_°©us


85 
	mkMuTxEm±y0
 = 
MU_SR_TE0_MASK
,

86 
	mkMuTxEm±y1
 = 
MU_SR_TE0_MASK
 >> 1U,

87 
	mkMuTxEm±y2
 = 
MU_SR_TE0_MASK
 >> 2U,

88 
	mkMuTxEm±y3
 = 
MU_SR_TE0_MASK
 >> 3U,

89 
	mkMuTxEm±y
 = 
kMuTxEm±y0
 |

90 
kMuTxEm±y1
 |

91 
kMuTxEm±y2
 |

92 
kMuTxEm±y3
,

94 
	mkMuRxFuŒ0
 = 
MU_SR_RF0_MASK
,

95 
	mkMuRxFuŒ1
 = 
MU_SR_RF0_MASK
 >> 1U,

96 
	mkMuRxFuŒ2
 = 
MU_SR_RF0_MASK
 >> 2U,

97 
	mkMuRxFuŒ3
 = 
MU_SR_RF0_MASK
 >> 3U,

98 
	mkMuRxFuŒ
 = 
kMuRxFuŒ0
 |

99 
kMuRxFuŒ1
 |

100 
kMuRxFuŒ2
 |

101 
kMuRxFuŒ3
,

103 
	mkMuGíI¡0
 = 
MU_SR_GIP0_MASK
,

104 
	mkMuGíI¡1
 = 
MU_SR_GIP0_MASK
 >> 1U,

105 
	mkMuGíI¡2
 = 
MU_SR_GIP0_MASK
 >> 2U,

106 
	mkMuGíI¡3
 = 
MU_SR_GIP0_MASK
 >> 3U,

107 
	mkMuGíI¡
 = 
kMuGíI¡0
 |

108 
kMuGíI¡1
 |

109 
kMuGíI¡2
 |

110 
kMuGíI¡3
,

112 
	mkMuSètusAŒ
 = 
kMuTxEm±y
 |

113 
kMuRxFuŒ
 |

114 
kMuGíI¡
,

116 } 
	tmu_msg_°©us_t
;

119 
	e_mu_powî_mode


121 
	mkMuPowîModeRun
 = 0x00U,

122 
	mkMuPowîModeWaô
 = 0x01U,

123 
	mkMuPowîModeSt›
 = 0x02U,

124 
	mkMuPowîModeDsm
 = 0x03U,

125 } 
	tmu_powî_mode_t
;

131 #i‡
deföed
(
__˝lu•lus
)

145 
ölöe
 
MU_Inô
(
MU_Ty≥
 * 
ba£
)

148 
ba£
->
CR
 &~(
MU_CR_GIEn_MASK
 | 
MU_CR_RIEn_MASK
 | 
MU_CR_TIEn_MASK
 | 
MU_CR_GIRn_MASK
 | 
MU_CR_Fn_MASK
);

170 
mu_°©us_t
 
MU_TrySídMsg
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ªgIndex
, uöt32_à
msg
);

181 
MU_SídMsg
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ªgIndex
, uöt32_à
msg
);

193 
ölöe
 
boﬁ
 
MU_IsTxEm±y
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ödex
)

195  (
boﬁ
)(
ba£
->
SR
 & (
MU_SR_TE0_MASK
 >> 
ödex
));

212 
ölöe
 
MU_E«bÀTxEm±yI¡
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ödex
)

214 
ba£
->
CR
 = (ba£->CR & ~ 
MU_CR_GIRn_MASK
)

215 | (
MU_CR_TIE0_MASK
>>
ödex
);

232 
ölöe
 
MU_DißbÀTxEm±yI¡
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ödex
)

234 
ba£
->
CR
 &~(
MU_CR_GIRn_MASK
 | (
MU_CR_TIE0_MASK
>>
ödex
));

256 
mu_°©us_t
 
MU_TryRe˚iveMsg
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ªgIndex
, uöt32_à*
msg
);

267 
MU_Re˚iveMsg
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ªgIndex
, uöt32_à*
msg
);

279 
ölöe
 
boﬁ
 
MU_IsRxFuŒ
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ödex
)

281  (
boﬁ
)(
ba£
->
SR
 & (
MU_SR_RF0_MASK
 >> 
ödex
));

298 
ölöe
 
MU_E«bÀRxFuŒI¡
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ödex
)

300 
ba£
->
CR
 = (ba£->CR & ~
MU_CR_GIRn_MASK
)

301 | (
MU_CR_RIE0_MASK
>>
ödex
);

318 
ölöe
 
MU_DißbÀRxFuŒI¡
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ödex
)

320 
ba£
->
CR
 &~(
MU_CR_GIRn_MASK
 | (
MU_CR_RIE0_MASK
>>
ödex
));

344 
ölöe
 
MU_E«bÀGíîÆI¡
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ödex
)

346 
ba£
->
CR
 = (ba£->CR & ~
MU_CR_GIRn_MASK
)

347 | (
MU_CR_GIE0_MASK
>>
ödex
);

364 
ölöe
 
MU_DißbÀGíîÆI¡
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ödex
)

366 
ba£
->
CR
 &~(
MU_CR_GIRn_MASK
 | (
MU_CR_GIE0_MASK
>>
ödex
));

379 
ölöe
 
boﬁ
 
MU_IsGíîÆI¡Pídög
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ödex
)

381  (
boﬁ
)(
ba£
->
SR
 & (
MU_SR_GIP0_MASK
 >> 
ödex
));

392 
ölöe
 
MU_CÀ¨GíîÆI¡Pídög
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ödex
)

394 
ba£
->
SR
 = (
MU_SR_GIP0_MASK
 >> 
ödex
);

413 
mu_°©us_t
 
MU_TriggîGíîÆI¡
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ödex
);

426 
ölöe
 
boﬁ
 
MU_IsGíîÆI¡Ac˚±ed
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ödex
)

428  !(
boﬁ
)(
ba£
->
CR
 & (
MU_CR_GIR0_MASK
 >> 
ödex
));

448 
mu_°©us_t
 
MU_TrySëFœgs
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
Êags
);

458 
MU_SëFœgs
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
Êags
);

471 
ölöe
 
boﬁ
 
MU_IsFœgPídög
(
MU_Ty≥
 * 
ba£
)

473  (
boﬁ
)(
ba£
->
SR
 & 
MU_SR_FUP_MASK
);

484 
ölöe
 
uöt32_t
 
MU_GëFœgs
(
MU_Ty≥
 * 
ba£
)

486  
ba£
->
SR
 & 
MU_SR_Fn_MASK
;

504 
ölöe
 
mu_powî_mode_t
 
MU_GëOthîC‹ePowîMode
(
MU_Ty≥
 * 
ba£
)

506  (
mu_powî_mode_t
)((
ba£
->
SR
 & 
MU_SR_PM_MASK
Ë>> 
MU_SR_PM_SHIFT
);

520 
ölöe
 
boﬁ
 
MU_IsEvítPídög
(
MU_Ty≥
 * 
ba£
)

522  (
boﬁ
)(
ba£
->
SR
 & 
MU_SR_EP_MASK
);

551 
ölöe
 
uöt32_t
 
MU_GëMsgSètus
(
MU_Ty≥
 * 
ba£
, uöt32_à
°©usToCheck
)

553  
ba£
->
SR
 & 
°©usToCheck
;

558 #i‡
deföed
(
__˝lu•lus
)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\rdc.h

31 #i‚de‡
__RDC_H__


32 
	#__RDC_H__


	)

34 
	~<°döt.h
>

35 
	~<°dboﬁ.h
>

36 
	~<as£π.h
>

37 
	~"devi˚_imx.h
"

52 #i‡
deföed
(
__˝lu•lus
)

67 
ölöe
 
uöt32_t
 
RDC_GëSñfDomaöID
(
RDC_Ty≥
 * 
ba£
)

69  (
ba£
->
STAT
 & 
RDC_STAT_DID_MASK
Ë>> 
RDC_STAT_DID_SHIFT
;

80 
ölöe
 
boﬁ
 
RDC_IsMemPowîed
(
RDC_Ty≥
 * 
ba£
)

82  (
boﬁ
)(
ba£
->
STAT
 & 
RDC_STAT_PDS_MASK
);

93 
ölöe
 
boﬁ
 
RDC_IsI¡Pídög
(
RDC_Ty≥
 * 
ba£
)

95  (
boﬁ
)(
ba£
->
INTSTAT
);

103 
ölöe
 
RDC_CÀ¨SètusFœg
(
RDC_Ty≥
 * 
ba£
)

105 
ba£
->
INTSTAT
 = 
RDC_INTSTAT_INT_MASK
;

116 
ölöe
 
RDC_SëI¡Cmd
(
RDC_Ty≥
 * 
ba£
, 
boﬁ
 
íabÀ
)

118 
ba£
->
INTCTRL
 = 
íabÀ
 ? 
RDC_INTCTRL_RCI_EN_MASK
 : 0;

136 
ölöe
 
RDC_SëDomaöID
(
RDC_Ty≥
 * 
ba£
, 
uöt32_t
 
mda
, uöt32_à
domaöId
, 
boﬁ
 
lock
)

138 
as£π
 (
domaöId
 <
RDC_MDA_DID_MASK
);

140 
ba£
->
MDA
[
mda
] = 
RDC_MDA_DID
(
domaöId
Ë| (
lock
 ? 
RDC_MDA_LCK_MASK
 : 0);

150 
ölöe
 
uöt32_t
 
RDC_GëDomaöID
(
RDC_Ty≥
 * 
ba£
, uöt32_à
mda
)

152  
ba£
->
MDA
[
mda
] & 
RDC_MDA_DID_MASK
;

164 
ölöe
 
RDC_SëPd≠Ac˚ss
(
RDC_Ty≥
 * 
ba£
, 
uöt32_t
 
pd≠
, 
uöt8_t
 
≥rm
, 
boﬁ
 
§eq
, boﬁ 
lock
)

166 
ba£
->
PDAP
[
pd≠
] = 
≥rm
 | (
§eq
 ? 
RDC_PDAP_SREQ_MASK
 : 0Ë| (
lock
 ? 
RDC_PDAP_LCK_MASK
 : 0);

176 
ölöe
 
uöt8_t
 
RDC_GëPd≠Ac˚ss
(
RDC_Ty≥
 * 
ba£
, 
uöt32_t
 
pd≠
)

178  
ba£
->
PDAP
[
pd≠
] & 0xFF;

190 
ölöe
 
boﬁ
 
RDC_IsPd≠Sem≠h‹eRequúed
(
RDC_Ty≥
 * 
ba£
, 
uöt32_t
 
pd≠
)

192  (
boﬁ
)(
ba£
->
PDAP
[
pd≠
] & 
RDC_PDAP_SREQ_MASK
);

206 
RDC_SëMrAc˚ss
(
RDC_Ty≥
 * 
ba£
, 
uöt32_t
 
mr
, uöt32_à
°¨tAddr
, uöt32_à
ídAddr
,

207 
uöt8_t
 
≥rm
, 
boﬁ
 
íabÀ
, boﬁ 
lock
);

218 
uöt8_t
 
RDC_GëMrAc˚ss
(
RDC_Ty≥
 * 
ba£
, 
uöt32_t
 
mr
, uöt32_à*
°¨tAddr
, uöt32_à*
ídAddr
);

230 
ölöe
 
boﬁ
 
RDC_IsMrE«bÀd
(
RDC_Ty≥
 * 
ba£
, 
uöt32_t
 
mr
)

232  (
boﬁ
)(
ba£
->
MR
[
mr
].
MRC
 & 
RDC_MRC_ENA_MASK
);

246 
boﬁ
 
RDC_GëViﬁ©i⁄Sètus
(
RDC_Ty≥
 * 
ba£
, 
uöt32_t
 
mr
, uöt32_à*
viﬁ©i⁄Addr
, uöt32_à*
viﬁ©i⁄Domaö
);

254 
ölöe
 
RDC_CÀ¨Viﬁ©i⁄Sètus
(
RDC_Ty≥
 * 
ba£
, 
uöt32_t
 
mr
)

256 
ba£
->
MR
[
mr
].
MRVS
 = 
RDC_MRVS_AD_MASK
;

261 #i‡
deföed
(
__˝lu•lus
)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\rdc_defs_imx6sx.h

31 #i‚de‡
__RDC_DEFS_IMX6SX__


32 
	#__RDC_DEFS_IMX6SX__


	)

44 
	e_rdc_mda


46 
	mrdcMdaA9L2Cache
 = 0U,

47 
	mrdcMdaM4
 = 1U,

48 
	mrdcMdaGpu
 = 2U,

49 
	mrdcMdaCsi1
 = 3U,

50 
	mrdcMdaCsi2
 = 4U,

51 
	mrdcMdaLcdif1
 = 5U,

52 
	mrdcMdaLcdif2
 = 6U,

53 
	mrdcMdaPxp
 = 7U,

54 
	mrdcMdaPcõCål
 = 8U,

55 
	mrdcMdaD≠
 = 9U,

56 
	mrdcMdaCØm
 = 10U,

57 
	mrdcMdaSdmaPîùh
 = 11U,

58 
	mrdcMdaSdmaBur°
 = 12U,

59 
	mrdcMdaApbhdma
 = 13U,

60 
	mrdcMdaRaw«nd
 = 14U,

61 
	mrdcMdaUsdhc1
 = 15U,

62 
	mrdcMdaUsdhc2
 = 16U,

63 
	mrdcMdaUsdhc3
 = 17U,

64 
	mrdcMdaUsdhc4
 = 18U,

65 
	mrdcMdaUsb
 = 19U,

66 
	mrdcMdaMlb
 = 20U,

67 
	mrdcMdaTe°P‹t
 = 21U,

68 
	mrdcMdaE√t1Tx
 = 22U,

69 
	mrdcMdaE√t1Rx
 = 23U,

70 
	mrdcMdaE√t2Tx
 = 24U,

71 
	mrdcMdaE√t2Rx
 = 25U,

72 
	mrdcMdaSdmaP‹t
 = 26U,

76 
	e_rdc_pd≠


78 
	mrdcPd≠Pwm1
 = 0U,

79 
	mrdcPd≠Pwm2
 = 1U,

80 
	mrdcPd≠Pwm3
 = 2U,

81 
	mrdcPd≠Pwm4
 = 3U,

82 
	mrdcPd≠C™1
 = 4U,

83 
	mrdcPd≠C™2
 = 5U,

84 
	mrdcPd≠G±
 = 6U,

85 
	mrdcPd≠Gpio1
 = 7U,

86 
	mrdcPd≠Gpio2
 = 8U,

87 
	mrdcPd≠Gpio3
 = 9U,

88 
	mrdcPd≠Gpio4
 = 10U,

89 
	mrdcPd≠Gpio5
 = 11U,

90 
	mrdcPd≠Gpio6
 = 12U,

91 
	mrdcPd≠Gpio7
 = 13U,

92 
	mrdcPd≠Kµ
 = 14U,

93 
	mrdcPd≠Wdog1
 = 15U,

94 
	mrdcPd≠Wdog2
 = 16U,

95 
	mrdcPd≠Ccm
 = 17U,

96 
	mrdcPd≠A«t›Dig
 = 18U,

97 
	mrdcPd≠SnvsHp
 = 19U,

98 
	mrdcPd≠Epô1
 = 20U,

99 
	mrdcPd≠Epô2
 = 21U,

100 
	mrdcPd≠Src
 = 22U,

101 
	mrdcPd≠Gpc
 = 23U,

102 
	mrdcPd≠Iomuxc
 = 24U,

103 
	mrdcPd≠IomuxcG¥
 = 25U,

104 
	mrdcPd≠C™fdC™1
 = 26U,

105 
	mrdcPd≠Sdma
 = 27U,

106 
	mrdcPd≠C™fdC™2
 = 28U,

107 
	mrdcPd≠RdcSema421
 = 29U,

108 
	mrdcPd≠RdcSema422
 = 30U,

109 
	mrdcPd≠Rdc
 = 31U,

110 
	mrdcPd≠AùsTz1GlobÆE«bÀ1
 = 32U,

111 
	mrdcPd≠AùsTz1GlobÆE«bÀ2
 = 33U,

112 
	mrdcPd≠Usb02hPl301
 = 34U,

113 
	mrdcPd≠Usb02hUsb
 = 35U,

114 
	mrdcPd≠E√t1
 = 36U,

115 
	mrdcPd≠Mlb2550
 = 37U,

116 
	mrdcPd≠Usdhc1
 = 38U,

117 
	mrdcPd≠Usdhc2
 = 39U,

118 
	mrdcPd≠Usdhc3
 = 40U,

119 
	mrdcPd≠Usdhc4
 = 41U,

120 
	mrdcPd≠I2c1
 = 42U,

121 
	mrdcPd≠I2c2
 = 43U,

122 
	mrdcPd≠I2c3
 = 44U,

123 
	mrdcPd≠Rom˝
 = 45U,

124 
	mrdcPd≠Mmdc
 = 46U,

125 
	mrdcPd≠E√t2
 = 47U,

126 
	mrdcPd≠Eim
 = 48U,

127 
	mrdcPd≠OcŸpCålWøµî
 = 49U,

128 
	mrdcPd≠Csu
 = 50U,

129 
	mrdcPd≠Pîfm⁄1
 = 51U,

130 
	mrdcPd≠Pîfm⁄2
 = 52U,

131 
	mrdcPd≠AxiM⁄
 = 53U,

132 
	mrdcPd≠Tzasc1
 = 54U,

133 
	mrdcPd≠Sai1
 = 55U,

134 
	mrdcPd≠Audmux
 = 56U,

135 
	mrdcPd≠Sai2
 = 57U,

136 
	mrdcPd≠Q•i1
 = 58U,

137 
	mrdcPd≠Q•i2
 = 59U,

138 
	mrdcPd≠U¨t2
 = 60U,

139 
	mrdcPd≠U¨t3
 = 61U,

140 
	mrdcPd≠U¨t4
 = 62U,

141 
	mrdcPd≠U¨t5
 = 63U,

142 
	mrdcPd≠I2c4
 = 64U,

143 
	mrdcPd≠Qosc
 = 65U,

144 
	mrdcPd≠CØm
 = 66U,

145 
	mrdcPd≠D≠
 = 67U,

146 
	mrdcPd≠Adc1
 = 68U,

147 
	mrdcPd≠Adc2
 = 69U,

148 
	mrdcPd≠Wdog3
 = 70U,

149 
	mrdcPd≠Ec•i5
 = 71U,

150 
	mrdcPd≠Sema4
 = 72U,

151 
	mrdcPd≠MuA
 = 73U,

152 
	mrdcPd≠C™fdCpu
 = 74U,

153 
	mrdcPd≠MuB
 = 75U,

154 
	mrdcPd≠U¨t6
 = 76U,

155 
	mrdcPd≠Pwm5
 = 77U,

156 
	mrdcPd≠Pwm6
 = 78U,

157 
	mrdcPd≠Pwm7
 = 79U,

158 
	mrdcPd≠Pwm8
 = 80U,

159 
	mrdcPd≠AùsTz3GlobÆE«bÀ0
 = 81U,

160 
	mrdcPd≠AùsTz3GlobÆE«bÀ1
 = 82U,

161 
	mrdcPd≠Spdif
 = 84U,

162 
	mrdcPd≠Ec•i1
 = 85U,

163 
	mrdcPd≠Ec•i2
 = 86U,

164 
	mrdcPd≠Ec•i3
 = 87U,

165 
	mrdcPd≠Ec•i4
 = 88U,

166 
	mrdcPd≠U¨t1
 = 91U,

167 
	mrdcPd≠Eßi
 = 92U,

168 
	mrdcPd≠Ssi1
 = 93U,

169 
	mrdcPd≠Ssi2
 = 94U,

170 
	mrdcPd≠Ssi3
 = 95U,

171 
	mrdcPd≠A§c
 = 96U,

172 
	mrdcPd≠SpbaMaMegamix
 = 98U,

173 
	mrdcPd≠Gis
 = 99U,

174 
	mrdcPd≠Dcic1
 = 100U,

175 
	mrdcPd≠Dcic2
 = 101U,

176 
	mrdcPd≠Csi1
 = 102U,

177 
	mrdcPd≠Pxp
 = 103U,

178 
	mrdcPd≠Csi2
 = 104U,

179 
	mrdcPd≠Lcdif1
 = 105U,

180 
	mrdcPd≠Lcdif2
 = 106U,

181 
	mrdcPd≠Vadc
 = 107U,

182 
	mrdcPd≠Vdec
 = 108U,

183 
	mrdcPd≠SpDi•œymix
 = 109U,

187 
	e_rdc_mr


189 
	mrdcMrMmdc
 = 0U,

190 
	mrdcMrMmdcLa°
 = 7U,

191 
	mrdcMrQ•i1
 = 8U,

192 
	mrdcMrQ•i1La°
 = 15U,

193 
	mrdcMrQ•i2
 = 16U,

194 
	mrdcMrQ•i2La°
 = 23U,

195 
	mrdcMrWeim
 = 24U,

196 
	mrdcMrWeimLa°
 = 31U,

197 
	mrdcMrPcõ
 = 32U,

198 
	mrdcMrPcõLa°
 = 39U,

199 
	mrdcMrO¸am
 = 40U,

200 
	mrdcMrO¸amLa°
 = 44U,

201 
	mrdcMrO¸amS
 = 45U,

202 
	mrdcMrO¸amSLa°
 = 49U,

203 
	mrdcMrO¸amL2
 = 50U,

204 
	mrdcMrO¸amL2La°
 = 54U,

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\rdc_semaphore.h

31 #i‚de‡
__RDC_SEMAPHORE_H__


32 
	#__RDC_SEMAPHORE_H__


	)

34 
	~<°döt.h
>

35 
	~<°dboﬁ.h
>

36 
	~"devi˚_imx.h
"

46 
	#RDC_SEMAPHORE_MASTER_NONE
 (0xFF)

	)

49 
	e_rdc_£m≠h‹e_°©us


51 
	m°©usRdcSem≠h‹eSuc˚ss
 = 0U,

52 
	m°©usRdcSem≠h‹eBusy
 = 1U,

53 } 
	trdc_£m≠h‹e_°©us_t
;

59 #i‡
deföed
(
__˝lu•lus
)

75 
rdc_£m≠h‹e_°©us_t
 
RDC_SEMAPHORE_TryLock
(
uöt32_t
 
pd≠
);

82 
RDC_SEMAPHORE_Lock
(
uöt32_t
 
pd≠
);

89 
RDC_SEMAPHORE_U∆ock
(
uöt32_t
 
pd≠
);

97 
uöt32_t
 
RDC_SEMAPHORE_GëLockDomaöID
(uöt32_à
pd≠
);

106 
uöt32_t
 
RDC_SEMAPHORE_GëLockMa°î
(uöt32_à
pd≠
);

120 
RDC_SEMAPHORE_Re£t
(
uöt32_t
 
pd≠
);

127 
RDC_SEMAPHORE_Re£tAŒ
(
RDC_SEMAPHORE_Ty≥
 *
ba£
);

131 #i‡
deföed
(
__˝lu•lus
)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\sema4.h

31 #i‚de‡
__SEMA4_H__


32 
	#__SEMA4_H__


	)

34 
	~<°döt.h
>

35 
	~<°dboﬁ.h
>

36 
	~"devi˚_imx.h
"

46 
	#SEMA4_PROCESSOR_NONE
 (0xFF)

	)

47 
	#SEMA4_GATE_STATUS_FLAG
(
g©e
Ë((
uöt16_t
)(1U << ((g©eË^ 7)))

	)

50 
	e_£ma4_°©us_Êag


52 
	m£ma4SètusFœgG©e0
 = 1U << 7,

53 
	m£ma4SètusFœgG©e1
 = 1U << 6,

54 
	m£ma4SètusFœgG©e2
 = 1U << 5,

55 
	m£ma4SètusFœgG©e3
 = 1U << 4,

56 
	m£ma4SètusFœgG©e4
 = 1U << 3,

57 
	m£ma4SètusFœgG©e5
 = 1U << 2,

58 
	m£ma4SètusFœgG©e6
 = 1U << 1,

59 
	m£ma4SètusFœgG©e7
 = 1U << 0,

60 
	m£ma4SètusFœgG©e8
 = 1U << 15,

61 
	m£ma4SètusFœgG©e9
 = 1U << 14,

62 
	m£ma4SètusFœgG©e10
 = 1U << 13,

63 
	m£ma4SètusFœgG©e11
 = 1U << 12,

64 
	m£ma4SètusFœgG©e12
 = 1U << 11,

65 
	m£ma4SètusFœgG©e13
 = 1U << 10,

66 
	m£ma4SètusFœgG©e14
 = 1U << 9,

67 
	m£ma4SètusFœgG©e15
 = 1U << 8,

71 
	e_£ma4_ª£t_°©e


73 
	m£ma4Re£tIdÀ
 = 0U,

74 
	m£ma4Re£tMid
 = 1U,

75 
	m£ma4Re£tFöished
 = 2U,

79 
	e_£ma4_°©us


81 
	m°©usSema4Suc˚ss
 = 0U,

82 
	m°©usSema4Busy
 = 1U,

83 } 
	t£ma4_°©us_t
;

89 #i‡
deföed
(
__˝lu•lus
)

106 
£ma4_°©us_t
 
SEMA4_TryLock
(
SEMA4_Ty≥
 *
ba£
, 
uöt32_t
 
g©eIndex
);

114 
SEMA4_Lock
(
SEMA4_Ty≥
 *
ba£
, 
uöt32_t
 
g©eIndex
);

122 
SEMA4_U∆ock
(
SEMA4_Ty≥
 *
ba£
, 
uöt32_t
 
g©eIndex
);

132 
uöt32_t
 
SEMA4_GëLockPro˚ss‹
(
SEMA4_Ty≥
 *
ba£
, uöt32_à
g©eIndex
);

147 
SEMA4_Re£tG©e
(
SEMA4_Ty≥
 *
ba£
, 
uöt32_t
 
g©eIndex
);

154 
SEMA4_Re£tAŒG©es
(
SEMA4_Ty≥
 *
ba£
);

164 
ölöe
 
uöt8_t
 
SEMA4_GëG©eRe£tBus
(
SEMA4_Ty≥
 *
ba£
)

166  (
uöt8_t
)(
ba£
->
RSTGT
 & 7);

177 
ölöe
 
uöt8_t
 
SEMA4_GëG©eRe£tSèã
(
SEMA4_Ty≥
 *
ba£
)

179  (
uöt8_t
)((
ba£
->
RSTGT
 & 0x30) >> 4);

188 
SEMA4_Re£tNŸifiˇti⁄
(
SEMA4_Ty≥
 *
ba£
, 
uöt32_t
 
g©eIndex
);

195 
SEMA4_Re£tAŒNŸifiˇti⁄s
(
SEMA4_Ty≥
 *
ba£
);

205 
ölöe
 
uöt8_t
 
SEMA4_GëNŸifiˇti⁄Re£tBus
(
SEMA4_Ty≥
 *
ba£
)

207  (
uöt8_t
)(
ba£
->
RSTNTF
 & 7);

218 
ölöe
 
uöt8_t
 
SEMA4_GëNŸifiˇti⁄Re£tSèã
(
SEMA4_Ty≥
 *
ba£
)

220  (
uöt8_t
)((
ba£
->
RSTNTF
 & 0x30) >> 4);

238 
ölöe
 
uöt16_t
 
SEMA4_GëSètusFœg
(
SEMA4_Ty≥
 * 
ba£
, uöt16_à
Êags
)

240  
ba£
->
CPnNTF
[
SEMA4_PROCESSOR_SELF
].
NTF
 & 
Êags
;

252 
SEMA4_SëI¡Cmd
(
SEMA4_Ty≥
 * 
ba£
, 
uöt16_t
 
ötMask
, 
boﬁ
 
íabÀ
);

262 
ölöe
 
uöt16_t
 
SEMA4_GëI¡E«bÀd
(
SEMA4_Ty≥
 * 
ba£
, uöt16_à
Êags
)

264  
ba£
->
CPnINE
[
SEMA4_PROCESSOR_SELF
].
INE
 & 
Êags
;

270 #i‡
deföed
(
__˝lu•lus
)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\uart_imx.h

31 #i‚de‡
__UART_IMX_H__


32 
	#__UART_IMX_H__


	)

34 
	~<°döt.h
>

35 
	~<°dboﬁ.h
>

36 
	~<as£π.h
>

37 
	~"devi˚_imx.h
"

49 
	s_u¨t_öô_c⁄fig


51 
uöt32_t
 
	m˛ockR©e
;

52 
uöt32_t
 
	mbaudR©e
;

53 
uöt32_t
 
	mw‹dLígth
;

54 
uöt32_t
 
	m°›BôNum
;

55 
uöt32_t
 
	m∑rôy
;

56 
uöt32_t
 
	mdúe˘i⁄
;

57 } 
	tu¨t_öô_c⁄fig_t
;

60 
	e_u¨t_w‹d_Àngth


62 
	mu¨tW‹dLígth7Bôs
 = 0x0,

63 
	mu¨tW‹dLígth8Bôs
 = 
UART_UCR2_WS_MASK
,

67 
	e_u¨t_°›_bô_num


69 
	mu¨tSt›BôNumO√
 = 0x0,

70 
	mu¨tSt›BôNumTwo
 = 
UART_UCR2_STPB_MASK
,

74 
	e_u¨t_∑πôy_mode


76 
	mu¨tP¨ôyDißbÀ
 = 0x0,

77 
	mu¨tP¨ôyEví
 = 
UART_UCR2_PREN_MASK
,

78 
	mu¨tP¨ôyOdd
 = 
UART_UCR2_PREN_MASK
 | 
UART_UCR2_PROE_MASK
,

82 
	e_u¨t_dúe˘i⁄_mode


84 
	mu¨tDúe˘i⁄DißbÀ
 = 0x0,

85 
	mu¨tDúe˘i⁄Tx
 = 
UART_UCR2_TXEN_MASK
,

86 
	mu¨tDúe˘i⁄Rx
 = 
UART_UCR2_RXEN_MASK
,

87 
	mu¨tDúe˘i⁄TxRx
 = 
UART_UCR2_TXEN_MASK
 | 
UART_UCR2_RXEN_MASK
,

91 
	e_u¨t_öãºu±


93 
	mu¨tI¡AutoBaud
 = 0x0080000F,

94 
	mu¨tI¡TxRódy
 = 0x0080000D,

95 
	mu¨tI¡IdÀ
 = 0x0080000C,

96 
	mu¨tI¡RxRódy
 = 0x00800009,

97 
	mu¨tI¡TxEm±y
 = 0x00800006,

98 
	mu¨tI¡RtsDñè
 = 0x00800005,

99 
	mu¨tI¡Esˇ≥
 = 0x0084000F,

100 
	mu¨tI¡Rts
 = 0x00840004,

101 
	mu¨tI¡AgögTimî
 = 0x00840003,

102 
	mu¨tI¡Då
 = 0x0088000D,

103 
	mu¨tI¡P¨ôyEº‹
 = 0x0088000C,

104 
	mu¨tI¡FømeEº‹
 = 0x0088000B,

105 
	mu¨tI¡Dcd
 = 0x00880009,

106 
	mu¨tI¡Ri
 = 0x00880008,

107 
	mu¨tI¡RxDs
 = 0x00880006,

108 
	mu¨tI¡tAúWake
 = 0x00880005,

109 
	mu¨tI¡Awake
 = 0x00880004,

110 
	mu¨tI¡DåDñè
 = 0x00880003,

111 
	mu¨tI¡AutoBaudC¡
 = 0x00880000,

112 
	mu¨tI¡Ir
 = 0x008C0008,

113 
	mu¨tI¡Wake
 = 0x008C0007,

114 
	mu¨tI¡TxCom∂ëe
 = 0x008C0003,

115 
	mu¨tI¡BªakDëe˘
 = 0x008C0002,

116 
	mu¨tI¡RxOvîrun
 = 0x008C0001,

117 
	mu¨tI¡RxD©aRódy
 = 0x008C0000,

118 
	mu¨tI¡Rs485SœveAddrM©ch
 = 0x00B80003,

122 
	e_u¨t_°©us_Êag


124 
	mu¨tSètusRxCh¨Ródy
 = 0x0000000F,

125 
	mu¨tSètusRxEº‹
 = 0x0000000E,

126 
	mu¨tSètusRxOvîrunEº‹
 = 0x0000000D,

127 
	mu¨tSètusRxFømeEº‹
 = 0x0000000C,

128 
	mu¨tSètusRxBªakDëe˘
 = 0x0000000B,

129 
	mu¨tSètusRxP¨ôyEº‹
 = 0x0000000A,

130 
	mu¨tSètusP¨ôyEº‹
 = 0x0094000F,

131 
	mu¨tSètusRtsSètus
 = 0x0094000E,

132 
	mu¨tSètusTxRódy
 = 0x0094000D,

133 
	mu¨tSètusRtsDñè
 = 0x0094000C,

134 
	mu¨tSètusEsˇ≥
 = 0x0094000B,

135 
	mu¨tSètusFømeEº‹
 = 0x0094000A,

136 
	mu¨tSètusRxRódy
 = 0x00940009,

137 
	mu¨tSètusAgögTimî
 = 0x00940008,

138 
	mu¨tSètusDåDñè
 = 0x00940007,

139 
	mu¨tSètusRxDs
 = 0x00940006,

140 
	mu¨tSètu°AúWake
 = 0x00940005,

141 
	mu¨tSètusAwake
 = 0x00940004,

142 
	mu¨tSètusRs485SœveAddrM©ch
 = 0x00940003,

143 
	mu¨tSètusAutoBaud
 = 0x0098000F,

144 
	mu¨tSètusTxEm±y
 = 0x0098000E,

145 
	mu¨tSètusDå
 = 0x0098000D,

146 
	mu¨tSètusIdÀ
 = 0x0098000C,

147 
	mu¨tSètusAutoBaudC¡St›
 = 0x0098000B,

148 
	mu¨tSètusRiDñè
 = 0x0098000A,

149 
	mu¨tSètusRi
 = 0x00980009,

150 
	mu¨tSètusIr
 = 0x00980008,

151 
	mu¨tSètusWake
 = 0x00980007,

152 
	mu¨tSètusDcdDñè
 = 0x00980006,

153 
	mu¨tSètusDcd
 = 0x00980005,

154 
	mu¨tSètusRts
 = 0x00980004,

155 
	mu¨tSètusTxCom∂ëe
 = 0x00980003,

156 
	mu¨tSètusBªakDëe˘
 = 0x00980002,

157 
	mu¨tSètusRxOvîrun
 = 0x00980001,

158 
	mu¨tSètusRxD©aRódy
 = 0x00980000,

162 
	e_u¨t_dma


164 
	mu¨tDmaRxRódy
 = 0x00800008,

165 
	mu¨tDmaTxRódy
 = 0x00800003,

166 
	mu¨tDmaAgögTimî
 = 0x00800002,

167 
	mu¨tDmaIdÀ
 = 0x008C0006,

171 
	e_u¨t_πs_öt_åiggî_edge


173 
	mu¨tRtsTriggîEdgeRisög
 = 
UART_UCR2_RTEC
(0),

174 
	mu¨tRtsTriggîEdgeFÆlög
 = 
UART_UCR2_RTEC
(1),

175 
	mu¨tRtsTriggîEdgeBŸh
 = 
UART_UCR2_RTEC
(2),

179 
	e_u¨t_modem_mode


181 
	mu¨tModemModeD˚
 = 0,

182 
	mu¨tModemModeDã
 = 
UART_UFCR_DCEDTE_MASK
,

186 
	e_u¨t_då_öt_åiggî_edge


188 
	mu¨tDåTriggîEdgeRisög
 = 
UART_UCR3_DPEC
(0),

189 
	mu¨tDåTriggîEdgeFÆlög
 = 
UART_UCR3_DPEC
(1),

190 
	mu¨tDåTriggîEdgeBŸh
 = 
UART_UCR3_DPEC
(2),

194 
	e_u¨t_úda_vŸe_˛ock


196 
	mu¨tIrdaVŸeClockSam∂ög
 = 0x0,

197 
	mu¨tIrdaVŸeClockRe„ªn˚
 = 
UART_UCR4_IRSC_MASK
,

201 
	e_u¨t_rx_idÀ_c⁄dôi⁄


203 
	mu¨tRxIdÀM‹eTh™4Fømes
 = 
UART_UCR1_ICD
(0),

204 
	mu¨tRxIdÀM‹eTh™8Fømes
 = 
UART_UCR1_ICD
(1),

205 
	mu¨tRxIdÀM‹eTh™16Fømes
 = 
UART_UCR1_ICD
(2),

206 
	mu¨tRxIdÀM‹eTh™32Fømes
 = 
UART_UCR1_ICD
(3),

213 #i‡
deföed
(
__˝lu•lus
)

228 
UART_Inô
(
UART_Ty≥
* 
ba£
, c⁄° 
u¨t_öô_c⁄fig_t
* 
öôC⁄fig
);

235 
UART_Deöô
(
UART_Ty≥
* 
ba£
);

242 
ölöe
 
UART_E«bÀ
(
UART_Ty≥
* 
ba£
)

244 
UART_UCR1_REG
(
ba£
Ë|
UART_UCR1_UARTEN_MASK
;

252 
ölöe
 
UART_DißbÀ
(
UART_Ty≥
* 
ba£
)

254 
UART_UCR1_REG
(
ba£
Ë&~
UART_UCR1_UARTEN_MASK
;

264 
UART_SëBaudR©e
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
˛ockR©e
, uöt32_à
baudR©e
);

272 
ölöe
 
UART_SëDúMode
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
dúe˘i⁄
)

274 
as£π
((
dúe˘i⁄
 & 
u¨tDúe˘i⁄Tx
Ë|| (dúe˘i⁄ & 
u¨tDúe˘i⁄Rx
));

276 
UART_UCR2_REG
(
ba£
Ë(UART_UCR2_REG(ba£Ë& ~(
UART_UCR2_RXEN_MASK
 | 
UART_UCR2_TXEN_MASK
)Ë| 
dúe˘i⁄
;

288 
ölöe
 
UART_SëRxIdÀC⁄dôi⁄
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
idÀC⁄dôi⁄
)

290 
as£π
(
idÀC⁄dôi⁄
 <
u¨tRxIdÀM‹eTh™32Fømes
);

292 
UART_UCR1_REG
(
ba£
Ë(UART_UCR1_REG(ba£Ë& ~
UART_UCR1_ICD_MASK
Ë| 
idÀC⁄dôi⁄
;

303 
UART_SëInvîtCmd
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
dúe˘i⁄
, 
boﬁ
 
övît
);

320 
UART_SëDozeMode
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

330 
UART_SëLowPowîMode
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

346 
ölöe
 
UART_Putch¨
(
UART_Ty≥
* 
ba£
, 
uöt8_t
 
d©a
)

348 
UART_UTXD_REG
(
ba£
Ë(
d©a
 & 
UART_UTXD_TX_DATA_MASK
);

358 
ölöe
 
uöt8_t
 
UART_Gëch¨
(
UART_Ty≥
* 
ba£
)

360  (
uöt8_t
)(
UART_URXD_REG
(
ba£
Ë& 
UART_URXD_RX_DATA_MASK
);

381 
UART_SëI¡Cmd
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
ötSour˚
, 
boﬁ
 
íabÀ
);

392 
boﬁ
 
UART_GëSètusFœg
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
Êag
);

402 
UART_CÀ¨SètusFœg
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
Êag
);

422 
UART_SëDmaCmd
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
dmaSour˚
, 
boﬁ
 
íabÀ
);

439 
ölöe
 
UART_SëTxFifoW©îm¨k
(
UART_Ty≥
* 
ba£
, 
uöt8_t
 
w©îm¨k
)

441 
as£π
((
w©îm¨k
 >= 2) && (watermark <= 32));

442 
UART_UFCR_REG
(
ba£
Ë(UART_UFCR_REG(ba£Ë& ~
UART_UFCR_TXTL_MASK
Ë| 
UART_UFCR_TXTL
(
w©îm¨k
);

453 
ölöe
 
UART_SëRxFifoW©îm¨k
(
UART_Ty≥
* 
ba£
, 
uöt8_t
 
w©îm¨k
)

455 
as£π
(
w©îm¨k
 <= 32);

456 
UART_UFCR_REG
(
ba£
Ë(UART_UFCR_REG(ba£Ë& ~
UART_UFCR_RXTL_MASK
Ë| 
UART_UFCR_RXTL
(
w©îm¨k
);

475 
UART_SëRtsFlowCålCmd
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

485 
ölöe
 
UART_SëRtsI¡TriggîEdge
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
åiggîEdge
)

487 
as£π
((
åiggîEdge
 =
u¨tRtsTriggîEdgeRisög
) || \

488 (
åiggîEdge
 =
u¨tRtsTriggîEdgeFÆlög
) || \

489 (
åiggîEdge
 =
u¨tRtsTriggîEdgeBŸh
));

491 
UART_UCR2_REG
(
ba£
Ë(UART_UCR2_REG(ba£Ë& ~
UART_UCR2_RTEC_MASK
Ë| 
åiggîEdge
;

506 
UART_SëCtsFlowCålCmd
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

519 
UART_SëCtsPöLevñ
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
a˘ive
);

529 
ölöe
 
UART_SëCtsTriggîLevñ
(
UART_Ty≥
* 
ba£
, 
uöt8_t
 
åiggîLevñ
)

531 
as£π
(
åiggîLevñ
 <= 32);

532 
UART_UCR4_REG
(
ba£
Ë(UART_UCR4_REG(ba£Ë& ~
UART_UCR4_CTSTL_MASK
Ë| 
UART_UCR4_CTSTL
(
åiggîLevñ
);

542 
UART_SëModemMode
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
mode
);

552 
ölöe
 
UART_SëDåI¡TriggîEdge
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
åiggîEdge
)

554 
as£π
((
åiggîEdge
 =
u¨tDåTriggîEdgeRisög
) || \

555 (
åiggîEdge
 =
u¨tDåTriggîEdgeFÆlög
) || \

556 (
åiggîEdge
 =
u¨tDåTriggîEdgeBŸh
));

558 
UART_UCR3_REG
(
ba£
Ë(UART_UCR3_REG(ba£Ë& ~
UART_UCR3_DPEC_MASK
Ë| 
åiggîEdge
;

570 
UART_SëDåPöLevñ
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
a˘ive
);

581 
UART_SëDcdPöLevñ
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
a˘ive
);

592 
UART_SëRiPöLevñ
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
a˘ive
);

608 
UAER_Putch¨9
(
UART_Ty≥
* 
ba£
, 
uöt16_t
 
d©a
);

617 
uöt16_t
 
UAER_Gëch¨9
(
UART_Ty≥
* 
ba£
);

628 
UART_SëMu…idr›Mode
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

639 
UART_SëSœveAddªssDëe˘Cmd
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

648 
ölöe
 
UART_SëSœveAddªss
(
UART_Ty≥
* 
ba£
, 
uöt8_t
 
¶aveAddªss
)

650 
UART_UMCR_REG
(
ba£
Ë(UART_UMCR_REG(ba£Ë& ~
UART_UMCR_SLADDR_MASK
) | \

651 
UART_UMCR_SLADDR
(
¶aveAddªss
);

670 
UART_SëIrDACmd
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

680 
UART_SëIrDAVŸeClock
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
vŸeClock
);

698 
UART_SëAutoBaudR©eCmd
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

708 
ölöe
 
uöt16_t
 
UART_RódBaudR©eCou¡
(
UART_Ty≥
* 
ba£
)

710  (
uöt16_t
)(
UART_UBRC_REG
(
ba£
Ë& 
UART_UBRC_BCNT_MASK
);

723 
UART_SídBªakCh¨
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
a˘ive
);

734 
UART_SëEsˇ≥De˚˘Cmd
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
);

743 
ölöe
 
UART_SëEsˇ≥Ch¨
(
UART_Ty≥
* 
ba£
, 
uöt8_t
 
esˇ≥Ch¨
)

745 
UART_UESC_REG
(
ba£
Ë(UART_UESC_REG(ba£Ë& ~
UART_UESC_ESC_CHAR_MASK
) | \

746 
UART_UESC_ESC_CHAR
(
esˇ≥Ch¨
);

756 
ölöe
 
UART_SëEsˇ≥TimîI¡îvÆ
(
UART_Ty≥
* 
ba£
, 
uöt16_t
 
timîI¡îvÆ
)

758 
as£π
(
timîI¡îvÆ
 <= 0xFFF);

759 
UART_UTIM_REG
(
ba£
Ë(UART_UTIM_REG(ba£Ë& ~
UART_UTIM_TIM_MASK
) | \

760 
UART_UTIM_TIM
(
timîI¡îvÆ
);

765 #ifde‡
__˝lu•lus


	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\wdog_imx.h

31 #i‚de‡
__WDOG_IMX_H__


32 
	#__WDOG_IMX_H__


	)

34 
	~<°döt.h
>

35 
	~<°dboﬁ.h
>

36 
	~<as£π.h
>

37 
	~"devi˚_imx.h
"

48 
	s_wdog_öô_c⁄fig


50 
boﬁ
 
	mwdw
;

51 
boﬁ
 
	mwdt
;

52 
boﬁ
 
	mwdbg
;

53 
boﬁ
 
	mwdz°
;

54 } 
	twdog_öô_c⁄fig_t
;

60 #i‡
deföed
(
__˝lu•lus
)

75 
ölöe
 
WDOG_Inô
(
WDOG_Ty≥
 *
ba£
, c⁄° 
wdog_öô_c⁄fig_t
 *
öôC⁄fig
)

77 
ba£
->
WCR
 |(
öôC⁄fig
->
wdw
 ? 
WDOG_WCR_WDW_MASK
 : 0) |

78 (
öôC⁄fig
->
wdt
 ? 
WDOG_WCR_WDT_MASK
 : 0) |

79 (
öôC⁄fig
->
wdbg
 ? 
WDOG_WCR_WDBG_MASK
 : 0) |

80 (
öôC⁄fig
->
wdz°
 ? 
WDOG_WCR_WDZST_MASK
 : 0);

89 
WDOG_E«bÀ
(
WDOG_Ty≥
 *
ba£
, 
uöt8_t
 
timeout
);

102 
WDOG_Re£t
(
WDOG_Ty≥
 *
ba£
, 
boﬁ
 
wda
, boﬁ 
§s
);

109 
WDOG_Re‰esh
(
WDOG_Ty≥
 *
ba£
);

116 
ölöe
 
WDOG_DißbÀPowîdown
(
WDOG_Ty≥
 *
ba£
)

118 
ba£
->
WMCR
 &~
WDOG_WMCR_PDE_MASK
;

134 
ölöe
 
WDOG_E«bÀI¡
(
WDOG_Ty≥
 *
ba£
, 
uöt8_t
 
time
)

136 
ba£
->
WICR
 = 
WDOG_WICR_WIE_MASK
 | 
WDOG_WICR_WICT
(
time
);

147 
ölöe
 
boﬁ
 
WDOG_IsI¡Pídög
(
WDOG_Ty≥
 *
ba£
)

149  (
boﬁ
)(
ba£
->
WICR
 & 
WDOG_WICR_WTIS_MASK
);

157 
ölöe
 
WDOG_CÀ¨SètusFœg
(
WDOG_Ty≥
 *
ba£
)

159 
ba£
->
WICR
 |
WDOG_WICR_WTIS_MASK
;

164 #i‡
deföed
(
__˝lu•lus
)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\adc_imx6sx.c

31 
	~"adc_imx6sx.h
"

44 
	$ADC_Inô
(
ADC_Ty≥
* 
ba£
, c⁄° 
adc_öô_c⁄fig_t
* 
öôC⁄fig
)

46 
	`as£π
(
öôC⁄fig
);

49 
	`ADC_Deöô
(
ba£
);

52 i‡(
öôC⁄fig
->
avîageNumbî
 !
adcAvgNumN⁄e
)

54 
	`ADC_GC_REG
(
ba£
Ë|
ADC_GC_AVGE_MASK
;

55 
	`ADC_CFG_REG
(
ba£
Ë|
	`ADC_CFG_AVGS
(
öôC⁄fig
->
avîageNumbî
);

59 
	`ADC_CFG_REG
(
ba£
Ë|
	`ADC_CFG_MODE
(
öôC⁄fig
->
ªsﬁuti⁄Mode
);

62 
	`ADC_SëClockSour˚
(
ba£
, 
öôC⁄fig
->
˛ockSour˚
, inôC⁄fig->
divideR©io
);

63 
	}
}

72 
	$ADC_Deöô
(
ADC_Ty≥
* 
ba£
)

75 
	`ADC_HC0_REG
(
ba£
Ë
ADC_HC0_ADCH_MASK
;

76 
	`ADC_HC1_REG
(
ba£
Ë
ADC_HC1_ADCH_MASK
;

77 
	`ADC_R0_REG
(
ba£
) = 0x0;

78 
	`ADC_R1_REG
(
ba£
) = 0x0;

79 
	`ADC_CFG_REG
(
ba£
Ë
	`ADC_CFG_ADSTS
(2);

80 
	`ADC_GC_REG
(
ba£
) = 0x0;

81 
	`ADC_GS_REG
(
ba£
Ë
ADC_GS_CALF_MASK
 | 
ADC_GS_AWKST_MASK
;

82 
	`ADC_CV_REG
(
ba£
) = 0x0;

83 
	`ADC_OFS_REG
(
ba£
) = 0x0;

84 
	`ADC_CAL_REG
(
ba£
) = 0x0;

85 
	}
}

93 
	$ADC_SëC⁄vîtResu…Ovîwrôe
(
ADC_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

95 if(
íabÀ
)

96 
	`ADC_CFG_REG
(
ba£
Ë|
ADC_CFG_OVWREN_MASK
;

98 
	`ADC_CFG_REG
(
ba£
Ë&~
ADC_CFG_OVWREN_MASK
;

99 
	}
}

107 
	$ADC_SëC⁄vîtTrigMode
(
ADC_Ty≥
* 
ba£
, 
uöt8_t
 
mode
)

109 
	`as£π
(
mode
 <
adcH¨dw¨eTriggî
);

111 if(
mode
 =
adcH¨dw¨eTriggî
)

112 
	`ADC_CFG_REG
(
ba£
Ë|
ADC_CFG_ADTRG_MASK
;

114 
	`ADC_CFG_REG
(
ba£
Ë&~
ADC_CFG_ADTRG_MASK
;

115 
	}
}

123 
	$ADC_SëC⁄vîtS≥ed
(
ADC_Ty≥
* 
ba£
, 
uöt8_t
 
mode
)

125 
	`as£π
(
mode
 <
adcHighS≥ed
);

127 if(
mode
 =
adcHighS≥ed
)

128 
	`ADC_CFG_REG
(
ba£
Ë|
ADC_CFG_ADHSC_MASK
;

130 
	`ADC_CFG_REG
(
ba£
Ë&~
ADC_CFG_ADHSC_MASK
;

131 
	}
}

139 
	$ADC_SëSam∂eTimeDuøti⁄
(
ADC_Ty≥
* 
ba£
, 
uöt8_t
 
duøti⁄
)

141 
	`as£π
(
duøti⁄
 <
adcSam∂ePîiodClock24
);

143 
duøti⁄
)

145 
adcSam∂ePîiodClock2
:

146 
	`ADC_CFG_REG
(
ba£
Ë&~
ADC_CFG_ADLSMP_MASK
;

147 
	`ADC_CFG_REG
(
ba£
Ë(ADC_CFG_REG(ba£Ë& (~
ADC_CFG_ADSTS_MASK
)) |

148 
	`ADC_CFG_ADSTS
(0U);

151 
adcSam∂ePîiodClock4
:

152 
	`ADC_CFG_REG
(
ba£
Ë&~
ADC_CFG_ADLSMP_MASK
;

153 
	`ADC_CFG_REG
(
ba£
Ë(ADC_CFG_REG(ba£Ë& (~
ADC_CFG_ADSTS_MASK
)) |

154 
	`ADC_CFG_ADSTS
(1U);

157 
adcSam∂ePîiodClock6
:

158 
	`ADC_CFG_REG
(
ba£
Ë&~
ADC_CFG_ADLSMP_MASK
;

159 
	`ADC_CFG_REG
(
ba£
Ë(ADC_CFG_REG(ba£Ë& (~
ADC_CFG_ADSTS_MASK
)) |

160 
	`ADC_CFG_ADSTS
(2U);

163 
adcSam∂ePîiodClock8
:

164 
	`ADC_CFG_REG
(
ba£
Ë&~
ADC_CFG_ADLSMP_MASK
;

165 
	`ADC_CFG_REG
(
ba£
Ë(ADC_CFG_REG(ba£Ë& (~
ADC_CFG_ADSTS_MASK
)) |

166 
	`ADC_CFG_ADSTS
(3U);

169 
adcSam∂ePîiodClock12
:

170 
	`ADC_CFG_REG
(
ba£
Ë|
ADC_CFG_ADLSMP_MASK
;

171 
	`ADC_CFG_REG
(
ba£
Ë(ADC_CFG_REG(ba£Ë& (~
ADC_CFG_ADSTS_MASK
)) |

172 
	`ADC_CFG_ADSTS
(0U);

175 
adcSam∂ePîiodClock16
:

176 
	`ADC_CFG_REG
(
ba£
Ë|
ADC_CFG_ADLSMP_MASK
;

177 
	`ADC_CFG_REG
(
ba£
Ë(ADC_CFG_REG(ba£Ë& (~
ADC_CFG_ADSTS_MASK
)) |

178 
	`ADC_CFG_ADSTS
(1U);

181 
adcSam∂ePîiodClock20
:

182 
	`ADC_CFG_REG
(
ba£
Ë|
ADC_CFG_ADLSMP_MASK
;

183 
	`ADC_CFG_REG
(
ba£
Ë(ADC_CFG_REG(ba£Ë& (~
ADC_CFG_ADSTS_MASK
)) |

184 
	`ADC_CFG_ADSTS
(2U);

187 
adcSam∂ePîiodClock24
:

188 
	`ADC_CFG_REG
(
ba£
Ë|
ADC_CFG_ADLSMP_MASK
;

189 
	`ADC_CFG_REG
(
ba£
Ë(ADC_CFG_REG(ba£Ë& (~
ADC_CFG_ADSTS_MASK
)) |

190 
	`ADC_CFG_ADSTS
(3U);

193 
	}
}

201 
	$ADC_SëPowîMode
(
ADC_Ty≥
* 
ba£
, 
uöt8_t
 
powîMode
)

203 
	`as£π
(
powîMode
 <
adcLowPowîMode
);

205 if(
powîMode
 =
adcLowPowîMode
)

206 
	`ADC_CFG_REG
(
ba£
Ë|
ADC_CFG_ADLPC_MASK
;

208 
	`ADC_CFG_REG
(
ba£
Ë&~
ADC_CFG_ADLPC_MASK
;

209 
	}
}

217 
	$ADC_SëClockSour˚
(
ADC_Ty≥
* 
ba£
, 
uöt8_t
 
sour˚
, uöt8_à
div
)

219 
	`as£π
(
sour˚
 <
adcAsynClock
);

220 
	`as£π
(
div
 <
adcI≈utClockDiv8
);

222 
	`ADC_CFG_REG
(
ba£
Ë(ADC_CFG_REG(ba£Ë& (~
ADC_CFG_ADIV_MASK
)) |

223 
	`ADC_CFG_ADIV
(
div
);

224 
	`ADC_CFG_REG
(
ba£
Ë(ADC_CFG_REG(ba£Ë& (~
ADC_CFG_ADICLK_MASK
)) |

225 
	`ADC_CFG_ADICLK
(
sour˚
);

226 
	}
}

235 
	$ADC_SëAsynClockOuçut
(
ADC_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

237 if(
íabÀ
)

238 
	`ADC_GC_REG
(
ba£
Ë|
ADC_GC_ADACKEN_MASK
;

240 
	`ADC_GC_REG
(
ba£
Ë&~
ADC_GC_ADACKEN_MASK
;

241 
	}
}

249 
	$ADC_SëCÆibøti⁄
(
ADC_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

251 if(
íabÀ
)

252 
	`ADC_GC_REG
(
ba£
Ë|
ADC_GC_CAL_MASK
;

254 
	`ADC_GC_REG
(
ba£
Ë&~
ADC_GC_CAL_MASK
;

255 
	}
}

266 
	$ADC_SëC⁄vîtCmd
(
ADC_Ty≥
* 
ba£
, 
uöt8_t
 
ch™√l
, 
boﬁ
 
íabÀ
)

268 
uöt8_t
 
åiggîMode
;

271 if(
íabÀ
)

273 
	`ADC_GC_REG
(
ba£
Ë|
ADC_GC_ADCO_MASK
;

275 
åiggîMode
 = 
	`ADC_GëC⁄vîtTrigMode
(
ba£
);

276 if(
åiggîMode
 =
adcSo·w¨eTriggî
)

277 
	`ADC_HC0_REG
(
ba£
Ë(ADC_HC0_REG(ba£Ë& (~
ADC_HC0_ADCH_MASK
)) |

278 
	`ADC_HC0_ADCH
(
ch™√l
);

280 
	`ADC_HC1_REG
(
ba£
Ë(ADC_HC1_REG(ba£Ë& (~
ADC_HC1_ADCH_MASK
)) |

281 
	`ADC_HC1_ADCH
(
ch™√l
);

284 
	`ADC_GC_REG
(
ba£
Ë&~
ADC_GC_ADCO_MASK
;

285 
	}
}

296 
	$ADC_TriggîSögÀC⁄vît
(
ADC_Ty≥
* 
ba£
, 
uöt8_t
 
ch™√l
)

298 
uöt8_t
 
åiggîMode
;

301 
	`ADC_GC_REG
(
ba£
Ë&~
ADC_GC_ADCO_MASK
;

303 
åiggîMode
 = 
	`ADC_GëC⁄vîtTrigMode
(
ba£
);

304 if(
åiggîMode
 =
adcSo·w¨eTriggî
)

305 
	`ADC_HC0_REG
(
ba£
Ë(ADC_HC0_REG(ba£Ë& (~
ADC_HC0_ADCH_MASK
)) |

306 
	`ADC_HC0_ADCH
(
ch™√l
);

308 
	`ADC_HC1_REG
(
ba£
Ë(ADC_HC1_REG(ba£Ë& (~
ADC_HC1_ADCH_MASK
)) |

309 
	`ADC_HC1_ADCH
(
ch™√l
);

310 
	}
}

320 
	$ADC_SëAvîageNum
(
ADC_Ty≥
* 
ba£
, 
uöt8_t
 
avgNum
)

322 
	`as£π
(
avgNum
 <
adcAvgNumN⁄e
);

324 if(
avgNum
 !
adcAvgNumN⁄e
)

327 
	`ADC_GC_REG
(
ba£
Ë|
ADC_GC_AVGE_MASK
;

329 
	`ADC_CFG_REG
(
ba£
Ë(ADC_CFG_REG(ba£Ë& (~
ADC_CFG_AVGS_MASK
)) |

330 
	`ADC_CFG_AVGS
(
avgNum
);

335 
	`ADC_GC_REG
(
ba£
Ë&~
ADC_GC_AVGE_MASK
;

337 
	}
}

345 
	$ADC_St›C⁄vît
(
ADC_Ty≥
* 
ba£
)

347 
uöt8_t
 
åiggîMode
;

349 
åiggîMode
 = 
	`ADC_GëC⁄vîtTrigMode
(
ba£
);

351 if(
åiggîMode
 =
adcSo·w¨eTriggî
)

352 
	`ADC_HC0_REG
(
ba£
Ë|
ADC_HC0_ADCH_MASK
;

354 
	`ADC_HC1_REG
(
ba£
Ë|
ADC_HC1_ADCH_MASK
;

355 
	}
}

363 
uöt16_t
 
	$ADC_GëC⁄vîtResu…
(
ADC_Ty≥
* 
ba£
)

365 
uöt8_t
 
åiggîMode
;

367 
åiggîMode
 = 
	`ADC_GëC⁄vîtTrigMode
(
ba£
);

368 if(
åiggîMode
 =
adcSo·w¨eTriggî
)

369  (
uöt16_t
)((
	`ADC_R0_REG
(
ba£
Ë& 
ADC_R0_D_MASK
Ë>> 
ADC_R0_D_SHIFT
);

371  (
uöt16_t
)((
	`ADC_R1_REG
(
ba£
Ë& 
ADC_R1_D_MASK
Ë>> 
ADC_R1_D_SHIFT
);

372 
	}
}

381 
	$ADC_SëCmpMode
(
ADC_Ty≥
* 
ba£
, 
uöt8_t
 
cmpMode
, 
uöt16_t
 
cmpVÆ1
, uöt16_à
cmpVÆ2
)

383 
	`as£π
(
cmpMode
 <
adcCmpModeDißbÀ
);

385 
cmpMode
)

387 
adcCmpModeLessTh™CmpVÆ1
:

388 
	`ADC_GC_REG
(
ba£
Ë|
ADC_GC_ACFE_MASK
;

389 
	`ADC_GC_REG
(
ba£
Ë&~(
ADC_GC_ACFGT_MASK
 | 
ADC_GC_ACREN_MASK
);

390 
	`ADC_CV_REG
(
ba£
Ë(ADC_CV_REG(ba£Ë& (~
ADC_CV_CV1_MASK
)Ë| 
	`ADC_CV_CV1
(
cmpVÆ1
);

393 
adcCmpModeGª©îTh™CmpVÆ1
:

394 
	`ADC_GC_REG
(
ba£
Ë|
ADC_GC_ACFE_MASK
;

395 
	`ADC_GC_REG
(
ba£
Ë(ADC_GC_REG(ba£Ë| 
ADC_GC_ACFGT_MASK
Ë& (~
ADC_GC_ACREN_MASK
);

396 
	`ADC_CV_REG
(
ba£
Ë(ADC_CV_REG(ba£Ë& (~
ADC_CV_CV1_MASK
)Ë| 
	`ADC_CV_CV1
(
cmpVÆ1
);

399 
adcCmpModeOutR™gNŸIn˛usive
:

400 
	`ADC_GC_REG
(
ba£
Ë|
ADC_GC_ACFE_MASK
;

401 
	`ADC_GC_REG
(
ba£
Ë(ADC_GC_REG(ba£Ë| 
ADC_GC_ACREN_MASK
Ë& (~
ADC_GC_ACFGT_MASK
);

402 if(
cmpVÆ1
 <
cmpVÆ2
)

404 
	`ADC_CV_REG
(
ba£
Ë(ADC_CV_REG(ba£Ë& (~
ADC_CV_CV1_MASK
)Ë| 
	`ADC_CV_CV1
(
cmpVÆ1
);

405 
	`ADC_CV_REG
(
ba£
Ë(ADC_CV_REG(ba£Ë& (~
ADC_CV_CV2_MASK
)Ë| 
	`ADC_CV_CV2
(
cmpVÆ2
);

409 
adcCmpModeInR™gNŸIn˛usive
:

410 
	`ADC_GC_REG
(
ba£
Ë|
ADC_GC_ACFE_MASK
;

411 
	`ADC_GC_REG
(
ba£
Ë(ADC_GC_REG(ba£Ë| 
ADC_GC_ACREN_MASK
Ë& (~
ADC_GC_ACFGT_MASK
);

412 if(
cmpVÆ1
 > 
cmpVÆ2
)

414 
	`ADC_CV_REG
(
ba£
Ë(ADC_CV_REG(ba£Ë& (~
ADC_CV_CV1_MASK
)Ë| 
	`ADC_CV_CV1
(
cmpVÆ1
);

415 
	`ADC_CV_REG
(
ba£
Ë(ADC_CV_REG(ba£Ë& (~
ADC_CV_CV2_MASK
)Ë| 
	`ADC_CV_CV2
(
cmpVÆ2
);

419 
adcCmpModeInR™gIn˛usive
:

420 
	`ADC_GC_REG
(
ba£
Ë|
ADC_GC_ACFE_MASK
;

421 
	`ADC_GC_REG
(
ba£
Ë|
ADC_GC_ACREN_MASK
 | 
ADC_GC_ACFGT_MASK
;

422 if(
cmpVÆ1
 <
cmpVÆ2
)

424 
	`ADC_CV_REG
(
ba£
Ë(ADC_CV_REG(ba£Ë& (~
ADC_CV_CV1_MASK
)Ë| 
	`ADC_CV_CV1
(
cmpVÆ1
);

425 
	`ADC_CV_REG
(
ba£
Ë(ADC_CV_REG(ba£Ë& (~
ADC_CV_CV2_MASK
)Ë| 
	`ADC_CV_CV2
(
cmpVÆ2
);

429 
adcCmpModeOutR™gIn˛usive
:

430 
	`ADC_GC_REG
(
ba£
Ë|
ADC_GC_ACFE_MASK
;

431 
	`ADC_GC_REG
(
ba£
Ë|
ADC_GC_ACREN_MASK
 | 
ADC_GC_ACFGT_MASK
;

432 if(
cmpVÆ1
 > 
cmpVÆ2
)

434 
	`ADC_CV_REG
(
ba£
Ë(ADC_CV_REG(ba£Ë& (~
ADC_CV_CV1_MASK
)Ë| 
	`ADC_CV_CV1
(
cmpVÆ1
);

435 
	`ADC_CV_REG
(
ba£
Ë(ADC_CV_REG(ba£Ë& (~
ADC_CV_CV2_MASK
)Ë| 
	`ADC_CV_CV2
(
cmpVÆ2
);

439 
adcCmpModeDißbÀ
:

440 
	`ADC_GC_REG
(
ba£
Ë&~
ADC_GC_ACFE_MASK
;

443 
	}
}

451 
	$ADC_SëC‹ª˘i⁄Mode
(
ADC_Ty≥
* 
ba£
, 
boﬁ
 
c‹ª˘Mode
)

453 if(
c‹ª˘Mode
)

454 
	`ADC_OFS_REG
(
ba£
Ë|
ADC_OFS_SIGN_MASK
;

456 
	`ADC_OFS_REG
(
ba£
Ë&~
ADC_OFS_SIGN_MASK
;

457 
	}
}

465 
	$ADC_SëI¡Cmd
(
ADC_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

467 
uöt8_t
 
åiggîMode
;

469 
åiggîMode
 = 
	`ADC_GëC⁄vîtTrigMode
(
ba£
);

470 if(
åiggîMode
 =
adcSo·w¨eTriggî
)

472 if(
íabÀ
)

473 
	`ADC_HC0_REG
(
ba£
Ë|
ADC_HC0_AIEN_MASK
;

475 
	`ADC_HC0_REG
(
ba£
Ë&~
ADC_HC0_AIEN_MASK
;

479 if(
íabÀ
)

480 
	`ADC_HC1_REG
(
ba£
Ë|
ADC_HC1_AIEN_MASK
;

482 
	`ADC_HC1_REG
(
ba£
Ë&~
ADC_HC1_AIEN_MASK
;

484 
	}
}

492 
boﬁ
 
	$ADC_IsC⁄vîtCom∂ëe
(
ADC_Ty≥
* 
ba£
)

494 
uöt8_t
 
åiggîMode
;

496 
åiggîMode
 = 
	`ADC_GëC⁄vîtTrigMode
(
ba£
);

497 if(
åiggîMode
 =
adcSo·w¨eTriggî
)

498  (
boﬁ
)((
	`ADC_HS_REG
(
ba£
Ë& 
ADC_HS_COCO0_MASK
Ë>> 
ADC_HS_COCO0_SHIFT
);

500  (
boﬁ
)((
	`ADC_HS_REG
(
ba£
Ë& 
ADC_HS_COCO1_MASK
Ë>> 
ADC_HS_COCO1_SHIFT
);

501 
	}
}

509 
	$ADC_SëDmaCmd
(
ADC_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

511 i‡(
íabÀ
)

512 
	`ADC_GC_REG
(
ba£
Ë|
ADC_GC_DMAEN_MASK
;

514 
	`ADC_GC_REG
(
ba£
Ë&~
ADC_GC_DMAEN_MASK
;

515 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\ccm_analog_imx6sx.c

31 
	~"ccm_™Æog_imx6sx.h
"

43 
	$CCM_ANALOG_PowîUpPŒ
(
CCM_ANALOG_Ty≥
 * 
ba£
, 
uöt32_t
 
∂lC⁄åﬁ
)

47 if((
	`CCM_ANALOG_TUPLE_OFFSET
(
∂lC⁄åﬁ
) == 0x10) || (CCM_ANALOG_TUPLE_OFFSET(pllControl) == 0x20))

48 
	`CCM_ANALOG_TUPLE_REG_SET
(
ba£
, 
∂lC⁄åﬁ
Ë1 << 
	`CCM_ANALOG_TUPLE_SHIFT
(pllControl);

50 
	`CCM_ANALOG_TUPLE_REG_CLR
(
ba£
, 
∂lC⁄åﬁ
Ë1 << 
	`CCM_ANALOG_TUPLE_SHIFT
(pllControl);

51 
	}
}

59 
	$CCM_ANALOG_PowîDownPŒ
(
CCM_ANALOG_Ty≥
 * 
ba£
, 
uöt32_t
 
∂lC⁄åﬁ
)

63 if((
	`CCM_ANALOG_TUPLE_OFFSET
(
∂lC⁄åﬁ
) == 0x10) || (CCM_ANALOG_TUPLE_OFFSET(pllControl) == 0x20))

64 
	`CCM_ANALOG_TUPLE_REG_CLR
(
ba£
, 
∂lC⁄åﬁ
Ë1 << 
	`CCM_ANALOG_TUPLE_SHIFT
(pllControl);

66 
	`CCM_ANALOG_TUPLE_REG_SET
(
ba£
, 
∂lC⁄åﬁ
Ë1 << 
	`CCM_ANALOG_TUPLE_SHIFT
(pllControl);

67 
	}
}

75 
	$CCM_ANALOG_SëPŒBy∑ss
(
CCM_ANALOG_Ty≥
 * 
ba£
, 
uöt32_t
 
∂lC⁄åﬁ
, 
boﬁ
 
by∑ss
)

77 if(
by∑ss
)

78 
	`CCM_ANALOG_TUPLE_REG_SET
(
ba£
, 
∂lC⁄åﬁ
Ë
CCM_ANALOG_PLL_ARM_BYPASS_MASK
;

80 
	`CCM_ANALOG_TUPLE_REG_CLR
(
ba£
, 
∂lC⁄åﬁ
Ë
CCM_ANALOG_PLL_ARM_BYPASS_MASK
;

81 
	}
}

89 
uöt32_t
 
	$CCM_ANALOG_GëPŒFªq
(
CCM_ANALOG_Ty≥
 * 
ba£
, 
uöt32_t
 
∂lC⁄åﬁ
)

91 
uöt8_t
 
divSñe˘
;

92 
numî©‹
, 
díomô‹
;

93 
uöt32_t
 
hz
 = 0;

95 i‡(
	`CCM_ANALOG_IsPŒBy∑s£d
(
ba£
, 
∂lC⁄åﬁ
))

98 
	`CCM_ANALOG_TUPLE_OFFSET
(
∂lC⁄åﬁ
))

103 
divSñe˘
 = 
CCM_ANALOG_PLL_ARM
 & 
CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK
;

104 
hz
 = 24000000 * 
divSñe˘
 / 2;

110 
divSñe˘
 = 
CCM_ANALOG_PLL_USB1
 & 
CCM_ANALOG_PLL_USB1_DIV_SELECT_MASK
;

111 if(
divSñe˘
 == 0)

112 
hz
 = 480000000;

113 if(
divSñe˘
 == 1)

114 
hz
 = 528000000;

120 
divSñe˘
 = 
CCM_ANALOG_PLL_USB2
 & 
CCM_ANALOG_PLL_USB2_DIV_SELECT_MASK
;

121 if(
divSñe˘
 == 0)

122 
hz
 = 480000000;

123 if(
divSñe˘
 == 1)

124 
hz
 = 528000000;

130 
divSñe˘
 = 
CCM_ANALOG_PLL_SYS
 & 
CCM_ANALOG_PLL_SYS_DIV_SELECT_MASK
;

131 if(
divSñe˘
 == 0)

132 
hz
 = 480000000;

134 
hz
 = 528000000;

140 
divSñe˘
 = 
CCM_ANALOG_PLL_AUDIO
 & 
CCM_ANALOG_PLL_AUDIO_DIV_SELECT_MASK
;

141 
numî©‹
 = 
CCM_ANALOG_PLL_AUDIO_NUM
 & 
CCM_ANALOG_PLL_AUDIO_NUM_A_MASK
;

142 
díomô‹
 = 
CCM_ANALOG_PLL_AUDIO_DENOM
 & 
CCM_ANALOG_PLL_AUDIO_DENOM_B_MASK
;

143 
hz
 = (
uöt32_t
)(24000000 * (
divSñe˘
 + (
numî©‹
 / 
díomô‹
)));

149 
divSñe˘
 = 
CCM_ANALOG_PLL_VIDEO
 & 
CCM_ANALOG_PLL_VIDEO_DIV_SELECT_MASK
;

150 
numî©‹
 = 
CCM_ANALOG_PLL_VIDEO_NUM
 & 
CCM_ANALOG_PLL_VIDEO_NUM_A_MASK
;

151 
díomô‹
 = 
CCM_ANALOG_PLL_VIDEO_DENOM
 & 
CCM_ANALOG_PLL_VIDEO_DENOM_B_MASK
;

152 
hz
 = (
uöt32_t
)(24000000 * (
divSñe˘
 + (
numî©‹
 / 
díomô‹
)));

156  
hz
;

157 
	}
}

165 
uöt32_t
 
	$CCM_ANALOG_GëPfdFªq
(
CCM_ANALOG_Ty≥
 * 
ba£
, 
uöt32_t
 
pfdFøc
)

167 
uöt32_t
 
maöf
, 
‰ac
;

170 if(
	`CCM_ANALOG_TUPLE_OFFSET
(
pfdFøc
) == 0x100)

173 
	`as£π
(!
	`CCM_ANALOG_IsPŒBy∑s£d
(
ba£
, 
ccmA«logPŒSysC⁄åﬁ
));

174 
maöf
 = 
	`CCM_ANALOG_GëPŒFªq
(
ba£
, 
ccmA«logPŒSysC⁄åﬁ
);

176 if(
	`CCM_ANALOG_TUPLE_OFFSET
(
pfdFøc
) == 0xF0)

179 
	`as£π
(!
	`CCM_ANALOG_IsPŒBy∑s£d
(
ba£
, 
ccmA«logPŒUsb1C⁄åﬁ
));

180 
maöf
 = 
	`CCM_ANALOG_GëPŒFªq
(
ba£
, 
ccmA«logPŒUsb1C⁄åﬁ
);

183 
maöf
 = 0;

185 
‰ac
 = 
	`CCM_ANALOG_GëPfdFøc
(
ba£
, 
pfdFøc
);

187  
maöf
 / 
‰ac
 * 18;

188 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\ccm_imx6sx.c

31 
	~"ccm_imx6sx.h
"

43 
	$CCM_SëClockE«bÀSig«lOvîrided
(
CCM_Ty≥
 * 
ba£
, 
uöt32_t
 
sig«l
, 
boﬁ
 
c⁄åﬁ
)

45 if(
c⁄åﬁ
)

46 
	`CCM_CMEOR_REG
(
ba£
Ë|
sig«l
;

48 
	`CCM_CMEOR_REG
(
ba£
Ë&~
sig«l
;

49 
	}
}

57 
	$CCM_SëMmdcH™dshakeMask
(
CCM_Ty≥
 * 
ba£
, 
boﬁ
 
mask
)

59 if(
mask
)

60 
	`CCM_CCDR_REG
(
ba£
Ë|
CCM_CCDR_mmdc_mask_MASK
;

62 
	`CCM_CCDR_REG
(
ba£
Ë&~
CCM_CCDR_mmdc_mask_MASK
;

63 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\ecspi.c

31 
	~"ec•i.h
"

47 
	$ECSPI_Inô
(
ECSPI_Ty≥
* 
ba£
, c⁄° 
ec•i_öô_c⁄fig_t
* 
öôC⁄fig
)

50 
	`ECSPI_CONREG_REG
(
ba£
) = 0;

53 
	`ECSPI_E«bÀ
(
ba£
);

56 
	`ECSPI_CONREG_REG
(
ba£
Ë|
	`ECSPI_CONREG_BURST_LENGTH
(
öôC⁄fig
->
bur°Lígth
) |

57 
	`ECSPI_CONREG_CHANNEL_SELECT
(
öôC⁄fig
->
ch™√lSñe˘
);

58 
	`ECSPI_CONREG_REG
(
ba£
Ë|
öôC⁄fig
->
ec•iAutoSèπ
 ? 
ECSPI_CONREG_SMC_MASK
 : 0;

61 
	`ECSPI_CONFIGREG_REG
(
ba£
Ë
	`ECSPI_CONFIGREG_SCLK_PHA
(((
öôC⁄fig
->
˛ockPha£
Ë& 1Ë<< (öôC⁄fig->
ch™√lSñe˘
)) |

62 
	`ECSPI_CONFIGREG_SCLK_POL
(((
öôC⁄fig
->
˛ockPﬁ¨ôy
Ë& 1Ë<< (öôC⁄fig->
ch™√lSñe˘
));

65 if(
öôC⁄fig
->
mode
 =
ec•iMa°îMode
)

68 
	`ECSPI_CONREG_REG
(
ba£
Ë|
	`ECSPI_CONREG_CHANNEL_MODE
(1 << (
öôC⁄fig
->
ch™√lSñe˘
));

69 
	`ECSPI_SëBaudR©e
(
ba£
, 
öôC⁄fig
->
˛ockR©e
, inôC⁄fig->
baudR©e
);

72 
	`ECSPI_CONREG_REG
(
ba£
Ë&~
	`ECSPI_CONREG_CHANNEL_MODE
(1 << (
öôC⁄fig
->
ch™√lSñe˘
));

73 
	}
}

81 
	$ECSPI_SëSampClockSour˚
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
sour˚
)

84 if(
sour˚
 =
ec•iS˛k
)

85 
	`ECSPI_PERIODREG_REG
(
ba£
Ë&~
ECSPI_PERIODREG_CSRC_MASK
;

87 
	`ECSPI_PERIODREG_REG
(
ba£
Ë|
ECSPI_PERIODREG_CSRC_MASK
;

88 
	}
}

96 
uöt32_t
 
	$ECSPI_SëBaudR©e
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
sour˚ClockInHz
, uöt32_à
bôsPîSec
)

98 
uöt32_t
 
div
, 
¥e_div
;

99 
uöt32_t
 
po°_baud
;

100 
uöt32_t
 
¥e_baud
;

102 if(
sour˚ClockInHz
 <
bôsPîSec
)

104 
	`ECSPI_CONREG_REG
(
ba£
Ë&~
ECSPI_CONREG_PRE_DIVIDER_MASK
;

105 
	`ECSPI_CONREG_REG
(
ba£
Ë&~
ECSPI_CONREG_POST_DIVIDER_MASK
;

106  
sour˚ClockInHz
;

109 
div
 = 
sour˚ClockInHz
 / 
bôsPîSec
;

110 if(
div
 < 16)

112 if((
sour˚ClockInHz
 - 
bôsPîSec
 * 
div
) < ((bitsPerSec * (div + 1)) - sourceClockInHz))

113 
¥e_div
 = 
div
 - 1;

115 
¥e_div
 = 
div
;

116 
	`ECSPI_CONREG_REG
(
ba£
Ë(ECSPI_CONREG_REG(ba£Ë& (~
ECSPI_CONREG_PRE_DIVIDER_MASK
)) |

117 
	`ECSPI_CONREG_PRE_DIVIDER
(
¥e_div
);

118 
	`ECSPI_CONREG_REG
(
ba£
Ë(ECSPI_CONREG_REG(ba£Ë& (~
ECSPI_CONREG_POST_DIVIDER_MASK
)) |

119 
	`ECSPI_CONREG_POST_DIVIDER
(0);

120  
sour˚ClockInHz
 / (
¥e_div
 + 1);

123 
¥e_baud
 = 
bôsPîSec
 * 16;

124 
div
 = 1; div < 16; div++)

126 
po°_baud
 = 
sour˚ClockInHz
 >> 
div
;

127 if(
po°_baud
 < 
¥e_baud
)

131 if(
div
 == 16)

133 
	`ECSPI_CONREG_REG
(
ba£
Ë|
	`ECSPI_CONREG_PRE_DIVIDER
(15);

134 
	`ECSPI_CONREG_REG
(
ba£
Ë|
	`ECSPI_CONREG_POST_DIVIDER
(15);

135  
po°_baud
 / 16;

139 if((
po°_baud
 - 
bôsPîSec
 * (post_baud / bitsPerSec)) < ((bitsPerSec * ((post_baud / bitsPerSec) + 1)) -Öost_baud))

140 
¥e_div
 = 
po°_baud
 / 
bôsPîSec
 - 1;

142 
¥e_div
 = 
po°_baud
 / 
bôsPîSec
;

143 
	`ECSPI_CONREG_REG
(
ba£
Ë(ECSPI_CONREG_REG(ba£Ë& (~
ECSPI_CONREG_PRE_DIVIDER_MASK
)) |

144 
	`ECSPI_CONREG_PRE_DIVIDER
(
¥e_div
);

145 
	`ECSPI_CONREG_REG
(
ba£
Ë(ECSPI_CONREG_REG(ba£Ë& (~
ECSPI_CONREG_POST_DIVIDER_MASK
)) |

146 
	`ECSPI_CONREG_POST_DIVIDER
(
div
);

147  
po°_baud
 / (
¥e_div
 + 1);

148 
	}
}

159 
	$ECSPPI_SëDMACmd
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
sour˚
, 
boﬁ
 
íabÀ
)

162 if(
íabÀ
)

163 
	`ECSPI_DMAREG_REG
(
ba£
Ë|((
uöt32_t
)(1 << 
sour˚
));

165 
	`ECSPI_DMAREG_REG
(
ba£
Ë&~((
uöt32_t
)(1 << 
sour˚
));

166 
	}
}

174 
	$ECSPI_SëFIFOThªshﬁd
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
fifo
, uöt32_à
thªshﬁd
)

177 if(
fifo
 =
ec•iTxfifoThªshﬁd
)

178 
	`ECSPI_DMAREG_REG
(
ba£
Ë(ECSPI_DMAREG_REG(ba£Ë& (~
ECSPI_DMAREG_TX_THRESHOLD_MASK
)) |

179 
	`ECSPI_DMAREG_TX_THRESHOLD
(
thªshﬁd
);

181 
	`ECSPI_DMAREG_REG
(
ba£
Ë(ECSPI_DMAREG_REG(ba£Ë& (~
ECSPI_DMAREG_RX_THRESHOLD_MASK
)) |

182 
	`ECSPI_DMAREG_RX_THRESHOLD
(
thªshﬁd
);

183 
	}
}

194 
	$ECSPI_SëI¡Cmd
(
ECSPI_Ty≥
* 
ba£
, 
uöt32_t
 
Êags
, 
boﬁ
 
íabÀ
)

197 if(
íabÀ
)

198 
	`ECSPI_INTREG_REG
(
ba£
Ë|
Êags
;

200 
	`ECSPI_INTREG_REG
(
ba£
Ë&~
Êags
;

201 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\epit.c

31 
	~"ïô.h
"

44 
	$EPIT_Inô
(
EPIT_Ty≥
* 
ba£
, c⁄° 
ïô_öô_c⁄fig_t
* 
öôC⁄fig
)

46 
	`as£π
(
öôC⁄fig
);

48 
	`EPIT_CR_REG
(
ba£
) = 0;

50 
	`EPIT_So·Re£t
(
ba£
);

52 
	`EPIT_CR_REG
(
ba£
Ë(
öôC⁄fig
->
‰ìRun
 ? 
EPIT_CR_RLD_MASK
 : 0) |

53 (
öôC⁄fig
->
waôE«bÀ
 ? 
EPIT_CR_WAITEN_MASK
 : 0) |

54 (
öôC⁄fig
->
°›E«bÀ
 ? 
EPIT_CR_STOPEN_MASK
 : 0) |

55 (
öôC⁄fig
->
dbgE«bÀ
 ? 
EPIT_CR_DBGEN_MASK
 : 0) |

56 (
öôC⁄fig
->
íabÀMode
 ? 
EPIT_CR_ENMOD_MASK
 : 0);

57 
	}
}

65 
	$EPIT_SëOvîwrôeCou¡î
(
EPIT_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

67 if(
íabÀ
)

68 
	`EPIT_CR_REG
(
ba£
Ë|
EPIT_CR_IOVW_MASK
;

70 
	`EPIT_CR_REG
(
ba£
Ë&~
EPIT_CR_IOVW_MASK
;

71 
	}
}

79 
	$EPIT_SëI¡Cmd
(
EPIT_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

81 i‡(
íabÀ
)

82 
	`EPIT_CR_REG
(
ba£
Ë|
EPIT_CR_OCIEN_MASK
;

84 
	`EPIT_CR_REG
(
ba£
Ë&~
EPIT_CR_OCIEN_MASK
;

85 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\flexcan.c

31 
	~"Êexˇn.h
"

37 
	#FLEXCAN_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT
 (31UË

	)

38 
	#FLEXCAN_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT
 (30UË

	)

39 
	#FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_RTR_SHIFT
 (15UË

	)

40 
	#FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_IDE_SHIFT
 (14UË

	)

41 
	#FLEXCAN_RX_FIFO_ID_FILTER_FORMATA_EXT_MASK
 (0x3FFFFFFFUË

	)

42 
	#FLEXCAN_RX_FIFO_ID_FILTER_FORMATA_EXT_SHIFT
 (1UË

	)

43 
	#FLEXCAN_RX_FIFO_ID_FILTER_FORMATA_STD_MASK
 (0x3FF80000UË

	)

44 
	#FLEXCAN_RX_FIFO_ID_FILTER_FORMATA_STD_SHIFT
 (19UË

	)

45 
	#FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK
 (0x3FFFUË

	)

46 
	#FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT1
 (16UË

	)

47 
	#FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT2
 (0UË

	)

48 
	#FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_STD_MASK
 (0x7FFUË

	)

49 
	#FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT1
 (19UË

	)

50 
	#FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT2
 (3UË

	)

51 
	#FLEXCAN_RX_FIFO_ID_FILTER_FORMATC_MASK
 (0xFFUË

	)

52 
	#FLEXCAN_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
 (24UË

	)

53 
	#FLEXCAN_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
 (16UË

	)

54 
	#FLEXCAN_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
 (8UË

	)

55 
	#FLEXCAN_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
 (0UË

	)

56 
	#FLEXCAN_BYTE_DATA_FIELD_MASK
 (0xFFUË

	)

57 
	#RxFifoFûãrEÀmítNum
(
x
Ë((x + 1Ë* 8)

	)

72 
	$FLEXCAN_E¡îFªezeMode
(
CAN_Ty≥
* 
ba£
)

75 
	`CAN_MCR_REG
(
ba£
Ë|
CAN_MCR_FRZ_MASK
;

76 
	`CAN_MCR_REG
(
ba£
Ë|
CAN_MCR_HALT_MASK
;

78 !(
	`CAN_MCR_REG
(
ba£
Ë& 
CAN_MCR_FRZ_ACK_MASK
));

79 
	}
}

87 
	$FLEXCAN_ExôFªezeMode
(
CAN_Ty≥
* 
ba£
)

90 
	`CAN_MCR_REG
(
ba£
Ë&~
CAN_MCR_HALT_MASK
;

91 
	`CAN_MCR_REG
(
ba£
Ë&~
CAN_MCR_FRZ_MASK
;

93 
	`CAN_MCR_REG
(
ba£
Ë& 
CAN_MCR_FRZ_ACK_MASK
);

94 
	}
}

105 
	$FLEXCAN_Inô
(
CAN_Ty≥
* 
ba£
, c⁄° 
Êexˇn_öô_c⁄fig_t
* 
öôC⁄fig
)

107 
	`as£π
(
öôC⁄fig
);

110 
	`FLEXCAN_E«bÀ
(
ba£
);

113 
	`FLEXCAN_Deöô
(
ba£
);

118 
	`FLEXCAN_SëMaxMsgBufNum
(
ba£
, 
öôC⁄fig
->
maxMsgBufNum
);

121 
	`FLEXCAN_SëTimög
(
ba£
, &
öôC⁄fig
->
timög
);

124 
	`FLEXCAN_SëO≥øtögMode
(
ba£
, 
öôC⁄fig
->
›î©ögMode
);

127 
	`FLEXCAN_DißbÀ
(
ba£
);

128 
	}
}

137 
	$FLEXCAN_Deöô
(
CAN_Ty≥
* 
ba£
)

139 
uöt32_t
 
i
;

142 
	`CAN_MCR_REG
(
ba£
Ë|
CAN_MCR_SOFT_RST_MASK
;

144 
	`CAN_MCR_REG
(
ba£
Ë& 
CAN_MCR_SOFT_RST_MASK
);

147 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

150 
	`CAN_CTRL1_REG
(
ba£
) = 0x0;

153 
	`CAN_CTRL2_REG
(
ba£
) = 0x0;

156 
i
 = 0; i < 
CAN_CS_COUNT
; i++)

158 
ba£
->
MB
[
i
].
CS
 = 0x0;

159 
ba£
->
MB
[
i
].
ID
 = 0x0;

160 
ba£
->
MB
[
i
].
WORD0
 = 0x0;

161 
ba£
->
MB
[
i
].
WORD1
 = 0x0;

165 
i
 = 0; i < 
CAN_RXIMR_COUNT
; i++)

166 
	`CAN_RXIMR_REG
(
ba£
, 
i
) = 0x0;

169 
	`CAN_RXMGMASK_REG
(
ba£
) = 0xFFFFFFFF;

172 
	`CAN_RX14MASK_REG
(
ba£
) = 0xFFFFFFFF;

175 
	`CAN_RX15MASK_REG
(
ba£
) = 0xFFFFFFFF;

178 
	`CAN_RXFGMASK_REG
(
ba£
) = 0xFFFFFFFF;

181 
	`CAN_IMASK1_REG
(
ba£
) = 0x0;

182 
	`CAN_IMASK2_REG
(
ba£
) = 0x0;

185 
	`CAN_IFLAG1_REG
(
ba£
) = 0xFFFFFFFF;

186 
	`CAN_IFLAG2_REG
(
ba£
) = 0xFFFFFFFF;

189 
	`CAN_ESR1_REG
(
ba£
) = 0xFFFFFFFF;

192 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

193 
	}
}

201 
	$FLEXCAN_E«bÀ
(
CAN_Ty≥
* 
ba£
)

204 
	`CAN_MCR_REG
(
ba£
Ë&~
CAN_MCR_MDIS_MASK
;

206 
	`CAN_MCR_REG
(
ba£
Ë& 
CAN_MCR_LPM_ACK_MASK
);

207 
	}
}

215 
	$FLEXCAN_DißbÀ
(
CAN_Ty≥
* 
ba£
)

218 
	`CAN_MCR_REG
(
ba£
Ë|
CAN_MCR_MDIS_MASK
;

220 !(
	`CAN_MCR_REG
(
ba£
Ë& 
CAN_MCR_LPM_ACK_MASK
));

221 
	}
}

229 
	$FLEXCAN_SëTimög
(
CAN_Ty≥
* 
ba£
, c⁄° 
Êexˇn_timög_t
* 
timög
)

231 
	`as£π
(
timög
);

234 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

237 
	`CAN_CTRL1_REG
(
ba£
Ë&~(
CAN_CTRL1_PRESDIV_MASK
 | \

238 
CAN_CTRL1_RJW_MASK
 | \

239 
CAN_CTRL1_PSEG1_MASK
 | \

240 
CAN_CTRL1_PSEG2_MASK
 | \

241 
CAN_CTRL1_PROP_SEG_MASK
);

242 
	`CAN_CTRL1_REG
(
ba£
Ë|(
	`CAN_CTRL1_PRESDIV
(
timög
->
¥eDiv
) | \

243 
	`CAN_CTRL1_RJW
(
timög
->
rJumpwidth
) | \

244 
	`CAN_CTRL1_PSEG1
(
timög
->
pha£Seg1
) | \

245 
	`CAN_CTRL1_PSEG2
(
timög
->
pha£Seg2
) | \

246 
	`CAN_CTRL1_PROP_SEG
(
timög
->
¥›Seg
));

249 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

250 
	}
}

258 
	$FLEXCAN_SëO≥øtögMode
(
CAN_Ty≥
* 
ba£
, 
uöt8_t
 
mode
)

260 
	`as£π
((
mode
 & 
ÊexC™N‹mÆMode
) ||

261 (
mode
 & 
ÊexˇnLi°íO∆yMode
) ||

262 (
mode
 & 
ÊexˇnLo›BackMode
));

265 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

267 i‡(
mode
 & 
ÊexC™N‹mÆMode
)

268 
	`CAN_MCR_REG
(
ba£
Ë&~
CAN_MCR_SUPV_MASK
;

270 
	`CAN_MCR_REG
(
ba£
Ë|
CAN_MCR_SUPV_MASK
;

272 i‡(
mode
 & 
ÊexˇnLi°íO∆yMode
)

273 
	`CAN_CTRL1_REG
(
ba£
Ë|
CAN_CTRL1_LOM_MASK
;

275 
	`CAN_CTRL1_REG
(
ba£
Ë&~
CAN_CTRL1_LOM_MASK
;

277 i‡(
mode
 & 
ÊexˇnLo›BackMode
)

278 
	`CAN_CTRL1_REG
(
ba£
Ë|
CAN_CTRL1_LPB_MASK
;

280 
	`CAN_CTRL1_REG
(
ba£
Ë&~
CAN_CTRL1_LPB_MASK
;

283 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

284 
	}
}

292 
	$FLEXCAN_SëMaxMsgBufNum
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
bufNum
)

294 
	`as£π
((
bufNum
 <
CAN_CS_COUNT
) && (bufNum > 0));

297 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

300 
	`CAN_MCR_REG
(
ba£
Ë(CAN_MCR_REG(ba£Ë& (~
CAN_MCR_MAXMB_MASK
)Ë| 
	`CAN_MCR_MAXMB
(
bufNum
-1);

303 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

304 
	}
}

312 
	$FLEXCAN_SëAb‹tCmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

315 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

317 i‡(
íabÀ
)

318 
	`CAN_MCR_REG
(
ba£
Ë|
CAN_MCR_AEN_MASK
;

320 
	`CAN_MCR_REG
(
ba£
Ë&~
CAN_MCR_AEN_MASK
;

323 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

324 
	}
}

332 
	$FLEXCAN_SëLoˇlPrioCmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

335 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

337 i‡(
íabÀ
)

339 
	`CAN_MCR_REG
(
ba£
Ë|
CAN_MCR_LPRIO_EN_MASK
;

340 
	`CAN_CTRL1_REG
(
ba£
Ë&~
CAN_CTRL1_LBUF_MASK
;

344 
	`CAN_CTRL1_REG
(
ba£
Ë|
CAN_CTRL1_LBUF_MASK
;

345 
	`CAN_MCR_REG
(
ba£
Ë&~
CAN_MCR_LPRIO_EN_MASK
;

349 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

350 
	}
}

358 
	$FLEXCAN_SëM©chPrioCmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
¥i‹ôy
)

361 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

363 i‡(
¥i‹ôy
)

364 
	`CAN_CTRL2_REG
(
ba£
Ë|
CAN_CTRL2_MRP_MASK
;

366 
	`CAN_CTRL2_REG
(
ba£
Ë&~
CAN_CTRL2_MRP_MASK
;

369 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

370 
	}
}

381 
Êexˇn_msgbuf_t
* 
	$FLEXCAN_GëMsgBufPå
(
CAN_Ty≥
* 
ba£
, 
uöt8_t
 
msgBufIdx
)

383 
	`as£π
(
msgBufIdx
 < 
CAN_CS_COUNT
);

385  (
Êexˇn_msgbuf_t
*Ë&
ba£
->
MB
[
msgBufIdx
];

386 
	}
}

394 
boﬁ
 
	$FLEXCAN_LockRxMsgBuf
(
CAN_Ty≥
* 
ba£
, 
uöt8_t
 
msgBufIdx
)

396 vﬁ©ûê
uöt32_t
 
ãmp
;

399 i‡(
msgBufIdx
 > (
	`CAN_MCR_REG
(
ba£
Ë& 
CAN_MCR_MAXMB_MASK
))

400  
Ál£
;

403 
ãmp
 = 
ba£
->
MB
[
msgBufIdx
].
CS
;

406 
ãmp
++;

408  
åue
;

409 
	}
}

417 
uöt16_t
 
	$FLEXCAN_U∆ockAŒRxMsgBuf
(
CAN_Ty≥
* 
ba£
)

420  
	`CAN_TIMER_REG
(
ba£
);

421 
	}
}

432 
	$FLEXCAN_SëMsgBufI¡Cmd
(
CAN_Ty≥
* 
ba£
, 
uöt8_t
 
msgBufIdx
, 
boﬁ
 
íabÀ
)

434 vﬁ©ûê
uöt32_t
* 
öãºu±MaskPå
;

435 
uöt8_t
 
ödex
;

437 
	`as£π
(
msgBufIdx
 < 
CAN_CS_COUNT
);

439 i‡(
msgBufIdx
 > 0x31)

441 
ödex
 = 
msgBufIdx
 - 32;

442 
öãºu±MaskPå
 = &
ba£
->
IMASK2
;

446 
ödex
 = 
msgBufIdx
;

447 
öãºu±MaskPå
 = &
ba£
->
IMASK1
;

450 i‡(
íabÀ
)

451 *
öãºu±MaskPå
 |0x1 << 
ödex
;

453 *
öãºu±MaskPå
 &~(0x1 << 
ödex
);

454 
	}
}

462 
boﬁ
 
	$FLEXCAN_GëMsgBufSètusFœg
(
CAN_Ty≥
* 
ba£
, 
uöt8_t
 
msgBufIdx
)

464 vﬁ©ûê
uöt32_t
* 
öãºu±FœgPå
;

465 vﬁ©ûê
uöt8_t
 
ödex
;

467 
	`as£π
(
msgBufIdx
 < 
CAN_CS_COUNT
);

469 i‡(
msgBufIdx
 > 0x31)

471 
ödex
 = 
msgBufIdx
 - 32;

472 
öãºu±FœgPå
 = &
ba£
->
IFLAG2
;

476 
ödex
 = 
msgBufIdx
;

477 
öãºu±FœgPå
 = &
ba£
->
IFLAG1
;

480  (
boﬁ
)((*
öãºu±FœgPå
 >> 
ödex
) & 0x1);

481 
	}
}

489 
	$FLEXCAN_CÀ¨MsgBufSètusFœg
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
msgBufIdx
)

491 vﬁ©ûê
uöt8_t
 
ödex
;

493 
	`as£π
(
msgBufIdx
 < 
CAN_CS_COUNT
);

495 i‡(
msgBufIdx
 > 0x31)

496 
ödex
 = 
msgBufIdx
 - 32;

498 
ödex
 = 
msgBufIdx
;

503 
ba£
->
IFLAG1
 = 0x1 << 
ödex
;

504 
	}
}

512 
	$FLEXCAN_SëEºI¡Cmd
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
îr‹Ty≥
, 
boﬁ
 
íabÀ
)

514 
	`as£π
((
îr‹Ty≥
 & 
ÊexˇnI¡RxW¨nög
) ||

515 (
îr‹Ty≥
 & 
ÊexˇnI¡TxW¨nög
) ||

516 (
îr‹Ty≥
 & 
ÊexˇnI¡WakeUp
) ||

517 (
îr‹Ty≥
 & 
ÊexˇnI¡BusOff
) ||

518 (
îr‹Ty≥
 & 
ÊexˇnI¡Eº‹
));

520 i‡(
íabÀ
)

522 i‡(
îr‹Ty≥
 & 
ÊexˇnI¡RxW¨nög
)

524 
	`CAN_MCR_REG
(
ba£
Ë|
CAN_MCR_WRN_EN_MASK
;

525 
	`CAN_CTRL1_REG
(
ba£
Ë|
CAN_CTRL1_RWRN_MSK_MASK
;

528 i‡(
îr‹Ty≥
 & 
ÊexˇnI¡TxW¨nög
)

530 
	`CAN_MCR_REG
(
ba£
Ë|
CAN_MCR_WRN_EN_MASK
;

531 
	`CAN_CTRL1_REG
(
ba£
Ë|
CAN_CTRL1_TWRN_MSK_MASK
;

534 i‡(
îr‹Ty≥
 & 
ÊexˇnI¡WakeUp
)

535 
	`CAN_MCR_REG
(
ba£
Ë|
CAN_MCR_WAK_MSK_MASK
;

537 i‡(
îr‹Ty≥
 & 
ÊexˇnI¡BusOff
)

538 
	`CAN_CTRL1_REG
(
ba£
Ë|
CAN_CTRL1_BOFF_MSK_MASK
;

540 i‡(
îr‹Ty≥
 & 
ÊexˇnI¡Eº‹
)

541 
	`CAN_CTRL1_REG
(
ba£
Ë|
CAN_CTRL1_ERR_MSK_MASK
;

545 i‡(
îr‹Ty≥
 & 
ÊexˇnI¡RxW¨nög
)

546 
	`CAN_CTRL1_REG
(
ba£
Ë&~
CAN_CTRL1_RWRN_MSK_MASK
;

548 i‡(
îr‹Ty≥
 & 
ÊexˇnI¡TxW¨nög
)

549 
	`CAN_CTRL1_REG
(
ba£
Ë&~
CAN_CTRL1_TWRN_MSK_MASK
;

551 i‡(
îr‹Ty≥
 & 
ÊexˇnI¡WakeUp
)

552 
	`CAN_MCR_REG
(
ba£
Ë&~
CAN_MCR_WAK_MSK_MASK
;

554 i‡(
îr‹Ty≥
 & 
ÊexˇnI¡BusOff
)

555 
	`CAN_CTRL1_REG
(
ba£
Ë&~
CAN_CTRL1_BOFF_MSK_MASK
;

557 i‡(
îr‹Ty≥
 & 
ÊexˇnI¡Eº‹
)

558 
	`CAN_CTRL1_REG
(
ba£
Ë&~
CAN_CTRL1_ERR_MSK_MASK
;

560 
	}
}

568 
uöt32_t
 
	$FLEXCAN_GëEºSètusFœg
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
îrFœgs
)

570  
	`CAN_ESR1_REG
(
ba£
Ë& 
îrFœgs
;

571 
	}
}

579 
	$FLEXCAN_CÀ¨EºSètusFœg
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
îr‹Ty≥
)

584 
	`CAN_ESR1_REG
(
ba£
Ë
îr‹Ty≥
;

585 
	}
}

593 
	$FLEXCAN_GëEºCou¡î
(
CAN_Ty≥
* 
ba£
, 
uöt8_t
* 
txEº‹
, uöt8_t* 
rxEº‹
)

595 *
txEº‹
 = 
	`CAN_ECR_REG
(
ba£
Ë& 
CAN_ECR_Tx_Eº_Cou¡î_MASK
;

596 *
rxEº‹
 = (
	`CAN_ECR_REG
(
ba£
Ë& 
CAN_ECR_Rx_Eº_Cou¡î_MASK
) >> \

597 
CAN_ECR_Rx_Eº_Cou¡î_SHIFT
;

598 
	}
}

609 
	$FLEXCAN_E«bÀRxFifo
(
CAN_Ty≥
* 
ba£
, 
uöt8_t
 
numOfFûãrs
)

611 
uöt8_t
 
maxNumMb
, 
i
;

613 
	`as£π
(
numOfFûãrs
 <= 0xF);

616 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

619 
	`CAN_CTRL2_REG
(
ba£
Ë(CAN_CTRL2_REG(ba£Ë& ~
CAN_CTRL2_RFFN_MASK
Ë| 
	`CAN_CTRL2_RFFN
(
numOfFûãrs
);

622 
	`CAN_MCR_REG
(
ba£
Ë|
CAN_MCR_RFEN_MASK
;

625 
	`CAN_RXFGMASK_REG
(
ba£
Ë
CAN_RXFGMASK_FGM31_FGM0_MASK
;

627 
maxNumMb
 = (
	`CAN_MCR_REG
(
ba£
Ë& 
CAN_MCR_MAXMB_MASK
) + 1;

629 
i
 = 0; i < 
maxNumMb
; i++)

632 
	`CAN_RXIMR_REG
(
ba£
,
i
Ë
CAN_RXIMR0_RXIMR63_MI31_MI0_MASK
;

636 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

637 
	}
}

645 
	$FLEXCAN_DißbÀRxFifo
(
CAN_Ty≥
* 
ba£
)

648 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

651 
	`CAN_MCR_REG
(
ba£
Ë&~
CAN_MCR_RFEN_MASK
;

654 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

655 
	}
}

663 
	$FLEXCAN_SëRxFifoFûãrNum
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
numOfFûãrs
)

665 
	`as£π
(
numOfFûãrs
 <= 0xF);

668 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

671 
	`CAN_CTRL2_REG
(
ba£
Ë(CAN_CTRL2_REG(ba£Ë& ~
CAN_CTRL2_RFFN_MASK
Ë| 
	`CAN_CTRL2_RFFN
(
numOfFûãrs
);

674 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

675 
	}
}

683 
	$FLEXCAN_SëRxFifoFûãr
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
idF‹m©
, 
Êexˇn_id_èbÀ_t
 *
idFûãrTabÀ
)

686 
uöt32_t
 
i
, 
j
, 
numOfFûãrs
;

687 
uöt32_t
 
vÆ1
 = 0, 
vÆ2
 = 0, 
vÆ
 = 0;

688 vﬁ©ûê
uöt32_t
 *
fûãrTabÀ
;

690 
numOfFûãrs
 = (
	`CAN_CTRL2_REG
(
ba£
Ë& 
CAN_CTRL2_RFFN_MASK
Ë>> 
CAN_CTRL2_RFFN_SHIFT
;

692 
fûãrTabÀ
 = (vﬁ©ûê
uöt32_t
 *)&(
ba£
->
MB
[6]);

694 
	`CAN_MCR_REG
(
ba£
Ë|
	`CAN_MCR_IDAM
(
idF‹m©
);

696 
idF‹m©
)

698 
ÊexˇnRxFifoIdEÀmítF‹m©A
:

700 i‡(
idFûãrTabÀ
->
isRemŸeFøme
)

702 
vÆ
 = (
uöt32_t
)0x1 << 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT
;

704 i‡(
idFûãrTabÀ
->
isExãndedFøme
)

706 
vÆ
 |0x1 << 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT
;

708 
i
 = 0; i < 
	`RxFifoFûãrEÀmítNum
(
numOfFûãrs
); i++)

710 if(
idFûãrTabÀ
->
isExãndedFøme
)

712 
fûãrTabÀ
[
i
] = 
vÆ
 + ((*(
idFûãrTabÀ
->
idFûãr
 + i)) <<

713 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATA_EXT_SHIFT
 &

714 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATA_EXT_MASK
);

717 
fûãrTabÀ
[
i
] = 
vÆ
 + ((*(
idFûãrTabÀ
->
idFûãr
 + i)) <<

718 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATA_STD_SHIFT
 &

719 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATA_STD_MASK
);

723 
ÊexˇnRxFifoIdEÀmítF‹m©B
:

726 i‡(
idFûãrTabÀ
->
isRemŸeFøme
)

728 
vÆ1
 = (
uöt32_t
)0x1 << 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATAB_RTR_SHIFT
;

729 
vÆ2
 = 0x1 << 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_RTR_SHIFT
;

731 i‡(
idFûãrTabÀ
->
isExãndedFøme
)

733 
vÆ1
 |0x1 << 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATAB_IDE_SHIFT
;

734 
vÆ2
 |0x1 << 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_IDE_SHIFT
;

736 
j
 = 0;

737 
i
 = 0; i < 
	`RxFifoFûãrEÀmítNum
(
numOfFûãrs
); i++)

739 i‡(
idFûãrTabÀ
->
isExãndedFøme
)

741 
fûãrTabÀ
[
i
] = 
vÆ1
 + (((*(
idFûãrTabÀ
->
idFûãr
 + 
j
)) &

742 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK
) <<

743 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT1
);

744 
fûãrTabÀ
[
i
] |
vÆ2
 + (((*(
idFûãrTabÀ
->
idFûãr
 + 
j
 + 1)) &

745 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_EXT_MASK
) <<

746 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_EXT_SHIFT2
);

749 
fûãrTabÀ
[
i
] = 
vÆ1
 + (((*(
idFûãrTabÀ
->
idFûãr
 + 
j
)) &

750 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_STD_MASK
) <<

751 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT1
);

752 
fûãrTabÀ
[
i
] |
vÆ2
 + (((*(
idFûãrTabÀ
->
idFûãr
 + 
j
 + 1)) &

753 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_STD_MASK
) <<

754 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATB_STD_SHIFT2
);

756 
j
 = j + 2;

759 
ÊexˇnRxFifoIdEÀmítF‹m©C
:

761 
j
 = 0;

762 
i
 = 0; i < 
	`RxFifoFûãrEÀmítNum
(
numOfFûãrs
); i++)

764 
fûãrTabÀ
[
i
] = (((*(
idFûãrTabÀ
->
idFûãr
 + 
j
)) &

765 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATC_MASK
) <<

766 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATC_SHIFT1
);

767 
fûãrTabÀ
[
i
] = (((*(
idFûãrTabÀ
->
idFûãr
 + 
j
 + 1)) &

768 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATC_MASK
) <<

769 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATC_SHIFT2
);

770 
fûãrTabÀ
[
i
] = (((*(
idFûãrTabÀ
->
idFûãr
 + 
j
 + 2)) &

771 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATC_MASK
) <<

772 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATC_SHIFT3
);

773 
fûãrTabÀ
[
i
] = (((*(
idFûãrTabÀ
->
idFûãr
 + 
j
 + 3)) &

774 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATC_MASK
) <<

775 
FLEXCAN_RX_FIFO_ID_FILTER_FORMATC_SHIFT4
);

776 
j
 = j + 4;

779 
ÊexˇnRxFifoIdEÀmítF‹m©D
:

783 
	}
}

791 
Êexˇn_msgbuf_t
* 
	$FLEXCAN_GëRxFifoPå
(
CAN_Ty≥
* 
ba£
)

794  (
Êexˇn_msgbuf_t
*)&
ba£
->
MB
;

795 
	}
}

803 
uöt16_t
 
	$FLEXCAN_GëRxFifoInfo
(
CAN_Ty≥
* 
ba£
)

805  
	`CAN_RXFIR_REG
(
ba£
Ë& 
CAN_RXFIR_IDHIT_MASK
;

806 
	}
}

817 
	$FLEXCAN_SëRxMaskMode
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
mode
)

819 
	`as£π
((
mode
 =
ÊexˇnRxMaskGlobÆ
) ||

820 (
mode
 =
ÊexˇnRxMaskIndividuÆ
));

823 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

825 i‡(
mode
 =
ÊexˇnRxMaskIndividuÆ
)

826 
	`CAN_MCR_REG
(
ba£
Ë|
CAN_MCR_IRMQ_MASK
;

828 
	`CAN_MCR_REG
(
ba£
Ë&~
CAN_MCR_IRMQ_MASK
;

831 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

832 
	}
}

840 
	$FLEXCAN_SëRxMaskRåCmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

843 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

845 i‡(
íabÀ
)

846 
	`CAN_CTRL2_REG
(
ba£
Ë|
CAN_CTRL2_EACEN_MASK
;

848 
	`CAN_CTRL2_REG
(
ba£
Ë&~
CAN_CTRL2_EACEN_MASK
;

851 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

852 
	}
}

860 
	$FLEXCAN_SëRxGlobÆMask
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
mask
)

863 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

866 
	`CAN_RXMGMASK_REG
(
ba£
Ë
mask
;

869 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

870 
	}
}

879 
	$FLEXCAN_SëRxIndividuÆMask
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
msgBufIdx
, uöt32_à
mask
)

881 
	`as£π
(
msgBufIdx
 < 
CAN_RXIMR_COUNT
);

884 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

886 
	`CAN_RXIMR_REG
(
ba£
,
msgBufIdx
Ë
mask
;

889 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

890 
	}
}

898 
	$FLEXCAN_SëRxMsgBuff14Mask
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
mask
)

901 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

904 
	`CAN_RX14MASK_REG
(
ba£
Ë
mask
;

907 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

908 
	}
}

916 
	$FLEXCAN_SëRxMsgBuff15Mask
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
mask
)

919 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

922 
	`CAN_RX15MASK_REG
(
ba£
Ë
mask
;

925 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

926 
	}
}

934 
	$FLEXCAN_SëRxFifoGlobÆMask
(
CAN_Ty≥
* 
ba£
, 
uöt32_t
 
mask
)

937 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

940 
	`CAN_RXFGMASK_REG
(
ba£
Ë
mask
;

943 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

944 
	}
}

955 
	$FLEXCAN_SëSñfWakeUpCmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
ÕfE«bÀ
, boﬁ 
íabÀ
)

958 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

960 i‡(
ÕfE«bÀ
)

961 
	`CAN_MCR_REG
(
ba£
Ë|
CAN_MCR_WAK_SRC_MASK
;

963 
	`CAN_MCR_REG
(
ba£
Ë&~
CAN_MCR_WAK_SRC_MASK
;

965 i‡(
íabÀ
)

966 
	`CAN_MCR_REG
(
ba£
Ë|
CAN_MCR_SLF_WAK_MASK
;

968 
	`CAN_MCR_REG
(
ba£
Ë&~
CAN_MCR_SLF_WAK_MASK
;

971 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

972 
	}
}

980 
	$FLEXCAN_SëSñfRe˚±i⁄Cmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

983 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

985 i‡(
íabÀ
)

986 
	`CAN_MCR_REG
(
ba£
Ë&~
CAN_MCR_SRX_DIS_MASK
;

988 
	`CAN_MCR_REG
(
ba£
Ë|
CAN_MCR_SRX_DIS_MASK
;

991 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

992 
	}
}

1000 
	$FLEXCAN_SëRxVŸeCmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

1003 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

1005 i‡(
íabÀ
)

1006 
	`CAN_CTRL1_REG
(
ba£
Ë|
CAN_CTRL1_SMP_MASK
;

1008 
	`CAN_CTRL1_REG
(
ba£
Ë&~
CAN_CTRL1_SMP_MASK
;

1011 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

1012 
	}
}

1020 
	$FLEXCAN_SëAutoBusOffRecovîCmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

1022 i‡(
íabÀ
)

1023 
	`CAN_CTRL1_REG
(
ba£
Ë&~
CAN_CTRL1_BOFF_MSK_MASK
;

1025 
	`CAN_CTRL1_REG
(
ba£
Ë|
CAN_CTRL1_BOFF_MSK_MASK
;

1026 
	}
}

1034 
	$FLEXCAN_SëTimeSyncCmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

1037 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

1039 i‡(
íabÀ
)

1040 
	`CAN_CTRL1_REG
(
ba£
Ë|
CAN_CTRL1_TSYN_MASK
;

1042 
	`CAN_CTRL1_REG
(
ba£
Ë&~
CAN_CTRL1_TSYN_MASK
;

1045 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

1046 
	}
}

1054 
	$FLEXCAN_SëAutoRemŸeRe•⁄£Cmd
(
CAN_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

1057 
	`FLEXCAN_E¡îFªezeMode
(
ba£
);

1059 i‡(
íabÀ
)

1060 
	`CAN_CTRL2_REG
(
ba£
Ë&~
CAN_CTRL2_RRS_MASK
;

1062 
	`CAN_CTRL2_REG
(
ba£
Ë|
CAN_CTRL2_RRS_MASK
;

1065 
	`FLEXCAN_ExôFªezeMode
(
ba£
);

1066 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\gpio_imx.c

31 
	~"gpio_imx.h
"

47 
	$GPIO_Inô
(
GPIO_Ty≥
* 
ba£
, c⁄° 
gpio_öô_c⁄fig_t
* 
öôC⁄fig
)

49 
uöt32_t
 
pö
;

50 vﬁ©ûê
uöt32_t
 *
i¸
;

53 
	`GPIO_IMR_REG
(
ba£
) = 0;

54 
	`GPIO_EDGE_SEL_REG
(
ba£
) = 0;

57 
pö
 = 
öôC⁄fig
->pin;

60 i‡(
öôC⁄fig
->
dúe˘i⁄
 =
gpioDigôÆOuçut
)

61 
	`GPIO_GDIR_REG
(
ba£
Ë|(1U << 
pö
);

63 
	`GPIO_GDIR_REG
(
ba£
Ë&~(1U << 
pö
);

66 if(
pö
 < 16)

67 
i¸
 = &
	`GPIO_ICR1_REG
(
ba£
);

70 
i¸
 = &
	`GPIO_ICR2_REG
(
ba£
);

71 
pö
 -= 16;

73 
öôC⁄fig
->
öãºu±Mode
)

75 (
gpioI¡LowLevñ
):

77 *
i¸
 &~(0x3<<(2*
pö
));

80 (
gpioI¡HighLevñ
):

82 *
i¸
 = (*i¸ & (~(0x3<<(2*
pö
)))) | (0x1<<(2*pin));

85 (
gpioI¡RisögEdge
):

87 *
i¸
 = (*i¸ & (~(0x3<<(2*
pö
)))) | (0x2<<(2*pin));

90 (
gpioI¡FÆlögEdge
):

92 *
i¸
 |(0x3<<(2*
pö
));

95 (
gpioNoI¡mode
):

100 
	}
}

111 
	$GPIO_WrôePöOuçut
(
GPIO_Ty≥
* 
ba£
, 
uöt32_t
 
pö
, 
gpio_pö_a˘i⁄_t
 
pöVÆ
)

113 
	`as£π
(
pö
 < 32);

114 i‡(
pöVÆ
 =
gpioPöSë
)

116 
	`GPIO_DR_REG
(
ba£
Ë|(1U << 
pö
);

120 
	`GPIO_DR_REG
(
ba£
Ë&~(1U << 
pö
);

122 
	}
}

133 
	$GPIO_SëPöI¡Mode
(
GPIO_Ty≥
* 
ba£
, 
uöt32_t
 
pö
, 
boﬁ
 
íabÀ
)

135 
	`as£π
(
pö
 < 32);

137 if(
íabÀ
)

138 
	`GPIO_IMR_REG
(
ba£
Ë|(1U << 
pö
);

140 
	`GPIO_IMR_REG
(
ba£
Ë&~(1U << 
pö
);

141 
	}
}

150 
	$GPIO_SëI¡EdgeSñe˘
(
GPIO_Ty≥
* 
ba£
, 
uöt32_t
 
pö
, 
boﬁ
 
íabÀ
)

152 
	`as£π
(
pö
 < 32);

154 if(
íabÀ
)

155 
	`GPIO_EDGE_SEL_REG
(
ba£
Ë|(1U << 
pö
);

157 
	`GPIO_EDGE_SEL_REG
(
ba£
Ë&~(1U << 
pö
);

158 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\i2c_imx.c

31 
	~"i2c_imx.h
"

36 c⁄° 
uöt32_t
 
	gi2cClkDivTab
[][2] =

60 
	$I2C_Inô
(
I2C_Ty≥
* 
ba£
, c⁄° 
i2c_öô_c⁄fig_t
* 
öôC⁄fig
)

62 
	`as£π
(
öôC⁄fig
);

65 
	`I2C_I2CR_REG
(
ba£
Ë&~
I2C_I2CR_IEN_MASK
;

68 
	`I2C_Deöô
(
ba£
);

71 
	`I2C_SëSœveAddªss
(
ba£
, 
öôC⁄fig
->
¶aveAddªss
);

74 
	`I2C_SëBaudR©e
(
ba£
, 
öôC⁄fig
->
˛ockR©e
, inôC⁄fig->
baudR©e
);

75 
	}
}

84 
	$I2C_Deöô
(
I2C_Ty≥
* 
ba£
)

87 
	`I2C_I2CR_REG
(
ba£
Ë&~
I2C_I2CR_IEN_MASK
;

90 
	`I2C_IADR_REG
(
ba£
) = 0x0;

91 
	`I2C_IFDR_REG
(
ba£
) = 0x0;

92 
	`I2C_I2CR_REG
(
ba£
) = 0x0;

93 
	}
}

101 
	$I2C_SëBaudR©e
(
I2C_Ty≥
* 
ba£
, 
uöt32_t
 
˛ockR©e
, uöt32_à
baudR©e
)

103 
uöt32_t
 
˛ockDiv
;

104 
uöt8_t
 
˛kDivIndex
 = 0;

106 
	`as£π
(
baudR©e
 <= 400000);

109 
˛ockDiv
 = 
˛ockR©e
 / 
baudR©e
;

111 i‡(
˛ockDiv
 < 
i2cClkDivTab
[0][0])

114 
˛kDivIndex
 = 0;

116 i‡(
˛ockDiv
 > 
i2cClkDivTab
[(i2cClkDivTab)/(i2cClkDivTab[0]) - 1][0])

119 
˛kDivIndex
 = (
i2cClkDivTab
)/(i2cClkDivTab[0]) - 1;

123 
i2cClkDivTab
[
˛kDivIndex
][0] < 
˛ockDiv
)

124 
˛kDivIndex
++;

127 
	`I2C_IFDR_REG
(
ba£
Ë
i2cClkDivTab
[
˛kDivIndex
][1];

128 
	}
}

140 
	$I2C_SëAckBô
(
I2C_Ty≥
* 
ba£
, 
boﬁ
 
ack
)

142 i‡(
ack
)

143 
	`I2C_I2CR_REG
(
ba£
Ë&~
I2C_I2CR_TXAK_MASK
;

145 
	`I2C_I2CR_REG
(
ba£
Ë|
I2C_I2CR_TXAK_MASK
;

146 
	}
}

157 
	$I2C_SëI¡Cmd
(
I2C_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

159 i‡(
íabÀ
)

160 
	`I2C_I2CR_REG
(
ba£
Ë|
I2C_I2CR_IIEN_MASK
;

162 
	`I2C_I2CR_REG
(
ba£
Ë&~
I2C_I2CR_IIEN_MASK
;

163 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\lmem.c

31 
	~"lmem.h
"

36 
	#LMEM_CACHE_LINE_SIZE
 32

	)

51 
	$LMEM_E«bÀSy°emCache
(
LMEM_Ty≥
 *
ba£
)

55 
	`LMEM_PSCCR_REG
(
ba£
Ë
LMEM_PSCCR_INVW1_MASK
 | 
LMEM_PSCCR_INVW0_MASK
;

56 
	`LMEM_PSCCR_REG
(
ba£
Ë|
LMEM_PSCCR_GO_MASK
;

59 
	`LMEM_PSCCR_REG
(
ba£
Ë& 
LMEM_PSCCR_GO_MASK
);

62 
	`LMEM_PSCCR_REG
(
ba£
Ë(
LMEM_PSCCR_ENWRBUF_MASK
 | 
LMEM_PSCCR_ENCACHE_MASK
);

63 
	`__ISB
();

64 
	`__DSB
();

65 
	}
}

73 
	$LMEM_DißbÀSy°emCache
(
LMEM_Ty≥
 *
ba£
)

75 
	`LMEM_PSCCR_REG
(
ba£
) = 0x0;

76 
	`__ISB
();

77 
	`__DSB
();

78 
	}
}

86 
	$LMEM_FlushSy°emCache
(
LMEM_Ty≥
 *
ba£
)

88 
	`LMEM_PSCCR_REG
(
ba£
Ë|
LMEM_PSCCR_PUSHW0_MASK
 | 
LMEM_PSCCR_PUSHW1_MASK
 ;

89 
	`LMEM_PSCCR_REG
(
ba£
Ë|
LMEM_PSCCR_GO_MASK
;

92 
	`LMEM_PSCCR_REG
(
ba£
Ë& 
LMEM_PSCCR_GO_MASK
);

93 
	}
}

101 
	$LMEM_FlushSy°emCacheLöe
(
LMEM_Ty≥
 *
ba£
, *
addªss
)

103 
	`as£π
((
uöt32_t
)
addªss
 >= 0x20000000);

106 
	`LMEM_PSCLCR_REG
(
ba£
Ë
LMEM_PSCLCR_LADSEL_MASK
 | 
	`LMEM_PSCLCR_LCMD
(2);

108 
	`LMEM_PSCSAR_REG
(
ba£
Ë((
uöt32_t
)
addªss
 & 
LMEM_PSCSAR_PHYADDR_MASK
Ë| 
LMEM_PSCSAR_LGO_MASK
;

111 
	`LMEM_PSCSAR_REG
(
ba£
Ë& 
LMEM_PSCSAR_LGO_MASK
);

112 
	}
}

123 
	$LMEM_FlushSy°emCacheLöes
(
LMEM_Ty≥
 *
ba£
, *
addªss
, 
uöt32_t
 
Àngth
)

125 *
ídAddªss
 = (*)((
uöt32_t
)
addªss
 + 
Àngth
);

127 
addªss
 = (*Ë((
uöt32_t
Ôddªs†& ~(
LMEM_CACHE_LINE_SIZE
 - 1));

130 
	`LMEM_FlushSy°emCacheLöe
(
ba£
, 
addªss
);

131 
addªss
 = (*Ë((
uöt32_t
Ôddªs†+ 
LMEM_CACHE_LINE_SIZE
);

132 } 
addªss
 < 
ídAddªss
);

133 
	}
}

141 
	$LMEM_InvÆid©eSy°emCache
(
LMEM_Ty≥
 *
ba£
)

143 
	`LMEM_PSCCR_REG
(
ba£
Ë|
LMEM_PSCCR_INVW0_MASK
 | 
LMEM_PSCCR_INVW1_MASK
;

144 
	`LMEM_PSCCR_REG
(
ba£
Ë|
LMEM_PSCCR_GO_MASK
;

147 
	`LMEM_PSCCR_REG
(
ba£
Ë& 
LMEM_PSCCR_GO_MASK
);

148 
	`__ISB
();

149 
	`__DSB
();

150 
	}
}

159 
	$LMEM_InvÆid©eSy°emCacheLöe
(
LMEM_Ty≥
 *
ba£
, *
addªss
)

161 
	`as£π
((
uöt32_t
)
addªss
 >= 0x20000000);

164 
	`LMEM_PSCLCR_REG
(
ba£
Ë
LMEM_PSCLCR_LADSEL_MASK
 | 
	`LMEM_PSCLCR_LCMD
(1);

166 
	`LMEM_PSCSAR_REG
(
ba£
Ë((
uöt32_t
)
addªss
 & 
LMEM_PSCSAR_PHYADDR_MASK
Ë| 
LMEM_PSCSAR_LGO_MASK
;

169 
	`LMEM_PSCSAR_REG
(
ba£
Ë& 
LMEM_PSCSAR_LGO_MASK
);

170 
	}
}

181 
	$LMEM_InvÆid©eSy°emCacheLöes
(
LMEM_Ty≥
 *
ba£
, *
addªss
, 
uöt32_t
 
Àngth
)

183 *
ídAddªss
 = (*)((
uöt32_t
)
addªss
 + 
Àngth
);

184 
addªss
 = (*)((
uöt32_t
Ôddªs†& ~(
LMEM_CACHE_LINE_SIZE
 - 1));

188 
	`LMEM_InvÆid©eSy°emCacheLöe
(
ba£
, 
addªss
);

189 
addªss
 = (*)((
uöt32_t
Ôddªs†+ 
LMEM_CACHE_LINE_SIZE
);

190 } 
addªss
 < 
ídAddªss
);

191 
	`__ISB
();

192 
	`__DSB
();

193 
	}
}

201 
	$LMEM_E«bÀCodeCache
(
LMEM_Ty≥
 *
ba£
)

205 
	`LMEM_PCCCR_REG
(
ba£
Ë
LMEM_PCCCR_INVW1_MASK
 | 
LMEM_PCCCR_INVW0_MASK
;

206 
	`LMEM_PCCCR_REG
(
ba£
Ë|
LMEM_PCCCR_GO_MASK
;

209 
	`LMEM_PCCCR_REG
(
ba£
Ë& 
LMEM_PCCCR_GO_MASK
);

212 
	`LMEM_PCCCR_REG
(
ba£
Ë(
LMEM_PCCCR_ENWRBUF_MASK
 | 
LMEM_PCCCR_ENCACHE_MASK
);

213 
	`__ISB
();

214 
	`__DSB
();

215 
	}
}

223 
	$LMEM_DißbÀCodeCache
(
LMEM_Ty≥
 *
ba£
)

225 
	`LMEM_PCCCR_REG
(
ba£
) = 0x0;

226 
	`__ISB
();

227 
	`__DSB
();

228 
	}
}

236 
	$LMEM_FlushCodeCache
(
LMEM_Ty≥
 *
ba£
)

238 
	`LMEM_PCCCR_REG
(
ba£
Ë|
LMEM_PCCCR_PUSHW0_MASK
 | 
LMEM_PCCCR_PUSHW1_MASK
;

239 
	`LMEM_PCCCR_REG
(
ba£
Ë|
LMEM_PCCCR_GO_MASK
;

242 
	`LMEM_PCCCR_REG
(
ba£
Ë& 
LMEM_PCCCR_GO_MASK
);

243 
	}
}

252 
	$LMEM_FlushCodeCacheLöe
(
LMEM_Ty≥
 *
ba£
, *
addªss
)

254 
	`as£π
((
uöt32_t
)
addªss
 < 0x20000000);

257 
	`LMEM_PCCLCR_REG
(
ba£
Ë
LMEM_PCCLCR_LADSEL_MASK
 | 
	`LMEM_PCCLCR_LCMD
(2);

259 
	`LMEM_PCCSAR_REG
(
ba£
Ë((
uöt32_t
)
addªss
 & 
LMEM_PCCSAR_PHYADDR_MASK
Ë| 
LMEM_PCCSAR_LGO_MASK
;

262 
	`LMEM_PCCSAR_REG
(
ba£
Ë& 
LMEM_PCCSAR_LGO_MASK
);

263 
	}
}

274 
	$LMEM_FlushCodeCacheLöes
(
LMEM_Ty≥
 *
ba£
, *
addªss
, 
uöt32_t
 
Àngth
)

276 *
ídAddªss
 = (*)((
uöt32_t
)
addªss
 + 
Àngth
);

278 
addªss
 = (*Ë((
uöt32_t
Ôddªs†& ~(
LMEM_CACHE_LINE_SIZE
 - 1));

281 
	`LMEM_FlushCodeCacheLöe
(
ba£
, 
addªss
);

282 
addªss
 = (*)((
uöt32_t
Ôddªs†+ 
LMEM_CACHE_LINE_SIZE
);

283 } 
addªss
 < 
ídAddªss
);

284 
	}
}

292 
	$LMEM_InvÆid©eCodeCache
(
LMEM_Ty≥
 *
ba£
)

294 
	`LMEM_PCCCR_REG
(
ba£
Ë|
LMEM_PCCCR_INVW0_MASK
 | 
LMEM_PCCCR_INVW1_MASK
;

295 
	`LMEM_PCCCR_REG
(
ba£
Ë|
LMEM_PCCCR_GO_MASK
;

298 
	`LMEM_PCCCR_REG
(
ba£
Ë& 
LMEM_PCCCR_GO_MASK
);

299 
	`__ISB
();

300 
	`__DSB
();

301 
	}
}

310 
	$LMEM_InvÆid©eCodeCacheLöe
(
LMEM_Ty≥
 *
ba£
, *
addªss
)

312 
	`as£π
((
uöt32_t
)
addªss
 < 0x20000000);

315 
	`LMEM_PCCLCR_REG
(
ba£
Ë
LMEM_PCCLCR_LADSEL_MASK
 | 
	`LMEM_PCCLCR_LCMD
(1);

317 
	`LMEM_PCCSAR_REG
(
ba£
Ë((
uöt32_t
)
addªss
 & 
LMEM_PCCSAR_PHYADDR_MASK
Ë| 
LMEM_PCCSAR_LGO_MASK
;

320 
	`LMEM_PCCSAR_REG
(
ba£
Ë& 
LMEM_PCCSAR_LGO_MASK
);

321 
	}
}

332 
	$LMEM_InvÆid©eCodeCacheLöes
(
LMEM_Ty≥
 *
ba£
, *
addªss
, 
uöt32_t
 
Àngth
)

334 *
ídAddªss
 = (*)((
uöt32_t
)
addªss
 + 
Àngth
);

335 
addªss
 = (*)((
uöt32_t
Ôddªs†& ~(
LMEM_CACHE_LINE_SIZE
 - 1));

339 
	`LMEM_InvÆid©eCodeCacheLöe
(
ba£
, 
addªss
);

340 
addªss
 = (*)((
uöt32_t
Ôddªs†+ 
LMEM_CACHE_LINE_SIZE
);

341 } 
addªss
 < 
ídAddªss
);

342 
	`__ISB
();

343 
	`__DSB
();

344 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\mu_imx.c

31 
	~"mu_imx.h
"

39 
mu_°©us_t
 
	$MU_TrySídMsg
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ªgIndex
, uöt32_à
msg
)

41 
	`as£π
(
ªgIndex
 < 
MU_TR_COUNT
);

44 if(
	`MU_IsTxEm±y
(
ba£
, 
ªgIndex
))

46 
ba£
->
TR
[
ªgIndex
] = 
msg
;

47  
kSètus_MU_Suc˚ss
;

50  
kSètus_MU_TxNŸEm±y
;

51 
	}
}

59 
	$MU_SídMsg
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ªgIndex
, uöt32_à
msg
)

61 
	`as£π
(
ªgIndex
 < 
MU_TR_COUNT
);

62 
uöt32_t
 
mask
 = 
MU_SR_TE0_MASK
 >> 
ªgIndex
;

64 !(
ba£
->
SR
 & 
mask
)) { }

65 
ba£
->
TR
[
ªgIndex
] = 
msg
;

66 
	}
}

74 
mu_°©us_t
 
	$MU_TryRe˚iveMsg
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ªgIndex
, uöt32_à*
msg
)

76 
	`as£π
(
ªgIndex
 < 
MU_RR_COUNT
);

79 if(
	`MU_IsRxFuŒ
(
ba£
, 
ªgIndex
))

81 *
msg
 = 
ba£
->
RR
[
ªgIndex
];

82  
kSètus_MU_Suc˚ss
;

85  
kSètus_MU_RxNŸFuŒ
;

86 
	}
}

94 
	$MU_Re˚iveMsg
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ªgIndex
, uöt32_à*
msg
)

96 
	`as£π
(
ªgIndex
 < 
MU_TR_COUNT
);

97 
uöt32_t
 
mask
 = 
MU_SR_RF0_MASK
 >> 
ªgIndex
;

100 !(
ba£
->
SR
 & 
mask
)) { }

101 *
msg
 = 
ba£
->
RR
[
ªgIndex
];

102 
	}
}

110 
mu_°©us_t
 
	$MU_TriggîGíîÆI¡
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
ödex
)

113 i‡(
	`MU_IsGíîÆI¡Ac˚±ed
(
ba£
, 
ödex
))

116 
ba£
->
CR
 = (ba£->CR & ~
MU_CR_GIRn_MASK
)

117 | (
MU_CR_GIR0_MASK
>>
ödex
);

118  
kSètus_MU_Suc˚ss
;

121  
kSètus_MU_I¡Pídög
;

122 
	}
}

130 
mu_°©us_t
 
	$MU_TrySëFœgs
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
Êags
)

132 if(
	`MU_IsFœgPídög
(
ba£
))

134  
kSètus_MU_FœgPídög
;

137 
ba£
->
CR
 = (ba£->CR & ~(
MU_CR_GIRn_MASK
 | 
MU_CR_Fn_MASK
)Ë| 
Êags
;

138  
kSètus_MU_Suc˚ss
;

139 
	}
}

147 
	$MU_SëFœgs
(
MU_Ty≥
 * 
ba£
, 
uöt32_t
 
Êags
)

149 
	`MU_IsFœgPídög
(
ba£
)) { }

150 
ba£
->
CR
 = (ba£->CR & ~(
MU_CR_GIRn_MASK
 | 
MU_CR_Fn_MASK
)Ë| 
Êags
;

151 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\rdc.c

31 
	~"rdc.h
"

43 
	$RDC_SëMrAc˚ss
(
RDC_Ty≥
 * 
ba£
, 
uöt32_t
 
mr
, uöt32_à
°¨tAddr
, uöt32_à
ídAddr
,

44 
uöt8_t
 
≥rm
, 
boﬁ
 
íabÀ
, boﬁ 
lock
)

46 
ba£
->
MR
[
mr
].
MRSA
 = 
°¨tAddr
;

47 
ba£
->
MR
[
mr
].
MREA
 = 
ídAddr
;

48 
ba£
->
MR
[
mr
].
MRC
 = 
≥rm
 | (
íabÀ
 ? 
RDC_MRC_ENA_MASK
 : 0Ë| (
lock
 ? 
RDC_MRC_LCK_MASK
 : 0);

49 
	}
}

57 
uöt8_t
 
	$RDC_GëMrAc˚ss
(
RDC_Ty≥
 * 
ba£
, 
uöt32_t
 
mr
, uöt32_à*
°¨tAddr
, uöt32_à*
ídAddr
)

59 i‡(
°¨tAddr
)

60 *
°¨tAddr
 = 
ba£
->
MR
[
mr
].
MRSA
;

61 i‡(
ídAddr
)

62 *
ídAddr
 = 
ba£
->
MR
[
mr
].
MREA
;

64  
ba£
->
MR
[
mr
].
MRC
 & 0xFF;

65 
	}
}

73 
boﬁ
 
	$RDC_GëViﬁ©i⁄Sètus
(
RDC_Ty≥
 * 
ba£
, 
uöt32_t
 
mr
, uöt32_à*
viﬁ©i⁄Addr
, uöt32_à*
viﬁ©i⁄Domaö
)

75 
uöt32_t
 
mrvs
;

77 
mrvs
 = 
ba£
->
MR
[
mr
].
MRVS
;

79 i‡(
viﬁ©i⁄Addr
)

80 *
viﬁ©i⁄Addr
 = 
mrvs
 & 
RDC_MRVS_VADR_MASK
;

81 i‡(
viﬁ©i⁄Domaö
)

82 *
viﬁ©i⁄Domaö
 = (
mrvs
 & 
RDC_MRVS_VDID_MASK
Ë>> 
RDC_MRVS_VDID_SHIFT
;

84  (
boﬁ
)(
mrvs
 & 
RDC_MRVS_AD_MASK
);

85 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\rdc_semaphore.c

31 
	~<as£π.h
>

32 
	~"rdc_£m≠h‹e.h
"

41 
RDC_SEMAPHORE_Ty≥
 *
	$RDC_SEMAPHORE_GëG©e
(
uöt32_t
 *
pd≠
)

43 
RDC_SEMAPHORE_Ty≥
 *
£m≠h‹e
;

45 i‡(*
pd≠
 < 64)

46 
£m≠h‹e
 = 
RDC_SEMAPHORE1
;

49 
£m≠h‹e
 = 
RDC_SEMAPHORE2
;

50 *
pd≠
 -= 64;

53  
£m≠h‹e
;

54 
	}
}

62 
rdc_£m≠h‹e_°©us_t
 
	$RDC_SEMAPHORE_TryLock
(
uöt32_t
 
pd≠
)

64 
RDC_SEMAPHORE_Ty≥
 *
£m≠h‹e
;

65 
uöt32_t
 
ödex
 = 
pd≠
;

67 
£m≠h‹e
 = 
	`RDC_SEMAPHORE_GëG©e
(&
ödex
);

69 
£m≠h‹e
->
GATE
[
ödex
] = 
	`RDC_SEMAPHORE_GATE_GTFSM
(
RDC_SEMAPHORE_MASTER_SELF
 + 1);

71  ((
£m≠h‹e
->
GATE
[
ödex
] & 
RDC_SEMAPHORE_GATE_GTFSM_MASK
) ==

72 
	`RDC_SEMAPHORE_GATE_GTFSM
(
RDC_SEMAPHORE_MASTER_SELF
 + 1)) ?

73 
°©usRdcSem≠h‹eSuc˚ss
 : 
°©usRdcSem≠h‹eBusy
;

74 
	}
}

83 
	$RDC_SEMAPHORE_Lock
(
uöt32_t
 
pd≠
)

85 
RDC_SEMAPHORE_Ty≥
 *
£m≠h‹e
;

86 
uöt32_t
 
ödex
 = 
pd≠
;

88 
£m≠h‹e
 = 
	`RDC_SEMAPHORE_GëG©e
(&
ödex
);

92 
£m≠h‹e
->
GATE
[
ödex
] & 
RDC_SEMAPHORE_GATE_GTFSM_MASK
) { }

93 
£m≠h‹e
->
GATE
[
ödex
] = 
	`RDC_SEMAPHORE_GATE_GTFSM
(
RDC_SEMAPHORE_MASTER_SELF
 + 1);

94 } (
£m≠h‹e
->
GATE
[
ödex
] & 
RDC_SEMAPHORE_GATE_GTFSM_MASK
) !=

95 
	`RDC_SEMAPHORE_GATE_GTFSM
(
RDC_SEMAPHORE_MASTER_SELF
 + 1));

96 
	}
}

104 
	$RDC_SEMAPHORE_U∆ock
(
uöt32_t
 
pd≠
)

106 
RDC_SEMAPHORE_Ty≥
 *
£m≠h‹e
;

107 
uöt32_t
 
ödex
 = 
pd≠
;

109 
£m≠h‹e
 = 
	`RDC_SEMAPHORE_GëG©e
(&
ödex
);

111 
£m≠h‹e
->
GATE
[
ödex
] = 
	`RDC_SEMAPHORE_GATE_GTFSM
(0);

112 
	}
}

120 
uöt32_t
 
	$RDC_SEMAPHORE_GëLockDomaöID
(
uöt32_t
 
pd≠
)

122 
RDC_SEMAPHORE_Ty≥
 *
£m≠h‹e
;

123 
uöt32_t
 
ödex
 = 
pd≠
;

125 
£m≠h‹e
 = 
	`RDC_SEMAPHORE_GëG©e
(&
ödex
);

127  (
£m≠h‹e
->
GATE
[
ödex
] & 
RDC_SEMAPHORE_GATE_LDOM_MASK
Ë>> 
RDC_SEMAPHORE_GATE_LDOM_SHIFT
;

128 
	}
}

136 
uöt32_t
 
	$RDC_SEMAPHORE_GëLockMa°î
(
uöt32_t
 
pd≠
)

138 
RDC_SEMAPHORE_Ty≥
 *
£m≠h‹e
;

139 
uöt32_t
 
ödex
 = 
pd≠
;

140 
uöt8_t
 
ma°î
;

142 
£m≠h‹e
 = 
	`RDC_SEMAPHORE_GëG©e
(&
ödex
);

144 
ma°î
 = (
£m≠h‹e
->
GATE
[
ödex
] & 
RDC_SEMAPHORE_GATE_GTFSM_MASK
Ë>> 
RDC_SEMAPHORE_GATE_GTFSM_SHIFT
;

146  
ma°î
 =0 ? 
RDC_SEMAPHORE_MASTER_NONE
 : master - 1;

147 
	}
}

155 
	$RDC_SEMAPHORE_Re£t
(
uöt32_t
 
pd≠
)

157 
RDC_SEMAPHORE_Ty≥
 *
£m≠h‹e
;

158 
uöt32_t
 
ödex
 = 
pd≠
;

160 
£m≠h‹e
 = 
	`RDC_SEMAPHORE_GëG©e
(&
ödex
);

163 
	`as£π
 ((
£m≠h‹e
->
RSTGT_R
 & 
RDC_SEMAPHORE_RSTGT_R_RSTGSM_MASK
) == 0);

165 
£m≠h‹e
->
RSTGT_W
 = 0xE2;

166 
£m≠h‹e
->
RSTGT_W
 = 0x1D | 
	`RDC_SEMAPHORE_RSTGT_W_RSTGTN
(
ödex
);

167 
	}
}

176 
	$RDC_SEMAPHORE_Re£tAŒ
(
RDC_SEMAPHORE_Ty≥
 *
ba£
)

179 
	`as£π
 ((
ba£
->
RSTGT_R
 & 
RDC_SEMAPHORE_RSTGT_R_RSTGSM_MASK
) == 0);

181 
ba£
->
RSTGT_W
 = 0xE2;

182 
ba£
->
RSTGT_W
 = 0x1D | 
RDC_SEMAPHORE_RSTGT_W_RSTGTN_MASK
;

183 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\sema4.c

31 
	~<as£π.h
>

32 
	~"£ma4.h
"

44 
£ma4_°©us_t
 
	$SEMA4_TryLock
(
SEMA4_Ty≥
 *
ba£
, 
uöt32_t
 
g©eIndex
)

46 
__IO
 
uöt8_t
 *
g©e
;

48 
	`as£π
(
g©eIndex
 < 16);

50 
g©e
 = &
ba£
->
GATE00
 + 
g©eIndex
;

52 *
g©e
 = 
	`SEMA4_GATE00_GTFSM
(
SEMA4_PROCESSOR_SELF
 + 1);

54  ((*
g©e
 & 
SEMA4_GATE00_GTFSM_MASK
Ë=
	`SEMA4_GATE00_GTFSM
(
SEMA4_PROCESSOR_SELF
 + 1)) ?

55 
°©usSema4Suc˚ss
 : 
°©usSema4Busy
;

56 
	}
}

65 
	$SEMA4_Lock
(
SEMA4_Ty≥
 *
ba£
, 
uöt32_t
 
g©eIndex
)

67 
__IO
 
uöt8_t
 *
g©e
;

69 
	`as£π
(
g©eIndex
 < 16);

71 
g©e
 = &
ba£
->
GATE00
 + 
g©eIndex
;

75 *
g©e
 & 
SEMA4_GATE00_GTFSM_MASK
) { }

76 *
g©e
 = 
	`SEMA4_GATE00_GTFSM
(
SEMA4_PROCESSOR_SELF
 + 1);

77 } (*
g©e
 & 
SEMA4_GATE00_GTFSM_MASK
Ë!
	`SEMA4_GATE00_GTFSM
(
SEMA4_PROCESSOR_SELF
 + 1));

78 
	}
}

86 
	$SEMA4_U∆ock
(
SEMA4_Ty≥
 *
ba£
, 
uöt32_t
 
g©eIndex
)

88 
__IO
 
uöt8_t
 *
g©e
;

90 
	`as£π
(
g©eIndex
 < 16);

92 
g©e
 = &
ba£
->
GATE00
 + 
g©eIndex
;

94 *
g©e
 = 
	`SEMA4_GATE00_GTFSM
(0);

95 
	}
}

103 
uöt32_t
 
	$SEMA4_GëLockPro˚ss‹
(
SEMA4_Ty≥
 *
ba£
, 
uöt32_t
 
g©eIndex
)

105 
__IO
 
uöt8_t
 *
g©e
;

106 
uöt8_t
 
¥oc
;

108 
	`as£π
(
g©eIndex
 < 16);

110 
g©e
 = &
ba£
->
GATE00
 + 
g©eIndex
;

112 
¥oc
 = (*
g©e
 & 
SEMA4_GATE00_GTFSM_MASK
Ë>> 
SEMA4_GATE00_GTFSM_SHIFT
;

114  
¥oc
 =0 ? 
SEMA4_PROCESSOR_NONE
 :Öroc - 1;

115 
	}
}

123 
	$SEMA4_Re£tG©e
(
SEMA4_Ty≥
 *
ba£
, 
uöt32_t
 
g©eIndex
)

125 
	`as£π
(
g©eIndex
 < 16);

128 
	`as£π
 ((
ba£
->
RSTGT
 & 0x30) == 0);

130 
ba£
->
RSTGT
 = 0xE2;

131 
ba£
->
RSTGT
 = 0x1D | 
	`SEMA4_RSTGT_RSTGTN
(
g©eIndex
);

132 
	}
}

141 
	$SEMA4_Re£tAŒG©es
(
SEMA4_Ty≥
 *
ba£
)

144 
	`as£π
 ((
ba£
->
RSTGT
 & 0x30) == 0);

146 
ba£
->
RSTGT
 = 0xE2;

147 
ba£
->
RSTGT
 = 0x1D | 
SEMA4_RSTGT_RSTGTN_MASK
;

148 
	}
}

156 
	$SEMA4_Re£tNŸifiˇti⁄
(
SEMA4_Ty≥
 *
ba£
, 
uöt32_t
 
g©eIndex
)

158 
	`as£π
(
g©eIndex
 < 16);

161 
	`as£π
 ((
ba£
->
RSTNTF
 & 0x30) == 0);

163 
ba£
->
RSTNTF
 = 0x47;

164 
ba£
->
RSTNTF
 = 0xB8 | 
	`SEMA4_RSTNTF_RSTNTN
(
g©eIndex
);

165 
	}
}

174 
	$SEMA4_Re£tAŒNŸifiˇti⁄s
(
SEMA4_Ty≥
 *
ba£
)

177 
	`as£π
 ((
ba£
->
RSTNTF
 & 0x30) == 0);

179 
ba£
->
RSTNTF
 = 0x47;

180 
ba£
->
RSTNTF
 = 0xB8 | 
SEMA4_RSTNTF_RSTNTN_MASK
;

181 
	}
}

189 
	$SEMA4_SëI¡Cmd
(
SEMA4_Ty≥
 * 
ba£
, 
uöt16_t
 
ötMask
, 
boﬁ
 
íabÀ
)

191 i‡(
íabÀ
)

192 
ba£
->
CPnINE
[
SEMA4_PROCESSOR_SELF
].
INE
 |
ötMask
;

194 
ba£
->
CPnINE
[
SEMA4_PROCESSOR_SELF
].
INE
 &~
ötMask
;

195 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\uart_imx.c

31 
	~"u¨t_imx.h
"

47 
	$UART_Inô
(
UART_Ty≥
* 
ba£
, c⁄° 
u¨t_öô_c⁄fig_t
* 
öôC⁄fig
)

49 
	`as£π
(
öôC⁄fig
);

52 
	`UART_UCR1_REG
(
ba£
Ë&~
UART_UCR1_UARTEN_MASK
;

55 
	`UART_Deöô
(
ba£
);

60 
	`UART_UCR2_REG
(
ba£
Ë|(
öôC⁄fig
->
w‹dLígth
 |

61 
öôC⁄fig
->
°›BôNum
 |

62 
öôC⁄fig
->
∑rôy
 |

63 
öôC⁄fig
->
dúe˘i⁄
 |

64 
UART_UCR2_IRTS_MASK
);

68 
	`UART_UCR3_REG
(
ba£
Ë|
UART_UCR3_RXDMUXSEL_MASK
;

72 
	`UART_SëBaudR©e
(
ba£
, 
öôC⁄fig
->
˛ockR©e
, inôC⁄fig->
baudR©e
);

73 
	}
}

82 
	$UART_Deöô
(
UART_Ty≥
* 
ba£
)

85 
	`UART_UCR1_REG
(
ba£
Ë&~
UART_UCR1_UARTEN_MASK
;

88 
	`UART_UCR1_REG
(
ba£
) = 0x0;

89 
	`UART_UCR2_REG
(
ba£
Ë
UART_UCR2_SRST_MASK
;

90 
	`UART_UCR3_REG
(
ba£
Ë
UART_UCR3_DSR_MASK
 |

91 
UART_UCR3_DCD_MASK
 |

92 
UART_UCR3_RI_MASK
;

93 
	`UART_UCR4_REG
(
ba£
Ë
	`UART_UCR4_CTSTL
(32);

94 
	`UART_UFCR_REG
(
ba£
Ë
	`UART_UFCR_TXTL
(2Ë| 
	`UART_UFCR_RXTL
(1);

95 
	`UART_UESC_REG
(
ba£
Ë
	`UART_UESC_ESC_CHAR
(0x2B);

96 
	`UART_UTIM_REG
(
ba£
) = 0x0;

97 
	`UART_ONEMS_REG
(
ba£
) = 0x0;

98 
	`UART_UTS_REG
(
ba£
Ë
UART_UTS_TXEMPTY_MASK
 | 
UART_UTS_RXEMPTY_MASK
;

99 
	`UART_UMCR_REG
(
ba£
) = 0x0;

103 
	`UART_UCR2_REG
(
ba£
Ë&~
UART_UCR2_SRST_MASK
;

104 !(
	`UART_UCR2_REG
(
ba£
Ë& 
UART_UCR2_SRST_MASK
));

105 
	}
}

113 
	$UART_SëBaudR©e
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
˛ockR©e
, uöt32_à
baudR©e
)

115 
uöt32_t
 
numî©‹
;

116 
uöt32_t
 
díomö©‹
;

117 
uöt32_t
 
divis‹
;

118 
uöt32_t
 
ªfFªqDiv
;

119 
uöt32_t
 
dividî
 = 1;

122 
numî©‹
 = 
˛ockR©e
;

123 
díomö©‹
 = 
baudR©e
 << 4;

124 
divis‹
 = 1;

126 
díomö©‹
 != 0)

128 
divis‹
 = 
díomö©‹
;

129 
díomö©‹
 = 
numî©‹
 % denominator;

130 
numî©‹
 = 
divis‹
;

133 
numî©‹
 = 
˛ockR©e
 / 
divis‹
;

134 
díomö©‹
 = (
baudR©e
 << 4Ë/ 
divis‹
;

138 i‡((
numî©‹
 > (
UART_UBIR_INC_MASK
 * 7)) ||

139 (
díomö©‹
 > 
UART_UBIR_INC_MASK
))

141 
uöt32_t
 
m
 = (
numî©‹
 - 1Ë/ (
UART_UBIR_INC_MASK
 * 7) + 1;

142 
uöt32_t
 
n
 = (
díomö©‹
 - 1Ë/ 
UART_UBIR_INC_MASK
 + 1;

143 
uöt32_t
 
max
 = 
m
 > 
n
 ? m :Ç;

144 
numî©‹
 /
max
;

145 
díomö©‹
 /
max
;

146 i‡(0 =
numî©‹
)

147 
numî©‹
 = 1;

148 i‡(0 =
díomö©‹
)

149 
díomö©‹
 = 1;

151 
dividî
 = (
numî©‹
 - 1Ë/ 
UART_UBIR_INC_MASK
 + 1;

153 
dividî
)

156 
ªfFªqDiv
 = 0x05;

159 
ªfFªqDiv
 = 0x04;

162 
ªfFªqDiv
 = 0x03;

165 
ªfFªqDiv
 = 0x02;

168 
ªfFªqDiv
 = 0x01;

171 
ªfFªqDiv
 = 0x00;

174 
ªfFªqDiv
 = 0x06;

177 
ªfFªqDiv
 = 0x05;

180 
	`UART_UFCR_REG
(
ba£
Ë&~
UART_UFCR_RFDIV_MASK
;

181 
	`UART_UFCR_REG
(
ba£
Ë|
	`UART_UFCR_RFDIV
(
ªfFªqDiv
);

182 
	`UART_UBIR_REG
(
ba£
Ë
	`UART_UBIR_INC
(
díomö©‹
 - 1);

183 
	`UART_UBMR_REG
(
ba£
Ë
	`UART_UBMR_MOD
(
numî©‹
 / 
dividî
 - 1);

184 
	`UART_ONEMS_REG
(
ba£
Ë
	`UART_ONEMS_ONEMS
(
˛ockR©e
/(1000 * 
ªfFªqDiv
));

185 
	}
}

194 
	$UART_SëInvîtCmd
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
dúe˘i⁄
, 
boﬁ
 
övît
)

196 
	`as£π
((
dúe˘i⁄
 & 
u¨tDúe˘i⁄Tx
Ë|| (dúe˘i⁄ & 
u¨tDúe˘i⁄Rx
));

198 i‡(
övît
)

200 i‡(
dúe˘i⁄
 & 
UART_UCR2_RXEN_MASK
)

201 
	`UART_UCR4_REG
(
ba£
Ë|
UART_UCR4_INVR_MASK
;

202 i‡(
dúe˘i⁄
 & 
UART_UCR2_TXEN_MASK
)

203 
	`UART_UCR3_REG
(
ba£
Ë|
UART_UCR3_INVT_MASK
;

207 i‡(
dúe˘i⁄
 & 
UART_UCR2_RXEN_MASK
)

208 
	`UART_UCR4_REG
(
ba£
Ë&~
UART_UCR4_INVR_MASK
;

209 i‡(
dúe˘i⁄
 & 
UART_UCR2_TXEN_MASK
)

210 
	`UART_UCR3_REG
(
ba£
Ë&~
UART_UCR3_INVT_MASK
;

212 
	}
}

224 
	$UART_SëDozeMode
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

226 i‡(
íabÀ
)

227 
	`UART_UCR1_REG
(
ba£
Ë&
UART_UCR1_DOZE_MASK
;

229 
	`UART_UCR1_REG
(
ba£
Ë|~
UART_UCR1_DOZE_MASK
;

230 
	}
}

239 
	$UART_SëLowPowîMode
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

241 i‡(
íabÀ
)

242 
	`UART_UCR4_REG
(
ba£
Ë&~
UART_UCR4_LPBYP_MASK
;

244 
	`UART_UCR4_REG
(
ba£
Ë|
UART_UCR4_LPBYP_MASK
;

245 
	}
}

258 
	$UART_SëI¡Cmd
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
ötSour˚
, 
boﬁ
 
íabÀ
)

260 vﬁ©ûê
uöt32_t
* 
u¨t_ªg
 = 0;

261 
uöt32_t
 
u¨t_mask
 = 0;

263 
u¨t_ªg
 = (
uöt32_t
 *)((uöt32_t)
ba£
 + (
ötSour˚
 >> 16));

264 
u¨t_mask
 = (1 << (
ötSour˚
 & 0x0000FFFF));

266 i‡(
íabÀ
)

267 *
u¨t_ªg
 |
u¨t_mask
;

269 *
u¨t_ªg
 &~
u¨t_mask
;

270 
	}
}

280 
boﬁ
 
	$UART_GëSètusFœg
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
Êag
)

282 vﬁ©ûê
uöt32_t
* 
u¨t_ªg
 = 0;

284 
u¨t_ªg
 = (
uöt32_t
 *)((uöt32_t)
ba£
 + (
Êag
 >> 16));

285  (
boﬁ
)((*
u¨t_ªg
 >> (
Êag
 & 0x0000FFFF)) & 0x1);

286 
	}
}

297 
	$UART_CÀ¨SètusFœg
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
Êag
)

299 vﬁ©ûê
uöt32_t
* 
u¨t_ªg
 = 0;

300 
uöt32_t
 
u¨t_mask
 = 0;

302 
u¨t_ªg
 = (
uöt32_t
 *)((uöt32_t)
ba£
 + (
Êag
 >> 16));

303 
u¨t_mask
 = (1 << (
Êag
 & 0x0000FFFF));

306 *
u¨t_ªg
 |
u¨t_mask
;

307 
	}
}

320 
	$UART_SëDmaCmd
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
dmaSour˚
, 
boﬁ
 
íabÀ
)

322 vﬁ©ûê
uöt32_t
* 
u¨t_ªg
 = 0;

323 
uöt32_t
 
u¨t_mask
 = 0;

325 
u¨t_ªg
 = (
uöt32_t
 *)((uöt32_t)
ba£
 + (
dmaSour˚
 >> 16));

326 
u¨t_mask
 = (1 << (
dmaSour˚
 & 0x0000FFFF));

327 i‡(
íabÀ
)

328 *
u¨t_ªg
 |
u¨t_mask
;

330 *
u¨t_ªg
 &~
u¨t_mask
;

331 
	}
}

343 
	$UART_SëRtsFlowCålCmd
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

345 i‡(
íabÀ
)

346 
	`UART_UCR2_REG
(
ba£
Ë&~
UART_UCR2_IRTS_MASK
;

348 
	`UART_UCR2_REG
(
ba£
Ë|
UART_UCR2_IRTS_MASK
;

349 
	}
}

360 
	$UART_SëCtsFlowCålCmd
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

362 i‡(
íabÀ
)

363 
	`UART_UCR2_REG
(
ba£
Ë|
UART_UCR2_CTSC_MASK
;

365 
	`UART_UCR2_REG
(
ba£
Ë&~
UART_UCR2_CTSC_MASK
;

366 
	}
}

377 
	$UART_SëCtsPöLevñ
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
a˘ive
)

379 i‡(
a˘ive
)

380 
	`UART_UCR2_REG
(
ba£
Ë|
UART_UCR2_CTS_MASK
;

382 
	`UART_UCR2_REG
(
ba£
Ë&~
UART_UCR2_CTS_MASK
;

383 
	}
}

392 
	$UART_SëModemMode
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
mode
)

394 
	`as£π
((
u¨tModemModeD˚
 & u¨tModemModeD˚Ë|| (u¨tModemModeD˚ & 
u¨tModemModeDã
));

396 i‡(
u¨tModemModeD˚
 =
mode
)

397 
	`UART_UFCR_REG
(
ba£
Ë&~
UART_UFCR_DCEDTE_MASK
;

399 
	`UART_UFCR_REG
(
ba£
Ë|
UART_UFCR_DCEDTE_MASK
;

400 
	}
}

410 
	$UART_SëDåPöLevñ
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
a˘ive
)

412 i‡(
a˘ive
)

413 
	`UART_UCR3_REG
(
ba£
Ë|
UART_UCR3_DSR_MASK
;

415 
	`UART_UCR3_REG
(
ba£
Ë&~
UART_UCR3_DSR_MASK
;

416 
	}
}

425 
	$UART_SëDcdPöLevñ
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
a˘ive
)

427 i‡(
a˘ive
)

428 
	`UART_UCR3_REG
(
ba£
Ë|
UART_UCR3_DCD_MASK
;

430 
	`UART_UCR3_REG
(
ba£
Ë&~
UART_UCR3_DCD_MASK
;

431 
	}
}

440 
	$UART_SëRiPöLevñ
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
a˘ive
)

442 i‡(
a˘ive
)

443 
	`UART_UCR3_REG
(
ba£
Ë|
UART_UCR3_RI_MASK
;

445 
	`UART_UCR3_REG
(
ba£
Ë&~
UART_UCR3_RI_MASK
;

446 
	}
}

458 
	$UAER_Putch¨9
(
UART_Ty≥
* 
ba£
, 
uöt16_t
 
d©a
)

460 
	`as£π
(
d©a
 <= 0x1FF);

462 i‡(
d©a
 & 0x0100)

463 
	`UART_UMCR_REG
(
ba£
Ë|
UART_UMCR_TXB8_MASK
;

465 
	`UART_UMCR_REG
(
ba£
Ë&~
UART_UMCR_TXB8_MASK
;

466 
	`UART_UTXD_REG
(
ba£
Ë(
d©a
 & 
UART_UTXD_TX_DATA_MASK
);

467 
	}
}

476 
uöt16_t
 
	$UAER_Gëch¨9
(
UART_Ty≥
* 
ba£
)

478 
uöt16_t
 
rxD©a
 = 0;

480 i‡(
	`UART_URXD_REG
(
ba£
Ë& 
UART_URXD_PRERR_MASK
)

481 
rxD©a
 |= 0x0100;

482 
rxD©a
 |(
	`UART_URXD_REG
(
ba£
Ë& 
UART_URXD_RX_DATA_MASK
);

483  
rxD©a
;

484 
	}
}

493 
	$UART_SëMu…idr›Mode
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

495 i‡(
íabÀ
)

496 
	`UART_UMCR_REG
(
ba£
Ë|
UART_UMCR_MDEN_MASK
;

498 
	`UART_UMCR_REG
(
ba£
Ë&~
UART_UMCR_MDEN_MASK
;

499 
	}
}

508 
	$UART_SëSœveAddªssDëe˘Cmd
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

510 i‡(
íabÀ
)

511 
	`UART_UMCR_REG
(
ba£
Ë|
UART_UMCR_SLAM_MASK
;

513 
	`UART_UMCR_REG
(
ba£
Ë&~
UART_UMCR_SLAM_MASK
;

514 
	}
}

526 
	$UART_SëIrDACmd
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

528 i‡(
íabÀ
)

529 
	`UART_UCR1_REG
(
ba£
Ë|
UART_UCR1_IREN_MASK
;

531 
	`UART_UCR1_REG
(
ba£
Ë&~
UART_UCR1_IREN_MASK
;

532 
	}
}

542 
	$UART_SëIrDAVŸeClock
(
UART_Ty≥
* 
ba£
, 
uöt32_t
 
vŸeClock
)

544 
	`as£π
((
vŸeClock
 =
u¨tIrdaVŸeClockSam∂ög
) || \

545 (
vŸeClock
 =
u¨tIrdaVŸeClockRe„ªn˚
));

547 i‡(
u¨tIrdaVŸeClockSam∂ög
 =
vŸeClock
)

548 
	`UART_UCR4_REG
(
ba£
Ë|
UART_UCR4_IRSC_MASK
;

550 
	`UART_UCR4_REG
(
ba£
Ë&~
UART_UCR4_IRSC_MASK
;

551 
	}
}

563 
	$UART_SëAutoBaudR©eCmd
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

565 i‡(
íabÀ
)

566 
	`UART_UCR1_REG
(
ba£
Ë|
UART_UCR1_ADBR_MASK
;

568 
	`UART_UCR1_REG
(
ba£
Ë&~
UART_UCR1_ADBR_MASK
;

569 
	}
}

579 
	$UART_SídBªakCh¨
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
a˘ive
)

581 i‡(
a˘ive
)

582 
	`UART_UCR1_REG
(
ba£
Ë|
UART_UCR1_SNDBRK_MASK
;

584 
	`UART_UCR1_REG
(
ba£
Ë&~
UART_UCR1_SNDBRK_MASK
;

585 
	}
}

594 
	$UART_SëEsˇ≥De˚˘Cmd
(
UART_Ty≥
* 
ba£
, 
boﬁ
 
íabÀ
)

596 i‡(
íabÀ
)

597 
	`UART_UCR2_REG
(
ba£
Ë|
UART_UCR2_ESCEN_MASK
;

599 
	`UART_UCR2_REG
(
ba£
Ë&~
UART_UCR2_ESCEN_MASK
;

600 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\wdog_imx.c

31 
	~"wdog_imx.h
"

43 
	$WDOG_E«bÀ
(
WDOG_Ty≥
 *
ba£
, 
uöt8_t
 
timeout
)

45 
uöt16_t
 
w¸
 = 
ba£
->
WCR
 & (~
WDOG_WCR_WT_MASK
);

46 
ba£
->
WCR
 = 
w¸
 | 
	`WDOG_WCR_WT
(
timeout
Ë| 
WDOG_WCR_WDE_MASK
;

47 
	}
}

55 
	$WDOG_Re£t
(
WDOG_Ty≥
 *
ba£
, 
boﬁ
 
wda
, boﬁ 
§s
)

57 
uöt16_t
 
w¸
 = 
ba£
->
WCR
;

59 i‡(
wda
)

60 
w¸
 &~
WDOG_WCR_WDA_MASK
;

61 i‡(
§s
)

62 
w¸
 &~
WDOG_WCR_SRS_MASK
;

64 
ba£
->
WCR
 = 
w¸
;

65 
	}
}

73 
	$WDOG_Re‰esh
(
WDOG_Ty≥
 *
ba£
)

75 
ba£
->
WSR
 = 0x5555;

76 
ba£
->
WSR
 = 0xAAAA;

77 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\utilities\inc\debug_console_imx.h

31 #i‚de‡
__DEBUG_CONSOLE_IMX_H__


32 
	#__DEBUG_CONSOLE_IMX_H__


	)

34 
	~<°döt.h
>

35 
	~"devi˚_imx.h
"

45 
	#IO_MAXLINE
 20

	)

48 
	#PRINTF
 
debug_¥ötf


	)

50 
	#SCANF
 
debug_sˇnf


	)

52 
	#PUTCHAR
 
debug_putch¨


	)

54 
	#GETCHAR
 
debug_gëch¨


	)

58 
	e_debug_c⁄sﬁe_°©us
 {

59 
	m°©us_DEBUGCONSOLE_Suc˚ss
 = 0U,

60 
	m°©us_DEBUGCONSOLE_InvÆidDevi˚
,

61 
	m°©us_DEBUGCONSOLE_AŒoˇãMem‹yFaûed
,

62 
	m°©us_DEBUGCONSOLE_Faûed


63 } 
	tdebug_c⁄sﬁe_°©us_t
;

69 #i‡
deföed
(
__˝lu•lus
)

91 
debug_c⁄sﬁe_°©us_t
 
DbgC⁄sﬁe_Inô
(
UART_Ty≥
* 
ba£
,

92 
uöt32_t
 
˛ockR©e
,

93 
uöt32_t
 
baudR©e
);

102 
debug_c⁄sﬁe_°©us_t
 
DbgC⁄sﬁe_DeInô
();

112 
debug_¥ötf
(c⁄° *
fmt_s
, ...);

122 
debug_putch¨
(
ch
);

132 
debug_sˇnf
(c⁄° *
fmt_±r
, ...);

141 
debug_gëch¨
();

143 #i‡
deföed
(
__˝lu•lus
)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\utilities\src\debug_console_imx.c

31 
	~<°dboﬁ.h
>

32 
	~<°d¨g.h
>

33 
	~<°dio.h
>

34 
	~<°dlib.h
>

35 
	~"devi˚_imx.h
"

36 
	~"debug_c⁄sﬁe_imx.h
"

37 
	~"u¨t_imx.h
"

38 
	~"¥öt_sˇn.h
"

40 #i‡
__ICCARM__


41 
	~<yfuns.h
>

44 
debug_putc
(
ch
, * 
°ªam
);

45 
UART_SídD©aPﬁlög
(*
ba£
, c⁄° 
uöt8_t
 *
txBuff
, 
uöt32_t
 
txSize
);

46 
UART_Re˚iveD©aPﬁlög
(*
ba£
, 
uöt8_t
 *
rxBuff
, 
uöt32_t
 
rxSize
);

53 
	sDebugC⁄sﬁeO≥øti⁄Fun˘i⁄s
 {

54 (* 
	mSíd
)(*
	mba£
, c⁄° 
uöt8_t
 *
	mbuf
, 
uöt32_t
 
	mcou¡
);

55 (* 
	mRe˚ive
)(*
	mba£
, 
uöt8_t
 *
	mbuf
, 
uöt32_t
 
	mcou¡
);

56 } 
	tdebug_c⁄sﬁe_›s_t
;

59 
	sDebugC⁄sﬁeSèã
 {

60 
boﬁ
 
	möôed
;

61 * 
	mba£
;

62 
debug_c⁄sﬁe_›s_t
 
	m›s
;

63 } 
	tdebug_c⁄sﬁe_°©e_t
;

69 
debug_c⁄sﬁe_°©e_t
 
	gs_debugC⁄sﬁe
;

75 
debug_c⁄sﬁe_°©us_t
 
	$DbgC⁄sﬁe_Inô
(
UART_Ty≥
* 
ba£
,

76 
uöt32_t
 
˛ockR©e
,

77 
uöt32_t
 
baudR©e
)

79 i‡(
s_debugC⁄sﬁe
.
öôed
)

81  
°©us_DEBUGCONSOLE_Faûed
;

84 
s_debugC⁄sﬁe
.
ba£
 = base;

86 
u¨t_öô_c⁄fig_t
 
u¨t_öô_°r
 = {.
˛ockR©e
 = clockRate,

87 .
baudR©e
 = baudRate,

88 .
w‹dLígth
 = 
u¨tW‹dLígth8Bôs
,

89 .
°›BôNum
 = 
u¨tSt›BôNumO√
,

90 .
∑rôy
 = 
u¨tP¨ôyDißbÀ
,

91 .
dúe˘i⁄
 = 
u¨tDúe˘i⁄TxRx
};

93 
	`UART_Inô
(
s_debugC⁄sﬁe
.
ba£
, &
u¨t_öô_°r
);

94 
	`UART_E«bÀ
(
s_debugC⁄sﬁe
.
ba£
);

96 
s_debugC⁄sﬁe
.
›s
.
Síd
 = 
UART_SídD©aPﬁlög
;

97 
s_debugC⁄sﬁe
.
›s
.
Re˚ive
 = 
UART_Re˚iveD©aPﬁlög
;

99 
s_debugC⁄sﬁe
.
öôed
 = 
åue
;

100  
°©us_DEBUGCONSOLE_Suc˚ss
;

101 
	}
}

104 
debug_c⁄sﬁe_°©us_t
 
	$DbgC⁄sﬁe_DeInô
()

106 i‡(!
s_debugC⁄sﬁe
.
öôed
)

108  
°©us_DEBUGCONSOLE_Suc˚ss
;

112 
	`UART_DißbÀ
(
s_debugC⁄sﬁe
.
ba£
);

113 
	`UART_Deöô
(
s_debugC⁄sﬁe
.
ba£
);

115 
s_debugC⁄sﬁe
.
öôed
 = 
Ál£
;

117  
°©us_DEBUGCONSOLE_Suc˚ss
;

118 
	}
}

120 #i‡
__ICCARM__


121 #¥agm®
wók
 
__wrôe


122 
size_t
 
	$__wrôe
(
h™dÀ
, c⁄° * 
buf„r
, 
size_t
 
size
)

124 i‡(
buf„r
 == 0)

134 i‡((
h™dÀ
 !
_LLIO_STDOUT
Ë&& (h™dÀ !
_LLIO_STDERR
))

136  
_LLIO_ERROR
;

140 i‡(!
s_debugC⁄sﬁe
.
öôed
)

142  
_LLIO_ERROR
;

146 
s_debugC⁄sﬁe
.
›s
.
	`Síd
(s_debugC⁄sﬁe.
ba£
, (
uöt8_t
 c⁄° *)
buf„r
, 
size
);

147  
size
;

148 
	}
}

150 #¥agm®
wók
 
__ªad


151 
size_t
 
	$__ªad
(
h™dÀ
, * 
buf„r
, 
size_t
 
size
)

155 i‡(
h™dÀ
 !
_LLIO_STDIN
)

157  
_LLIO_ERROR
;

161 i‡(!
s_debugC⁄sﬁe
.
öôed
)

163  
_LLIO_ERROR
;

167 
s_debugC⁄sﬁe
.
›s
.
	`Re˚ive
(s_debugC⁄sﬁe.
ba£
, 
buf„r
, 
size
);

169  
size
;

170 
	}
}

172 #ñi‡(
deföed
(
__GNUC__
))

173 #¥agm®
wók
 
_wrôe


174 
	$_wrôe
 (
h™dÀ
, *
buf„r
, 
size
)

176 i‡(
buf„r
 == 0)

184 i‡((
h™dÀ
 != 1) && (handle != 2))

190 i‡(!
s_debugC⁄sﬁe
.
öôed
)

196 
s_debugC⁄sﬁe
.
›s
.
	`Síd
(s_debugC⁄sﬁe.
ba£
, (
uöt8_t
 *)
buf„r
, 
size
);

197  
size
;

198 
	}
}

200 #¥agm®
wók
 
_ªad


201 
	$_ªad
(
h™dÀ
, *
buf„r
, 
size
)

205 i‡(
h™dÀ
 != 0)

211 i‡(!
s_debugC⁄sﬁe
.
öôed
)

217 
s_debugC⁄sﬁe
.
›s
.
	`Re˚ive
(s_debugC⁄sﬁe.
ba£
, (
uöt8_t
 *)
buf„r
, 
size
);

218  
size
;

219 
	}
}

220 #ñi‡
deföed
(
__CC_ARM
)

221 
	s__FILE


223 
	mh™dÀ
;

230 #¥agm®
wók
 
__°dout


231 
FILE
 
	g__°dout
;

232 
FILE
 
	g__°dö
;

234 #¥agm®
wók
 
Âutc


235 
	$Âutc
(
ch
, 
FILE
 *
f
)

238 i‡(!
s_debugC⁄sﬁe
.
öôed
)

244 
s_debugC⁄sﬁe
.
›s
.
	`Síd
(s_debugC⁄sﬁe.
ba£
, (c⁄° 
uöt8_t
*)&
ch
, 1);

246 
	}
}

248 #¥agm®
wók
 
fgëc


249 
	$fgëc
(
FILE
 *
f
)

251 
uöt8_t
 
ãmp
;

253 i‡(!
s_debugC⁄sﬁe
.
öôed
)

259 
s_debugC⁄sﬁe
.
›s
.
	`Re˚ive
(s_debugC⁄sﬁe.
ba£
, &
ãmp
, 1);

260  
ãmp
;

261 
	}
}

265 
	$debug_¥ötf
(c⁄° *
fmt_s
, ...)

267 
va_li°
 
≠
;

268 
ªsu…
;

270 i‡(!
s_debugC⁄sﬁe
.
öôed
)

275 
	`va_°¨t
(
≠
, 
fmt_s
);

276 
ªsu…
 = 
	`_d›röt
(
NULL
, 
debug_putc
, -1, (*)
fmt_s
, 
≠
);

277 
	`va_íd
(
≠
);

279  
ªsu…
;

280 
	}
}

282 
	$debug_putc
(
ch
, * 
°ªam
)

284 c⁄° 
c
 = (Ë
ch
;

286 i‡(!
s_debugC⁄sﬁe
.
öôed
)

290 
s_debugC⁄sﬁe
.
›s
.
	`Síd
(s_debugC⁄sﬁe.
ba£
, &
c
, 1);

293 
	}
}

295 
	$debug_putch¨
(
ch
)

298 i‡(!
s_debugC⁄sﬁe
.
öôed
)

302 
	`debug_putc
(
ch
, 
NULL
);

305 
	}
}

307 
	$debug_sˇnf
(c⁄° *
fmt_±r
, ...)

309 
ãmp_buf
[
IO_MAXLINE
];

310 
va_li°
 
≠
;

311 
uöt32_t
 
i
;

312 
ªsu…
;

315 i‡(!
s_debugC⁄sﬁe
.
öôed
)

319 
	`va_°¨t
(
≠
, 
fmt_±r
);

320 
ãmp_buf
[0] = '\0';

322 
i
 = 0; i < 
IO_MAXLINE
; i++)

324 
ãmp_buf
[
i
] = 
ªsu…
 = 
	`debug_gëch¨
();

326 i‡((
ªsu…
 == '\r') || (result == '\n'))

329 i‡(
i
 == 0)

331 
i
 = (
uöt32_t
)-1;

339 
ãmp_buf
[
i
 + 1] = '\0';

342 
ªsu…
 = 
	`sˇn_¥v
(
ãmp_buf
, (*)
fmt_±r
, 
≠
);

343 
	`va_íd
(
≠
);

345  
ªsu…
;

346 
	}
}

348 
	$debug_gëch¨
()

350 
c
;

353 i‡(!
s_debugC⁄sﬁe
.
öôed
)

357 
s_debugC⁄sﬁe
.
›s
.
	`Re˚ive
(s_debugC⁄sﬁe.
ba£
, &
c
, 1);

359  
c
;

360 
	}
}

362 
	$UART_SídD©aPﬁlög
(*
ba£
, c⁄° 
uöt8_t
 *
txBuff
, 
uöt32_t
 
txSize
)

364 
txSize
--)

366 
	`UART_Putch¨
((
UART_Ty≥
*)
ba£
, *
txBuff
++);

367 !
	`UART_GëSètusFœg
((
UART_Ty≥
*)
ba£
, 
u¨tSètusTxCom∂ëe
));

369 
	}
}

371 
	$UART_Re˚iveD©aPﬁlög
(*
ba£
, 
uöt8_t
 *
rxBuff
, 
uöt32_t
 
rxSize
)

373 
rxSize
--)

375 !
	`UART_GëSètusFœg
((
UART_Ty≥
*)
ba£
, 
u¨tSètusRxD©aRódy
));

377 *
rxBuff
 = 
	`UART_Gëch¨
((
UART_Ty≥
*)
ba£
);

378 
rxBuff
++;

380 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\utilities\src\print_scan.c

36 
	~"¥öt_sˇn.h
"

37 
	~<°dio.h
>

38 
	~<°dlib.h
>

39 
	~<˘y≥.h
>

40 
	~<°döt.h
>

41 
	~<°dboﬁ.h
>

43 #i‡
deföed
(
__CC_ARM
)

44 #¥agm®
düg_suµªss
 1256

47 
	#FLAGS_MINUS
 (0x01)

	)

48 
	#FLAGS_PLUS
 (0x02)

	)

49 
	#FLAGS_SPACE
 (0x04)

	)

50 
	#FLAGS_ZERO
 (0x08)

	)

51 
	#FLAGS_POUND
 (0x10)

	)

53 
	#IS_FLAG_MINUS
(
a
Ë◊ & 
FLAGS_MINUS
)

	)

54 
	#IS_FLAG_PLUS
(
a
Ë◊ & 
FLAGS_PLUS
)

	)

55 
	#IS_FLAG_SPACE
(
a
Ë◊ & 
FLAGS_SPACE
)

	)

56 
	#IS_FLAG_ZERO
(
a
Ë◊ & 
FLAGS_ZERO
)

	)

57 
	#IS_FLAG_POUND
(
a
Ë◊ & 
FLAGS_POUND
)

	)

59 
	#LENMOD_h
 (0x01)

	)

60 
	#LENMOD_l
 (0x02)

	)

61 
	#LENMOD_L
 (0x04)

	)

62 
	#LENMOD_hh
 (0x08)

	)

63 
	#LENMOD_Œ
 (0x10)

	)

65 
	#IS_LENMOD_h
(
a
Ë◊ & 
LENMOD_h
)

	)

66 
	#IS_LENMOD_hh
(
a
Ë◊ & 
LENMOD_hh
)

	)

67 
	#IS_LENMOD_l
(
a
Ë◊ & 
LENMOD_l
)

	)

68 
	#IS_LENMOD_Œ
(
a
Ë◊ & 
LENMOD_Œ
)

	)

69 
	#IS_LENMOD_L
(
a
Ë◊ & 
LENMOD_L
)

	)

71 
	#SCAN_SUPPRESS
 0x2

	)

73 
	#SCAN_DEST_MASK
 0x7c

	)

74 
	#SCAN_DEST_CHAR
 0x4

	)

75 
	#SCAN_DEST_STRING
 0x8

	)

76 
	#SCAN_DEST_SET
 0x10

	)

77 
	#SCAN_DEST_INT
 0x20

	)

78 
	#SCAN_DEST_FLOAT
 0x30

	)

80 
	#SCAN_LENGTH_MASK
 0x1f00

	)

81 
	#SCAN_LENGTH_CHAR
 0x100

	)

82 
	#SCAN_LENGTH_SHORT_INT
 0x200

	)

83 
	#SCAN_LENGTH_LONG_INT
 0x400

	)

84 
	#SCAN_LENGTH_LONG_LONG_INT
 0x800

	)

85 
	#SCAN_LENGTH_LONG_DOUBLE
 0x1000

	)

87 
	#SCAN_TYPE_SIGNED
 0x2000

	)

96 
uöt32_t
 
sˇn_ign‹e_whôe_•a˚
(c⁄° **
s
);

98 #i‡
deföed
(
SCANF_FLOAT_ENABLE
)

99 
	g‚um
 = 0.0;

113 
öt32_t
 
mknum°r
 (*
num°r
, *
nump
, i¡32_à
√g
, i¡32_à
ødix
, 
boﬁ
 
u£_ˇps
);

115 #i‡
deföed
(
PRINTF_FLOAT_ENABLE
)

126 
öt32_t
 
mkÊﬂäum°r
 (*
num°r
, *
nump
, i¡32_à
ødix
, 
uöt32_t
 
¥ecisi⁄_width
);

130 
Âut_∑d
(
öt32_t
 
c
, i¡32_à
cuæí
, i¡32_à
fõld_width
, i¡32_à*
cou¡
, 
PUTCHAR_FUNC
 
func_±r
, *
Árg
, *
max_cou¡
);

132 
modf
(
öput_dbl
, *
öç¨t_±r
);

134 #i‡!
deföed
(
PRINT_MAX_COUNT
)

135 
	#n_putch¨
(
func
, 
cha˘î
, 
p
, 
cou¡
Ë
	`func
(cha˘î,Ö)

	)

137 
	$n_putch¨
(
PUTCHAR_FUNC
 
func_±r
, 
cha˘î
, *
p
, *
max_cou¡
)

139 
ªsu…
 = 0;

140 i‡(*
max_cou¡
)

142 
ªsu…
 = 
	`func_±r
(
cha˘î
, 
p
);

143 (*
max_cou¡
)--;

145  
ªsu…
;

146 
	}
}

157 
	$_d›röt
(*
Árg
, 
PUTCHAR_FUNC
 
func_±r
, 
max_cou¡
, *
fmt
, 
va_li°
 
≠
)

160 *
p
;

161 
öt32_t
 
c
;

163 
v°r
[33];

164 *
v°Ω
;

165 
öt32_t
 
vÀn
;

167 
öt32_t
 
d⁄e
;

168 
öt32_t
 
cou¡
 = 0;

169 
ãmp_cou¡
 = 
max_cou¡
;

172 
uöt32_t
 
Êags_u£d
;

173 
uöt32_t
 
fõld_width
;

175 
öt32_t
 
ivÆ
;

176 
öt32_t
 
sch¨
, 
dsch¨
;

177 
öt32_t
 *
ivÆp
;

178 *
svÆ
;

179 
öt32_t
 
cvÆ
;

180 
uöt32_t
 
uvÆ
;

181 
boﬁ
 
u£_ˇps
;

182 
uöt32_t
 
¥ecisi⁄_width
;

184 #i‡
	`deföed
(
PRINTF_FLOAT_ENABLE
)

185 
fvÆ
;

188 i‡(
max_cou¡
 == -1)

190 
max_cou¡
 = 
INT32_MAX
 - 1;

197 
p
 = (*)
fmt
; (
c
 = *p) != 0;Ö++)

205 i‡(
c
 != '%')

207 
	`n_putch¨
(
func_±r
, 
c
, 
Árg
, &
max_cou¡
);

209 
cou¡
++;

221 
u£_ˇps
 = 
åue
;

222 
Êags_u£d
 = 0;

223 
d⁄e
 = 
Ál£
;

224 !
d⁄e
)

226  *++
p
)

229 
Êags_u£d
 |
FLAGS_MINUS
;

232 
Êags_u£d
 |
FLAGS_PLUS
;

235 
Êags_u£d
 |
FLAGS_SPACE
;

238 
Êags_u£d
 |
FLAGS_ZERO
;

241 
Êags_u£d
 |
FLAGS_POUND
;

245 --
p
;

246 
d⁄e
 = 
åue
;

254 
fõld_width
 = 0;

255 
d⁄e
 = 
Ál£
;

256 !
d⁄e
)

258 
c
 = *++
p
)

270 
fõld_width
 = (fõld_width * 10Ë+ (
c
 - '0');

274 --
p
;

275 
d⁄e
 = 
åue
;

283 
¥ecisi⁄_width
 = 6;

284 i‡–*++
p
 == '.')

291 
¥ecisi⁄_width
 = 0;

292 
d⁄e
 = 
Ál£
;

293 !
d⁄e
)

295 
c
 = *++
p
)

307 
¥ecisi⁄_width
 = (¥ecisi⁄_width * 10Ë+ (
c
 - '0');

311 --
p
;

312 
d⁄e
 = 
åue
;

320 --
p
;

327  *++
p
)

330 i‡(*++
p
 != 'h')

332 --
p
;

337 i‡(*++
p
 != 'l')

339 --
p
;

348 --
p
;

355 
c
 = *++
p
)

359 
ivÆ
 = (
öt32_t
)
	`va_¨g
(
≠
, int32_t);

360 
vÀn
 = 
	`mknum°r
(
v°r
,&
ivÆ
,
åue
,10,
u£_ˇps
);

361 
v°Ω
 = &
v°r
[
vÀn
];

363 i‡(
ivÆ
 < 0)

365 
sch¨
 = '-';

366 ++
vÀn
;

370 i‡(
	`IS_FLAG_PLUS
(
Êags_u£d
))

372 
sch¨
 = '+';

373 ++
vÀn
;

377 i‡(
	`IS_FLAG_SPACE
(
Êags_u£d
))

379 
sch¨
 = ' ';

380 ++
vÀn
;

384 
sch¨
 = 0;

388 
dsch¨
 = 
Ál£
;

393 i‡(
	`IS_FLAG_ZERO
(
Êags_u£d
))

395 i‡(
sch¨
)

397 
	`n_putch¨
(
func_±r
, 
sch¨
, 
Árg
, &
max_cou¡
);

398 
cou¡
++;

400 
dsch¨
 = 
åue
;

402 
	`Âut_∑d
('0', 
vÀn
, 
fõld_width
, &
cou¡
, 
func_±r
, 
Árg
, &
max_cou¡
);

403 
vÀn
 = 
fõld_width
;

407 i‡(!
	`IS_FLAG_MINUS
(
Êags_u£d
))

409 
	`Âut_∑d
(' ', 
vÀn
, 
fõld_width
, &
cou¡
, 
func_±r
, 
Árg
, &
max_cou¡
);

410 i‡(
sch¨
)

412 
	`n_putch¨
(
func_±r
, 
sch¨
, 
Árg
, &
max_cou¡
);

413 
cou¡
++;

415 
dsch¨
 = 
åue
;

421 i‡((!
dsch¨
Ë&& 
sch¨
)

423 
	`n_putch¨
(
func_±r
, 
sch¨
, 
Árg
, &
max_cou¡
);

424 
cou¡
++;

426 
c⁄t_xd
;

427 #i‡
	`deföed
(
PRINTF_FLOAT_ENABLE
)

430 
fvÆ
 = ()
	`va_¨g
(
≠
, );

431 
vÀn
 = 
	`mkÊﬂäum°r
(
v°r
,&
fvÆ
,10, 
¥ecisi⁄_width
);

432 
v°Ω
 = &
v°r
[
vÀn
];

434 i‡(
fvÆ
 < 0)

436 
sch¨
 = '-';

437 ++
vÀn
;

441 i‡(
	`IS_FLAG_PLUS
(
Êags_u£d
))

443 
sch¨
 = '+';

444 ++
vÀn
;

448 i‡(
	`IS_FLAG_SPACE
(
Êags_u£d
))

450 
sch¨
 = ' ';

451 ++
vÀn
;

455 
sch¨
 = 0;

459 
dsch¨
 = 
Ál£
;

460 i‡(
	`IS_FLAG_ZERO
(
Êags_u£d
))

462 i‡(
sch¨
)

464 
	`n_putch¨
(
func_±r
, 
sch¨
, 
Árg
, &
max_cou¡
);

465 
cou¡
++;

467 
dsch¨
 = 
åue
;

468 
	`Âut_∑d
('0', 
vÀn
, 
fõld_width
, &
cou¡
, 
func_±r
, 
Árg
, &
max_cou¡
);

469 
vÀn
 = 
fõld_width
;

473 i‡(!
	`IS_FLAG_MINUS
(
Êags_u£d
))

475 
	`Âut_∑d
(' ', 
vÀn
, 
fõld_width
, &
cou¡
, 
func_±r
, 
Árg
, &
max_cou¡
);

476 i‡(
sch¨
)

478 
	`n_putch¨
(
func_±r
, 
sch¨
, 
Árg
, &
max_cou¡
);

479 
cou¡
++;

481 
dsch¨
 = 
åue
;

484 i‡(!
dsch¨
 && 
sch¨
)

486 
	`n_putch¨
(
func_±r
, 
sch¨
, 
Árg
, &
max_cou¡
);

487 
cou¡
++;

489 
c⁄t_xd
;

492 
u£_ˇps
 = 
Ál£
;

494 
uvÆ
 = (
uöt32_t
)
	`va_¨g
(
≠
, uint32_t);

495 
vÀn
 = 
	`mknum°r
(
v°r
,&
uvÆ
,
Ál£
,16,
u£_ˇps
);

496 
v°Ω
 = &
v°r
[
vÀn
];

498 
dsch¨
 = 
Ál£
;

499 i‡(
	`IS_FLAG_ZERO
(
Êags_u£d
))

501 i‡(
	`IS_FLAG_POUND
(
Êags_u£d
))

503 
	`n_putch¨
(
func_±r
, '0', 
Árg
, &
max_cou¡
);

504 
	`n_putch¨
(
func_±r
, (
u£_ˇps
 ? 'X' : 'x'), 
Árg
, &
max_cou¡
);

505 
cou¡
 += 2;

507 
dsch¨
 = 
åue
;

509 
	`Âut_∑d
('0', 
vÀn
, 
fõld_width
, &
cou¡
, 
func_±r
, 
Árg
, &
max_cou¡
);

510 
vÀn
 = 
fõld_width
;

514 i‡(!
	`IS_FLAG_MINUS
(
Êags_u£d
))

516 i‡(
	`IS_FLAG_POUND
(
Êags_u£d
))

518 
vÀn
 += 2;

520 
	`Âut_∑d
(' ', 
vÀn
, 
fõld_width
, &
cou¡
, 
func_±r
, 
Árg
, &
max_cou¡
);

521 i‡(
	`IS_FLAG_POUND
(
Êags_u£d
))

523 
	`n_putch¨
(
func_±r
, '0', 
Árg
, &
max_cou¡
);

524 
	`n_putch¨
(
func_±r
, (
u£_ˇps
 ? 'X' : 'x'), 
Árg
, &
max_cou¡
);

525 
cou¡
 += 2;

527 
dsch¨
 = 
åue
;

532 i‡((
	`IS_FLAG_POUND
(
Êags_u£d
)Ë&& (!
dsch¨
))

534 
	`n_putch¨
(
func_±r
, '0', 
Árg
, &
max_cou¡
);

535 
	`n_putch¨
(
func_±r
, (
u£_ˇps
 ? 'X' : 'x'), 
Árg
, &
max_cou¡
);

536 
cou¡
 += 2;

537 
vÀn
 += 2;

539 
c⁄t_xd
;

542 
uvÆ
 = (
uöt32_t
)
	`va_¨g
(
≠
, uint32_t);

543 
vÀn
 = 
	`mknum°r
(
v°r
,&
uvÆ
,
Ál£
,8,
u£_ˇps
);

544 
c⁄t_u
;

546 
uvÆ
 = (
uöt32_t
)
	`va_¨g
(
≠
, uint32_t);

547 
vÀn
 = 
	`mknum°r
(
v°r
,&
uvÆ
,
Ál£
,2,
u£_ˇps
);

548 
c⁄t_u
;

550 
uvÆ
 = (
uöt32_t
)
	`va_¨g
(
≠
, uint32_t);

551 
uvÆ
 = (
uöt32_t
)
	`va_¨g
(
≠
, *);

552 
vÀn
 = 
	`mknum°r
(
v°r
,&
uvÆ
,
Ál£
,16,
u£_ˇps
);

553 
c⁄t_u
;

555 
uvÆ
 = (
uöt32_t
)
	`va_¨g
(
≠
, uint32_t);

556 
vÀn
 = 
	`mknum°r
(
v°r
,&
uvÆ
,
Ál£
,10,
u£_ˇps
);

558 
c⁄t_u
:

559 
v°Ω
 = &
v°r
[
vÀn
];

561 i‡(
	`IS_FLAG_ZERO
(
Êags_u£d
))

563 
	`Âut_∑d
('0', 
vÀn
, 
fõld_width
, &
cou¡
, 
func_±r
, 
Árg
, &
max_cou¡
);

564 
vÀn
 = 
fõld_width
;

568 i‡(!
	`IS_FLAG_MINUS
(
Êags_u£d
))

570 
	`Âut_∑d
(' ', 
vÀn
, 
fõld_width
, &
cou¡
, 
func_±r
, 
Árg
, &
max_cou¡
);

574 
c⁄t_xd
:

575 *
v°Ω
)

577 
	`n_putch¨
(
func_±r
, *
v°Ω
--, 
Árg
, &
max_cou¡
);

578 
cou¡
++;

581 i‡(
	`IS_FLAG_MINUS
(
Êags_u£d
))

583 
	`Âut_∑d
(' ', 
vÀn
, 
fõld_width
, &
cou¡
, 
func_±r
, 
Árg
, &
max_cou¡
);

588 
cvÆ
 = ()
	`va_¨g
(
≠
, 
uöt32_t
);

589 
	`n_putch¨
(
func_±r
, 
cvÆ
, 
Árg
, &
max_cou¡
);

590 
cou¡
++;

593 
svÆ
 = (*)
	`va_¨g
(
≠
, *);

594 i‡(
svÆ
)

596 
vÀn
 = 
	`°æí
(
svÆ
);

597 i‡(!
	`IS_FLAG_MINUS
(
Êags_u£d
))

599 
	`Âut_∑d
(' ', 
vÀn
, 
fõld_width
, &
cou¡
, 
func_±r
, 
Árg
, &
max_cou¡
);

601 *
svÆ
)

603 
	`n_putch¨
(
func_±r
, *
svÆ
++, 
Árg
, &
max_cou¡
);

604 
cou¡
++;

606 i‡(
	`IS_FLAG_MINUS
(
Êags_u£d
))

608 
	`Âut_∑d
(' ', 
vÀn
, 
fõld_width
, &
cou¡
, 
func_±r
, 
Árg
, &
max_cou¡
);

613 
ivÆp
 = (
öt32_t
 *)
	`va_¨g
(
≠
, int32_t *);

614 *
ivÆp
 = 
cou¡
;

617 
	`n_putch¨
(
func_±r
, 
c
, 
Árg
, &
max_cou¡
);

618 
cou¡
++;

623 i‡(
max_cou¡
)

625  
cou¡
;

629  
ãmp_cou¡
;

631 
	}
}

640 
	$_•utc
(
c
, * 
öput_°rög
)

642 **
°rög_±r
 = (**)
öput_°rög
;

644 *(*
°rög_±r
)++ = ()
c
;

645  
c
;

646 
	}
}

654 
öt32_t
 
	$mknum°r
 (*
num°r
, *
nump
, 
öt32_t
 
√g
, i¡32_à
ødix
, 
boﬁ
 
u£_ˇps
)

656 
öt32_t
 
a
,
b
,
c
;

657 
uöt32_t
 
ua
,
ub
,
uc
;

659 
öt32_t
 
∆í
;

660 *
n°Ω
;

662 
∆í
 = 0;

663 
n°Ω
 = 
num°r
;

664 *
n°Ω
++ = '\0';

666 i‡(
√g
)

668 
a
 = *(
öt32_t
 *)
nump
;

669 i‡(
a
 == 0)

671 *
n°Ω
 = '0';

672 ++
∆í
;

673 
d⁄e
;

675 
a
 != 0)

677 
b
 = (
öt32_t
)
a
 / (öt32_t)
ødix
;

678 
c
 = (
öt32_t
)
a
 - ((öt32_t)
b
 * (öt32_t)
ødix
);

679 i‡(
c
 < 0)

681 
c
 = ~c + 1 + '0';

685 
c
 = c + '0';

687 
a
 = 
b
;

688 *
n°Ω
++ = ()
c
;

689 ++
∆í
;

694 
ua
 = *(
uöt32_t
 *)
nump
;

695 i‡(
ua
 == 0)

697 *
n°Ω
 = '0';

698 ++
∆í
;

699 
d⁄e
;

701 
ua
 != 0)

703 
ub
 = (
uöt32_t
)
ua
 / (uöt32_t)
ødix
;

704 
uc
 = (
uöt32_t
)
ua
 - ((uöt32_t)
ub
 * (uöt32_t)
ødix
);

705 i‡(
uc
 < 10)

707 
uc
 = uc + '0';

711 
uc
 = u¯- 10 + (
u£_ˇps
 ? 'A' : 'a');

713 
ua
 = 
ub
;

714 *
n°Ω
++ = ()
uc
;

715 ++
∆í
;

718 
d⁄e
:

719  
∆í
;

720 
	}
}

722 #i‡
deföed
(
PRINTF_FLOAT_ENABLE
)

730 
öt32_t
 
	$mkÊﬂäum°r
 (*
num°r
, *
nump
, 
öt32_t
 
ødix
, 
uöt32_t
 
¥ecisi⁄_width
)

732 
öt32_t
 
a
,
b
,
c
,
i
;

733 
Á
,
fb
;

734 
r
, 
‰a˘∑π
, 
öç¨t
;

736 
öt32_t
 
∆í
;

737 *
n°Ω
;

738 
∆í
 = 0;

739 
n°Ω
 = 
num°r
;

740 *
n°Ω
++ = '\0';

741 
r
 = *(*)
nump
;

742 i‡(
r
 == 0)

744 *
n°Ω
 = '0';

745 ++
∆í
;

746 
d⁄e
;

748 
‰a˘∑π
 = 
	`modf
(()
r
 , (*)&
öç¨t
);

750 
i
 = 0; i < 
¥ecisi⁄_width
; i++)

752 
‰a˘∑π
 *
ødix
;

755 
Á
 = 
‰a˘∑π
 + ()0.5;

756 
i
 = 0; i < 
¥ecisi⁄_width
; i++)

758 
fb
 = 
Á
 / (
öt32_t
)
ødix
;

759 
c
 = (
öt32_t
)(
Á
 - (
öt64_t
)
fb
 * (öt32_t)
ødix
);

760 i‡(
c
 < 0)

762 
c
 = ~c + 1 + '0';

765 
c
 = c + '0';

767 
Á
 = 
fb
;

768 *
n°Ω
++ = ()
c
;

769 ++
∆í
;

771 *
n°Ω
++ = ()'.';

772 ++
∆í
;

773 
a
 = (
öt32_t
)
öç¨t
;

774 if(
a
 == 0)

776 *
n°Ω
++ = '0';

777 ++
∆í
;

781 
a
 != 0)

783 
b
 = (
öt32_t
)
a
 / (öt32_t)
ødix
;

784 
c
 = (
öt32_t
)
a
 - ((öt32_t)
b
 * (öt32_t)
ødix
);

785 i‡(
c
 < 0)

787 
c
 = ~c + 1 + '0';

790 
c
 = c + '0';

792 
a
 = 
b
;

793 *
n°Ω
++ = ()
c
;

794 ++
∆í
;

797 
d⁄e
:

798  
∆í
;

799 
	}
}

802 
	$Âut_∑d
(
öt32_t
 
c
, i¡32_à
cuæí
, i¡32_à
fõld_width
, i¡32_à*
cou¡
, 
PUTCHAR_FUNC
 
func_±r
, *
Árg
, *
max_cou¡
)

804 
öt32_t
 
i
;

806 
i
 = 
cuæí
; i < 
fõld_width
; i++)

808 
	`func_±r
(()
c
, 
Árg
);

809 (*
cou¡
)++;

811 
	}
}

820 
	$sˇn_¥v
(c⁄° *
löe_±r
, *
f‹m©
, 
va_li°
 
¨gs_±r
)

822 
uöt8_t
 
ba£
;

824 *
c
 = 
f‹m©
;

825 c⁄° *
s
;

826 
ãmp
;

828 c⁄° *
p
 = 
löe_±r
;

830 
uöt32_t
 
Êag
 = 0 ;

832 
uöt32_t
 
fõld_width
;

834 
uöt32_t
 
«ssig√d
 = 0;

836 
uöt32_t
 
n_decode
 = 0;

838 
öt32_t
 
vÆ
;

839 *
buf
;

840 
öt8_t
 
√g
;

843 i‡(*
p
 == '\0')

845  
EOF
;

849 (*
c
Ë&& (*
p
))

852 i‡(
	`sˇn_ign‹e_whôe_•a˚
((c⁄° **)&
c
))

854 
n_decode
 +
	`sˇn_ign‹e_whôe_•a˚
(&
p
);

856 i‡(*
c
 != '%')

859 
c
++;

860 
‹dö¨y
: i‡(*
p
 =*
c
)

862 
n_decode
++;

863 
p
++;

864 
c
++;

877 
c
++;

878 i‡(*
c
 == '%')

880 
‹dö¨y
;

884 
Êag
 = 0;

885 
fõld_width
 = 0;

886 
ba£
 = 0;

889 (*
c
Ë&& (!(
Êag
 & 
SCAN_DEST_MASK
)))

891 *
c
)

894 i‡(
Êag
 & 
SCAN_SUPPRESS
)

897  
«ssig√d
;

899 
Êag
 |
SCAN_SUPPRESS
;

900 
c
++;

903 i‡(
Êag
 & 
SCAN_LENGTH_MASK
)

906  
«ssig√d
;

908 
Êag
 |
SCAN_LENGTH_SHORT_INT
;

910 i‡(
c
[1] == 'h')

912 
Êag
 |
SCAN_LENGTH_CHAR
;

913 
c
++;

915 
c
++;

918 i‡(
Êag
 & 
SCAN_LENGTH_MASK
)

921  
«ssig√d
;

923 
Êag
 |
SCAN_LENGTH_LONG_INT
;

925 i‡(
c
[1] == 'l')

927 
Êag
 |
SCAN_LENGTH_LONG_LONG_INT
;

928 
c
++;

930 
c
++;

932 #i‡
	`deföed
(
ADVANCE
)

934 i‡(
Êag
 & 
SCAN_LENGTH_MASK
)

937  
«ssig√d
;

939 
Êag
 |
SCAN_LENGTH_INTMAX
;

940 
c
++

942 i‡(
Êag
 & 
SCAN_LENGTH_MASK
)

945  
«ssig√d
;

947 
Êag
 |
SCAN_LENGTH_SIZE_T
;

948 
c
++;

951 i‡(
Êag
 & 
SCAN_LENGTH_MASK
)

954  
«ssig√d
;

956 
Êag
 |
SCAN_LENGTH_PTRDIFF_T
;

957 
c
++;

960 #i‡
	`deföed
(
SCANF_FLOAT_ENABLE
)

962 i‡(
Êag
 & 
SCAN_LENGTH_MASK
)

965  
«ssig√d
;

967 
Êag
 |
SCAN_LENGTH_LONG_DOUBLE
;

968 
c
++;

981 i‡(
fõld_width
)

984  
«ssig√d
;

987 
fõld_width
 = fõld_width * 10 + *
c
 - '0';

988 
c
++;

989 } (*
c
 >= '0') && (*c <= '9'));

992 
Êag
 |
SCAN_TYPE_SIGNED
;

994 
ba£
 = 10;

995 
Êag
 |
SCAN_DEST_INT
;

996 
c
++;

999 
ba£
 = 8;

1000 
Êag
 |
SCAN_DEST_INT
;

1001 
c
++;

1005 
ba£
 = 16;

1006 
Êag
 |
SCAN_DEST_INT
;

1007 
c
++;

1010 
ba£
 = 0;

1011 
Êag
 |
SCAN_DEST_INT
;

1012 
c
++;

1014 #i‡
	`deföed
(
SCANF_FLOAT_ENABLE
)

1023 
Êag
 |
SCAN_DEST_FLOAT
;

1024 
c
++;

1028 
Êag
 |
SCAN_DEST_CHAR
;

1029 i‡(!
fõld_width
)

1031 
fõld_width
 = 1;

1033 
c
++;

1036 
Êag
 |
SCAN_DEST_STRING
;

1037 
c
++;

1039 #i‡
	`deföed
(
ADVANCE
)

1041 
Êag
 |
SCAN_DEST_SET
;

1046 #i‡
	`deföed
(
SCAN_DEBUG
)

1047 
	`¥ötf
("UƒecognizedÉx¥essi⁄ s≥cifõr: %¯f‹m©: %s,Çumbî is: %d\r\n", 
c
, 
f‹m©
, 
«ssig√d
);

1049  
«ssig√d
;

1053 i‡(!(
Êag
 & 
SCAN_DEST_MASK
))

1056  
«ssig√d
;

1059 i‡(!
fõld_width
)

1062 
fõld_width
 = 99;

1066 
Êag
 & 
SCAN_DEST_MASK
)

1068 
SCAN_DEST_CHAR
:

1069 
s
 = (c⁄° *)
p
;

1070 
buf
 = 
	`va_¨g
(
¨gs_±r
, *);

1071 (
fõld_width
--Ë&& (*
p
))

1073 i‡(!(
Êag
 & 
SCAN_SUPPRESS
))

1075 *
buf
++ = *
p
++;

1079 
p
++;

1081 
n_decode
++;

1084 i‡(((!(
Êag
)Ë& 
SCAN_SUPPRESS
Ë&& (
s
 !
p
))

1086 
«ssig√d
++;

1089 
SCAN_DEST_STRING
:

1090 
n_decode
 +
	`sˇn_ign‹e_whôe_•a˚
(&
p
);

1091 
s
 = 
p
;

1092 
buf
 = 
	`va_¨g
(
¨gs_±r
, *);

1093 (
fõld_width
--Ë&& (*
p
 != '\0') && (*p != ' ') &&

1094 (*
p
 != '\t') && (*p != '\n') && (*p != '\r') && (*p != '\v') && (*p != '\f'))

1096 i‡(
Êag
 & 
SCAN_SUPPRESS
)

1098 
p
++;

1102 *
buf
++ = *
p
++;

1104 
n_decode
++;

1107 i‡((!(
Êag
 & 
SCAN_SUPPRESS
)Ë&& (
s
 !
p
))

1110 *
buf
 = '\0';

1111 
«ssig√d
++;

1114 
SCAN_DEST_INT
:

1115 
n_decode
 +
	`sˇn_ign‹e_whôe_•a˚
(&
p
);

1116 
s
 = 
p
;

1117 
vÆ
 = 0;

1119 i‡((
ba£
 == 0) || (base == 16))

1121 i‡((
s
[0] == '0') && ((s[1] == 'x') || (s[1] == 'X')))

1123 
ba£
 = 16;

1124 i‡(
fõld_width
 >= 1)

1126 
p
 += 2;

1127 
n_decode
 += 2;

1128 
fõld_width
 -= 2;

1133 i‡(
ba£
 == 0)

1135 i‡(
s
[0] == '0')

1137 
ba£
 = 8;

1141 
ba£
 = 10;

1145 
√g
 = 1;

1146 *
p
)

1149 
√g
 = -1;

1150 
n_decode
++;

1151 
p
++;

1152 
fõld_width
--;

1155 
√g
 = 1;

1156 
n_decode
++;

1157 
p
++;

1158 
fõld_width
--;

1164 (*
p
Ë&& (
fõld_width
--))

1166 i‡((*
p
 <= '9') && (*p >= '0'))

1168 
ãmp
 = *
p
 - '0';

1170 if((*
p
 <= 'f') && (*p >= 'a'))

1172 
ãmp
 = *
p
 - 'a' + 10;

1174 if((*
p
 <= 'F') && (*p >= 'A'))

1176 
ãmp
 = *
p
 - 'A' + 10;

1183 i‡(
ãmp
 >
ba£
)

1189 
vÆ
 = 
ba£
 * vÆ + 
ãmp
;

1191 
p
++;

1192 
n_decode
++;

1195 
vÆ
 *
√g
;

1196 i‡(!(
Êag
 & 
SCAN_SUPPRESS
))

1198 
Êag
 & 
SCAN_LENGTH_MASK
)

1200 
SCAN_LENGTH_CHAR
:

1201 i‡(
Êag
 & 
SCAN_TYPE_SIGNED
)

1203 *
	`va_¨g
(
¨gs_±r
, sig√d *Ë(sig√d )
vÆ
;

1207 *
	`va_¨g
(
¨gs_±r
, *Ë()
vÆ
;

1210 
SCAN_LENGTH_SHORT_INT
:

1211 i‡(
Êag
 & 
SCAN_TYPE_SIGNED
)

1213 *
	`va_¨g
(
¨gs_±r
, sig√d *Ë(sig√d )
vÆ
;

1217 *
	`va_¨g
(
¨gs_±r
, *Ë()
vÆ
;

1220 
SCAN_LENGTH_LONG_INT
:

1221 i‡(
Êag
 & 
SCAN_TYPE_SIGNED
)

1223 *
	`va_¨g
(
¨gs_±r
, sig√d *Ë(sig√d )
vÆ
;

1227 *
	`va_¨g
(
¨gs_±r
, *Ë()
vÆ
;

1230 
SCAN_LENGTH_LONG_LONG_INT
:

1231 i‡(
Êag
 & 
SCAN_TYPE_SIGNED
)

1233 *
	`va_¨g
(
¨gs_±r
, sig√d *Ë(sig√d )
vÆ
;

1237 *
	`va_¨g
(
¨gs_±r
, *Ë()
vÆ
;

1242 i‡(
Êag
 & 
SCAN_TYPE_SIGNED
)

1244 *
	`va_¨g
(
¨gs_±r
, sig√d *Ë(sig√d )
vÆ
;

1248 *
	`va_¨g
(
¨gs_±r
, *Ë()
vÆ
;

1252 
«ssig√d
++;

1255 #i‡
	`deföed
(
SCANF_FLOAT_ENABLE
)

1256 
SCAN_DEST_FLOAT
:

1257 
n_decode
 +
	`sˇn_ign‹e_whôe_•a˚
(&
p
);

1258 
‚um
 = 
	`°πod
(
p
, (**)&
s
);

1260 i‡((
‚um
 =
HUGE_VAL
) || (fnum == -HUGE_VAL))

1265 
n_decode
 +()(
s
Ë- ()(
p
);

1266 
p
 = 
s
;

1267 i‡(!(
Êag
 & 
SCAN_SUPPRESS
))

1269 i‡(
Êag
 & 
SCAN_LENGTH_LONG_DOUBLE
)

1271 *
	`va_¨g
(
¨gs_±r
, *Ë
‚um
;

1275 *
	`va_¨g
(
¨gs_±r
, *Ë()
‚um
;

1277 
«ssig√d
++;

1281 #i‡
	`deföed
(
ADVANCE
)

1282 
SCAN_DEST_SET
:

1286 #i‡
	`deföed
(
SCAN_DEBUG
)

1287 
	`¥ötf
("ERROR: Fûê%†Üöe: %d\r\n", 
__FILE__
, 
__LINE__
);

1289  
«ssig√d
;

1293  
«ssig√d
;

1294 
	}
}

1302 
uöt32_t
 
	$sˇn_ign‹e_whôe_•a˚
(c⁄° **
s
)

1304 
uöt8_t
 
cou¡
 = 0;

1305 
uöt8_t
 
c
;

1307 
c
 = **
s
;

1308 (
c
 == ' ') || (c == '\t') || (c == '\n') || (c == '\r') || (c == '\v') || (c == '\f'))

1310 
cou¡
++;

1311 (*
s
)++;

1312 
c
 = **
s
;

1314  
cou¡
;

1315 
	}
}

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\utilities\src\print_scan.h

30 #i‚de‡
__¥öt_sˇn_h__


31 
	#__¥öt_sˇn_h__


	)

33 
	~<°dio.h
>

34 
	~<°d¨g.h
>

35 
	~<°döt.h
>

36 
	~<°dboﬁ.h
>

37 
	~<°rög.h
>

43 #i‚de‡
HUGE_VAL


44 
	#HUGE_VAL
 (99.e99)

46 

	)

47 (*
	tPUTCHAR_FUNC
)(
	ta
, *
	tb
);

65 
	`_d›röt
(*
Árg
, 
PUTCHAR_FUNC
 
func_±r
, 
max_cou¡
, *
fmt
, 
va_li°
 
≠
);

76 
	`_•utc
(
c
, * 
öput_°rög
);

89 
	`sˇn_¥v
(c⁄° *
löe_±r
, *
f‹m©
, 
va_li°
 
¨gs_±r
);

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\services\inc\list_head.h

1 #i‚de‡
__LIST_HEAD__


2 
	#__LIST_HEAD__


	)

4 
	~<°dio.h
>

5 
	~<°rög.h
>

8 
	#c⁄èöî_of
(
±r
, 
ty≥
, 
membî
Ë(—y≥ *)((*Ìå - 
	`off£tof
—y≥,membî)))

	)

10 
	#LIST_POISON1
 ((*Ë0x00100100)

	)

11 
	#LIST_POISON2
 ((*Ë0x00200200)

	)

13 
	sli°_hód
 {

14 
li°_hód
 *
	m√xt
, *
	m¥ev
;

17 
	shli°_hód
 {

18 
hli°_node
 *
	mfú°
;

21 
	shli°_node
 {

22 
hli°_node
 *
	m√xt
, **
	mµªv
;

35 
	#LIST_HEAD_INIT
(
«me
Ë{ &“ame), &“ameË}

	)

37 
	#LIST_HEAD
(
«me
) \

38 
li°_hód
 
«me
 = 
	`LIST_HEAD_INIT
“ame)

	)

40 
__ölöe
 
	$INIT_LIST_HEAD
(
li°_hód
 *
li°
)

42 
li°
->
√xt
 =Üist;

43 
li°
->
¥ev
 =Üist;

44 
	}
}

52 
__ölöe
 
	$__li°_add
(
li°_hód
 *
√w
,

53 
li°_hód
 *
¥ev
,

54 
li°_hód
 *
√xt
)

56 
√xt
->
¥ev
 = 
√w
;

57 
√w
->
√xt
 =Çext;

58 
√w
->
¥ev
 =Örev;

59 
¥ev
->
√xt
 = 
√w
;

60 
	}
}

70 
__ölöe
 
	$li°_add
(
li°_hód
 *
√w
, li°_hód *
hód
)

72 
	`__li°_add
(
√w
, 
hód
, hód->
√xt
);

73 
	}
}

84 
__ölöe
 
	$li°_add_èû
(
li°_hód
 *
√w
, li°_hód *
hód
)

86 
	`__li°_add
(
√w
, 
hód
->
¥ev
, head);

87 
	}
}

96 
__ölöe
 
	$__li°_dñ
(
li°_hód
 * 
¥ev
, li°_hód * 
√xt
)

98 
√xt
->
¥ev
 =Örev;

99 
¥ev
->
√xt
 =Çext;

100 
	}
}

108 
__ölöe
 
	$__li°_dñ_íåy
(
li°_hód
 *
íåy
)

110 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

111 
	}
}

113 
__ölöe
 
	$li°_dñ
(
li°_hód
 *
íåy
)

115 
	`__li°_dñ
(
íåy
->
¥ev
,É¡ry->
√xt
);

116 
íåy
->
√xt
 = 
LIST_POISON1
;

117 
íåy
->
¥ev
 = 
LIST_POISON2
;

118 
	}
}

127 
__ölöe
 
	$li°_ª∂a˚
(
li°_hód
 *
ﬁd
,

128 
li°_hód
 *
√w
)

130 
√w
->
√xt
 = 
ﬁd
->next;

131 
√w
->
√xt
->
¥ev
 =Çew;

132 
√w
->
¥ev
 = 
ﬁd
->prev;

133 
√w
->
¥ev
->
√xt
 =Çew;

134 
	}
}

136 
__ölöe
 
	$li°_ª∂a˚_öô
(
li°_hód
 *
ﬁd
,

137 
li°_hód
 *
√w
)

139 
	`li°_ª∂a˚
(
ﬁd
, 
√w
);

140 
	`INIT_LIST_HEAD
(
ﬁd
);

141 
	}
}

147 
__ölöe
 
	$li°_dñ_öô
(
li°_hód
 *
íåy
)

149 
	`__li°_dñ_íåy
(
íåy
);

150 
	`INIT_LIST_HEAD
(
íåy
);

151 
	}
}

158 
__ölöe
 
	$li°_move
(
li°_hód
 *
li°
, li°_hód *
hód
)

160 
	`__li°_dñ_íåy
(
li°
);

161 
	`li°_add
(
li°
, 
hód
);

162 
	}
}

169 
__ölöe
 
	$li°_move_èû
(
li°_hód
 *
li°
,

170 
li°_hód
 *
hód
)

172 
	`__li°_dñ_íåy
(
li°
);

173 
	`li°_add_èû
(
li°
, 
hód
);

174 
	}
}

181 
__ölöe
 
	$li°_is_œ°
(c⁄° 
li°_hód
 *
li°
,

182 c⁄° 
li°_hód
 *
hód
)

184  
li°
->
√xt
 =
hód
;

185 
	}
}

191 
__ölöe
 
	$li°_em±y
(c⁄° 
li°_hód
 *
hód
)

193  
hód
->
√xt
 == head;

194 
	}
}

209 
__ölöe
 
	$li°_em±y_ˇªful
(c⁄° 
li°_hód
 *
hód
)

211 
li°_hód
 *
√xt
 = 
hód
->next;

212  (
√xt
 =
hód
Ë&& (√xà=hód->
¥ev
);

213 
	}
}

219 
__ölöe
 
	$li°_rŸ©e_À·
(
li°_hód
 *
hód
)

221 
li°_hód
 *
fú°
;

223 i‡(!
	`li°_em±y
(
hód
)) {

224 
fú°
 = 
hód
->
√xt
;

225 
	`li°_move_èû
(
fú°
, 
hód
);

227 
	}
}

233 
__ölöe
 
	$li°_is_söguœr
(c⁄° 
li°_hód
 *
hód
)

235  !
	`li°_em±y
(
hód
Ë&& (hód->
√xt
 =hód->
¥ev
);

236 
	}
}

238 
__ölöe
 
	$__li°_cut_posôi⁄
(
li°_hód
 *
li°
,

239 
li°_hód
 *
hód
, li°_hód *
íåy
)

241 
li°_hód
 *
√w_fú°
 = 
íåy
->
√xt
;

242 
li°
->
√xt
 = 
hód
->next;

243 
li°
->
√xt
->
¥ev
 =Üist;

244 
li°
->
¥ev
 = 
íåy
;

245 
íåy
->
√xt
 = 
li°
;

246 
hód
->
√xt
 = 
√w_fú°
;

247 
√w_fú°
->
¥ev
 = 
hód
;

248 
	}
}

264 
__ölöe
 
	$li°_cut_posôi⁄
(
li°_hód
 *
li°
,

265 
li°_hód
 *
hód
, li°_hód *
íåy
)

267 i‡(
	`li°_em±y
(
hód
))

269 i‡(
	`li°_is_söguœr
(
hód
) &&

270 (
hód
->
√xt
 !
íåy
 && head !=Éntry))

272 i‡(
íåy
 =
hód
)

273 
	`INIT_LIST_HEAD
(
li°
);

275 
	`__li°_cut_posôi⁄
(
li°
, 
hód
, 
íåy
);

276 
	}
}

278 
__ölöe
 
	$__li°_•li˚
(c⁄° 
li°_hód
 *
li°
,

279 
li°_hód
 *
¥ev
,

280 
li°_hód
 *
√xt
)

282 
li°_hód
 *
fú°
 = 
li°
->
√xt
;

283 
li°_hód
 *
œ°
 = 
li°
->
¥ev
;

285 
fú°
->
¥ev
 =Örev;

286 
¥ev
->
√xt
 = 
fú°
;

288 
œ°
->
√xt
 =Çext;

289 
√xt
->
¥ev
 = 
œ°
;

290 
	}
}

297 
__ölöe
 
	$li°_•li˚
(c⁄° 
li°_hód
 *
li°
,

298 
li°_hód
 *
hód
)

300 i‡(!
	`li°_em±y
(
li°
))

301 
	`__li°_•li˚
(
li°
, 
hód
, hód->
√xt
);

302 
	}
}

309 
__ölöe
 
	$li°_•li˚_èû
(
li°_hód
 *
li°
,

310 
li°_hód
 *
hód
)

312 i‡(!
	`li°_em±y
(
li°
))

313 
	`__li°_•li˚
(
li°
, 
hód
->
¥ev
, head);

314 
	}
}

323 
__ölöe
 
	$li°_•li˚_öô
(
li°_hód
 *
li°
,

324 
li°_hód
 *
hód
)

326 i‡(!
	`li°_em±y
(
li°
)) {

327 
	`__li°_•li˚
(
li°
, 
hód
, hód->
√xt
);

328 
	`INIT_LIST_HEAD
(
li°
);

330 
	}
}

340 
__ölöe
 
	$li°_•li˚_èû_öô
(
li°_hód
 *
li°
,

341 
li°_hód
 *
hód
)

343 i‡(!
	`li°_em±y
(
li°
)) {

344 
	`__li°_•li˚
(
li°
, 
hód
->
¥ev
, head);

345 
	`INIT_LIST_HEAD
(
li°
);

347 
	}
}

355 
	#li°_íåy
(
±r
, 
ty≥
, 
membî
) \

356 
	`c⁄èöî_of
(
±r
, 
ty≥
, 
membî
)

	)

366 
	#li°_fú°_íåy
(
±r
, 
ty≥
, 
membî
) \

367 
	`li°_íåy
((
±r
)->
√xt
, 
ty≥
, 
membî
)

	)

377 
	#li°_œ°_íåy
(
±r
, 
ty≥
, 
membî
) \

378 
	`li°_íåy
((
±r
)->
¥ev
, 
ty≥
, 
membî
)

	)

388 
	#li°_fú°_íåy_‹_nuŒ
(
±r
, 
ty≥
, 
membî
) \

389 (!
	`li°_em±y
(
±r
Ë? 
	`li°_fú°_íåy
’å, 
ty≥
, 
membî
Ë: 
NULL
)

	)

396 
	#li°_√xt_íåy
(
pos
, 
membî
) \

397 
	`li°_íåy
((
pos
)->
membî
.
√xt
, 
	`ty≥of
(*’os)), membî)

	)

404 
	#li°_¥ev_íåy
(
pos
, 
membî
) \

405 
	`li°_íåy
((
pos
)->
membî
.
¥ev
, 
	`ty≥of
(*’os)), membî)

	)

412 
	#li°_f‹_óch
(
pos
, 
hód
) \

413 
pos
 = (
hód
)->
√xt
;Öo†!(hód);Öo†pos->√xt)

	)

420 
	#li°_f‹_óch_¥ev
(
pos
, 
hód
) \

421 
pos
 = (
hód
)->
¥ev
;Öo†!(hód);Öo†pos->¥ev)

	)

429 
	#li°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

430 
pos
 = (
hód
)->
√xt
, 
n
 =Öos->next;Öos != (head); \

431 
pos
 = 
n
,Ç =Öos->
√xt
)

	)

439 
	#li°_f‹_óch_¥ev_ß„
(
pos
, 
n
, 
hód
) \

440 
pos
 = (
hód
)->
¥ev
, 
n
 =Öos->prev; \

441 
pos
 !(
hód
); \

442 
pos
 = 
n
,Ç =Öos->
¥ev
)

	)

450 
	#li°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

451 
pos
 = 
	`li°_fú°_íåy
(
hód
, 
	`ty≥of
(*pos), 
membî
); \

452 &
pos
->
membî
 !(
hód
); \

453 
pos
 = 
	`li°_√xt_íåy
’os, 
membî
))

	)

461 
	#li°_f‹_óch_íåy_ªvî£
(
pos
, 
hód
, 
membî
) \

462 
pos
 = 
	`li°_œ°_íåy
(
hód
, 
	`ty≥of
(*pos), 
membî
); \

463 &
pos
->
membî
 !(
hód
); \

464 
pos
 = 
	`li°_¥ev_íåy
’os, 
membî
))

	)

474 
	#li°_¥ï¨e_íåy
(
pos
, 
hód
, 
membî
) \

475 ((
pos
Ë? : 
	`li°_íåy
(
hód
, 
	`ty≥of
(*pos), 
membî
))

	)

486 
	#li°_f‹_óch_íåy_c⁄töue
(
pos
, 
hód
, 
membî
) \

487 
pos
 = 
	`li°_√xt_íåy
’os, 
membî
); \

488 &
pos
->
membî
 !(
hód
); \

489 
pos
 = 
	`li°_√xt_íåy
’os, 
membî
))

	)

500 
	#li°_f‹_óch_íåy_c⁄töue_ªvî£
(
pos
, 
hód
, 
membî
) \

501 
pos
 = 
	`li°_¥ev_íåy
’os, 
membî
); \

502 &
pos
->
membî
 !(
hód
); \

503 
pos
 = 
	`li°_¥ev_íåy
’os, 
membî
))

	)

513 
	#li°_f‹_óch_íåy_‰om
(
pos
, 
hód
, 
membî
) \

514 ; &
pos
->
membî
 !(
hód
); \

515 
pos
 = 
	`li°_√xt_íåy
’os, 
membî
))

	)

524 
	#li°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
membî
) \

525 
pos
 = 
	`li°_fú°_íåy
(
hód
, 
	`ty≥of
(*pos), 
membî
), \

526 
n
 = 
	`li°_√xt_íåy
(
pos
, 
membî
); \

527 &
pos
->
membî
 !(
hód
); \

528 
pos
 = 
n
,Ç = 
	`li°_√xt_íåy
“, 
membî
))

	)

540 
	#li°_f‹_óch_íåy_ß„_c⁄töue
(
pos
, 
n
, 
hód
, 
membî
) \

541 
pos
 = 
	`li°_√xt_íåy
’os, 
membî
), \

542 
n
 = 
	`li°_√xt_íåy
(
pos
, 
membî
); \

543 &
pos
->
membî
 !(
hód
); \

544 
pos
 = 
n
,Ç = 
	`li°_√xt_íåy
“, 
membî
))

	)

556 
	#li°_f‹_óch_íåy_ß„_‰om
(
pos
, 
n
, 
hód
, 
membî
) \

557 
n
 = 
	`li°_√xt_íåy
(
pos
, 
membî
); \

558 &
pos
->
membî
 !(
hód
); \

559 
pos
 = 
n
,Ç = 
	`li°_√xt_íåy
“, 
membî
))

	)

571 
	#li°_f‹_óch_íåy_ß„_ªvî£
(
pos
, 
n
, 
hód
, 
membî
) \

572 
pos
 = 
	`li°_œ°_íåy
(
hód
, 
	`ty≥of
(*pos), 
membî
), \

573 
n
 = 
	`li°_¥ev_íåy
(
pos
, 
membî
); \

574 &
pos
->
membî
 !(
hód
); \

575 
pos
 = 
n
,Ç = 
	`li°_¥ev_íåy
“, 
membî
))

	)

589 
	#li°_ß„_ª£t_√xt
(
pos
, 
n
, 
membî
) \

590 
n
 = 
	`li°_√xt_íåy
(
pos
, 
membî
)

	)

599 
	#HLIST_HEAD_INIT
 { .
fú°
 = 
NULL
 }

	)

600 
	#HLIST_HEAD
(
«me
Ë
hli°_hód
Çamê{ .
fú°
 = 
NULL
 }

	)

601 
	#INIT_HLIST_HEAD
(
±r
Ë(’å)->
fú°
 = 
NULL
)

	)

602 
__ölöe
 
	$INIT_HLIST_NODE
(
hli°_node
 *
h
)

604 
h
->
√xt
 = 
NULL
;

605 
h
->
µªv
 = 
NULL
;

606 
	}
}

608 
__ölöe
 
	$hli°_unhashed
(c⁄° 
hli°_node
 *
h
)

610  !
h
->
µªv
;

611 
	}
}

613 
__ölöe
 
	$hli°_em±y
(c⁄° 
hli°_hód
 *
h
)

615  !
h
->
fú°
;

616 
	}
}

618 
__ölöe
 
	$__hli°_dñ
(
hli°_node
 *
n
)

620 
hli°_node
 *
√xt
 = 
n
->next;

621 
hli°_node
 **
µªv
 = 
n
->pprev;

622 *
µªv
 = 
√xt
;

623 i‡(
√xt
)

624 
√xt
->
µªv
 =Öprev;

625 
	}
}

627 
__ölöe
 
	$hli°_dñ
(
hli°_node
 *
n
)

629 
	`__hli°_dñ
(
n
);

630 
n
->
√xt
 = 
LIST_POISON1
;

631 
n
->
µªv
 = 
LIST_POISON2
;

632 
	}
}

634 
__ölöe
 
	$hli°_dñ_öô
(
hli°_node
 *
n
)

636 i‡(!
	`hli°_unhashed
(
n
)) {

637 
	`__hli°_dñ
(
n
);

638 
	`INIT_HLIST_NODE
(
n
);

640 
	}
}

642 
__ölöe
 
	$hli°_add_hód
(
hli°_node
 *
n
, 
hli°_hód
 *
h
)

644 
hli°_node
 *
fú°
 = 
h
->first;

645 
n
->
√xt
 = 
fú°
;

646 i‡(
fú°
)

647 
fú°
->
µªv
 = &
n
->
√xt
;

648 
h
->
fú°
 = 
n
;

649 
n
->
µªv
 = &
h
->
fú°
;

650 
	}
}

653 
__ölöe
 
	$hli°_add_bef‹e
(
hli°_node
 *
n
,

654 
hli°_node
 *
√xt
)

656 
n
->
µªv
 = 
√xt
->pprev;

657 
n
->
√xt
 =Çext;

658 
√xt
->
µªv
 = &
n
->next;

659 *(
n
->
µªv
) =Ç;

660 
	}
}

662 
__ölöe
 
	$hli°_add_behöd
(
hli°_node
 *
n
,

663 
hli°_node
 *
¥ev
)

665 
n
->
√xt
 = 
¥ev
->next;

666 
¥ev
->
√xt
 = 
n
;

667 
n
->
µªv
 = &
¥ev
->
√xt
;

669 i‡(
n
->
√xt
)

670 
n
->
√xt
->
µªv
 = &n->next;

671 
	}
}

674 
__ölöe
 
	$hli°_add_Áke
(
hli°_node
 *
n
)

676 
n
->
µªv
 = &n->
√xt
;

677 
	}
}

683 
__ölöe
 
	$hli°_move_li°
(
hli°_hód
 *
ﬁd
,

684 
hli°_hód
 *
√w
)

686 
√w
->
fú°
 = 
ﬁd
->first;

687 i‡(
√w
->
fú°
)

688 
√w
->
fú°
->
µªv
 = &new->first;

689 
ﬁd
->
fú°
 = 
NULL
;

690 
	}
}

692 
	#hli°_íåy
(
±r
, 
ty≥
, 
membî
Ë
	`c⁄èöî_of
’å,ty≥,membî)

	)

694 
	#hli°_f‹_óch
(
pos
, 
hód
) \

695 
pos
 = (
hód
)->
fú°
;Öo†;Öo†pos->
√xt
)

	)

697 
	#hli°_f‹_óch_ß„
(
pos
, 
n
, 
hód
) \

698 
pos
 = (
hód
)->
fú°
;Öo†&& ({ 
n
 =Öos->
√xt
; 1; }); \

699 
pos
 = 
n
)

	)

701 
	#hli°_íåy_ß„
(
±r
, 
ty≥
, 
membî
) \

702 ({ 
	`ty≥of
(
±r
Ë
____±r
 = (ptr); \

703 
____±r
 ? 
	`hli°_íåy
(____±r, 
ty≥
, 
membî
Ë: 
NULL
; \

704 })

	)

712 
	#hli°_f‹_óch_íåy
(
pos
, 
hód
, 
membî
) \

713 
pos
 = 
	`hli°_íåy_ß„
((
hód
)->
fú°
, 
	`ty≥of
(*’os)), 
membî
);\

714 
pos
; \

715 
pos
 = 
	`hli°_íåy_ß„
(’os)->
membî
.
√xt
, 
	`ty≥of
(*’os)), membî))

	)

722 
	#hli°_f‹_óch_íåy_c⁄töue
(
pos
, 
membî
) \

723 
pos
 = 
	`hli°_íåy_ß„
(’os)->
membî
.
√xt
, 
	`ty≥of
(*(pos)), member);\

724 
pos
; \

725 
pos
 = 
	`hli°_íåy_ß„
(’os)->
membî
.
√xt
, 
	`ty≥of
(*’os)), membî))

	)

732 
	#hli°_f‹_óch_íåy_‰om
(
pos
, 
membî
) \

733 ; 
pos
; \

734 
pos
 = 
	`hli°_íåy_ß„
(’os)->
membî
.
√xt
, 
	`ty≥of
(*’os)), membî))

	)

743 
	#hli°_f‹_óch_íåy_ß„
(
pos
, 
n
, 
hód
, 
membî
) \

744 
pos
 = 
	`hli°_íåy_ß„
((
hód
)->
fú°
, 
	`ty≥of
(*pos), 
membî
);\

745 
pos
 && ({ 
n
 =Öos->
membî
.
√xt
; 1; }); \

746 
pos
 = 
	`hli°_íåy_ß„
(
n
, 
	`ty≥of
(*pos), 
membî
))

	)

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\services\inc\message.h

1 #i‚de‡
__MESSAGE_H__


2 
	#__MESSAGE_H__


	)

4 
	~<°döt.h
>

5 
	~"li°_hód.h
"

9 
uöt8_t
 *
	md©a
;

10 
uöt32_t
 
	mÀn
;

11 
uöt32_t
 
	mid
;

12 
li°_hód
 
	mli°
;

13 } 
	tMesßgeTy≥
;

15 
Mesßge_Inô
();

16 
Mesßge_Fªe
(
MesßgeTy≥
 *
Mesßge
);

17 
MesßgeTy≥
 *
Mesßge_AŒoˇã
(
uöt32_t
 
Àn
);

18 
MesßgeTy≥
 *
Mesßge_Gë
(
uöt32_t
 
id
);

19 
Mesßge_Queue
(
MesßgeTy≥
 *
Mesßge
);

20 
SètusTy≥
 
Mesßge_Síd
(
TaskTy≥
 
TaskID
, 
EvítMaskTy≥
 
Evít
);

	@D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\services\src\message.c

8 
	~<°dio.h
>

9 
	~<°rög.h
>

10 
	~<°dlib.h
>

11 
	~"os.h
"

12 
	~"mesßge.h
"

13 
	~"li°_hód.h
"

15 
MesßgeTy≥
 
	gMesßgeLi°
;

17 
	$Mesßge_Inô
()

19 
	`INIT_LIST_HEAD
(&
MesßgeLi°
.
li°
);

20 
	}
}

22 
MesßgeTy≥
 *
	$Mesßge_AŒoˇã
(
uöt32_t
 
Àn
)

24 
MesßgeTy≥
 *
Mesßge
;

27 
Mesßge
 = (
MesßgeTy≥
 *)
	`mÆloc
((MessageType));

29 if(
Mesßge
 =
NULL
)

31  
NULL
;

35 
Mesßge
->
d©a
 = (
uöt8_t
 *)
	`mÆloc
(
Àn
);

36 
Mesßge
->
Àn
 =Üen;

38 if(
Mesßge
->
d©a
 =
NULL
)

41 
	`‰ì
(
Mesßge
);

42  
NULL
;

45  
Mesßge
;

46 
	}
}

48 
	$Mesßge_Fªe
(
MesßgeTy≥
 *
Mesßge
)

50 if(
Mesßge
 !
NULL
)

52 if(
Mesßge
->
d©a
 !
NULL
)

54 
	`‰ì
(
Mesßge
->
d©a
);

56 
	`‰ì
(
Mesßge
);

57 
Mesßge
 = 
NULL
;

59 
	}
}

61 
MesßgeTy≥
 *
	$Mesßge_Gë
(
uöt32_t
 
id
)

63 
li°_hód
 *
pos
;

64 
MesßgeTy≥
 *
Meßge
;

67 
	`li°_f‹_óch
(
pos
, &
MesßgeLi°
.
li°
)

70 
Meßge
 = 
	`li°_íåy
(
pos
, 
MesßgeTy≥
, 
li°
);

73 i‡(
Meßge
->
id
 == id)

75 
	`li°_dñ
(&
Meßge
->
li°
);

76  
Meßge
;

80  
NULL
;

81 
	}
}

83 
	$Mesßge_Queue
(
MesßgeTy≥
 *
Mesßge
)

86 
	`asm
 ("cpsid i");

89 
	`li°_add
(&(
Mesßge
->
li°
), &(
MesßgeLi°
.list));

92 
	`asm
 ("cpsie i");

93 
	}
}

95 
SètusTy≥
 
	$Mesßge_Síd
(
TaskTy≥
 
TaskID
, 
EvítMaskTy≥
 
Evít
)

97  
	`SëEvít
(
TaskID
, 
Evít
);

98 
	}
}

	@
1
.
0
108
8362
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\doc\README.txt
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\app\blinky\etc\config.oil
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\app\blinky\hardware_init.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\app\blinky\ld\MCIMX6X_M4_tcm.ld
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\app\blinky\main.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\board\udoo_neo\inc\board.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\board\udoo_neo\inc\clock_freq.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\board\udoo_neo\inc\gpio_pins.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\board\udoo_neo\inc\pin_mux.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\board\udoo_neo\inc\shared_clock_node.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\board\udoo_neo\src\board.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\board\udoo_neo\src\clock_freq.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\board\udoo_neo\src\gpio_pins.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\board\udoo_neo\src\pin_mux.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\config\inc\Os_Cfg.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\config\inc\Os_Internal_Cfg.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\config\inc\cortexM4\Os_Internal_Arch_Cfg.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\config\src\Os_Cfg.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\config\src\Os_Internal_Cfg.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\config\src\cortexM4\Os_Internal_Arch_Cfg.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\Compiler.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\Os_Internal.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\Types.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\Types_Arch.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\chip.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\cortexM4\Os_Arch.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\cortexM4\Os_Internal_Arch.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\cortexM4\StartOs_Arch_SysTick.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\cortexM4\stm32f4\Os_Internal_Arch_Cpu.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\inc\os.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\ActivateTask.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\CancelAlarm.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\ChainTask.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\ClearEvent.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\GetActiveApplicationMode.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\GetAlarm.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\GetAlarmBase.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\GetEvent.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\GetResource.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\GetTaskID.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\GetTaskState.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\Os.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\Os_Internal.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\ReleaseResource.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\Schedule.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\SetAbsAlarm.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\SetEvent.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\SetRelAlarm.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\ShutdownOS.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\StartOS.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\TerminateTask.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\WaitEvent.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\cortexM4\Os_Arch.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\cortexM4\Os_Internal_Arch.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\cortexM4\PendSV.S
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\cortexM4\StartOs_Arch.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\os\osek\src\cortexM4\StartOs_Arch_SysTick.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\CMSIS\Include\arm_common_tables.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\CMSIS\Include\arm_const_structs.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\CMSIS\Include\arm_math.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\CMSIS\Include\core_cm0plus.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\CMSIS\Include\core_cm4.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\CMSIS\Include\core_cmFunc.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\CMSIS\Include\core_cmInstr.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\CMSIS\Include\core_cmSimd.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\devices\MCIMX6X\include\MCIMX6X_M4.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\devices\MCIMX6X\startup\gcc\startup_MCIMX6X_M4.S
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\devices\MCIMX6X\startup\system_MCIMX6X_M4.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\devices\MCIMX6X\startup\system_MCIMX6X_M4.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\devices\device_imx.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\adc_imx6sx.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\ccm_analog_imx6sx.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\ccm_imx6sx.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\ecspi.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\epit.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\flexcan.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\gpio_imx.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\i2c_imx.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\lmem.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\mu_imx.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\rdc.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\rdc_defs_imx6sx.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\rdc_semaphore.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\sema4.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\uart_imx.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\inc\wdog_imx.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\adc_imx6sx.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\ccm_analog_imx6sx.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\ccm_imx6sx.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\ecspi.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\epit.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\flexcan.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\gpio_imx.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\i2c_imx.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\lmem.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\mu_imx.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\rdc.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\rdc_semaphore.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\sema4.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\uart_imx.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\drivers\src\wdog_imx.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\utilities\inc\debug_console_imx.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\utilities\src\debug_console_imx.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\utilities\src\print_scan.c
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\platform\utilities\src\print_scan.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\services\inc\list_head.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\services\inc\message.h
D:\Workspace\GIT\ARM-Projects\NEO_M4_OSEK\src\services\src\message.c
